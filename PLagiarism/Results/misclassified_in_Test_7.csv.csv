Code,label,predicted_label
"[""@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .cors(withDefaults())\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/calciatore/list\"").permitAll()\r\n                .anyRequest().authenticated()\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowedOriginPatterns(List.of(\""http://localhost:3000\""));\r\n        config.setAllowedMethods(List.of(\""GET\"", \""POST\"", \""PUT\"", \""DELETE\"", \""OPTIONS\""));\r\n        config.setAllowedHeaders(List.of(\""*\""));\r\n        config.setAllowCredentials(true); // only if you're using cookies/auth\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n        return source;\r\n    }\r\n}""]",0,1
"[""import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.api.trace.Tracer;\r\n\r\npublic Span startSpanFromTraceId(Tracer tracer, String traceId, String spanId) {\r\n    SpanContext remoteSpanContext = SpanContext.createFromRemoteParent(\r\n        traceId,\r\n        spanId,\r\n        TraceFlags.getSampled(),\r\n        TraceState.getDefault()\r\n    );\r\n\r\n    Context remoteContext = Context.root().with(Span.wrap(remoteSpanContext));\r\n\r\n    return tracer.spanBuilder(\""consumeMessage\"")\r\n        .setParent(remoteContext)\r\n        .startSpan();\r\n}\r\n\r\nString traceId = sqsMessage.attributes().get(\""traceId\"");\r\nString spanId = generateValidSpanId(); // 16-char hex string\r\nSpan span = startSpanFromTraceId(tracer, traceId, spanId);\r\ntry (Scope scope = span.makeCurrent()) {\r\n    // do your work here\r\n    span.addEvent(\""Processing message...\"");\r\n} finally {\r\n    span.end();\r\n}""]",0,1
"[""public class Solution {\r\n\r\n    public static int solve(List<Integer> nums) {\r\n        int n = nums.size();\r\n        int[] arr = nums.stream().mapToInt(i -> i).toArray();\r\n\r\n        int[] leftInc = new int[n];\r\n        int[] rightInc = new int[n];\r\n        int[] midDec = new int[n];\r\n\r\n        Arrays.fill(leftInc, 1);\r\n        Arrays.fill(rightInc, 1);\r\n        Arrays.fill(midDec, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (arr[j] < arr[i]) {\r\n                    leftInc[i] = Math.max(leftInc[i], leftInc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (arr[j] > arr[i]) {\r\n                    rightInc[i] = Math.max(rightInc[i], rightInc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (arr[j] > arr[i]) {\r\n                    midDec[i] = Math.max(midDec[i], midDec[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLen = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                if (midDec[j] == 1) continue; // no real decreasing sequence\r\n                for (int k = j; k < n; k++) {\r\n                    int total = leftInc[i] + (midDec[j] - 1) + rightInc[k];\r\n                    maxLen = Math.max(maxLen, total);\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // 6\r\n        System.out.println(solve(List.of(1, 100))); // 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // 7\r\n    }\r\n}""]",0,1
"[""List<?> results = executor.submit(\r\n    () -> IntStream.rangeClosed(from, to)\r\n        .mapToObj(i -> ...)\r\n        .parallel()\r\n        .map(... -> {\r\n            try {\r\n                MDC.put(...);\r\n                return service.call(...);\r\n            } finally {\r\n                MDC.clear();\r\n            }\r\n        })\r\n        .toList()\r\n).get();\r\n\r\nList<Future<?>> futures = IntStream.rangeClosed(from, to)\r\n    .mapToObj(i -> executor.submit(() -> {\r\n        try {\r\n            MDC.put(...);\r\n            return service.call(...);\r\n        } finally {\r\n            MDC.clear();\r\n        }\r\n    }))\r\n    .toList();\r\n\r\nList<?> results = futures.stream()\r\n    .map(future -> {\r\n        try {\r\n            return future.get();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    })\r\n    .toList();\r\n\r\n""]",0,1
"[""var innerChild = new Child.InnerChild().self();\r\n\r\nParent.InnerParent inner = new Child.InnerChild().self(); // boom: access error\r\n\r\nSystem.out.println(innerChild.getClass().getName()); // doesnât compile\r\n\r\nSystem.out.println(((Object) innerChild).getClass().getName());\r\n\r\n""]",0,1
"[""XChangeProperty(..., \r\n    window, \r\n    property, \r\n    6,  // ? This is wrong. This is the \""type\"" argument.\r\n\r\nMemorySegment XA_CARDINAL = Xlib_h.XInternAtom(display, arena.allocateFrom(\""CARDINAL\""), false);\r\nMemorySegment NET_WM_XAPP_PROGRESS = Xlib_h.XInternAtom(display, arena.allocateFrom(\""_NET_WM_XAPP_PROGRESS\""), false);\r\n\r\nXChangeProperty(\r\n    display,\r\n    window,\r\n    NET_WM_XAPP_PROGRESS.address(),\r\n    XA_CARDINAL.address(),\r\n    32,\r\n    PropModeReplace,\r\n    data,\r\n    1\r\n);\r\n\r\nMemorySegment.ofAddress(rawHandle).address()""]",0,1
"[""import java.util.Set;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public static Set<Integer> dividends = new ConcurrentSkipListSet<>();\r\n\r\n    public static class DivisorTask implements Runnable {\r\n        private final int n;\r\n        private final int divisor;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            for (int i = divisor; i <= n; i += divisor) {\r\n                dividends.add(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        executor.execute(new DivisorTask(n, 3));\r\n        executor.execute(new DivisorTask(n, 5));\r\n        executor.execute(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(1, TimeUnit.MINUTES);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n\r\n        int sum = 0;\r\n        for (int i : dividends) {\r\n            sum += i;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        System.out.println(\""Sum = \"" + finder.getSum(1000));  // should be 272066\r\n    }\r\n}""]",0,1
"[""public record AggregateId(@JsonValue UUID id) {\r\n    @JsonCreator\r\n    public static AggregateId from(UUID id) {\r\n        return new AggregateId(id);\r\n    }\r\n}\r\n\r\npublic class Aggregate {\r\n\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(\""aggregateId\"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n{\r\n  \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\""\r\n}""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class Week implements Comparable<Week> {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    public Week(String isoWeek) {\r\n        String[] parts = isoWeek.split(\""-W\"");\r\n        this.year = Integer.parseInt(parts[0]);\r\n        this.week = Integer.parseInt(parts[1]);\r\n    }\r\n\r\n    public LocalDate toLocalDate() {\r\n        return LocalDate\r\n                .of(year, 1, 4)\r\n                .with(WeekFields.ISO.weekOfWeekBasedYear(), week)\r\n                .with(WeekFields.ISO.dayOfWeek(), 1);\r\n    }\r\n\r\n    public long weeksUntil(Week other) {\r\n        return java.time.temporal.ChronoUnit.WEEKS.between(this.toLocalDate(), other.toLocalDate());\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Week other) {\r\n        return this.toLocalDate().compareTo(other.toLocalDate());\r\n    }\r\n\r\n    public boolean isBefore(Week other) {\r\n        return this.compareTo(other) < 0;\r\n    }\r\n\r\n    public boolean isAfter(Week other) {\r\n        return this.compareTo(other) > 0;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(\""%04d-W%02d\"", year, week);\r\n    }\r\n}\r\n\r\nWeek weekA = new Week(\""2012-W48\"");\r\nWeek weekB = new Week(\""2013-W03\"");\r\n\r\nSystem.out.println(weekA.isBefore(weekB)); // true\r\nSystem.out.println(weekA.weeksUntil(weekB)); // 7""]",0,1
"[""public class DemoSecurityProblem {\r\n    public DemoSecurityProblem() {\r\n        if (true) throw new RuntimeException(\""Constructor failed!\"");\r\n    }\r\n\r\n    public void sensitiveOperation() {\r\n        System.out.println(\""Performing sensitive operation!\"");\r\n    }\r\n}\r\n\r\npublic class MaliciousSubClass extends DemoSecurityProblem {\r\n\r\n    public static DemoSecurityProblem resurrected;\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        resurrected = this;\r\n        System.out.println(\""Finalizer hijacked!\"");\r\n    }\r\n}\r\n\r\npublic class FinalizerAttackDemo {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        try {\r\n            new MaliciousSubClass(); // throws in super(), doesn't fully construct\r\n        } catch (Exception ignored) {\r\n        }\r\n\r\n        System.gc();\r\n        Thread.sleep(1000); // wait for finalizer thread\r\n\r\n        if (MaliciousSubClass.resurrected != null) {\r\n            System.out.println(\""Resurrected object: \"" + MaliciousSubClass.resurrected);\r\n            MaliciousSubClass.resurrected.sensitiveOperation();\r\n        } else {\r\n            System.out.println(\""No resurrection occurred\"");\r\n        }\r\n    }\r\n}\r\n\r\nFinalizer hijacked!\r\nResurrected object: MaliciousSubClass@1b6d3586\r\nPerforming sensitive operation!""]",0,1
"[""public static boolean equalSplit(int[] arr) {\r\n    if (arr.length % 2 != 0) return false;\r\n    return equalSplit(arr, 0, 0, 0, 0, 0);\r\n}\r\n\r\nprivate static boolean equalSplit(int[] arr, int i, int sum1, int count1, int sum2, int count2) {\r\n    if (i == arr.length) {\r\n        return count1 == count2 && sum1 == sum2;\r\n    }\r\n\r\n    if (count1 < arr.length / 2) {\r\n        if (equalSplit(arr, i + 1, sum1 + arr[i], count1 + 1, sum2, count2)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (count2 < arr.length / 2) {\r\n        if (equalSplit(arr, i + 1, sum1, count1, sum2 + arr[i], count2 + 1)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(\""TEST\\nTEST\\nTEST\"");\r\n        label.setStyle(\""-fx-background-color: green; -fx-padding: 20px;\"");\r\n\r\n        Tooltip tooltip = new Tooltip(\""TOOLTIP\"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        tooltip.setAutoHide(true);\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_EXITED, e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}""]",0,1
"[""@ParameterizedTest\r\n@MethodSource(\""hashMapProvider\"")\r\nvoid testMyMapObj(Map<String, Object> argument) {\r\n    assertNotNull(argument);\r\n    Object obj1 = argument.get(\""1\"");\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\""1\"", \""Obj1\"");\r\n    map.put(\""2\"", \""Obj2\"");\r\n    return Stream.of(map);\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\n    Map<String, Object> map1 = Map.of(\""1\"", \""Obj1\"", \""2\"", \""Obj2\"");\r\n    Map<String, Object> map2 = Map.of(\""3\"", \""Obj3\"", \""4\"", \""Obj4\"");\r\n    return Stream.of(map1, map2);\r\n}""]",0,1
"[""public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = \""Great\"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n\r\n        char[] string = string1.toCharArray();  \r\n        System.out.println(\""Duplicate characters in a given string:\"");  \r\n\r\n        for (int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for (int j = i + 1; j < string.length; j++) {  \r\n                if (string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if (count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n\r\n        if (!hasDuplicates) {\r\n            System.out.println(\""no duplicates\"");\r\n        }\r\n    }  \r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private double rotation = 0;\r\n\r\n    public void start(Stage primaryStage) {\r\n        Arc blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        Arc greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        Arc yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        Arc redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(\""Rotate Right\"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(\""-fx-background-color: GRAY\"");\r\n\r\n        Scene scene = new Scene(pane, 500, 400);\r\n        primaryStage.setTitle(\""Four-Color Wheel\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotation += 90;\r\n        circle.setRotate(rotation);\r\n    }\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DrawModeSwitcher extends Application {\r\n\r\n    private DrawMode[] modes = {DrawMode.FILL, DrawMode.LINE};\r\n    private int modeIndex = 0;\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Sphere sphere = new Sphere(100);\r\n        sphere.setMaterial(new PhongMaterial(Color.CORNFLOWERBLUE));\r\n        sphere.setCullFace(CullFace.NONE);\r\n        sphere.setDrawMode(modes[modeIndex]);\r\n\r\n        Group group = new Group(sphere);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-500);\r\n\r\n        Scene scene = new Scene(group, 800, 600, true);\r\n        scene.setCamera(camera);\r\n        scene.setFill(Color.GRAY);\r\n\r\n        scene.setOnKeyPressed(e -> {\r\n            modeIndex = (modeIndex + 1) % modes.length;\r\n            sphere.setDrawMode(modes[modeIndex]);\r\n        });\r\n\r\n        stage.setScene(scene);\r\n        stage.setTitle(\""Draw Mode Switcher (Press any key)\"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        ScopedValue.runWhere(NAME, \""haha\"", () -> {\r\n            try (var scope = new StructuredTaskScope<Void>()) {\r\n                scope.fork(() -> {\r\n                    System.out.println(\""Scoped value: \"" + NAME.get());\r\n                    return null;\r\n                });\r\n                scope.join();\r\n                scope.throwIfFailed();\r\n            }\r\n        });\r\n    }\r\n}""]",0,1
"[""public Label createTestLabel() {\r\n    Label testLabel = new Label(\""Placeholder\\nText\"");\r\n    testLabel.getStyleClass().add(\""test-label\"");\r\n    testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n    testLabel.setOnMouseEntered(e -> doSomething());\r\n    testLabel.setOnMouseExited(e -> doSomethingElse());\r\n\r\n    // Force preferred size calculation\r\n    testLabel.applyCss();\r\n    testLabel.layout();\r\n\r\n    Bounds visualBounds = testLabel.getLayoutBounds();\r\n\r\n    Rectangle clip = new Rectangle(visualBounds.getWidth(), visualBounds.getHeight());\r\n    testLabel.setClip(clip);\r\n\r\n    Group wrapper = new Group(testLabel);\r\n    wrapper.setManaged(false);\r\n    wrapper.setLayoutX(100); // adjust as needed\r\n    wrapper.setLayoutY(100);\r\n\r\n    root.getChildren().add(wrapper);\r\n    return testLabel;\r\n}""]",0,1
"[""public class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        ColumnConstraints sharedLabelColumn = new ColumnConstraints();\r\n        sharedLabelColumn.setHgrow(Priority.NEVER);\r\n\r\n        ColumnConstraints controlColumn = new ColumnConstraints();\r\n        controlColumn.setHgrow(Priority.ALWAYS);\r\n\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.getColumnConstraints().addAll(sharedLabelColumn, controlColumn);\r\n        gridPane1.setHgap(20);\r\n        gridPane1.add(new Label(\""One two three\""), 0, 0);\r\n        gridPane1.add(new TextField(), 1, 0);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.getColumnConstraints().addAll(sharedLabelColumn, new ColumnConstraints());\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(new Label(\""Four five six seven\""), 0, 0);\r\n        gridPane2.add(new TextField(), 1, 0);\r\n\r\n        TitledPane titledPane1 = new TitledPane(\""Top\"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        TitledPane titledPane2 = new TitledPane(\""Bottom\"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        VBox root = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""public class UpwardMenuDemo extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Button menuButton = new Button(\""Menu\"");\r\n        ContextMenu menu = new ContextMenu();\r\n        menu.getItems().addAll(\r\n            new MenuItem(\""Option 1\""),\r\n            new MenuItem(\""Option 2\""),\r\n            new MenuItem(\""Option 3\"")\r\n        );\r\n\r\n        menuButton.setOnAction(e -> {\r\n            Bounds bounds = menuButton.localToScreen(menuButton.getBoundsInLocal());\r\n            double x = bounds.getMinX();\r\n            double y = bounds.getMinY() - menu.getHeight(); // shift upward\r\n            menu.show(menuButton, x, y);\r\n        });\r\n\r\n        VBox root = new VBox();\r\n        Region spacer = new Region();\r\n        VBox.setVgrow(spacer, Priority.ALWAYS);\r\n        root.getChildren().addAll(spacer, menuButton);\r\n\r\n        Scene scene = new Scene(root, 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""for (int i = 1; i <= numberOfPages; i++) {\r\n    Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n    PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n    PdfGState state = new PdfGState();\r\n    state.setFillOpacity(0.3f);\r\n    overContent.saveState();\r\n    overContent.setGState(state);\r\n    overContent.beginText();\r\n    overContent.setFontAndSize(baseFont, 13);\r\n\r\n    for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n        for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n            String reversed = new StringBuilder(watermarkText).reverse().toString();\r\n            overContent.showTextAlignedKerned(Element.ALIGN_CENTER, reversed, x, y, 45f);\r\n        }\r\n    }\r\n\r\n    overContent.endText();\r\n    overContent.restoreState();\r\n}""]",0,1
"["" @RestController\r\npublic class SecureController {\r\n\r\n  @GetMapping(\""/secure\"")\r\n  public String secured() {\r\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n    return \""Hello, \"" + auth.getName();\r\n  }\r\n}\r\n\r\npublic String doAsync() {\r\n  CompletableFuture.runAsync(() -> {\r\n    var auth = SecurityContextHolder.getContext().getAuthentication(); // nope, not safe\r\n  });\r\n  return \""fired\"";\r\n}\r\n\r\nvar context = SecurityContextHolder.getContext();\r\nCompletableFuture.runAsync(() -> {\r\n  SecurityContextHolder.setContext(context);\r\n  try {\r\n    // your logic\r\n  } finally {\r\n    SecurityContextHolder.clearContext();\r\n  }\r\n});""]",0,1
"[""public class Grid extends GridPane {\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        setHgap(horizontalGap);\r\n        setVgap(verticalGap);\r\n        setAlignment(Pos.CENTER);\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                TextField tf = new TextField();\r\n                tf.setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                tf.setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                add(tf, col, row);\r\n            }\r\n        }\r\n    }\r\n}""]",0,1
"["" @Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n        configurer\r\n            .favorPathExtension(false)\r\n            .favorParameter(false)\r\n            .ignoreAcceptHeader(false)\r\n            .defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}""]",0,1
"[""@Bean\r\npublic JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n    JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n    grantedAuthoritiesConverter.setAuthorityPrefix(\""ROLE_\""); // optional, defaults to SCOPE_\r\n    grantedAuthoritiesConverter.setAuthoritiesClaimName(\""scope\""); // this must match your token\r\n\r\n    JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\r\n    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\r\n    return jwtAuthenticationConverter;\r\n}\r\n\r\n.oauth2ResourceServer(oauth2 -> oauth2\r\n    .jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter()))\r\n)\r\n\r\n@PreAuthorize(\""hasRole('USER')\"")""]",0,1
"[""PDFDocument doc = new PDFDocument();\r\nPSConverter converter = new PSConverter();\r\n\r\npublic class YourService {\r\n    private final Supplier<PDFDocument> pdfDocumentSupplier;\r\n    private final Supplier<PSConverter> psConverterSupplier;\r\n\r\n    public YourService(Supplier<PDFDocument> pdfDocumentSupplier, Supplier<PSConverter> psConverterSupplier) {\r\n        this.pdfDocumentSupplier = pdfDocumentSupplier;\r\n        this.psConverterSupplier = psConverterSupplier;\r\n    }\r\n\r\n    public void doStuff(InputStream input, OutputStream output) {\r\n        PDFDocument pdfDocument = pdfDocumentSupplier.get();\r\n        PSConverter converter = psConverterSupplier.get();\r\n        // ... rest of your logic\r\n    }\r\n}\r\n\r\nPDFDocument mockPdf = mock(PDFDocument.class);\r\nPSConverter mockConverter = mock(PSConverter.class);\r\n\r\nYourService service = new YourService(() -> mockPdf, () -> mockConverter);\r\n\r\ndoNothing().when(mockPdf).load(any(ByteArrayInputStream.class));\r\n\r\ndoAnswer(invocation -> {\r\n    ByteArrayOutputStream out = invocation.getArgument(1);\r\n    out.write(content);\r\n    return null;\r\n}).when(mockConverter).convert(any(), any(ByteArrayOutputStream.class));""]",0,1
"[""@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(auth -> auth\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .authenticationEntryPoint(new CustomAuthEntryPoint())\r\n                .authenticationManagerResolver(customManagerResolver())\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    private AuthenticationManagerResolver<HttpServletRequest> customManagerResolver() {\r\n        return request -> {\r\n            JwtDecoder jwtDecoder = JwtDecoders.fromIssuerLocation(\""https://your-issuer.com\"");\r\n\r\n            JwtAuthenticationProvider provider = new JwtAuthenticationProvider(jwtDecoder);\r\n            provider.setJwtAuthenticationConverter(new CustomJwtConverter());\r\n\r\n            ProviderManager manager = new ProviderManager(provider);\r\n            manager.setAuthenticationFailureHandler(new JwtAuthFailureHandler());\r\n\r\n            return manager;\r\n        };\r\n    }\r\n}\r\n\r\npublic class JwtAuthFailureHandler implements AuthenticationFailureHandler {\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request,\r\n                                        HttpServletResponse response,\r\n                                        AuthenticationException exception) throws IOException {\r\n        // custom logging goes here\r\n        System.out.println(\""JWT Auth failed: \"" + exception.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \""Unauthorized\"");\r\n    }\r\n}""]",0,1
"[""public Page<Product> searchProducts(String searchTerm, int page, int size) {\r\n    Pageable pageable = PageRequest.of(page, size);\r\n\r\n    Criteria baseCriteria = Criteria.where(\""companyNo\"").in(List.of(10000009))\r\n        .and(\""status\"").in(List.of(\""ACTIVE\"", \""IN_ACTIVE\"", \""OUT_OF_STOCK\""));\r\n\r\n    String regex = \"".*\"" + Pattern.quote(searchTerm) + \"".*\"";\r\n\r\n    List<Criteria> searchCriteria = List.of(\r\n        Criteria.where(\""productName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""subCategoryName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""categoryName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""brandName\"").regex(regex, \""i\"")\r\n    );\r\n\r\n    Criteria finalCriteria = new Criteria().andOperator(\r\n        baseCriteria,\r\n        new Criteria().orOperator(searchCriteria.toArray(new Criteria[0]))\r\n    );\r\n\r\n    Query query = new Query(finalCriteria).with(pageable);\r\n    List<Product> products = mongoTemplate.find(query, Product.class);\r\n    long total = mongoTemplate.count(Query.of(query).limit(-1).skip(-1), Product.class);\r\n\r\n    return new PageImpl<>(products, pageable, total);\r\n}\r\n\r\nString[] words = searchTerm.split(\""\\\\s+\"");\r\nList<Criteria> wordCriteria = Arrays.stream(words)\r\n    .map(word -> new Criteria().orOperator(\r\n        Criteria.where(\""productName\"").regex(word, \""i\""),\r\n        Criteria.where(\""subCategoryName\"").regex(word, \""i\""),\r\n        Criteria.where(\""categoryName\"").regex(word, \""i\""),\r\n        Criteria.where(\""brandName\"").regex(word, \""i\"")\r\n    ))\r\n    .toList();\r\nCriteria finalCriteria = new Criteria().andOperator(baseCriteria, new Criteria().andOperator(wordCriteria));""]",0,1
"[""@Benchmark\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(NANOSECONDS)\r\npublic void indexed(Blackhole blackhole, TestState testState) {\r\n    int[] vals = testState.values;\r\n    int len = vals.length;\r\n    for (int i = 0; i < len; i++) {\r\n        blackhole.consume(vals[i]);\r\n    }\r\n}\r\n\r\n@Benchmark\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(NANOSECONDS)\r\npublic void enhanced(Blackhole blackhole, TestState testState) {\r\n    for (int val : testState.values) {\r\n        blackhole.consume(val);\r\n    }\r\n}\r\n\r\n@State(Scope.Thread)\r\npublic static class TestState {\r\n    public int[] values;\r\n\r\n    @Setup(Level.Iteration)\r\n    public void setup() {\r\n        values = new int[10_000];\r\n        ThreadLocalRandom.current().ints(values.length).forEach(i -> values[i % values.length] = i);\r\n    }\r\n}""]",0,1
"[""public MeshView createTexturedSphere(double radius, int divisions) {\r\n    TriangleMesh mesh = new TriangleMesh();\r\n\r\n    for (int y = 0; y <= divisions; y++) {\r\n        double v = (double) y / divisions;\r\n        double phi = Math.PI * v;\r\n        for (int x = 0; x <= divisions; x++) {\r\n            double u = (double) x / divisions;\r\n            double theta = 2 * Math.PI * u;\r\n            float px = (float) (radius * Math.sin(phi) * Math.cos(theta));\r\n            float py = (float) (radius * Math.cos(phi));\r\n            float pz = (float) (radius * Math.sin(phi) * Math.sin(theta));\r\n            mesh.getPoints().addAll(px, py, pz);\r\n            mesh.getTexCoords().addAll((float) u, (float) v);\r\n        }\r\n    }\r\n\r\n    for (int y = 0; y < divisions; y++) {\r\n        for (int x = 0; x < divisions; x++) {\r\n            int p0 = y * (divisions + 1) + x;\r\n            int p1 = p0 + 1;\r\n            int p2 = p0 + (divisions + 1);\r\n            int p3 = p2 + 1;\r\n\r\n            mesh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n            mesh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n        }\r\n    }\r\n\r\n    MeshView view = new MeshView(mesh);\r\n    PhongMaterial mat = new PhongMaterial();\r\n    mat.setDiffuseMap(new Image(getClass().getResourceAsStream(\""/images/earth2.jpg\"")));\r\n    view.setMaterial(mat);\r\n    return view;\r\n}""]",0,1
"[""@Configuration\r\nclass ConcurrencyLimiterConfig {\r\n\r\n    @Bean\r\n    fun requestSemaphore(): Semaphore {\r\n        return Semaphore(50) // match your hikari maximum-pool-size\r\n    }\r\n\r\n    @Bean\r\n    fun concurrencyLimitingFilter(semaphore: Semaphore): FilterRegistrationBean<ConcurrencyLimitingFilter> {\r\n        val registration = FilterRegistrationBean(ConcurrencyLimitingFilter(semaphore))\r\n        registration.order = Ordered.HIGHEST_PRECEDENCE\r\n        return registration\r\n    }\r\n}\r\n\r\nclass ConcurrencyLimitingFilter(private val semaphore: Semaphore) : Filter {\r\n    override fun doFilter(request: ServletRequest, response: ServletResponse, chain: FilterChain) {\r\n        if (!semaphore.tryAcquire()) {\r\n            (response as HttpServletResponse).sendError(HttpStatus.TOO_MANY_REQUESTS.value(), \""Too many concurrent requests\"")\r\n            return\r\n        }\r\n        try {\r\n            chain.doFilter(request, response)\r\n        } finally {\r\n            semaphore.release()\r\n        }\r\n    }\r\n}""]",0,1
"[""@Override\r\npublic void start(Stage stage) throws Exception {\r\n    Pane pane = new Pane();\r\n\r\n    Region background = new Region();\r\n    background.setStyle(\""-fx-background-color: red;\"");\r\n    background.setPrefSize(500, 500);\r\n\r\n    Button testButton = new Button(\""Test\"");\r\n    testButton.setStyle(\""-fx-background-color: green;\"");\r\n    testButton.setLayoutX(200);\r\n    testButton.setLayoutY(200);\r\n\r\n    pane.getChildren().addAll(background, testButton);\r\n\r\n    FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n    transition.setFromValue(1.0);\r\n    transition.setToValue(0.0);\r\n    transition.setCycleCount(Timeline.INDEFINITE);\r\n    transition.setAutoReverse(true);\r\n    transition.play();\r\n\r\n    Scene scene = new Scene(pane, 500, 500);\r\n\r\n    stage.setMinWidth(500);\r\n    stage.setMinHeight(500);\r\n    stage.setTitle(\""Test\"");\r\n    stage.setResizable(false);\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}""]",0,1
"[""import com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.nio.file.Path;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CreateQRWithText {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = \""https://example.com/your_event\"";\r\n            String filePath = \""C:\\\\Users\\\\Nirmalw\\\\Desktop\\\\Projects\\\\QR\\\\test\\\\test_img\\\\my_QR_with_text.png\"";\r\n            String charset = \""UTF-8\"";\r\n            String userName = \""John Doe\"";\r\n            String eventName = \""Tech Conference 2025\"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            int textHeight = 100;\r\n            int width = qrImage.getWidth();\r\n            int height = qrImage.getHeight() + textHeight;\r\n\r\n            BufferedImage combined = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, width, height);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(\""Arial\"", Font.PLAIN, 20));\r\n            FontMetrics fm = g.getFontMetrics();\r\n            int userNameWidth = fm.stringWidth(userName);\r\n            int eventNameWidth = fm.stringWidth(eventName);\r\n\r\n            g.drawString(userName, (width - userNameWidth) / 2, qrImage.getHeight() + 30);\r\n            g.drawString(eventName, (width - eventNameWidth) / 2, qrImage.getHeight() + 60);\r\n\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, \""png\"", new File(filePath));\r\n            System.out.println(\""QR Code with text created successfully!\"");\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}""]",0,1
"[""@Service\r\n@RequiredArgsConstructor\r\npublic class DirectoryWatcherService {\r\n\r\n    private final WatchService watchService;\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try {\r\n                WatchKey key = watchService.take();\r\n                for (WatchEvent<?> event : key.pollEvents()) {\r\n                    try {\r\n                        // your logic here\r\n                    } catch (Exception e) {\r\n                        // log and continue with next event\r\n                        System.err.println(\""Error processing file event: \"" + e.getMessage());\r\n                    }\r\n                }\r\n                key.reset();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n                break;\r\n            } catch (Exception e) {\r\n                // log the exception, maybe sleep a bit before retrying\r\n                System.err.println(\""WatchService error, will retry: \"" + e.getMessage());\r\n                try {\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException interruptedException) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}""]",0,1
"[""import com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class SnakeToCamelMap {\r\n    public static void main(String[] args) throws Exception {\r\n        Map<String, Integer> original = Map.of(\r\n            \""test_first\"", 1,\r\n            \""test_second\"", 2\r\n        );\r\n\r\n        Map<String, Integer> transformed = original.entrySet().stream()\r\n            .collect(Collectors.toMap(\r\n                e -> toCamelCase(e.getKey()),\r\n                Map.Entry::getValue\r\n            ));\r\n\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(transformed);\r\n        System.out.println(json);\r\n    }\r\n\r\n    private static String toCamelCase(String snake) {\r\n        StringBuilder result = new StringBuilder();\r\n        boolean upperNext = false;\r\n        for (char c : snake.toCharArray()) {\r\n            if (c == '_') {\r\n                upperNext = true;\r\n            } else {\r\n                result.append(upperNext ? Character.toUpperCase(c) : c);\r\n                upperNext = false;\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}""]",0,1
"["" @Configuration\r\npublic class CorsConfig {\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer(){\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(\""/**\"").allowedOrigins(\""*\"").allowedMethods(\""*\"");\r\n            }\r\n        };\r\n    }\r\n}""]",0,1
"[""public class NonStrictDemo {\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e-308;\r\n\r\n        double c = a + b; // b is too small to affect a in 64-bit, but not in 80-bit\r\n        double d = c - a; // if 80-bit precision was used, d could be non-zero\r\n\r\n        System.out.println(\""d = \"" + d);\r\n    }\r\n}\r\n\r\npublic strictfp class StrictDemo {\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e-308;\r\n\r\n        double c = a + b;\r\n        double d = c - a;\r\n\r\n        System.out.println(\""d = \"" + d);\r\n    }\r\n}""]",0,1
"[""public class BulletSpriteCache {\r\n    private final BufferedImage[] cachedRotations;\r\n    private final int rotationSteps;\r\n\r\n    public BulletSpriteCache(BufferedImage baseSprite, int rotationSteps) {\r\n        this.rotationSteps = rotationSteps;\r\n        this.cachedRotations = new BufferedImage[rotationSteps];\r\n\r\n        for (int i = 0; i < rotationSteps; i++) {\r\n            double angle = 360.0 * i / rotationSteps;\r\n            cachedRotations[i] = rotateImage(baseSprite, angle);\r\n        }\r\n    }\r\n\r\n    private BufferedImage rotateImage(BufferedImage img, double angle) {\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.rotate(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n        g2d.drawImage(img, 0, 0, null);\r\n        g2d.dispose();\r\n        return rotated;\r\n    }\r\n\r\n    public BufferedImage getSpriteForAngle(double angle) {\r\n        int index = (int) ((angle % 360 + 360) % 360 / 360.0 * rotationSteps);\r\n        return cachedRotations[index];\r\n    }\r\n}\r\n\r\npublic class Bullet {\r\n    private final BulletSpriteCache spriteCache;\r\n    private final double angle;\r\n\r\n    public Bullet(BulletSpriteCache cache, double angle) {\r\n        this.spriteCache = cache;\r\n        this.angle = angle;\r\n    }\r\n\r\n    public void draw(Graphics g, int x, int y) {\r\n        BufferedImage sprite = spriteCache.getSpriteForAngle(angle);\r\n        g.drawImage(sprite, x, y, null);\r\n    }\r\n}""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(\""[a-zA-Z ]+\"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + \"" is an invalid sentence\"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(\""\\\\s+\"");\r\n\r\n        if (words.length <= 2) {\r\n            return \""Invalid Length\"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n\r\n        StringBuilder middle = new StringBuilder();\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            middle.append(words[i]);\r\n            if (i != words.length - 2) {\r\n                middle.append(\"" \"");\r\n            }\r\n        }\r\n\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(lastWord).append(\"" \"");\r\n        result.append(new StringBuilder(middle.toString()).reverse()).append(\"" \"");\r\n        result.append(firstWord);\r\n\r\n        return result.toString();\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\""Enter the sentence\"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        System.out.println(result);\r\n\r\n        sc.close();\r\n    }\r\n}\r\n\r\nDo you wear your mask\r\n\r\nmask ruoy raew uoy Do""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Skin;\r\nimport javafx.scene.control.skin.ComboBoxListViewSkin;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(\""Option 1\"", \""Option 2\"", \""Option 3\"");\r\n        comboBox.getStyleClass().add(\""yellowed\"");\r\n\r\n        comboBox.showingProperty().addListener((obs, wasShowing, isNowShowing) -> {\r\n            if (isNowShowing) {\r\n                Skin<?> skin = comboBox.getSkin();\r\n                if (skin instanceof ComboBoxListViewSkin<?>) {\r\n                    ComboBoxListViewSkin<?> cbSkin = (ComboBoxListViewSkin<?>) skin;\r\n                    cbSkin.getPopupContent().getStyleClass().add(\""yellowed\"");\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(\""test.css\"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.list-view.yellowed .list-cell {\r\n    -fx-background-color: yellow;\r\n}""]",0,1
"[""try (MockedConstruction<PageImpl> pageMockedConstruction =\r\n         Mockito.mockConstruction(PageImpl.class,\r\n             withSettings().useConstructor(reportPageResponses, pageable, 9999L),\r\n             (mock, context) -> {\r\n                 when(mock.getTotalElements()).thenReturn(123456L);\r\n                 when(mock.getTotalPages()).thenReturn(1);\r\n                 when(mock.getContent()).thenReturn(reportPageResponses);\r\n             })) {\r\n\r\n    Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n\r\n    PageImpl<ReportPageResponse> expected = pageMockedConstruction.constructed().get(0);\r\n\r\n    Assertions.assertThat(actual).isSameAs(expected);\r\n}""]",0,1
"[""import javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Text text = new Text(\""Hello there StackOverflow, how are you? (:\"");\r\n        text.setFont(Font.font(16));\r\n\r\n        ObjectProperty<Color> color = new SimpleObjectProperty<>(Color.RED);\r\n        text.fillProperty().bind(color);\r\n\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.ZERO,\r\n                new KeyValue(color, Color.RED)\r\n            ),\r\n            new KeyFrame(Duration.seconds(2),\r\n                new KeyValue(color, Color.BLUE)\r\n            )\r\n        );\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.setAutoReverse(true);\r\n        timeline.play();\r\n\r\n        StackPane root = new StackPane(text);\r\n        Scene scene = new Scene(root, 400, 400);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""@Component\r\n@ConfigurationProperties(prefix = \""root\"")\r\npublic class RootProperties {\r\n    private final Map<String, String> props = new HashMap<>();\r\n\r\n    public Map<String, String> getProps() {\r\n        return props;\r\n    }\r\n}\r\n\r\nroot.prop=xxxx\r\nroot.prop2=yyyy\r\nroot.prop3=zzzz\r\n\r\n@Autowired\r\nprivate RootProperties rootProperties;\r\n\r\npublic void doStuff() {\r\n    Map<String, String> map = rootProperties.getProps();\r\n    // do something with your map\r\n}""]",0,1
"[""OkHttpClient client = new OkHttpClient();\r\n\r\nRequestBody formBody = new FormBody.Builder()\r\n    .add(\""grant_type\"", \""client_credentials\"")\r\n    .add(\""client_id\"", \""your-client-id\"")\r\n    .add(\""client_secret\"", \""your-client-secret\"")\r\n    .build();\r\n\r\nRequest request = new Request.Builder()\r\n    .url(\""https://auth.example.com/oauth/token\"")\r\n    .post(formBody)\r\n    .build();\r\n\r\ntry (Response response = client.newCall(request).execute()) {\r\n    if (!response.isSuccessful()) throw new IOException(\""Unexpected code \"" + response);\r\n\r\n    String responseBody = response.body().string();\r\n    JSONObject json = new JSONObject(responseBody);\r\n    String accessToken = json.getString(\""access_token\"");\r\n\r\n    // now use the token\r\n    Request apiRequest = new Request.Builder()\r\n        .url(\""https://api.example.com/some-protected-endpoint\"")\r\n        .header(\""Authorization\"", \""Bearer \"" + accessToken)\r\n        .build();\r\n\r\n    try (Response apiResponse = client.newCall(apiRequest).execute()) {\r\n        System.out.println(apiResponse.body().string());\r\n    }\r\n}""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.*;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\nimport com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration;\r\nimport com.github.javaparser.symbolsolver.JavaSymbolSolver;\r\nimport com.github.javaparser.symbolsolver.model.resolution.TypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;\r\n\r\nimport java.io.File;\r\nimport java.util.*;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        File projectDir = new File(\""src/main/java\"");\r\n        File sourceFile = new File(projectDir, \""Example.java\"");\r\n\r\n        TypeSolver typeSolver = new CombinedTypeSolver(\r\n                new ReflectionTypeSolver(),\r\n                new JavaParserTypeSolver(projectDir)\r\n        );\r\n\r\n        StaticJavaParser.getConfiguration().setSymbolResolver(new JavaSymbolSolver(typeSolver));\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(\""Class: \"" + classDecl.getNameAsString());\r\n\r\n            Set<String> fieldNames = new HashSet<>();\r\n            classDecl.findAll(FieldDeclaration.class).forEach(fd ->\r\n                    fd.getVariables().forEach(var -> fieldNames.add(var.getNameAsString()))\r\n            );\r\n\r\n            classDecl.findAll(MethodDeclaration.class).forEach(method -> {\r\n                System.out.println(\""  Method: \"" + method.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                method.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(AssignExpr n, Void arg) {\r\n                        Expression target = n.getTarget();\r\n                        if (target.isNameExpr()) {\r\n                            String name = target.asNameExpr().getNameAsString();\r\n                            if (fieldNames.contains(name)) writeFields.add(name);\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        Expression expr = n.getExpression();\r\n                        if (expr.isNameExpr()) {\r\n                            String name = expr.asNameExpr().getNameAsString();\r\n                            if (fieldNames.contains(name)) {\r\n                                writeFields.add(name);\r\n                                readFields.add(name);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        String name = n.getNameAsString();\r\n                        if (fieldNames.contains(name)) {\r\n                            readFields.add(name);\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n                }, null);\r\n\r\n                System.out.println(\""    Read Fields: \"" + readFields);\r\n                System.out.println(\""    Write Fields: \"" + writeFields);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nClass: Example\r\n  Method: method1\r\n    Read Fields: [field2]\r\n    Write Fields: [field1]\r\n  Method: method2\r\n    Read Fields: []\r\n    Write Fields: [field2]""]",0,1
"["" @Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Annotation {\r\n    Class<?> className() default Void.class;\r\n}\r\n\r\npublic class AnotherClass {}\r\n\r\npublic class Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = String.class)\r\n    private String overrideAttribute;\r\n}\r\n\r\nfor (Field field : Main.class.getDeclaredFields()) {\r\n    Annotation ann = field.getAnnotation(Annotation.class);\r\n    if (ann != null) {\r\n        Class<?> actualClass = ann.className() == Void.class ? field.getType() : ann.className();\r\n        System.out.println(field.getName() + \"" -> \"" + actualClass.getSimpleName());\r\n    }\r\n}\r\n\r\nannotatedAttribute -> AnotherClass\r\noverrideAttribute -> String""]",0,1
"[""Trees trees = Trees.instance(processingEnv);\r\nTreePath path = trees.getPath(element); // `element` being the method or class\r\nCompilationUnitTree cu = path.getCompilationUnit();\r\nTreeScanner<Void, Void> scanner = new TreeScanner<Void, Void>() {\r\n    @Override\r\n    public Void visitSwitch(SwitchTree switchTree, Void aVoid) {\r\n        ExpressionTree expr = switchTree.getExpression();\r\n        TreePath exprPath = TreePath.getPath(cu, expr);\r\n        TypeMirror type = trees.getTypeMirror(exprPath);\r\n\r\n        if (type != null) {\r\n            System.out.println(\""Switch expression type: \"" + type);\r\n        }\r\n        return super.visitSwitch(switchTree, aVoid);\r\n    }\r\n};\r\nscanner.scan(cu, null);""]",0,1
"["" @Component\r\n@Scope(\""prototype\"")\r\npublic class MyListItemController {\r\n    // your code\r\n}\r\n\r\nFXMLLoader fxmlLoader = new FXMLLoader(PATH_TO_FXML);\r\nfxmlLoader.setControllerFactory(applicationContext::getBean);\r\nVBox listItem = fxmlLoader.load();\r\ncontentArea.getChildren().add(listItem);\r\n\r\n""]",0,1
"[""double x = r.get(i) * Math.cos(Math.toRadians(nodes.get(i)));\r\ndouble y = r.get(i) * Math.sin(Math.toRadians(nodes.get(i)));\r\n\r\nList<Point> points = new ArrayList<>();\r\nfor (int i = 0; i < r.size(); i++) {\r\n    double angle = nodes.get(i);\r\n    double radius = r.get(i);\r\n    points.add(new Point(angle, radius));\r\n}\r\n\r\npoints.sort(Comparator.comparingDouble(p -> p.angle));\r\n\r\nfor (Point p : points) {\r\n    double x = p.radius * Math.cos(Math.toRadians(p.angle));\r\n    double y = p.radius * Math.sin(Math.toRadians(p.angle));\r\n    series1.getData().add(new XYChart.Data<>(x, y));\r\n}\r\n\r\nprivate static class Point {\r\n    double angle;\r\n    double radius;\r\n\r\n    Point(double angle, double radius) {\r\n        this.angle = angle;\r\n        this.radius = radius;\r\n    }\r\n}""]",0,1
"[""import android.app.Dialog;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n\r\n        return inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n\r\n        Dialog dialog = getDialog();\r\n        if (dialog instanceof BottomSheetDialog) {\r\n            BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialog;\r\n\r\n            View bottomSheet = bottomSheetDialog\r\n                    .findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n\r\n            if (bottomSheet != null) {\r\n                BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\n                behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                behavior.setSkipCollapsed(true);\r\n\r\n                ViewGroup.LayoutParams layoutParams = bottomSheet.getLayoutParams();\r\n                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n                bottomSheet.setLayoutParams(layoutParams);\r\n            }\r\n        }\r\n    }\r\n}""]",0,1
"[""public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(\""BUSINESS\""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .findFirst()\r\n        .orElseThrow(() -> new RuntimeException(\""NO BUSINESS OBJECT FOUND\""))\r\n        .getUrl();\r\n\r\n    // or with full fallback chain:\r\n    return listOfObjects.stream()\r\n        .filter(obj -> obj.objectType().equals(\""BUSINESS\""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .collect(Collectors.collectingAndThen(Collectors.toList(), businessList -> {\r\n\r\n            if (businessList.isEmpty()) {\r\n                throw new RuntimeException(\""NO BUSINESS OBJECT FOUND\"");\r\n            }\r\n\r\n            return businessList.stream()\r\n                .filter(obj -> obj.objectStatus().equals(\""ACTIVE\""))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .collect(Collectors.collectingAndThen(Collectors.toList(), activeList -> {\r\n\r\n                    if (activeList.isEmpty()) {\r\n                        return businessList.get(0).getUrl();\r\n                    }\r\n\r\n                    return activeList.stream()\r\n                        .filter(obj -> obj.locale().equals(\""en-US\""))\r\n                        .sorted(Comparator.comparing(CustomObject::url))\r\n                        .map(CustomObject::getUrl)\r\n                        .findFirst()\r\n                        .orElse(activeList.get(0).getUrl());\r\n                }));\r\n        }));\r\n}""]",0,1
"[""public class ExampleApp extends Application {\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(\""-color1: green; -color2: orange;\"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, \""-color1\"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, \""-color2\"", Color.BLUE\r\n        );\r\n\r\n        Timeline timeline;\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n\r\n            sceneProperty().addListener((obs, oldScene, newScene) -> {\r\n                if (newScene != null) {\r\n                    Platform.runLater(this::startAnimation);\r\n                } else {\r\n                    if (timeline != null) timeline.stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void startAnimation() {\r\n            setFill(color1.get());\r\n\r\n            if (timeline != null) timeline.stop();\r\n\r\n            timeline = new Timeline(\r\n                new KeyFrame(Duration.ZERO,\r\n                    new KeyValue(fillProperty(), color1.get(), Interpolator.LINEAR)),\r\n                new KeyFrame(Duration.seconds(1),\r\n                    new KeyValue(fillProperty(), color2.get(), Interpolator.LINEAR))\r\n            );\r\n            timeline.setCycleCount(Animation.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            timeline.play();\r\n        }\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 =\r\n                new CssMetaData<>(\""-color1\"", PaintConverter.getInstance(), Color.RED) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect node) {\r\n                        return !node.color1.isBound();\r\n                    }\r\n\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                        return node.color1;\r\n                    }\r\n                };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 =\r\n                new CssMetaData<>(\""-color2\"", PaintConverter.getInstance(), Color.BLUE) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect node) {\r\n                        return !node.color2.isBound();\r\n                    }\r\n\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                        return node.color2;\r\n                    }\r\n                };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES =\r\n                List.of(COLOR1, COLOR2);\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}""]",0,1
"["" @GetMapping(path = \""/file\"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(\r\n        @RequestParam String fileName,\r\n        @RequestParam String bucketName,\r\n        @RequestParam String projectName) {\r\n\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n\r\n    if (blob == null || !blob.exists()) {\r\n        return ResponseEntity.notFound().build();\r\n    }\r\n\r\n    ReadChannel reader = blob.reader();\r\n    InputStream inputStream = Channels.newInputStream(reader);\r\n\r\n    String contentType = blob.getContentType();\r\n    if (contentType == null) {\r\n        contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;\r\n    }\r\n\r\n    return ResponseEntity.ok()\r\n            .contentType(MediaType.parseMediaType(contentType))\r\n            .header(HttpHeaders.CONTENT_DISPOSITION, \""attachment; filename=\"" + fileName)\r\n            .body(new InputStreamResource(inputStream));\r\n}""]",0,1
"["" @Component\r\npublic class ExpensiveService {\r\n    public String doThis() {\r\n        return \""expensiveToCompute\"";\r\n    }\r\n}\r\n\r\npublic class myEntityListener {\r\n\r\n    private static ExpensiveService expensiveService;\r\n\r\n    public static void setExpensiveService(ExpensiveService service) {\r\n        expensiveService = service;\r\n    }\r\n\r\n    public String doThis() {\r\n        return expensiveService.doThis();\r\n    }\r\n\r\n    @PrePersist\r\n    public void myListener(myEntity e) {\r\n        if (complexConditionToTest) {\r\n            e.setSomething(doThis());\r\n        }\r\n    }\r\n}\r\n\r\n@SpringBootTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    myEntityRepository repo;\r\n\r\n    @MockBean\r\n    ExpensiveService expensiveService;\r\n\r\n    @BeforeEach\r\n    public void setup() {\r\n        myEntityListener.setExpensiveService(expensiveService);\r\n    }\r\n\r\n    @Test\r\n    public void myListenerTest() {\r\n        String expected = \""fake-text\"";\r\n        Mockito.when(expensiveService.doThis()).thenReturn(expected);\r\n\r\n        myEntity e = new myEntity();\r\n        myEntity stored = repo.save(e);\r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}""]",0,1
"[""initSocketConnection(new VideoStreamCallback() {\r\n    @Override\r\n    public void onVideoStreamReceived(byte[] bytes) {\r\n        Map.Entry<Boolean, List<Integer>> mdat = hasMdat(bytes);\r\n        if (!mdat.getKey()) return;\r\n\r\n        int start = mdat.getValue().get(3) + 1;\r\n        byte[] h264Payload = Arrays.copyOfRange(bytes, start, bytes.length);\r\n\r\n        SseEmitter emitter = getEmitterForClient(); // however youâre managing connected clients\r\n        try {\r\n            emitter.send(h264Payload, MediaType.APPLICATION_OCTET_STREAM);\r\n        } catch (IOException e) {\r\n            emitter.completeWithError(e);\r\n        }\r\n    }\r\n});""]",0,1
"[""public class PatternSearch {\r\n\r\n    public static List<int[]> search(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        List<int[]> results = new ArrayList<>();\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matchesAt(T, P, i, j)) {\r\n                    results.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private static boolean matchesAt(int[][] T, int[][] P, int row, int col) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[row + i][col + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Example usage\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> results = search(T, P);\r\n        for (int[] pos : results) {\r\n            System.out.println(Arrays.toString(pos));\r\n        }\r\n    }\r\n}""]",0,1
"[""public class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private SCardNormalAdapter adapter;\r\n    private List<SCard> allStartups = new ArrayList<>();\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        adapter = new SCardNormalAdapter(allStartups);\r\n        recyclerView.setAdapter(adapter);\r\n\r\n        fetchAllStartups();\r\n        return v;\r\n    }\r\n\r\n    private void fetchAllStartups() {\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\""Category_wise\"");\r\n        ref.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                allStartups.clear();\r\n                for (DataSnapshot categorySnap : snapshot.getChildren()) {\r\n                    for (DataSnapshot companySnap : categorySnap.getChildren()) {\r\n                        SCard card = companySnap.getValue(SCard.class);\r\n                        allStartups.add(card);\r\n                    }\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {}\r\n        });\r\n    }\r\n}\r\n\r\npublic class SCardNormalAdapter extends RecyclerView.Adapter<SCardNormalAdapter.ViewHolder> {\r\n    private List<SCard> cardList;\r\n\r\n    public SCardNormalAdapter(List<SCard> cardList) {\r\n        this.cardList = cardList;\r\n    }\r\n\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(ViewHolder holder, int position) {\r\n        SCard model = cardList.get(position);\r\n        holder.setName(model.getsName());\r\n        // ... other setters\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return cardList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}""]",0,1
"[""public class StrictCookieLocaleResolver extends CookieLocaleResolver {\r\n    private static final List<Locale> SUPPORTED_LOCALES = Arrays.asList(\r\n            new Locale(\""en\""),\r\n            new Locale(\""hi\"")\r\n    );\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String newLocale = request.getParameter(getParamName());\r\n        if (newLocale != null) {\r\n            Locale candidate = StringUtils.parseLocaleString(newLocale);\r\n            if (!SUPPORTED_LOCALES.contains(candidate)) {\r\n                throw new IllegalArgumentException(\""Unsupported locale: \"" + newLocale);\r\n            }\r\n        }\r\n        return super.resolveLocale(request);\r\n    }\r\n}\r\n\r\n@Bean\r\npublic LocaleResolver localeResolver() {\r\n    StrictCookieLocaleResolver resolver = new StrictCookieLocaleResolver();\r\n    resolver.setDefaultLocale(Locale.ENGLISH);\r\n    resolver.setCookieName(\""myLocaleCookie\"");\r\n    return resolver;\r\n}\r\n\r\n@Bean\r\npublic LocaleChangeInterceptor localeChangeInterceptor() {\r\n    LocaleChangeInterceptor lci = new LocaleChangeInterceptor();\r\n    lci.setParamName(\""locale\"");\r\n    return lci;\r\n}\r\n\r\n@Override\r\npublic void addInterceptors(InterceptorRegistry registry) {\r\n    registry.addInterceptor(localeChangeInterceptor());\r\n}""]",0,1
"[""import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class Ed25519KeyLoader {\r\n    public static void main(String[] args) throws Exception {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n\r\n        String privateKey = \""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU\"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\""Ed25519\"", \""BC\"");\r\n        PrivateKey pk = kf.generatePrivate(keySpec);\r\n\r\n        System.out.println(\""Loaded private key: \"" + pk);\r\n    }\r\n}\r\n\r\n<dependency>\r\n  <groupId>org.bouncycastle</groupId>\r\n  <artifactId>bcprov-jdk15on</artifactId>\r\n  <version>1.70</version>\r\n</dependency>""]",0,1
"[""import com.squareup.wire.schema.Location;\r\nimport com.squareup.wire.schema.internal.parser.ProtoFileElement;\r\nimport com.squareup.wire.schema.internal.parser.ProtoParser;\r\n\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\n\r\npublic class ProtoParserExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String path = \""src/main/proto/your_file.proto\"";\r\n        String protoContent = new String(Files.readAllBytes(Paths.get(path)));\r\n\r\n        Location location = Location.get(\""\"", path);\r\n        ProtoFileElement parsed = ProtoParser.parse(location, protoContent);\r\n\r\n        System.out.println(\""Package: \"" + parsed.getPackageName());\r\n        parsed.getTypes().forEach(type -> System.out.println(\""Type: \"" + type.getName()));\r\n        parsed.getServices().forEach(service -> System.out.println(\""Service: \"" + service.getName()));\r\n    }\r\n}\r\n\r\n<dependency>\r\n  <groupId>com.squareup.wire</groupId>\r\n  <artifactId>wire-schema</artifactId>\r\n  <version>4.7.0</version>\r\n</dependency>""]",0,1
"[""class MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        runWithTimeout(() -> I_need_a_timeout(callback, 110), 500, TimeUnit.MILLISECONDS);\r\n        int result = counter.get().get();\r\n        System.out.println(\""Final count: \"" + result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop) {\r\n        while (loop-- >= 0) {\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n\r\n    private void runWithTimeout(Runnable task, long timeout, TimeUnit unit) {\r\n        Thread current = Thread.currentThread();\r\n        ScheduledExecutorService killer = Executors.newSingleThreadScheduledExecutor();\r\n        ScheduledFuture<?> timeoutFuture = killer.schedule(() -> current.stop(), timeout, unit);\r\n        try {\r\n            task.run();\r\n        } catch (ThreadDeath td) {\r\n            throw new RuntimeException(\""Execution timed out\"");\r\n        } finally {\r\n            timeoutFuture.cancel(true);\r\n            killer.shutdownNow();\r\n        }\r\n    }\r\n}""]",0,1
"[""public class EtlStepExecutor {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(\""my-etl-pipeline\"");\r\n\r\n    public void execute(DataPackage dataPackage, String stepName) {\r\n        String traceId = normalizeTraceId(dataPackage.getId());\r\n        String spanId = generateSpanIdForStep(stepName);\r\n\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceId,\r\n                spanId,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context parentContext = Context.root().with(parentSpan);\r\n\r\n        Span span = tracer.spanBuilder(stepName)\r\n                .setParent(parentContext)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try (Scope scope = span.makeCurrent()) {\r\n                // do your actual work here\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n\r\n    private String normalizeTraceId(String id) {\r\n        String padded = String.format(\""%032x\"", new BigInteger(1, id.getBytes(StandardCharsets.UTF_8)));\r\n        return padded.length() > 32 ? padded.substring(0, 32) : padded;\r\n    }\r\n\r\n    private String generateSpanIdForStep(String stepName) {\r\n        byte[] hash = MessageDigest.getInstance(\""SHA-256\"").digest(stepName.getBytes(StandardCharsets.UTF_8));\r\n        String spanId = Hex.encodeHexString(Arrays.copyOfRange(hash, 0, 8));\r\n        return spanId;\r\n    }\r\n}""]",0,1
"[""class LRUCache {\r\n\r\n    class Node {\r\n        int key, value;\r\n        Node prev, next;\r\n        Node(int k, int v) {\r\n            key = k;\r\n            value = v;\r\n        }\r\n    }\r\n\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map = new HashMap<>();\r\n    private final Node head = new Node(0, 0);\r\n    private final Node tail = new Node(0, 0);\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (!map.containsKey(key)) return -1;\r\n        Node node = map.get(key);\r\n        remove(node);\r\n        insert(node);\r\n        return node.value;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            remove(map.get(key));\r\n        }\r\n        if (map.size() == capacity) {\r\n            remove(tail.prev);\r\n        }\r\n        insert(new Node(key, value));\r\n    }\r\n\r\n    private void insert(Node node) {\r\n        map.put(node.key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n\r\n    private void remove(Node node) {\r\n        map.remove(node.key);\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n}""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class GamePanel extends JPanel implements ActionListener, KeyListener {\r\n\r\n    private final int WIDTH = 500, HEIGHT = 500;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private int redX = 200, redY = 200;\r\n    private int blueX = 100, blueY = 0;\r\n    private final int DOT_SIZE = 20;\r\n    private final int RED_SIZE = 50;\r\n\r\n    private boolean up, down, left, right;\r\n\r\n    private Timer timer;\r\n\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(WIDTH, HEIGHT));\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        timer = new Timer(16, this);\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, RED_SIZE, RED_SIZE);\r\n\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if (left) redX = Math.max(0, redX - MOVE_AMOUNT);\r\n        if (right) redX = Math.min(WIDTH - RED_SIZE, redX + MOVE_AMOUNT);\r\n        if (up) redY = Math.max(0, redY - MOVE_AMOUNT);\r\n        if (down) redY = Math.min(HEIGHT - RED_SIZE, redY + MOVE_AMOUNT);\r\n\r\n        blueY += 2;\r\n        if (blueY > HEIGHT) {\r\n            blueY = 0;\r\n            blueX = (int) (Math.random() * (WIDTH - DOT_SIZE));\r\n        }\r\n\r\n        Rectangle redBounds = new Rectangle(redX, redY, RED_SIZE, RED_SIZE);\r\n        Rectangle blueBounds = new Rectangle(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n\r\n        if (redBounds.intersects(blueBounds)) {\r\n            System.out.println(\""Collision!\"");\r\n        }\r\n\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = true;\r\n            case KeyEvent.VK_RIGHT -> right = true;\r\n            case KeyEvent.VK_UP -> up = true;\r\n            case KeyEvent.VK_DOWN -> down = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = false;\r\n            case KeyEvent.VK_RIGHT -> right = false;\r\n            case KeyEvent.VK_UP -> up = false;\r\n            case KeyEvent.VK_DOWN -> down = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(\""Game\"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(new GamePanel());\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}""]",0,1
"[""public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long value = COUNTER.getAndIncrement() & 0xFFFFFFFFFFFL;\r\n\r\n        long part1 = (value >> 28) & 0xFFFF;\r\n        long part2 = (value >> 16) & 0xFFF;\r\n        long part3 = value & 0xFFFF;\r\n\r\n        return String.format(\""%04x-7%03x-%04x\"", part1, part2, part3);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n\r\n0000-7000-0000\r\n0000-7000-0001\r\n0000-7000-0002""]",0,1
"[""public class CustomSpinner extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        double initialValue = 0.0;\r\n\r\n        SpinnerValueFactory.DoubleSpinnerValueFactory valueFactory =\r\n                new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, initialValue, 0.25);\r\n\r\n        valueFactory.setConverter(new StringConverter<Double>() {\r\n            private final DecimalFormat df = new DecimalFormat(\""+0.00;-0.00\"");\r\n\r\n            @Override\r\n            public String toString(Double value) {\r\n                return df.format(value);\r\n            }\r\n\r\n            @Override\r\n            public Double fromString(String text) {\r\n                text = text.replace(',', '.');\r\n                try {\r\n                    return Double.parseDouble(text);\r\n                } catch (NumberFormatException e) {\r\n                    return valueFactory.getValue();\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n\r\n        Pattern pattern = Pattern.compile(\""[+-]?\\\\d{0,2}([\\\\.,]\\\\d{0,2})?\"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            String newText = change.getControlNewText();\r\n            if (newText.isEmpty() || pattern.matcher(newText).matches()) {\r\n                try {\r\n                    double parsed = valueFactory.getConverter().fromString(newText);\r\n                    if (parsed >= -20.0 && parsed <= 20.0 && parsed * 100 % 25 == 0) {\r\n                        return change;\r\n                    }\r\n                } catch (Exception ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<Double> formatter = new TextFormatter<>(valueFactory.getConverter(), initialValue, filter);\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        valueFactory.valueProperty().bindBidirectional(formatter.valueProperty());\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        root.setPadding(new Insets(20));\r\n        Scene scene = new Scene(root, 300, 100);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Custom Spinner\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.oracle.OracleSpatial10gDialect\r\n\r\nimport org.hibernate.annotations.Type;\r\nimport org.locationtech.jts.geom.Polygon;\r\n\r\n@Entity\r\npublic class Range {\r\n\r\n    @Type(type = \""org.hibernate.spatial.GeometryType\"")\r\n    @Column(name = \""shape\"")\r\n    private Polygon shape;\r\n\r\n    // getters/setters\r\n}\r\n\r\nGeometryFactory geometryFactory = new GeometryFactory();\r\nCoordinate[] coords = ... // build coordinates array\r\nPolygon polygon = geometryFactory.createPolygon(coords);\r\nrange.setShape(polygon);\r\n\r\nimport org.hibernate.annotations.Type;\r\nimport org.locationtech.jts.geom.Polygon;\r\n\r\n@Entity\r\npublic class Range {\r\n\r\n    @Type(type = \""org.hibernate.spatial.GeometryType\"")\r\n    @Column(name = \""shape\"")\r\n    private Polygon shape;\r\n\r\n    // getter/setter\r\n}""]",0,1
"[""public class AliasSelectorKeyManager extends X509ExtendedKeyManager {\r\n    private final X509KeyManager originalKeyManager;\r\n    private final String aliasToUse;\r\n\r\n    public AliasSelectorKeyManager(X509KeyManager originalKeyManager, String aliasToUse) {\r\n        this.originalKeyManager = originalKeyManager;\r\n        this.aliasToUse = aliasToUse;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        if (aliasToUse != null && isAliasValidForKeyTypes(aliasToUse, keyType)) {\r\n            return aliasToUse;\r\n        }\r\n        return originalKeyManager.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    private boolean isAliasValidForKeyTypes(String alias, String[] keyTypes) {\r\n        for (String kt : keyTypes) {\r\n            X509Certificate[] certs = originalKeyManager.getCertificateChain(alias);\r\n            if (certs != null && certs.length > 0) {\r\n                String alg = certs[0].getPublicKey().getAlgorithm();\r\n                if (kt.equalsIgnoreCase(alg)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // delegate all other methods to originalKeyManager\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return originalKeyManager.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return originalKeyManager.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\nKeyManagerFactory kmf = KeyManagerFactory.getInstance(\""SunX509\"");\r\nkmf.init(keyStore, keyPassword);\r\n\r\nX509KeyManager originalKm = null;\r\nfor (KeyManager km : kmf.getKeyManagers()) {\r\n    if (km instanceof X509KeyManager) {\r\n        originalKm = (X509KeyManager) km;\r\n        break;\r\n    }\r\n}\r\n\r\nX509KeyManager aliasSelectorKm = new AliasSelectorKeyManager(originalKm, \""my_cert_alias\"");\r\n\r\nSSLContext sslContext = SSLContext.getInstance(\""TLS\"");\r\nsslContext.init(new KeyManager[] { aliasSelectorKm }, trustManagerFactory.getTrustManagers(), null);""]",0,1
"["" @Override\r\npublic void visitLineNumber(int line, Label start) {\r\n    super.visitLineNumber(line, start);\r\n    if (!instrumented) {\r\n        instrument();  // insert your bytecode here, after line number info is available\r\n        instrumented = true;\r\n    }\r\n}\r\n\r\n""]",0,1
"[""private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(8);\r\n\r\npublic CompletableFuture<Boolean> runTaskAsync(ReportClient client, String documentId) {\r\n    return CompletableFuture.supplyAsync(() -> client.createDocument(documentId))\r\n        .thenCompose(uuid -> pollStatus(uuid, client));\r\n}\r\n\r\nprivate CompletableFuture<Boolean> pollStatus(String uuid, ReportClient client) {\r\n    CompletableFuture<Boolean> promise = new CompletableFuture<>();\r\n\r\n    Runnable poller = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            var status = client.getStatus(uuid);\r\n            if (Status.PENDING.equals(status.status())) {\r\n                scheduler.schedule(this, 10, TimeUnit.SECONDS);\r\n            } else {\r\n                client.getReport(uuid);\r\n                promise.complete(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    scheduler.schedule(poller, 0, TimeUnit.SECONDS);\r\n    return promise;\r\n}\r\n\r\nList<CompletableFuture<Boolean>> futures = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\n    futures.add(runTaskAsync(client, documentId));\r\n}\r\nCompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\r\nscheduler.shutdown();""]",0,1
"["" @Override\r\npublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n    TypeElement generatedAnn = processingEnv.getElementUtils().getTypeElement(\""com.company.MyEnumAnnotation\"");\r\n    if (generatedAnn == null) {\r\n        // Generate MyEnumAnnotation now\r\n        generateMyEnumAnnotation();\r\n        return false; // Keep processing rounds open\r\n    }\r\n    // Now MyEnumAnnotation exists, so process client code annotated with it\r\n    for (Element annotatedElem : roundEnv.getElementsAnnotatedWith(generatedAnn)) {\r\n        // do stuff with annotatedElem\r\n    }\r\n    return true;\r\n}""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    void testDeserialize_validDate() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""2023-06-27T15:30:00Z\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        Date result = deserializer.deserialize(parser, ctxt);\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\""yyyy-MM-dd'T'HH:mm:ssX\"");\r\n        Date expected = sdf.parse(\""2023-06-27T15:30:00Z\"");\r\n\r\n        assertEquals(expected, result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_emptyString_returnsNull() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        Date result = deserializer.deserialize(parser, ctxt);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_invalidDate_throwsException() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""invalid-date\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        MyCustomException thrown = assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(parser, ctxt);\r\n        });\r\n\r\n        assertEquals(\""Invalid date passed, ISO 8601 is expected\"", thrown.getMessage());\r\n    }\r\n}""]",0,1
"[""@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails specialUser = User.withUsername(\""specialUser\"")\r\n                .password(passwordEncoder().encode(\""specialPass\""))\r\n                .roles(\""SPECIALROLE\"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(specialUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .securityMatcher(\""/very-special-path/**\"")\r\n            .userDetailsService(inMemoryUserDetailsService())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated());\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain appFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .userDetailsService(customUserDetailsService())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated());\r\n\r\n        return http.build();\r\n    }\r\n}""]",0,1
"[""Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n    .onItem().transformToUniAndConcatenate(tick -> \r\n        service.getTransactions()\r\n            .toMulti()\r\n            .select().first() // just an example to get one transaction at a time\r\n            .filter(transaction -> {\r\n                boolean transactionFound = transaction.getAmount().stream()\r\n                    .anyMatch(amount -> amount.getQuantity().equals(\""test\""));\r\n                return transactionFound;\r\n            })\r\n            .collect().first() // collect first matching transaction, if any\r\n            .replaceIfNull(() -> null) // null if none found\r\n            .toUni()\r\n    )\r\n    .select().first(transaction -> transaction != null) // take first non-null\r\n    .subscribe()\r\n    .with(transaction -> {\r\n        if (transaction != null) {\r\n            log.info(\""Found transaction: \"" + transaction);\r\n        } else {\r\n            log.info(\""No transaction found\"");\r\n        }\r\n    }, Throwable::printStackTrace);""]",0,1
"[""LanguageProgramming.getSelectionModel().clearSelection();\r\n\r\npublic void DevelopmentTypeEvent() {\r\n    if (DevelopmentType.getValue().equals(\""Back-end\"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setPromptText(\""Select a language programming\"");\r\n    } else if (DevelopmentType.getValue().equals(\""Front-end\"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setPromptText(\""Select a language programming\"");\r\n    }\r\n}\r\n\r\nLanguageProgramming.setValue(null);\r\n\r\n""]",0,1
"[""private static final String ACTION_USB_PERMISSION = \""com.yourapp.USB_PERMISSION\"";\r\n\r\npublic NativeUsbService(ReactApplicationContext reactContext) {\r\n  this.reactContext = reactContext;\r\n  usbManager = (UsbManager) reactContext.getSystemService(Context.USB_SERVICE);\r\n\r\n  IntentFilter filter = new IntentFilter();\r\n  filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n  filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n  filter.addAction(ACTION_USB_PERMISSION);\r\n  reactContext.registerReceiver(usbReceiver, filter);\r\n}\r\n\r\nprivate final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n  public void onReceive(Context context, Intent intent) {\r\n    String action = intent.getAction();\r\n\r\n    if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n      UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n      if (device != null) {\r\n        usbDevice = device;\r\n        if (!usbManager.hasPermission(device)) {\r\n          PendingIntent permissionIntent = PendingIntent.getBroadcast(context, 0,\r\n              new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n          usbManager.requestPermission(device, permissionIntent);\r\n        } else {\r\n          onUsbPermissionGranted(device);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (ACTION_USB_PERMISSION.equals(action)) {\r\n      UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n      if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n        if (device != null) {\r\n          onUsbPermissionGranted(device);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n      if (connection != null) {\r\n        connection.releaseInterface(usbDeviceInterface);\r\n        connection.close();\r\n      }\r\n      connection = null;\r\n      usbDevice = null;\r\n      endpointIn = null;\r\n      endpointOut = null;\r\n    }\r\n  }\r\n};\r\n\r\nprivate void onUsbPermissionGranted(UsbDevice device) {\r\n  connection = usbManager.openDevice(device);\r\n  usbDeviceInterface = device.getInterface(0);\r\n  connection.claimInterface(usbDeviceInterface, true);\r\n  // your logic here\r\n}""]",0,1
"[""@Schema(name = \""UserResponse\"", description = \""User creation response\"")\r\npublic class UserResponseEnvelope {\r\n    private boolean success;\r\n    private UserDto result;\r\n\r\n    public boolean isSuccess() { return success; }\r\n    public void setSuccess(boolean success) { this.success = success; }\r\n\r\n    public UserDto getResult() { return result; }\r\n    public void setResult(UserDto result) { this.result = result; }\r\n}\r\n\r\n@Operation(summary = \""Create user\"")\r\n@ApiResponse(responseCode = \""201\"", description = \""User created\"",\r\n    content = @Content(mediaType = \""application/json\"",\r\n        schema = @Schema(implementation = UserResponseEnvelope.class)))\r\n@PostMapping(\""/users\"")\r\n@PreAuthorize(\""hasAuthority('create:user')\"")\r\npublic ResponseEntity<UserDto> create(@RequestBody @Valid CreateUserCommand command) {\r\n    return ResponseEntity.status(HttpStatus.CREATED).body(userService.create(command));\r\n}""]",0,1
"[""findAll()\r\n  .flatMapSequential(relation ->\r\n    findStorageId(relation)\r\n      .filter(id -> isPassing(relation))\r\n      .map(id -> Tuples.of(relation, id))\r\n  )\r\n  .next()\r\n  .subscribe(match -> {\r\n    // handle your first match here\r\n  });\r\n\r\n.findAll()\r\n  .flatMapSequential(relation ->\r\n    findStorageId(relation)\r\n      .filterWhen(id -> Mono.fromCallable(() -> isPassing(relation)))\r\n      .map(id -> Tuples.of(relation, id))\r\n  )\r\n  .next()""]",0,1
"[""public class Task implements Runnable {\r\n    private static final ConcurrentHashMap<String, ReentrantLock> locks = new ConcurrentHashMap<>();\r\n    private final String key;\r\n\r\n    public Task(String key) {\r\n        this.key = key;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        ReentrantLock lock = locks.computeIfAbsent(key, k -> new ReentrantLock());\r\n\r\n        if (!lock.tryLock()) {\r\n            System.out.println(\""Task with key \"" + key + \"" is already running. Skipping.\"");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            System.out.println(\""Running: \"" + key);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            lock.unlock();\r\n            locks.remove(key, lock);\r\n        }\r\n    }\r\n}\r\n\r\nExecutorService executor = Executors.newFixedThreadPool(5);\r\nexecutor.submit(new Task(\""hi\""));\r\nexecutor.submit(new Task(\""h\""));\r\nexecutor.submit(new Task(\""u\""));\r\nexecutor.submit(new Task(\""y\""));\r\nexecutor.submit(new Task(\""hi\""));\r\nexecutor.submit(new Task(\""p\""));\r\nexecutor.submit(new Task(\""o\""));\r\nexecutor.submit(new Task(\""bb\""));""]",0,1
"["" @Configuration\r\n@EnableWebSocketSecurity\r\npublic class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n}\r\n\r\nhttp.csrf(AbstractHttpConfigurer::disable)\r\n    .authorizeHttpRequests(auth -> auth\r\n        .requestMatchers(\""/ws/**\"").permitAll()\r\n        .anyRequest().authenticated()\r\n    );\r\n\r\nhttp.csrf(csrf -> csrf\r\n    .ignoringRequestMatchers(new AntPathRequestMatcher(\""/ws/**\""))\r\n);\r\n\r\n""]",0,1
"[""String xmlPayload = new String(Files.readAllBytes(Paths.get(\""signed_mdfe.xml\"")), StandardCharsets.UTF_8);\r\n\r\nMDFeRecepcaoSinc service = new MDFeRecepcaoSinc();\r\nMDFeRecepcaoSincSoap12 port = service.getMDFeRecepcaoSincSoap12();\r\n\r\nMdfeRecepcaoResult result = port.mdfeRecepcao(xmlPayload);\r\nSystem.out.println(result.getRetMDFe()); // assuming JAXB binding has proper getter\r\n\r\nJAXB.marshal(result, System.out);\r\n\r\n@XmlElement(name = \""retMDFe\"", namespace = \""http://www.portalfiscal.inf.br/mdfe\"")\r\nprivate RetMDFeType retMDFe;\r\n\r\nString rawXml = port.mdfeRecepcao(xmlPayload).getAny().toString();\r\nJAXBContext ctx = JAXBContext.newInstance(RetMDFeType.class);\r\nUnmarshaller unmarshaller = ctx.createUnmarshaller();\r\nRetMDFeType ret = (RetMDFeType) unmarshaller.unmarshal(new StringReader(rawXml));\r\nSystem.out.println(ret.getCStat());""]",0,1
"[""String htmlString = \""<!DOCTYPE html>\\n\"" +\r\n        \""<html lang=\\\""ru\\\"">\\n\"" +\r\n        \""<head>\\n\"" +\r\n        \""    <meta charset=\\\""UTF-8\\\""/>\\n\"" +\r\n        \""    <style>\\n\"" +\r\n        \""        @font-face {\\n\"" +\r\n        \""            font-family: 'DejaVu';\\n\"" +\r\n        \""            src: url('file:///C:/Windows/Fonts/DejaVuSans.ttf');\\n\"" + // adjust path on Linux/Mac\r\n        \""        }\\n\"" +\r\n        \""        body { font-family: 'DejaVu'; }\\n\"" +\r\n        \""    </style>\\n\"" +\r\n        \""</head>\\n\"" +\r\n        \""<body>\\n\"" +\r\n        \""    <h3>?????????????</h3>\\n\"" +\r\n        \""</body>\\n\"" +\r\n        \""</html>\"";\r\n\r\nString path = System.getProperty(\""user.home\"") + \""/A.pdf\"";\r\ntry (OutputStream outputStream = new FileOutputStream(path)) {\r\n    ITextRenderer renderer = new ITextRenderer();\r\n\r\n    ITextFontResolver fontResolver = renderer.getFontResolver();\r\n    fontResolver.addFont(\""C:/Windows/Fonts/DejaVuSans.ttf\"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); // adjust if Linux/Mac\r\n\r\n    renderer.setDocumentFromString(htmlString);\r\n    renderer.layout();\r\n    renderer.createPDF(outputStream);\r\n}""]",0,1
"["" @PostMapping(\""/hole/coordinate\"")\r\n@ResponseBody\r\npublic String saveCoordinate(@RequestBody Map<String, Object> params) {\r\n    List<List<Double>> rawList = (List<List<Double>>) params.get(\""coordinate\"");\r\n\r\n    int[][] coordinates = rawList.stream()\r\n        .map(inner -> inner.stream().mapToInt(Double::intValue).toArray())\r\n        .toArray(int[][]::new);\r\n\r\n    for (int[] pair : coordinates) {\r\n        System.out.println(Arrays.toString(pair));\r\n    }\r\n\r\n    return \""success\"";\r\n}""]",0,1
"[""public class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n    private static boolean started = false;\r\n\r\n    @Override\r\n    public void beforeAll(ExtensionContext context) {\r\n        if (!started) {\r\n            // start the server\r\n            started = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void afterAll(ExtensionContext context) {\r\n        // only shut down after the last test class\r\n        if (context.getRoot().getStore(ExtensionContext.Namespace.GLOBAL)\r\n                  .get(\""shutdownHook\"") == null) {\r\n            context.getRoot().getStore(ExtensionContext.Namespace.GLOBAL)\r\n                .put(\""shutdownHook\"", (ExtensionContext.Store.CloseableResource) () -> {\r\n                    // stop the server\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n@ExtendWith(JUnit5Server.class)\r\npublic class FirstTest {\r\n    // tests using the server\r\n}""]",0,1
"[""@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = \""BinaryData\"", propOrder = {\r\n    \""blob\"",\r\n    \""extension\""\r\n})\r\npublic class BinaryData {\r\n\r\n    @XmlElement(required = true)\r\n    protected byte[] blob;\r\n\r\n    @XmlElement(required = true)\r\n    protected String extension;\r\n\r\n    public byte[] getBlob() {\r\n        return blob;\r\n    }\r\n\r\n    public void setBlob(byte[] value) {\r\n        this.blob = value;\r\n    }\r\n\r\n    public String getExtension() {\r\n        return extension;\r\n    }\r\n\r\n    public void setExtension(String value) {\r\n        this.extension = value;\r\n    }\r\n}\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    binaryData.setBlob(documentData);\r\n    binaryData.setExtension(\""pdf\"");\r\n    return binaryData;\r\n}\r\n""]",0,1
"[""btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1 = Long.parseLong(txtfirst.getText().toString());\r\n        long value2 = Long.parseLong(txtsecond.getText().toString());\r\n        list.clear();\r\n        for (long i = value1; i <= value2; i++) {\r\n            list.add(String.format(\""%011d\"", i));\r\n        }\r\n        arrayAdapter.notifyDataSetChanged();\r\n    }\r\n});\r\n""]",0,1
"[""@Bean\r\n@Order(10)\r\npublic SecurityFilterChain authChain(HttpSecurity http) throws Exception {\r\n    http.securityMatcher(\""/**\"")\r\n        .authorizeHttpRequests(authorizeRequests ->\r\n            authorizeRequests\r\n                .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n                .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... );\r\n    return http.build();\r\n}\r\n@Bean\r\n@Order(20)\r\npublic SecurityFilterChain resourceChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http.securityMatcher(\""/**\"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}\r\n@Bean\r\n@Order(10)\r\npublic SecurityFilterChain mainChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http\r\n        .authorizeHttpRequests(authz -> authz\r\n            .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... )\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}\r\n""]",0,1
"[""private final Elements elementUtils;\r\nprivate final Types typeUtils;\r\nprivate final DocTrees docTrees;\r\n\r\npublic MyProcessor(ProcessingEnvironment processingEnv) {\r\n    this.elementUtils = processingEnv.getElementUtils();\r\n    this.typeUtils = processingEnv.getTypeUtils();\r\n    this.docTrees = DocTrees.instance(processingEnv);\r\n}\r\n\r\n@Override\r\npublic Void visitLink(LinkTree linkTree, Void unused) {\r\n    ReferenceTree ref = linkTree.getReference();\r\n    String signature = ref.getSignature();\r\n\r\n    DocTreePath docPath = getCurrentPath(); // assuming youâre visiting via a DocTreeScanner\r\n    TreePath path = docPath.getTreePath();\r\n    Element currentElement = docTrees.getElement(path);\r\n\r\n    Symbol resolvedSymbol = resolveReference(currentElement, signature);\r\n    if (resolvedSymbol != null) {\r\n        String fqName = ((TypeElement) resolvedSymbol).getQualifiedName().toString();\r\n        System.out.println(\""Resolved: \"" + signature + \"" â \"" + fqName);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nprivate Symbol resolveReference(Element context, String signature) {\r\n    if (!(context instanceof Symbol)) return null;\r\n    Symbol sym = (Symbol) context;\r\n    JavacElements javacElements = (JavacElements) elementUtils;\r\n    return javacElements.resolveDocReference(sym, signature);\r\n}\r\n""]",0,1
"[""public class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n""]",0,1
"[""public class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            \""Alice\"", \""Adam\"", \""Alfred\"", \""Amon\"", \""Alfredo\"", \""Al\"", \""Albert\""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            \""Bob\"", \""Conner\"", \""Robin\"", \""Fred\"", \""Freddy\"", \""Edward\"", \""Fredward\"", \""Mariam\""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (input.length() == 2) {\r\n                if (nameBinding != null) {\r\n                    nameBinding.dispose();\r\n                    nameBinding = null;\r\n                }\r\n\r\n                if (input.startsWith(\""A\"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(\""You selected \"" + val.getCompletion() + \"" from list 1.\""));\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(\""You selected \"" + val.getCompletion() + \"" from list 2.\""));\r\n                }\r\n            } else if (input.length() < 2) {\r\n                if (nameBinding != null) {\r\n                    nameBinding.dispose();\r\n                    nameBinding = null;\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Autocomplete Example\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""private void exportXls() {\r\n    try (\r\n        OutputStream os = new FileOutputStream(\""test.xls\"");\r\n        Workbook wb = new HSSFWorkbook()\r\n    ) {\r\n        Sheet sh = wb.createSheet(\""test\"");\r\n        Row r = sh.createRow(0);\r\n\r\n        CellStyle cs = wb.createCellStyle();\r\n        cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n        for (int i = 0; i < 50; i++) {\r\n            Cell c = r.createCell(i);\r\n            c.setCellValue(i + 1);\r\n            c.setCellStyle(cs);\r\n        }\r\n\r\n        wb.write(os);\r\n        os.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n""]",0,1
"[""Map<String, Set<Long>> myMap = new HashMap<>();\r\nmyMap.put(\""a\"", Set.of(1L, 2L, 3L));\r\nmyMap.put(\""b\"", Set.of(4L, 5L));\r\nmyMap.put(\""c\"", Set.of(1L));\r\nmyMap.put(\""d\"", Set.of(2L, 3L));\r\nmyMap.put(\""e\"", Set.of(5L));\r\nmyMap.put(\""f\"", Set.of(6L));\r\n\r\nList<String[]> results = myMap.entrySet().stream()\r\n    .flatMap(e1 -> myMap.entrySet().stream()\r\n        .filter(e2 -> !e1.getKey().equals(e2.getKey()))\r\n        .filter(e2 -> e1.getValue().containsAll(e2.getValue()))\r\n        .map(e2 -> new String[]{e1.getKey(), e2.getKey()}))\r\n    .distinct()\r\n    .toList();\r\n\r\nresults.forEach(pair -> System.out.println(pair[0] + \"" and \"" + pair[1]));\r\n""]",0,1
"[""public class KSumSolver {\r\n\r\n    public List<Integer> findKSum(int[] nums, int target, int limit) {\r\n        List<Integer> result = new ArrayList<>();\r\n        Arrays.sort(nums); // optional, helps pruning if you want to be fancy\r\n        if (backtrack(nums, target, limit, 0, result)) {\r\n            return result;\r\n        }\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    private boolean backtrack(int[] nums, int target, int limit, int start, List<Integer> path) {\r\n        if (path.size() == limit) {\r\n            return target == 0;\r\n        }\r\n        for (int i = start; i < nums.length; i++) {\r\n            if (nums[i] > target && nums[i] > 0) continue;\r\n            path.add(nums[i]);\r\n            if (backtrack(nums, target - nums[i], limit, i + 1, path)) return true;\r\n            path.remove(path.size() - 1);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        KSumSolver solver = new KSumSolver();\r\n        int[] nums = {2, 7, 11, 15};\r\n        int target = 20;\r\n        int limit = 3;\r\n        System.out.println(solver.findKSum(nums, target, limit)); // Output: [2, 7, 11]\r\n    }\r\n}\r\n""]",0,1
"[""import org.web3j.crypto.Sign;\r\nimport org.web3j.crypto.Hash;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\n\r\npublic class SignatureVerifier {\r\n\r\n    public static boolean verifySignature(String message, String signature, String walletAddress) {\r\n        String prefix = \""\\u0019Ethereum Signed Message:\\n\"" + message.length();\r\n        String prefixedMessage = prefix + message;\r\n        byte[] msgHash = Hash.sha3(prefixedMessage.getBytes());\r\n\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) {\r\n            throw new IllegalArgumentException(\""Invalid signature length\"");\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData sigData = new Sign.SignatureData(\r\n            v,\r\n            Arrays.copyOfRange(signatureBytes, 0, 32),\r\n            Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger publicKeyRecovered = null;\r\n        for (int i = 0; i < 4; i++) {\r\n            try {\r\n                publicKeyRecovered = Sign.signedMessageToKey(msgHash, new Sign.SignatureData((byte) (27 + i), sigData.getR(), sigData.getS()));\r\n                String addressRecovered = \""0x\"" + Keys.getAddress(publicKeyRecovered);\r\n                if (addressRecovered.equalsIgnoreCase(walletAddress)) {\r\n                    return true;\r\n                }\r\n            } catch (Exception e) {\r\n                // ignore and try next\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.function.Function;\r\nimport java.util.OptionalDouble;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum AggregationType {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVERAGE(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, OptionalDouble> operation;\r\n\r\n    AggregationType(Function<DoubleStream, OptionalDouble> operation) {\r\n        this.operation = operation;\r\n    }\r\n\r\n    public OptionalDouble apply(DoubleStream stream) {\r\n        return operation.apply(stream);\r\n    }\r\n}\r\npublic Float someFunction(AggregationType e) {\r\n    return (float) e.apply(provides.stream()\r\n            .mapToDouble(this::someFunc))\r\n        .orElse(-1);\r\n}\r\n""]",0,1
"[""import org.springframework.http.MediaType;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n@RestController\r\npublic class TestController {\r\n\r\n    private final ExecutorService executor = Executors.newSingleThreadExecutor();\r\n    private SseEmitter emitter;\r\n\r\n    @GetMapping(\""/test-status-stream\"")\r\n    public SseEmitter streamTestStatus() {\r\n        emitter = new SseEmitter();\r\n        return emitter;\r\n    }\r\n\r\n    @PostMapping(\""/start-tests\"")\r\n    public void startTests() {\r\n        executor.execute(() -> {\r\n            for (int i = 1; i <= 30; i++) {\r\n                try {\r\n                    // simulate test execution\r\n                    Thread.sleep(5000); // replace with real test logic\r\n                    String message = \""Test \"" + i + \"" completed successfully\"";\r\n                    emitter.send(SseEmitter.event()\r\n                            .name(\""test-status\"")\r\n                            .data(message, MediaType.TEXT_PLAIN));\r\n                } catch (Exception e) {\r\n                    try {\r\n                        emitter.send(SseEmitter.event()\r\n                                .name(\""test-status\"")\r\n                                .data(\""Test \"" + i + \"" failed: \"" + e.getMessage()));\r\n                    } catch (IOException ioException) {\r\n                        emitter.completeWithError(ioException);\r\n                    }\r\n                }\r\n            }\r\n            emitter.complete();\r\n        });\r\n    }\r\n}\r\nconst eventSource = new EventSource(\""/test-status-stream\"");\r\n\r\neventSource.onmessage = function (event) {\r\n    console.log(\""Message: \"", event.data);\r\n    // append status to UI\r\n};\r\n\r\neventSource.addEventListener(\""test-status\"", function(event) {\r\n    console.log(\""Test update:\"", event.data);\r\n    // update test status in UI\r\n});\r\n\r\nfetch(\""/start-tests\"", { method: \""POST\"" });\r\n""]",0,1
"[""BaseEventHandler<BaseEvent<C, P>, C, P>\r\nBaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload>\r\npublic abstract class BaseEvent<\r\n    E extends BaseEvent<E, C, P>,\r\n    C extends BaseCommand<P>,\r\n    P extends BasePayload\r\n> {\r\n    protected abstract BaseEventHandler<E, C, P> getHandler();\r\n}\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n""]",0,1
"[""java.base\r\njava.lang\r\njava.io\r\njava.util\r\njava.net\r\njava.nio\r\njava.sql\r\njava.logging\r\njdk.crypto.ec\r\njdk.xml.dom\r\njava.management\r\nModuleLayer.boot().modules().stream()\r\n    .filter(m -> {\r\n        try {\r\n            Class<?> clazz = Class.forName(m.getName() + \"".package-info\"", false, ClassLoader.getPlatformClassLoader());\r\n            return clazz.getClassLoader() == ClassLoader.getPlatformClassLoader();\r\n        } catch (ClassNotFoundException e) {\r\n            return false;\r\n        }\r\n    })\r\n    .map(Module::getName)\r\n    .sorted()\r\n    .forEach(System.out::println);\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Map<Long, String> monthMap = new HashMap<>();\r\n        monthMap.put(1L, \""ENE\"");\r\n        monthMap.put(2L, \""FEB\"");\r\n        monthMap.put(3L, \""MAR\"");\r\n        monthMap.put(4L, \""ABR\"");\r\n        monthMap.put(5L, \""MAY\"");\r\n        monthMap.put(6L, \""JUN\"");\r\n        monthMap.put(7L, \""JUL\"");\r\n        monthMap.put(8L, \""AGO\"");\r\n        monthMap.put(9L, \""SEP\"");\r\n        monthMap.put(10L, \""OCT\"");\r\n        monthMap.put(11L, \""NOV\"");\r\n        monthMap.put(12L, \""DIC\"");\r\n\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n            .parseCaseInsensitive()\r\n            .appendValue(ChronoField.DAY_OF_MONTH, 2)\r\n            .appendText(ChronoField.MONTH_OF_YEAR, monthMap)\r\n            .appendValue(ChronoField.YEAR, 4)\r\n            .toFormatter(Locale.forLanguageTag(\""es-ES\""));\r\n\r\n        LocalDate date = LocalDate.parse(\""24ENE1982\"", formatter);\r\n        System.out.println(\""Hello world! \"" + date);\r\n    }\r\n}\r\n""]",0,1
"[""import org.apache.poi.ss.formula.FormulaShifter;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.formula.FormulaRenderer;\r\nimport org.apache.poi.ss.formula.FormulaParsingWorkbook;\r\nimport org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\npublic class FormulaShiftExample {\r\n\r\n    public static String shiftFormula(String formula, String originalAddress, String destinationAddress) {\r\n        Workbook wb = new XSSFWorkbook();  // create dummy workbook\r\n        FormulaParsingWorkbook fpWorkbook = org.apache.poi.ss.formula.WorkbookEvaluator.create(wb);\r\n\r\n        CellReference srcRef = new CellReference(originalAddress);\r\n        CellReference dstRef = new CellReference(destinationAddress);\r\n        int rowShift = dstRef.getRow() - srcRef.getRow();\r\n        int colShift = dstRef.getCol() - srcRef.getCol();\r\n\r\n        Ptg[] ptgs = FormulaParser.parse(formula, fpWorkbook, FormulaType.CELL, wb.getSheetIndex(\""Sheet0\""));\r\n        FormulaShifter shifter = FormulaShifter.createForCellShift(\r\n                wb.getSheetIndex(\""Sheet0\""),\r\n                srcRef.getRow(), srcRef.getRow(),\r\n                rowShift, colShift,\r\n                wb.getSheetName(wb.getSheetIndex(\""Sheet0\"")),\r\n                wb.getSpreadsheetVersion());\r\n\r\n        if (shifter.adjustFormula(ptgs, wb.getSheetIndex(\""Sheet0\""))) {\r\n            return FormulaRenderer.toFormulaString(fpWorkbook, ptgs);\r\n        }\r\n\r\n        return formula;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String f1 = \""=(A2+$B$2)\"";\r\n        String result = shiftFormula(f1, \""C2\"", \""D10\"");\r\n        System.out.println(\""Shifted Formula: \"" + result);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.RandomAccessFile;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0); // only needed the first time to start fresh\r\n            file.write(\""123456789\"".getBytes());\r\n        }\r\n\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.seek(0); // start at the beginning\r\n            file.write(\""hello\"".getBytes());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""authorDirectorColumn.setCellValueFactory(cellData -> {\r\n    LibraryItem item = cellData.getValue();\r\n    if (item instanceof Book) {\r\n        return new ReadOnlyStringWrapper(((Book) item).getAuthor());\r\n    } else if (item instanceof Movie) {\r\n        return new ReadOnlyStringWrapper(((Movie) item).getDirector());\r\n    } else {\r\n        return new ReadOnlyStringWrapper(\""N/A\"");\r\n    }\r\n});\r\npublic String getAuthor() {\r\n    return author;\r\n}\r\npublic String getDirector() {\r\n    return director;\r\n}\r\n""]",0,1
"[""@ExtendWith(MockitoExtension.class)\r\nclass PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    @Test\r\n    void testUpdate_shouldMapRequestAndReturnUpdatedDTO() {\r\n        UUID uuid = UUID.randomUUID();\r\n\r\n        Price existing = new Price();\r\n        existing.setUuid(uuid);\r\n        existing.setPriceAmount(BigDecimal.valueOf(10));\r\n\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(BigDecimal.valueOf(25));\r\n\r\n        Price updated = new Price();\r\n        updated.setUuid(uuid);\r\n        updated.setPriceAmount(BigDecimal.valueOf(25));\r\n\r\n        when(priceRepository.findByUuid(uuid)).thenReturn(Optional.of(existing));\r\n        when(priceRepository.saveAndFlush(existing)).thenReturn(updated);\r\n\r\n        PriceDTO result = priceService.update(uuid, request);\r\n\r\n        assertEquals(BigDecimal.valueOf(25), result.getPriceAmount());\r\n        verify(priceRepository).findByUuid(uuid);\r\n        verify(priceRepository).saveAndFlush(existing);\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\n@EnableMongoRepositories(\r\n    basePackages = \""com.repository.mongo\"",\r\n    repositoryImplementationPostfix = \""Impl\"",\r\n    mongoTemplateRef = \""mongoTemplate\""\r\n)\r\npublic class MongoRepoConfig {\r\n    @Bean\r\n    public MongoTemplate mongoTemplate(MongoDbFactory factory, MongoConverter converter) {\r\n        return new MongoTemplate(factory, converter);\r\n    }\r\n}\r\n@Configuration\r\n@EnableRedisRepositories(\r\n    basePackages = \""com.repository.redis\"",\r\n    redisTemplateRef = \""redisTemplate\""\r\n)\r\npublic class RedisRepoConfig {\r\n    @Bean\r\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\r\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(connectionFactory);\r\n        return template;\r\n    }\r\n}\r\n""]",0,1
"[""import com.sun.jna.platform.win32.User32;\r\nimport com.sun.jna.platform.win32.WinDef;\r\n\r\nWinDef.HWND hwnd = User32.INSTANCE.FindWindow(null, \""JavaFX Stage with Button\"");\r\nlong rawHandle = Pointer.nativeValue(hwnd.getPointer());\r\nSetProgressState(..., TBPF_NORMAL);\r\n""]",0,1
"[""AssetManager assetManager = requireContext().getAssets();\r\nFile targetDir = new File(requireContext().getApplicationInfo().dataDir + \""/databases\"");\r\nif (!targetDir.exists()) {\r\n    targetDir.mkdirs();\r\n}\r\n\r\ntry {\r\n    String[] files = assetManager.list(\""database/test\"");\r\n    if (files != null) {\r\n        for (String filename : files) {\r\n            File outFile = new File(targetDir, filename);\r\n            if (!outFile.exists()) {\r\n                try (InputStream in = assetManager.open(\""database/test/\"" + filename);\r\n                     OutputStream out = new FileOutputStream(outFile)) {\r\n                    byte[] buffer = new byte[1024];\r\n                    int read;\r\n                    while ((read = in.read(buffer)) != -1) {\r\n                        out.write(buffer, 0, read);\r\n                    }\r\n                    out.flush();\r\n                }\r\n            }\r\n        }\r\n    }\r\n} catch (IOException e) {\r\n    Log.e(\""AssetCopy\"", \""Failed to copy asset file\"", e);\r\n}\r\n""]",0,1
"[""public class Main {\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10_000; i++) {\r\n            ArrayList<String> dummy = new ArrayList<>();\r\n            dummy.add(\""warmup\"");\r\n            dummy.add(\""phase\"");\r\n        }\r\n\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(\""a\"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(\""b\"");\r\n        long t3 = System.nanoTime();\r\n\r\n        System.out.println((t2 - t1));\r\n        System.out.println((t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""@Override\r\nprotected void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    BufferedImage img = ApplicationImages.getImage();\r\n    if (img == null) return;\r\n\r\n    int compWidth = getWidth();\r\n    int compHeight = getHeight();\r\n\r\n    float imgAspect = 1280f / 859f;\r\n    float compAspect = (float) compWidth / compHeight;\r\n\r\n    int drawWidth, drawHeight, x, y;\r\n\r\n    if (compAspect > imgAspect) {\r\n        drawHeight = compHeight;\r\n        drawWidth = (int) (compHeight * imgAspect);\r\n        x = (compWidth - drawWidth) / 2;\r\n        y = 0;\r\n    } else {\r\n        drawWidth = compWidth;\r\n        drawHeight = (int) (compWidth / imgAspect);\r\n        x = 0;\r\n        y = (compHeight - drawHeight) / 2;\r\n    }\r\n\r\n    g.drawImage(img.getScaledInstance(drawWidth, drawHeight, Image.SCALE_SMOOTH), x, y, this);\r\n}\r\n""]",0,1
"[""interface ITask<T, R extends TaskResult<T>> {\r\n    R make();\r\n}\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(\""alphaTask\"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\npublic static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n    return tasks.stream()\r\n                .map(ITask::make)\r\n                .collect(Collectors.toList());\r\n}\r\nList<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\nList<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n""]",0,1
"[""try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(\""content-type\"", \""application/json\"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(\""[\"");\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        try {\r\n            respWriter.write(jsonSerialize(data));\r\n            if (iterator.hasNext()) {\r\n                respWriter.write(\"",\"");\r\n            }\r\n        } catch (JsonProcessingException e) {\r\n            log(e);\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n\r\n    respWriter.write(\""]\"");\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n""]",0,1
"[""import com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\n\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        try (\r\n            InputStreamReader isr = new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath)));\r\n            CSVReader reader = new CSVReaderBuilder(isr).withSeparator('\\t').build()\r\n        ) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + \"" \"" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(\""/path-to-tsv-file.tsv\"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public static boolean search(int[][] mat, int num) {\r\n    int n = mat.length;\r\n    int mid = n / 2;\r\n\r\n    if (binarySearch(mat, 0, 0, mid - 1, mid - 1, num)) return true;\r\n    if (binarySearch(mat, 0, mid, mid - 1, n - 1, num)) return true;\r\n    if (binarySearch(mat, mid, mid, n - 1, n - 1, num)) return true;\r\n    if (binarySearch(mat, mid, 0, n - 1, mid - 1, num)) return true;\r\n\r\n    return false;\r\n}\r\n\r\nprivate static boolean binarySearch(int[][] mat, int r1, int c1, int r2, int c2, int target) {\r\n    while (r1 <= r2 && c1 <= c2) {\r\n        int low = 0, high = (r2 - r1 + 1) * (c2 - c1 + 1) - 1;\r\n\r\n        while (low <= high) {\r\n            int mid = (low + high) / 2;\r\n            int row = r1 + mid / (c2 - c1 + 1);\r\n            int col = c1 + mid % (c2 - c1 + 1);\r\n            int val = mat[row][col];\r\n\r\n            if (val == target) return true;\r\n            if (val < target) low = mid + 1;\r\n            else high = mid - 1;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return false;\r\n}\r\n""]",0,1
"[""@PostMapping(path = \""/my_endpoint\"")\r\npublic String run() throws Exception {\r\n    producerTemplate.sendBody(\""direct:\"" + JOB_NAME, null);\r\n    return \""ok\"";\r\n}\r\npublic String xyz() {\r\n    // do job stuff\r\n    return \""done\"";\r\n}\r\n""]",0,1
"[""import org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport java.io.FileReader;\r\nimport java.security.KeyPair;\r\nimport java.security.PrivateKey;\r\n\r\npublic class LoadEncryptedPrivateKey {\r\n\r\n    public static PrivateKey loadPrivateKey(String pemFilePath, char[] password) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(pemFilePath))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\""BC\"");\r\n\r\n            KeyPair keyPair;\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMEncryptedKeyPair encryptedKeyPair = (PEMEncryptedKeyPair) object;\r\n\r\n                // decrypt the key pair using the password\r\n                keyPair = encryptedKeyPair.decryptKeyPair(\r\n                    new JcePEMDecryptorProviderBuilder().build(password)\r\n                );\r\n            } else if (object instanceof PEMKeyPair) {\r\n                // unencrypted key pair\r\n                keyPair = (PEMKeyPair) object;\r\n            } else {\r\n                throw new IllegalArgumentException(\""Not a valid PEM key pair\"");\r\n            }\r\n\r\n            return converter.getPrivateKey(keyPair.getPrivateKeyInfo());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        // Make sure BouncyCastle provider is added:\r\n        java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n\r\n        String pathToEncryptedKey = \""path/to/your/encrypted_rsa_private_key.pem\"";\r\n        char[] password = \""your_passphrase\"".toCharArray();\r\n\r\n        PrivateKey privateKey = loadPrivateKey(pathToEncryptedKey, password);\r\n\r\n        System.out.println(\""Loaded private key algorithm: \"" + privateKey.getAlgorithm());\r\n\r\n        // Now you can use this PrivateKey for your crypto ops.\r\n    }\r\n}\r\n""]",0,1
"[""@Override\r\npublic void init(ServletConfig config) throws ServletException {\r\n    super.init(config);\r\n    try {\r\n        connectToBackendServer();\r\n    } catch (Exception e) {\r\n        throw new UnavailableException(\""Cannot connect to Backend Server\"", -1); // -1 means indefinite unavailability\r\n    }\r\n}\r\n""]",0,1
"[""@Test\r\nvoid testItemAlreadyCreatedException() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(any(String.class))).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(\""There is an item created with this name\"", ex.getMessage());\r\n\r\n    verify(itemRepository).findByItemNameIgnoreCase(any(String.class));\r\n}\r\n@BeforeEach\r\nvoid setup() {\r\n    MockitoAnnotations.openMocks(this);\r\n    itemService = new ItemService(itemRepository, categorieRepository, itemDTOMapper, imageService);\r\n}\r\n""]",0,1
"[""@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class FlatDmnTestCaseResult {\r\n    private Map<String, Object> testInput;\r\n    private Map<String, Object> expectedOutput;\r\n    private Map<String, Object> singleTestOutput;\r\n    private String errorMessage;\r\n}\r\npublic String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    List<FlatDmnTestCaseResult> flatResults = new ArrayList<>();\r\n\r\n    for (DmnTestCaseResult r : results) {\r\n        if (r.getTestOutput() != null && !r.getTestOutput().isEmpty()) {\r\n            for (Map<String, Object> output : r.getTestOutput()) {\r\n                flatResults.add(new FlatDmnTestCaseResult(r.getTestInput(), r.getExpectedOutput(), output, r.getErrorMessage()));\r\n            }\r\n        } else {\r\n            flatResults.add(new FlatDmnTestCaseResult(r.getTestInput(), r.getExpectedOutput(), null, r.getErrorMessage()));\r\n        }\r\n    }\r\n\r\n    try(StringWriter sw = new StringWriter();\r\n        CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, CSVWriter.NO_QUOTE_CHARACTER,\r\n                                         CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        StatefulBeanToCsv<FlatDmnTestCaseResult> beanToCsv = new StatefulBeanToCsvBuilder<FlatDmnTestCaseResult>(writer)\r\n                .withApplyQuotesToAll(false)\r\n                .build();\r\n\r\n        beanToCsv.write(flatResults);\r\n        return sw.toString();\r\n    } catch(Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""// Replace your nodes List with:\r\nprivate Map<String, Integer> nodeIndices = new HashMap<>();\r\n\r\n// When adding nodes, assign their index:\r\nprivate void addNodeIfAbsent(String node) {\r\n    if (!nodeIndices.containsKey(node)) {\r\n        nodeIndices.put(node, nodeIndices.size());\r\n    }\r\n}\r\n\r\n// Update your addEdge method:\r\nprivate void addEdge(String from, String to, int capacity) {\r\n    addNodeIfAbsent(from);\r\n    addNodeIfAbsent(to);\r\n    network.computeIfAbsent(from, k -> new HashMap<>()).put(to, capacity);\r\n    network.computeIfAbsent(to, k -> new HashMap<>()).put(from, 0);\r\n}\r\n\r\n// Then, in bfs and dfs, replace every nodes.indexOf(x) with nodeIndices.get(x):\r\n// Example in bfs:\r\nlevel = new int[nodeIndices.size()];\r\nArrays.fill(level, -1);\r\nlevel[nodeIndices.get(source)] = 0;\r\n\r\n...\r\n\r\nint uIndex = nodeIndices.get(u);\r\nint vIndex = nodeIndices.get(v);\r\n\r\nif (capacity > 0 && level[vIndex] == -1) {\r\n    level[vIndex] = level[uIndex] + 1;\r\n    queue.offer(v);\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    public static Ringtone r;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            VibrationEffect vibrationEffect = VibrationEffect.createOneShot(1000, VibrationEffect.DEFAULT_AMPLITUDE);\r\n            Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n            if (vibrator != null) vibrator.vibrate(vibrationEffect);\r\n        } else {\r\n            Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n            if (vibrator != null) vibrator.vibrate(1000);\r\n        }\r\n\r\n        String event = intent.getStringExtra(\""title\"");\r\n        String comment = intent.getStringExtra(\""comment\"");\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        String text = \""Reminder for the Event: \\n\"" + event + \""\\nComments: \\n\"" + comment;\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \""myandroid\"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat.from(context).notify(123, builder.build());\r\n\r\n        Uri notificationSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        r = RingtoneManager.getRingtone(context, notificationSound);\r\n        if (r != null && !r.isPlaying()) r.play();\r\n    }\r\n}\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    if (AlarmReceiver.r != null && AlarmReceiver.r.isPlaying()) {\r\n        AlarmReceiver.r.stop();\r\n    }\r\n}\r\n""]",0,1
"[""int[] array = new int[10];\r\narray[0] = 6;\r\narray[1] = 2;\r\narray[2] = 8;\r\narray[3] = 1;\r\narray[4] = 3;\r\narray[5] = 0;\r\narray[6] = 9;\r\narray[7] = 7;\r\n\r\nSystem.out.print(\""Search for? \"");\r\nint searching = in.nextInt();\r\nboolean found = false;\r\n\r\nfor(int i = 0; i < array.length; i++) {\r\n    if(searching == array[i]) {\r\n        System.out.println(searching + \"" is at index \"" + i + \"".\"");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\n\r\nif (!found) {\r\n    System.out.println(searching + \"" was not found.\"");\r\n}\r\n""]",0,1
"[""lineChart.getData().addAll(series1, series2, series3);\r\n\r\nPlatform.runLater(() -> {\r\n    setSeriesColor(series1, \""red\"");\r\n    setSeriesColor(series2, \""blue\"");\r\n    setSeriesColor(series3, \""green\"");\r\n});\r\n\r\nprivate void setSeriesColor(XYChart.Series<Number, Number> series, String color) {\r\n    Node line = series.getNode().lookup(\"".chart-series-line\"");\r\n    if (line != null) {\r\n        line.setStyle(\""-fx-stroke: \"" + color + \"";\"");\r\n    }\r\n    for (XYChart.Data<Number, Number> data : series.getData()) {\r\n        Node symbol = data.getNode().lookup(\"".chart-line-symbol\"");\r\n        if (symbol != null) {\r\n            symbol.setStyle(\""-fx-background-color: \"" + color + \"", white;\"");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""private Group createOutlinedMesh(MeshView original, Color outlineColor, double outlineWidth) {\r\n    MeshView outline = new MeshView(original.getMesh());\r\n    outline.setMaterial(new PhongMaterial(outlineColor));\r\n    outline.setCullFace(CullFace.FRONT);\r\n    outline.setDrawMode(DrawMode.FILL);\r\n    outline.setScaleX(original.getScaleX() + outlineWidth);\r\n    outline.setScaleY(original.getScaleY() + outlineWidth);\r\n    outline.setScaleZ(original.getScaleZ() + outlineWidth);\r\n\r\n    Group group = new Group(outline, original);\r\n    return group;\r\n}\r\n""]",0,1
"[""public String generateJwtToken(Authentication authentication, String tenantId) {\r\n    UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(\""tenant\"", tenantId)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n}\r\nString jwt = jwtUtils.generateJwtToken(authentication, subdomain);\r\npublic String getTenantFromJwtToken(String token) {\r\n    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().get(\""tenant\"", String.class);\r\n}\r\nString tenantFromToken = jwtUtils.getTenantFromJwtToken(jwt);\r\nif (!tenantFromToken.equals(subdomain)) {\r\n    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \""Tenant mismatch\"");\r\n    return;\r\n}\r\n""]",0,1
"[""public String inputTake() {\r\n    Scanner scan = new Scanner(system.in);\r\n    String guess;\r\n\r\n    while (true) {\r\n        System.out.println(\""choose a word, pick carefully: \"");\r\n        guess = scan.next();\r\n\r\n        if (checkInput(guess)) {\r\n            return guess;\r\n        } else {\r\n            System.out.println(\""make sure your guess consists of 5 english letters, try again.\"");\r\n        }\r\n    }\r\n}\r\n\r\npublic boolean checkInput(String input) {\r\n    if (input.length() != 5) return false;\r\n    if (!input.matches(\""[a-zA-Z]+\"")) return false;\r\n    return true;\r\n}\r\n""]",0,1
"[""@Component\r\npublic class LanguageFactory {\r\n\r\n    private final Map<String, LanguageService> languageServiceMap;\r\n\r\n    public LanguageFactory(List<LanguageService> services) {\r\n        this.languageServiceMap = services.stream()\r\n            .collect(Collectors.toMap(s -> s.getClass().getAnnotation(Service.class).value(), Function.identity()));\r\n    }\r\n\r\n    public LanguageService getLanguageService(String qualifier) {\r\n        return languageServiceMap.getOrDefault(qualifier, languageServiceMap.get(\""english\""));\r\n    }\r\n}\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(LanguageFactory factory, @Value(\""${configuration}\"") String configuration) {\r\n        this.languageService = factory.getLanguageService(configuration);\r\n    }\r\n\r\n    @GetMapping(\""/test\"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n""]",0,1
"[""@Mapper(componentModel = \""spring\"")\r\npublic abstract class YourMapper {\r\n\r\n    @Mapping(target = \""agentName\"", source = \""agentName\"")\r\n    @Mapping(target = \""agentIdentityType\"", source = \""agentIdentityType\"")\r\n    @Mapping(target = \""agentIdentityNo\"", source = \""agentIdentityNo\"")\r\n    @Mapping(target = \""agentIdentityExpireAt\"", source = \""agentIdentityExpireAt\"")\r\n    public abstract AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO dto);\r\n\r\n    @BeforeMapping\r\n    protected AgentInfo skipIfAllFieldsNull(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) return null;\r\n\r\n        if (dto.getAgentName() == null &&\r\n            dto.getAgentIdentityType() == null &&\r\n            dto.getAgentIdentityNo() == null &&\r\n            dto.getAgentIdentityExpireAt() == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(); // return dummy to continue mapping\r\n    }\r\n}\r\n""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n\r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(\""user.home\"") + \""\\\\Desktop\\\\testData.txt\""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n    String line;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split(\"",\""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<>();\r\n            String[] values = line.split(\"",\"");\r\n            for (int i = 0; i < values.length; i++) {\r\n                myRecord.put(headers.get(i), values[i]);\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n\r\n    System.out.println(\""My Table:\"" + myTable);\r\n}\r\n""]",0,1
"[""@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n\r\n        return chain.filter(exchange)\r\n                .doOnSuccess(aVoid -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-success\"", Long.toString(delta));\r\n                    }\r\n                })\r\n                .doOnError(throwable -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-error\"", Long.toString(delta));\r\n                    }\r\n                })\r\n                .doFinally(signalType -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-finally\"", Long.toString(delta));\r\n                    }\r\n                });\r\n    }\r\n}\r\n""]",0,1
"[""import ctypes\r\n\r\ndef ref_count(x):\r\n    return ctypes.c_long.from_address(id(x))\r\n\r\ndef mutate_int(val, new_val):\r\n    int_type = ctypes.c_long\r\n    addr = id(val)\r\n    value_ptr = ctypes.cast(addr + ctypes.sizeof(int_type) * 2, ctypes.POINTER(int_type))\r\n    value_ptr.contents.value = new_val\r\n\r\nmutate_int(1, 2)\r\n\r\nprint(1 == 2)  # True\r\nprint(1 + 1)   # 4\r\n""]",0,1
"[""from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n""]",0,1
"[""import cv2 as cv\r\nimport numpy as np\r\n\r\nimg = cv.imread(\""boston_cooking_a.jpg\"", cv.IMREAD_GRAYSCALE)\r\nthresh = cv.adaptiveThreshold(img, 255, cv.ADAPTIVE_THRESH_MEAN_C,\r\n                              cv.THRESH_BINARY_INV, 31, 15)\r\n\r\ncontours, _ = cv.findContours(thresh, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)\r\n\r\npoints_by_line = {}\r\n\r\nfor cnt in contours:\r\n    x, y, w, h = cv.boundingRect(cnt)\r\n    if h > 5 and w > 5:\r\n        cy = y + h  # bottom of the character\r\n        line_key = cy // 20  # crude line grouping by vertical position\r\n        points_by_line.setdefault(line_key, []).append((x + w // 2, cy))\r\n\r\nbaseline_img = cv.cvtColor(img, cv.COLOR_GRAY2BGR)\r\n\r\nfor line in points_by_line.values():\r\n    if len(line) < 5:\r\n        continue\r\n    pts = np.array(line)\r\n    [vx, vy, x0, y0] = cv.fitLine(pts, cv.DIST_L2, 0, 0.01, 0.01)\r\n    left_x = 0\r\n    right_x = img.shape[1]\r\n    left_y = int(((left_x - x0) * vy / vx) + y0)\r\n    right_y = int(((right_x - x0) * vy / vx) + y0)\r\n    cv.line(baseline_img, (left_x, left_y), (right_x, right_y), (0, 0, 255), 2)\r\n\r\ncv.imwrite(\""baseline_output.jpg\"", baseline_img)\r\n""]",0,1
"[""from pydantic import BaseModel, field_validator\r\nfrom typing import Tuple\r\n\r\nclass Window(BaseModel):\r\n    size: Tuple[int, int]\r\n\r\n    @field_validator('size', mode='before')\r\n    @classmethod\r\n    def parse_size(cls, v):\r\n        if isinstance(v, str):\r\n            try:\r\n                x, y = v.split('x')\r\n                return int(x), int(y)\r\n            except Exception:\r\n                raise ValueError(\""Size must be in format 'WIDTHxHEIGHT'\"")\r\n        return v\r\n\r\nfields = {'size': '1920x1080'}\r\nwindow = Window(**fields)\r\nprint(window)\r\n""]",0,1
"[""def deduplicate(logs):\r\n    seen = set()\r\n    for log in logs:\r\n        key = tuple(sorted(log.items()))\r\n        if key in seen:\r\n            continue\r\n        seen.add(key)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'fruit': 'orange', 'id': '1234', 'error': None}\r\n]\r\n\r\nprint(list(deduplicate(logs)))\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Response\r\nimport time\r\nfrom starlette.responses import StreamingResponse\r\nimport asyncio\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware(\""http\"")\r\nasync def capture_response_body(request: Request, call_next):\r\n    start_time = time.time()\r\n\r\n    response = await call_next(request)\r\n\r\n    # read the body from the response stream\r\n    body = b\""\""\r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n\r\n    process_time = time.time() - start_time\r\n\r\n    # log or modify `body` here if needed\r\n    print(f\""Response body: {body.decode()}\"")\r\n\r\n    # build a new response so we don't break streaming\r\n    new_response = Response(\r\n        content=body,\r\n        status_code=response.status_code,\r\n        headers=dict(response.headers),\r\n        media_type=response.media_type\r\n    )\r\n    new_response.headers[\""X-Process-Time\""] = str(process_time)\r\n    return new_response\r\n""]",0,1
"[""import numpy as np\r\n\r\nclass NonRandomGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.iterator = iter(self.sequence)\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.iterator)\r\n        except StopIteration:\r\n            raise RuntimeError(\""Non-random sequence exhausted\"")\r\n\r\nrng = lambda : np.random.randint(2, 20) // 2\r\nnrng = NonRandomGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n""]",0,1
"[""import asyncio\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(\""Enter to the Context Manager...\"")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(\""Exit from the Context Manager...\"")\r\n\r\n        try:\r\n            async with asyncio.timeout(5):  # optional timeout to avoid hangs\r\n                await asyncio.sleep(1)\r\n                print(\""This line is executed\"")\r\n                await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(\""Cancelled during __aexit__, suppressing temporarily\"")\r\n            # optional: re-raise or log\r\n            return True  # suppresses CancelledError (careful with this)\r\n""]",0,1
"[""\""python.testing.pytestArgs\"": [\r\n    \""tests\""\r\n],\r\n\""python.testing.unittestEnabled\"": false,\r\n\""python.testing.pytestEnabled\"": true,\r\n\""python.testing.cwd\"": \""${workspaceFolder}\"",\r\n\""python.testing.debugPort\"": 5678,\r\n\""python.testing.autoTestDiscoverOnSaveEnabled\"": true,\r\n\""python.testing.pytestPath\"": \""pytest\"",\r\n\""python.testing.pytestEnabled\"": true,\r\n\""python.testing.pytestDebuggingOptions\"": {\r\n    \""console\"": \""integratedTerminal\"",\r\n    \""redirectOutput\"": true\r\n}\r\n{\r\n    \""name\"": \""Debug Pytest\"",\r\n    \""type\"": \""python\"",\r\n    \""request\"": \""launch\"",\r\n    \""module\"": \""pytest\"",\r\n    \""args\"": [\r\n        \""tests/test_something.py::test_failing_case\""\r\n    ],\r\n    \""console\"": \""integratedTerminal\"",\r\n    \""justMyCode\"": false\r\n}\r\n""]",0,1
"[""from fastapi import FastAPI\r\nfrom user import User\r\nfrom item import Item\r\n\r\nUser.update_forward_refs(Item=Item)\r\n\r\napp = FastAPI()\r\n\r\n@app.get(\""/\"", response_model=User)\r\ndef main():\r\n    return {\r\n        \""id\"": 1,\r\n        \""age\"": 30,\r\n        \""bought_items\"": [\r\n            {\""id\"": 101, \""price\"": 9.99, \""name\"": \""banana\""}\r\n        ]\r\n    }\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Protocol, Callable, Dict, runtime_checkable\r\n\r\n@runtime_checkable\r\nclass HasSaveAndFields(Protocol):\r\n    def save(self) -> None: ...\r\n    my_fields_dict: Dict[str, str]\r\n\r\ndef mydecorator(cls):\r\n    def save(self):\r\n        print(f\""saving {self}\"")\r\n    setattr(cls, \""save\"", save)\r\n    setattr(cls, \""my_fields_dict\"", {\""a\"": \""str\""})\r\n    return cls\r\n\r\n@mydecorator\r\n@dataclass\r\nclass A:\r\n    a: str = \""\""\r\n\r\na: HasSaveAndFields = A()\r\na.save()\r\nprint(a.my_fields_dict)\r\n""]",0,1
"[""import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  # x1 + x2 + x3 = 2\r\n    [1, 0, 0, 1],  # x1 + x4 = 1\r\n    [1, 1, 0, 0]   # x1 + x2 = 1\r\n])\r\nb_eq = np.array([2, 1, 1])\r\nn = A_eq.shape[1]\r\n\r\nguaranteed_0 = []\r\nguaranteed_1 = []\r\n\r\nfor i in range(n):\r\n    bounds_0 = [(0, 1)] * n\r\n    bounds_0[i] = (0, 0)\r\n    res0 = linprog(np.zeros(n), A_eq=A_eq, b_eq=b_eq, bounds=bounds_0, method='highs-ipm')\r\n\r\n    bounds_1 = [(0, 1)] * n\r\n    bounds_1[i] = (1, 1)\r\n    res1 = linprog(np.zeros(n), A_eq=A_eq, b_eq=b_eq, bounds=bounds_1, method='highs-ipm')\r\n\r\n    if res0.success and not res1.success:\r\n        guaranteed_0.append(i)\r\n    elif res1.success and not res0.success:\r\n        guaranteed_1.append(i)\r\n\r\nprint(\""Guaranteed 0s:\"", guaranteed_0)\r\nprint(\""Guaranteed 1s:\"", guaranteed_1)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        \""nrs\"": [1, 2, 3, None, 5],\r\n        \""names\"": [\""foo\"", \""ham\"", \""spam\"", \""egg\"", None],\r\n        \""random\"": np.random.rand(5),\r\n        \""groups\"": [\""A\"", \""A\"", \""B\"", \""C\"", \""B\""],\r\n    }\r\n)\r\n\r\nfig = px.bar(x=df[\""names\""].to_list(), y=df[\""random\""].to_list())\r\nfig.show()\r\n""]",0,1
"[""spouse = match name:\r\n    case \""John\"":\r\n        \""Jane\""\r\n    case \""David\"":\r\n        \""Alice\""\r\ndef get_spouse(name):\r\n    match name:\r\n        case \""John\"":\r\n            return \""Jane\""\r\n        case \""David\"":\r\n            return \""Alice\""\r\n        case _:\r\n            return \""Unknown\""\r\n\r\nspouse = get_spouse(name)\r\nspouse = {\""John\"": \""Jane\"", \""David\"": \""Alice\""}.get(name, \""Unknown\"")\r\n""]",0,1
"[""from llama_cpp import Llama\r\n\r\nllm = Llama(\r\n    model_path=\""path/to/model.gguf\"",\r\n    n_ctx=2048,  # context window\r\n    n_threads=4, # adjust for your CPU\r\n)\r\n\r\noutput = llm(\""Q: What's the capital of France?\\nA:\"", max_tokens=32)\r\nprint(output[\""choices\""][0][\""text\""])\r\n""]",0,1
"[""from elasticsearch import Elasticsearch\r\n\r\nes = Elasticsearch(\r\n    hosts=[{\r\n        'host': str(es_host),\r\n        'port': int(es_port),\r\n        'scheme': 'http'\r\n    }],\r\n    http_auth=(str(es_username), str(es_password)),\r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_index)\r\n""]",0,1
"[""{\r\n  \""version\"": \""0.2.0\"",\r\n  \""configurations\"": [\r\n    {\r\n      \""name\"": \""Python: Prompt for data dir\"",\r\n      \""type\"": \""python\"",\r\n      \""request\"": \""launch\"",\r\n      \""program\"": \""${file}\"",\r\n      \""args\"": [\""${input:dataDir}\""],\r\n      \""cwd\"": \""${workspaceFolder}/my_data\""\r\n    }\r\n  ],\r\n  \""inputs\"": [\r\n    {\r\n      \""id\"": \""dataDir\"",\r\n      \""type\"": \""promptString\"",\r\n      \""description\"": \""Enter relative path to data directory\"",\r\n      \""default\"": \""dataset1\""\r\n    }\r\n  ]\r\n}\r\n""]",0,1
"[""import logging\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\nimport logging\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nprompt = ChatPromptTemplate.from_template(\""tell me a joke about {topic}\"")\r\nmodel = ChatOpenAI(verbose=True)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\nprint(chain.invoke({\""topic\"": \""ice cream\""}))\r\n""]",0,1
"[""from transformers import pipeline, AutoProcessor\r\nfrom PIL import Image\r\n\r\n# This repo lacks config.json, so you can't load via pipeline or AutoModel directly\r\n# Instead, you need to load the raw model weights manually or use another repo that provides a config.\r\n\r\n# Check if you can use the raw weights or a compatible repo:\r\n# e.g. look for a repo with config.json for U2NET or your model variant.\r\n\r\n# Alternatively, try using AutoProcessor for preprocessing (if available)\r\nprocessor = AutoProcessor.from_pretrained(\""Carve/u2net-universal\"", trust_remote_code=True)\r\n\r\n# But loading model weights manually is likely needed:\r\n# from your local checkpoint or via custom code.\r\n\r\n# So, best approach is to find a HF repo for your model that includes config.json or convert the model weights yourself.\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        \""A\"": [\""foo\"", \""ham\"", \""spam\"", \""egg\""],\r\n        \""L\"": [\""A54\"", \""A12\"", \""B84\"", \""C12\""],\r\n        \""G\"": [\""X34\"", \""C84\"", \""G96\"", \""L6\""],\r\n    }\r\n)\r\n\r\ndf = df.with_columns([\r\n    pl.when(pl.col(\""A\"").is_in([\""foo\"", \""spam\""]))\r\n      .then(\""XX\"")\r\n      .otherwise(pl.col(\""L\""))\r\n      .alias(\""L\""),\r\n    pl.when(pl.col(\""A\"").is_in([\""foo\"", \""spam\""]))\r\n      .then(\""XX\"")\r\n      .otherwise(pl.col(\""G\""))\r\n      .alias(\""G\""),\r\n])\r\n\r\nprint(df)\r\n""]",0,1
"[""import os\r\nimport time\r\nimport signal\r\n\r\ndef _do_work(data, parent_pid):\r\n    def parent_is_alive(pid):\r\n        try:\r\n            # Sending signal 0 just tests if pid exists\r\n            os.kill(pid, 0)\r\n            return True\r\n        except OSError:\r\n            return False\r\n\r\n    # Your normal work loop, but check parent every so often\r\n    for chunk in data:\r\n        if not parent_is_alive(parent_pid):\r\n            print(\""Parent died, exiting worker.\"")\r\n            return None\r\n        # do actual work on chunk here\r\n        time.sleep(0.1)  # simulate work\r\n\r\n    return \""done\""\r\nimport concurrent.futures\r\nimport os\r\n\r\nparent_pid = os.getpid()\r\n\r\nwith concurrent.futures.ProcessPoolExecutor(max_workers=n_workers) as executor:\r\n    futures = [executor.submit(_do_work, data, parent_pid) for data in data_list]\r\n    for i, future in enumerate(concurrent.futures.as_completed(futures)):\r\n        print(f'{i}: {future.result()}')\r\n""]",0,1
"[""from tqdm import tqdm\r\nimport pandas as pd\r\n\r\ntqdm.pandas()\r\n\r\n# Make sure your DataFrame isn't too small and func1 actually takes time per row\r\ndf.progress_apply(lambda x: func1(x.textbody), axis=1)\r\ndf.progress_apply(lambda x: func1(x.textbody), axis=1, miniters=1)\r\nfrom tqdm import tqdm\r\n\r\nresults = []\r\nfor _, row in tqdm(df.iterrows(), total=len(df)):\r\n    results.append(func1(row.textbody))\r\n""]",0,1
"[""from fastapi import FastAPI, Request, status\r\nfrom fastapi.responses import RedirectResponse, HTMLResponse\r\nfrom starlette.middleware.sessions import SessionMiddleware\r\n\r\napp = FastAPI()\r\napp.add_middleware(SessionMiddleware, secret_key=\""your-secret-key\"")\r\n\r\n@app.get(\""/\"", response_class=HTMLResponse)\r\nasync def get_main_data(request: Request):\r\n    msg = request.session.pop(\""msg\"", None)\r\n    result = request.session.pop(\""result\"", None)\r\n    return templates.TemplateResponse(\""home.html\"", {\""request\"": request, \""msg\"": msg, \""result\"": result})\r\n\r\n@app.post(\""/\"")\r\nasync def post_main_data(request: Request):\r\n    form = await request.form()\r\n    # your logic here, e.g.:\r\n    if condition:\r\n        request.session[\""result\""] = str(trans)\r\n    else:\r\n        request.session[\""msg\""] = str(err)\r\n    return RedirectResponse(url=request.url_for(\""get_main_data\""), status_code=status.HTTP_303_SEE_OTHER)\r\n""]",0,1
"[""import polars as pl\r\n\r\nmask = (pl.col(\""value\"").is_null()) & (pl.col(\""quantity\"") == 0)\r\n\r\ncols = [\""value\"", \""value_other\"", \""value_other2\""]\r\n\r\ndf = df.with_columns(\r\n    [\r\n        pl.when(mask)\r\n          .then(0)\r\n          .otherwise(pl.col(col))\r\n          .alias(col)\r\n        for col in cols\r\n    ]\r\n)\r\nmask = (pl.col(\""value\"").is_null()) & (pl.col(\""quantity\"") == 0)\r\n\r\ndf = df.with_columns(\r\n    pl.all(cols).map(lambda s: s.where(~mask, 0))\r\n)\r\n""]",0,1
"[""import os\r\nfrom fastapi import Depends, HTTPException, Security\r\n\r\nAPI_KEY = \""secret\""\r\nENV = os.getenv(\""ENVIRONMENT\"", \""localhost\"")  # or \""production\""\r\n\r\nasync def api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    if api_key_header != API_KEY:\r\n        raise HTTPException(status_code=401, detail=\""Invalid API Key\"")\r\n\r\nasync def conditional_api_key():\r\n    if ENV == \""localhost\"":\r\n        # skip auth on localhost\r\n        return\r\n    await api_key()\r\n\r\n# then in your router:\r\nrouter = APIRouter(\r\n    prefix=\""/v2/test\"",\r\n    tags=[\""helloWorld\""],\r\n    dependencies=[Depends(conditional_api_key)],\r\n    responses={404: {\""description\"": \""Not found\""}},\r\n)\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame({\r\n    \""Type\"": [\""RF\"", \""RF\"", \""RF\"", \""MLP\"", \""MLP\"", \""MLP\""],\r\n    \""Value\"": [-1.5, -0.1, 1.7, 0.2, -0.7, -0.6]\r\n})\r\n\r\nconditions = [\r\n    df[\""Value\""] < -0.25,\r\n    (df[\""Value\""] >= -0.25) & (df[\""Value\""] <= 0.25),\r\n    df[\""Value\""] > 0.25,\r\n]\r\n\r\nchoices = [\""Low\"", \""Hit\"", \""High\""]\r\n\r\ndf[\""Category\""] = np.select(conditions, choices)\r\n\r\nresult = (\r\n    df.groupby(\""Type\"")[\""Category\""]\r\n    .value_counts()\r\n    .unstack(fill_value=0)\r\n    .reset_index()\r\n)\r\n\r\nprint(result)\r\nCategory Type  Hit  High  Low\r\n0           MLP    1     0    2\r\n1            RF    1     1    1\r\nresult = (\r\n    df.assign(Category=np.select(conditions, choices))\r\n      .groupby(\""Type\"")[\""Category\""]\r\n      .value_counts()\r\n      .unstack(fill_value=0)\r\n      .reset_index()\r\n)\r\n""]",0,1
"[""class SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        return cls(int(v))\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\nclass BaseModel(pydantic.BaseModel):\r\n    __abstract__ = True\r\n\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }\r\n        alias_generator = camelize\r\n        allow_population_by_field_name = True\r\nobj = BaseModel(id=SnowflakeId(12345678901234567890))\r\nprint(obj.json())  # id will be serialized as a string\r\nprint(obj.dict())  # id will still be an int\r\nprint(obj.dict(by_alias=True, encoder={SnowflakeId: str}))\r\n""]",0,1
"[""from datetime import datetime, date\r\nfrom pydantic import BaseModel, field_validator\r\n\r\ndef to_date(field_name, value, formats, return_str=False):\r\n    for fmt in formats:\r\n        try:\r\n            parsed = datetime.strptime(value, fmt).date()\r\n            return parsed if not return_str else parsed.strftime(fmt)\r\n        except Exception:\r\n            continue\r\n    raise ValueError(f\""Invalid date format for field '{field_name}': {value}\"")\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: date\r\n    dt2: date\r\n\r\n    @field_validator('dt', 'dt2', mode='before')\r\n    @classmethod\r\n    def parse_custom_date(cls, value, info):\r\n        formats = ['%Y-%m-%d', '%Y/%m/%d']\r\n        return to_date(info.field_name, value, formats, return_str=False)\r\n""]",0,1
"[""ffrom dataclasses import dataclass\r\nfrom typing import TypeVar, Type, Callable, Any\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(cls: Type[T]) -> Type[T]:\r\n    return cls\r\n\r\ndef my_dataclass(cls: Type[T]) -> Type[T]:\r\n    return something_else(dataclass(cls))\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, \""\"")  # no error now\r\n""]",0,1
"[""# app/dependencies.py\r\ndef build_db_dependency(name: str):\r\n    def dependency() -> Database:\r\n        return build_singleton_whatever(MongoClient, name)\r\n    return dependency\r\n\r\n# app/routes.py\r\nfrom app.dependencies import build_db_dependency\r\n\r\n@app.post(\""/notification/feed\"")\r\nasync def route_receive_notifications(db: Database = Depends(build_db_dependency(\""someDB\""))):\r\n    ...\r\nfrom app.dependencies import build_db_dependency\r\n\r\napp.dependency_overrides[build_db_dependency(\""someDB\"")] = lambda: mock_db\r\n""]",0,1
"[""from itertools import combinations\r\nfrom functools import lru_cache\r\n\r\ndef group_combos(elements, k, n):\r\n    elements = tuple(sorted(elements))\r\n\r\n    @lru_cache(maxsize=None)\r\n    def _helper(remaining, depth):\r\n        if depth == k:\r\n            return [()]\r\n        result = []\r\n        for group in combinations(remaining, n):\r\n            rest = tuple(e for e in remaining if e not in group)\r\n            for subgroups in _helper(rest, depth + 1):\r\n                combo = tuple(sorted((group,) + subgroups))\r\n                if combo not in result:\r\n                    result.append(combo)\r\n        return result\r\n\r\n    return _helper(elements, 0)\r\n\r\nletters = ['A','B','C','D']\r\nres = group_combos(letters, 2, 2)\r\nfor r in res:\r\n    print([''.join(g) for g in r])\r\n""]",0,1
"[""from fastapi.middleware.cors import CORSMiddleware\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\""http://localhost:3000\""],  # or \""*\"" won't work with credentials\r\n    allow_credentials=True,\r\n    allow_methods=[\""*\""],\r\n    allow_headers=[\""*\""],\r\n)await axios.post(login_url, formdata, { withCredentials: true })\r\n""]",0,1
"[""from pyspark.sql import SparkSession, Window\r\nimport pyspark.sql.functions as F\r\n\r\nspark = SparkSession.builder.getOrCreate()\r\n\r\ndf = spark.createDataFrame([\r\n    (\""A\"", 10),\r\n    (\""A\"", 20),\r\n    (\""A\"", 30),\r\n    (\""B\"", 5),\r\n    (\""B\"", 15)\r\n], [\""group\"", \""value\""])\r\n\r\nw = Window.partitionBy(\""group\"").orderBy(\""value\"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n\r\ndf = df.withColumn(\""cumulative_sum\"", F.sum(\""value\"").over(w))\r\ndf.show()\r\n""]",0,1
"[""import asyncio\r\nimport httpx\r\n\r\nurls = [\r\n    \""https://example.com\"",\r\n    \""https://www.google.com\"",\r\n    \""https://www.bbc.co.uk\"",\r\n    # ...\r\n]\r\n\r\nasync def fetch(client, url):\r\n    try:\r\n        resp = await client.get(url, timeout=5)\r\n        return resp.text\r\n    except Exception as e:\r\n        return f\""ERROR: {e}\""\r\n\r\nasync def fetch_all(urls, max_connections=100):\r\n    limits = httpx.Limits(max_connections=max_connections)\r\n    async with httpx.AsyncClient(limits=limits, timeout=5) as client:\r\n        tasks = [fetch(client, url) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\nhtml_responses = asyncio.run(fetch_all(urls))""]",0,1
"[""import polars as pl\r\n\r\ndf1 = pl.read_json('../AAPL/single_statements/1985-09-30-quarterly_balance.json')\r\ndf2 = pl.read_json('../AAPL/single_statements/1986-09-30-quarterly_balance.json')\r\n\r\ndef parse_dates(df):\r\n    return (\r\n        df.lazy()\r\n        .with_columns([\r\n            pl.col(\""date\"").str.to_date(),\r\n            pl.col(\""fillingDate\"").str.to_date(),\r\n            pl.col(\""acceptedDate\"").str.to_date(),\r\n        ])\r\n        .collect()\r\n    )\r\n\r\ndf1 = parse_dates(df1)\r\ndf2 = parse_dates(df2)\r\n\r\ncombined = pl.concat([df1, df2])\r\ncombined_sorted = combined.sort(\""date\"")\r\n""]",0,1
"[""from plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\nfig = make_subplots(\r\n    rows=2, cols=1,\r\n    shared_xaxes=True,\r\n    vertical_spacing=0.05,\r\n    subplot_titles=(title, \""\"")\r\n)\r\n\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x=A_error['CloseDate'], \r\n        y=A_error[err], \r\n        line_color='green',\r\n        marker_color='green',\r\n        mode='lines+markers',\r\n        showlegend=True,\r\n        name=\""A\""\r\n    ),\r\n    row=1, col=1\r\n)\r\n\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x=B_error['CloseDate'], \r\n        y=B_error[err], \r\n        line_color='blue',\r\n        mode='lines+markers',\r\n        showlegend=True,\r\n        name=\""B\""\r\n    ),\r\n    row=2, col=1\r\n)\r\n\r\nfig.update_layout(\r\n    hovermode=\""x unified\"",\r\n    legend_traceorder=\""normal\""\r\n)\r\n\r\nfig.update_yaxes(tickprefix=\""$\"")\r\nfig.add_hline(y=0, line_width=3, line_dash=\""dash\"", line_color=\""black\"")\r\n\r\nfig.show()\r\n""]",0,1
"[""from icu import Collator, Locale\r\nimport unicodedata\r\n\r\ncoll_en = Collator.createInstance(Locale(\""en_US.UTF-8\""))\r\ncoll_fa = Collator.createInstance(Locale(\""fa_IR.UTF-8\""))\r\n\r\ndef is_ascii(s):\r\n    return all(ord(c) < 128 for c in s)\r\n\r\ndef sort_key(s):\r\n    if is_ascii(s):\r\n        return (0, coll_en.getSortKey(s))\r\n    else:\r\n        return (1, coll_fa.getSortKey(s))\r\n\r\nmylist.sort(key=sort_key)\r\n""]",0,1
"[""import pandas as pd\r\nfrom io import StringIO\r\n\r\ntext = \""\""\""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|\r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n\""\""\""\r\n\r\nlines = [line for line in text.strip().splitlines() if '---' not in line]\r\nclean_text = '\\n'.join(lines)\r\n\r\ndf = pd.read_csv(StringIO(clean_text), sep='|').iloc[:, 1:-1]\r\ndf.columns = df.columns.str.strip()\r\n""]",0,1
"[""import torch\r\nimport torchvision.transforms as T\r\nfrom PIL import Image\r\nimport requests\r\nimport onnx\r\nfrom onnx import helper\r\nfrom onnx_tf.backend import prepare\r\n\r\nmodel = torch.hub.load('facebookresearch/detr', 'detr_resnet50', pretrained=True)\r\nmodel.eval()\r\n\r\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\r\nimage = Image.open(requests.get(url, stream=True).raw)\r\ntransform = T.Compose([\r\n    T.Resize(800),\r\n    T.ToTensor(),\r\n    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\r\nimg_tensor = transform(image).unsqueeze(0)\r\n\r\ntorch.onnx.export(\r\n    model, img_tensor, 'detr.onnx',\r\n    opset_version=11,\r\n    input_names=[\""input\""],\r\n    output_names=[\""logits\"", \""boxes\""],\r\n    dynamic_axes={\""input\"": {0: \""batch_size\""}, \""logits\"": {0: \""batch_size\""}, \""boxes\"": {0: \""batch_size\""}}\r\n)\r\n\r\nonnx_model = onnx.load(\""detr.onnx\"")\r\nfor node in onnx_model.graph.node:\r\n    if node.op_type == \""Pad\"" and len(node.input) == 2:\r\n        node.input.append(\""\"")  # workaround for ONNX-TF bug\r\n\r\nonnx.save(onnx_model, \""patched_detr.onnx\"")\r\ntf_rep = prepare(onnx.load(\""patched_detr.onnx\""))\r\ntf_rep.export_graph(\""model_tf\"")\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    \""x\"": [[1], [1, 2], [1, 2, 3]],\r\n    \""y\"": [[True], None, [True, False, True]]\r\n})\r\n\r\nout = df.with_columns([\r\n    pl.when(pl.col(\""y\"").is_null())\r\n      .then(pl.Series([None]) * pl.col(\""x\"").list.len())\r\n      .otherwise(pl.col(\""y\""))\r\n      .alias(\""y\"")\r\n]).explode([\""x\"", \""y\""])\r\n\r\nprint(out)\r\n""]",0,1
"[""def combine(levels):\r\n    def helper(level, prefix):\r\n        if level == len(levels):\r\n            result.append(prefix)\r\n            return\r\n        for item in levels[level]:\r\n            helper(level + 1, prefix + [item])\r\n\r\n    def recurse(level, path, depth):\r\n        if depth == len(levels):\r\n            helper(0, [])\r\n            return\r\n        for item in levels[depth]:\r\n            recurse(item, path + [item], depth + 1)\r\n\r\n    result = []\r\n\r\n    def walk(vals, prefix):\r\n        if not vals:\r\n            result.append(prefix)\r\n            return\r\n        head, *tail = vals\r\n        for i, x in enumerate(head):\r\n            walk(tail, prefix + [x])\r\n\r\n    def align(vals, prefix):\r\n        if len(vals) == 1:\r\n            for x in vals[0]:\r\n                result.append(prefix + [x])\r\n            return\r\n        for x in vals[0]:\r\n            align(vals[1:], prefix + [x])\r\n\r\n    def flatten(vals, prefix=[]):\r\n        if len(vals) == 1:\r\n            for x in vals[0]:\r\n                result.append(prefix + [x])\r\n        else:\r\n            for i, x in enumerate(vals[0]):\r\n                flatten(vals[1:], prefix + [x])\r\n\r\n    def build(base, *levels):\r\n        def dfs(prefix, groups):\r\n            if not groups:\r\n                result.append(prefix)\r\n                return\r\n            head, *tail = groups\r\n            for g in head:\r\n                dfs(prefix + [g], tail)\r\n        for i, year in enumerate(base):\r\n            for j, color in enumerate(levels[0][i]):\r\n                for number in levels[1][i * len(levels[0][0]) + j]:\r\n                    result.append([year[0], color, number])\r\n        return result\r\n\r\n    return build(*levels)\r\n\r\na = [[\""2022\""], [\""2023\""]]\r\nb = [[\""blue\"", \""red\""], [\""green\"", \""yellow\""]]\r\nc = [[\""1\"", \""2\"", \""3\""], [\""4\"", \""5\"", \""6\"", \""7\""], [\""8\"", \""9\"", \""10\"", \""11\""], [\""12\"", \""13\""]]\r\n\r\nprint(combine([a, b, c]))""]",0,1
"[""import polars as pl\r\n\r\ndata = {\r\n    \""a\"": [[1], [2], [3, 4], [5, 6, 7]],\r\n    \""b\"": [[], [8], [9, 10], [11, 12]],\r\n}\r\ndf = pl.DataFrame(data)\r\n\r\nout = df.with_columns(\r\n    pl.min_horizontal(\r\n        pl.col(\""a\"").list.len(),\r\n        pl.col(\""b\"").list.len()\r\n    ).alias(\""len\"")\r\n).with_columns([\r\n    pl.col(\""a\"").list.slice(0, pl.col(\""len\"")).alias(\""a_trimmed\""),\r\n    pl.col(\""b\"").list.slice(0, pl.col(\""len\"")).alias(\""b_trimmed\"")\r\n]).select([\r\n    pl.struct([\""a_trimmed\"", \""b_trimmed\""]).list.eval(\r\n        pl.element().struct.fields([\""a_trimmed\"", \""b_trimmed\""])\r\n    ).alias(\""zipped\"")\r\n]).explode(\""zipped\"").unnest(\""zipped\"")\r\n\r\nprint(out)\r\n""]",0,1
"[""from typing import Callable, Protocol, runtime_checkable\r\nfrom functools import wraps\r\n\r\n\r\n@runtime_checkable\r\nclass MemoizedFib(Protocol):\r\n    def __call__(self, n: int) -> int: ...\r\n    memory: dict[int, int]\r\n\r\n\r\ndef remember(f: Callable[[int], int]) -> MemoizedFib:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore[return-value]\r\n\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\n\r\nprint(fib(100))\r\nprint(fib.memory[100])""]",0,1
"[""from langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmodel = \""sentence-transformers/multi-qa-MiniLM-L6-cos-v1\""\r\nembeddings = HuggingFaceEmbeddings(model_name=model)\r\n\r\ndocs = [\r\n    Document(page_content=\""The sky is blue.\"", metadata={\""document_id\"": \""10\""}),\r\n    Document(page_content=\""The forest is green\"", metadata={\""document_id\"": \""62\""}),\r\n    # add more docs...\r\n]\r\n\r\n# Embed each doc with progress bar\r\nembedded_vectors = []\r\nfor doc in tqdm(docs, desc=\""Embedding documents\""):\r\n    vector = embeddings.embed_query(doc.page_content)\r\n    embedded_vectors.append(vector)\r\n\r\n# Now build FAISS index from vectors and docs\r\ndb = FAISS.from_documents(docs, embeddings, embeddings=embedded_vectors)\r\n\r\ndb.save_local(\""faiss_index\"")""]",0,1
"[""import pytest\r\nfrom fastapi import FastAPI, Response, status\r\nfrom fastapi.testclient import TestClient\r\nfrom contextlib import asynccontextmanager\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = \""Hello\""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = \""Hi\""\r\n    yield\r\n\r\ndef create_app(lifespan):\r\n    app = FastAPI(lifespan=lifespan)\r\n\r\n    @app.get(\""/\"")\r\n    async def root():\r\n        return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n    return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app = create_app(_lifespan_override)\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(\""/\"")\r\n    assert response.text == \""Hi\""""]",0,1
"[""import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef add_real_time(t, delta):\r\n    return (t.astimezone(dt.timezone.utc) + delta).astimezone(t.tzinfo)\r\n\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(\""Europe/Paris\""))\r\nd2_fixed = add_real_time(d0, dt.timedelta(hours=3))\r\n\r\nprint(d2_fixed.isoformat())\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    \""a_0\"": [1, 2],\r\n    \""a_1\"": [3, 4],\r\n    \""a_2\"": [5, 6],\r\n    \""b_0\"": [7, 8],\r\n    \""b_1\"": [9, 10],\r\n    \""b_2\"": [11, 12],\r\n})\r\n\r\nlong_df = (\r\n    df\r\n    .melt()\r\n    .with_columns([\r\n        pl.col(\""variable\"").str.extract(r\""(a|b)\"", 1).alias(\""group\""),\r\n        pl.col(\""value\"")\r\n    ])\r\n    .group_by(\""group\"")\r\n    .agg(pl.col(\""value\""))\r\n    .unnest(\""value\"")\r\n    .transpose(include_header=True)\r\n)\r\n\r\nprint(long_df)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nfrom numpy.linalg import norm\r\n\r\ndata = {\r\n    \""col1\"": [\""a\"", \""b\"", \""c\"", \""d\""],\r\n    \""col2\"": [\r\n        [-0.06066, 0.072485, 0.548874, 0.158507],\r\n        [-0.536674, 0.10478, 0.926022, -0.083722],\r\n        [-0.21311, -0.030623, 0.300583, 0.261814],\r\n        [-0.308025, 0.006694, 0.176335, 0.533835],\r\n    ],\r\n}\r\n\r\ndf = pl.DataFrame(data)\r\n\r\nvectors = np.stack(df[\""col2\""].to_list())\r\nlabels = df[\""col1\""].to_list()\r\n\r\nsimilarity_matrix = (vectors @ vectors.T) / (norm(vectors, axis=1)[:, None] * norm(vectors, axis=1))\r\n\r\nresult = pl.DataFrame(similarity_matrix, schema=labels).with_columns(pl.Series(\""col1_col2\"", labels))\r\n\r\nprint(result)\r\n""]",0,1
"[""from pydantic import BaseModel, Field\r\nfrom typing import Literal, Union\r\nfrom fastapi import FastAPI\r\nfrom fastapi.routing import APIRouter\r\nfrom fastapi.openapi.utils import get_openapi\r\n\r\napp = FastAPI()\r\nrouter = APIRouter()\r\n\r\nclass BDCBaseModel(BaseModel):\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\nclass Foo(BDCBaseModel):\r\n    type: Literal[\""Foo\""] = Field(\""Foo\"", const=True)\r\n    Name: str\r\n\r\nclass Bar(BDCBaseModel):\r\n    type: Literal[\""Bar\""] = Field(\""Bar\"", const=True)\r\n    Name: str\r\n\r\nclass Demo(BDCBaseModel):\r\n    example: Union[Foo, Bar] = Field(..., discriminator=\""type\"")\r\n\r\n@router.post(\""/demo\"")\r\nasync def demo(foo: Foo):\r\n    return Demo(example=foo)\r\n\r\napp.include_router(router)\r\n\r\ndef custom_openapi():\r\n    if app.openapi_schema:\r\n        return app.openapi_schema\r\n    openapi_schema = get_openapi(\r\n        title=\""My API\"",\r\n        version=\""1.0.0\"",\r\n        routes=app.routes,\r\n    )\r\n    for schema in openapi_schema.get(\""components\"", {}).get(\""schemas\"", {}).values():\r\n        props = schema.get(\""properties\"", {})\r\n        if \""type\"" in props:\r\n            props.pop(\""type\"", None)\r\n            req = schema.get(\""required\"", [])\r\n            if \""type\"" in req:\r\n                req.remove(\""type\"")\r\n    app.openapi_schema = openapi_schema\r\n    return app.openapi_schema\r\n\r\napp.openapi = custom_openapi\r\n""]",0,1
"[""import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\nimport sympy as sp\r\n\r\n# example data\r\nX = np.random.rand(100, 2)\r\ny = 3 * X[:, 0]**2 + 2 * X[:, 0] * X[:, 1] + 4 * X[:, 1] + 5\r\n\r\npoly = PolynomialFeatures(degree=2, include_bias=True)\r\nXp = poly.fit_transform(X)\r\nmodel = LinearRegression().fit(Xp, y)\r\n\r\n# extract terms and symbols\r\nn_features = X.shape[1]\r\nsymbols = sp.symbols(f'x0:{n_features}')\r\npoly_terms = poly.get_feature_names_out()\r\n\r\n# build symbolic polynomial\r\nexpr = 0\r\nfor coef, term in zip(model.coef_, poly_terms):\r\n    expr += coef * sp.sympify(term, locals={f'x{i}': symbols[i] for i in range(n_features)})\r\nexpr += model.intercept_\r\n\r\n# compute gradient and Hessian\r\ngradient = [sp.diff(expr, s) for s in symbols]\r\nhessian = [[sp.diff(g, s2) for s2 in symbols] for g in gradient]\r\n\r\n# convert to callable functions\r\nf_grad = sp.lambdify(symbols, gradient, 'numpy')\r\nf_hess = sp.lambdify(symbols, hessian, 'numpy')\r\n\r\n# evaluate\r\nx_sample = X[0]\r\nprint(f_grad(*x_sample))\r\nprint(f_hess(*x_sample))""]",0,1
"[""class BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len_hack__(cls):\r\n        return 9002\r\n\r\n    def __len__(self):\r\n        return self.__len_hack__()\r\n\r\n    def __class_getitem__(cls, item):  # just hijacking some class-level access point\r\n        return cls\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        cls.__class__.__len__ = lambda kls: kls.__len_hack__()\r\n        return super().__new__(cls)""]",0,1
"[""FROM python:3.9\r\n\r\nWORKDIR /project\r\n\r\nCOPY poetry.lock pyproject.toml ./\r\nRUN pip install poetry\r\n\r\nCOPY . .  # or whatever source you need\r\n\r\n# install dependencies without token first to prime the cache\r\nRUN poetry config virtualenvs.create false \\\r\n && poetry install --no-root --no-interaction\r\n\r\n# now inject the token but don't invalidate previous layers\r\nARG CI_JOB_TOKEN\r\nRUN poetry config http-basic.gitlab-pypi-repo gitlab-ci-token ${CI_JOB_TOKEN} \\\r\n && poetry install --no-interaction""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom multiprocessing import Pool\r\nfrom tqdm import tqdm\r\nimport os\r\n\r\ndef calc(args):\r\n    n_digits, pos, total = args\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    getcontext().prec = n_digits + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    pbar = tqdm(total=n, position=pos, desc=f\""Job {pos+1} of {total}\"", leave=True)\r\n    for k in range(n):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n        pbar.update(1)\r\n    pbar.close()\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    return 1 / pi\r\n\r\ndef parallel_with_pool():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    args = [(n, pos, len(tasks)) for pos, n in enumerate(tasks)]\r\n\r\n    with Pool(processes=n_cores) as pool:\r\n        results = pool.map(calc, args)\r\n\r\nif __name__ == \""__main__\"":\r\n    parallel_with_pool()""]",0,1
"[""class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self):\r\n        result = [self.value]\r\n        if self.left:\r\n            result += self.left.traverse_pre()\r\n        if self.right:\r\n            result += self.right.traverse_pre()\r\n        return result\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nprint(Tree.traverse_pre())""]",0,1
"[""from flask import Flask, render_template, jsonify\r\nimport threading\r\nimport time\r\nimport os\r\n\r\napp = Flask(__name__)\r\n\r\nmap_ready = False\r\n\r\ndef create_map_background():\r\n    global map_ready\r\n    # simulate long map creation\r\n    time.sleep(15)  # your create_map()\r\n    # after done:\r\n    map_ready = True\r\n\r\n@app.route('/')\r\ndef loading():\r\n    return render_template(\""loading.html\"")  # show loading spinner or message here\r\n\r\n@app.route('/start_map')\r\ndef start_map():\r\n    global map_ready\r\n    map_ready = False\r\n    threading.Thread(target=create_map_background).start()\r\n    return jsonify({\""status\"": \""started\""})\r\n\r\n@app.route('/check_map')\r\ndef check_map():\r\n    return jsonify({\""ready\"": map_ready})\r\n\r\n@app.route('/map')\r\ndef show_map():\r\n    if map_ready and os.path.exists('templates/map.html'):\r\n        return render_template(\""map.html\"")\r\n    else:\r\n        return \""Map is not ready yet\"", 404""]",0,1
"[""from fastapi import APIRouter, UploadFile, File\r\nfrom app.models.schemas.files import FileInResponse\r\n\r\nrouter = APIRouter()\r\n\r\n@router.post(\r\n    \""\"",\r\n    name=\""files:create-file\"",\r\n    response_model=FileInResponse,\r\n    openapi_extra={\r\n        \""requestBody\"": {\r\n            \""content\"": {\r\n                \""multipart/form-data\"": {\r\n                    \""schema\"": {\r\n                        \""title\"": \""CustomFileUpload\"",  # your custom schema name here\r\n                        \""type\"": \""object\"",\r\n                        \""properties\"": {\r\n                            \""file\"": {\""type\"": \""string\"", \""format\"": \""binary\""}\r\n                        },\r\n                        \""required\"": [\""file\""],\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n)\r\nasync def create(file: UploadFile = File(...)) -> FileInResponse:\r\n    pass""]",0,1
"[""from selenium import webdriver\r\nfrom selenium.webdriver.chrome.options import Options\r\nfrom bs4 import BeautifulSoup\r\nimport pandas as pd\r\n\r\noptions = Options()\r\noptions.headless = True\r\ndriver = webdriver.Chrome(options=options)\r\n\r\ndriver.get('https://www.bmv.com.mx/es/mercados/capitales')\r\n\r\n# wait a bit for JS to render the table, or better: wait for the element explicitly\r\ndriver.implicitly_wait(5)\r\n\r\nsoup = BeautifulSoup(driver.page_source, 'html.parser')\r\ndriver.quit()\r\n\r\ntable = soup.find('table', {'id': 'your-table-id-if-any'})  # or find the <tbody> directly\r\n\r\nheaders = [th.get_text(strip=True) for th in table.find('thead').find_all('th')]\r\nrows = table.find('tbody').find_all('tr')\r\n\r\ndata = []\r\nfor row in rows:\r\n    cols = row.find_all('td')\r\n    data.append([col.get_text(strip=True) for col in cols])\r\n\r\ndf = pd.DataFrame(data, columns=headers)\r\nprint(df)""]",0,1
"[""import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(\""tips\"")\r\n\r\nx = \""sex\""\r\ny = \""total_bill\""\r\nhue = \""smoker\""\r\nrow = \""time\""\r\nhue_order = [\""Yes\"", \""No\""]\r\norder = [\""Male\"", \""Female\""]\r\npairs = [\r\n    ((\""Male\"", \""Yes\""), (\""Male\"", \""No\"")),\r\n    ((\""Female\"", \""Yes\""), (\""Female\"", \""No\""))\r\n]\r\n\r\ng = sns.catplot(\r\n    x=x, y=y, hue=hue, row=row, data=tips, kind=\""bar\"", ci=\""sd\"",\r\n    edgecolor=\""black\"", errcolor=\""black\"", errwidth=1.5, capsize=0.1,\r\n    height=4, aspect=.7, alpha=0.5\r\n)\r\n\r\ng.map(\r\n    sns.stripplot, x, y, hue,\r\n    hue_order=hue_order, order=order,\r\n    palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1\r\n)\r\n\r\nfor i, ax in enumerate(g.axes.flatten()):\r\n    current_time = tips[row].unique()[i]\r\n    data_subset = tips[tips[row] == current_time]\r\n\r\n    annotator = Annotator(\r\n        ax, pairs, data=data_subset,\r\n        x=x, y=y, hue=hue,\r\n        order=order, hue_order=hue_order\r\n    )\r\n    annotator.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=0)\r\n    annotator.apply_test().annotate()\r\n\r\nplt.tight_layout()""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\nimport geopandas as gpd\r\nimport json\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom shapely.geometry import Polygon\r\nfrom sklearn.neighbors import BallTree\r\n\r\nfrom shapely.geometry import Point\r\nfrom shapely.ops import unary_union\r\n\r\nfrom plotly.figure_factory import create_hexbin_mapbox\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n})\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(\""naturalearth_lowres\""))\r\nafr_poly = gdf_poly[gdf_poly['continent'] == 'Africa'].geometry.unary_union\r\n\r\ngdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.LON, data.LAT), crs='EPSG:4326')\r\ngdf = gdf[gdf.within(afr_poly)]\r\n\r\nfig = create_hexbin_mapbox(\r\n    data_frame=gdf,\r\n    lat=\""LAT\"",\r\n    lon=\""LON\"",\r\n    nx_hexagon=25,\r\n    opacity=0.4,\r\n    labels={\""color\"": \""Point Count\""},\r\n    mapbox_style='carto-positron',\r\n    zoom=1,\r\n)\r\n\r\nfig.update_layout(\r\n    mapbox={\r\n        \""layers\"": [\r\n            {\r\n                \""source\"": json.loads(gdf_poly[gdf_poly['continent'] == 'Africa'].geometry.to_json()),\r\n                \""below\"": \""traces\"",\r\n                \""type\"": \""fill\"",\r\n                \""color\"": \""orange\"",\r\n                \""opacity\"": 0.1,\r\n                \""line\"": {\""width\"": 1},\r\n            },\r\n        ],\r\n    }\r\n)\r\n\r\nfig.show()""]",0,1
"[""import matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib\r\n\r\nmatplotlib.rcParams.update({\r\n    \""text.usetex\"": True,\r\n    \""font.family\"": \""serif\"",\r\n    \""font.serif\"": [\""Computer Modern\""],\r\n    \""font.size\"": 12,\r\n    \""axes.labelweight\"": \""bold\"",\r\n    \""xtick.labelsize\"": 12,\r\n    \""ytick.labelsize\"": 12,\r\n})\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns = 1 + np.sin(2 * np.pi * t)\r\n\r\nfig, ax = plt.subplots(figsize=(9,6))\r\nax.plot(t, s)\r\n\r\nax.set_xlabel(r\""\\textbf{time (s) $a_1$}\"")\r\nax.set_ylabel(r\""\\textbf{voltage (mV)}\"")\r\nax.set_title(r\""\\textbf{About as simple as it gets, folks}\"")\r\n\r\nfor label in ax.get_xticklabels():\r\n    label.set_fontweight(\""bold\"")\r\nfor label in ax.get_yticklabels():\r\n    label.set_fontweight(\""bold\"")\r\n\r\nax.grid()\r\nfig.savefig(\""test.png\"")\r\nplt.show()""]",0,1
"[""from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_v1_5\r\nimport socket\r\n\r\nwith socket.create_connection((ip, port)) as s:\r\n    def recv_all(n):\r\n        data = b\""\""\r\n        while len(data) < n:\r\n            chunk = s.recv(n - len(data))\r\n            if not chunk:\r\n                break\r\n            data += chunk\r\n        return data\r\n\r\n    send_cmd = \""auth\""\r\n    version_parts = ver.split(\"".\"")\r\n    # send the auth command with version strings here\r\n\r\n    modulus = recv_all(256)\r\n    exponent = recv_all(3)\r\n\r\n    n = int.from_bytes(modulus, 'big')\r\n    e = int.from_bytes(exponent, 'big')\r\n\r\n    pubkey = RSA.construct((n, e))\r\n    cipher = PKCS1_v1_5.new(pubkey)\r\n\r\n    payload = string1.encode() + string2.encode()\r\n    encrypted = cipher.encrypt(payload)\r\n\r\n    # send encrypted to server here""]",0,1
"[""from pydantic import BaseModel, ValidationError\r\nfrom pydantic import RootModel\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ntry:\r\n    Employee.model_validate({\r\n        \""name\"": \""Mattia\"",\r\n        \""age\"": \""hello\"",\r\n        \""salary\"": {\r\n            \""gross\"": \""hello\"",\r\n            \""net\"": 1000,\r\n            \""tax\"": 10\r\n        }\r\n    })\r\nexcept ValidationError as e:\r\n    print(e)""]",0,1
