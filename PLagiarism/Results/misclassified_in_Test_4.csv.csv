Code,label,predicted_label
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nhttp.cors().and().csrf().disable()\r\n.authorizeHttpRequests(auth -> auth\r\n.requestMatchers(""/calciatore/list"").permitAll()\r\n.anyRequest().authenticated());\r\nreturn http.build();\r\n}\r\n@Bean\r\npublic CorsConfigurationSource corsConfigurationSource() {\r\nCorsConfiguration configuration = new CorsConfiguration();\r\nconfiguration.setAllowedOrigins(List.of(""http://localhost:3000""));\r\nconfiguration.setAllowedMethods(List.of(""GET"", ""POST"", ""PUT"", ""DELETE"", ""OPTIONS""));\r\nconfiguration.setAllowedHeaders(List.of(""*""));\r\nconfiguration.setAllowCredentials(true);\r\nUrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\nsource.registerCorsConfiguration(""/**"", configuration);\r\nreturn source;\r\n}\r\n}""]",0,1
"[""import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\nimport java.util.Map;\r\n\r\npublic class SqsTracePropagation {\r\nprivate final Tracer tracer;\r\nprivate final TextMapPropagator propagator = W3CTraceContextPropagator.getInstance();\r\n\r\npublic SqsTracePropagation(Tracer tracer) {\r\nthis.tracer = tracer;\r\n}\r\n\r\npublic Span startSpanWithExtractedTraceId(Map<String, String> messageAttributes) {\r\nContext extractedContext = propagator.extract(Context.root(), messageAttributes, new TextMapGetter<>() {\r\n@Override\r\npublic Iterable<String> keys(Map<String, String> carrier) {\r\nreturn carrier.keySet();\r\n}\r\n\r\n@Override\r\npublic String get(Map<String, String> carrier, String key) {\r\nreturn carrier.get(key);\r\n}\r\n});\r\n\r\nSpan span = tracer.spanBuilder(""consumeMessage"").setParent(extractedContext).startSpan();\r\nspan.makeCurrent();\r\nreturn span;\r\n}\r\n}""]",0,1
"[""import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\nimport java.util.Collections;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n@Bean\r\npublic FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\nFilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\nfilterRegistrationBean.setUrlPatterns(Collections.singletonList(""/*""));\r\nreturn filterRegistrationBean;\r\n}\r\n}""]",0,1
"[""public abstract class Parent {\r\nprotected abstract static class InnerParent {\r\npublic InnerParent self() {\r\nreturn this;\r\n}\r\n}\r\n}\r\n\r\npublic class Child extends Parent {\r\npublic static class InnerChild extends InnerParent {}\r\n}\r\n\r\npublic class Main {\r\npublic static void main(String[] args) {\r\n// Compilation error: Explicit protected access restriction\r\n// Parent.InnerParent innerChild = new Child.InnerChild().self();\r\n\r\n// Works due to type inference (bypasses explicit protected restriction)\r\nvar innerChild = new Child.InnerChild().self();\r\nSystem.out.println(((Object) innerChild).getClass().getName());\r\n}\r\n}""]",0,1
"[""package com.example.maildemo;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.CommandLineRunner;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.mail.MailException;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.mail.javamail.MimeMessagePreparator;\r\nimport jakarta.mail.Message;\r\nimport jakarta.mail.internet.InternetAddress;\r\nimport jakarta.mail.internet.MimeMessage;\r\nimport java.util.Date;\r\n/*\r\nEnsure your pom.xml includes the proper Jakarta Mail dependency for Spring Boot 3:\r\n  <dependency>\r\n    <groupId>org.eclipse.angus</groupId>\r\n    <artifactId>angus-mail</artifactId>\r\n    <version>1.0.0</version>\r\n  </dependency>\r\n*/\r\n@SpringBootApplication\r\npublic class MailDemoApplication implements CommandLineRunner {\r\n@Autowired\r\nprivate JavaMailSender javaMailSender;\r\npublic static void main(String[] args) {\r\nSpringApplication.run(MailDemoApplication.class, args);\r\n}\r\n@Override\r\npublic void run(String... args) throws Exception {\r\nsendEmail(""recipient@example.com"", ""Test Subject"", ""Hello from Spring Boot 3.1.1 and Java 17!"", false);\r\n}\r\npublic void sendEmail(String toAddress, String subject, String body, boolean error) {\r\nMimeMessagePreparator preparator = mimeMessage -> {\r\nfinal InternetAddress recipient = new InternetAddress(toAddress);\r\nmimeMessage.setFrom(new InternetAddress(""sender@example.com""));\r\nmimeMessage.setRecipient(Message.RecipientType.TO, recipient);\r\nmimeMessage.setSentDate(new Date());\r\nmimeMessage.setSubject(subject);\r\nmimeMessage.setText(body);\r\n};\r\ntry {\r\njavaMailSender.send(preparator);\r\nSystem.out.println(""Email sent successfully!"");\r\n} catch (MailException e) {\r\nSystem.err.println(""Error sending email: "" + e.getMessage());\r\ne.printStackTrace();\r\n}\r\n}\r\n}""]",0,1
"[""package com.example.authserver;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\r\nimport org.springframework.security.oauth2.server.authorization.web.OAuth2AuthorizationServerConfigurer;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\r\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\r\nimport org.springframework.security.web.context.NullSecurityContextRepository;\r\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\r\nimport org.springframework.security.web.util.matcher.NegatedRequestMatcher;\r\n@Configuration\r\npublic class SecurityConfig {\r\n@Bean\r\n@Order(1)\r\npublic SecurityFilterChain corsFilterChain(HttpSecurity http) throws Exception {\r\nhttp.cors(Customizer.withDefaults());\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(2)\r\npublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\r\nOAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\nhttp.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\r\n.oidc(Customizer.withDefaults());\r\nhttp.exceptionHandling(exceptions -> exceptions\r\n.defaultAuthenticationEntryPointFor(new LoginUrlAuthenticationEntryPoint(""/login""),\r\nnew AntPathRequestMatcher(""/**"")));\r\nhttp.oauth2ResourceServer(resourceServer -> resourceServer.jwt(Customizer.withDefaults()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(3)\r\npublic SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\nhttp.securityMatcher(new NegatedRequestMatcher(new AntPathRequestMatcher(""/admin/**"")));\r\nhttp.authorizeHttpRequests(authorize -> authorize\r\n.requestMatchers(new AntPathRequestMatcher(""/register"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/recover"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/error/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/css/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/js/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/favicon.ico"")).permitAll()\r\n.anyRequest().authenticated());\r\nhttp.oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\nhttp.formLogin(form -> {\r\nform.loginPage(""/login"");\r\nform.permitAll();\r\n});\r\nhttp.logout(logout -> logout.logoutSuccessHandler(logoutSuccessHandler()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nhttp.cors(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(4)\r\npublic SecurityFilterChain adminResourceFilterChain(HttpSecurity http) throws Exception {\r\nhttp.securityMatcher(new AntPathRequestMatcher(""/admin/**""));\r\nhttp.authorizeHttpRequests(authorize -> authorize.anyRequest().hasRole(""ADMIN""));\r\nhttp.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\r\nhttp.securityContext(securityContext -> securityContext.securityContextRepository(new NullSecurityContextRepository()));\r\nhttp.oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nhttp.cors(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\npublic LogoutSuccessHandler logoutSuccessHandler() {\r\nreturn (request, response, authentication) -> response.sendRedirect(""/"");\r\n}\r\n}""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\nprivate static final Map<Character,String> ESCAPES=new HashMap<>();\r\nstatic {\r\nESCAPES.put('<',""&lt;"");\r\nESCAPES.put('>',""&gt;"");\r\nESCAPES.put('&',""&amp;"");\r\nESCAPES.put('\'',""&#039;"");\r\nESCAPES.put('""',""&#034;"");\r\n}\r\n\r\npublic static String escape(String input) {\r\nStringBuilder result=new StringBuilder();\r\nfor(char c:input.toCharArray()) {\r\nresult.append(ESCAPES.getOrDefault(c,String.valueOf(c)));\r\n}\r\nreturn result.toString();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nString test=""<Hello & 'World'>"";\r\nSystem.out.println(escape(test));\r\n}\r\n}""]",0,1
"[""import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\npublic static Set<Integer> dividends=Collections.synchronizedSet(new HashSet<>());\r\n\r\npublic static class DivisorTask implements Runnable {\r\nprivate final int n;\r\nprivate final int divisor;\r\n\r\npublic DivisorTask(int n,int divisor) {\r\nthis.n=n;\r\nthis.divisor=divisor;\r\n}\r\n\r\n@Override\r\npublic void run() {\r\nfor(int i=1;i<=n;i++) {\r\nif(i%divisor==0) {\r\ndividends.add(i);\r\n}\r\n}\r\n}\r\n}\r\n\r\npublic int getSum(int n) {\r\nExecutorService executor=Executors.newFixedThreadPool(3);\r\nexecutor.execute(new DivisorTask(n,3));\r\nexecutor.execute(new DivisorTask(n,5));\r\nexecutor.execute(new DivisorTask(n,7));\r\nexecutor.shutdown();\r\ntry {\r\nexecutor.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\r\n}catch(InterruptedException e) {\r\ne.printStackTrace();\r\n}\r\nreturn dividends.stream().mapToInt(Integer::intValue).sum();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nFindMultiples finder=new FindMultiples();\r\nint n=1000;\r\nSystem.out.println(""Sum: ""+finder.getSum(n));\r\n}\r\n}""]",0,1
"[""import java.util.Set;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n    \r\n    public static class DivisorTask implements Callable<Set<Integer>> {\r\n        private final int n;\r\n        private final int divisor;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public Set<Integer> call() {\r\n            Set<Integer> result = new ConcurrentSkipListSet<>();\r\n            for (int i = 1; i <= n; i++) {\r\n                if (i % divisor == 0) {\r\n                    result.add(i);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        Future<Set<Integer>> future3 = executor.submit(new DivisorTask(n, 3));\r\n        Future<Set<Integer>> future5 = executor.submit(new DivisorTask(n, 5));\r\n        Future<Set<Integer>> future7 = executor.submit(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n\r\n        try {\r\n            Set<Integer> uniqueNumbers = new ConcurrentSkipListSet<>();\r\n            uniqueNumbers.addAll(future3.get());\r\n            uniqueNumbers.addAll(future5.get());\r\n            uniqueNumbers.addAll(future7.get());\r\n\r\n            return uniqueNumbers.stream().mapToInt(Integer::intValue).sum();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        int n = 1000;\r\n        System.out.println(""Sum: "" + finder.getSum(n));\r\n    }\r\n}""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class YearWeek implements Comparable<YearWeek> {\r\nprivate final int year;\r\nprivate final int week;\r\n\r\npublic YearWeek(int year,int week) {\r\nthis.year=year;\r\nthis.week=week;\r\n}\r\n\r\npublic static YearWeek parse(String isoWeek) {\r\nString[] parts=isoWeek.split(""-W"");\r\nreturn new YearWeek(Integer.parseInt(parts[0]),Integer.parseInt(parts[1]));\r\n}\r\n\r\npublic boolean isBefore(YearWeek other) {\r\nreturn this.compareTo(other)<0;\r\n}\r\n\r\n@Override\r\npublic int compareTo(YearWeek other) {\r\nreturn year!=other.year?Integer.compare(year,other.year):Integer.compare(week,other.week);\r\n}\r\n\r\npublic long weeksBetween(YearWeek other) {\r\nLocalDate start=LocalDate.ofYearDay(this.year,1).with(WeekFields.ISO.weekOfYear(),this.week);\r\nLocalDate end=LocalDate.ofYearDay(other.year,1).with(WeekFields.ISO.weekOfYear(),other.week);\r\nreturn java.time.temporal.ChronoUnit.WEEKS.between(start,end);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nYearWeek weekA=YearWeek.parse(""2012-W48"");\r\nYearWeek weekB=YearWeek.parse(""2013-W03"");\r\n\r\nSystem.out.println(""weekA is before weekB: ""+weekA.isBefore(weekB));\r\nSystem.out.println(""Weeks between: ""+weekA.weeksBetween(weekB));\r\n}\r\n}""]",0,1
"[""import java.util.concurrent.Callable;\r\n\r\npublic class InferenceThrowsExample {\r\n    public static <T, E extends Exception> T execute(Callable<T> action) throws E {\r\n        try {\r\n            return action.call();\r\n        } catch (Exception ex) {\r\n            throw (E) ex; // The compiler infers the type of E\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> { throw new RuntimeException(""Unchecked!""); }); // Infers E as RuntimeException\r\n        } catch (RuntimeException ex) {\r\n            System.out.println(""Caught: "" + ex.getMessage());\r\n        }\r\n\r\n        try {\r\n            execute(() -> { throw new Exception(""Checked!""); }); // Causes unchecked cast warning\r\n        } catch (Exception ex) {\r\n            System.out.println(""Caught: "" + ex.getMessage());\r\n        }\r\n    }\r\n}""]",0,1
"[""public class EqualSplit {\r\npublic static boolean equalSplit(int[] arr) {\r\nif (arr.length % 2 != 0) return false;\r\nreturn helper(arr, 0, 0, 0, 0);\r\n}\r\n\r\nprivate static boolean helper(int[] arr, int index, int count1, int sum1, int sum2) {\r\nif (index == arr.length) return count1 == arr.length / 2 && sum1 == sum2;\r\nreturn helper(arr, index + 1, count1 + 1, sum1 + arr[index], sum2) ||\r\nhelper(arr, index + 1, count1, sum1, sum2 + arr[index]);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[] arr1 = {1, 2, 3, 4};\r\nint[] arr2 = {1, 1, 1, 1, 2, 2};\r\nint[] arr3 = {3, 1, 1, 2, 2, 3};\r\nSystem.out.println(equalSplit(arr1)); // false\r\nSystem.out.println(equalSplit(arr2)); // true\r\nSystem.out.println(equalSplit(arr3)); // true\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TooltipPositioning extends Application {\r\n\r\n@Override\r\npublic void start(Stage stage) {\r\nLabel label = new Label(""TEST\nTEST\nTEST"");\r\nlabel.setStyle(""-fx-background-color: green;"");\r\n\r\nTooltip tooltip = new Tooltip(""TOOLTIP"");\r\ntooltip.setShowDelay(Duration.seconds(0.5));\r\nlabel.setTooltip(tooltip);\r\n\r\nlabel.setOnMouseEntered(e -> {\r\nBounds bounds = label.localToScreen(label.getBoundsInLocal());\r\ndouble x = bounds.getMaxX();\r\ndouble y = bounds.getMaxY();\r\ntooltip.show(label, x, y);\r\n});\r\n\r\nlabel.setOnMouseExited(e -> tooltip.hide());\r\n\r\nScene scene = new Scene(new AnchorPane(label), 300, 200);\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch();\r\n}\r\n}""]",0,1
"[""import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SliderSwitch extends Control {\r\n\r\nprivate ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n@Override\r\nprotected void invalidated() {\r\nsetEventHandler(ActionEvent.ACTION, get());\r\n}\r\n\r\n@Override\r\npublic Object getBean() {\r\nreturn SliderSwitch.this;\r\n}\r\n\r\n@Override\r\npublic String getName() {\r\nreturn ""onAction"";\r\n}\r\n};\r\n\r\npublic final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\nreturn onAction;\r\n}\r\n\r\npublic final void setOnAction(EventHandler<ActionEvent> value) {\r\nonAction.set(value);\r\n}\r\n\r\npublic final EventHandler<ActionEvent> getOnAction() {\r\nreturn onAction.get();\r\n}\r\n\r\npublic SliderSwitch() {\r\ngetStyleClass().add(""slider-switch"");\r\n}\r\n\r\n@Override\r\nprotected Skin<?> createDefaultSkin() {\r\nreturn new SliderSwitchSkin(this);\r\n}\r\n\r\npublic void fireActionEvent() {\r\nif (getOnAction() != null) {\r\ngetOnAction().handle(new ActionEvent(this, null));\r\n}\r\n}\r\n}""]",0,1
"[""import static org.junit.jupiter.api.Assertions.assertNotNull;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nclass MapMethodSourceTest {\r\n\r\n@ParameterizedTest\r\n@MethodSource(""hashMapProvider"")\r\nvoid testMyMapObj(Map<String, Object> argument) {\r\nassertNotNull(argument);\r\nObject obj1 = argument.get(""1"");\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\nMap<String, Object> map = new HashMap<>();\r\nmap.put(""1"", ""Obj1"");\r\nmap.put(""2"", ""Obj2"");\r\nreturn Stream.of(map);\r\n}\r\n}""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\npublic static void main(String[] args) {\r\nString[] timestamps = {\r\n""2023-10-05T15:14:29.123456789Z"",\r\n""2023-10-05T15:14:29.12345678Z"",\r\n""2023-10-05T15:14:29.1234567Z"",\r\n""2023-10-05T15:14:29.123456Z"",\r\n""2023-10-05T15:14:29.12345Z"",\r\n""2023-10-05T15:14:29.1234Z"",\r\n""2023-10-05T15:14:29.123Z"",\r\n""2023-10-05T15:14:29.12Z"",\r\n""2023-10-05T15:14:29.1Z"",\r\n""2023-10-05T15:14:29Z""\r\n};\r\n\r\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\nfor (String timestamp : timestamps) {\r\ntry {\r\nLocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\nSystem.out.println(""Parsed date: "" + dateTime);\r\n} catch (DateTimeParseException e) {\r\nSystem.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n}\r\n}\r\n}\r\n}""]",0,1
"[""public class DuplicateCharacters {\r\npublic static void main(String[] args) {\r\nString string1 = ""Great"";\r\nint count;\r\nboolean hasDuplicates = false;\r\n\r\nchar string[] = string1.toCharArray();\r\nSystem.out.println(""Duplicate characters in a given string:"");\r\n\r\n//Counts each character present in the string\r\nfor (int i = 0; i < string.length; i++) {\r\ncount = 1;\r\nfor (int j = i + 1; j < string.length; j++) {\r\nif (string[i] == string[j] && string[i] != ' ') {\r\ncount++;\r\nstring[j] = '0';\r\n}\r\n}\r\nif (count > 1 && string[i] != '0') {\r\nSystem.out.println(string[i]);\r\nhasDuplicates = true;\r\n}\r\n}\r\nif (!hasDuplicates) {\r\nSystem.out.println(""no duplicates"");\r\n}\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\nprivate Group circle;\r\nprivate double rotationAngle = 0;\r\n\r\npublic void start(Stage primaryStage) {\r\nArc blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\nblueArc.setType(ArcType.ROUND);\r\nblueArc.setFill(Color.BLUE);\r\n\r\nArc greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\ngreenArc.setType(ArcType.ROUND);\r\ngreenArc.setFill(Color.GREEN);\r\n\r\nArc yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\nyellowArc.setType(ArcType.ROUND);\r\nyellowArc.setFill(Color.YELLOW);\r\n\r\nArc redArc = new Arc(200, 200, 150, 150, 270, 90);\r\nredArc.setType(ArcType.ROUND);\r\nredArc.setFill(Color.RED);\r\n\r\ncircle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\nButton rotate = new Button(""Rotate Right"");\r\nrotate.setOnAction(this::processButtonPress);\r\n\r\nFlowPane pane = new FlowPane(circle, rotate);\r\npane.setAlignment(Pos.CENTER);\r\npane.setHgap(20);\r\npane.setStyle(""-fx-background-color: GRAY"");\r\n\r\nScene scene = new Scene(pane, 400, 400);\r\nprimaryStage.setTitle(""Four-Color Wheel"");\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n}\r\n\r\npublic void processButtonPress(ActionEvent event) {\r\nrotationAngle += 90;\r\ncircle.setRotate(rotationAngle);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DynamicDrawMode extends Application {\r\nprivate Sphere sphere;\r\nprivate DrawMode[] modes = {DrawMode.FILL, DrawMode.LINE, DrawMode.POINT};\r\nprivate int currentModeIndex = 0;\r\n\r\npublic void start(Stage stage) {\r\nsphere = new Sphere(100);\r\nPhongMaterial material = new PhongMaterial(Color.BLUE);\r\nsphere.setMaterial(material);\r\nsphere.setCullFace(CullFace.BACK);\r\n\r\nButton toggleButton = new Button(""Change Draw Mode"");\r\ntoggleButton.setOnAction(e -> switchDrawMode());\r\n\r\nGroup root = new Group(sphere);\r\nVBox layout = new VBox(10, toggleButton, root);\r\nScene scene = new Scene(layout, 600, 400, true);\r\nscene.setFill(Color.LIGHTGRAY);\r\nscene.setCamera(new PerspectiveCamera());\r\n\r\nstage.setTitle(""JavaFX 3D Draw Mode"");\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\n\r\nprivate void switchDrawMode() {\r\ncurrentModeIndex = (currentModeIndex + 1) % modes.length;\r\nsphere.setDrawMode(modes[currentModeIndex]);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}""]",0,1
"[""import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    private static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        ScopedValue.where(NAME, ""haha"").run(() -> {\r\n            try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n                var task = ts.fork(() -> {\r\n                    System.out.println(""Scoped Value: "" + NAME.get());\r\n                    return null;\r\n                });\r\n                ts.join();\r\n            }\r\n        });\r\n    }\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.beans.binding.DoubleBinding;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label1 = new Label(""One two three"");\r\n        Label label2 = new Label(""Four five six seven"");\r\n\r\n        TextField textField1 = new TextField();\r\n        TextField textField2 = new TextField();\r\n\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.setHgap(20);\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        // Create column constraints for both grid panes\r\n        ColumnConstraints column1 = new ColumnConstraints();\r\n        ColumnConstraints column2 = new ColumnConstraints();\r\n        gridPane1.getColumnConstraints().addAll(column1, new ColumnConstraints());\r\n        gridPane2.getColumnConstraints().addAll(column2, new ColumnConstraints());\r\n\r\n        // Bind the first column width to the max preferred width of both labels\r\n        DoubleBinding maxWidth = Bindings.createDoubleBinding(\r\n            () -> Math.max(label1.prefWidth(-1), label2.prefWidth(-1)),\r\n            label1.textProperty(), label2.textProperty()\r\n        );\r\n        column1.prefWidthProperty().bind(maxWidth);\r\n        column2.prefWidthProperty().bind(maxWidth);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import jdk.incubator.concurrent.ScopedValue;\r\nimport org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\n\r\npublic class SecurityContextScoped {\r\npublic static final ScopedValue<SecurityContext> SECURITY_CONTEXT=ScopedValue.newInstance();\r\n\r\npublic static void set(SecurityContext securityContext,Runnable task){\r\nScopedValue.where(SECURITY_CONTEXT,securityContext).run(task);\r\n}\r\n\r\npublic static SecurityContext get(){\r\nreturn SECURITY_CONTEXT.get();\r\n}\r\n\r\npublic static void clear(){\r\nSecurityContextHolder.clearContext();\r\n}\r\n}""]",0,1
"[""import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\nprivate final int totalColumnFields;\r\nprivate final int totalRowFields;\r\nprivate final int horizontalGap;\r\nprivate final int verticalGap;\r\nprivate final int fieldHorizontalSize;\r\nprivate final int fieldVerticalSize;\r\n\r\npublic Grid(int totalColumnFields,int totalRowFields,int horizontalGap,int verticalGap,int fieldHorizontalSize,int fieldVerticalSize){\r\nthis.totalColumnFields=totalColumnFields;\r\nthis.totalRowFields=totalRowFields;\r\nthis.horizontalGap=horizontalGap;\r\nthis.verticalGap=verticalGap;\r\nthis.fieldHorizontalSize=fieldHorizontalSize;\r\nthis.fieldVerticalSize=fieldVerticalSize;\r\n\r\nthis.setHgap(horizontalGap);\r\nthis.setVgap(verticalGap);\r\nTextField[][] arrayLetterField=new TextField[totalColumnFields][totalRowFields];\r\n\r\nfor(int row=0;row<totalRowFields;row++){\r\nfor(int col=0;col<totalColumnFields;col++){\r\narrayLetterField[col][row]=new TextField();\r\narrayLetterField[col][row].setMinSize(fieldHorizontalSize,fieldVerticalSize);\r\narrayLetterField[col][row].setMaxSize(fieldHorizontalSize,fieldVerticalSize);\r\nthis.add(arrayLetterField[col][row],col,row);\r\n}\r\n}\r\n}\r\n}""]",0,1
"[""import org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig implements WebMvcConfigurer {\r\n@Override\r\npublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\nconfigurer.defaultContentType(org.springframework.http.MediaType.APPLICATION_JSON);\r\n}\r\n}""]",0,1
"[""// SecurityConfig.java\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.convert.converter.Converter;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.oauth2.jwt.Jwt;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nreturn http\r\n.cors(Customizer.withDefaults())\r\n.csrf(csrf -> csrf.disable())\r\n.authorizeHttpRequests(auth -> auth\r\n.requestMatchers(""/auth/**"").permitAll()\r\n.anyRequest().authenticated())\r\n.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n.oauth2ResourceServer(oauth2 -> oauth2\r\n.jwt(jwt -> jwt.jwtAuthenticationConverter(customJwtAuthenticationConverter())))\r\n.httpBasic(Customizer.withDefaults())\r\n.build();\r\n}\r\n@Bean\r\npublic JwtAuthenticationConverter customJwtAuthenticationConverter() {\r\nJwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\nconverter.setJwtGrantedAuthoritiesConverter(new Converter<Jwt, Collection<GrantedAuthority>>() {\r\n@Override\r\npublic Collection<GrantedAuthority> convert(Jwt jwt) {\r\nString rolesString = jwt.getClaim(""roles"");\r\nif(rolesString == null || rolesString.isEmpty()) {\r\nreturn java.util.Collections.emptyList();\r\n}\r\nreturn Arrays.stream(rolesString.split("" ""))\r\n.map(role -> new SimpleGrantedAuthority(""ROLE_"" + role))\r\n.collect(Collectors.toList());\r\n}\r\n});\r\nreturn converter;\r\n}\r\n}\r\n\r\n// DefaultTokenService.java\r\nimport java.time.Instant;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.oauth2.jwt.JwtClaimsSet;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.stereotype.Service;\r\n@Service\r\npublic class DefaultTokenService implements TokenService {\r\nprivate final JwtEncoder encoder;\r\npublic DefaultTokenService(JwtEncoder encoder) {\r\nthis.encoder = encoder;\r\n}\r\n@Override\r\npublic String generateToken(Authentication authentication) {\r\nInstant now = Instant.now();\r\nString roles = authentication.getAuthorities().stream()\r\n.map(GrantedAuthority::getAuthority)\r\n.map(role -> role.startsWith(""ROLE_"") ? role.substring(5) : role)\r\n.collect(Collectors.joining("" ""));\r\nJwtClaimsSet claims = JwtClaimsSet.builder()\r\n.issuer(""self"")\r\n.issuedAt(now)\r\n.expiresAt(now.plus(1, ChronoUnit.HOURS))\r\n.subject(authentication.getName())\r\n.claim(""roles"", roles)\r\n.build();\r\nreturn this.encoder.encode(org.springframework.security.oauth2.jwt.JwtEncoderParameters.from(claims)).getTokenValue();\r\n}\r\n}""]",0,1
"[""import static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.Mockito.doAnswer;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.mockConstruction;\r\nimport static org.mockito.Mockito.when;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\npublic class ConstructorMockTest {\r\n@Test\r\nvoid testConstructorMocking() throws Exception {\r\nPDFDocument pdfDocumentMock = mock(PDFDocument.class);\r\nPSConverter converterMock = mock(PSConverter.class);\r\nbyte[] content = ""dummy content"".getBytes();\r\ntry (MockedConstruction<PDFDocument> mockedPDF = mockConstruction(PDFDocument.class);\r\n     MockedConstruction<PSConverter> mockedConverter = mockConstruction(PSConverter.class)) {\r\nPDFDocument constructedPdfDoc = mockedPDF.constructed().get(0);\r\nwhen(constructedPdfDoc.load(any(ByteArrayInputStream.class))).thenReturn(null);\r\nPSConverter constructedConverter = mockedConverter.constructed().get(0);\r\ndoAnswer(invocation -> {\r\nByteArrayOutputStream outputStream = invocation.getArgument(1);\r\noutputStream.write(content);\r\nreturn outputStream;\r\n}).when(constructedConverter).convert(any(), any(ByteArrayOutputStream.class));\r\nPDFDocument pdfDoc = new PDFDocument();\r\nPSConverter converter = new PSConverter();\r\npdfDoc.load(new ByteArrayInputStream(new byte[0]));\r\nByteArrayOutputStream baos = new ByteArrayOutputStream();\r\nconverter.convert(new Object(), baos);\r\n}\r\n}\r\n}""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nreturn http\r\n.cors(Customizer.withDefaults())\r\n.csrf(csrf -> csrf.disable())\r\n.authorizeHttpRequests(authorize -> authorize\r\n.mvcMatchers(""/"").access(new WebExpressionAuthorizationManager(""hasIpAddress('127.0.0.1')""))\r\n.anyRequest().authenticated())\r\n.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n.build();\r\n}\r\n}""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@State(Scope.Thread)\r\npublic class JdkBenchmarks {\r\n@Benchmark\r\npublic void indexed(Blackhole blackhole, TestState testState) {\r\nint[] values = testState.values;\r\nint length = values.length;\r\nfor(int i = 0; i < length; i++) {\r\nblackhole.consume(values[i]);\r\n}\r\n}\r\n\r\n@Benchmark\r\npublic void enhanced(Blackhole blackhole, TestState testState) {\r\nfor (int value : testState.values) {\r\nblackhole.consume(value);\r\n}\r\n}\r\n\r\n@State(Scope.Thread)\r\npublic static class TestState {\r\npublic int[] values;\r\n\r\n@Setup(Level.Iteration)\r\npublic void setupArray() {\r\nint count = 1000;\r\nvalues = new int[count];\r\nfor(int i = 0; i < count; i++) {\r\nvalues[i] = i;\r\n}\r\n}\r\n}\r\n\r\npublic static void main(String[] args) throws RunnerException {\r\nOptions opt = new OptionsBuilder()\r\n.include(JdkBenchmarks.class.getSimpleName())\r\n.warmupIterations(5)\r\n.measurementIterations(10)\r\n.forks(1)\r\n.build();\r\n\r\nnew Runner(opt).run();\r\n}\r\n}""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\n\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(TimeUnit.SECONDS)\r\n@State(Scope.Thread)\r\npublic class NestedPerf {\r\npublic static class StateData{\r\npublic static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\npublic static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n}\r\n\r\nprivate static void runInNewPool(Runnable task) {\r\nForkJoinPool pool = new ForkJoinPool();\r\ntry {\r\npool.submit(task).join();\r\n} finally {\r\npool.shutdown();\r\n}\r\n}\r\n\r\nprivate static void innerParallelLoop() {\r\nStateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\ntry {\r\nThread.sleep(5);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\n});\r\n}\r\n\r\nprivate static void innerSequentialLoop() {\r\nStateData.innerLoop.stream().unordered().forEach(i -> {\r\ntry {\r\nThread.sleep(5);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingNewPool(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\nrunInNewPool(NestedPerf::innerParallelLoop);\r\nbh.consume(i);\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingCommonPoolWithSequentialInner(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\ninnerSequentialLoop();\r\nbh.consume(i);\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingCommonPool(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\ninnerParallelLoop();\r\nbh.consume(i);\r\n});\r\n}\r\n\r\npublic static void main(String[] args) throws RunnerException {\r\nOptions opt = new OptionsBuilder()\r\n.include(NestedPerf.class.getSimpleName())\r\n.warmupIterations(5)\r\n.measurementIterations(10)\r\n.forks(1)\r\n.build();\r\n\r\nnew Runner(opt).run();\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\nprivate static final int WIDTH = 800;\r\nprivate static final int HEIGHT = 600;\r\nprivate static final double EARTH_RADIUS = 150;\r\nprivate static final int DIVISIONS = 64;\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nSphere earthSphere = new Sphere(EARTH_RADIUS, DIVISIONS);\r\nPhongMaterial material = new PhongMaterial();\r\nmaterial.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\nearthSphere.setMaterial(material);\r\n\r\nGroup root = new Group();\r\nroot.getChildren().add(earthSphere);\r\n\r\nScene scene = new Scene(root, WIDTH, HEIGHT, true);\r\nscene.setFill(Color.BLACK);\r\nscene.setCamera(new PerspectiveCamera());\r\n\r\nRotate rotateX = new Rotate(0, Rotate.X_AXIS);\r\nRotate rotateY = new Rotate(0, Rotate.Y_AXIS);\r\nearthSphere.getTransforms().addAll(rotateX, rotateY);\r\n\r\nscene.setOnKeyPressed((KeyEvent event) -> {\r\nswitch (event.getCode()) {\r\ncase LEFT -> rotateY.setAngle(rotateY.getAngle() - 10);\r\ncase RIGHT -> rotateY.setAngle(rotateY.getAngle() + 10);\r\ncase UP -> rotateX.setAngle(rotateX.getAngle() - 10);\r\ncase DOWN -> rotateX.setAngle(rotateX.getAngle() + 10);\r\n}\r\n});\r\n\r\nprimaryStage.setTitle(""JavaFX 3D Earth"");\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}""]",0,1
"[""import org.apache.kafka.streams.KeyValue;\r\nimport org.apache.kafka.streams.kstream.KStream;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\n@Configuration\r\npublic class StreamProcessorConfig {\r\n@Bean\r\npublic Function<Map<String, KStream<String, InputType>>, Map<String, KStream<String, OutputType>>> myFunctionDefinition() {\r\nMap<String, KStream<String, InputType>> inputStreams;\r\nreturn inputMap -> {\r\nMap<String, KStream<String, OutputType>> outputMap = new HashMap<>();\r\ninputMap.forEach((bindingName, stream) -> {\r\noutputMap.put(bindingName, stream.map((k, v) -> KeyValue.pair(k, OutputType.createFrom(v))));\r\n});\r\nreturn outputMap;\r\n};\r\n}\r\n}""]",0,1
"[""import jakarta.servlet.FilterChain\r\nimport jakarta.servlet.ServletException\r\nimport jakarta.servlet.http.HttpServletRequest\r\nimport jakarta.servlet.http.HttpServletResponse\r\nimport org.springframework.beans.factory.annotation.Value\r\nimport org.springframework.stereotype.Component\r\nimport org.springframework.web.filter.OncePerRequestFilter\r\nimport java.io.IOException\r\nimport java.util.concurrent.Semaphore\r\n\r\n@Component\r\nclass ConnectionLimiterFilter(\r\n@Value(""\${app.maxConcurrentRequests:50}"") private val maxConcurrentRequests: Int\r\n) : OncePerRequestFilter() {\r\nprivate val semaphore = Semaphore(maxConcurrentRequests)\r\n\r\n@Throws(ServletException::class, IOException::class)\r\noverride fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain) {\r\nif (!semaphore.tryAcquire()) {\r\nresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, ""Too many concurrent requests"")\r\nreturn\r\n}\r\ntry {\r\nfilterChain.doFilter(request, response)\r\n} finally {\r\nsemaphore.release()\r\n}\r\n}\r\n}""]",0,1
"[""import java.net.URL;\r\nimport java.nio.file.Paths;\r\n\r\npublic class ResourceLoader {\r\n    public static String getResourcePath(String resourceName) {\r\n        URL resourceUrl = ResourceLoader.class.getResource(resourceName);\r\n        if (resourceUrl == null) {\r\n            throw new IllegalArgumentException(""Resource not found: "" + resourceName);\r\n        }\r\n        return Paths.get(resourceUrl.getPath()).toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String stylesheetPath = getResourcePath(""/style/main.css"");\r\n        String imagePath = getResourcePath(""/img/logo.png"");\r\n        String soundPath = getResourcePath(""/sound/notification.wav"");\r\n\r\n        System.out.println(""Stylesheet Path: "" + stylesheetPath);\r\n        System.out.println(""Image Path: "" + imagePath);\r\n        System.out.println(""Sound Path: "" + soundPath);\r\n    }\r\n}""]",0,1
"[""import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane backgroundPane = new Pane();\r\n        backgroundPane.setStyle(""-fx-background-color: red;"");\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(backgroundPane, testButton);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), backgroundPane);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n}""]",0,1
"[""import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String userName = ""John Doe"";\r\n            String eventName = ""Tech Conference 2025"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            int qrSize = 500;\r\n            int textHeight = 100;\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, qrSize, qrSize, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage finalImage = new BufferedImage(qrSize, qrSize + textHeight, BufferedImage.TYPE_INT_RGB);\r\n            \r\n            Graphics2D g = finalImage.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, qrSize, qrSize + textHeight);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n            \r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 24));\r\n            g.drawString(userName, 20, qrSize + 40);\r\n            g.drawString(eventName, 20, qrSize + 80);\r\n            \r\n            g.dispose();\r\n            ImageIO.write(finalImage, ""png"", new File(filePath));\r\n\r\n            System.out.println(""QR Code with text created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}""]",0,1
"[""import com.google.gson.Gson;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ParallelStreamOptimization {\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(new Puzzle(""puzzle1""), new Puzzle(""puzzle2""), new Puzzle(""puzzle3""));\r\n\r\n        List<InsertOneModel<Document>> bulkWritesOptimized = puzzles.parallelStream()\r\n                .map(puzzle -> gson.toJson(puzzle))\r\n                .map(json -> Document.parse(json))\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        List<InsertOneModel<Document>> bulkWritesSingleMap = puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(""Optimized: "" + bulkWritesOptimized);\r\n        System.out.println(""Single Map: "" + bulkWritesSingleMap);\r\n    }\r\n}\r\n\r\nclass Puzzle {\r\n    private String name;\r\n\r\n    public Puzzle(String name) {\r\n        this.name = name;\r\n    }\r\n}""]",0,1
"[""import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\n\r\npublic class MapToJsonConverter {\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        Map<String, Integer> fields = new LinkedHashMap<>();\r\n        fields.put(""test_first"", 1);\r\n        fields.put(""test_second"", 2);\r\n\r\n        Map<String, Integer> transformedMap = new LinkedHashMap<>();\r\n        fields.forEach((key, value) -> transformedMap.put(toLowerCamelCase(key), value));\r\n\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(transformedMap);\r\n        \r\n        System.out.println(json);\r\n    }\r\n\r\n    private static String toLowerCamelCase(String input) {\r\n        String[] parts = input.split(""_"");\r\n        StringBuilder camelCaseString = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCaseString.append(parts[i].substring(0, 1).toUpperCase())\r\n                           .append(parts[i].substring(1));\r\n        }\r\n        return camelCaseString.toString();\r\n    }\r\n}""]",0,1
"[""public class StrictfpTest {\r\npublic static void main(String[] args) {\r\nSystem.out.println(""Without strictfp:"");\r\nNonStrictfpClass nonStrictfp = new NonStrictfpClass();\r\nnonStrictfp.test();\r\n\r\nSystem.out.println(""\nWith strictfp:"");\r\nStrictfpClass strictfp = new StrictfpClass();\r\nstrictfp.test();\r\n}\r\n}\r\n\r\nclass NonStrictfpClass {\r\nvoid test() {\r\ndouble a = Double.MAX_VALUE;\r\ndouble b = a * 2; \r\ndouble c = b / 4;\r\nSystem.out.println(""Result: "" + c);\r\n}\r\n}\r\n\r\nstrictfp class StrictfpClass {\r\nvoid test() {\r\ndouble a = Double.MAX_VALUE;\r\ndouble b = a * 2;\r\ndouble c = b / 4;\r\nSystem.out.println(""Result: "" + c);\r\n}\r\n}""]",0,1
"[""import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\n\r\npublic class LongArray {\r\nprivate static final long ELEMENT_SIZE = Long.BYTES;\r\nprivate final MemorySegment segment;\r\nprivate final VarHandle varHandle;\r\nprivate final long size;\r\n\r\npublic LongArray(long size) {\r\nif (size < 0) {\r\nthrow new IllegalArgumentException(""Size must be non-negative"");\r\n}\r\nthis.size = size;\r\nthis.segment = MemorySegment.allocateNative(size * ELEMENT_SIZE, Arena.global());\r\nthis.varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\r\n}\r\n\r\npublic void set(long index, long value) {\r\ncheckBounds(index);\r\nvarHandle.set(segment, index * ELEMENT_SIZE, value);\r\n}\r\n\r\npublic long get(long index) {\r\ncheckBounds(index);\r\nreturn (long) varHandle.get(segment, index * ELEMENT_SIZE);\r\n}\r\n\r\npublic long size() {\r\nreturn size;\r\n}\r\n\r\npublic void free() {\r\nsegment.close();\r\n}\r\n\r\nprivate void checkBounds(long index) {\r\nif (index < 0 || index >= size) {\r\nthrow new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nLongArray array = new LongArray(5_000_000_000L); // 5 billion elements\r\narray.set(0, 42);\r\narray.set(4_999_999_999L, 84);\r\nSystem.out.println(array.get(0)); // 42\r\nSystem.out.println(array.get(4_999_999_999L)); // 84\r\narray.free();\r\n}\r\n}""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\npublic boolean isValidSentence(String sentence) {\r\nreturn sentence.matches(""[a-zA-Z ]+"");\r\n}\r\n\r\npublic String processSentence(String sentence) {\r\nif (!isValidSentence(sentence)) {\r\nreturn sentence + "" is an invalid sentence"";\r\n}\r\n\r\nString[] words = sentence.trim().split(""\\s+"");\r\n\r\nif (words.length <= 2) {\r\nreturn ""Invalid Length"";\r\n}\r\n\r\nString firstWord = words[0];\r\nString lastWord = words[words.length - 1];\r\nwords[0] = lastWord;\r\nwords[words.length - 1] = firstWord;\r\n\r\nfor (int i = 1; i < words.length - 1; i++) {\r\nwords[i] = new StringBuilder(words[i]).reverse().toString();\r\n}\r\n\r\nreturn String.join("" "", words);\r\n}\r\n}\r\n\r\npublic class UserInterface {\r\npublic static void main(String[] args) {\r\nScanner sc = new Scanner(System.in);\r\n\r\nSystem.out.println(""Enter the sentence"");\r\nString input = sc.nextLine();\r\n\r\nSentenceProcessor processor = new SentenceProcessor();\r\nString result = processor.processSentence(input);\r\n\r\nSystem.out.println(result);\r\n\r\nsc.close();\r\n}\r\n}""]",0,1
"[""package app.components;\r\nimport java.io.IOException;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\npublic class Custom extends VBox{\r\n@FXML private Button plusBtn;\r\n@FXML private Button minusBtn;\r\n@FXML private Label label;\r\npublic Custom(){\r\nFXMLLoader loader=new FXMLLoader(getClass().getResource(""Custom.fxml""));\r\nloader.setRoot(this);\r\nloader.setController(this);\r\ntry{\r\nloader.load();\r\n}catch(IOException e){\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\npublic void newText(String text){\r\nlabel.setText(text);\r\n}\r\n}\r\n\r\n\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n<VBox alignment=""CENTER"" maxHeight=""-Infinity"" maxWidth=""-Infinity"" minHeight=""-Infinity"" minWidth=""-Infinity""\r\nxmlns=""http://javafx.com/javafx/19"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""app.components.Custom"">\r\n<children>\r\n<Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+""/>\r\n<Label fx:id=""label"" text=""Label""/>\r\n<Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-""/>\r\n</children>\r\n</VBox>\r\n\r\n\r\njava\r\npackage app.controllers;\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\npublic class Menu{\r\n@FXML private Custom cc;\r\n@FXML public void initialize(){\r\ncc.newText(""Test"");\r\n}\r\n}\r\n""]",0,1
"[""package com.example;\r\n\r\nimport static org.mockito.Mockito.*;\r\nimport static org.assertj.core.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.Pageable;\r\n\r\nimport java.util.List;\r\n\r\nclass ReportServiceTest{\r\nprivate ReportService sut;\r\nprivate ReportRepository reportRepository;\r\nprivate ReportConverter reportConverter;\r\nprivate User user;\r\nprivate Pageable pageable;\r\nprivate List<ReportPageResponse> reportPageResponses;\r\nprivate MockedConstruction<PageImpl> pageMockedConstruction;\r\n\r\n@BeforeEach\r\nvoid setUp(){\r\nreportRepository=mock(ReportRepository.class);\r\nreportConverter=mock(ReportConverter.class);\r\nsut=new ReportService(reportRepository,reportConverter);\r\nuser=new User();\r\npageable=mock(Pageable.class);\r\nreportPageResponses=List.of(new ReportPageResponse());\r\n}\r\n\r\n@AfterEach\r\nvoid tearDown(){\r\nif(pageMockedConstruction!=null){\r\npageMockedConstruction.close();\r\n}\r\n}\r\n\r\n@Test\r\nvoid get_report_page(){\r\nReportPageRequest reportPageRequest=mock(ReportPageRequest.class);\r\nReportSpecification reportSpecification=mock(ReportSpecification.class);\r\nPageRequest pageRequest=mock(PageRequest.class);\r\nPage<Report> reportPage=mock(Page.class);\r\n\r\nwhen(reportConverter.toReportSpecification(user,reportPageRequest)).thenReturn(reportSpecification);\r\nwhen(reportRepository.findAll(reportSpecification,pageRequest)).thenReturn(reportPage);\r\nwhen(reportConverter.toReportPageResponse(reportPage)).thenReturn(reportPageResponses);\r\n\r\npageMockedConstruction=Mockito.mockConstruction(PageImpl.class,\r\n(settings)->settings.useConstructor(reportPageResponses,pageable,9999L),\r\n(mock,context)->{\r\nwhen(mock.getTotalElements()).thenReturn(123456L);\r\nwhen(mock.getTotalPages()).thenReturn(1);\r\nwhen(mock.getContent()).thenReturn(reportPageResponses);\r\n});\r\n\r\nPage<ReportPageResponse> actual=sut.getReportPage(user,reportPageRequest);\r\n\r\nassertThat(actual.getTotalElements()).isEqualTo(123456L);\r\nassertThat(actual.getTotalPages()).isEqualTo(1);\r\nassertThat(actual.getContent()).isEqualTo(reportPageResponses);\r\n\r\nverify(reportConverter).toReportSpecification(user,reportPageRequest);\r\nverify(reportRepository).findAll(reportSpecification,pageRequest);\r\nverify(reportConverter).toReportPageResponse(reportPage);\r\n}\r\n}\r\n""]",0,1
"[""package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n@Override\r\npublic void start(Stage primaryStage) {\r\ntry {\r\nBorderPane root=new BorderPane();\r\nScene scene=new Scene(root,400,400);\r\nStackPane stack=new StackPane();\r\nText text=new Text(""Hello there StackOverflow, how are you? (:"");\r\ntext.setFont(Font.font(16));\r\ntext.setFill(Color.RED);\r\nstack.getChildren().add(text);\r\nroot.setCenter(stack);\r\n\r\nTimeline timeline=new Timeline(\r\nnew KeyFrame(Duration.ZERO,new KeyValue(text.fillProperty(),Color.RED)),\r\nnew KeyFrame(Duration.seconds(3),new KeyValue(text.fillProperty(),Color.BLUE))\r\n);\r\ntimeline.setCycleCount(Timeline.INDEFINITE);\r\ntimeline.setAutoReverse(true);\r\ntimeline.play();\r\n\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n} catch(Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}\r\n""]",0,1
"[""package com.example.config;\r\n\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\nimport java.util.Map;\r\n\r\n@Component\r\n@ConfigurationProperties(prefix=""root"")\r\npublic class RootProperties {\r\nprivate Map<String,String> prop;\r\n\r\npublic Map<String,String> getProp() {\r\nreturn prop;\r\n}\r\n\r\npublic void setProp(Map<String,String> prop) {\r\nthis.prop=prop;\r\n}\r\n}\r\n\r\njava\r\npackage com.example.service;\r\n\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.Map;\r\n\r\n@Service\r\npublic class PropertyService {\r\nprivate final RootProperties rootProperties;\r\n\r\npublic PropertyService(RootProperties rootProperties) {\r\nthis.rootProperties=rootProperties;\r\n}\r\n\r\npublic void printProperties() {\r\nMap<String,String> props=rootProperties.getProp();\r\nprops.forEach((key,value) -> System.out.println(key+"": ""+value));\r\n}\r\n}\r\n\r\njava\r\n@SpringBootApplication\r\n@EnableConfigurationProperties(RootProperties.class)\r\npublic class DemoApplication {\r\npublic static void main(String[] args) {\r\nSpringApplication.run(DemoApplication.class,args);\r\n}\r\n}\r\n""]",0,1
"[""import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.FIELD)\r\n@Documented\r\npublic @interface Annotation{\r\nClass<?> className() default Object.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass YetAnotherClass {}\r\n\r\nclass Main {\r\n@Annotation\r\nprivate AnotherClass annotatedAttribute;\r\n\r\n@Annotation(className=YetAnotherClass.class)\r\nprivate AnotherClass anotherAttribute;\r\n\r\npublic static void main(String[] args) throws Exception {\r\nfor(Field field: Main.class.getDeclaredFields()) {\r\nAnnotation annotation=field.getAnnotation(Annotation.class);\r\nif(annotation!=null) {\r\nClass<?> classType=annotation.className()==Object.class?field.getType():annotation.className();\r\nSystem.out.println(""Field: ""+field.getName()+"", className: ""+classType.getSimpleName());\r\n}\r\n}\r\n}\r\n}""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport com.sun.source.util.TreePath;\r\nimport javax.annotation.processing.*;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Types;\r\nimport java.util.Set;\r\nimport javax.lang.model.SourceVersion;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_17)\r\npublic class SwitchExpressionTypeProcessor extends AbstractProcessor {\r\nprivate Trees trees;\r\nprivate Types types;\r\n\r\n@Override\r\npublic void init(ProcessingEnvironment processingEnv) {\r\nsuper.init(processingEnv);\r\ntrees = Trees.instance(processingEnv);\r\ntypes = processingEnv.getTypeUtils();\r\n}\r\n\r\n@Override\r\npublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\nfor (Element element : roundEnv.getRootElements()) {\r\nTreePath path = trees.getPath(element);\r\nif (path == null) continue;\r\n\r\nTree tree = path.getLeaf();\r\nif (tree instanceof ClassTree classTree) {\r\nfor (Tree member : classTree.getMembers()) {\r\nif (member instanceof MethodTree methodTree) {\r\nanalyzeMethod(methodTree, element);\r\n}\r\n}\r\n}\r\n}\r\nreturn false;\r\n}\r\n\r\nprivate void analyzeMethod(MethodTree methodTree, Element methodElement) {\r\nBlockTree blockTree = methodTree.getBody();\r\nif (blockTree == null) return;\r\n\r\nfor (StatementTree statementTree : blockTree.getStatements()) {\r\nif (statementTree.getKind() == Tree.Kind.SWITCH) {\r\nSwitchTree switchTree = (SwitchTree) statementTree;\r\nExpressionTree switchTreeExpression = switchTree.getExpression();\r\n\r\n// Get the type of switchTreeExpression\r\nTypeMirror type = trees.getTypeMirror(trees.getPath(methodElement, switchTreeExpression));\r\n\r\nSystem.out.println(""Switch Expression Type: "" + type);\r\n}\r\n}\r\n}\r\n}""]",0,1
"[""import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.activity_main);\r\n\r\nButton openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\nopenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nBottomSheetDialog bottomSheet = new BottomSheetDialog();\r\nbottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n}\r\n});\r\n}\r\n}\r\n\r\njava\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\nsuper.onViewCreated(view, savedInstanceState);\r\n\r\nBottomSheetDialog dialog = (BottomSheetDialog) getDialog();\r\nif (dialog != null) {\r\ndialog.setOnShowListener(dialogInterface -> {\r\nView bottomSheet = dialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\nif (bottomSheet != null) {\r\nBottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\nbehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\nbehavior.setPeekHeight(ViewGroup.LayoutParams.MATCH_PARENT);\r\nbottomSheet.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\nbottomSheet.requestLayout();\r\n}\r\n});\r\n}\r\n}\r\n\r\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\nreturn inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n}\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\nandroid:layout_width=""match_parent""\r\nandroid:layout_height=""match_parent""\r\nandroid:orientation=""vertical""\r\nandroid:background=""@android:color/white"">\r\n\r\n<TextView\r\nandroid:layout_width=""match_parent""\r\nandroid:layout_height=""wrap_content""\r\nandroid:text=""Full Screen Bottom Sheet""\r\nandroid:textSize=""18sp""\r\nandroid:padding=""16dp""\r\nandroid:textAlignment=""center""/>\r\n\r\n</LinearLayout>\r\n""]",0,1
"[""public String transform(List<CustomObject> listOfObjects) {\r\nlistOfObjects = listOfObjects.stream().filter(o->o.objectType().equals(""BUSINESS"")).toList();\r\nif(listOfObjects.isEmpty()) throw new RuntimeException(""NO BUSINESS OBJECT FOUND"");\r\nreturn listOfObjects.stream()\r\n.filter(o->o.objectStatus().equals(""ACTIVE""))\r\n.filter(o->o.locale().equals(""en-US""))\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.orElseGet(()->listOfObjects.stream()\r\n.filter(o->o.objectStatus().equals(""ACTIVE""))\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.orElseGet(()->listOfObjects.stream()\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.get()))\r\n.getUrl();\r\n}""]",0,1
"[""public class ExampleApp extends Application {\r\npublic static void main(String[] args) {\r\nlaunch();\r\n}\r\n@Override\r\npublic void start(Stage stage) {\r\nvar r = new AnimatedRect(200, 200);\r\nr.setStyle(""-color1: green; -color2: orange;"");\r\nvar scene = new Scene(new BorderPane(r), 200, 200);\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\nstatic class AnimatedRect extends Rectangle {\r\nSimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\npublic AnimatedRect(double width, double height) {\r\nsuper(width, height);\r\nsetFill(color1.get());\r\ncolor1.addListener((obs, o, v) -> {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\ntimeline.set(createTimeline());\r\ntimeline.get().play();\r\n});\r\ncolor2.addListener((obs, o, v) -> {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\ntimeline.set(createTimeline());\r\ntimeline.get().play();\r\n});\r\nsceneProperty().addListener((obs, o, n) -> {\r\nif (n != null) {\r\nif (timeline.get() != null) {\r\ntimeline.get().play();\r\n}\r\n} else {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\n}\r\n});\r\n}\r\nTimeline createTimeline() {\r\nvar timeline = new Timeline(\r\nnew KeyFrame(Duration.millis(0),\r\nnew KeyValue(fillProperty(), color1.getValue(), LINEAR)\r\n),\r\nnew KeyFrame(Duration.millis(1000),\r\nnew KeyValue(fillProperty(), color2.getValue(), LINEAR)\r\n)\r\n);\r\ntimeline.setCycleCount(Timeline.INDEFINITE);\r\ntimeline.setAutoReverse(false);\r\nreturn timeline;\r\n}\r\nfinal StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\nStyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.RED\r\n);\r\nfinal StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\nStyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.BLUE\r\n);\r\nstatic class StyleableProperties {\r\nprivate static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n""-color1"", PaintConverter.getInstance(), Color.RED\r\n) {\r\n@Override\r\npublic boolean isSettable(AnimatedRect c) {\r\nreturn !c.color1.isBound();\r\n}\r\n@Override\r\npublic StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\nreturn c.color1;\r\n}\r\n};\r\nprivate static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n) {\r\n@Override\r\npublic boolean isSettable(AnimatedRect c) {\r\nreturn !c.color2.isBound();\r\n}\r\n@Override\r\npublic StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\nreturn c.color2;\r\n}\r\n};\r\nprivate static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\nstatic {\r\nfinal List<CssMetaData<? extends Styleable, ?>> styleables =\r\nnew ArrayList<>(Rectangle.getClassCssMetaData());\r\nstyleables.add(COLOR1);\r\nstyleables.add(COLOR2);\r\nSTYLEABLES = Collections.unmodifiableList(styleables);\r\n}\r\n}\r\npublic static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\nreturn StyleableProperties.STYLEABLES;\r\n}\r\n@Override\r\npublic List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\nreturn getClassCssMetaData();\r\n}\r\n}\r\n}""]",0,1
"[""import com.google.cloud.storage.Blob;\r\nimport com.google.cloud.storage.Storage;\r\nimport com.google.cloud.storage.StorageOptions;\r\nimport com.google.cloud.ReadChannel;\r\nimport org.springframework.core.io.InputStreamResource;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport java.io.InputStream;\r\nimport java.net.URLConnection;\r\nimport java.nio.channels.Channels;\r\n@RestController\r\npublic class FileController {\r\n@GetMapping(path=""/file"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName, @RequestParam String bucketName, @RequestParam String projectName) {\r\nStorage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\nBlob blob = storage.get(bucketName, fileName);\r\nif(blob == null){\r\nreturn ResponseEntity.notFound().build();\r\n}\r\nReadChannel readChannel = blob.reader();\r\nInputStream inputStream = Channels.newInputStream(readChannel);\r\nString contentType = URLConnection.guessContentTypeFromName(fileName);\r\nif(contentType == null){\r\ncontentType = ""application/octet-stream"";\r\n}\r\nreturn ResponseEntity.ok().contentType(MediaType.valueOf(contentType)).header(""Content-Disposition"", ""attachment; filename="" + fileName).body(new InputStreamResource(inputStream));\r\n}\r\n}""]",0,1
"[""import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.TimeUnit;\r\n@RestController\r\npublic class VideoStreamController {\r\n@GetMapping(""/video"")\r\npublic SseEmitter streamVideo() {\r\nSseEmitter emitter = new SseEmitter();\r\ninitSocketConnection(new VideoStreamCallback() {\r\n@Override\r\npublic void onVideoStreamReceived(byte[] bytes) {\r\nMap.Entry<Boolean, List<Integer>> mdatEntry = hasMdat(bytes);\r\nif(mdatEntry.getKey()) {\r\nbyte[] mdatData = Arrays.copyOfRange(bytes, mdatEntry.getValue().get(3) + 1, bytes.length);\r\ntry {\r\nemitter.send(mdatData);\r\n} catch(Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}\r\n});\r\nreturn emitter;\r\n}\r\npublic Map.Entry<Boolean, List<Integer>> hasMdat(byte[] byteArray) {\r\nfor(int i = 0; i < byteArray.length - 3; i++){\r\nif(byteArray[i] == (byte)109 && byteArray[i + 1] == (byte)100 && byteArray[i + 2] == (byte)97 && byteArray[i + 3] == (byte)116){\r\nreturn Map.entry(true, Arrays.asList(i, i + 1, i + 2, i + 3));\r\n}\r\n}\r\nreturn Map.entry(false, Arrays.asList(0));\r\n}\r\npublic void initSocketConnection(VideoStreamCallback callback) {\r\nExecutors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable(){\r\n@Override\r\npublic void run(){\r\nbyte[] dummyData = createDummyData();\r\ncallback.onVideoStreamReceived(dummyData);\r\n}\r\n}, 0, 1, TimeUnit.SECONDS);\r\n}\r\npublic byte[] createDummyData() {\r\nbyte[] data = new byte[100];\r\nint pos = 50;\r\ndata[pos] = (byte)109;\r\ndata[pos + 1] = (byte)100;\r\ndata[pos + 2] = (byte)97;\r\ndata[pos + 3] = (byte)116;\r\nfor(int i = pos + 4; i < data.length; i++){\r\ndata[i] = (byte)(i);\r\n}\r\nreturn data;\r\n}\r\n}\r\ninterface VideoStreamCallback {\r\nvoid onVideoStreamReceived(byte[] bytes);\r\n}""]",0,1
"[""import java.util.ArrayList;\r\nimport java.util.List;\r\npublic class PatternSearch {\r\npublic static List<int[]> searchPattern(int[][] T, int[][] P) {\r\nList<int[]> result = new ArrayList<>();\r\nint m = T.length;\r\nint n = T[0].length;\r\nint u = P.length;\r\nint v = P[0].length;\r\nfor (int i = 0; i <= m - u; i++) {\r\nfor (int j = 0; j <= n - v; j++) {\r\nboolean match = true;\r\nfor (int a = 0; a < u && match; a++) {\r\nfor (int b = 0; b < v; b++) {\r\nif (P[a][b] != 0 && T[i + a][j + b] != P[a][b]) {\r\nmatch = false;\r\nbreak;\r\n}\r\n}\r\n}\r\nif (match) {\r\nresult.add(new int[]{i, j});\r\n}\r\n}\r\n}\r\nreturn result;\r\n}\r\npublic static void main(String[] args) {\r\nint[][] T = {\r\n{2, 3, 4, 3, 6},\r\n{4, 1, 5, 7, 8},\r\n{9, 1, 2, 3, 1},\r\n{2, 4, 5, 1, 5},\r\n{3, 1, 9, 0, 2}\r\n};\r\nint[][] P = {\r\n{2, 3, 0},\r\n{0, 1, 5},\r\n{9, 0, 2}\r\n};\r\nList<int[]> matches = searchPattern(T, P);\r\nfor (int[] pos : matches) {\r\nSystem.out.println(""Pattern found at ("" + pos[0] + "", "" + pos[1] + "")"");\r\n}\r\n}\r\n}""]",0,1
"[""import android.os.Bundle;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic class SCard {\r\nprivate String companyName;\r\npublic SCard() {}\r\npublic String getCompanyName() { return companyName; }\r\npublic void setCompanyName(String companyName) { this.companyName = companyName; }\r\n}\r\npublic class SCardListAdapter extends RecyclerView.Adapter<SCardListAdapter.ViewHolder> {\r\nprivate List<SCard> cardList;\r\npublic SCardListAdapter(List<SCard> cardList) { this.cardList = cardList; }\r\n@Override\r\npublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\nView view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\nreturn new ViewHolder(view);\r\n}\r\n@Override\r\npublic void onBindViewHolder(ViewHolder holder, int position) {\r\nSCard card = cardList.get(position);\r\nholder.sname.setText(card.getCompanyName());\r\n}\r\n@Override\r\npublic int getItemCount() { return cardList.size(); }\r\npublic class ViewHolder extends RecyclerView.ViewHolder {\r\nTextView sname;\r\npublic ViewHolder(View itemView) {\r\nsuper(itemView);\r\nsname = itemView.findViewById(R.id.sname);\r\n}\r\n}\r\n}\r\npublic class HomeFragment extends Fragment {\r\nprivate RecyclerView recyclerView;\r\nprivate SCardListAdapter adapter;\r\nprivate List<SCard> cardList = new ArrayList<>();\r\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\nView view = inflater.inflate(R.layout.fragment_home, container, false);\r\nrecyclerView = view.findViewById(R.id.search_recyclerview);\r\nrecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\nadapter = new SCardListAdapter(cardList);\r\nrecyclerView.setAdapter(adapter);\r\nfetchAllData();\r\nreturn view;\r\n}\r\nprivate void fetchAllData() {\r\nDatabaseReference ref = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\nref.addValueEventListener(new ValueEventListener() {\r\n@Override\r\npublic void onDataChange(@NonNull DataSnapshot snapshot) {\r\ncardList.clear();\r\nfor (DataSnapshot categorySnapshot : snapshot.getChildren()) {\r\nfor (DataSnapshot companySnapshot : categorySnapshot.getChildren()) {\r\nSCard card = companySnapshot.getValue(SCard.class);\r\ncardList.add(card);\r\n}\r\n}\r\nadapter.notifyDataSetChanged();\r\n}\r\n@Override\r\npublic void onCancelled(@NonNull DatabaseError error) {\r\n}\r\n});\r\n}\r\n}""]",0,1
"[""import sun.reflect.ReflectionFactory;\r\nimport java.lang.reflect.Constructor;\r\npublic class Parent {\r\nprivate Parent() {\r\nSystem.out.println(""Parent constructor invoked"");\r\n}\r\npublic void hello() {\r\nSystem.out.println(""Hello from Parent"");\r\n}\r\n}\r\npublic class Child extends Parent {\r\nprivate static final Constructor<Child> childConstructor;\r\nstatic {\r\ntry {\r\nReflectionFactory rf = ReflectionFactory.getReflectionFactory();\r\nConstructor<Object> objConstructor = Object.class.getDeclaredConstructor();\r\nchildConstructor = rf.newConstructorForSerialization(Child.class, objConstructor);\r\nchildConstructor.setAccessible(true);\r\n} catch(Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\nprivate Child() {\r\n}\r\npublic static Child newInstance() {\r\ntry {\r\nreturn childConstructor.newInstance();\r\n} catch(Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\npublic void hello() {\r\nSystem.out.println(""Hello from Child"");\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nChild child = Child.newInstance();\r\nchild.hello();\r\n}\r\n}""]",0,1
"[""import java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\npublic class Ed25519KeyLoader {\r\npublic static void main(String[] args) throws Exception {\r\nSecurity.addProvider(new BouncyCastleProvider());\r\nString privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\nbyte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\nPKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\nKeyFactory keyFactory = KeyFactory.getInstance(""Ed25519"", ""BC"");\r\nPrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\nSystem.out.println(""Private Key: "" + pkey);\r\n}\r\n}""]",0,1
"[""import com.squareup.wire.schema.internal.parser.ProtoFileElement;\r\nimport com.squareup.wire.schema.internal.parser.ProtoParser;\r\nimport okio.BufferedSource;\r\nimport okio.Okio;\r\nimport java.io.File;\r\npublic class ProtoFileParserExample {\r\npublic static void main(String[] args) throws Exception {\r\nFile protoFile = new File(""path/to/your.proto"");\r\nBufferedSource source = Okio.buffer(Okio.source(protoFile));\r\nProtoFileElement protoFileElement = ProtoParser.parse(source, protoFile.getName());\r\nSystem.out.println(""Parsed Proto File:"");\r\nSystem.out.println(protoFileElement);\r\n}\r\n}""]",0,1
"[""import java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\npublic class TimeoutRunner {\r\npublic static <T> T runWithTimeout(Callable<T> callable, long timeoutMillis) throws Exception {\r\nThread currentThread = Thread.currentThread();\r\nTimer timer = new Timer(true);\r\ntimer.schedule(new TimerTask() {\r\npublic void run() {\r\ncurrentThread.stop(new RuntimeException(""Timeout exceeded""));\r\n}\r\n}, timeoutMillis);\r\ntry {\r\nreturn callable.call();\r\n} finally {\r\ntimer.cancel();\r\n}\r\n}\r\n}\r\npublic class MyClass {\r\nThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\npublic void entry(Function<Void, Void> callback) {\r\ncounter.get().set(10);\r\ntry {\r\nTimeoutRunner.runWithTimeout(() -> {\r\nI_need_a_timeout(callback, 110);\r\nreturn null;\r\n}, 1000);\r\n} catch(Exception e) {\r\nSystem.out.println(""Timeout occurred: "" + e.getMessage());\r\n}\r\nint result = counter.get().get();\r\nSystem.out.println(""Result: "" + result);\r\n}\r\nprivate void I_need_a_timeout(Function<Void, Void> callback, int loop) {\r\nwhile(loop-- >= 0) {\r\ncounter.get().incrementAndGet();\r\ncallback.apply(null);\r\n}\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nMyClass myClass = new MyClass();\r\nmyClass.entry(param -> {\r\ntry {\r\nThread.sleep(100);\r\n} catch(InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\nreturn null;\r\n});\r\n}\r\n}""]",0,1
"[""import io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.Random;\r\npublic class EtlTracingHelper {\r\npublic static final int TRACE_ID_HEX_LENGTH = 32;\r\npublic static final int SPAN_ID_HEX_LENGTH = 16;\r\npublic static String padOrTrim(String id, int desiredLength) {\r\nString hex = toHex(id);\r\nif (hex.length() > desiredLength) {\r\nreturn hex.substring(0, desiredLength);\r\n} else if (hex.length() < desiredLength) {\r\nreturn String.format(""%"" + desiredLength + ""s"", hex).replace(' ', '0');\r\n}\r\nreturn hex;\r\n}\r\npublic static String toHex(String input) {\r\nbyte[] bytes = input.getBytes();\r\nStringBuilder sb = new StringBuilder();\r\nfor (byte b : bytes) {\r\nsb.append(String.format(""%02x"", b));\r\n}\r\nreturn sb.toString();\r\n}\r\npublic static String generateRandomSpanId() {\r\nbyte[] bytes = new byte[8];\r\nnew Random().nextBytes(bytes);\r\nStringBuilder sb = new StringBuilder();\r\nfor (byte b : bytes) {\r\nsb.append(String.format(""%02x"", b));\r\n}\r\nreturn sb.toString();\r\n}\r\npublic static Context upsertContext(String uniqueId) {\r\nString traceId = padOrTrim(uniqueId, TRACE_ID_HEX_LENGTH);\r\nString spanId = generateRandomSpanId();\r\nSpanContext spanContext = SpanContext.create(traceId, spanId, TraceFlags.getDefault(), TraceState.getDefault());\r\nSpan span = Span.wrap(spanContext);\r\nreturn Context.root().with(span);\r\n}\r\n}\r\npublic class DataPackage {\r\nprivate String uniqueId;\r\npublic DataPackage(String uniqueId) {\r\nthis.uniqueId = uniqueId;\r\n}\r\npublic String getUniqueId() {\r\nreturn uniqueId;\r\n}\r\n}\r\npublic class Step1 {\r\nprivate final Tracer tracer;\r\npublic Step1(Tracer tracer) {\r\nthis.tracer = tracer;\r\n}\r\npublic void execute(DataPackage obj) {\r\nContext otelContext = EtlTracingHelper.upsertContext(obj.getUniqueId());\r\nSpan span = tracer.spanBuilder(""Step1"").setParent(otelContext).startSpan();\r\ntry {\r\ndoWork();\r\n} catch (Exception e) {\r\nspan.recordException(e);\r\n} finally {\r\nspan.end();\r\n}\r\n}\r\nprivate void doWork() {\r\nSystem.out.println(""Executing step 1 logic..."");\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nTracer tracer = GlobalOpenTelemetry.getTracer(""etlTracer"");\r\nDataPackage dp = new DataPackage(""id_1234"");\r\nStep1 step1 = new Step1(tracer);\r\nstep1.execute(dp);\r\n}\r\n}""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\npublic class LRUCache {\r\nclass Node {\r\nint key;\r\nint value;\r\nNode prev;\r\nNode next;\r\npublic Node(int key, int value) {\r\nthis.key = key;\r\nthis.value = value;\r\n}\r\n}\r\nprivate Map<Integer, Node> map;\r\nprivate int capacity;\r\nprivate Node head;\r\nprivate Node tail;\r\npublic LRUCache(int capacity) {\r\nthis.capacity = capacity;\r\nmap = new HashMap<>();\r\nhead = new Node(0, 0);\r\ntail = new Node(0, 0);\r\nhead.next = tail;\r\ntail.prev = head;\r\n}\r\npublic int get(int key) {\r\nif(map.containsKey(key)){\r\nNode node = map.get(key);\r\nremove(node);\r\ninsertToHead(node);\r\nreturn node.value;\r\n}else{\r\nreturn -1;\r\n}\r\n}\r\npublic void put(int key, int value) {\r\nif(map.containsKey(key)){\r\nNode node = map.get(key);\r\nnode.value = value;\r\nremove(node);\r\ninsertToHead(node);\r\n}else{\r\nif(map.size() == capacity){\r\nNode nodeToRemove = tail.prev;\r\nremove(nodeToRemove);\r\nmap.remove(nodeToRemove.key);\r\n}\r\nNode newNode = new Node(key, value);\r\nmap.put(key, newNode);\r\ninsertToHead(newNode);\r\n}\r\n}\r\nprivate void remove(Node node) {\r\nnode.prev.next = node.next;\r\nnode.next.prev = node.prev;\r\n}\r\nprivate void insertToHead(Node node) {\r\nnode.next = head.next;\r\nnode.prev = head;\r\nhead.next.prev = node;\r\nhead.next = node;\r\n}\r\n}""]",0,1
"[""import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.util.JRImageLoader;\r\nimport net.sf.jasperreports.engine.util.JRLoader;\r\nimport net.sf.jasperreports.view.JasperViewer;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class JasperS3Image {\r\n    public static void main(String[] args) throws Exception {\r\n        String bucketName=""your-bucket-name"";\r\n        String imageKey=""path/to/image.jpg"";\r\n        AmazonS3 s3Client=AmazonS3ClientBuilder.defaultClient();\r\n        S3Object s3Object=s3Client.getObject(bucketName,imageKey);\r\n        InputStream imageInputStream=s3Object.getObjectContent();\r\n        BufferedImage image=ImageIO.read(imageInputStream);\r\n        \r\n        InputStream reportStream=JasperS3Image.class.getResourceAsStream(""/your_report.jasper"");\r\n        JasperReport jasperReport=(JasperReport) JRLoader.loadObject(reportStream);\r\n        Map<String,Object> parameters=new HashMap<>();\r\n        parameters.put(""imageParam"",JRImageLoader.loadImage(image));\r\n        \r\n        JasperPrint jasperPrint=JasperFillManager.fillReport(jasperReport,parameters,new net.sf.jasperreports.engine.JREmptyDataSource());\r\n        JasperViewer.viewReport(jasperPrint,false);\r\n    }\r\n}""]",0,1
"[""import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\nimport java.util.Random;\r\n\r\nclass GamePanel extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private int redX = 200, redY = 200;\r\n    private final int RED_SIZE = 50;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private int blueX, blueY;\r\n    private final int BLUE_SIZE = 30;\r\n    private final int FALL_SPEED = 2;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n    private Random rand;\r\n\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(500, 500));\r\n        setBackground(Color.WHITE);\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        rand = new Random();\r\n        resetBlueDot();\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void resetBlueDot() {\r\n        blueX = rand.nextInt(getWidth() - BLUE_SIZE);\r\n        blueY = 0;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, RED_SIZE, RED_SIZE);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, BLUE_SIZE, BLUE_SIZE);\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePositions();\r\n        checkCollision();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePositions() {\r\n        if (leftPressed) redX = Math.max(redX - MOVE_AMOUNT, 0);\r\n        if (rightPressed) redX = Math.min(redX + MOVE_AMOUNT, getWidth() - RED_SIZE);\r\n        if (upPressed) redY = Math.max(redY - MOVE_AMOUNT, 0);\r\n        if (downPressed) redY = Math.min(redY + MOVE_AMOUNT, getHeight() - RED_SIZE);\r\n        \r\n        blueY += FALL_SPEED;\r\n        if (blueY > getHeight()) {\r\n            resetBlueDot();\r\n        }\r\n    }\r\n\r\n    private void checkCollision() {\r\n        Rectangle redBounds = new Rectangle(redX, redY, RED_SIZE, RED_SIZE);\r\n        Rectangle blueBounds = new Rectangle(blueX, blueY, BLUE_SIZE, BLUE_SIZE);\r\n        if (redBounds.intersects(blueBounds)) {\r\n            System.out.println(""Collision detected!"");\r\n            resetBlueDot();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\npublic class MyGame {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Collision Game"");\r\n            GamePanel gamePanel = new GamePanel();\r\n            frame.add(gamePanel);\r\n            frame.pack();\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}""]",0,1
"[""import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\nprivate static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\npublic static String generateTemplate() {\r\nlong currentValue = COUNTER.getAndIncrement();\r\nreturn String.format(""%04X-7%03X-%04X"", (currentValue >> 32) & 0xFFFF, (currentValue >> 16) & 0xFFF, currentValue & 0xFFFF).toLowerCase();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nfor (int i = 0; i < 3; i++) {\r\nSystem.out.println(generateTemplate());\r\n}\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = createCustomSpinner();\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        root.setStyle(""-fx-padding: 20;"");\r\n        \r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Custom Spinner"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Spinner<Double> createCustomSpinner() {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        DoubleProperty valueProperty = new SimpleDoubleProperty(0.0);\r\n        \r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, 0.0, 0.25);\r\n        valueFactory.setConverter(new StringConverter<>() {\r\n            @Override\r\n            public String toString(Double value) {\r\n                if (value == null) return ""+0.00"";\r\n                return String.format(""%+.2f"", value).replace(""."", "","");\r\n            }\r\n\r\n            @Override\r\n            public Double fromString(String text) {\r\n                try {\r\n                    return Double.parseDouble(text.replace("","", "".""));\r\n                } catch (NumberFormatException e) {\r\n                    return 0.0;\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n\r\n        Pattern validPattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validPattern.matcher(newText).matches()) {\r\n                try {\r\n                    double newValue = Double.parseDouble(newText.replace("","", "".""));\r\n                    if (newValue >= -20.0 && newValue <= 20.0 && newValue % 0.25 == 0) {\r\n                        return c;\r\n                    }\r\n                } catch (NumberFormatException ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(valueFactory.getConverter(), 0.0, filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        valueProperty.bindBidirectional(spinner.valueProperty());\r\n\r\n        return spinner;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ReactiveExample {\r\npublic static void main(String[] args) {\r\nList<A> list = List.of(new A(""one""), new A(""two""));\r\nMap<String, String> result = Flux.fromIterable(list)\r\n.collectMap(A::getName, b -> functionReturningMonoOfC(b).map(C::getUrl).block())\r\n.block();\r\nSystem.out.println(result);\r\n}\r\n\r\nstatic Mono<C> functionReturningMonoOfC(A a) {\r\nreturn Mono.just(new C(""url-for-"" + a.getName()));\r\n}\r\n\r\nstatic class A {\r\nprivate final String name;\r\npublic A(String name) {this.name = name;}\r\npublic String getName() {return name;}\r\n}\r\n\r\nstatic class C {\r\nprivate final String url;\r\npublic C(String url) {this.url = url;}\r\npublic String getUrl() {return url;}\r\n}\r\n}""]",0,1
"[""import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class RedisTlsConfig {\r\npublic static void main(String[] args) throws Exception {\r\nHostAndPort address = new HostAndPort(""localhost"", 6379);\r\nSSLSocketFactory sslFactory = createSslSocketFactory(""D:\\tmp\\keystore.jks"", ""123456"", ""my_cert"");\r\nJedisClientConfig config = DefaultJedisClientConfig.builder().ssl(true).sslSocketFactory(sslFactory).build();\r\nJedisPooled jedis = new JedisPooled(address, config);\r\njedis.set(""foo"", ""bar"");\r\nSystem.out.println(jedis.get(""foo"")); \r\n}\r\n\r\nprivate static SSLSocketFactory createSslSocketFactory(String keystorePath, String keystorePassword, String alias) throws IOException, GeneralSecurityException {\r\nKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\nkeyStore.load(new FileInputStream(keystorePath), keystorePassword.toCharArray());\r\nKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\nkeyManagerFactory.init(keyStore, keystorePassword.toCharArray());\r\nKeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\nfor (int i = 0; i < keyManagers.length; i++) {\r\nif (keyManagers[i] instanceof X509KeyManager) {\r\nkeyManagers[i] = new CustomX509KeyManager((X509KeyManager) keyManagers[i], alias);\r\n}\r\n}\r\nSSLContext sslContext = SSLContext.getInstance(""TLS"");\r\nsslContext.init(keyManagers, null, null);\r\nreturn sslContext.getSocketFactory();\r\n}\r\n\r\nprivate static class CustomX509KeyManager implements X509KeyManager {\r\nprivate final X509KeyManager baseKeyManager;\r\nprivate final String alias;\r\n\r\npublic CustomX509KeyManager(X509KeyManager baseKeyManager, String alias) {\r\nthis.baseKeyManager = baseKeyManager;\r\nthis.alias = alias;\r\n}\r\n\r\n@Override\r\npublic String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\nreturn alias;\r\n}\r\n\r\n@Override\r\npublic String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\nreturn baseKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n}\r\n\r\n@Override\r\npublic X509Certificate[] getCertificateChain(String alias) {\r\nreturn baseKeyManager.getCertificateChain(alias);\r\n}\r\n\r\n@Override\r\npublic PrivateKey getPrivateKey(String alias) {\r\nreturn baseKeyManager.getPrivateKey(alias);\r\n}\r\n\r\n@Override\r\npublic String[] getClientAliases(String keyType, Principal[] issuers) {\r\nreturn baseKeyManager.getClientAliases(keyType, issuers);\r\n}\r\n\r\n@Override\r\npublic String[] getServerAliases(String keyType, Principal[] issuers) {\r\nreturn baseKeyManager.getServerAliases(keyType, issuers);\r\n}\r\n}\r\n}""]",0,1
"[""import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class LineNumberInstrumentation extends MethodVisitor {\r\npublic LineNumberInstrumentation(MethodVisitor mv) {\r\nsuper(Opcodes.ASM9, mv);\r\n}\r\n\r\n@Override\r\npublic void visitCode() {\r\nsuper.visitCode();\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\nmv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\nmv.visitInsn(Opcodes.ICONST_2);\r\nmv.visitInsn(Opcodes.AALOAD);\r\nmv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(I)V"", false);\r\n}\r\n\r\n@Override\r\npublic void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\nsuper.visitLineNumber(line, start);\r\nmv.visitLdcInsn(line);\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(I)V"", false);\r\n}\r\n}""]",0,1
"[""import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\n\r\npublic class Main {\r\nprivate static final ExecutorService SERVICE = Executors.newFixedThreadPool(8);\r\nprivate static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(8);\r\n\r\npublic static void main(String[] args) throws InterruptedException {\r\nReportClient client = new ReportClient();\r\nList<CompletableFuture<Boolean>> futures = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\nfutures.add(CompletableFuture.supplyAsync(() -> new Task(client).execute(), SERVICE));\r\n}\r\nCompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\r\nSERVICE.shutdown();\r\nSCHEDULER.shutdown();\r\n}\r\n}\r\n\r\nclass Task {\r\nprivate final ReportClient client;\r\n\r\npublic Task(ReportClient client) {\r\nthis.client = client;\r\n}\r\n\r\npublic Boolean execute() {\r\nString uuid = client.createDocument();\r\nCompletableFuture<Boolean> future = new CompletableFuture<>();\r\ncheckStatus(uuid, future);\r\nreturn future.join();\r\n}\r\n\r\nprivate void checkStatus(String uuid, CompletableFuture<Boolean> future) {\r\nSCHEDULER.schedule(() -> {\r\nGetStatusResponse status = client.getStatus(uuid);\r\nif (Status.PENDING.equals(status.status())) {\r\ncheckStatus(uuid, future);\r\n} else {\r\nclient.getReport(uuid);\r\nfuture.complete(Boolean.TRUE);\r\n}\r\n}, 10, TimeUnit.SECONDS);\r\n}\r\n}\r\n\r\nclass ReportClient {\r\npublic String createDocument() {\r\nreturn UUID.randomUUID().toString();\r\n}\r\n\r\npublic GetStatusResponse getStatus(String uuid) {\r\nreturn new GetStatusResponse(Math.random() > 0.2 ? Status.PENDING : Status.READY);\r\n}\r\n\r\npublic void getReport(String uuid) {\r\nSystem.out.println(""Report fetched for: "" + uuid);\r\n}\r\n}\r\n\r\nenum Status {\r\nPENDING, READY\r\n}\r\n\r\nclass GetStatusResponse {\r\nprivate final Status status;\r\n\r\npublic GetStatusResponse(Status status) {\r\nthis.status = status;\r\n}\r\n\r\npublic Status status() {\r\nreturn status;\r\n}\r\n}""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public JsonNode getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{ \""payLoad\"": [ { \""id\"": 1, \""userName\"": null, \""arName\"": \""A1\"", \""areas\"": [] }, { \""id\"": 2, \""userName\"": \""alpha2\"", \""arName\"": \""A2\"", \""areas\"": [] } ], \""count\"": 2, \""respCode\"": 200 }"";\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response response = objectMapper.readValue(jsonString, Response.class);\r\n        System.out.println(response.getTransactionsList().toString());\r\n    }\r\n}""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n    private JsonParser jsonParser;\r\n    private DeserializationContext ctxt;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        deserializer = new StringToDateDeserializer();\r\n        jsonParser = mock(JsonParser.class);\r\n        ctxt = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_ValidDate() throws IOException, ParseException {\r\n        when(jsonParser.getText()).thenReturn(""2024-03-18T12:30:00.000Z"");\r\n        Date result = deserializer.deserialize(jsonParser, ctxt);\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_EmptyString() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n        Date result = deserializer.deserialize(jsonParser, ctxt);\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_InvalidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, ctxt));\r\n    }\r\n}""]",0,1
"[""package com.example.authserver;\r\n\r\nimport com.nimbusds.jose.jwk.JWK;\r\nimport com.nimbusds.jose.jwk.JWKSet;\r\nimport com.nimbusds.jose.jwk.OctetSequenceKey;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\r\n\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.util.Base64;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n@Value(""${security.jwt.secret}"")\r\nprivate String jwtSecret;\r\n\r\n@Bean\r\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http.csrf(csrf -> csrf.disable())\r\n        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n        .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n        .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter())));\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    OctetSequenceKey jwk = new OctetSequenceKey.Builder(secretKeySpec).algorithm(new com.nimbusds.jose.JWSAlgorithm(""HS256"")).build();\r\n    JWKSet jwkSet = new JWKSet(jwk);\r\n    return new NimbusJwtEncoder((jwkSelector, context) -> jwkSelector.select(jwkSet));\r\n}\r\n\r\n@Bean\r\npublic JwtDecoder jwtDecoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n}\r\n\r\n@Bean\r\npublic JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n    JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n    grantedAuthoritiesConverter.setAuthorityPrefix(""ROLE_"");\r\n    grantedAuthoritiesConverter.setAuthoritiesClaimName(""roles"");\r\n    JwtAuthenticationConverter authenticationConverter = new JwtAuthenticationConverter();\r\n    authenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\r\n    return authenticationConverter;\r\n}\r\n}""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n\r\nprivate String name;\r\nprivate String motive;\r\n\r\npublic Company(@Value(""Adventure of War"") String name, @Value(""A place for War"") String motive) {\r\nthis.name = name;\r\nthis.motive = motive;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Company{"" +\r\n""name='"" + name + '\'' +\r\n"", motive='"" + motive + '\'' +\r\n'}';\r\n}\r\n}\r\n\r\njava\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\npublic static void main(String[] args) {\r\nApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\r\nCompany company = context.getBean(Company.class);\r\nSystem.out.println(company);\r\n}\r\n}\r\n\r\njava\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\n@ComponentScan(basePackages = ""gd.rf.anuragsaini.stereotype"")\r\npublic class AppConfig {\r\n}\r\n""]",0,1
"[""package com.example.security;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.core.userdetails.User;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.inmemory.InMemoryUserDetailsManager;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\nreturn new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\npublic UserDetailsService customUserDetailsService(UserRepository userRepository) {\r\nreturn new CustomUserDetailsService(userRepository);\r\n}\r\n\r\n@Bean\r\npublic UserDetailsService inMemoryUserDetailsService() {\r\nUserDetails specialUser = User.withUsername(""specialUser"")\r\n.password(passwordEncoder().encode(""specialPassword""))\r\n.roles(""SPECIALROLE"")\r\n.build();\r\nreturn new InMemoryUserDetailsManager(specialUser);\r\n}\r\n\r\n@Bean\r\n@Order(1)\r\npublic SecurityFilterChain specialFilterChain(HttpSecurity http, UserDetailsService inMemoryUserDetailsService) throws Exception {\r\nhttp.securityMatcher(""/very-special-path/**"")\r\n.authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n.userDetailsService(inMemoryUserDetailsService)\r\n.httpBasic();\r\nreturn http.build();\r\n}\r\n\r\n@Bean\r\n@Order(2)\r\npublic SecurityFilterChain defaultFilterChain(HttpSecurity http, UserDetailsService customUserDetailsService) throws Exception {\r\nhttp.authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n.userDetailsService(customUserDetailsService)\r\n.httpBasic();\r\nreturn http.build();\r\n}\r\n}""]",0,1
"[""package com.example.polling;\r\n\r\nimport io.smallrye.mutiny.Multi;\r\nimport io.smallrye.mutiny.Uni;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.time.Duration;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\npublic class PollingExample {\r\n\r\nprivate static final Logger log = LoggerFactory.getLogger(PollingExample.class);\r\nprivate final Service service = new Service();\r\nprivate final AtomicBoolean pollingActive = new AtomicBoolean(true);\r\n\r\npublic void startPolling() {\r\nMulti.createFrom().ticks().every(Duration.ofSeconds(5))\r\n.onItem().transformToMultiAndMerge(tick -> {\r\nif (!pollingActive.get()) {\r\nreturn Multi.createFrom().empty();\r\n}\r\nlog.info(""Tick: {}"", tick);\r\nreturn service.getTransactions().toMulti()\r\n.onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n.filter(transaction -> {\r\nboolean transactionFound = transaction.getAmount().stream()\r\n.anyMatch(amount -> amount.getQuantity().equals(""test""));\r\nif (transactionFound) {\r\npollingActive.set(false);\r\n}\r\nreturn transactionFound;\r\n});\r\n})\r\n.subscribe()\r\n.with(transaction -> log.info(""Transaction found: {}"", transaction),\r\nfailure -> log.error(""Polling error"", failure));\r\n}\r\n\r\nstatic class Service {\r\nUni<List<Transaction>> getTransactions() {\r\nreturn Uni.createFrom().item(List.of(new Transaction(List.of(new Amount(""test"")))));\r\n}\r\n}\r\n\r\nstatic class Transaction {\r\nprivate final List<Amount> amount;\r\n\r\nTransaction(List<Amount> amount) {\r\nthis.amount = amount;\r\n}\r\n\r\nList<Amount> getAmount() {\r\nreturn amount;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Transaction{"" + ""amount="" + amount + '}';\r\n}\r\n}\r\n\r\nstatic class Amount {\r\nprivate final String quantity;\r\n\r\nAmount(String quantity) {\r\nthis.quantity = quantity;\r\n}\r\n\r\nString getQuantity() {\r\nreturn quantity;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Amount{"" + ""quantity='"" + quantity + '\'' + '}';\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nnew PollingExample().startPolling();\r\n}\r\n}""]",0,1
"[""import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.security.MessageDigest;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\npublic static void main(String[] args) throws Exception {\r\nString keyFilePath = ""/home/debashishd/Downloads/s_key"";\r\nbyte[] keyBytes = readKeyFile(keyFilePath);\r\nSecretKey secretKey = deriveKeyFromBytes(keyBytes);\r\nString testMessage = ""Hello this is Roxane"";\r\n\r\nbyte[] iv = new byte[16];\r\nIvParameterSpec ivSpec = new IvParameterSpec(iv);\r\n\r\nCipher encryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\nencryptCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);\r\nString encryptedValue = Base64.getEncoder().encodeToString(encryptCipher.doFinal(testMessage.getBytes(StandardCharsets.UTF_8)));\r\nSystem.out.println(""Encrypted value: "" + encryptedValue);\r\n\r\nCipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\ndecryptCipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);\r\nString decryptedValue = new String(decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue)), StandardCharsets.UTF_8);\r\nSystem.out.println(""Decrypted value: "" + decryptedValue);\r\n}\r\n\r\nprivate static byte[] readKeyFile(String filePath) throws Exception {\r\nreturn Files.readAllBytes(Paths.get(filePath));\r\n}\r\n\r\nprivate static SecretKey deriveKeyFromBytes(byte[] keyBytes) throws Exception {\r\nMessageDigest sha = MessageDigest.getInstance(""SHA-256"");\r\nbyte[] key = sha.digest(keyBytes);\r\nreturn new SecretKeySpec(key, ""AES"");\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerBoundsControl extends Application {\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nSpinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\nSpinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n\r\nspinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\nspinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n});\r\n\r\nspinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\nspinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n});\r\n\r\nHBox root = new HBox(10, spinnerMin, spinnerMax);\r\nScene scene = new Scene(root, 300, 100);\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Spinner Bounds Control"");\r\nprimaryStage.show();\r\n}\r\n\r\nprivate void disableArrows(Spinner<Integer> spinner) {\r\nTextField editor = spinner.getEditor();\r\neditor.textProperty().addListener(new ChangeListener<String>() {\r\n@Override\r\npublic void changed(ObservableValue<? extends String> obs, String oldVal, String newVal) {\r\nint value = Integer.parseInt(newVal);\r\nboolean disableUp = value == spinner.getValueFactory().getMax();\r\nboolean disableDown = value == spinner.getValueFactory().getMin();\r\nspinner.lookup("".increment-arrow-button"").setDisable(disableUp);\r\nspinner.lookup("".decrement-arrow-button"").setDisable(disableDown);\r\n}\r\n});\r\n}\r\n}""]",0,1
"[""package com.xerox;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class TestThymeleafUTF8 {\r\npublic static void main(String[] args) {\r\ntry {\r\nTemplateEngine templateEngine = new TemplateEngine();\r\nClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\nresolver.setCharacterEncoding(""UTF-8"");\r\nresolver.setTemplateMode(TemplateMode.XML);\r\ntemplateEngine.setTemplateResolver(resolver);\r\nContext ct = new Context();\r\nct.setVariable(""TEST_AR"", ""???? ????? ?? ??? ?????"");\r\nct.setVariable(""TEST_HE"", ""??????"");\r\nct.setVariable(""TEST_CN"", ""?????"");\r\nct.setVariable(""currentDate"", LocalDateTime.now().toString());\r\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8));\r\ntemplateEngine.process(""test_template.xml"", ct, out);\r\nout.close();\r\n} catch (Exception e) {\r\nSystem.out.println(e);\r\n}\r\n}\r\n}""]",0,1
"[""package com.example.demo;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.hardware.usb.UsbDevice;\r\nimport android.hardware.usb.UsbManager;\r\nimport android.util.Log;\r\npublic class NativeUsbService {\r\nprivate static final String TAG = ""USB_SERVICE"";\r\nprivate static final String ACTION_USB_PERMISSION = ""com.example.demo.USB_PERMISSION"";\r\nprivate UsbManager usbManager;\r\nprivate UsbDevice usbDevice;\r\nprivate Context context;\r\npublic NativeUsbService(Context context) {\r\nthis.context = context;\r\nusbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\nIntentFilter filter = new IntentFilter();\r\nfilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\nfilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\nfilter.addAction(ACTION_USB_PERMISSION);\r\ncontext.registerReceiver(usbReceiver, filter);\r\n}\r\nprivate final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\npublic void onReceive(Context context, Intent intent) {\r\nString action = intent.getAction();\r\nif (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\nUsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\nif (device != null) {\r\nusbDevice = device;\r\nrequestPermission(device);\r\n}\r\n} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\nLog.d(TAG, ""onReceive: Device was detached!"");\r\nusbDevice = null;\r\n} else if (ACTION_USB_PERMISSION.equals(action)) {\r\nUsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\nif (device != null && intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\nLog.d(TAG, ""Permission granted for device: "" + device.getDeviceName());\r\nonPermissionGranted(device);\r\n} else {\r\nLog.d(TAG, ""Permission denied for device"");\r\n}\r\n}\r\n}\r\n};\r\nprivate void requestPermission(UsbDevice device) {\r\nPendingIntent permissionIntent = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_UPDATE_CURRENT);\r\nusbManager.requestPermission(device, permissionIntent);\r\n}\r\nprivate void onPermissionGranted(UsbDevice device) {\r\nLog.d(TAG, ""Now you can communicate with the device: "" + device.getDeviceName());\r\n}\r\n}""]",0,1
"[""private <T extends Fieldable> T positionEntity(Supplier<T> entitySupplier) {\r\nwhile (true) {\r\nint x = random.nextInt(sizeX);\r\nint y = random.nextInt(sizeY);\r\nif (field.getFieldable(x, y) instanceof Empty) {\r\nT entity = entitySupplier.get();\r\nfield.setFieldable(x, y, entity);\r\nreturn entity;\r\n}\r\n}\r\n}\r\n\r\njava\r\nprivate void positionMagician() {\r\nmag = positionEntity(() -> new Magician(x, y, sizeX, sizeY, field, player, this));\r\n}\r\n\r\nprivate void positionGoblin() {\r\ngoblin = positionEntity(() -> new Goblin(x, y, player, field, this, sizeX, sizeY));\r\n}\r\n""]",0,1
"[""spring:\r\n elasticsearch:\r\n  uris:\r\n   - https://localhost:9700\r\n  username: elastic\r\n  password: 123\r\n  connection-timeout: 10s\r\n  socket-timeout: 30s\r\n  ssl:\r\n   certificate: classpath:certs/http_ca.crt\r\n   verification-mode: certificate\r\n\r\njava\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n@Bean\r\npublic RestClient restClient() throws IOException {\r\nString certPath = ""certs/http_ca.crt"";\r\nPath caCertificatePath = Paths.get(ResourceUtils.getFile(""classpath:"" + certPath).toURI());\r\nSSLContext sslContext = SSLContextBuilder.create()\r\n.loadTrustMaterial(caCertificatePath.toFile(), null)\r\n.build();\r\nRestClientBuilder builder = RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n.setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder\r\n.setSSLContext(sslContext)\r\n.setDefaultCredentialsProvider(credentialsProvider()));\r\nreturn builder.build();\r\n}\r\n\r\nprivate CredentialsProvider credentialsProvider() {\r\nBasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\ncredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(""elastic"", ""123""));\r\nreturn credentialsProvider;\r\n}\r\n\r\n@Bean\r\npublic ElasticsearchOperations elasticsearchOperations() throws IOException {\r\nreturn new ElasticsearchRestTemplate(client());\r\n}\r\n\r\n@Bean\r\npublic ElasticsearchClient client() throws IOException {\r\nRestClient restClient = restClient();\r\nElasticsearchTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\nreturn new ElasticsearchClient(transport);\r\n}\r\n}\r\n\r\njava\r\n@Autowired\r\nprivate ElasticsearchOperations elasticsearchOperations;\r\n\r\n@Autowired\r\nprivate UserRepository userRepository;\r\n\r\npublic void saveUser(User user) {\r\nuserRepository.save(user);\r\n}\r\n\r\npublic List<User> searchUsers(String keyword) {\r\nQuery query = new NativeSearchQueryBuilder()\r\n.withQuery(QueryBuilders.matchQuery(""name"", keyword))\r\n.build();\r\nreturn elasticsearchOperations.search(query, User.class)\r\n.stream()\r\n.map(SearchHit::getContent)\r\n.collect(Collectors.toList());\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class TaskManager {\r\nprivate static final ConcurrentHashMap<String, ReentrantLock> lockMap = new ConcurrentHashMap<>();\r\nprivate static final ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\npublic static void main(String[] args) {\r\nsubmitTask(""hi"");\r\nsubmitTask(""h"");\r\nsubmitTask(""u"");\r\nsubmitTask(""y"");\r\nsubmitTask(""hi"");\r\nsubmitTask(""p"");\r\nsubmitTask(""o"");\r\nsubmitTask(""bb"");\r\nexecutor.shutdown();\r\n}\r\n\r\nprivate static void submitTask(String value) {\r\nexecutor.submit(new Task(value));\r\n}\r\n\r\nstatic class Task implements Runnable {\r\nprivate final String value;\r\npublic Task(String value) {\r\nthis.value = value;\r\n}\r\n@Override\r\npublic void run() {\r\nReentrantLock lock = lockMap.computeIfAbsent(value, k -> new ReentrantLock());\r\nif (lock.tryLock()) {\r\ntry {\r\nSystem.out.println(""Executing: "" + value);\r\nThread.sleep(5000);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n} finally {\r\nlock.unlock();\r\nlockMap.remove(value, lock);\r\n}\r\n} else {\r\nSystem.out.println(""Skipping duplicate: "" + value);\r\n}\r\n}\r\n}\r\n}""]",0,1
"[""\r\n    @PostMapping(\r\n      value = &quot;/sides/Request&quot;,\r\n      consumes = MediaType.APPLICATION_XML_VALUE,\r\n      produces = MediaType.APPLICATION_XML_VALUE)\r\n  public Mono&lt;ResponseModel&gt; getSsi(@RequestBody Mono&lt;RequestModel&gt; requestModelMono) {...\r\n}\r\n\r\nPOM:\r\n &lt;dependency&gt;\r\n            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;\r\n            &lt;version&gt;2.3.1&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n\r\n        \r\n\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;\r\n \r\n        &lt;/dependency&gt;\r\n\r\n    \r\n\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;\r\n          \r\n            &lt;scope&gt;runtime&lt;/scope&gt;\r\n        &lt;/dependency&gt;\r\n\r\n""]",0,1
"[""import org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\npublic class CoordinateController {\r\n@PostMapping(""/hole/coordinate"")\r\n@ResponseBody\r\npublic String saveCoordinate(@RequestBody Map<String, Object> params) {\r\nSystem.out.println(""params = "" + params);\r\n\r\nList<List<Integer>> list = (List<List<Integer>>) params.get(""coordinate"");\r\n\r\nint[][] coordinates = list.stream()\r\n.map(l -> l.stream().mapToInt(Integer::intValue).toArray())\r\n.toArray(int[][]::new);\r\n\r\nfor (int[] row : coordinates) {\r\nSystem.out.println(""Row: "" + java.util.Arrays.toString(row));\r\n}\r\n\r\nreturn ""success"";\r\n}\r\n}""]",0,1
"[""import java.util.Random;\r\n\r\nclass Card {\r\nString name;\r\n\r\nCard(String name) {\r\nthis.name = name;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn name;\r\n}\r\n}\r\n\r\npublic class CardShuffler {\r\npublic static void fisherYatesShuffle(Card[] deck) {\r\nRandom random = new Random();\r\nfor (int i = deck.length - 1; i > 0; i--) {\r\nint j = random.nextInt(i + 1);\r\nCard temp = deck[i];\r\ndeck[i] = deck[j];\r\ndeck[j] = temp;\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nCard[] unshuffledDeck = {\r\nnew Card(""Ace""), new Card(""King""), new Card(""Queen""),\r\nnew Card(""Jack""), new Card(""Ten""), new Card(""Nine"")\r\n};\r\n\r\nSystem.out.println(""Before shuffle:"");\r\nfor (Card card : unshuffledDeck) {\r\nSystem.out.print(card + "" "");\r\n}\r\n\r\nfisherYatesShuffle(unshuffledDeck);\r\n\r\nSystem.out.println(""\nAfter shuffle:"");\r\nfor (Card card : unshuffledDeck) {\r\nSystem.out.print(card + "" "");\r\n}\r\n}\r\n}""]",0,1
"[""package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\nprivate static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n);\r\nprivate static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n);\r\nprivate AutoCompletionBinding<String> nameBinding;\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nTextField textField = new TextField();\r\ntextField.setOnKeyTyped(event -> {\r\nString input = textField.getText().toUpperCase();\r\nif (input.length() < 2) {\r\nif (nameBinding != null) {\r\nnameBinding.dispose();\r\nnameBinding = null;\r\n}\r\nreturn;\r\n}\r\nif (nameBinding != null) nameBinding.dispose();\r\nif (input.startsWith(""A"")) {\r\nnameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n} else {\r\nnameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n}\r\nnameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n});\r\nVBox root = new VBox(10, textField);\r\nScene scene = new Scene(root, 300, 200);\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Autocomplete Example"");\r\nprimaryStage.show();\r\n}\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}""]",0,1
"[""import java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExcelExport {\r\npublic static void main(String[] args) {\r\ntry (OutputStream os = new FileOutputStream(""test.xls"");\r\nWorkbook wb = new HSSFWorkbook()) {\r\nSheet sh = wb.createSheet(""test"");\r\nRow r = sh.createRow(0);\r\nCellStyle cs = wb.createCellStyle();\r\ncs.setFillBackgroundColor(IndexedColors.WHITE.index);\r\ncs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\ncs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\nfor (int i = 0; i < 50; i++) {\r\nCell c = r.createCell(i);\r\nc.setCellValue(i + 1);\r\nc.setCellStyle(cs);\r\n}\r\nwb.write(os);\r\nos.flush();\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}""]",0,1
"[""import java.util.*;\r\n\r\npublic class SubsetFinder {\r\npublic static void main(String[] args) {\r\nMap<String, Set<Long>> myMap = new HashMap<>();\r\nmyMap.put(""a"", Set.of(1L, 2L, 3L));\r\nmyMap.put(""b"", Set.of(4L, 5L));\r\nmyMap.put(""c"", Set.of(1L));\r\nmyMap.put(""d"", Set.of(2L, 3L));\r\nmyMap.put(""e"", Set.of(5L));\r\nmyMap.put(""f"", Set.of(6L));\r\n\r\nList<List<String>> result = findSubsets(myMap);\r\nresult.forEach(pair -> System.out.println(pair));\r\n}\r\n\r\npublic static List<List<String>> findSubsets(Map<String, Set<Long>> myMap) {\r\nList<List<String>> overlappingKeys = new ArrayList<>();\r\nList<Map.Entry<String, Set<Long>>> entries = new ArrayList<>(myMap.entrySet());\r\n\r\nfor (int i = 0; i < entries.size(); i++) {\r\nfor (int j = i + 1; j < entries.size(); j++) {\r\nif (entries.get(i).getValue().containsAll(entries.get(j).getValue()) ||\r\nentries.get(j).getValue().containsAll(entries.get(i).getValue())) {\r\noverlappingKeys.add(List.of(entries.get(i).getKey(), entries.get(j).getKey()));\r\n}\r\n}\r\n}\r\nreturn overlappingKeys;\r\n}\r\n}""]",0,1
"[""import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.ReactiveTransactionManager;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.transaction.reactive.TransactionalOperator;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Service\r\npublic class ChatService {\r\nprivate final ChatRepository chatRepository;\r\nprivate final TransactionalOperator transactionalOperator;\r\n\r\npublic ChatService(ChatRepository chatRepository, ReactiveTransactionManager transactionManager) {\r\nthis.chatRepository = chatRepository;\r\nthis.transactionalOperator = TransactionalOperator.create(transactionManager);\r\n}\r\n\r\npublic Mono<Chat> createChat(Chat chat) {\r\nreturn transactionalOperator.transactional(\r\nchatRepository.save(chat)\r\n.map(c -> {\r\nthrow new RuntimeException();\r\n})\r\n);\r\n}\r\n}""]",0,1
"[""import java.util.*;\r\n\r\npublic class LimitedSumSubset {\r\npublic static List<Integer> findSubset(int[] nums, int target, int limit) {\r\nArrays.sort(nums);\r\nList<Integer> result = new ArrayList<>();\r\nif (backtrack(nums, target, limit, 0, result)) return result;\r\nreturn Collections.emptyList();\r\n}\r\n\r\nprivate static boolean backtrack(int[] nums, int target, int limit, int index, List<Integer> result) {\r\nif (result.size() == limit) return target == 0;\r\nfor (int i = index; i < nums.length; i++) {\r\nif (nums[i] > target) break;\r\nresult.add(nums[i]);\r\nif (backtrack(nums, target - nums[i], limit, i + 1, result)) return true;\r\nresult.remove(result.size() - 1);\r\n}\r\nreturn false;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[] nums = {2, 7, 11, 15};\r\nint target = 20, limit = 3;\r\nSystem.out.println(findSubset(nums, target, limit));\r\n}\r\n}""]",0,1
"[""import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MetamaskSignatureVerifier {\r\npublic static boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\nString message = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\nbyte[] messageHash = org.web3j.crypto.Hash.sha3(message.getBytes(StandardCharsets.UTF_8));\r\nSign.SignatureData signatureData = extractSignature(signature);\r\nBigInteger recoveredKey = Sign.signedMessageToKey(messageHash, signatureData);\r\nString recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\nreturn recoveredAddress.equalsIgnoreCase(publicWalletId);\r\n}\r\n\r\nprivate static Sign.SignatureData extractSignature(String signature) {\r\nbyte[] sigBytes = Numeric.hexStringToByteArray(signature);\r\nbyte v = sigBytes[64];\r\nif (v < 27) v += 27;\r\nbyte[] r = new byte[32], s = new byte[32];\r\nSystem.arraycopy(sigBytes, 0, r, 0, 32);\r\nSystem.arraycopy(sigBytes, 32, s, 0, 32);\r\nreturn new Sign.SignatureData(v, r, s);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nString publicWalletId = ""0xYourMetamaskAddress"";\r\nString nonce = ""randomNonceFromDB"";\r\nString signature = ""0xSignatureFromFrontend"";\r\nboolean isValid = verifySignature(publicWalletId, nonce, signature);\r\nSystem.out.println(""Signature valid: "" + isValid);\r\n}\r\n}""]",0,1
"[""import java.util.List;\r\nimport java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic class AggregationExample {\r\npublic enum AggregationType {\r\nMIN(DoubleStream::min),\r\nMAX(DoubleStream::max),\r\nAVERAGE(DoubleStream::average);\r\n\r\nprivate final Function<DoubleStream, java.util.OptionalDouble> aggregator;\r\n\r\nAggregationType(Function<DoubleStream, java.util.OptionalDouble> aggregator) {\r\nthis.aggregator = aggregator;\r\n}\r\n\r\npublic double apply(DoubleStream stream) {\r\nreturn aggregator.apply(stream).orElse(-1);\r\n}\r\n}\r\n\r\nprivate List<Double> provides = List.of(10.5, 20.0, 30.8);\r\n\r\nprivate double someFunc(double value) {\r\nreturn value;\r\n}\r\n\r\npublic Float someFunction(AggregationType e) {\r\nreturn (float) e.apply(provides.stream().mapToDouble(this::someFunc));\r\n}\r\n\r\npublic static void main(String[] args) {\r\nAggregationExample example = new AggregationExample();\r\nSystem.out.println(""Min: "" + example.someFunction(AggregationType.MIN));\r\nSystem.out.println(""Max: "" + example.someFunction(AggregationType.MAX));\r\nSystem.out.println(""Average: "" + example.someFunction(AggregationType.AVERAGE));\r\n}\r\n}""]",0,1
"[""public abstract class BasePayload {}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\nprivate int id;\r\nprivate String name;\r\n\r\npublic AddItemPayload(int id, String name) {\r\nthis.id = id;\r\nthis.name = name;\r\n}\r\n\r\npublic int getId() {\r\nreturn id;\r\n}\r\n\r\npublic String getName() {\r\nreturn name;\r\n}\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\nString command;\r\nT payload;\r\n\r\npublic BaseCommand(String command, T payload) {\r\nthis.command = command;\r\nthis.payload = payload;\r\n}\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\npublic AddItemCommand(AddItemPayload payload) {\r\nsuper(""AddItem"", payload);\r\n}\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\nabstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\nabstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n@Override\r\nprotected AddItemEventHandler getHandler() {\r\nreturn new AddItemEventHandler();\r\n}\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n@Override\r\npublic void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {}\r\n\r\n@Override\r\npublic void onCommit(String uuid, AddItemEvent event) {}\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\nabstract protected BaseEventHandler<? extends BaseEvent<C, P>, C, P> getHandler();\r\n}""]",0,1
"[""import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.TreeMap;\r\n\r\npublic class CoreNonCoreModules {\r\npublic static void main(String[] args) {\r\nTreeMap<String, ClassLoader> moduleClassLoaders = new TreeMap<>();\r\nModuleFinder.ofSystem().findAll().forEach(moduleRef -> {\r\nString moduleName = moduleRef.descriptor().name();\r\ntry {\r\nmoduleClassLoaders.put(moduleName, Class.forName(moduleName + "".module-info"").getClassLoader());\r\n} catch (ClassNotFoundException e) {\r\nmoduleClassLoaders.put(moduleName, null);\r\n}\r\n});\r\n\r\nSystem.out.println(""Core Modules (Boot ClassLoader - null):"");\r\nmoduleClassLoaders.entrySet().stream()\r\n.filter(entry -> entry.getValue() == null)\r\n.forEach(entry -> System.out.println(entry.getKey()));\r\n\r\nSystem.out.println(""\nNon-Core Modules (PlatformClassLoader or Others):"");\r\nmoduleClassLoaders.entrySet().stream()\r\n.filter(entry -> entry.getValue() != null)\r\n.forEach(entry -> System.out.println(entry.getKey() + "" -> "" + entry.getValue()));\r\n}\r\n}""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.time.format.TextStyle;\r\nimport java.time.temporal.ChronoField;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nLocale locale = new Locale(""es"", ""ES"");\r\nMap<String, String> monthAbbreviations = IntStream.rangeClosed(1, 12)\r\n.boxed()\r\n.collect(Collectors.toMap(\r\nmonth -> LocalDate.of(2000, month, 1).getMonth().getDisplayName(TextStyle.SHORT, locale).toUpperCase(),\r\nmonth -> String.format(""%02d"", month)\r\n));\r\n\r\nDateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n.parseCaseInsensitive()\r\n.parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\r\n.appendPattern(""ddMMMyyyy"")\r\n.toFormatter(locale);\r\n\r\nString input = ""24ENE1982"";\r\nfor (Map.Entry<String, String> entry : monthAbbreviations.entrySet()) {\r\ninput = input.replace(entry.getKey(), entry.getValue());\r\n}\r\n\r\nLocalDate date = LocalDate.parse(input, DateTimeFormatter.ofPattern(""ddMMyyyy""));\r\nSystem.out.println(""Hello world! "" + date);\r\n}\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.Cursor;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nTextArea numTextArea = new TextArea(""Try moving the mouse over me!"");\r\nnumTextArea.setCursor(Cursor.NONE);\r\n\r\nStackPane root = new StackPane(numTextArea);\r\nScene scene = new Scene(root, 300, 200);\r\n\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Custom Cursor Example"");\r\nprimaryStage.show();\r\n}\r\n}""]",0,1
"[""import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\npublic class ExcelFormulaAdjuster {\r\npublic static void main(String[] args) {\r\nString formula = ""IF(A2=A3,A4,A5)"";\r\nString originalAddress = ""A6"";\r\nString destinationAddress = ""C6"";\r\n\r\nString adjustedFormula = adjustFormula(formula, originalAddress, destinationAddress);\r\nSystem.out.println(""Adjusted Formula: "" + adjustedFormula);\r\n}\r\n\r\npublic static String adjustFormula(String formula, String originalAddress, String destinationAddress) {\r\ntry (Workbook wb = new XSSFWorkbook()) {\r\nSheet sheet = wb.createSheet();\r\nRow row = sheet.createRow(0);\r\nCell cell = row.createCell(0);\r\ncell.setCellFormula(formula);\r\n\r\nFormulaRenderingWorkbook workbookWrapper = (FormulaRenderingWorkbook) wb;\r\nPtg[] ptgs = FormulaParser.parse(formula, workbookWrapper, FormulaType.CELL, 0);\r\n\r\nfor (int i = 0; i < ptgs.length; i++) {\r\nif (ptgs[i] instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\norg.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) ptgs[i];\r\nString newRef = shiftCellReference(ref.toFormulaString(), originalAddress, destinationAddress);\r\nref.setReference(newRef);\r\n}\r\n}\r\n\r\nreturn FormulaRenderer.toFormulaString(workbookWrapper, ptgs);\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\nreturn null;\r\n}\r\n}\r\n\r\npublic static String shiftCellReference(String ref, String original, String destination) {\r\nCellReference originalRef = new CellReference(original);\r\nCellReference destRef = new CellReference(destination);\r\n\r\nint rowOffset = destRef.getRow() - originalRef.getRow();\r\nint colOffset = destRef.getCol() - originalRef.getCol();\r\n\r\nCellReference updatedRef = new CellReference(\r\nref.replaceAll(""\\$"", """"),\r\noriginalRef.getRow() + rowOffset,\r\noriginalRef.getCol() + colOffset,\r\nref.contains(""$""),\r\nfalse\r\n);\r\n\r\nreturn updatedRef.formatAsString();\r\n}\r\n}""]",0,1
"[""import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFile {\r\npublic static void main(String[] args) {\r\nString filePath = ""test.txt"";\r\ntry (RandomAccessFile raf = new RandomAccessFile(filePath, ""rw"")) {\r\nraf.seek(0);\r\nraf.write(""hello"".getBytes());\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\n@SpringBootTest\r\npublic class DataSourceFailureSimulationTest {\r\n@Test\r\npublic void testSimulateDatabaseConnectionFailure() throws SQLException {\r\nDataSource realDataSource = mock(DataSource.class);\r\nConnection failingConnection = mock(Connection.class);\r\nwhen(realDataSource.getConnection()).thenThrow(new SQLException(""Simulated connection failure""));\r\ntry {\r\nrealDataSource.getConnection();\r\n} catch (SQLException e) {\r\nSystem.out.println(""Caught simulated failure: "" + e.getMessage());\r\n}\r\n}\r\n}""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\npublic class PriceServiceTest {\r\n\r\n@Mock\r\nprivate PriceRepository priceRepository;\r\n\r\n@InjectMocks\r\nprivate PriceService priceService;\r\n\r\n@Test\r\npublic void testUpdatePrice() {\r\nUUID priceUuid = UUID.randomUUID();\r\nPrice existingPrice = new Price();\r\nexistingPrice.setUuid(priceUuid);\r\nexistingPrice.setPriceAmount(100.0);\r\n\r\nPriceRequest request = new PriceRequest();\r\nrequest.setPriceAmount(150.0);\r\n\r\nwhen(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\nwhen(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\nPriceDTO updatedPrice = priceService.update(priceUuid, request);\r\n\r\nassertEquals(150.0, updatedPrice.getPriceAmount());\r\nverify(priceRepository).saveAndFlush(existingPrice);\r\n}\r\n}""]",0,1
"[""package taskbar_test;\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.CLSID;\r\nimport taskbar_test.gen.IID;\r\nimport taskbar_test.gen.ITaskbarList3;\r\nimport taskbar_test.gen.ITaskbarList3Vtbl;\r\nimport taskbar_test.gen.ShObjIdl_core_h;\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\npublic class FxWinTaskbar extends Application {\r\npublic static final String GUID_FORMAT=""{%s}"";\r\npublic static final String CLSID_CONST=""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\npublic static final String IID_ITASKBAR_LIST_3=""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n@Override\r\npublic void start(Stage stage)throws Exception{\r\nvar button=new javafx.scene.control.Button(""Click Me"");\r\nbutton.setOnAction(e->handleClick());\r\nvar root=new javafx.scene.layout.StackPane(button);\r\nvar scene=new javafx.scene.Scene(root,300,200);\r\nstage.setTitle(""JavaFX Stage with Button"");\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\nvoid handleClick(){\r\nlong rawHandle=Window.getWindows().getFirst().getRawHandle();\r\nExecutors.newSingleThreadExecutor().submit(()->{\r\ntry(var arena=Arena.ofConfined()){\r\nvar clsidString=arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST),StandardCharsets.UTF_16LE);\r\nvar iidITaskbarList3=arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3),StandardCharsets.UTF_16LE);\r\nvar clsid=CLSID.allocate(arena);\r\nvar iidTaskbarList3=IID.allocate(arena);\r\nvar taskbar3PtrToPtr=arena.allocate(ShObjIdl_core_h.C_POINTER);\r\nMemorySegment windowHandle=arena.allocate(ValueLayout.ADDRESS,rawHandle);\r\nint hr=ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL,ShObjIdl_core_h.COINIT_MULTITHREADED());\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CoInitialize failed: ""+hr);\r\nhr=ShObjIdl_core_h.CLSIDFromString(clsidString,clsid);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CLSIDFromString failed: ""+hr);\r\nhr=ShObjIdl_core_h.IIDFromString(iidITaskbarList3,iidTaskbarList3);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""IIDFromString failed: ""+hr);\r\nhr=ShObjIdl_core_h.CoCreateInstance(clsid,MemorySegment.NULL,ShObjIdl_core_h.CLSCTX_ALL(),iidTaskbarList3,taskbar3PtrToPtr);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CoCreateInstance failed: ""+hr);\r\nvar taskbar3Ptr=taskbar3PtrToPtr.get(ValueLayout.ADDRESS,0);\r\nvar taskbarList3Instance=taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\nMemorySegment taskbarList3VtblPtr=ITaskbarList3.lpVtbl(taskbarList3Instance);\r\nMemorySegment taskbarList3Vtbl=taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\nhr=ITaskbarList3Vtbl.HrInit.invoke(taskbarList3Vtbl,taskbarList3Instance);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""HrInit failed: ""+hr);\r\nhr=ITaskbarList3Vtbl.SetProgressState.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,ShObjIdl_core_h.TBPF_NORMAL());\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""SetProgressState failed: ""+hr);\r\nfor(int i=0;i<=100;i+=20){\r\nSystem.out.println(""Progress: ""+i);\r\nhr=ITaskbarList3Vtbl.SetProgressValue.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,i,100);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""SetProgressValue failed: ""+hr);\r\nThread.sleep(500);\r\n}\r\nITaskbarList3Vtbl.SetProgressState.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n}catch(Throwable ex){\r\nex.printStackTrace();\r\n}finally{\r\nShObjIdl_core_h.CoUninitialize();\r\n}});\r\n}\r\npublic static void main(String[] args){\r\nlaunch(args);\r\n}\r\n}""]",0,1
"[""package com.example.databasecopy;\r\nimport android.content.Context;\r\nimport android.content.res.AssetManager;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Objects;\r\npublic class FileCopyUtil {\r\npublic static void copyDatabase(Context context){\r\nif(Build.VERSION.SDK_INT>=Build.VERSION_CODES.Q){\r\ntry{\r\nAssetManager assetManager=Objects.requireNonNull(context).getAssets();\r\nFile databasesFolder=new File(context.getExternalFilesDir(null).getParent(),""com.mydb.orca/databases"");\r\nif(!databasesFolder.exists())databasesFolder.mkdirs();\r\nString[] files=assetManager.list(""database/test"");\r\nif(files!=null){\r\nfor(String filename:files){\r\nInputStream in=null;\r\nOutputStream out=null;\r\ntry{\r\nin=assetManager.open(""database/test/""+filename);\r\nFile outFile=new File(databasesFolder,filename);\r\nout=new FileOutputStream(outFile);\r\ncopyFile(in,out);\r\nLog.d(""FileCopy"",""Successfully copied: ""+filename);\r\n}catch(IOException e){\r\nLog.e(""FileCopyError"",""Failed to copy: ""+filename,e);\r\n}finally{\r\nif(in!=null)in.close();\r\nif(out!=null){\r\nout.flush();\r\nout.close();\r\n}\r\n}\r\n}\r\n}else{\r\nLog.e(""FileCopyError"",""No files found in assets/database/test"");\r\n}\r\n}catch(IOException e){\r\nLog.e(""FileCopyError"",""Error accessing asset files"",e);\r\n}\r\n}\r\n}\r\nprivate static void copyFile(InputStream in,OutputStream out)throws IOException{\r\nbyte[] buffer=new byte[1024];\r\nint read;\r\nwhile((read=in.read(buffer))!=-1){\r\nout.write(buffer,0,read);\r\n}\r\n}\r\n}""]",0,1
"[""import java.util.ArrayList;\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nArrayList<String> collection=new ArrayList<>();\r\nwarmup();\r\nlong t1=System.nanoTime();\r\ncollection.add(""a"");\r\nlong t2=System.nanoTime();\r\ncollection.add(""b"");\r\nlong t3=System.nanoTime();\r\nSystem.out.println((t2-t1)+""\n""+(t3-t2));\r\n}\r\nprivate static void warmup() {\r\nArrayList<String> dummyList=new ArrayList<>();\r\nfor(int i=0;i<1000;i++)dummyList.add(""warmup"");\r\ndummyList.clear();\r\n}\r\n}""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.*;\r\n\r\npublic class ScalablePanel extends JPanel {\r\nprivate BufferedImage backgroundImage;\r\n\r\npublic ScalablePanel(BufferedImage image) {\r\nthis.backgroundImage=image;\r\n}\r\n\r\n@Override\r\nprotected void paintComponent(Graphics g) {\r\nsuper.paintComponent(g);\r\nif(backgroundImage!=null) {\r\nGraphics2D g2d=(Graphics2D)g;\r\nRenderingHints hints=new RenderingHints(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\ng2d.setRenderingHints(hints);\r\ndouble scaleX=getWidth()/(double)backgroundImage.getWidth();\r\ndouble scaleY=getHeight()/(double)backgroundImage.getHeight();\r\ndouble scale=Math.max(scaleX,scaleY);\r\nint newWidth=(int)(backgroundImage.getWidth()*scale);\r\nint newHeight=(int)(backgroundImage.getHeight()*scale);\r\nint x=(getWidth()-newWidth)/2;\r\nint y=(getHeight()-newHeight)/2;\r\ng2d.drawImage(backgroundImage,x,y,newWidth,newHeight,this);\r\n}\r\n}\r\n}""]",0,1
"[""import java.sql.*;\r\nimport java.time.Duration;\r\nimport java.time.Instant;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\n\r\npublic class VirtualThreadDBTest {\r\npublic static void main(String[] args) {\r\nint numberOfTasks=10;\r\nList<Future<String>> futures;\r\nInstant start=Instant.now();\r\ntry(ExecutorService executorService=Executors.newVirtualThreadPerTaskExecutor()) {\r\nfutures=IntStream.rangeClosed(1,numberOfTasks)\r\n.mapToObj(i->executorService.submit(new Task(i)))\r\n.toList();\r\n}\r\nfutures.forEach(f->{\r\ntry {\r\nf.get();\r\n}catch(InterruptedException|ExecutionException e) {\r\ne.printStackTrace();\r\n}\r\n});\r\nInstant end=Instant.now();\r\nSystem.out.println(""Total execution time: ""+Duration.between(start,end).toMillis()+"" ms"");\r\n}\r\n\r\nstatic class Task implements Callable<String> {\r\nprivate final int taskId;\r\npublic Task(int taskId) {\r\nthis.taskId=taskId;\r\n}\r\n@Override\r\npublic String call() {\r\nSystem.out.println(""Task ""+taskId+"" started"");\r\nInstant start=Instant.now();\r\nString result=null;\r\ntry(Connection connection=DriverManager.getConnection(\r\n""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"");\r\nStatement statement=connection.createStatement();\r\nResultSet resultSet=statement.executeQuery(""SELECT hello_world() AS output"")) {\r\nSystem.out.println(""Task ""+taskId+"" executing SQL query"");\r\nif(resultSet.next()) {\r\nresult=resultSet.getString(""output"");\r\n}\r\n}catch(SQLException e) {\r\ne.printStackTrace();\r\n}\r\nInstant end=Instant.now();\r\nSystem.out.println(""Task ""+taskId+"" completed in ""+Duration.between(start,end).toMillis()+"" ms"");\r\nreturn result;\r\n}\r\n}\r\n}""]",0,1
"[""import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T, R extends TaskResult<T>> {\r\nR make();\r\n}\r\n\r\nclass TaskResult<T> {\r\nT value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\nAlphaTaskResult(String value) {\r\nthis.value=value;\r\n}\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\nBetaTaskResult(Integer value) {\r\nthis.value=value;\r\n}\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\npublic AlphaTaskResult make() {\r\nreturn new AlphaTaskResult(""alphaTask"");\r\n}\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\npublic BetaTaskResult make() {\r\nreturn new BetaTaskResult(9001);\r\n}\r\n}\r\n\r\npublic class Main {\r\npublic static<T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\nreturn tasks.stream().map(ITask::make).collect(Collectors.toList());\r\n}\r\n\r\npublic static void main(String[] args) {\r\nList<AlphaTaskResult> alphaResults=run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\nList<BetaTaskResult> betaResults=run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n}\r\n}""]",0,1
"[""import java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WindowsCommandRunner {\r\npublic static List<String> runWindowsCommandAsRuntime(String command) {\r\nList<String> out=new ArrayList<>();\r\n\r\nString[] comm={\r\n""C:\\Windows\\System32\\cmd.exe"",\r\n""/S"",\r\n""/K"",\r\n""\""""+command+""\"""",\r\n""&"",\r\n""exit""\r\n};\r\n\r\nString dbg="""";\r\nfor(String s:comm)\r\ndbg+=s+"" "";\r\nSystem.out.println(""COMMAND: ""+dbg);\r\n\r\ntry {\r\nRuntime rt=Runtime.getRuntime();\r\nProcess p=rt.exec(comm);\r\n\r\nBufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));\r\nout=reader.lines().collect(Collectors.toList());\r\n\r\nint exitVal=p.waitFor();\r\nSystem.out.println(""Exited with error code ""+exitVal);\r\n\r\np.destroy();\r\n} catch(Exception ex) {\r\nex.printStackTrace();\r\nreturn null;\r\n}\r\n\r\nreturn out;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nList<String> output=runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\nif(output!=null)\r\noutput.forEach(System.out::println);\r\n}\r\n}""]",0,1
"[""import com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\npublic static void parseTsv(String filePath) throws Exception {\r\ntry (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\nObjects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n.withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n.build()) {\r\nString[] line;\r\nwhile ((line = reader.readNext()) != null) {\r\nSystem.out.println(line[0] + "" "" + line[1]);\r\n}\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\ntry {\r\nparseTsv(""path-to-tsv-file"");\r\n} catch (Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\n}""]",0,1
"[""public class CircularMatrixSearch {\r\npublic static boolean search(int[][] mat, int num) {\r\nint n = mat.length;\r\nint row = 0, col = n - 1;\r\n\r\nwhile (row < n && col >= 0) {\r\nif (mat[row][col] == num) {\r\nreturn true;\r\n} else if (mat[row][col] > num) {\r\ncol--;\r\n} else {\r\nrow++;\r\n}\r\n}\r\nreturn false;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[][] mat = {\r\n{10, 12, 14, 16},\r\n{22, 24, 26, 28},\r\n{34, 36, 38, 40},\r\n{50, 52, 54, 56}\r\n};\r\n\r\nSystem.out.println(search(mat, 22)); // true\r\nSystem.out.println(search(mat, 23)); // false\r\n}\r\n}""]",0,1
"[""import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\n\r\npublic class WordMerge {\r\nprivate final OutputStream result;\r\nprivate final List<InputStream> inputs;\r\nprivate XWPFDocument first;\r\n\r\npublic WordMerge(OutputStream result) {\r\nthis.result = result;\r\ninputs = new ArrayList<>();\r\n}\r\n\r\npublic void add(InputStream stream) throws Exception {\r\ninputs.add(stream);\r\nOPCPackage srcPackage = OPCPackage.open(stream);\r\nXWPFDocument srcDoc = new XWPFDocument(srcPackage);\r\n\r\nif (inputs.size() == 1) {\r\nfirst = srcDoc;\r\n} else {\r\nXWPFParagraph pageBreak = first.createParagraph();\r\npageBreak.setPageBreak(true);\r\n\r\nfor (XWPFParagraph p : srcDoc.getParagraphs()) {\r\nXWPFParagraph newP = first.createParagraph();\r\nnewP.getCTP().set(p.getCTP().copy());\r\n}\r\n\r\nfor (XWPFTable table : srcDoc.getTables()) {\r\nXWPFTable newTable = first.createTable();\r\nnewTable.getCTTbl().set(table.getCTTbl().copy());\r\n}\r\n}\r\n}\r\n\r\npublic void doMerge() throws Exception {\r\nfirst.write(result);\r\n}\r\n\r\npublic void close() throws Exception {\r\nresult.flush();\r\nresult.close();\r\nfor (InputStream input : inputs) {\r\ninput.close();\r\n}\r\n}\r\n\r\npublic static void main(String[] args) throws Exception {\r\nFileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\nWordMerge wm = new WordMerge(faos);\r\n\r\nwm.add(new FileInputStream(""/home/victor/001.docx""));\r\nwm.add(new FileInputStream(""/home/victor/002.docx""));\r\n\r\nwm.doMerge();\r\nwm.close();\r\n}\r\n}""]",0,1
"[""mvn spring-boot:run -Dspring-boot.run.jvmArguments=""-Xdebug"" \\r\n-Dspring-boot.run.profiles=dev \\r\n-Dspring-boot.run.arguments=""DB_NAME=employee_db DB_USERNAME=postgres DB_PASSWORD=******""\r\n\r\nxml\r\n\r\n    org.springframework.boot\r\n    spring-boot-maven-plugin\r\n    2.1.0.RELEASE\r\n    \r\n        \r\n            employee_db\r\n            postgres\r\n            ******\r\n        \r\n    \r\n\r\n\r\njava\r\nimport io.github.cdimascio.dotenv.Dotenv;\r\n\r\npublic class EnvExample {\r\npublic static void main(String[] args) {\r\nDotenv dotenv = Dotenv.configure().load();\r\nString dbName = dotenv.get(""DB_NAME"");\r\nString dbUsername = dotenv.get(""DB_USERNAME"");\r\nString dbPassword = dotenv.get(""DB_PASSWORD"");\r\n\r\nSystem.out.println(""Database Name: "" + dbName);\r\nSystem.out.println(""Database Username: "" + dbUsername);\r\nSystem.out.println(""Database Password: "" + dbPassword);\r\n}\r\n}\r\n""]",0,1
"[""addProduct.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nToast.makeText(getActivity(), ""Add product button click"", Toast.LENGTH_SHORT).show();\r\nLinearLayout linearLayoutProduct = new LinearLayout(getActivity());\r\nlinearLayoutProduct.setOrientation(LinearLayout.HORIZONTAL);\r\nlinearLayoutProduct.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n\r\nAutoCompleteTextView tvProduct = new AutoCompleteTextView(getActivity());\r\ntvProduct.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\ntvProduct.setHint(""Enter Product"");\r\ntvProduct.setInputType(InputType.TYPE_CLASS_TEXT);\r\n\r\nEditText prodQty = new EditText(getActivity());\r\nprodQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodQty.setHint(""Enter Quantity"");\r\nprodQty.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\nEditText prodPrice = new EditText(getActivity());\r\nprodPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodPrice.setHint(""Prod Price"");\r\nprodPrice.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\nEditText prodSpecs = new EditText(getActivity());\r\nprodSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodSpecs.setHint(""Prod Specs"");\r\nprodSpecs.setInputType(InputType.TYPE_CLASS_TEXT);\r\n\r\nButton removeBtn = new Button(getActivity());\r\nremoveBtn.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\nremoveBtn.setText(""Remove"");\r\nremoveBtn.setBackgroundColor(Color.RED);\r\nremoveBtn.setTextColor(Color.WHITE);\r\n\r\nremoveBtn.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nlinearLayoutProduct.setVisibility(View.GONE);\r\n}\r\n});\r\n\r\nlinearLayoutProduct.addView(tvProduct);\r\nlinearLayoutProduct.addView(prodQty);\r\nlinearLayoutProduct.addView(prodPrice);\r\nlinearLayoutProduct.addView(prodSpecs);\r\nlinearLayoutProduct.addView(removeBtn);\r\n\r\nLinearLayout llOut = getActivity().findViewById(R.id.ll_out);\r\nllOut.addView(linearLayoutProduct);\r\n}\r\n});""]",0,1
"[""import java.io.FileInputStream;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.KeyFactory;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.CipherInputStream;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport java.io.InputStreamReader;\r\nimport java.io.BufferedReader;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.bouncycastle.openssl.PEMParser;\r\n\r\npublic class RSAPrivateKeyDecrypt {\r\npublic static void main(String[] args) throws Exception {\r\nSecurity.addProvider(new BouncyCastleProvider());\r\nString keyFile = ""path/to/your/private-key.pem"";\r\nString passphrase = ""yourPassphrase"";\r\n\r\nPrivateKey privateKey = getDecryptedPrivateKey(keyFile, passphrase);\r\nSystem.out.println(""Private Key: "" + privateKey);\r\n}\r\n\r\npublic static PrivateKey getDecryptedPrivateKey(String keyFile, String passphrase) throws Exception {\r\nFileInputStream keyFileStream = new FileInputStream(keyFile);\r\nBufferedReader reader = new BufferedReader(new InputStreamReader(keyFileStream));\r\nString line;\r\nStringBuilder keyBuilder = new StringBuilder();\r\nwhile ((line = reader.readLine()) != null) {\r\nkeyBuilder.append(line).append(""\n"");\r\n}\r\nbyte[] encryptedKey = keyBuilder.toString().getBytes();\r\nbyte[] decryptedKey = decryptPrivateKey(encryptedKey, passphrase);\r\n\r\nPEMParser pemParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(decryptedKey)));\r\nObject parsedObject = pemParser.readObject();\r\npemParser.close();\r\nRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) parsedObject;\r\nreturn rsaPrivateKey;\r\n}\r\n\r\npublic static byte[] decryptPrivateKey(byte[] encryptedKey, String passphrase) throws Exception {\r\nString algorithm = ""DES-EDE3-CBC"";\r\nString salt = ""E51B4CCF38530A32""; // Extracted from DEK-Info field\r\n\r\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");\r\nPBEKeySpec keySpec = new PBEKeySpec(passphrase.toCharArray());\r\nSecretKey secretKey = keyFactory.generateSecret(keySpec);\r\nCipher cipher = Cipher.getInstance(algorithm);\r\ncipher.init(Cipher.DECRYPT_MODE, secretKey, new javax.crypto.spec.IvParameterSpec(hexStringToByteArray(salt)));\r\nCipherInputStream cipherInputStream = new CipherInputStream(new ByteArrayInputStream(encryptedKey), cipher);\r\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\nint byteRead;\r\nwhile ((byteRead = cipherInputStream.read()) != -1) {\r\nbyteArrayOutputStream.write(byteRead);\r\n}\r\nbyte[] decryptedData = byteArrayOutputStream.toByteArray();\r\nreturn decryptedData;\r\n}\r\n\r\npublic static byte[] hexStringToByteArray(String s) {\r\nint len = s.length();\r\nbyte[] data = new byte[len / 2];\r\nfor (int i = 0; i < len; i += 2) {\r\ndata[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\r\n+ Character.digit(s.charAt(i + 1), 16));\r\n}\r\nreturn data;\r\n}\r\n}""]",0,1
"[""import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.UnavailableException;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n    //constructor, variables etc.\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        //read configurations from web.xml\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            getServletContext().log(""Error connecting to Backend Server"", e);\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        // logic to connect to the backend server\r\n        // throw exception if connection fails\r\n    }\r\n}""]",0,1
"[""public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            // Prevent further recursive calls\r\n            return; // Exit the method and stop recursion\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}""]",0,1
"[""import static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.BDDMockito.given;\r\nimport static org.mockito.Mockito.verify;\r\nimport static org.mockito.Mockito.when;\r\nimport java.math.BigDecimal;\r\nimport java.util.Optional;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.web.util.UriComponents;\r\nimport org.springframework.web.util.UriComponentsBuilder;\r\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\r\n@ExtendWith(MockitoExtension.class)\r\npublic class ItemServiceTest {\r\nMockItem input;\r\n@InjectMocks\r\nItemService itemService;\r\n@Mock\r\nItemRepository itemRepository;\r\n@Mock\r\nCategorieRepository categorieRepository;\r\n@Mock\r\nItemDTOMapper itemDTOMapper;\r\n@Mock\r\nImageService imageService;\r\n@Mock\r\nprivate UriComponentsBuilder uriBuilder;\r\n@Mock\r\nprivate UriComponents uriComponents;\r\n@Captor\r\nprivate ArgumentCaptor<Long> longCaptor;\r\n@Captor\r\nprivate ArgumentCaptor<String> stringCaptor;\r\n@BeforeEach\r\nvoid setUpMocks() {\r\ninput = new MockItem();\r\nMockitoAnnotations.openMocks(this);\r\n}\r\n@Test\r\nvoid testCase() throws ItemAlreadyCreatedException {\r\nItem item = input.mockEntity();\r\nCreateItemData data = input.mockDTO();\r\nwhen(itemRepository.findByItemNameIgnoreCase(any())).thenReturn(Optional.of(item));\r\ngiven(uriBuilder.path(stringCaptor.capture())).willReturn(uriBuilder);\r\ngiven(uriBuilder.buildAndExpand(longCaptor.capture())).willReturn(uriComponents);\r\nItemAlreadyCreatedException ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\nitemService.createItem(data, uriBuilder);\r\n});\r\nString expectedMessage = ""There is an item created with this name"";\r\nString actualMessage = ex.getMessage();\r\nassertEquals(expectedMessage, actualMessage);\r\nverify(itemRepository).findByItemNameIgnoreCase(any());\r\n}\r\n}""]",0,1
"[""int[] array = new int[10];\r\narray[0] = 6;\r\narray[1] = 2;\r\narray[2] = 8;\r\narray[3] = 1;\r\narray[4] = 3;\r\narray[5] = 0;\r\narray[6] = 9;\r\narray[7] = 7;\r\n\r\nSystem.out.print(""Search for? "");\r\nint searching = in.nextInt();\r\n\r\nboolean found = false;\r\nfor(int i = 0; i < array.length; i++) {\r\n    if(searching == array[i]) {\r\n        System.out.println(searching + "" is at index "" + i + ""."");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\nif(!found) {\r\n    System.out.println(searching + "" was not found."");\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\n\r\npublic class LineChartExample extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n        \r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.setName(""Series 1"");\r\n        series1.getData().add(new XYChart.Data<>(1, 3));\r\n        series1.getData().add(new XYChart.Data<>(2, 5));\r\n        series1.getData().add(new XYChart.Data<>(3, 2));\r\n        \r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.setName(""Series 2"");\r\n        series2.getData().add(new XYChart.Data<>(1, 4));\r\n        series2.getData().add(new XYChart.Data<>(2, 6));\r\n        series2.getData().add(new XYChart.Data<>(3, 7));\r\n        \r\n        // Set individual colors for each series\r\n        series1.getNode().setStyle(""-fx-stroke: red; -fx-stroke-width: 2;"");\r\n        series2.getNode().setStyle(""-fx-stroke: blue; -fx-stroke-width: 2;"");\r\n        \r\n        lineChart.getData().addAll(series1, series2);\r\n        \r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""public class Board {\r\n    public String inputTake() {\r\n        Scanner scan = new Scanner(System.in);\r\n        String guess;\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n        \r\n        // we gotta check whether the input's valid before we return it!\r\n        return checkInput(guess);\r\n    }\r\n\r\n    public String checkInput(String input) {\r\n        boolean isGood = true;\r\n        \r\n        // check if 5 letters\r\n        if(input.length() != 5)\r\n            isGood = false;\r\n        \r\n        // check if all are english\r\n        if(!input.matches(""[a-zA-Z]+"")) \r\n            isGood = false;\r\n        \r\n        if(isGood == false) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            return inputTake();  // return the result of the retry\r\n        }\r\n        \r\n        return input;  // return the valid input\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess is: "" + guess);\r\n    }\r\n}""]",0,1
"[""from pydantic import BaseModel, Field\r\n\r\nclass User(BaseModel):\r\n    id: int\r\n    is_global: bool = Field(..., alias=""global"")\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\npython\r\nfrom sqlalchemy import Column, Integer, Boolean\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import validates\r\n\r\nBase = declarative_base()\r\n\r\nclass User(Base):\r\n    __tablename__ = 'users'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    _global = Column(""global"", Boolean)\r\n\r\n    @property\r\n    def global(self):\r\n        return self._global\r\n\r\n    @global.setter\r\n    def global(self, value):\r\n        self._global = value\r\n""]",0,1
"[""def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n    self.model = model\r\n    self.discard_ratio = discard_ratio\r\n    for name, module in self.model.named_modules():\r\n        if attention_layer_name in name:\r\n            module.register_forward_hook(self.get_attention)\r\n            module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    self.attentions = []\r\n    self.attention_gradients = []\r\n\r\ndef get_attention(self, module, input, output):\r\n    self.attentions.append(output.cpu())\r\n\r\ndef get_attention_gradient(self, module, grad_input, grad_output):\r\n    self.attention_gradients.append(grad_input[0].cpu())\r\n\r\ndef __call__(self, input_tensor, category_index):\r\n    self.model.zero_grad()\r\n    output = self.model(input_tensor)\r\n    loss = ...\r\n    loss.backward()\r\n""]",0,1
"[""from pydantic import BaseModel\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\nclass BaseModel(BaseModel):\r\n    __abstract__ = True\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }\r\n        alias_generator = camelize\r\n        allow_population_by_field_name = True""]",0,1
"[""import numpy as np\r\nimport numba\r\n\r\nx_size=2000\r\ny_size=2500\r\nz_size=400\r\nrng=np.random.default_rng(123)\r\nz_coordinates=np.linspace(0,z_size,y_size)+rng.laplace(0,1,(x_size,y_size))\r\n\r\n@numba.njit(parallel=True)\r\ndef compute_y_coordinates(z_coordinates,x_size,y_size,z_size):\r\n    y_coordinates=np.empty((x_size,z_size),dtype=np.uint16)\r\n    for i in numba.prange(z_size):\r\n        for j in numba.prange(x_size):\r\n            y_coordinates[j,i]=np.argmin(np.abs(z_coordinates[j]-i))\r\n    return y_coordinates\r\n\r\ny_coordinates=compute_y_coordinates(z_coordinates,x_size,y_size,z_size)""]",0,1
"[""from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\nimport torch\r\n\r\nclass LogitsPipeline(pipeline):\r\n    def _forward(self, model_inputs):\r\n        with torch.no_grad():\r\n            outputs = self.model(**model_inputs)\r\n        return outputs.logits\r\n\r\nselected_model=""distilbert-base-uncased-finetuned-sst-2-english""\r\ntokenizer=AutoTokenizer.from_pretrained(selected_model)\r\nmodel=AutoModelForSequenceClassification.from_pretrained(selected_model,num_labels=2)\r\n\r\nclassifier=LogitsPipeline(""sentiment-analysis"", model=model, tokenizer=tokenizer)\r\ntexts=[""this is the first sentence"",""of my data."",""In fact, thats not true,"",""but we are going to assume it"",""is""]\r\n\r\nlogits=classifier(texts)\r\nprint(logits)""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n{""name"":list(""abcdef""),""age"":[21,31,32,53,45,26],""country"":list(""AABBBC"")}\r\n)\r\n\r\ndf.group_by(""country"").agg(\r\nsorted_names:=pl.col(""name"").sort_by(""age""),\r\nsorted_names.first().alias(""age_sort_1""),\r\nsorted_names.get(2).fill_null(None).alias(""age_sort_2""),\r\nsorted_names.last().alias(""age_sort_-1"")\r\n)""]",0,1
"[""from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nfrom sklearn.linear_model import ElasticNet\r\nimport json\r\nfrom bson import ObjectId\r\n\r\napp=FastAPI()\r\nclient=pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb=client[""models""]\r\nmodel_collection=db[""example-model""]\r\n\r\nclass JSONEncoder(json.JSONEncoder):\r\n    def default(self,obj):\r\n        if isinstance(obj,ObjectId):\r\n            return str(obj)\r\n        return super().default(obj)\r\n\r\ndef response_to_mongo(r:dict):\r\n    model_collection.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features:List[float]):\r\n    prediction=model.predict(pd.DataFrame([features],columns=model.feature_names_in_))\r\n    response={""predictions"":prediction.tolist()}\r\n    response_to_mongo(json.loads(JSONEncoder().encode(response)))\r\n    return response""]",0,1
"[""import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef process_array(arr:NDArray[np.float64])->NDArray[np.float64]:\r\n return arr*2\r\n\r\narr:np.ndarray[np.float64]=np.array([1.0,2.0,3.0],dtype=np.float64)\r\nresult=process_array(arr)\r\nprint(result) # [2. 4. 6.]\r\n\r\ndef process_typed_array(arr:np.ndarray[tuple[int,...],np.dtype[np.int32]])->np.ndarray[tuple[int,...],np.dtype[np.int32]]:\r\n return arr+10\r\n\r\narr_int:np.ndarray[tuple[int,...],np.dtype[np.int32]]=np.array([[1,2],[3,4]],dtype=np.int32)\r\nprint(process_typed_array(arr_int)) # [[11 12] [13 14]]\r\n""]",0,1
"[""from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nF = TypeVar(""F"", bound=Callable[[int], int])\r\n\r\ndef remember(f: F) -> F:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory: Dict[int, int] = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\nprint(fib(100))""]",0,1
"[""import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmodel=""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nembeddings=HuggingFaceEmbeddings(model_name=model)\r\n\r\ndef main():\r\ndocs=[\r\nDocument(page_content=""The sky is blue."",metadata={""document_id"":""10""}),\r\nDocument(page_content=""The forest is green"",metadata={""document_id"":""62""})\r\n]\r\n\r\nfor doc in docs:\r\ndoc.metadata[""summary""]=""hello""\r\n\r\npprint.pprint(docs)\r\n\r\nwith tqdm(total=len(docs),desc=""Processing Documents"") as pbar:\r\ndb=FAISS.from_documents(docs,embeddings,progress_bar=pbar.update)\r\n\r\ndb.save_local(""faiss_index"")\r\nnew_db=FAISS.load_local(""faiss_index"",embeddings)\r\n\r\nquery=""Which color is the sky?""\r\ndocs=new_db.similarity_search_with_score(query)\r\n\r\nprint(""Retrieved docs:"",docs)\r\nprint(""Metadata of the most relevant document:"",docs[0][0].metadata)\r\n\r\nif __name__==""__main__"":\r\nmain()""]",0,1
"[""from pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import *\r\n\r\nspark = SparkSession.builder.appName(""SchemaAlignment"").getOrCreate()\r\n\r\ndf1_schema = StructType([\r\n StructField(""A"", DateType(), True),\r\n StructField(""B"", IntegerType(), True),\r\n StructField(""C"", StringType(), True)\r\n])\r\n\r\ndf2 = spark.createDataFrame([\r\n (""2024-03-18"", ""123"", ""hello""),\r\n (""2025-06-22"", ""456"", ""world"")\r\n], StructType([\r\n StructField(""A"", StringType(), True),\r\n StructField(""B"", StringType(), True),\r\n StructField(""C"", StringType(), True)\r\n]))\r\n\r\nfor field in df1_schema.fields:\r\n df2 = df2.withColumn(field.name, df2[field.name].cast(field.dataType))\r\n\r\ndf2.printSchema()\r\ndf2.show()""]",0,1
"[""import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n global greeting\r\n greeting = ""Hello""\r\n yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n global greeting\r\n greeting = ""Hi""\r\n yield\r\n\r\ndef create_app(lifespan):\r\n app = FastAPI(title=""Test"", lifespan=lifespan)\r\n @app.get(""/"")\r\n async def root():\r\n  return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n app = create_app(_lifespan_override)\r\n with TestClient(app) as client:\r\n  yield client\r\n\r\ndef test_override(fake_client):\r\n response = fake_client.get(""/"")\r\n assert response.text == ""Hi""""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 3\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores, prefer=""processes"")(\r\n        delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks)\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()""]",0,1
"[""import numpy as np\r\nimport cv2\r\nfrom PIL import Image\r\nimport random\r\n\r\n# ############\r\n#  INPUTS  #\r\n# ############\r\ndpi = 1000  # dots per inch\r\ndpmm = 0.03937 * dpi  # dots per mm\r\nwidthOfSampleMM = 50  # mm\r\nheightOfSampleMM = 50  # mm\r\npatternSizeMM = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nvariation = 0.75  # 1 is very bad, 0 is very good\r\n############\r\n\r\n# conversions to pixels\r\nwidthOfSamplesPX = int(np.ceil(widthOfSampleMM * dpmm))  # get the width\r\nwidthOfSamplesPX = widthOfSamplesPX + 10 - widthOfSamplesPX % 10  # round up the width to nearest 10\r\nheightOfSamplePX = int(np.ceil(heightOfSampleMM * dpmm))  # get the height\r\nheightOfSamplePX = heightOfSamplePX + 10 - heightOfSamplePX % 10  # round up the height to nearest 10\r\npatternSizePX = patternSizeMM * dpmm  # this is the size of the pattern, so far I am going with circles\r\n\r\n# init an empty image (white background)\r\nim = 255 * np.ones((heightOfSamplePX, widthOfSamplesPX), dtype=np.uint8)\r\n\r\n# horizontal circle centres\r\nnumPoints = int(density * heightOfSamplePX / patternSizePX)  # get number of patterns possible\r\nif numPoints == 1:\r\n    horizontal = [heightOfSamplePX // 2]\r\nelse:\r\n    horizontal = [int(i * heightOfSamplePX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# vertical circle centres\r\nnumPoints = int(density * widthOfSamplesPX / patternSizePX)\r\nif numPoints == 1:\r\n    vertical = [widthOfSamplesPX // 2]\r\nelse:\r\n    vertical = [int(i * widthOfSamplesPX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# generate circles with noise in them\r\nfor i in vertical:\r\n    for j in horizontal:\r\n        # generate the noisy information\r\n        iWithNoise = i + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        jWithNoise = j + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        patternSizePXWithNoise = patternSizePX + patternSizePX * variation * (np.random.rand() - 0.5) / 2\r\n        cv2.circle(im, (int(iWithNoise), int(jWithNoise)), int(patternSizePXWithNoise // 2), 0, -1)  # add circle\r\n\r\n# Now save the image using PIL for efficient handling of large images\r\ndef save_image(image, filename, dpi=1000):\r\n    # Convert the numpy array to a PIL image\r\n    pil_image = Image.fromarray(image)\r\n\r\n    # Save the image as PNG or TIFF (lossless compression)\r\n    pil_image.save(filename, dpi=(dpi, dpi), compression_level=9)  # You can use compression_level for TIFFs\r\n\r\n# Save the image at high resolution\r\nsave_image(im, ""speckle_pattern_high_res.png"", dpi=5280)  # Adjust dpi as needed""]",0,1
"[""from pydantic import BaseModel, ValidationError, root_validator\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\n    @root_validator(pre=True)\r\n    def validate_all(cls, values):\r\n        errors = []\r\n        try:\r\n            Salary(**values['salary'])\r\n        except ValidationError as e:\r\n            errors.append(str(e))\r\n        try:\r\n            Employee(**values)\r\n        except ValidationError as e:\r\n            errors.append(str(e))\r\n        \r\n        if errors:\r\n            raise ValidationError(errors)\r\n        return values\r\n\r\ntry:\r\n    salary = Salary(gross=""hello"", net=1000, tax=10)\r\n    employee = Employee(name=""Mattia"", age=""hello"", salary=salary)\r\nexcept ValidationError as e:\r\n    print(e)\r\n""]",0,1
