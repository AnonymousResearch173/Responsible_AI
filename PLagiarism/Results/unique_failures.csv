Label,Failed Sets Count,Failed Sets,Code Snippet
0,1,misclassified_in_Test_6.csv.csv,"// Using WebClient with .block()\r\nWebClient client = WebClient.create();\r\nString result = client.get()\r\n    .uri(\""https://example.com\"")\r\n    .retrieve()\r\n    .bodyToMono(String.class)\r\n    .block();\r\n\r\n// Using RestTemplate (classic blocking)\r\nRestTemplate restTemplate = new RestTemplate();\r\nString result = restTemplate.getForObject(\""https://example.com\"", String.class);\r\n\r\n// Summary in plain logic\r\n// WebClient with .block() uses more memory and threads than RestTemplate in a blocking app\r\n// RestTemplate is simpler and cheaper for blocking apps\r\n// If you are not planning to go full reactive, prefer RestTemplate"
0,1,misclassified_in_Test_6.csv.csv,"// Does not compile\r\nclass Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }   \r\n        System.out.println(s); // error: cannot find symbol\r\n    }\r\n}\r\n\r\n// Compiles and works\r\nclass InstanceofFixed {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\n// Why the first one fails:\r\n// Pattern variables like `String s` are only in scope if the compiler can be sure they are initialized\r\n// In `else if (!(o instanceof String s))`, the scope of `s` does not extend beyond that block\r\n// So `s` is not visible after that block ends\r\n\r\n// This is not a bug in javac, it is the intended behavior according to the Java Language Specification\r\n\r\n// You do not need to report this\r\n// But to understand more, you can check the JLS section on pattern matching:\r\n// https://docs.oracle.com/javase/specs/jls/se17/html/jls-14.html#jls-14.11.1"
0,1,misclassified_in_Test_6.csv.csv,"package test.one;\r\n\r\npublic abstract class One {\r\n    protected abstract void whatever();\r\n\r\n    public void run() {\r\n        whatever();\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Three {\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        };\r\n        one.whatever(); // error\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n    public static void main(String[] args) {\r\n        new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        }.whatever(); // works\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"// MyCorsConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\n@Configuration\r\npublic class MyCorsConfig {\r\n\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.addAllowedOrigin(\""http://localhost:3000\"");\r\n        config.addAllowedMethod(\""*\"");\r\n        config.addAllowedHeader(\""*\"");\r\n        config.setAllowCredentials(true);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n\r\n        return new CorsFilter(source);\r\n    }\r\n}\r\n\r\n// SecurityConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .cors(Customizer.withDefaults())\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/calciatore/list\"").permitAll()\r\n                .anyRequest().authenticated()\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.context.Context;\r\n\r\npublic class Service2 {\r\n\r\n    public void processMessage(String traceIdFromSqs) {\r\n        Tracer tracer = GlobalOpenTelemetry.getTracer(\""example\"");\r\n\r\n        SpanContext remoteSpanContext = SpanContext.createFromRemoteParent(\r\n            traceIdFromSqs,\r\n            \""0000000000000001\"",\r\n            TraceFlags.getSampled(),\r\n            TraceState.getDefault()\r\n        );\r\n\r\n        Context remoteContext = Context.root().with(Span.wrap(remoteSpanContext));\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(\""consumeMessage\"")\r\n            .setParent(remoteContext)\r\n            .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // do something\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import java.util.*;\r\n\r\npublic class Main {\r\n    public static int solve(List<Integer> nums) {\r\n        int n = nums.size();\r\n        int[] inc = new int[n];\r\n        int[] dec = new int[n];\r\n        int[] inc2 = new int[n];\r\n\r\n        Arrays.fill(inc, 1);\r\n        Arrays.fill(dec, 1);\r\n        Arrays.fill(inc2, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) < nums.get(i)) {\r\n                    inc[i] = Math.max(inc[i], inc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    inc2[i] = Math.max(inc2[i], inc2[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    dec[i] = Math.max(dec[i], dec[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLen = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                int left = inc[i];\r\n                int middle = dec[j] - (i == j ? 1 : 0);\r\n                int right = inc2[j] - 1;\r\n                maxLen = Math.max(maxLen, left + middle + right);\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(solve(List.of(1, 100)));\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"ExecutorService forkJoinExecutor = new ForkJoinPool(30);\r\nExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\nList<String> result1 = forkJoinExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nList<String> result2 = virtualThreadExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nString callExternalSystem(int i) {\r\n    try {\r\n        Thread.sleep(10);\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n    return \""response \"" + i;\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        String fileName = \""3$ Mù F'RANçé_33902_Country_5_202105.csv\"";\r\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8)\r\n                .replace(\""+\"", \""%20\"");\r\n\r\n        String contentDisposition = \""attachment; filename*=UTF-8''\"" + encodedFileName;\r\n\r\n        File file = new File(\""your_file_path_here\"");\r\n        byte[] data = java.nio.file.Files.readAllBytes(file.toPath());\r\n\r\n        RequestBody body = RequestBody.create(data, MediaType.parse(\""application/octet-stream\""));\r\n\r\n        Request request = new Request.Builder()\r\n                .url(\""https://your_url_here\"")\r\n                .addHeader(\""Content-Type\"", \""application/octet-stream\"")\r\n                .addHeader(\""Content-Disposition\"", contentDisposition)\r\n                .addHeader(\""Authorization\"", \""Bearer your_token_here\"")\r\n                .post(body)\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n        System.out.println(response.code());\r\n        System.out.println(response.body().string());\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,// File: Parent.java\r\npackage example;\r\n\r\npublic abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\n// File: Child.java\r\npackage example;\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {\r\n    }\r\n}\r\n\r\n// File: Main.java\r\npackage another;\r\n\r\nimport example.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}
0,1,misclassified_in_Test_6.csv.csv,"import java.lang.foreign.*;\r\nimport java.lang.invoke.*;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\ntry (var arena = Arena.ofConfined()) {\r\n  SymbolLookup libc = Linker.nativeLinker().defaultLookup();\r\n  MethodHandle XOpenDisplay = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XOpenDisplay\"").get(), FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));\r\n  MethodHandle XInternAtom = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XInternAtom\"").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n  MethodHandle XChangeProperty = // already generated by jextract\r\n      Xlib_h.XChangeProperty;\r\n  MethodHandle XFlush = Xlib_h.XFlush;\r\n\r\n  MemorySegment display = (MemorySegment) XOpenDisplay.invoke(MemorySegment.NULL);\r\n  int screen = 0; // default screen\r\n\r\n  MemorySegment atomName = arena.allocateUtf8String(\""_NET_WM_XAPP_PROGRESS\"");\r\n  int atom = (int) XInternAtom.invoke(display, atomName, 0);\r\n\r\n  long window = rawHandle; // from JavaFX\r\n\r\n  for (int i = 0; i <= 100; i += 20) {\r\n      MemorySegment value = arena.allocate(ValueLayout.JAVA_LONG, i);\r\n      XChangeProperty.invoke(display, window, atom,\r\n              /* type = CARDINAL */ 6, /* format = 32 */ 32,\r\n              /* mode replace */ 0, value, 1);\r\n      XFlush.invoke(display);\r\n      Thread.sleep(500);\r\n  }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Yaml yaml = new Yaml();\r\n        try (InputStream input = new FileInputStream(\""config.yaml\"")) {\r\n            Map<String, Object> all = yaml.load(input);\r\n            Map<String, Object> part = (Map<String, Object>) all.get(\""interesting-setup\"");\r\n\r\n            Yaml customYaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            String serialized = new Yaml().dump(part);\r\n            InterestingSetup setup = customYaml.load(serialized);\r\n\r\n            System.out.println(setup.port);\r\n            System.out.println(setup.validation);\r\n            System.out.println(setup.parts);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public class EscapeXML {\r\n\r\n    private static final String[] ESCAPES;\r\n\r\n    static {\r\n        int size = '>' + 1;\r\n        ESCAPES = new String[size];\r\n        ESCAPES['<'] = \""&lt;\"";\r\n        ESCAPES['>'] = \""&gt;\"";\r\n        ESCAPES['&'] = \""&amp;\"";\r\n        ESCAPES['\\''] = \""&#039;\"";\r\n        ESCAPES['\""'] = \""&#034;\"";\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (c < ESCAPES.length && ESCAPES[c] != null) {\r\n                result.append(ESCAPES[c]);\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXMLMap {\r\n\r\n    private static final Map<Character, String> ESCAPE_MAP = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPE_MAP.put('<', \""&lt;\"");\r\n        ESCAPE_MAP.put('>', \""&gt;\"");\r\n        ESCAPE_MAP.put('&', \""&amp;\"");\r\n        ESCAPE_MAP.put('\\'', \""&#039;\"");\r\n        ESCAPE_MAP.put('\""', \""&#034;\"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (ESCAPE_MAP.containsKey(c)) {\r\n                result.append(ESCAPE_MAP.get(c));\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) throws InterruptedException, ExecutionException {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        Set<Integer> resultSet = ConcurrentHashMap.newKeySet();\r\n\r\n        Callable<Void> task3 = () -> {\r\n            for (int i = 3; i <= n; i += 3) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task5 = () -> {\r\n            for (int i = 5; i <= n; i += 5) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task7 = () -> {\r\n            for (int i = 7; i <= n; i += 7) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        List<Callable<Void>> tasks = Arrays.asList(task3, task5, task7);\r\n        executor.invokeAll(tasks);\r\n        executor.shutdown();\r\n\r\n        int sum = 0;\r\n        for (int num : resultSet) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));     // Output: 40\r\n        System.out.println(fm.getSum(1000));   // Output: 272066\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String content = \""\""\""\r\n            {\r\n                \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\""\r\n            }\r\n            \""\""\"";\r\n        Aggregate aggregate = mapper.readValue(content, Aggregate.class);\r\n        System.out.println(mapper.writeValueAsString(aggregate));\r\n    }\r\n}\r\n\r\nrecord AggregateId(@JsonValue UUID id) {\r\n    @JsonCreator\r\n    public AggregateId(UUID id) {\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Aggregate {\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(\""aggregateId\"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        String weekA = \""2012-W48\"";\r\n        String weekB = \""2013-W03\"";\r\n        DateTimeFormatter weekFormatter = new DateTimeFormatterBuilder()\r\n                .appendPattern(\""uuuu-'W'ww\"")\r\n                .parseDefaulting(WeekFields.ISO.dayOfWeek(), 1)\r\n                .toFormatter(Locale.US);\r\n        LocalDate dateA = LocalDate.parse(weekA, weekFormatter);\r\n        LocalDate dateB = LocalDate.parse(weekB, weekFormatter);\r\n        boolean isBefore = dateA.isBefore(dateB);\r\n        long weeksBetween = ChronoUnit.WEEKS.between(dateA, dateB);\r\n        System.out.println(\""isBefore: \"" + isBefore);\r\n        System.out.println(\""weeksBetween: \"" + weeksBetween);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public DemoSecurityProblem() {\r\n        if (true) {\r\n            throw new RuntimeException(\""Construction failed!\"");\r\n        }\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Dangerous method executed!\"");\r\n    }\r\n    static MaliciousSubClass saved;\r\n    @Override\r\n    protected void finalize() {\r\n        saved = this;\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        try {\r\n            new MaliciousSubClass();\r\n        } catch (Exception ignored) {\r\n        }\r\n        System.gc();\r\n        Thread.sleep(1000);\r\n        if (MaliciousSubClass.saved != null) {\r\n            MaliciousSubClass.saved.doSomething();\r\n        } else {\r\n            System.out.println(\""No object was saved.\"");\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,class Demo<T extends Exception> {\r\n    void doSomething() throws T {\r\n        // some logic\r\n    }\r\n}\r\n\r\nclass Example {\r\n    <T extends Exception> void call(Demo<T> demo) throws T {\r\n        demo.doSomething();\r\n    }\r\n\r\n    void test() {\r\n        Demo<RuntimeException> demo = new Demo<>();\r\n        call(demo);\r\n    }\r\n}
0,1,misclassified_in_Test_6.csv.csv,"public class EqualSplit {\r\n\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0)\r\n            return false;\r\n        return helper(arr, 0, 0, 0, 0);\r\n    }\r\n\r\n    private static boolean helper(int[] arr, int index, int sum1, int count1, int sum2) {\r\n        if (index == arr.length) {\r\n            return count1 == arr.length / 2 && sum1 == sum2;\r\n        }\r\n\r\n        boolean putInGroup1 = false;\r\n        if (count1 < arr.length / 2) {\r\n            putInGroup1 = helper(arr, index + 1, sum1 + arr[index], count1 + 1, sum2);\r\n        }\r\n\r\n        boolean putInGroup2 = helper(arr, index + 1, sum1, count1, sum2 + arr[index]);\r\n\r\n        return putInGroup1 || putInGroup2;\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(\""TEST\\nTEST\\nTEST\"");\r\n        label.setStyle(\""-fx-background-color: green;\"");\r\n\r\n        Tooltip tooltip = new Tooltip(\""TOOLTIP\"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            tooltip.show(label, bounds.getMaxX(), bounds.getMaxY());\r\n        });\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_EXITED, e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public SliderSwitch() {\r\n        getStyleClass().add(\""slider-switch\"");\r\n    }\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n        @Override\r\n        public Object getBean() {\r\n            return SliderSwitch.this;\r\n        }\r\n        @Override\r\n        public String getName() {\r\n            return \""onAction\"";\r\n        }\r\n    };\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n    public final void setOnAction(EventHandler<ActionEvent> value) {\r\n        onActionProperty().set(value);\r\n    }\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onActionProperty().get();\r\n    }\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SliderSwitchSkin(this);\r\n    }\r\n    public SliderSwitchSkin(SliderSwitch control) {\r\n        super(control);\r\n        control.setOnMouseClicked(e -> {\r\n            control.fireEvent(new ActionEvent());\r\n        });\r\n    }\r\n    SliderSwitch source = (SliderSwitch) event.getSource();\r\n    System.out.println(\""Switch toggled: \"" + source);"
0,1,misclassified_in_Test_6.csv.csv,"@ParameterizedTest\r\n    @MethodSource(\""hashMapProvider\"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(\""1\"");\r\n        assertNotNull(obj1);\r\n    }\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(\""1\"", \""Obj1\"");\r\n        map.put(\""2\"", \""Obj2\"");\r\n        return Stream.of(map);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            \""2023-10-05T15:14:29.123456789Z\"",\r\n            \""2023-10-05T15:14:29.12345678Z\"",\r\n            \""2023-10-05T15:14:29.1234567Z\"",\r\n            \""2023-10-05T15:14:29.123456Z\"",\r\n            \""2023-10-05T15:14:29.12345Z\"",\r\n            \""2023-10-05T15:14:29.1234Z\"",\r\n            \""2023-10-05T15:14:29.123Z\"",\r\n            \""2023-10-05T15:14:29.12Z\"",\r\n            \""2023-10-05T15:14:29.1Z\"",\r\n            \""2023-10-05T15:14:29Z\""\r\n        };\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n            .appendPattern(\""yyyy-MM-dd'T'HH:mm:ss\"")\r\n            .optionalStart()\r\n            .appendFraction(ChronoField.NANO_OF_SECOND, 1, 9, true)\r\n            .optionalEnd()\r\n            .appendLiteral('Z')\r\n            .toFormatter();\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp.replace(\""Z\"", \""\""), formatter);\r\n                System.out.println(\""Parsed date: \"" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(\""Failed to parse: \"" + timestamp + \"" - \"" + e.getMessage());\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {  \r\n        String string1 = \""Great\"";  \r\n        int count;  \r\n        boolean hasDuplicate = false;\r\n        char string[] = string1.toCharArray();  \r\n        System.out.println(\""Duplicate characters in a given string:\"");  \r\n        for(int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for(int j = i + 1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicate = true;  \r\n            }  \r\n        }\r\n        if(!hasDuplicate) {  \r\n            System.out.println(\""no duplicates\"");  \r\n        }  \r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private Group circle;\r\n    private Button rotate;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private int angle = 0;\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n        rotate = new Button(\""Rotate Right\"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(\""-fx-background-color: GRAY\"");\r\n        Scene scene = new Scene(pane, 500, 400);\r\n        primaryStage.setTitle(\""Four-Color Wheel\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public void processButtonPress(ActionEvent event) {\r\n        angle += 90;\r\n        circle.setRotate(angle);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"return builder.build(); // auto-configured by Spring Boot + micrometer tracing\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n        \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    export:\r\n      datadog:\r\n        enabled: true\r\n        api-key: YOUR_DD_API_KEY\r\n    propagation:\r\n      type: W3C\r\n    sampling:\r\n      probability: 1.0\r\n    return builder.build();\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n      \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    log.info(\""in method2\"");\r\n    return \""ok\"";"
0,1,misclassified_in_Test_6.csv.csv,"private boolean wireframe = false;\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        box.setMaterial(new PhongMaterial(Color.BLUE));\r\n        box.setDrawMode(DrawMode.FILL);\r\n        box.setTranslateX(250);\r\n        box.setTranslateY(250);\r\n        box.setTranslateZ(400);\r\n        box.getTransforms().add(new Rotate(30, Rotate.X_AXIS));\r\n        box.getTransforms().add(new Rotate(30, Rotate.Y_AXIS));\r\n        Button toggleButton = new Button(\""Toggle Draw Mode\"");\r\n        toggleButton.setOnAction(e -> {\r\n            if (wireframe) {\r\n                box.setDrawMode(DrawMode.FILL);\r\n            } else {\r\n                box.setDrawMode(DrawMode.LINE);\r\n            }\r\n            wireframe = !wireframe;\r\n        });\r\n        VBox controls = new VBox(toggleButton);\r\n        controls.setAlignment(Pos.TOP_CENTER);\r\n        controls.setSpacing(10);\r\n        Group root = new Group(box);\r\n        SubScene subScene = new SubScene(root, 500, 500, true, SceneAntialiasing.BALANCED);\r\n        subScene.setFill(Color.LIGHTGRAY);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-1000);\r\n        subScene.setCamera(camera);\r\n        VBox layout = new VBox(controls, subScene);\r\n        Scene scene = new Scene(layout, 500, 550);\r\n        primaryStage.setTitle(\""Draw Mode Toggle\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n    public static void main(String[] args) throws InterruptedException {\r\n        try (var ts = new StructuredTaskScope<Void>()) {\r\n            ts.fork(() -> {\r\n                ScopedValue.runWhere(NAME, \""haha\"", () -> {\r\n                    System.out.println(\""Scoped value: \"" + NAME.get());\r\n                    return null;\r\n                });\r\n                return null;\r\n            });\r\n            ts.join();\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(\""-fx-background-color: black;\"");\r\n        Label testLabel = createTestLabel();\r\n        root.getChildren().add(testLabel);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(\""styles.css\"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(\""Placeholder\\nText\"");\r\n        testLabel.setLayoutX(100);\r\n        testLabel.setLayoutY(100);\r\n        testLabel.getStyleClass().add(\""test-label\"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.addEventFilter(MouseEvent.MOUSE_MOVED, e -> {\r\n            Bounds bounds = testLabel.getLayoutBounds();\r\n            if (e.getX() >= 0 && e.getY() >= 0 &&\r\n                e.getX() <= bounds.getWidth() &&\r\n                e.getY() <= bounds.getHeight()) {\r\n                doSomething();\r\n            } else {\r\n                doSomethingElse();\r\n            }\r\n        });\r\n        return testLabel;\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Inside label.\"");\r\n    }\r\n    public void doSomethingElse() {\r\n        System.out.println(\""Outside label.\"");\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    -fx-background-color: blue;\r\n    -fx-border-color: red;\r\n    -fx-font-family: \""Harlow Solid Italic\"";\r\n    -fx-font-size: 100;\r\n    -fx-padding: -40 20 0 20;"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        Label label1 = new Label(\""One two three\"");\r\n        TextField field1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(field1, 1, 0);\r\n        gridPane1.setHgap(20);\r\n        ColumnConstraints col1A = new ColumnConstraints();\r\n        ColumnConstraints col1B = new ColumnConstraints();\r\n        col1B.setHgrow(Priority.ALWAYS);\r\n        gridPane1.getColumnConstraints().addAll(col1A, col1B);\r\n        TitledPane titledPane1 = new TitledPane(\""Top\"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        GridPane gridPane2 = new GridPane();\r\n        Label label2 = new Label(\""Four five six seven\"");\r\n        TextField field2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(field2, 1, 0);\r\n        gridPane2.setHgap(20);\r\n        ColumnConstraints col2A = new ColumnConstraints();\r\n        ColumnConstraints col2B = new ColumnConstraints();\r\n        col2B.setHgrow(Priority.ALWAYS);\r\n        gridPane2.getColumnConstraints().addAll(col2A, col2B);\r\n        TitledPane titledPane2 = new TitledPane(\""Bottom\"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n        col1A.prefWidthProperty().bind(Bindings.createDoubleBinding(\r\n            () -> Math.max(label1.prefWidth(-1), label2.prefWidth(-1)),\r\n            label1.widthProperty(), label2.widthProperty()\r\n        ));\r\n        col2A.prefWidthProperty().bind(col1A.prefWidthProperty());\r\n        VBox root = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        Button menuButton = new Button(\""Menu\"");\r\n        ContextMenu contextMenu = new ContextMenu();\r\n        MenuItem item1 = new MenuItem(\""Option 1\"");\r\n        MenuItem item2 = new MenuItem(\""Option 2\"");\r\n        contextMenu.getItems().addAll(item1, item2);\r\n        menuButton.setOnAction(e -> {\r\n            Bounds bounds = menuButton.localToScreen(menuButton.getBoundsInLocal());\r\n            double x = bounds.getMinX();\r\n            double y = bounds.getMinY() - contextMenu.getHeight();\r\n            contextMenu.show(menuButton, x, y);\r\n        });\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuButton);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static String resourcesPath = \""C:\\\\Users\\\\java\\\\Desktop\\\\TestWaterMark\\\\\"";\r\n    public static String FILE_NAME = resourcesPath + \""test.pdf\"";\r\n    public static void main(String[] args) throws IOException {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n        String watermarkText = \""??? ??????\"";\r\n        String fontPath = resourcesPath + \""myCustomFont.ttf\"";\r\n        Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 16);\r\n        BaseFont baseFont = arabicFont.getBaseFont();\r\n        PdfReader reader = new PdfReader(byteArray);\r\n        PdfStamper stamper = new PdfStamper(reader, baos);\r\n        int numberOfPages = reader.getNumberOfPages();\r\n        for (int i = 1; i <= numberOfPages; i++) {\r\n            Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n            PdfContentByte overContent = stamper.getOverContent(i);\r\n            PdfGState state = new PdfGState();\r\n            state.setFillOpacity(0.3f);\r\n            overContent.saveState();\r\n            overContent.setGState(state);\r\n            float textWidth = baseFont.getWidthPoint(watermarkText, 13);\r\n            float height = baseFont.getAscentPoint(watermarkText, 13) - baseFont.getDescentPoint(watermarkText, 13);\r\n            for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n                for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n                    overContent.beginText();\r\n                    overContent.setFontAndSize(baseFont, 13);\r\n                    overContent.showTextAligned(Element.ALIGN_CENTER, watermarkText, x, y, 45f);\r\n                    overContent.endText();\r\n                }\r\n            }\r\n            overContent.restoreState();\r\n        }\r\n        stamper.close();\r\n        reader.close();\r\n        byteArray = baos.toByteArray();\r\n        File outputFile = new File(resourcesPath + \""output.pdf\"");\r\n        if (outputFile.exists()) outputFile.delete();\r\n        Files.write(outputFile.toPath(), byteArray);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        this.buildGrid();\r\n    }\r\n    private void buildGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private RSAKey rsaKey;\r\n    private final DefaultUserDetailsService defaultUserDetailsService;\r\n    public SecurityConfig(DefaultUserDetailsService defaultUserDetailsService) {\r\n        this.defaultUserDetailsService = defaultUserDetailsService;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .cors(Customizer.withDefaults())\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\""/auth/**\"").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .userDetailsService(defaultUserDetailsService)\r\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter())))\r\n                .build();\r\n    }\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n    @Bean\r\n    public PasswordEncoder getPasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    @Bean\r\n    public JWKSource<SecurityContext> jwkSource() {\r\n        rsaKey = generateRsa();\r\n        JWKSet jwkSet = new JWKSet(rsaKey);\r\n        return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\r\n    }\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        return NimbusJwtDecoder.withPublicKey(rsaKey.toRSAPublicKey()).build();\r\n    }\r\n    @Bean\r\n    JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwks) {\r\n        return new NimbusJwtEncoder(jwks);\r\n    }\r\n    @Bean\r\n    CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowedOrigins(List.of(\""http://localhost:4200\""));\r\n        config.setAllowedMethods(List.of(\""GET\"", \""POST\"", \""DELETE\""));\r\n        config.setAllowedHeaders(List.of(\""Authorization\"", \""Content-Type\""));\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n        return source;\r\n    }\r\n    private RSAKey generateRsa() {\r\n        try {\r\n            KeyPairGenerator generator = KeyPairGenerator.getInstance(\""RSA\"");\r\n            generator.initialize(2048);\r\n            KeyPair keyPair = generator.generateKeyPair();\r\n            return new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())\r\n                    .privateKey((RSAPrivateKey) keyPair.getPrivate())\r\n                    .keyID(UUID.randomUUID().toString())\r\n                    .build();\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n    private JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n        JwtGrantedAuthoritiesConverter authoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n        authoritiesConverter.setAuthorityPrefix(\""ROLE_\"");\r\n        authoritiesConverter.setAuthoritiesClaimName(\""scope\"");\r\n        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\n        converter.setJwtGrantedAuthoritiesConverter(authoritiesConverter);\r\n        return converter;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final PDFDocument pdfDocument;\r\n    private final PSConverter converter;\r\n    public PDFProcessor(PDFDocument pdfDocument, PSConverter converter) {\r\n        this.pdfDocument = pdfDocument;\r\n        this.converter = converter;\r\n    }\r\n    public byte[] process(byte[] input) throws IOException {\r\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\r\n        pdfDocument.load(inputStream);\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        converter.convert(pdfDocument, outputStream);\r\n        return outputStream.toByteArray();\r\n    }\r\n    @Mock\r\n    PDFDocument pdfDocument;\r\n    @Mock\r\n    PSConverter converter;\r\n    @InjectMocks\r\n    PDFProcessor processor;\r\n    @Test\r\n    void testProcess() throws IOException {\r\n        byte[] content = \""test\"".getBytes();\r\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\r\n        doNothing().when(pdfDocument).load(any(ByteArrayInputStream.class));\r\n        doAnswer(invocation -> {\r\n            ByteArrayOutputStream os = invocation.getArgument(1);\r\n            os.write(content);\r\n            return null;\r\n        }).when(converter).convert(any(), any(ByteArrayOutputStream.class));\r\n        byte[] result = processor.process(\""input\"".getBytes());\r\n        assertArrayEquals(content, result);\r\n    }\r\n    public void load(ByteArrayInputStream inputStream) {}\r\n    public void convert(PDFDocument document, ByteArrayOutputStream outputStream) {}"
0,1,misclassified_in_Test_6.csv.csv,"@Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/\"").access(new WebExpressionAuthorizationManager(\""hasIpAddress('127.0.0.1')\""))\r\n                .anyRequest().authenticated()\r\n            )\r\n            .httpBasic(Customizer.withDefaults());\r\n        return http.build();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final AuthenticationManager authenticationManager;\r\n    public SecurityConfig(AuthenticationManager authenticationManager) {\r\n        this.authenticationManager = authenticationManager;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        BearerTokenAuthenticationFilter bearerFilter = new BearerTokenAuthenticationFilter(authenticationManager);\r\n        bearerFilter.setAuthenticationFailureHandler(new JwtAuthenticationFailureHandler());\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n            )\r\n            .exceptionHandling(exceptions -> exceptions\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint())\r\n            )\r\n            .addFilterBefore(bearerFilter, BearerTokenAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n    public static class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n        @Override\r\n        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }\r\n    public static class JwtAuthenticationFailureHandler implements AuthenticationFailureHandler {\r\n        @Override\r\n        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        List<String> products = List.of(\r\n            \""NIVEA BODY LOTION EXPRESS HYDRATION 200 ML HYPERmart\"",\r\n            \""HYPERMART WINTER CREAM\"",\r\n            \""SKIN HYDRATION BALM\""\r\n        );\r\n        String query = \""HYDRATION LOTION\"";\r\n        List<String> results = searchProducts(products, query);\r\n        results.forEach(System.out::println);\r\n    }\r\n    static List<String> searchProducts(List<String> products, String query) {\r\n        String[] tokens = query.toLowerCase().split(\""\\\\s+\"");\r\n        Map<String, Integer> scored = new LinkedHashMap<>();\r\n        for (String product : products) {\r\n            String pl = product.toLowerCase();\r\n            int score = 0;\r\n            for (String word : tokens) {\r\n                if (pl.contains(word))  score++;\r\n            }\r\n            if (score > 0) scored.put(product, score);\r\n        }\r\n        List<Map.Entry<String,Integer>> list = new ArrayList<>(scored.entrySet());\r\n        list.sort((a,b) -> b.getValue().compareTo(a.getValue()));\r\n        List<String> out = new ArrayList<>();\r\n        for (var e : list) out.add(e.getKey());\r\n        return out;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int[] values = testState.values;\r\n        int length = values.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(values[i]);\r\n        }\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        for (int value : testState.values) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n    @State(Scope.Thread)\r\n    public static class TestState {\r\n        int[] values;\r\n        @Setup(Level.Iteration)\r\n        public void setup() {\r\n            values = new int[1000];\r\n            for (int i = 0; i < values.length; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final int DIVISIONS = 64;\r\n    private static final float RADIUS = 200;\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TriangleMesh mesh = createTexturedSphere(RADIUS, DIVISIONS);\r\n        MeshView earth = new MeshView(mesh);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(\""/images/earth2.jpg\"")));\r\n        earth.setMaterial(material);\r\n        Group root = new Group(earth);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setFill(Color.BLACK);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-600);\r\n        scene.setCamera(camera);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Textured Earth Sphere\"");\r\n        primaryStage.show();\r\n    }\r\n    private TriangleMesh createTexturedSphere(float radius, int divisions) {\r\n        TriangleMesh mesh = new TriangleMesh();\r\n        int div = divisions;\r\n        int pointCount = (div + 1) * (div + 1);\r\n        float[] points = new float[pointCount * 3];\r\n        float[] texCoords = new float[pointCount * 2];\r\n        int[] faces = new int[div * div * 6 * 2];\r\n        int idx = 0, tidx = 0;\r\n        for (int y = 0; y <= div; y++) {\r\n            double phi = Math.PI * y / div;\r\n            for (int x = 0; x <= div; x++) {\r\n                double theta = 2 * Math.PI * x / div;\r\n                float px = (float) (radius * Math.sin(phi) * Math.cos(theta));\r\n                float py = (float) (radius * Math.cos(phi));\r\n                float pz = (float) (radius * Math.sin(phi) * Math.sin(theta));\r\n                points[idx++] = px;\r\n                points[idx++] = py;\r\n                points[idx++] = pz;\r\n                texCoords[tidx++] = (float) x / div;\r\n                texCoords[tidx++] = (float) y / div;\r\n            }\r\n        }\r\n        int fidx = 0;\r\n        for (int y = 0; y < div; y++) {\r\n            for (int x = 0; x < div; x++) {\r\n                int p00 = y * (div + 1) + x;\r\n                int p01 = p00 + 1;\r\n                int p10 = p00 + div + 1;\r\n                int p11 = p10 + 1;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p10; faces[fidx++] = p10;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p01; faces[fidx++] = p01;\r\n            }\r\n        }\r\n        mesh.getPoints().setAll(points);\r\n        mesh.getTexCoords().setAll(texCoords);\r\n        mesh.getFaces().setAll(faces);\r\n        return mesh;\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void go(Short n) {\r\n        System.out.println(\""Short\"");\r\n    }\r\n    public static void go(int n) {\r\n        System.out.println(\""int\"");\r\n    }\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go(x);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Bean\r\n    fun requestSemaphore(): Semaphore {\r\n        return Semaphore(50)\r\n    }\r\n    @Bean\r\n    fun filter(semaphore: Semaphore): FilterRegistrationBean<Filter> {\r\n        val filter = Filter { request, response, chain ->\r\n            if (semaphore.tryAcquire(1, TimeUnit.SECONDS)) {\r\n                try {\r\n                    chain.doFilter(request, response)\r\n                } finally {\r\n                    semaphore.release()\r\n                }\r\n            } else {\r\n                (response as HttpServletResponse).status = HttpServletResponse.SC_SERVICE_UNAVAILABLE\r\n                response.writer.write(\""Too many concurrent requests\"")\r\n            }\r\n        }\r\n        val registration = FilterRegistrationBean<Filter>()\r\n        registration.filter = filter\r\n        registration.order = Ordered.HIGHEST_PRECEDENCE\r\n        return registration\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static final String PATH_TO_STYLESHEET = App.class.getResource(\""/style/style.css\"").toExternalForm();\r\n    public static final String PATH_TO_IMG = App.class.getResource(\""/img/logo.png\"").toExternalForm();\r\n    public static final String PATH_TO_SOUNDS = App.class.getResource(\""/sound/click.wav\"").toExternalForm();\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        Scene scene = new Scene(root, 400, 300);\r\n        scene.getStylesheets().add(PATH_TO_STYLESHEET);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        Rectangle background = new Rectangle(500, 500, Color.RED);\r\n        Button testButton = new Button(\""Test\"");\r\n        testButton.setStyle(\""-fx-background-color: green;\"");\r\n        testButton.setLayoutX(200);\r\n        testButton.setLayoutY(200);\r\n        pane.getChildren().addAll(background, testButton);\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n        Scene scene = new Scene(pane, 500, 500);\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(\""Test\"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = \""This is the text\"";\r\n            String filePath = \""C:\\\\Users\\\\Nirmalw\\\\Desktop\\\\Projects\\\\QR\\\\test\\\\test_img\\\\my_QR_with_text.png\"";\r\n            String charset = \""UTF-8\"";\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage combined = new BufferedImage(500, 550, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, 500, 550);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(\""Arial\"", Font.BOLD, 20));\r\n            g.drawString(\""User Name: John\"", 20, 520);\r\n            g.drawString(\""Event: Demo\"", 300, 520);\r\n            g.dispose();\r\n            ImageIO.write(combined, \""png\"", new File(filePath));\r\n            System.out.println(\""QR Code with text created successfully!\"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Value(\""${path}\"")\r\n    private String path;\r\n    @Bean\r\n    public Path directoryPath() {\r\n        return Paths.get(path);\r\n    }\r\n    private final Path directoryPath;\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try (WatchService watchService = FileSystems.getDefault().newWatchService()) {\r\n                directoryPath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);\r\n                WatchKey key;\r\n                while ((key = watchService.take()) != null) {\r\n                    for (WatchEvent<?> event : key.pollEvents()) {\r\n                        // actions on created files\r\n                    }\r\n                    key.reset();\r\n                }\r\n            } catch (Exception e) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ie) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private final Path directoryPath;\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try (WatchService watchService = FileSystems.getDefault().newWatchService()) {\r\n                directoryPath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);\r\n                WatchKey key;\r\n                while ((key = watchService.take()) != null) {\r\n                    for (WatchEvent<?> event : key.pollEvents()) {\r\n                        // actions on created files\r\n                    }\r\n                    key.reset();\r\n                }\r\n            } catch (Exception e) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ie) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Resource(lookup = \""java:/queue/testQueue\"")\r\n    private Queue queue;\r\n    @Inject\r\n    @JMSConnectionFactory(\""java:/jms/remoteCF\"")\r\n    private JMSContext context;\r\n    @PostConstruct\r\n    public void init() {\r\n        new Thread(this::sendAndReceive).start();\r\n    }\r\n    private void sendAndReceive() {\r\n        for (int i = 0; i < 5; i++) {\r\n            String message = \""Message \"" + i;\r\n            context.createProducer().send(queue, message);\r\n            JMSConsumer consumer = context.createConsumer(queue);\r\n            String received = consumer.receiveBody(String.class, 5000);\r\n            System.out.println(\""Received: \"" + received);\r\n        }\r\n    }\r\n    <remote-connector name=\""remote-artemis\"" socket-binding=\""remote-artemis\""/>\r\n    <pooled-connection-factory\r\n        name=\""remote-artemis\""\r\n        entries=\""java:/jms/remoteCF\""\r\n        connectors=\""remote-artemis\""\r\n        user=\""${artemismq.user}\""\r\n        password=\""${artemismq.password}\""\r\n        enable-amq1-prefix=\""true\""/>\r\n    <external-jms-queue name=\""testQueue\"" entries=\""java:/queue/testQueue\""/>\r\n    <remote-destination host=\""${artemismq.host}\"" port=\""${artemismq.port}\""/>"
0,1,misclassified_in_Test_6.csv.csv,"public static class Record {\r\n        private String sourceNode;\r\n        private String destinationNode;\r\n        private String weekIndex;\r\n        private int quantity;\r\n        public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n            this.weekIndex = weekIndex;\r\n            this.sourceNode = sourceNode;\r\n            this.destinationNode = destinationNode;\r\n            this.quantity = quantity;\r\n        }\r\n        public String getSourceNode() { return sourceNode; }\r\n        public String getDestinationNode() { return destinationNode; }\r\n        public String getWeekIndex() { return weekIndex; }\r\n        public int getQuantity() { return quantity; }\r\n    }\r\n    public static class OutputRecord {\r\n        private String weekIndex;\r\n        private String sourceNode;\r\n        private String destinationNode;\r\n        private double percentage;\r\n        public OutputRecord(String weekIndex, String sourceNode, String destinationNode, double percentage) {\r\n            this.weekIndex = weekIndex;\r\n            this.sourceNode = sourceNode;\r\n            this.destinationNode = destinationNode;\r\n            this.percentage = percentage;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return weekIndex + \"" \"" + sourceNode + \"" \"" + destinationNode + \"" \"" + String.format(\""%.2f%%\"", percentage);\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(\""week1\"", \""source1\"", \""destination1\"", 100),\r\n            new Record(\""week1\"", \""source1\"", \""destination2\"", 200),\r\n            new Record(\""week1\"", \""source2\"", \""destination1\"", 200),\r\n            new Record(\""week1\"", \""source2\"", \""destination2\"", 100),\r\n            new Record(\""week2\"", \""source1\"", \""destination1\"", 200),\r\n            new Record(\""week2\"", \""source1\"", \""destination2\"", 200)\r\n        );\r\n        Map<String, Map<String, List<Record>>> grouped = records.stream()\r\n            .collect(Collectors.groupingBy(Record::getWeekIndex, Collectors.groupingBy(Record::getSourceNode)));\r\n        List<OutputRecord> result = grouped.entrySet().stream()\r\n            .flatMap(weekEntry -> weekEntry.getValue().entrySet().stream()\r\n                .flatMap(sourceEntry -> {\r\n                    int total = sourceEntry.getValue().stream().mapToInt(Record::getQuantity).sum();\r\n                    return sourceEntry.getValue().stream()\r\n                        .map(r -> new OutputRecord(r.getWeekIndex(), r.getSourceNode(), r.getDestinationNode(),\r\n                            (r.getQuantity() * 100.0) / total));\r\n                }))\r\n            .collect(Collectors.toList());\r\n        result.forEach(System.out::println);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static class Puzzle {\r\n        String name;\r\n        int level;\r\n        public Puzzle(String name, int level) {\r\n            this.name = name;\r\n            this.level = level;\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(\r\n            new Puzzle(\""Puzzle1\"", 1),\r\n            new Puzzle(\""Puzzle2\"", 2),\r\n            new Puzzle(\""Puzzle3\"", 3),\r\n            new Puzzle(\""Puzzle4\"", 4)\r\n        );\r\n        Gson gson = new Gson();\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n            .map(gson::toJson)\r\n            .map(Document::parse)\r\n            .map(InsertOneModel::new)\r\n            .toList();\r\n        bulkWrites.forEach(System.out::println);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws JsonProcessingException {\r\n        Map<String, Integer> originalMap = new HashMap<>();\r\n        originalMap.put(\""test_first\"", 1);\r\n        originalMap.put(\""test_second\"", 2);\r\n        Map<String, Integer> camelCaseMap = originalMap.entrySet()\r\n                .stream()\r\n                .collect(Collectors.toMap(\r\n                        entry -> toCamelCase(entry.getKey()),\r\n                        Map.Entry::getValue\r\n                ));\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(camelCaseMap);\r\n        System.out.println(json);\r\n    }\r\n    private static String toCamelCase(String snakeCase) {\r\n        String[] parts = snakeCase.split(\""_\"");\r\n        StringBuilder camelCase = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCase.append(parts[i].substring(0, 1).toUpperCase());\r\n            camelCase.append(parts[i].substring(1));\r\n        }\r\n        return camelCase.toString();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Autowired\r\n    private DataSource dataSource;\r\n    @Autowired\r\n    private JwtTokenProvider jwtTokenProvider;\r\n    @Bean\r\n    public static PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors().and()\r\n                .authorizeRequests()\r\n                .antMatchers(\""/resources/**\"", \""/error\"", \""/api/user/**\"").permitAll()\r\n                .antMatchers(\""/api/admin/**\"").hasRole(\""ADMIN\"")\r\n                .anyRequest().fullyAuthenticated()\r\n                .and()\r\n                .logout().permitAll()\r\n                .logoutRequestMatcher(new AntPathRequestMatcher(\""/api/user/logout\"", \""POST\""))\r\n                .and()\r\n                .formLogin().loginPage(\""/api/user/login\"").and()\r\n                .httpBasic().and()\r\n                .csrf().disable();\r\n        http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtTokenProvider));\r\n    }\r\n    @Autowired\r\n    public void configAuthentication(AuthenticationManagerBuilder authBuilder) throws Exception {\r\n        authBuilder.jdbcAuthentication()\r\n                .dataSource(dataSource)\r\n                .passwordEncoder(new BCryptPasswordEncoder())\r\n                .usersByUsernameQuery(\""select username, password, enabled from usr01 where username=?\"")\r\n                .authoritiesByUsernameQuery(\""select username, role from usr01 where username=?\"");\r\n    }\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(\""/**\"").allowedOrigins(\""*\"").allowedMethods(\""*\"");\r\n            }\r\n        };\r\n    }\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e308;\r\n        double c = a * b;\r\n        double d = c / b;\r\n        System.out.println(\""Non-strictfp result: \"" + d);\r\n    }\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e308;\r\n        double c = a * b;\r\n        double d = c / b;\r\n        System.out.println(\""Strictfp result: \"" + d);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"int to, weight;\r\n    Edge(int t, int w) {\r\n        to = t;\r\n        weight = w;\r\n    }\r\n    static int result;\r\n    static long target;\r\n    static Map<Long, Integer> map;\r\n    public static int solve(List<List<Edge>> T, long L) {\r\n        target = L;\r\n        result = Integer.MAX_VALUE;\r\n        boolean[] visited = new boolean[T.size()];\r\n        decompose(0, T, visited);\r\n        return result == Integer.MAX_VALUE ? -1 : result;\r\n    }\r\n    static int dfsSize(int node, int parent, List<List<Edge>> T, boolean[] visited) {\r\n        int size = 1;\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                size += dfsSize(e.to, node, T, visited);\r\n            }\r\n        }\r\n        return size;\r\n    }\r\n    static int dfsCentroid(int node, int parent, int size, List<List<Edge>> T, boolean[] visited) {\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                int childSize = dfsSize(e.to, node, T, visited);\r\n                if (childSize > size / 2) return dfsCentroid(e.to, node, size, T, visited);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    static void collect(int node, int parent, long sum, int depth, List<List<Edge>> T, boolean[] visited, List<long[]> paths) {\r\n        if (sum > target) return;\r\n        paths.add(new long[]{sum, depth});\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                collect(e.to, node, sum + e.weight, depth + 1, T, visited, paths);\r\n            }\r\n        }\r\n    }\r\n    static void process(int node, List<List<Edge>> T, boolean[] visited) {\r\n        map = new HashMap<>();\r\n        map.put(0L, 0);\r\n        for (Edge e : T.get(node)) {\r\n            if (visited[e.to]) continue;\r\n            List<long[]> paths = new ArrayList<>();\r\n            collect(e.to, node, e.weight, 1, T, visited, paths);\r\n            for (long[] path : paths) {\r\n                long remain = target - path[0];\r\n                if (map.containsKey(remain)) {\r\n                    result = Math.min(result, map.get(remain) + (int) path[1]);\r\n                }\r\n            }\r\n            for (long[] path : paths) {\r\n                map.put(path[0], Math.min(map.getOrDefault(path[0], Integer.MAX_VALUE), (int) path[1]));\r\n            }\r\n        }\r\n    }\r\n    static void decompose(int root, List<List<Edge>> T, boolean[] visited) {\r\n        int size = dfsSize(root, -1, T, visited);\r\n        int centroid = dfsCentroid(root, -1, size, T, visited);\r\n        visited[centroid] = true;\r\n        process(centroid, T, visited);\r\n        for (Edge e : T.get(centroid)) {\r\n            if (!visited[e.to]) {\r\n                decompose(e.to, T, visited);\r\n            }\r\n        }\r\n    }\r\n    static void putEdge(List<List<Edge>> T, int u, int v, int w) {\r\n        T.get(u).add(new Edge(v, w));\r\n        T.get(v).add(new Edge(u, w));\r\n    }\r\n    public static void main(String[] args) {\r\n        List<List<Edge>> T = new ArrayList<>();\r\n        int N = 8;\r\n        for (int i = 0; i < N; i++) T.add(new ArrayList<>());\r\n        putEdge(T, 0, 1, 2);\r\n        putEdge(T, 1, 2, 1);\r\n        putEdge(T, 1, 3, 2);\r\n        putEdge(T, 2, 6, 1);\r\n        putEdge(T, 6, 7, 1);\r\n        putEdge(T, 3, 4, 1);\r\n        putEdge(T, 3, 5, 4);\r\n        System.out.println(Solver.solve(T, 5L));\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final MemorySegment segment;\r\n    public BigLongArray(long size) {\r\n        this.segment = Arena.ofAuto().allocate(size * ValueLayout.JAVA_LONG.byteSize());\r\n    }\r\n    public void set(long index, long value) {\r\n        segment.setAtIndex(ValueLayout.JAVA_LONG, index, value);\r\n    }\r\n    public long get(long index) {\r\n        return segment.getAtIndex(ValueLayout.JAVA_LONG, index);\r\n    }\r\n    public long length() {\r\n        return segment.byteSize() / ValueLayout.JAVA_LONG.byteSize();\r\n    }\r\n    public static void main(String[] args) {\r\n        BigLongArray array = new BigLongArray(5_000_000_000L);\r\n        array.set(4_000_000_000L, 123456789L);\r\n        System.out.println(array.get(4_000_000_000L));\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"BufferedImage bulletImage;\r\n    Timer timer = new Timer(16, this);\r\n    List<Bullet> bullets = new ArrayList<>();\r\n    Map<Integer, BufferedImage> rotationCache = new HashMap<>();\r\n    public BulletGame() {\r\n        bulletImage = createBulletImage();\r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(Math.random() * getWidth(), Math.random() * getHeight(), Math.random() * 360));\r\n        }\r\n        timer.start();\r\n    }\r\n    BufferedImage createBulletImage() {\r\n        BufferedImage img = new BufferedImage(20, 20, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g = img.createGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(5, 5, 10, 10);\r\n        g.dispose();\r\n        return img;\r\n    }\r\n    BufferedImage getRotatedImage(double angle) {\r\n        int key = (int) angle;\r\n        if (!rotationCache.containsKey(key)) {\r\n            int w = bulletImage.getWidth();\r\n            int h = bulletImage.getHeight();\r\n            BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g = rotated.createGraphics();\r\n            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n            g.setTransform(at);\r\n            g.drawImage(bulletImage, 0, 0, null);\r\n            g.dispose();\r\n            rotationCache.put(key, rotated);\r\n        }\r\n        return rotationCache.get(key);\r\n    }\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        for (Bullet b : bullets) {\r\n            BufferedImage img = getRotatedImage(b.angle);\r\n            g.drawImage(img, (int) b.x, (int) b.y, null);\r\n        }\r\n    }\r\n    public void actionPerformed(ActionEvent e) {\r\n        repaint();\r\n    }\r\n    static class Bullet {\r\n        double x, y;\r\n        int angle;\r\n        Bullet(double x, double y, double angle) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.angle = (int) angle;\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\""Bullet Hell\"");\r\n        BulletGame game = new BulletGame();\r\n        frame.add(game);\r\n        frame.setSize(800, 600);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"<dependency>\r\n        <groupId>org.graalvm.sdk</groupId>\r\n        <artifactId>graal-sdk</artifactId>\r\n        <version>21.1.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.graalvm.js</groupId>\r\n        <artifactId>js</artifactId>\r\n        <version>21.1.0</version>\r\n    </dependency>\r\n    public static void main(String[] args) {\r\n        try (Context context = Context.create(\""js\"")) {\r\n            Value result = context.eval(\""js\"", \""1 + 2\"");\r\n            System.out.println(\""Result: \"" + result.asInt());\r\n            context.eval(\""js\"", \""console.log('Hello from GraalVM');\"");\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(\""[a-zA-Z ]+\"");\r\n    }\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + \"" is an invalid sentence\"";\r\n        }\r\n        String[] words = sentence.trim().split(\""\\\\s+\"");\r\n        if (words.length <= 2) {\r\n            return \""Invalid Length\"";\r\n        }\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(words[0]);\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            result.append(\"" \"");\r\n            result.append(new StringBuilder(words[i]).reverse().toString());\r\n        }\r\n        result.append(\"" \"");\r\n        result.append(words[words.length - 1]);\r\n        return result.toString();\r\n    }\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\""Enter the sentence\"");\r\n        String input = sc.nextLine();\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        System.out.println(result);\r\n        sc.close();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(\""Option 1\"", \""Option 2\"", \""Option 3\"");\r\n        comboBox.getStyleClass().add(\""yellowed\"");\r\n        comboBox.setSkin(new ComboBoxListViewSkin<>(comboBox) {\r\n            {\r\n                ListView<?> listView = (ListView<?>) getPopupContent();\r\n                listView.getStyleClass().add(\""yellowed-popup\"");\r\n            }\r\n        });\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(getClass().getResource(\""test.css\"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    -fx-background-color: yellow;\r\n    -fx-background-color: yellow;"
0,1,misclassified_in_Test_6.csv.csv,"@FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    public Custom() {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\""Custom.fxml\""));\r\n        fxmlLoader.setRoot(this);\r\n        fxmlLoader.setController(this);\r\n        try {\r\n            fxmlLoader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n      <Button fx:id=\""plusBtn\"" text=\""+\""/>\r\n      <Label fx:id=\""label\"" text=\""Label\""/>\r\n      <Button fx:id=\""minusBtn\"" text=\""-\""/>\r\n    @FXML private Custom cc;\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n        cc.newText(\""Test\"");\r\n    }\r\n      <Custom fx:id=\""cc\""/>\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\""views/fxml/Menu.fxml\""));\r\n        Scene scene = new Scene(loader.load(), 400, 400);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    opens app to javafx.fxml;\r\n    opens app.controllers to javafx.fxml;\r\n    opens app.components to javafx.fxml;\r\n    exports app;\r\n    exports app.components;"
0,1,misclassified_in_Test_6.csv.csv,"ReportConverter reportConverter = Mockito.mock(ReportConverter.class);\r\n    ReportRepository reportRepository = Mockito.mock(ReportRepository.class);\r\n    ReportService sut = new ReportService(reportConverter, reportRepository);\r\n    User user = new User();\r\n    Pageable pageable = Mockito.mock(Pageable.class);\r\n    ReportSpecification reportSpecification = new ReportSpecification();\r\n    List<ReportPageResponse> reportPageResponses = List.of(new ReportPageResponse());\r\n    ReportPageRequest reportPageRequest = new ReportPageRequest();\r\n    @Test\r\n    void get_report_page() {\r\n        when(reportConverter.toReportSpecification(user, reportPageRequest)).thenReturn(reportSpecification);\r\n        when(reportRepository.findAll(reportSpecification, PageRequest.of(1, 100))).thenReturn(null);\r\n        when(reportConverter.toReportPageResponse(Mockito.any())).thenReturn(reportPageResponses);\r\n        try (MockedConstruction<PageImpl> pageMock = Mockito.mockConstruction(PageImpl.class,\r\n                (mock, context) -> {\r\n                    when(mock.getTotalElements()).thenReturn(123456L);\r\n                    when(mock.getTotalPages()).thenReturn(1);\r\n                    when(mock.getContent()).thenReturn(reportPageResponses);\r\n                })) {\r\n            Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n            PageImpl<ReportPageResponse> constructed = pageMock.constructed().get(0);\r\n            assertThat(actual.getTotalElements()).isEqualTo(constructed.getTotalElements());\r\n            assertThat(actual.getTotalPages()).isEqualTo(constructed.getTotalPages());\r\n            assertThat(actual.getContent()).isEqualTo(constructed.getContent());\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n        Scene scene = new Scene(root, 400, 400);\r\n        StackPane stack = new StackPane();\r\n        Text text = new Text(\""Hello there StackOverflow, how are you? (:\"");\r\n        text.setFont(Font.font(16));\r\n        stack.getChildren().add(text);\r\n        root.setCenter(stack);\r\n        Color startColor = Color.RED;\r\n        Color endColor = Color.BLUE;\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.ZERO, e -> {\r\n                text.setFill(startColor);\r\n            }),\r\n            new KeyFrame(Duration.seconds(2), e -> {\r\n                text.setFill(endColor);\r\n            })\r\n        );\r\n        timeline.setCycleCount(1);\r\n        timeline.play();\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private Map<String, String> prop;\r\n    public Map<String, String> getProp() {\r\n        return prop;\r\n    }\r\n    public void setProp(Map<String, String> prop) {\r\n        this.prop = prop;\r\n    }\r\n    private final RootProperties rootProperties;\r\n    public TestController(RootProperties rootProperties) {\r\n        this.rootProperties = rootProperties;\r\n    }\r\n    @GetMapping(\""/props\"")\r\n    public Map<String, String> getProps() {\r\n        return rootProperties.getProp();\r\n    }\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) throws Exception {\r\n        WebView webView = new WebView();\r\n        File htmlFile = new File(\""src/main/resources/embeddedMap.html\"");\r\n        String url = htmlFile.toURI().toString();\r\n        webView.getEngine().load(url);\r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    html, body {\r\n      height: 100%;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    #map {\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n    function initMap() {\r\n      new google.maps.Map(document.getElementById(\""map\""), {\r\n        zoom: 15,\r\n        center: { lat: 32.99069, lng: -106.97436 },\r\n        mapTypeId: \""terrain\""\r\n      });\r\n    }\r\n    src=\""https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap\"">"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws IOException {\r\n        File projectDir = new File(\""src/main/java\"");\r\n        TypeSolver typeSolver = new CombinedTypeSolver(new ReflectionTypeSolver(), new JavaParserTypeSolver(projectDir));\r\n        SymbolResolver resolver = new JavaSymbolSolver(typeSolver);\r\n        StaticJavaParser.getConfiguration().setSymbolResolver(resolver);\r\n        File sourceFile = new File(\""src/main/java/Example.java\"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(\""Class: \"" + classDecl.getNameAsString());\r\n            Set<String> classFields = new HashSet<>();\r\n            classDecl.findAll(FieldDeclaration.class).forEach(fd ->\r\n                fd.getVariables().forEach(v -> classFields.add(v.getNameAsString()))\r\n            );\r\n            classDecl.findAll(MethodDeclaration.class).forEach(method -> {\r\n                System.out.println(\""  Method: \"" + method.getNameAsString());\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n                method.findAll(NameExpr.class).forEach(expr -> {\r\n                    try {\r\n                        ResolvedFieldDeclaration resolved = expr.resolve().asField();\r\n                        if (classFields.contains(resolved.getName())) {\r\n                            if (isWriteAccess(expr)) writeFields.add(resolved.getName());\r\n                            else readFields.add(resolved.getName());\r\n                        }\r\n                    } catch (Exception ignored) {\r\n                    }\r\n                });\r\n                method.findAll(FieldAccessExpr.class).forEach(expr -> {\r\n                    try {\r\n                        ResolvedFieldDeclaration resolved = expr.resolve().asField();\r\n                        if (classFields.contains(resolved.getName())) {\r\n                            if (isWriteAccess(expr)) writeFields.add(resolved.getName());\r\n                            else readFields.add(resolved.getName());\r\n                        }\r\n                    } catch (Exception ignored) {\r\n                    }\r\n                });\r\n                readFields.forEach(f -> System.out.println(\""    Read Field: \"" + f));\r\n                writeFields.forEach(f -> System.out.println(\""    Write Field: \"" + f));\r\n            });\r\n        });\r\n    }\r\n    private static boolean isWriteAccess(Expression expr) {\r\n        if (expr.getParentNode().isPresent()) {\r\n            return expr.getParentNode().get() instanceof AssignExpr &&\r\n                   ((AssignExpr) expr.getParentNode().get()).getTarget() == expr;\r\n        }\r\n        return false;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"Class<?> className() default Void.class;\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n    @Annotation(className = YetAnotherClass.class)\r\n    private AnotherClass overriddenAttribute;\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            if (field.isAnnotationPresent(Annotation.class)) {\r\n                Annotation annotation = field.getAnnotation(Annotation.class);\r\n                Class<?> clazz = annotation.className();\r\n                if (clazz == Void.class) {\r\n                    clazz = field.getType();\r\n                }\r\n                System.out.println(\""Field: \"" + field.getName() + \"" -> \"" + clazz.getName());\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private Trees trees;\r\n    @Override\r\n    public synchronized void init(javax.annotation.processing.ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        trees = Trees.instance(processingEnv);\r\n    }\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element rootElement : roundEnv.getRootElements()) {\r\n            TreePath path = trees.getPath(rootElement);\r\n            new TreePathScanner<Void, Void>() {\r\n                @Override\r\n                public Void visitSwitch(SwitchTree switchTree, Void unused) {\r\n                    ExpressionTree expression = switchTree.getExpression();\r\n                    TreePath exprPath = new TreePath(getCurrentPath(), expression);\r\n                    TypeMirror type = trees.getTypeMirror(exprPath);\r\n                    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\r\n                            \""Switch expression type: \"" + type.toString());\r\n                    return super.visitSwitch(switchTree, unused);\r\n                }\r\n            }.scan(path, null);\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public SourceVersion getSupportedSourceVersion() {\r\n        return SourceVersion.latest();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final ObjectProvider<MyController> controllerProvider;\r\n    public ListItemFactory(ObjectProvider<MyController> controllerProvider) {\r\n        this.controllerProvider = controllerProvider;\r\n    }\r\n    public VBox createListItem() throws IOException {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\""/fxml/my-item.fxml\""));\r\n        loader.setControllerFactory(param -> controllerProvider.getObject());\r\n        return loader.load();\r\n    }\r\n    @FXML\r\n    private Label nameLabel;\r\n    public void setData(String name) {\r\n        nameLabel.setText(name);\r\n    }\r\n    @FXML\r\n    private VBox contentArea;\r\n    private final ListItemFactory listItemFactory;\r\n    public MainController(ListItemFactory listItemFactory) {\r\n        this.listItemFactory = listItemFactory;\r\n    }\r\n    public void populateList() {\r\n        for (int i = 0; i < 10; i++) {\r\n            try {\r\n                VBox item = listItemFactory.createListItem();\r\n                MyController controller = (MyController) item.getProperties().get(\""controller\"");\r\n                controller.setData(\""Item \"" + i);\r\n                contentArea.getChildren().add(item);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    <Label fx:id=\""nameLabel\""/>"
0,1,misclassified_in_Test_6.csv.csv,"List<Double> r = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\r\n    List<Double> nodes = Arrays.asList(0.0, 45.0, 90.0, 135.0, 180.0);\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        javafx.scene.chart.LineChart<Number, Number> chart = new javafx.scene.chart.LineChart<>(xAxis, yAxis);\r\n        chart.setCreateSymbols(true);\r\n        XYChart.Series<Number, Number> series = new XYChart.Series<>();\r\n        for (int i = 0; i < r.size(); i++) {\r\n            double angleRad = Math.toRadians(nodes.get(i));\r\n            double x = r.get(i) * Math.cos(angleRad);\r\n            double y = r.get(i) * Math.sin(angleRad);\r\n            series.getData().add(new XYChart.Data<>(x, y));\r\n        }\r\n        chart.getData().add(series);\r\n        Scene scene = new Scene(chart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        Button OpenBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n        OpenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v)\r\n            {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), \""ModalBottomSheet\"");\r\n            }\r\n        });\r\n    }\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n        return v;\r\n    }\r\n    @Override\r\n    public void onStart()\r\n    {\r\n        super.onStart();\r\n        View view = getView();\r\n        if (view != null)\r\n        {\r\n            view.getViewTreeObserver().addOnGlobalLayoutListener(\r\n                new ViewTreeObserver.OnGlobalLayoutListener() {\r\n                    @Override\r\n                    public void onGlobalLayout()\r\n                    {\r\n                        view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\r\n                        View parent = (View) view.getParent();\r\n                        BottomSheetBehavior behavior = BottomSheetBehavior.from(parent);\r\n                        parent.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n                        parent.requestLayout();\r\n                        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                        behavior.setSkipCollapsed(true);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    xmlns:tools=\""http://schemas.android.com/tools\""\r\n    android:layout_width=\""match_parent\""\r\n    android:layout_height=\""match_parent\""\r\n    android:gravity=\""center\""\r\n    android:orientation=\""vertical\""\r\n    tools:context=\"".MainActivity\"">\r\n    <Button\r\n        android:id=\""@+id/open_bottom_sheet\""\r\n        android:layout_width=\""wrap_content\""\r\n        android:layout_height=\""wrap_content\""\r\n        android:text=\""Open Bottom Sheet\"" />\r\n    android:layout_width=\""match_parent\""\r\n    android:layout_height=\""match_parent\""\r\n    android:orientation=\""vertical\""\r\n    android:padding=\""16dp\"">\r\n    <!-- Your bottom sheet content here -->"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(\""-color1: green; -color2: orange;\"");\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    static class AnimatedRect extends Rectangle {\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, AnimatedRect.this, \""-color1\"", Color.RED\r\n        );\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, AnimatedRect.this, \""-color2\"", Color.BLUE\r\n        );\r\n        final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n            color1.addListener((obs, o, v) -> {\r\n                if (timeline.get() != null) timeline.get().stop();\r\n                timeline.set(createTimeline());\r\n                timeline.get().play();\r\n            });\r\n            color2.addListener((obs, o, v) -> {\r\n                if (timeline.get() != null) timeline.get().stop();\r\n                timeline.set(createTimeline());\r\n                timeline.get().play();\r\n            });\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) {\r\n                    if (timeline.get() != null) timeline.get().play();\r\n                } else {\r\n                    if (timeline.get() != null) timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.getValue(), Interpolator.LINEAR)\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.getValue(), Interpolator.LINEAR)\r\n                )\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 =\r\n                new CssMetaData<>(\""-color1\"", PaintConverter.getInstance(), Color.RED) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect c) {\r\n                        return !c.color1.isBound();\r\n                    }\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                        return c.color1;\r\n                    }\r\n                };\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 =\r\n                new CssMetaData<>(\""-color2\"", PaintConverter.getInstance(), Color.BLUE) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect c) {\r\n                        return !c.color2.isBound();\r\n                    }\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                        return c.color2;\r\n                    }\r\n                };\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables =\r\n                    new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@RequestParam String fileName,\r\n        @RequestParam String bucketName,\r\n        @RequestParam String projectName) {\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n    try (ReadChannel reader = blob.reader()) {\r\n        InputStream inputStream = Channels.newInputStream(reader);\r\n        String contentType = blob.getContentType();\r\n        return ResponseEntity.ok()\r\n                .contentType(MediaType.parseMediaType(contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM_VALUE))\r\n                .header(\""Content-Disposition\"", \""attachment; filename=\"" + fileName)\r\n                .body(new InputStreamResource(inputStream));\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().body(null);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n        searchPattern(T, P);\r\n    }\r\n    public static void searchPattern(int[][] T, int[][] P) {\r\n        int m = T.length;         // rows in T\r\n        int n = T[0].length;      // columns in T\r\n        int u = P.length;         // rows in P\r\n        int v = P[0].length;      // columns in P\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matches(T, P, i, j)) {\r\n                    System.out.println(\""(\"" + i + \"",\"" + j + \"")\"");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static boolean matches(int[][] T, int[][] P, int row, int col) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[row + i][col + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private RecyclerView recyclerView;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> adapter;\r\n    private List<SCard> scardList = new ArrayList<>();\r\n    private SCardListAdapter listAdapter;\r\n    public HomeFragment() {}\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n        listAdapter = new SCardListAdapter(scardList);\r\n        recyclerView.setAdapter(listAdapter);\r\n        fetchAllCategories();\r\n        return v;\r\n    }\r\n    private void fetchAllCategories() {\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(\""Category_wise\"");\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                scardList.clear();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard card = company.getValue(SCard.class);\r\n                        scardList.add(card);\r\n                    }\r\n                }\r\n                listAdapter.notifyDataSetChanged();\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n    private List<SCard> list;\r\n    public SCardListAdapter(List<SCard> list) {\r\n        this.list = list;\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(v);\r\n    }\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        SCard item = list.get(position);\r\n        holder.setName(item.getsName());\r\n    }\r\n    @Override\r\n    public int getItemCount() {\r\n        return list.size();\r\n    }\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n        public void setName(String name) {\r\n            sname.setText(name);\r\n        }\r\n    }\r\n    private String sName;\r\n    public SCard() {}\r\n    public SCard(String sName) {\r\n        this.sName = sName;\r\n    }\r\n    public String getsName() {\r\n        return sName;\r\n    }\r\n    public void setsName(String sName) {\r\n        this.sName = sName;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(\r\n            new Locale(\""en\""),\r\n            new Locale(\""hi\"")\r\n    );\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String paramLocale = request.getParameter(\""locale\"");\r\n        if (paramLocale != null) {\r\n            Locale locale = StringUtils.parseLocaleString(paramLocale);\r\n            if (ALLOWED_LOCALES.contains(locale)) {\r\n                return locale;\r\n            } else {\r\n                throw new IllegalArgumentException(\""Invalid locale: \"" + paramLocale);\r\n            }\r\n        }\r\n        return determineDefaultLocale(request);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        Class<Parent> clazz = Parent.class;\r\n        Constructor<Parent> constructor = clazz.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parent = constructor.newInstance();\r\n        System.out.println(\""Instance created: \"" + parent);\r\n    }\r\n    private Parent() {\r\n        System.out.println(\""Private constructor called\"");\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        String privateKey = \""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU\"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        Security.addProvider(new BouncyCastleProvider());\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n        KeyFactory keyFactory = KeyFactory.getInstance(\""Ed25519\"", \""BC\"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n        System.out.println(\""Private key: \"" + pkey);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        File protoDir = new File(\""src/main/proto\"");\r\n        SchemaLoader loader = new SchemaLoader();\r\n        loader.addSource(protoDir);\r\n        Schema schema = loader.loadSchema();\r\n        List<ProtoFileElement> files = schema.protoFiles();\r\n        for (ProtoFileElement file : files) {\r\n            System.out.println(\""File name: \"" + file.getName());\r\n            System.out.println(\""Package: \"" + file.getPackageName());\r\n            System.out.println(\""Messages: \"" + file.getTypes());\r\n        }\r\n    }\r\n    implementation 'com.squareup.wire:wire-schema:4.6.1"
0,1,misclassified_in_Test_6.csv.csv,"ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n    public void entry(Function<Void, Void> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            runWithTimeout(() -> I_need_a_timeout(callback, 110), 2, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(\""Timed out!\"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(\""Final result: \"" + result);\r\n    }\r\n    private void I_need_a_timeout(Function<Void, Void> callback, int loop) {\r\n        while (loop-- >= 0) {\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n    private void runWithTimeout(Runnable task, long timeout, TimeUnit unit) throws Exception {\r\n        Thread currentThread = Thread.currentThread();\r\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\r\n        ScheduledFuture<?> timeoutTask = scheduler.schedule(() -> currentThread.stop(), timeout, unit);\r\n        try {\r\n            task.run();\r\n        } finally {\r\n            timeoutTask.cancel(true);\r\n            scheduler.shutdownNow();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        MyClass obj = new MyClass();\r\n        obj.entry((v) -> {\r\n            try {\r\n                Thread.sleep(100); // Simulate long-running task\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n            return null;\r\n        });\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final Tracer tracer = GlobalOpenTelemetry.getTracer(\""etl-pipeline\"");\r\n    public void execute(DataPackage data) {\r\n        String traceIdString = padOrGenerateTraceId(data.getUniqueId());\r\n        String spanIdString = generateSpanId(data.getProcessorName());\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceIdString,\r\n                spanIdString,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context parentContext = Context.root().with(parentSpan);\r\n        Span span = tracer.spanBuilder(data.getProcessorName())\r\n                .setParent(parentContext)\r\n                .startSpan();\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                doWork(data);\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n                throw new RuntimeException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n    private String padOrGenerateTraceId(String input) {\r\n        byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\r\n        String hex = bytesToHex(bytes);\r\n        if (hex.length() > 32) return hex.substring(0, 32);\r\n        return String.format(\""%032x\"", new java.math.BigInteger(1, bytes));\r\n    }\r\n    private String generateSpanId(String input) {\r\n        byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\r\n        String hex = bytesToHex(bytes);\r\n        if (hex.length() > 16) return hex.substring(0, 16);\r\n        return String.format(\""%016x\"", new java.math.BigInteger(1, bytes));\r\n    }\r\n    private String bytesToHex(byte[] bytes) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (byte b : bytes) sb.append(String.format(\""%02x\"", b));\r\n        return sb.toString();\r\n    }\r\n    private void doWork(DataPackage data) {\r\n        // Simulated work\r\n    }\r\n    public static class DataPackage {\r\n        private final String uniqueId;\r\n        private final String processorName;\r\n        public DataPackage(String uniqueId, String processorName) {\r\n            this.uniqueId = uniqueId;\r\n            this.processorName = processorName;\r\n        }\r\n        public String getUniqueId() {\r\n            return uniqueId;\r\n        }\r\n        public String getProcessorName() {\r\n            return processorName;\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"class Node {\r\n        int key;\r\n        int value;\r\n        Node prev;\r\n        Node next;\r\n    }\r\n    private void addNode(Node node) {\r\n        node.prev = head;\r\n        node.next = head.next;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n    private void removeNode(Node node) {\r\n        Node before = node.prev;\r\n        Node after = node.next;\r\n        before.next = after;\r\n        after.prev = before;\r\n    }\r\n    private void moveToHead(Node node) {\r\n        removeNode(node);\r\n        addNode(node);\r\n    }\r\n    private Node removeTail() {\r\n        Node last = tail.prev;\r\n        removeNode(last);\r\n        return last;\r\n    }\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map;\r\n    private final Node head;\r\n    private final Node tail;\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        map = new HashMap<>();\r\n        head = new Node();\r\n        tail = new Node();\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n    public int get(int key) {\r\n        Node node = map.get(key);\r\n        if (node == null) return -1;\r\n        moveToHead(node);\r\n        return node.value;\r\n    }\r\n    public void put(int key, int value) {\r\n        Node node = map.get(key);\r\n        if (node != null) {\r\n            node.value = value;\r\n            moveToHead(node);\r\n        } else {\r\n            Node newNode = new Node();\r\n            newNode.key = key;\r\n            newNode.value = value;\r\n            map.put(key, newNode);\r\n            addNode(newNode);\r\n            if (map.size() > capacity) {\r\n                Node tail = removeTail();\r\n                map.remove(tail.key);\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private Timer timer;\r\n    private int redX = 200, redY = 200;\r\n    private int blueX = (int) (Math.random() * 425), blueY = 0;\r\n    private final int DOT_SIZE = 75;\r\n    private final int FALL_SPEED = 2;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean up, down, left, right;\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(500, 500));\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, DOT_SIZE, DOT_SIZE);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if (left) redX = Math.max(redX - MOVE_AMOUNT, 0);\r\n        if (right) redX = Math.min(redX + MOVE_AMOUNT, getWidth() - DOT_SIZE);\r\n        if (up) redY = Math.max(redY - MOVE_AMOUNT, 0);\r\n        if (down) redY = Math.min(redY + MOVE_AMOUNT, getHeight() - DOT_SIZE);\r\n        blueY += FALL_SPEED;\r\n        if (blueY > getHeight()) {\r\n            blueX = (int) (Math.random() * (getWidth() - DOT_SIZE));\r\n            blueY = 0;\r\n        }\r\n        Rectangle redRect = new Rectangle(redX, redY, DOT_SIZE, DOT_SIZE);\r\n        Rectangle blueRect = new Rectangle(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n        if (redRect.intersects(blueRect)) {\r\n            System.out.println(\""Collision!\"");\r\n        }\r\n        repaint();\r\n    }\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = true;\r\n            case KeyEvent.VK_RIGHT -> right = true;\r\n            case KeyEvent.VK_UP -> up = true;\r\n            case KeyEvent.VK_DOWN -> down = true;\r\n        }\r\n    }\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = false;\r\n            case KeyEvent.VK_RIGHT -> right = false;\r\n            case KeyEvent.VK_UP -> up = false;\r\n            case KeyEvent.VK_DOWN -> down = false;\r\n        }\r\n    }\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(\""Game\"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(new GamePanel());\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final AtomicLong COUNTER = new AtomicLong(0);\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        String raw = String.format(\""%011X\"", currentValue & 0xFFFFFFFFFFFL);\r\n        return String.format(\""%s-7%s-%s\"",\r\n                raw.substring(0, 4),\r\n                raw.substring(4, 7),\r\n                raw.substring(7)).toLowerCase();\r\n    }\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final ObjectProperty<BigDecimal> valueProperty = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        BigDecimal min = new BigDecimal(\""-20.00\"");\r\n        BigDecimal max = new BigDecimal(\""20.00\"");\r\n        BigDecimal step = new BigDecimal(\""0.25\"");\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            {\r\n                setConverter(new StringConverter<>() {\r\n                    final DecimalFormat df = new DecimalFormat(\""+#,##0.00;-#,##0.00\"", DecimalFormatSymbols.getInstance(Locale.GERMAN));\r\n                    @Override\r\n                    public String toString(BigDecimal value) {\r\n                        return value == null ? \""\"" : df.format(value);\r\n                    }\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            string = string.replace(\"",\"", \"".\"");\r\n                            return new BigDecimal(string);\r\n                        } catch (NumberFormatException e) {\r\n                            return getValue();\r\n                        }\r\n                    }\r\n                });\r\n                setValue(BigDecimal.ZERO);\r\n            }\r\n            @Override\r\n            public void decrement(int steps) {\r\n                BigDecimal newValue = getValue().subtract(step.multiply(BigDecimal.valueOf(steps)));\r\n                if (newValue.compareTo(min) >= 0) setValue(newValue);\r\n            }\r\n            @Override\r\n            public void increment(int steps) {\r\n                BigDecimal newValue = getValue().add(step.multiply(BigDecimal.valueOf(steps)));\r\n                if (newValue.compareTo(max) <= 0) setValue(newValue);\r\n            }\r\n        };\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n        TextFormatter<BigDecimal> formatter = new TextFormatter<>(\r\n                valueFactory.getConverter(),\r\n                spinner.getValue(),\r\n                change -> {\r\n                    String newText = change.getControlNewText();\r\n                    if (newText.isEmpty() || newText.equals(\""+\"") || newText.equals(\""-\"")) return change;\r\n                    try {\r\n                        BigDecimal newVal = new BigDecimal(newText.replace(\"",\"", \"".\""));\r\n                        if (newVal.scale() <= 2 && newVal.remainder(step).compareTo(BigDecimal.ZERO) == 0\r\n                                && newVal.compareTo(min) >= 0 && newVal.compareTo(max) <= 0) return change;\r\n                    } catch (NumberFormatException e) {\r\n                    }\r\n                    return null;\r\n                });\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        formatter.valueProperty().bindBidirectional(valueFactory.valueProperty());\r\n        VBox root = new VBox(10, new Label(\""Spinner:\""), spinner);\r\n        stage.setScene(new Scene(root, 300, 100));\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@RequestHeader(\""Authorization\"") String authorization) {\r\n    OAuth2Authentication authentication = (OAuth2Authentication) SecurityContextHolder.getContext().getAuthentication();\r\n    if (authentication == null || !authentication.isAuthenticated()) {\r\n        throw new AccessDeniedException(\""User is not authenticated\"");\r\n    }\r\n    String userId = authentication.getName();\r\n    UserModel userModel = userService.getUserForUID(userId);\r\n    userService.setCurrentUser(userModel);\r\n    final CustomerData customerData = customerFacade.getCurrentCustomer();\r\n    if (userFacade.isAnonymousUser()) {\r\n        throw new AccessDeniedException(\""Anonymous user is not allowed\"");\r\n    }\r\n    return testFacade.getTestList(customerData);"
0,1,misclassified_in_Test_6.csv.csv,"private final ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>();\r\n    @Override\r\n    public void start(Stage stage) {\r\n        userDataProperty.addListener((obs, oldVal, newVal) -> {\r\n            System.out.println(\""new userdata: \"" + newVal);\r\n        });\r\n        stage.setUserData(2);\r\n        userDataProperty.set(stage.getUserData());\r\n        stage.setUserData(3);\r\n        userDataProperty.set(stage.getUserData());\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final UserDetailsService userDetailsService;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final String jwtSecret;\r\n    private final int accessTokenExpiredInDays;\r\n    private final int refreshTokenExpiredInDays;\r\n    public SecurityConfig(UserDetailsService userDetailsService,\r\n                          BCryptPasswordEncoder bCryptPasswordEncoder,\r\n                          @Value(\""${jwt.secret}\"") String jwtSecret,\r\n                          @Value(\""${jwt.access.expiry}\"") int accessTokenExpiredInDays,\r\n                          @Value(\""${jwt.refresh.expiry}\"") int refreshTokenExpiredInDays) {\r\n        this.userDetailsService = userDetailsService;\r\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\r\n        this.jwtSecret = jwtSecret;\r\n        this.accessTokenExpiredInDays = accessTokenExpiredInDays;\r\n        this.refreshTokenExpiredInDays = refreshTokenExpiredInDays;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        CustomAuthenticationFilter customAuthenticationFilter =\r\n            new CustomAuthenticationFilter(authenticationManager(http), accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n        customAuthenticationFilter.setFilterProcessesUrl(\""/api/login\"");\r\n        http.csrf().disable();\r\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n        http.authorizeRequests().antMatchers(\""/error\"").permitAll();\r\n        http.authorizeRequests().antMatchers(\""/api/login/**\"", \""/api/token/refresh/**\"").permitAll();\r\n        http.authorizeRequests().anyRequest().authenticated();\r\n        http.addFilter(customAuthenticationFilter);\r\n        http.addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n                   .userDetailsService(userDetailsService)\r\n                   .passwordEncoder(bCryptPasswordEncoder)\r\n                   .and()\r\n                   .build();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final X509KeyManager originalKeyManager;\r\n    private final String alias;\r\n    public AliasSpecificKeyManager(X509KeyManager originalKeyManager, String alias) {\r\n        this.originalKeyManager = originalKeyManager;\r\n        this.alias = alias;\r\n    }\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        return alias;\r\n    }\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        return alias;\r\n    }\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getClientAliases(keyType, issuers);\r\n    }\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getServerAliases(keyType, issuers);\r\n    }\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return originalKeyManager.getCertificateChain(alias);\r\n    }\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return originalKeyManager.getPrivateKey(alias);\r\n    }\r\n        String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String clientAlias)\r\n        throws IOException, GeneralSecurityException {\r\n    KeyStore keyStore = KeyStore.getInstance(\""JKS\"");\r\n    keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n    KeyStore trustStore = KeyStore.getInstance(\""JKS\"");\r\n    trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\""SunX509\"");\r\n    trustManagerFactory.init(trustStore);\r\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\""SunX509\"");\r\n    keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n    X509KeyManager keyManager = null;\r\n    for (KeyManager km : keyManagerFactory.getKeyManagers()) {\r\n        if (km instanceof X509KeyManager) {\r\n            keyManager = (X509KeyManager) km;\r\n            break;\r\n        }\r\n    }\r\n    KeyManager[] wrappedKeyManagers = new KeyManager[] {\r\n        new AliasSpecificKeyManager(keyManager, clientAlias)\r\n    };\r\n    SSLContext sslContext = SSLContext.getInstance(\""TLS\"");\r\n    sslContext.init(wrappedKeyManagers, trustManagerFactory.getTrustManagers(), null);\r\n    return sslContext.getSocketFactory();"
0,1,misclassified_in_Test_6.csv.csv,"private final String className;\r\n    private final String methodName;\r\n    private boolean hasVisitedLine;\r\n    public MyMethodVisitor(MethodVisitor mv, String className, String methodName) {\r\n        super(Opcodes.ASM9, mv);\r\n        this.className = className;\r\n        this.methodName = methodName;\r\n    }\r\n    @Override\r\n    public void visitLineNumber(int line, Label start) {\r\n        if (!hasVisitedLine) {\r\n            hasVisitedLine = true;\r\n            mv.visitLabel(new Label());\r\n            mv.visitTypeInsn(Opcodes.NEW, \""java/lang/StringBuilder\"");\r\n            mv.visitInsn(Opcodes.DUP);\r\n            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, \""java/lang/StringBuilder\"", \""<init>\"", \""()V\"", false);\r\n            mv.visitLdcInsn(className + \"".\"" + methodName + \""_\"");\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""append\"", \""(Ljava/lang/String;)Ljava/lang/StringBuilder;\"", false);\r\n            mv.visitLdcInsn(line);\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""append\"", \""(I)Ljava/lang/StringBuilder;\"", false);\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""toString\"", \""()Ljava/lang/String;\"", false);\r\n            mv.visitMethodInsn(Opcodes.INVOKESTATIC, \""afljava/logger/Logger\"", \""writeToLogger\"", \""(Ljava/lang/String;)V\"", false);\r\n        }\r\n        super.visitLineNumber(line, start);\r\n    }\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final ReportClient client;\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n    @Override\r\n    public Boolean call() throws Exception {\r\n        CompletableFuture<Boolean> future = new CompletableFuture<>();\r\n        startCheck(client.createDocument(documentId), future);\r\n        return future.get();\r\n    }\r\n    private void startCheck(String uuid, CompletableFuture<Boolean> future) {\r\n        MAIN_EXECUTOR.submit(() -> {\r\n            GetStatusResponse status = client.getStatus(uuid);\r\n            if (Status.PENDING.equals(status.status())) {\r\n                DELAY_EXECUTOR.schedule(() -> startCheck(uuid, future), 10, TimeUnit.SECONDS);\r\n            } else {\r\n                client.getReport(uuid);\r\n                future.complete(Boolean.TRUE);\r\n            }\r\n        });\r\n    }\r\n    List<Callable<Boolean>> tasks = new ArrayList<>();\r\n    ReportClient client = new ReportClient();\r\n    for (int i = 0; i < 100; i++) {\r\n        tasks.add(new Task(client));\r\n    }\r\n    List<Future<Boolean>> results = MAIN_EXECUTOR.invokeAll(tasks);\r\n    MAIN_EXECUTOR.shutdown();\r\n    DELAY_EXECUTOR.shutdown();"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\""Tab to Spaces\"");\r\n        JTextArea textArea = new JTextArea();\r\n        textArea.getInputMap().put(KeyStroke.getKeyStroke(\""TAB\""), \""insert-spaces\"");\r\n        textArea.getActionMap().put(\""insert-spaces\"", new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                try {\r\n                    int pos = textArea.getCaretPosition();\r\n                    textArea.getDocument().insertString(pos, \""    \"", null);\r\n                } catch (BadLocationException ex) {\r\n                }\r\n            }\r\n        });\r\n        frame.add(new JScrollPane(textArea));\r\n        frame.setSize(400, 300);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"ONE, TWO\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        Elements elementUtils = processingEnv.getElementUtils();\r\n        for (Element element : roundEnv.getElementsAnnotatedWith(GenerateAnnotation.class)) {\r\n            if (element.getKind() == ElementKind.ENUM) {\r\n                String enumName = element.getSimpleName().toString();\r\n                String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n                String annotationName = enumName + \""Annotation\"";\r\n                try {\r\n                    JavaFileObject file = processingEnv.getFiler().createSourceFile(packageName + \"".\"" + annotationName);\r\n                    try (Writer writer = file.openWriter()) {\r\n                        writer.write(\""package \"" + packageName + \"";\\n\"");\r\n                        writer.write(\""import com.example.annotations.EnumAnnotation;\\n\"");\r\n                        writer.write(\""@EnumAnnotation\\n\"");\r\n                        writer.write(\""public @interface \"" + annotationName + \"" {\\n\"");\r\n                        writer.write(enumName + \"" value();\\n\"");\r\n                        writer.write(\""}\\n\"");\r\n                    }\r\n                } catch (Exception ignored) {}\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getRootElements()) {\r\n            for (AnnotationMirror mirror : element.getAnnotationMirrors()) {\r\n                if (mirror.getAnnotationType().asElement().getAnnotation(EnumAnnotation.class) != null) {\r\n                    String name = element.getSimpleName().toString();\r\n                    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, \""Found: \"" + name);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = \""\""\""\r\n        {\r\n          \""payLoad\"": [\r\n            {\r\n              \""id\"": 1,\r\n              \""userName\"": null,\r\n              \""arName\"": \""A1\"",\r\n              \""areas\"": []\r\n            },\r\n            {\r\n              \""id\"": 2,\r\n              \""userName\"": \""alpha2\"",\r\n              \""arName\"": \""A2\"",\r\n              \""areas\"": []\r\n            }\r\n          ],\r\n          \""count\"": 2,\r\n          \""respCode\"": 200\r\n        }\r\n        \""\""\"";\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response response = objectMapper.readValue(jsonString, Response.class);\r\n        for (String s : response.getTransactionsList()) {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n    @JsonProperty(\""count\"")\r\n    private int totalCount;\r\n    @JsonProperty(\""respCode\"")\r\n    private int responseCode;\r\n    @JsonProperty(\""payLoad\"")\r\n    private List<JsonNode> transactions;\r\n    public String[] getTransactionsList() {\r\n        return transactions.stream()\r\n                .map(JsonNode::toString)\r\n                .toArray(String[]::new);\r\n    }\r\n    public void setTransactions(List<JsonNode> transactions) {\r\n        this.transactions = transactions;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Test\r\n    public void testDeserialize_validDate() throws IOException {\r\n        String dateStr = \""2023-12-10T15:30:00Z\"";\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(dateStr);\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        Date date = deserializer.deserialize(parser, context);\r\n        SimpleDateFormat expectedFormat = new SimpleDateFormat(\""yyyy-MM-dd'T'HH:mm:ssX\"");\r\n        Date expectedDate = expectedFormat.parse(dateStr);\r\n        assertEquals(expectedDate, date);\r\n    }\r\n    @Test\r\n    public void testDeserialize_emptyDate() throws IOException {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""\"");\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        Date date = deserializer.deserialize(parser, context);\r\n        assertNull(date);\r\n    }\r\n    @Test\r\n    public void testDeserialize_invalidDate() throws IOException {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""invalid-date\"");\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(parser, context);\r\n        });\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        System.setProperty(\""webdriver.gecko.driver\"", \""path_to_driver/geckodriver\"");\r\n        LoggingPreferences logs = new LoggingPreferences();\r\n        logs.enable(LogType.BROWSER, Level.ALL);\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        options.setCapability(\""moz:firefoxOptions\"", options);\r\n        options.setCapability(\""goog:loggingPrefs\"", logs);\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(\""https://example.com\"");\r\n        LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : logEntries) {\r\n            System.out.println(entry.getLevel() + \"" \"" + entry.getMessage());\r\n        }\r\n        driver.quit();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Value(\""${security.jwt.secret}\"")\r\n    private String jwtSecret;\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n        http.exceptionHandling(e -> e.defaultAuthenticationEntryPointFor(\r\n                new LoginUrlAuthenticationEntryPoint(\""/login\""),\r\n                new MediaTypeRequestMatcher(MediaType.TEXT_HTML)));\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(a -> a\r\n                        .requestMatchers(\""/oauth2/authorize\"").permitAll()\r\n                        .anyRequest().authenticated())\r\n                .formLogin(f -> f.loginPage(\""/login\"").permitAll());\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        http.csrf(c -> c.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \""HmacSHA256\"");\r\n        OctetSequenceKey octetSequenceKey = new OctetSequenceKey.Builder(secretKey)\r\n                .keyID(\""my-key-id\"")\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetSequenceKey);\r\n        JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(jwkSet);\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n    @Bean\r\n    public JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \""HmacSHA256\"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKey).build();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Value(\""Adventure of War\"")\r\n    private String name;\r\n    @Value(\""A place for War\"")\r\n    private String motive;\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public String getMotive() {\r\n        return motive;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \""Company{\"" +\r\n                \""name='\"" + name + '\\'' +\r\n                \"", motive='\"" + motive + '\\'' +\r\n                '}';\r\n    }\r\n    public static void main(String[] args) {\r\n        ApplicationContext context = new AnnotationConfigApplicationContext(App.class);\r\n        Company company = context.getBean(Company.class);\r\n        System.out.println(company);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        byte[] keyBytes = Files.readAllBytes(Paths.get(\""/home/debashishd/Downloads/s_key\""));\r\n        MessageDigest sha = MessageDigest.getInstance(\""SHA-256\"");\r\n        byte[] key = sha.digest(keyBytes);\r\n        SecretKeySpec secretKey = new SecretKeySpec(key, \""AES\"");\r\n        IvParameterSpec iv = new IvParameterSpec(new byte[16]);\r\n        Cipher cipher = Cipher.getInstance(\""AES/CBC/PKCS5Padding\"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\r\n        String Test_message = \""Hello this is Roxane\"";\r\n        byte[] encrypted = cipher.doFinal(Test_message.getBytes(StandardCharsets.UTF_8));\r\n        String encryptedValue = Base64.getEncoder().encodeToString(encrypted);\r\n        System.out.println(\""Encrypted value: \"" + encryptedValue);\r\n        Cipher decryptCipher = Cipher.getInstance(\""AES/CBC/PKCS5Padding\"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\r\n        byte[] decrypted = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue));\r\n        String decryptedValue = new String(decrypted, StandardCharsets.UTF_8);\r\n        System.out.println(\""Decrypted value: \"" + decryptedValue);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n        ChangeListener<Number> listener = (obs, oldVal, newVal) -> {\r\n            int minVal = spinnerMin.getValue();\r\n            int maxVal = spinnerMax.getValue();\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, maxVal, minVal));\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(minVal, 6, maxVal));\r\n            Button minUp = lookupArrowButton(spinnerMin, \""increment-arrow-button\"");\r\n            Button maxDown = lookupArrowButton(spinnerMax, \""decrement-arrow-button\"");\r\n            if (minVal == maxVal) {\r\n                if (minUp != null) minUp.setDisable(true);\r\n                if (maxDown != null) maxDown.setDisable(true);\r\n            } else {\r\n                if (minUp != null) minUp.setDisable(false);\r\n                if (maxDown != null) maxDown.setDisable(false);\r\n            }\r\n        };\r\n        spinnerMin.valueProperty().addListener(listener);\r\n        spinnerMax.valueProperty().addListener(listener);\r\n        HBox root = new HBox(10, spinnerMin, spinnerMax);\r\n        Scene scene = new Scene(root, 300, 100);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    private Button lookupArrowButton(Spinner<?> spinner, String styleClass) {\r\n        for (Node node : ((SpinnerSkin) spinner.getSkin()).getChildren()) {\r\n            if (node.lookup(\"".\"" + styleClass) instanceof Button) {\r\n                return (Button) node.lookup(\"".\"" + styleClass);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        try {\r\n            TemplateEngine templateEngine = new TemplateEngine();\r\n            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n            resolver.setCharacterEncoding(\""UTF-8\"");\r\n            resolver.setTemplateMode(TemplateMode.XML);\r\n            resolver.setSuffix(\"".xml\"");\r\n            resolver.setPrefix(\""/\"");\r\n            templateEngine.setTemplateResolver(resolver);\r\n            Context ct = new Context();\r\n            ct.setVariable(\""TEST_AR\"", \""????? ?????? ?? ??? ????\"");\r\n            ct.setVariable(\""TEST_HE\"", \""??????\"");\r\n            ct.setVariable(\""TEST_CH\"", \""??????\"");\r\n            ct.setVariable(\""currentDate\"", LocalDateTime.now().toString());\r\n            BufferedWriter out = new BufferedWriter(\r\n                new OutputStreamWriter(new FileOutputStream(\""test_output.xml\""), StandardCharsets.UTF_8)\r\n            );\r\n            templateEngine.process(\""test_template\"", ct, out);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static RedisServer server;\r\n    private static Jedis jedis;\r\n    private static int port;\r\n    @Rule\r\n    public TestPipeline pipeline = TestPipeline.create();\r\n    @BeforeClass\r\n    public static void setUpClass() throws IOException {\r\n        server = RedisServer.newRedisServer(0);\r\n        server.start();\r\n        port = server.getBindPort();\r\n        jedis = new Jedis(\""localhost\"", port);\r\n    }\r\n    @AfterClass\r\n    public static void tearDownClass() throws IOException {\r\n        jedis.close();\r\n        server.stop();\r\n    }\r\n    @Before\r\n    public void flushDB() {\r\n        jedis.flushDB();\r\n    }\r\n    @Test\r\n    public void testBatchProcessingCodeCoverage() {\r\n        List<KV<String, String>> records = new ArrayList<>();\r\n        for (int i = 0; i < 2000; i++) {\r\n            records.add(KV.of(\""key\"" + (i / 10), \""value\"" + i));\r\n        }\r\n        CustomRedisConfigurations config = CustomRedisConfigurations\r\n                .create(\""localhost\"", port)\r\n                .withTimeout(100)\r\n                .withAuth(\""\"")\r\n                .enableSSL();\r\n        PCollection<KV<String, String>> input = pipeline.apply(Create.of(records));\r\n        input.apply(RedisWriteIO.write().withConnectionConfiguration(config));\r\n        pipeline.run().waitUntilFinish();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(\""Back-end\"", \""Front-end\"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(\""Java\"", \""PHP\"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(\""HTML\"", \""CSS\"", \""Javascript\"");\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n    }\r\n    public void DevelopmentTypeEvent() {\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setValue(null);\r\n        if (DevelopmentType.getValue().equals(\""Back-end\"")) {\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        } else if (DevelopmentType.getValue().equals(\""Front-end\"")) {\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public void onReceive(Context context, Intent intent) {\r\n        String action = intent.getAction();\r\n        if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n            UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (device != null) {\r\n                usbDevice = device;\r\n                PendingIntent permissionIntent = PendingIntent.getBroadcast(\r\n                        context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n                UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                usbManager.requestPermission(device, permissionIntent);\r\n            }\r\n        } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n            if (connection != null) {\r\n                connection.releaseInterface(usbDeviceInterface);\r\n                connection.close();\r\n            }\r\n            connection = null;\r\n            usbDevice = null;\r\n            endpointIn = null;\r\n            endpointOut = null;\r\n        } else if (ACTION_USB_PERMISSION.equals(action)) {\r\n            UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                if (device != null) {\r\n                    usbDevice = device;\r\n                    // connect to device\r\n                }\r\n            } else {\r\n                // permission denied\r\n            }\r\n        }\r\n    }\r\n    IntentFilter filter = new IntentFilter();\r\n    filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n    filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n    filter.addAction(ACTION_USB_PERMISSION);\r\n    reactContext.registerReceiver(usbReceiver, filter);"
0,1,misclassified_in_Test_6.csv.csv,"private boolean success;\r\n    private T result;\r\n    public static <T> ResponseEnvelope<T> of(T result) {\r\n        ResponseEnvelope<T> envelope = new ResponseEnvelope<>();\r\n        envelope.success = true;\r\n        envelope.result = result;\r\n        return envelope;\r\n    }\r\n    public boolean isSuccess() {\r\n        return success;\r\n    }\r\n    public T getResult() {\r\n        return result;\r\n    }\r\n    public void setSuccess(boolean success) {\r\n        this.success = success;\r\n    }\r\n    public void setResult(T result) {\r\n        this.result = result;\r\n    }\r\n    @ApiResponse(responseCode = \""201\"", description = \""Created\"", content = {\r\n        @Content(mediaType = \""application/json\"",\r\n                 schema = @Schema(implementation = UserResponseWrapper.class))\r\n    })\r\n    return ResponseEntity.status(HttpStatus.CREATED).body(userService.create(command));\r\n    public UserResponseWrapper(UserDto userDto) {\r\n        super.setSuccess(true);\r\n        super.setResult(userDto);\r\n    }\r\n    return new OpenAPI()\r\n        .components(new Components()\r\n            .addSchemas(\""ResponseEnvelope_UserDto\"",\r\n                new Schema<>()\r\n                    .$ref(\""#/components/schemas/UserResponseWrapper\"")));"
0,1,misclassified_in_Test_6.csv.csv,"Fieldable create(int x, int y);\r\n    int x;\r\n    int y;\r\n    boolean entityCreated = false;\r\n    while (!entityCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            Fieldable entity = factory.create(x, y);\r\n            field.setFieldable(x, y, entity);\r\n            entityCreated = true;\r\n        }\r\n    }\r\n    mag = new Magician(x, y, sizeX, sizeY, field, player, this);\r\n    return mag;\r\n    goblin = new Goblin(x, y, player, field, this, sizeX, sizeY);\r\n    return goblin;"
0,1,misclassified_in_Test_6.csv.csv,"uris: https://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certificate: classpath:certs/http_ca.crt\r\n    @Bean\r\n    public RestClientBuilderCustomizer customizer(ResourceLoader resourceLoader) {\r\n        return builder -> {\r\n            try {\r\n                CertificateFactory factory = CertificateFactory.getInstance(\""X.509\"");\r\n                InputStream is = resourceLoader.getResource(\""classpath:certs/http_ca.crt\"").getInputStream();\r\n                Certificate trustedCa = factory.generateCertificate(is);\r\n                KeyStore trustStore = KeyStore.getInstance(\""pkcs12\"");\r\n                trustStore.load(null, null);\r\n                trustStore.setCertificateEntry(\""ca\"", trustedCa);\r\n                SSLContext sslContext = SSLContexts.custom()\r\n                        .loadTrustMaterial(trustStore, null)\r\n                        .build();\r\n                builder.setHttpClientConfigCallback(httpClientBuilder ->\r\n                        httpClientBuilder.setSSLContext(sslContext));\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        };\r\n    }\r\n    private final MyRepository repository;\r\n    private final ElasticsearchOperations operations;\r\n    public MyService(MyRepository repository, ElasticsearchOperations operations) {\r\n        this.repository = repository;\r\n        this.operations = operations;\r\n    }\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>"
0,1,misclassified_in_Test_6.csv.csv,"private static final ExecutorService executor = Executors.newFixedThreadPool(5);\r\n    private static final ConcurrentMap<String, ReentrantLock> locks = new ConcurrentHashMap<>();\r\n    public static void main(String[] args) {\r\n        submitTask(\""hi\"");\r\n        submitTask(\""h\"");\r\n        submitTask(\""u\"");\r\n        submitTask(\""y\"");\r\n        submitTask(\""hi\"");\r\n        submitTask(\""p\"");\r\n        submitTask(\""o\"");\r\n        submitTask(\""bb\"");\r\n        executor.shutdown();\r\n    }\r\n    static void submitTask(String value) {\r\n        executor.submit(new Task(value));\r\n    }\r\n    static class Task implements Runnable {\r\n        private final String value;\r\n        Task(String value) {\r\n            this.value = value;\r\n        }\r\n        @Override\r\n        public void run() {\r\n            ReentrantLock lock = locks.computeIfAbsent(value, v -> new ReentrantLock());\r\n            boolean acquired = lock.tryLock();\r\n            if (!acquired) {\r\n                return;\r\n            }\r\n            try {\r\n                System.out.println(\""Running: \"" + value);\r\n                Thread.sleep(5000);\r\n            } catch (InterruptedException ignored) {\r\n            } finally {\r\n                lock.unlock();\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Autowired\r\n    private JwtFilter jwtFilter;\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .addFilterBefore(jwtFilter, BasicAuthenticationFilter.class)\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\""/authenticate\"").permitAll()\r\n                        .requestMatchers(\""/register\"").permitAll()\r\n                        .requestMatchers(\""/ws/**\"").permitAll()\r\n                        .anyRequest().authenticated())\r\n                .build();\r\n    }\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n    @Bean\r\n    public AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        String xml = \""<?xml version=\\\""1.0\\\"" encoding=\\\""utf-8\\\""?>\""\r\n                   + \""<retMDFe xmlns=\\\""http://www.portalfiscal.inf.br/mdfe\\\"" versao=\\\""3.00\\\"">\""\r\n                   + \""<tpAmb>1</tpAmb>\""\r\n                   + \""<cUF>43</cUF>\""\r\n                   + \""<verAplic>RS20240710093839</verAplic>\""\r\n                   + \""<cStat>244</cStat>\""\r\n                   + \""<xMotivo>Rejeição: Falha na descompactação da área de dados</xMotivo>\""\r\n                   + \""</retMDFe>\"";\r\n        JAXBContext context = JAXBContext.newInstance(RetMDFe.class);\r\n        Unmarshaller unmarshaller = context.createUnmarshaller();\r\n        RetMDFe result = (RetMDFe) unmarshaller.unmarshal(new StringReader(xml));\r\n        System.out.println(\""Status: \"" + result.getCStat());\r\n        System.out.println(\""Motivo: \"" + result.getXMotivo());\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        String htmlString = \""<!DOCTYPE html>\\n\"" +\r\n                \""<html lang=\\\""ru\\\"">\\n\"" +\r\n                \""<head>\\n\"" +\r\n                \""    <meta charset=\\\""UTF-8\\\""/>\\n\"" +\r\n                \""    <meta http-equiv=\\\""X-UA-Compatible\\\"" content=\\\""IE=edge\\\""/>\\n\"" +\r\n                \""    <meta name=\\\""viewport\\\"" content=\\\""width=device-width, initial-scale=1.0\\\""/>\\n\"" +\r\n                \""    <style>\\n\"" +\r\n                \""        body { font-family: 'DejaVu Sans'; }\\n\"" +\r\n                \""    </style>\\n\"" +\r\n                \""</head>\\n\"" +\r\n                \""<body>\\n\"" +\r\n                \""    <h3>?????????????</h3>\\n\"" +\r\n                \""</body>\\n\"" +\r\n                \""</html>\"";\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + \""/A.pdf\"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        ITextFontResolver fontResolver = renderer.getFontResolver();\r\n        fontResolver.addFont(\""src/main/resources/fonts/DejaVuSans.ttf\"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        outputStream.close();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"Object coordinateObj = params.get(\""coordinate\"");\r\n    if (coordinateObj instanceof List) {\r\n        List<?> outerList = (List<?>) coordinateObj;\r\n        int[][] result = new int[outerList.size()][];\r\n        for (int i = 0; i < outerList.size(); i++) {\r\n            Object inner = outerList.get(i);\r\n            if (inner instanceof List) {\r\n                List<?> innerList = (List<?>) inner;\r\n                int[] innerArray = new int[innerList.size()];\r\n                for (int j = 0; j < innerList.size(); j++) {\r\n                    Object val = innerList.get(j);\r\n                    if (val instanceof Number) {\r\n                        innerArray[j] = ((Number) val).intValue();\r\n                    } else if (val instanceof String) {\r\n                        innerArray[j] = Integer.parseInt((String) val);\r\n                    }\r\n                }\r\n                result[i] = innerArray;\r\n            }\r\n        }\r\n        for (int[] row : result) {\r\n            for (int val : row) {\r\n                System.out.print(val + \"" \"");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    return \""success\"";"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void beforeAll(ExtensionContext context) throws Exception {\r\n        System.out.println(\""Server started\"");\r\n    }\r\n    @Override\r\n    public void afterAll(ExtensionContext context) throws Exception {\r\n        System.out.println(\""Server stopped\"");\r\n    }\r\n    @Test\r\n    void testSomething() {\r\n        System.out.println(\""FirstTest running\"");\r\n    }\r\n    @Test\r\n    void testSomethingElse() {\r\n        System.out.println(\""SecondTest running\"");\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@PatchMapping(\""compute/{uuid}/results\"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n        .flatMap(analysis -> {\r\n            analysis.setResults(results);\r\n            return computeSCARepository.save(analysis);\r\n        })\r\n        .then();\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(\""com.company.project.xsd.some_portal.v4_0\"");\r\n        marshaller.setMtomEnabled(false);\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    String base64Data = Base64.getEncoder().encodeToString(documentData);\r\n    DataHandler handler = new DataHandler(new ByteArrayDataSource(base64Data.getBytes(StandardCharsets.UTF_8), \""application/octet-stream\""));\r\n    binaryData.setBlob(handler);\r\n    binaryData.setExtension(\""pdf\"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        this.template = getWebServiceTemplate();\r\n    }\r\n\r\n    public void sendDocuments(MyRequest request) {\r\n        template.marshalSendAndReceive(request);\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        list.clear();\r\n        String startStr = txtfirst.getText().toString();\r\n        String endStr = txtsecond.getText().toString();\r\n\r\n        long start = Long.parseLong(startStr);\r\n        long end = Long.parseLong(endStr);\r\n\r\n        for (long i = start; i <= end; i++) {\r\n            String serial = String.format(\""%011d\"", i);\r\n            list.add(serial);\r\n        }\r\n\r\n        arrayAdapter.notifyDataSetChanged();\r\n    }\r\n});"
0,1,misclassified_in_Test_6.csv.csv,"@Bean\r\n@Order(10)\r\npublic SecurityFilterChain authenticationChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .securityMatcher(\""/**\"")\r\n        .authorizeHttpRequests(authorize -> authorize\r\n            .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer(oauth2 -> oauth2.jwt());\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain resourceFilterChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http\r\n        .securityMatcher(\""/**\"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\npublic Void visitLink(LinkTree linkTree, Void unused) {\r\n    DocTreePath path = getCurrentPath();\r\n    DocTrees docTrees = DocTrees.instance(processingEnv);\r\n    TreePath treePath = docTrees.getPath(path.getDocComment());\r\n    CompilationUnitTree compilationUnit = treePath.getCompilationUnit();\r\n    Trees trees = Trees.instance(processingEnv);\r\n    JavacTask javacTask = (JavacTask) processingEnv.getTask();\r\n    Elements elementUtils = processingEnv.getElementUtils();\r\n\r\n    String signature = linkTree.getReference().getSignature();\r\n    Symbol currentSymbol = (Symbol) trees.getElement(treePath);\r\n\r\n    Scope scope = currentSymbol.members();\r\n\r\n    Symbol targetSymbol = null;\r\n    for (Symbol sym : scope.getSymbolsByName(Name.fromString(signature))) {\r\n        targetSymbol = sym;\r\n        break;\r\n    }\r\n\r\n    if (targetSymbol == null) {\r\n        for (ImportTree importTree : compilationUnit.getImports()) {\r\n            String importStr = importTree.getQualifiedIdentifier().toString();\r\n            if (importStr.endsWith(\"".\"" + signature)) {\r\n                targetSymbol = elementUtils.getTypeElement(importStr);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (targetSymbol != null) {\r\n        System.out.println(targetSymbol.toString());\r\n    }\r\n\r\n    return null;\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"interface Show1 {\r\n    default void display() {\r\n        System.out.println(\""hello\"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            \""Alice\"", \""Adam\"", \""Alfred\"", \""Amon\"", \""Alfredo\"", \""Al\"", \""Albert\""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            \""Bob\"", \""Conner\"", \""Robin\"", \""Fred\"", \""Freddy\"", \""Edward\"", \""Fredward\"", \""Mariam\""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding = null;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.textProperty().addListener((obs, oldText, newText) -> {\r\n            if (nameBinding != null) {\r\n                nameBinding.dispose();\r\n                nameBinding = null;\r\n            }\r\n\r\n            if (newText.length() == 2) {\r\n                ObservableList<String> list = newText.toUpperCase().startsWith(\""A\"") ? names1 : names2;\r\n                nameBinding = TextFields.bindAutoCompletion(textField, list);\r\n                nameBinding.setOnAutoCompleted(event -> System.out.println(\""You selected \"" + event.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Autocomplete Example\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.ss.usermodel.IndexedColors;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class ExcelExportExample {\r\n    public static void main(String[] args) {\r\n        try (\r\n            OutputStream os = new FileOutputStream(\""test.xls\"");\r\n            Workbook wb = new HSSFWorkbook()\r\n        ) {\r\n            Sheet sh = wb.createSheet(\""test\"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import java.util.*;\r\n\r\npublic class LimitedSumCombination {\r\n    public static List<Integer> findCombination(int[] nums, int target, int limit) {\r\n        List<Integer> result = new ArrayList<>();\r\n        backtrack(nums, target, limit, 0, new ArrayList<>(), result);\r\n        return result;\r\n    }\r\n\r\n    private static boolean backtrack(int[] nums, int target, int limit, int start, List<Integer> current, List<Integer> result) {\r\n        if (current.size() > limit) return false;\r\n        if (current.size() == limit && target == 0) {\r\n            result.addAll(current);\r\n            return true;\r\n        }\r\n        for (int i = start; i < nums.length; i++) {\r\n            current.add(nums[i]);\r\n            if (backtrack(nums, target - nums[i], limit, i + 1, current, result)) {\r\n                return true;\r\n            }\r\n            current.remove(current.size() - 1);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] nums = {2, 7, 11, 15};\r\n        int target = 20;\r\n        int limit = 3;\r\n        List<Integer> combination = findCombination(nums, target, limit);\r\n        System.out.println(combination);\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import org.web3j.crypto.Hash;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\n\r\npublic boolean verifySignature(String publicWalletId, String originalNonce, String signedMessage) {\r\n    String message = \""\\u0019Ethereum Signed Message:\\n\"" + originalNonce.length() + originalNonce;\r\n    byte[] messageHash = Hash.sha3(message.getBytes());\r\n\r\n    byte[] signatureBytes = Numeric.hexStringToByteArray(signedMessage);\r\n    byte v = signatureBytes[64];\r\n    if (v < 27) {\r\n        v += 27;\r\n    }\r\n\r\n    Sign.SignatureData signatureData = new Sign.SignatureData(\r\n        v,\r\n        Arrays.copyOfRange(signatureBytes, 0, 32),\r\n        Arrays.copyOfRange(signatureBytes, 32, 64)\r\n    );\r\n\r\n    BigInteger publicKeyRecovered = Sign.signedMessageToKey(messageHash, signatureData);\r\n    String recoveredAddress = \""0x\"" + Keys.getAddress(publicKeyRecovered);\r\n\r\n    return publicWalletId.equalsIgnoreCase(recoveredAddress);\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"// DTO\r\npublic class TestStatus {\r\n    private int testCaseNumber;\r\n    private String status;\r\n    private String message;\r\n\r\n    // getters and setters\r\n}\r\n\r\n// Service\r\n@Service\r\npublic class TestRunnerService {\r\n\r\n    private final List<TestStatus> testStatusList = new CopyOnWriteArrayList<>();\r\n\r\n    public List<TestStatus> getTestStatusList() {\r\n        return testStatusList;\r\n    }\r\n\r\n    public void runAllTests() {\r\n        testStatusList.clear();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            for (int i = 1; i <= 30; i++) {\r\n                TestStatus status = new TestStatus();\r\n                status.setTestCaseNumber(i);\r\n                status.setStatus(\""RUNNING\"");\r\n                testStatusList.add(status);\r\n\r\n                try {\r\n                    Thread.sleep(5000);\r\n                    status.setStatus(\""SUCCESS\"");\r\n                    status.setMessage(\""Test case \"" + i + \"" completed\"");\r\n                } catch (Exception e) {\r\n                    status.setStatus(\""FAILED\"");\r\n                    status.setMessage(\""Test case \"" + i + \"" failed: \"" + e.getMessage());\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Controller\r\n@RestController\r\n@RequestMapping(\""/tests\"")\r\npublic class TestRunnerController {\r\n\r\n    private final TestRunnerService testRunnerService;\r\n\r\n    public TestRunnerController(TestRunnerService testRunnerService) {\r\n        this.testRunnerService = testRunnerService;\r\n    }\r\n\r\n    @PostMapping(\""/start\"")\r\n    public ResponseEntity<String> startTests() {\r\n        testRunnerService.runAllTests();\r\n        return ResponseEntity.ok(\""Test started\"");\r\n    }\r\n\r\n    @GetMapping(\""/status\"")\r\n    public List<TestStatus> getTestStatus() {\r\n        return testRunnerService.getTestStatusList();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    String command;\r\n    T payload;\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(\""AddItem\"", payload);\r\n    }\r\n    protected abstract BaseEventHandler<E, C, P> getHandler();\r\n    public abstract void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    public abstract void onCommit(String uuid, E event);\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        ModuleFinder finder = ModuleFinder.ofSystem();\r\n        Set<ModuleReference> modules = finder.findAll();\r\n        for (ModuleReference module : modules) {\r\n            ModuleDescriptor descriptor = module.descriptor();\r\n            if (descriptor.isAutomatic()) continue;\r\n            String name = descriptor.name();\r\n            boolean isCore = name.startsWith(\""java.\"");\r\n            System.out.println(name + \"" -> \"" + (isCore ? \""core\"" : \""non-core\""));\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        String input = \""24ENE1982\"";\r\n        Map<String, String> monthMap = new HashMap<>();\r\n        monthMap.put(\""ENE\"", \""JAN\"");\r\n        monthMap.put(\""FEB\"", \""FEB\"");\r\n        monthMap.put(\""MAR\"", \""MAR\"");\r\n        monthMap.put(\""ABR\"", \""APR\"");\r\n        monthMap.put(\""MAY\"", \""MAY\"");\r\n        monthMap.put(\""JUN\"", \""JUN\"");\r\n        monthMap.put(\""JUL\"", \""JUL\"");\r\n        monthMap.put(\""AGO\"", \""AUG\"");\r\n        monthMap.put(\""SEP\"", \""SEP\"");\r\n        monthMap.put(\""OCT\"", \""OCT\"");\r\n        monthMap.put(\""NOV\"", \""NOV\"");\r\n        monthMap.put(\""DIC\"", \""DEC\"");\r\n        for (Map.Entry<String, String> entry : monthMap.entrySet()) {\r\n            if (input.contains(entry.getKey())) {\r\n                input = input.replace(entry.getKey(), entry.getValue());\r\n                break;\r\n            }\r\n        }\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(\""ddMMMyyyy\"")\r\n                .toFormatter(Locale.ENGLISH);\r\n        LocalDate date = LocalDate.parse(input, formatter);\r\n        System.out.println(\""Hello world! \"" + date);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setStyle(\""-fx-cursor: none;\"");\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setTitle(\""Cursor Example\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        String formula = \""A2+B2\"";\r\n        String originalCell = \""C2\"";\r\n        String destinationCell = \""D10\"";\r\n        XSSFWorkbook workbook = new XSSFWorkbook();\r\n        FormulaRenderingWorkbook renderingWorkbook = FormulaRenderingWorkbook.create(workbook);\r\n        Ptg[] ptgs = FormulaParser.parse(formula, renderingWorkbook, FormulaType.CELL, 0);\r\n        CellReference from = new CellReference(originalCell);\r\n        CellReference to = new CellReference(destinationCell);\r\n        int rowShift = to.getRow() - from.getRow();\r\n        int colShift = to.getCol() - from.getCol();\r\n        for (Ptg ptg : ptgs) {\r\n            if (ptg instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) ptg;\r\n                if (!ref.isRowRelative()) rowShift = 0;\r\n                if (!ref.isColRelative()) colShift = 0;\r\n                ref.setRow(ref.getRow() + rowShift);\r\n                ref.setColumn(ref.getColumn() + colShift);\r\n            }\r\n        }\r\n        String newFormula = FormulaRenderer.toFormulaString(renderingWorkbook, ptgs);\r\n        System.out.println(newFormula);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0);\r\n            file.writeBytes(\""123456789\"");\r\n        }\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0);\r\n            file.writeBytes(\""hello6789\"");\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private boolean failNext = true;\r\n    @Bean(name = \""myDataSource\"")\r\n    public DataSource mockDataSource() throws SQLException {\r\n        DataSource realDataSource = DataSourceBuilder.create()\r\n            .url(\""jdbc:h2:mem:testdb\"")\r\n            .username(\""sa\"")\r\n            .password(\""\"")\r\n            .driverClassName(\""org.h2.Driver\"")\r\n            .build();\r\n        DataSource spyDataSource = spy(realDataSource);\r\n        doAnswer(invocation -> {\r\n            if (failNext) {\r\n                failNext = false;\r\n                throw new SQLException(\""Simulated connection failure\"");\r\n            }\r\n            return realDataSource.getConnection();\r\n        }).when(spyDataSource).getConnection();\r\n        return spyDataSource;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Mock\r\n    private PriceRepository priceRepository;\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n    @Test\r\n    void testUpdatePrice() {\r\n        UUID priceUuid = UUID.randomUUID();\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(200.0);\r\n        Price existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(existingPrice)).thenAnswer(i -> i.getArgument(0));\r\n        PriceDTO result = priceService.update(priceUuid, request);\r\n        assertEquals(200.0, result.getPriceAmount());\r\n        verify(priceRepository).findByUuid(priceUuid);\r\n        verify(priceRepository).saveAndFlush(existingPrice);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"basePackages = \""com.repository.mongo\"",\r\n    mongoTemplateRef = \""mongoTemplate\""\r\n    basePackages = \""com.repository.redis\"",\r\n    redisTemplateRef = \""redisTemplate\""\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n    @Bean\r\n    public MongoClient mongoClient() {\r\n        return MongoClients.create(\""mongodb://localhost:27017\"");\r\n    }\r\n    @Bean(name = \""mongoTemplate\"")\r\n    public MongoTemplate mongoTemplate() {\r\n        return new MongoTemplate(mongoClient(), \""mydb\"");\r\n    }\r\n    @Bean\r\n    public RedisConnectionFactory redisConnectionFactory() {\r\n        return new LettuceConnectionFactory(\""localhost\"", 6379);\r\n    }\r\n    @Bean(name = \""redisTemplate\"")\r\n    public RedisTemplate<String, Store> redisTemplate() {\r\n        RedisTemplate<String, Store> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(redisConnectionFactory());\r\n        return template;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"AssetManager assetManager = requireContext().getAssets();\r\n    File targetDir = new File(requireContext().getExternalFilesDir(null), \""databases\"");\r\n    if (!targetDir.exists()) targetDir.mkdirs();\r\n    try {\r\n        String[] files = assetManager.list(\""database/test\"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                File outFile = new File(targetDir, filename);\r\n                if (outFile.exists()) continue;\r\n                try (InputStream in = assetManager.open(\""database/test/\"" + filename);\r\n                     OutputStream out = new FileOutputStream(outFile)) {\r\n                    byte[] buffer = new byte[1024];\r\n                    int read;\r\n                    while ((read = in.read(buffer)) != -1) {\r\n                        out.write(buffer, 0, read);\r\n                    }\r\n                    out.flush();\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        for (int i = 0; i < 10000; i++) {\r\n            measure();\r\n        }\r\n    }\r\n    private static void measure() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(\""a\"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(\""b\"");\r\n        long t3 = System.nanoTime();\r\n        long firstAdd = t2 - t1;\r\n        long secondAdd = t3 - t2;\r\n        System.out.println(firstAdd + \"",\"" + secondAdd);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"super.paintComponent(g);\r\n    if (ApplicationImages.getImage() != null) {\r\n        Graphics2D g2d = (Graphics2D) g.create();\r\n        int panelWidth = getWidth();\r\n        int panelHeight = getHeight();\r\n        Image scaledImage = ApplicationImages.getImage().getScaledInstance(\r\n                panelWidth, panelHeight, Image.SCALE_SMOOTH);\r\n        g2d.drawImage(scaledImage, 0, 0, panelWidth, panelHeight, this);\r\n        g2d.dispose();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        long start = System.currentTimeMillis();\r\n        int numberOfTasks = 10;\r\n        List<Future<String>> futures;\r\n        try (ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(Task::new)\r\n                    .map(executor::submit)\r\n                    .toList();\r\n        }\r\n        for (Future<String> future : futures) {\r\n            future.get();\r\n        }\r\n        long end = System.currentTimeMillis();\r\n        System.out.println(\""Total time: \"" + (end - start) + \"" ms\"");\r\n    }\r\n    record Task(int id) implements Callable<String> {\r\n        @Override\r\n        public String call() {\r\n            System.out.println(\""Task \"" + id + \"" started\"");\r\n            long start = System.currentTimeMillis();\r\n            String result = \""\"";\r\n            try (Connection connection = DriverManager.getConnection(\r\n                    \""jdbc:mysql://localhost/sakila?user=sakila&password=sakila\"")) {\r\n                var statement = connection.createStatement();\r\n                var resultSet = statement.executeQuery(\""SELECT hello_world() AS output\"");\r\n                while (resultSet.next()) {\r\n                    result = resultSet.getString(\""output\"");\r\n                }\r\n                statement.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            long end = System.currentTimeMillis();\r\n            System.out.println(\""Task \"" + id + \"" completed in \"" + (end - start) + \"" ms\"");\r\n            return result;\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"R make();\r\n    T value;\r\n    AlphaTaskResult(String value) {\r\n        this.value = value;\r\n    }\r\n    BetaTaskResult(Integer value) {\r\n        this.value = value;\r\n    }\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(\""alphaTask\"");\r\n    }\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n    public static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(V::make)\r\n                .collect(Collectors.toList());\r\n    }\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"List<String> out = new ArrayList<>();\r\n    String[] comm = {\r\n        \""cmd.exe\"",\r\n        \""/S\"",\r\n        \""/K\"",\r\n        \""\\\""\"" + command + \"" & exit\\\""\""\r\n    };\r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        p.waitFor();\r\n        p.destroy();\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n    return out;"
0,1,misclassified_in_Test_6.csv.csv,"response.setHeader(\""content-type\"", \""application/json\"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(\""[\"");\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write(\"",\"");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    respWriter.write(\""]\"");\r\n    respWriter.flush();\r\n    log(e);"
0,1,misclassified_in_Test_6.csv.csv,"public static void parseTsv(String filePath) throws Exception {\r\n        CSVReader reader = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\\t').build())\r\n                .build();\r\n        String[] line;\r\n        while ((line = reader.readNext()) != null) {\r\n            System.out.println(line[0] + \"" \"" + line[1]);\r\n        }\r\n        reader.close();\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(\""/path-to-tsv-file.tsv\"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"void getClient();\r\n    public void getClient() {\r\n        System.out.println(\""UtilOne client\"");\r\n    }\r\n    public void getClient() {\r\n        System.out.println(\""UtilTwo client\"");\r\n    }\r\n    @Autowired\r\n    private ApplicationContext context;\r\n    private String activeUtil = \""utilOne\"";\r\n    public void setActiveUtil(String name) {\r\n        this.activeUtil = name;\r\n    }\r\n    public Util getActiveUtil() {\r\n        return context.getBean(activeUtil, Util.class);\r\n    }\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n    public void useClient() {\r\n        utilFactory.getActiveUtil().getClient();\r\n    }\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n    @PostMapping(\""/set-util/{name}\"")\r\n    public void setUtil(@PathVariable String name) {\r\n        utilFactory.setActiveUtil(name);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int quarterSize = n / 2;\r\n        int[][][] quarters = new int[][][] {\r\n            getQuarter(mat, 0, 0, quarterSize),                         // Q1\r\n            getQuarter(mat, 0, quarterSize, quarterSize),              // Q2\r\n            getQuarter(mat, quarterSize, quarterSize, quarterSize),   // Q3\r\n            getQuarter(mat, quarterSize, 0, quarterSize)              // Q4\r\n        };\r\n        for (int[][] quarter : quarters) {\r\n            if (num >= quarter[0][0] && num <= quarter[quarter.length - 1][quarter[0].length - 1]) {\r\n                if (binarySearchQuarter(quarter, num)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private static int[][] getQuarter(int[][] mat, int rowStart, int colStart, int size) {\r\n        int[][] quarter = new int[size][size];\r\n        for (int i = 0; i < size; i++) {\r\n            System.arraycopy(mat[rowStart + i], colStart, quarter[i], 0, size);\r\n        }\r\n        return quarter;\r\n    }\r\n    private static boolean binarySearchQuarter(int[][] quarter, int num) {\r\n        int rows = quarter.length;\r\n        int cols = quarter[0].length;\r\n        int low = 0, high = rows * cols - 1;\r\n        while (low <= high) {\r\n            int mid = (low + high) / 2;\r\n            int r = mid / cols;\r\n            int c = mid % cols;\r\n            int value = quarter[r][c];\r\n            if (value == num) return true;\r\n            if (value < num) low = mid + 1;\r\n            else high = mid - 1;\r\n        }\r\n        return false;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);\r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            XWPFParagraph pageBreak = first.createParagraph();\r\n            XWPFRun run = pageBreak.createRun();\r\n            run.addBreak(org.apache.poi.xwpf.usermodel.BreakType.PAGE);\r\n            XmlCursor cursor = first.getDocument().getBody().newCursor();\r\n            cursor.toEndToken();\r\n            for (XWPFParagraph p : src1Document.getParagraphs()) {\r\n                XWPFParagraph newParagraph = first.createParagraph();\r\n                newParagraph.getCTP().set(p.getCTP().copy());\r\n            }\r\n        }\r\n    }\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws Exception {\r\n        String maskedPasswordStr = \""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123\"";\r\n        char[] maskedPasswordChars = maskedPasswordStr.toCharArray();\r\n        Password password = ModularCrypt.decode(maskedPasswordChars);\r\n        PasswordCredential credential = new PasswordCredential(password);\r\n        ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(credential));\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n        CredentialStore credentialStore = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        String configPath = System.getProperty(\""jboss.server.data.dir\"");\r\n        String path = configPath + File.separator + \""credentials\"" + File.separator + \""csstore.jceks\"";\r\n        Map<String, String> configuration = new HashMap<>();\r\n        configuration.put(\""keyStoreType\"", \""JCEKS\"");\r\n        configuration.put(\""location\"", path);\r\n        configuration.put(\""modifiable\"", \""false\"");\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final String JOB_NAME = \""abc\"";\r\n    private static final String JOB_METHOD_NAME = \""xyz\"";\r\n    private final MyJob myJob;\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        this.myJob = myJob;\r\n    }\r\n    @Override\r\n    public void configure() {\r\n        from(\""direct:\"" + JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n        fromF(\""master:some_name_1/some_name_2:scheduler:%s?delay=%s\"", JOB_NAME, 1234)\r\n            .routeId(\""JobTimer\"")\r\n            .to(\""direct:\"" + JOB_NAME)\r\n            .end();\r\n    }\r\n    public void xyz() {\r\n        System.out.println(\""Job executed\"");\r\n    }\r\n    private static final String JOB_NAME = \""abc\"";\r\n    private final CamelContext camelContext;\r\n    private final ProducerTemplate producerTemplate;\r\n    @Inject\r\n    public MyController(CamelContext camelContext) {\r\n        this.camelContext = camelContext;\r\n        this.producerTemplate = camelContext.createProducerTemplate();\r\n    }\r\n    @PostMapping(\""/my_endpoint\"")\r\n    public String run() {\r\n        producerTemplate.sendBody(\""direct:\"" + JOB_NAME, null);\r\n        return \""ok\"";\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void onClick(View v) {\r\n        LayoutInflater inflater = LayoutInflater.from(getActivity());\r\n        View newProductView = inflater.inflate(R.layout.product_layout, null);\r\n        ImageButton removeBtn = new ImageButton(getActivity());\r\n        removeBtn.setImageResource(android.R.drawable.ic_delete);\r\n        removeBtn.setBackgroundColor(Color.TRANSPARENT);\r\n        LinearLayout container = new LinearLayout(getActivity());\r\n        container.setOrientation(LinearLayout.HORIZONTAL);\r\n        container.addView(newProductView);\r\n        container.addView(removeBtn);\r\n        LinearLayout parentLayout = getView().findViewById(R.id.parent_linear_layout);\r\n        parentLayout.addView(container);\r\n        removeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                parentLayout.removeView(container);\r\n            }\r\n        });\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static PrivateKey loadPrivateKey(String filename, String passphrase) throws Exception {\r\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n        Reader fileReader = new FileReader(filename);\r\n        PEMParser pemParser = new PEMParser(fileReader);\r\n        Object object = pemParser.readObject();\r\n        JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\""BC\"");\r\n        PrivateKey privateKey;\r\n        if (object instanceof PEMEncryptedKeyPair) {\r\n            PEMEncryptedKeyPair encryptedKeyPair = (PEMEncryptedKeyPair) object;\r\n            JcePEMDecryptorProviderBuilder builder = new JcePEMDecryptorProviderBuilder();\r\n            InputDecryptorProvider decProv = builder.build(passphrase.toCharArray());\r\n            PEMKeyPair keyPair = encryptedKeyPair.decryptKeyPair(decProv);\r\n            privateKey = converter.getKeyPair(keyPair).getPrivate();\r\n        } else if (object instanceof PEMKeyPair) {\r\n            PEMKeyPair keyPair = (PEMKeyPair) object;\r\n            privateKey = converter.getKeyPair(keyPair).getPrivate();\r\n        } else {\r\n            throw new IllegalArgumentException(\""Invalid key format\"");\r\n        }\r\n        pemParser.close();\r\n        return privateKey;\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        PrivateKey key = loadPrivateKey(\""path/to/encrypted_private_key.pem\"", \""your_passphrase\"");\r\n        System.out.println(\""Private Key Loaded: \"" + key.getAlgorithm());\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(\""Cannot connect to Backend Server\"");\r\n        }\r\n    }\r\n    private void connectToBackendServer() throws Exception {\r\n        String backendHost = getServletConfig().getInitParameter(\""backendHost\"");\r\n        if (backendHost == null || backendHost.isEmpty()) {\r\n            throw new Exception(\""Missing backendHost\"");\r\n        }\r\n        // simulate connection failure\r\n        throw new Exception(\""Connection failed\"");\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,static int i = 0;\r\n    public static void f(){\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            new Thread(Solution::f).start();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        f();\r\n    }
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        TextArea textArea = new TextArea(\""?? ?? ?? ?? ?? ??\"");\r\n        textArea.setStyle(\""-fx-font-family: 'Segoe UI Emoji', 'Noto Color Emoji', 'Apple Color Emoji', 'sans-serif'; -fx-font-size: 20px;\"");\r\n        textArea.setWrapText(true);\r\n        StackPane root = new StackPane(textArea);\r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.setTitle(\""Emoji Support\"");\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        System.setProperty(\""prism.text\"", \""t2k\"");\r\n        launch();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = \""PyqAllItems\"";\r\n    private static final String SELECTED_ITEMS_KEY = \""PyqSelectedItems\"";\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundDark);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundLight);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundLight);\r\n        }\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        PyqModel model = pyqModelList.get(position);\r\n        holder.textView.setText(model.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(model.getPyqTopics());\r\n        if (selectedPositions.contains(position)) {\r\n            holder.cardView.setCardBackgroundColor(selectedBackgroundColor);\r\n        } else {\r\n            holder.cardView.setCardBackgroundColor(defaultBackgroundColor);\r\n        }\r\n        holder.cardView.setOnClickListener(v -> {\r\n            selectedPositions.add(position);\r\n            saveSelection();\r\n            notifyItemChanged(position);\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(\""pdfName\"", model.getPdfName());\r\n            i.putExtra(\""pdfUrl\"", model.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n    private void saveSelection() {\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = prefs.edit();\r\n        Set<String> selectedItems = new HashSet<>();\r\n        for (int pos : selectedPositions) {\r\n            selectedItems.add(String.valueOf(pos));\r\n        }\r\n        editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n        editor.apply();\r\n    }\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter();\r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR,\r\n                 CSVWriter.NO_QUOTE_CHARACTER,\r\n                 CSVWriter.NO_ESCAPE_CHARACTER,\r\n                 CSVWriter.DEFAULT_LINE_END)) {\r\n        List<String[]> rows = new ArrayList<>();\r\n        for (DmnTestCaseResult res : results) {\r\n            Map<String, Object> input = res.getTestInput();\r\n            Map<String, Object> expected = res.getExpectedOutput();\r\n            List<Map<String, Object>> outputs = res.getTestOutput();\r\n            String error = res.getErrorMessage();\r\n            for (Map<String, Object> output : outputs) {\r\n                List<String> row = new ArrayList<>();\r\n                row.add(input.toString());\r\n                row.add(expected.toString());\r\n                row.add(output.toString());\r\n                row.add(error);\r\n                rows.add(row.toArray(new String[0]));\r\n            }\r\n        }\r\n        writer.writeAll(rows);\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"int n = nodes.size();\r\n    Map<String, Integer> indexMap = new HashMap<>();\r\n    for (int i = 0; i < n; i++) {\r\n        indexMap.put(nodes.get(i), i);\r\n    }\r\n    level = new int[n];\r\n    Arrays.fill(level, -1);\r\n    level[indexMap.get(source)] = 0;\r\n    Queue<String> queue = new LinkedList<>();\r\n    queue.offer(source);\r\n    while (!queue.isEmpty()) {\r\n        String u = queue.poll();\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            if (capacity > 0 && level[indexMap.get(v)] == -1) {\r\n                level[indexMap.get(v)] = level[indexMap.get(u)] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n    if (u.equals(sink)) {\r\n        return flow;\r\n    }\r\n    for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n        String v = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        if (capacity > 0 && level[indexMap.get(u)] < level[indexMap.get(v)]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sink, indexMap);\r\n            if (sent > 0) {\r\n                network.get(u).put(v, capacity - sent);\r\n                network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n    for (T t : graph.keySet()) {\r\n        addEdge(\""src\"", \""A\"" + t.toString(), 1);\r\n        addEdge(\""B\"" + t, \""sink\"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(\""A\"" + t, u, 1);\r\n        }\r\n    }\r\n    Map<String, Integer> indexMap = new HashMap<>();\r\n    for (int i = 0; i < nodes.size(); i++) {\r\n        indexMap.put(nodes.get(i), i);\r\n    }\r\n    int maxFlow = 0;\r\n    while (true) {\r\n        bfs(\""src\"");\r\n        if (level[indexMap.get(\""sink\"")] == -1) {\r\n            break;\r\n        }\r\n        int flow;\r\n        while ((flow = dfs(\""src\"", Integer.MAX_VALUE, \""sink\"", indexMap)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n    return graph.size() - maxFlow;"
0,1,misclassified_in_Test_6.csv.csv,"private static Ringtone ringtone;\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(1000, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        } else {\r\n            vibrator.vibrate(1000);\r\n        }\r\n        String event = intent.getStringExtra(\""title\"");\r\n        String comment = intent.getStringExtra(\""comment\"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.putExtra(\""stop_sound\"", true);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(\r\n                context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n        String text = \""Reminder for the Event:\\n\"" + event + \""\\nComments:\\n\"" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \""myandroid\"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        ringtone.play();\r\n    }\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n    @Override\r\n    protected void onNewIntent(Intent intent) {\r\n        super.onNewIntent(intent);\r\n        if (intent != null && intent.getBooleanExtra(\""stop_sound\"", false)) {\r\n            AlarmReceiver.stopRingtone();\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        int[] array = new int[10];\r\n        array[0] = 6;\r\n        array[1] = 2;\r\n        array[2] = 8;\r\n        array[3] = 1;\r\n        array[4] = 3;\r\n        array[5] = 0;\r\n        array[6] = 9;\r\n        array[7] = 7;\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\""Search for? \"");\r\n        int searching = in.nextInt();\r\n        boolean found = false;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + \"" is at index \"" + i + \"".\"");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            System.out.println(searching + \"" was not found.\"");\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial(Color.BLUE);\r\n        box.setMaterial(material);\r\n        Box outline = new Box(110, 110, 110);\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        Group group = new Group(outline, box);\r\n        group.setOnMouseClicked(e -> {\r\n            if (outline.isVisible()) {\r\n                outline.setVisible(false);\r\n            } else {\r\n                outline.setVisible(true);\r\n            }\r\n        });\r\n        outline.setVisible(false);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-500);\r\n        Scene scene = new Scene(new Group(group), 600, 400, true);\r\n        scene.setCamera(camera);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""3D Outline Selection Example\"");\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(\""tenantId\"", tenantId)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().get(\""tenantId\"", String.class);\r\n        throws ServletException, IOException {\r\n    try {\r\n        String jwt = parseJwt(request);\r\n        if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\r\n            String username = jwtUtils.getUserNameFromJwtToken(jwt);\r\n            String tokenTenantId = jwtUtils.getTenantIdFromJwtToken(jwt);\r\n            String serverName = request.getServerName();\r\n            String requestTenantId = serverName.substring(0, serverName.indexOf(\"".\""));\r\n            if (!requestTenantId.equals(tokenTenantId)) {\r\n                throw new RuntimeException(\""Tenant ID mismatch\"");\r\n            }\r\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\r\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\r\n                    userDetails, null, userDetails.getAuthorities());\r\n            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    filterChain.doFilter(request, response);\r\n    Authentication authentication = authenticationManager.authenticate(\r\n            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\r\n    SecurityContextHolder.getContext().setAuthentication(authentication);\r\n    String jwt = jwtUtils.generateJwtToken(authentication, tenantId);\r\n    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\r\n    List<String> roles = userDetails.getAuthorities().stream()\r\n            .map(GrantedAuthority::getAuthority)\r\n            .collect(Collectors.toList());\r\n    return new JwtResponse(jwt,\r\n            userDetails.getId(),\r\n            userDetails.getUsername(),\r\n            roles);\r\n        @RequestAttribute String subdomain,\r\n        @Valid @RequestBody LoginRequest loginRequest\r\n    if (!userTenantRepository.existsByUsernameAndSubdomain(subdomain, loginRequest.getUsername())) {\r\n        return ResponseEntity.badRequest().body(new MessageResponse(\""Unauthorized: Tenant access denied\""));\r\n    }\r\n    return ResponseEntity.ok(authService.authenticateUser(subdomain, loginRequest));"
0,1,misclassified_in_Test_6.csv.csv,"Scanner scan = new Scanner(System.in);\r\n    public String inputTake() {\r\n        System.out.println(\""choose a word, pick carefully: \"");\r\n        String guess = scan.next();\r\n        return checkInput(guess);\r\n    }\r\n    public String checkInput(String input) {\r\n        boolean isGood = true;\r\n        if (input.length() != 5)\r\n            isGood = false;\r\n        if (!input.matches(\""[a-zA-Z]+\""))\r\n            isGood = false;\r\n        if (!isGood) {\r\n            System.out.println(\""make sure your guess consists of 5 english letters, try again.\"");\r\n            return inputTake();\r\n        }\r\n        return input;\r\n    }\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(\""Your guess is: \"" + guess);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Mapping(target = \""agentName\"", source = \""agentName\"")\r\n    @Mapping(target = \""agentIdentityType\"", source = \""agentIdentityType\"")\r\n    @Mapping(target = \""agentIdentityNo\"", source = \""agentIdentityNo\"")\r\n    @Mapping(target = \""agentIdentityExpireAt\"", source = \""agentIdentityExpireAt\"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) {\r\n            return null;\r\n        }\r\n        String agentName = dto.getAgentName();\r\n        String agentIdentityType = dto.getAgentIdentityType();\r\n        String agentIdentityNo = dto.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = dto.getAgentIdentityExpireAt();\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new FileReader(System.getProperty(\""user.home\"") + \""\\\\Desktop\\\\testData.txt\""));\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n        String line;\r\n        int lineNumber = 0;\r\n        while ((line = br.readLine()) != null) {\r\n            if (lineNumber == 0) {\r\n                headers = Arrays.asList(line.split(\"",\""));\r\n            } else {\r\n                String[] values = line.split(\"",\"");\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                for (int i = 0; i < headers.size(); i++) {\r\n                    myRecord.put(headers.get(i), values[i]);\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            lineNumber++;\r\n        }\r\n        System.out.println(myTable);\r\n        br.close();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n        return chain.filter(exchange)\r\n                .doFinally(signalType -> {\r\n                    long duration = System.nanoTime() - startTime;\r\n                    exchange.getResponse().getHeaders().set(\""server-timing\"", Long.toString(duration));\r\n                });\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"pet_type: Literal['cat']\r\n    meows: int\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n    class Config:\r\n        extra = Extra.forbid\r\n    Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1)\r\n    print(e)\r\n    # To provide the input directly without a nested 'pet' dict,\r\n    # create a custom root validator or change your model structure.\r\n    # Here's a simple example using a root validator:\r\n    from pydantic import root_validator\r\n    class ModelFlat(BaseModel):\r\n        pet_type: str\r\n        barks: float = None\r\n        meows: int = None\r\n        scales: bool = None\r\n        n: int\r\n        @root_validator(pre=True)\r\n        def check_pet_type(cls, values):\r\n            pet_type = values.get('pet_type')\r\n            if pet_type == 'dog':\r\n                if values.get('barks') is None:\r\n                    raise ValueError('barks is required for dog')\r\n                if 'meows' in values or 'scales' in values:\r\n                    raise ValueError('Invalid fields for dog')\r\n            elif pet_type == 'cat':\r\n                if values.get('meows') is None:\r\n                    raise ValueError('meows is required for cat')\r\n                if 'barks' in values or 'scales' in values:\r\n                    raise ValueError('Invalid fields for cat')\r\n            elif pet_type in ['reptile', 'lizard']:\r\n                if values.get('scales') is None:\r\n                    raise ValueError('scales is required for lizard')\r\n                if 'barks' in values or 'meows' in values:\r\n                    raise ValueError('Invalid fields for lizard')\r\n            else:\r\n                raise ValueError('Unknown pet_type')\r\n            return values\r\n    try:\r\n        ModelFlat(pet_type='dog', barks=3.14, eats='biscuit', n=1)\r\n    except ValidationError as e:\r\n        print(e)\r\n    except ValueError as e:\r\n        print(e)"
0,1,misclassified_in_Test_6.csv.csv,"async def __aenter__(self):\r\n        print(\""Enter to the Context Manager...\"")\r\n        return self\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(\""Exit from the Context Manager...\"")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(\""This line is now executed\"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(\""CancelledError caught in __aexit__\"")\r\n        return True\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break"
0,1,misclassified_in_Test_6.csv.csv,"constructor(length, width) {\r\n        this.name = \""Rectangle\"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    rectHello() {\r\n        return \""Rectanglish: hello\"";\r\n    }\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = \""Square\"";\r\n    }\r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return \""Squarish:\"" + h.split(':')[1];\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"def __init__(self, model):\r\n        self.model = model\r\n        self.attentions = []\r\n        self.attention_gradients = []\r\n        for name, module in self.model.named_modules():\r\n            if name == 'layer1':\r\n                module.register_forward_hook(self.get_attention)\r\n                module.register_full_backward_hook(self.get_attention_gradient)\r\n    def get_attention(self, module, input, output):\r\n        self.attentions.append(output)\r\n    def get_attention_gradient(self, module, grad_input, grad_output):\r\n        self.attention_gradients.append(grad_output[0])\r\n    def __call__(self, x):\r\n        self.model.zero_grad()\r\n        output = self.model(x)\r\n        loss = output.sum()\r\n        loss.backward()\r\n        return output\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layer1 = nn.Linear(4, 4)\r\n        self.layer2 = nn.Linear(4, 1)\r\n    def forward(self, x):\r\n        x = self.layer1(x)\r\n        x = self.layer2(x)\r\n        return x"
0,1,misclassified_in_Test_6.csv.csv,"Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n    'ID': range(1, 4),\r\n    'Price': price,\r\n    'Net': net,\r\n    'Range': range_"
0,1,misclassified_in_Test_6.csv.csv,"with open(file_path, 'r') as file:\r\n        lines = file.readlines()\r\n    height, width = len(lines), len(lines[0])\r\n    image_data = np.zeros((height + 2, width + 2))\r\n    for i in range(2, height + 2):\r\n        for j in range(2, width + 2):\r\n            image_data[i][j] = 1 if lines[i - 2][j - 2] == '1' else 0\r\n    return image_data\r\n    contours = measure.find_contours(image_array, level=0.5, positive_orientation='high')\r\n    contour = max(contours, key=len)\r\n    contour = np.column_stack((contour[:, 1], contour[:, 0]))\r\n    contour[:, 1] = image_array.shape[0] - contour[:, 1]\r\n    contour[:, 0] /= image_array.shape[1]\r\n    contour[:, 1] /= image_array.shape[0]\r\n    contour[:, 0] *= 250\r\n    contour[:, 1] *= 250\r\n    return contour\r\n    complex_points = np.array([x + 1j * y for x, y in points])\r\n    t = np.linspace(0, 1, len(complex_points), endpoint=False)\r\n    c_k = np.zeros(num_coefficients, dtype=np.complex128)\r\n    for k in range(-num_coefficients // 2, num_coefficients // 2):\r\n        index = k + num_coefficients // 2\r\n        c_k[index] = np.sum(complex_points * np.exp(-2j * np.pi * k * t)) / len(t)\r\n    return c_k\r\n    t = np.linspace(0, 1, num_points, endpoint=False)\r\n    curve = np.zeros(num_points, dtype=complex)\r\n    half = len(coefficients) // 2\r\n    for k in range(-half, half):\r\n        index = k + half\r\n        curve += coefficients[index] * np.exp(2j * np.pi * k * t)\r\n    return curve\r\n    coeffs = calculate_fourier(contour, num_coeff)\r\n    curve = draw_fourier_curve(coeffs, 500)\r\n    plt.figure(figsize=(6, 6))\r\n    plt.plot(curve.real, curve.imag, color='blue')\r\n    plt.title(f\""{num_coeff} Fourier Coefficients\"")\r\n    plt.axis('equal')\r\n    filename = f\""frame_{num_coeff}.png\""\r\n    plt.savefig(filename)\r\n    plt.close()\r\n    png_files.append(filename)\r\n    for filename in png_files:\r\n        image = imageio.imread(filename)\r\n        writer.append_data(image)"
0,1,misclassified_in_Test_6.csv.csv,"if message.author.bot:\r\n        return\r\n    if message.type != discord.MessageType.default:\r\n        return\r\n    if isinstance(message.channel, discord.DMChannel):\r\n        return\r\n    prefix_now = \""/\""\r\n    if message.content.startswith(str(prefix_now)):\r\n        try:\r\n            await message.reply(\"" ?? - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen.\"")\r\n        except discord.Forbidden:\r\n            pass\r\n        return\r\n    if client.user in message.mentions:\r\n        from random import choice\r\n        response = choice([\r\n            \""Mit mir kann man die coolsten Gewinnspiele starten! ??\"",\r\n            \""Wird Zeit jemanden den Tag zu versüßen! ??\"",\r\n            \""Wer nicht auf diesem Server ist, hat die Kontrolle über sein Leben verloren! ??\"",\r\n            \""Wann startet endlich ein neues Gewinnspiel? ??\"",\r\n            \""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lügt! ??\""\r\n        ])\r\n        try:\r\n            await message.reply(f\""{response} (Mein Präfix: `/`)\"", mention_author=False)\r\n        except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n            pass\r\n        return\r\n    count = 1\r\n    mydb = await getConnection()\r\n    mycursor = await mydb.cursor()\r\n    await mycursor.execute(\""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s\"", (message.guild.id,))\r\n    in_database = await mycursor.fetchone()\r\n    if in_database:\r\n        if in_database[0]:\r\n            for roleid in in_database[0].split():\r\n                if int(roleid) in [r.id for r in message.author.roles]:\r\n                    await mycursor.close()\r\n                    mydb.close()\r\n                    return\r\n        if in_database[1]:\r\n            for roleid in in_database[1].split():\r\n                if int(roleid) in [r.id for r in message.author.roles]:\r\n                    count += 1\r\n    await mycursor.execute(\""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s\"", (message.guild.id,))\r\n    in_database1 = await mycursor.fetchone()\r\n    if in_database1 and in_database1[0]:\r\n        if str(message.channel.id) in in_database1[0].split():\r\n            await mycursor.close()\r\n            mydb.close()\r\n            return\r\n    await mycursor.execute(\""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s\"", (message.guild.id, message.author.id))\r\n    in_database2 = await mycursor.fetchone()\r\n    if in_database2:\r\n        await mycursor.execute(\r\n            \""UPDATE guild_message_count SET user_id = %s, message_count = message_count + %s WHERE guild_id = %s AND user_id = %s\"",\r\n            (message.author.id, count, message.guild.id, message.author.id)\r\n        )\r\n    else:\r\n        await mycursor.execute(\r\n            \""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)\"",\r\n            (message.author.id, count, message.guild.id)\r\n        )\r\n    await mydb.commit()\r\n    await mycursor.close()\r\n    mydb.close()\r\n    print(f\""{client.user} is ready\"")\r\n    async with client:\r\n        await client.start(\""your_token_here\"")"
0,1,misclassified_in_Test_6.csv.csv,"point = Point(coords)\r\n    for i, poly in enumerate(polygons):\r\n        if poly.buffer(1e-3).contains(point):\r\n            data.append({\r\n                'x': point.x,\r\n                'y': point.y,\r\n                'label': labels[i],\r\n                'color': colors[i]\r\n            })\r\n            break\r\n           for lbl, clr in zip(labels, colors)]"
0,1,misclassified_in_Test_6.csv.csv,"@classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n    @classmethod\r\n    def validate(cls, v: Any):\r\n        return cls(int(v))\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n    def __str__(self):\r\n        return str(int(self))\r\n    def __repr__(self):\r\n        return str(self)\r\n    id: SnowflakeId\r\n    class Config:\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }"
0,1,misclassified_in_Test_6.csv.csv,"def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n    def __iter__(self):\r\n        yield self.x\r\n        yield self.y\r\n    def __repr__(self):\r\n        return f\""Point({self.x}, {self.y})\""\r\n    def __eq__(self, other):\r\n        return tuple(self) == tuple(other)\r\n    def __getitem__(self, index):\r\n        return (self.x, self.y)[index]\r\n    def __len__(self):\r\n        return 2\r\n    def __add__(self, other):\r\n        return Point(self.x + other.x, self.y + other.y)\r\n    def __tuple__(self):\r\n        return (self.x, self.y)\r\n    def as_tuple(self):\r\n        return (self.x, self.y)"
0,1,misclassified_in_Test_6.csv.csv,"vertical_spacing=0.05,\r\n                    shared_xaxes=True,\r\n                    subplot_titles=(title, \""\""))\r\n                         y=A_error[err], \r\n                         line_color='green',\r\n                         marker_color='green',\r\n                         mode='lines+markers',\r\n                         showlegend=True,\r\n                         name=\""A\"",\r\n                         hoverinfo='x+y+name'),\r\n              row=1,\r\n              col=1)\r\n                         y=B_error[err], \r\n                         line_color='blue',\r\n                         mode='lines+markers',\r\n                         showlegend=True,\r\n                         name=\""B\"",\r\n                         hoverinfo='x+y+name'),\r\n              row=2,\r\n              col=1)\r\n                  legend_traceorder=\""normal\"")"
0,1,misclassified_in_Test_6.csv.csv,"result = []\r\n    for i, first_level in enumerate(lists[0]):\r\n        for j, second_level in enumerate(lists[1]):\r\n            if i == 0 and j < len(first_level):\r\n                for item in first_level:\r\n                    result.append([lists[0][i][0], second_level, item])\r\n            elif i == 1 and j < len(second_level):\r\n                for item in lists[2]:\r\n                    result.append([lists[0][i][0], second_level[j], item])\r\n    return result\r\n    for color in colors:\r\n        for num in nums:\r\n            output.append([year[0], color, num])\r\n    def helper(i, prefix):\r\n        if i == len(lists) - 1:\r\n            for val in lists[i]:\r\n                yield prefix + [val]\r\n        else:\r\n            for j, sublist in enumerate(lists[i]):\r\n                if isinstance(sublist, list):\r\n                    for val in helper(i+1, prefix + [sublist if isinstance(sublist, str) else lists[i][j]]):\r\n                        yield val\r\n                else:\r\n                    for val in helper(i+1, prefix + [sublist]):\r\n                        yield val\r\n    return list(helper(0, []))\r\n    for j, color in enumerate(b[i]):\r\n        nums = c[j]\r\n        for num in nums:\r\n            result.append([year[0], color, num])"
0,1,misclassified_in_Test_6.csv.csv,"date_rng = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    data = {\r\n        'date': np.random.choice(date_rng, num_rows),\r\n        'category': np.random.choice(['A', 'B', 'C', 'D'], num_rows),\r\n        'subcategory': np.random.choice(['X', 'Y', 'Z'], num_rows),\r\n        'value': np.random.rand(num_rows) * 100\r\n    }\r\n    df = pd.DataFrame(data)\r\n    df = df.sort_values('date')\r\n    df.set_index('date', inplace=False)\r\n    df.index = pd.to_datetime(df.index)\r\n    return df\r\n    index_column=\""date\"",\r\n    every=\""1w\"",\r\n    closed=\""right\"",\r\n    by=[\""category\"", \""subcategory\""]\r\n    pl.col(\""value\"").sum().alias(\""value_sum\""),\r\n    pl.col(\""value\"").mean().alias(\""value_mean\""),\r\n    pl.col(\""value\"").max().alias(\""value_max\""),\r\n    pl.col(\""value\"").min().alias(\""value_min\"")"
0,1,misclassified_in_Test_6.csv.csv,"def __init__(self, app: ASGIApp):\r\n        self.app = app\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send):\r\n        if scope[\""type\""] != \""http\"":\r\n            await self.app(scope, receive, send)\r\n            return\r\n        async def receive_with_modified_body():\r\n            message = await receive()\r\n            if message.get(\""type\"") != \""http.request\"":\r\n                return message\r\n            if not message.get(\""body\""):\r\n                return message\r\n            body = json.loads(message[\""body\""].decode(\""utf-8\""))\r\n            body[\""some_field\""] = \""foobar\""\r\n            message[\""body\""] = json.dumps(body).encode(\""utf-8\"")\r\n            return message\r\n        await self.app(scope, receive_with_modified_body, send)\r\n    data = await request.json()\r\n    return data"
0,1,misclassified_in_Test_6.csv.csv,"doc1 = Document(page_content=\""The sky is blue.\"", metadata={\""document_id\"": \""10\""})\r\n    doc2 = Document(page_content=\""The forest is green\"", metadata={\""document_id\"": \""62\""})\r\n    docs = [doc1, doc2]\r\n    for doc in docs:\r\n        doc.metadata['summary'] = 'hello'\r\n    pprint.pprint(docs)\r\n    embeddings_list = []\r\n    for doc in tqdm(docs, desc=\""Embedding documents\""):\r\n        emb = embeddings.embed_documents([doc.page_content])[0]\r\n        embeddings_list.append(emb)\r\n    db = FAISS.from_embeddings(embeddings_list, docs)\r\n    db.save_local(\""faiss_index\"")\r\n    new_db = FAISS.load_local(\""faiss_index\"", embeddings)\r\n    query = \""Which color is the sky?\""\r\n    docs = new_db.similarity_search_with_score(query)\r\n    print('Retrieved docs:', docs)\r\n    print('Metadata of the most relevant document:', docs[0][0].metadata)\r\n    main()"
0,1,misclassified_in_Test_6.csv.csv,"st.set_page_config(page_title=\""xx\"", page_icon=\""images/logo.png\"")\r\n    logo = Image.open(\""images/logo.png\"")\r\n    st.image(logo, width=300)\r\n    ga_code = \""\""\""\r\n        <iframe src=\""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx\"" style=\""display:none;\""></iframe>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n    \""\""\""\r\n    st.components.v1.html(ga_code, height=0)\r\n    page_header()\r\n    st.write(\""Hello Streamlit\"")\r\n    main()"
0,1,misclassified_in_Test_6.csv.csv,"def __init__(self, *args, **kwargs):\r\n        self._value_source = None\r\n        super().__init__(*args, **kwargs)\r\n    def handle_parse_result(self, ctx, opts, args):\r\n        if self.name in opts:\r\n            self._value_source = 'user'\r\n        else:\r\n            self._value_source = 'default'\r\n        return super().handle_parse_result(ctx, opts, args)\r\n    source = hello.params[0]._value_source\r\n    print(f\""value: {value}, source: {source}\"")\r\n    hello()"
0,1,misclassified_in_Test_6.csv.csv,"n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n    getcontext().prec = n_digits + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n    with tqdm(total=n, position=pos, desc=f\""Job {pos + 1} of {total}\"", leave=True) as pbar:\r\n        for k in range(n):\r\n            t = ((-1) ** k) * factorial(6 * k) * (13591409 + 545140134 * k)\r\n            deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n            pi += Decimal(t) / Decimal(deno)\r\n            pbar.update(1)\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    return pi\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    results = Parallel(n_jobs=n_cores)(\r\n        delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks)\r\n    )\r\n    parallel_with_joblib()"
0,1,misclassified_in_Test_6.csv.csv,"def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n    def traverse_pre(self):\r\n        result = []\r\n        if self.left:\r\n            result += self.left.traverse_pre()\r\n        result.append(self.value)\r\n        if self.right:\r\n            result += self.right.traverse_pre()\r\n        return result"
0,1,misclassified_in_Test_6.csv.csv,"file: bytes = Field(..., description=\""File content\"")\r\n    # your logic here\r\n    pass\r\n    # your logic here\r\n    pass"
0,1,misclassified_in_Test_6.csv.csv,"path_to_img = \""my image path\""\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512))\r\n    image = (image * 255).astype(np.uint8)  # convert to uint8 to match bytes length\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {\""shape\"": image.shape, \""image\"": image_byte.decode()}\r\n    response = requests.get('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n    return {\""Hello\"": \""World\""}\r\n    data = await request.json()\r\n    image_byte = data.get('image').encode()\r\n    image_shape = tuple(data.get('shape'))\r\n    image_array = np.frombuffer(base64.b64decode(image_byte), dtype=np.uint8).reshape(image_shape)\r\n    return {\""shape\"": image_array.shape}  # example response\r\n    uvicorn.run(app, port=8000, host=\""127.0.0.1\"")"
0,1,misclassified_in_Test_6.csv.csv,"return base64.b64decode(encoded)\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i*lbatch:(i+1)*lbatch] for i in range(N-1)]\r\n    batches.append(encoded[(N-1)*lbatch:])\r\n    ret_parts = []\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        ret_parts = list(executor.map(a2b_base64, batches))\r\n    return b\""\"".join(ret_parts)\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i*lbatch:(i+1)*lbatch] for i in range(N-1)]\r\n    batches.append(encoded[(N-1)*lbatch:])\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        ret_parts = list(executor.map(a2b_base64, batches))\r\n    return b\""\"".join(ret_parts)\r\n    CPU_NUM = cpu_count()\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n    print(\""\\nreference_implementation\"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n    print(\""\\nthreaded_impl\"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(\""Verify result\"", \""Ok\"" if dec3 == dec1 else \""FAIL\"")\r\n    print('decoding time =', (t_end - t_start))\r\n    print(\""\\nmutiproc_impl\"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(\""Verify result\"", \""Ok\"" if dec4 == dec1 else \""FAIL\"")\r\n    print('decoding time =', (t_end - t_start))"
0,1,misclassified_in_Test_6.csv.csv,"((\""Male\"", \""Yes\""), (\""Male\"", \""No\"")),\r\n    ((\""Female\"", \""Yes\""), (\""Female\"", \""No\""))\r\n    x=x, y=y, hue=hue, row=row, data=tips,\r\n    kind=\""bar\"", ci=\""sd\"", edgecolor=\""black\"", errcolor=\""black\"",\r\n    errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5,\r\n    hue_order=hue_order, order=order\r\n    sns.stripplot, x, y, hue,\r\n    order=order, hue_order=hue_order,\r\n    palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1\r\n    data_subset = tips[tips[row] == time_val]\r\n    annot = Annotator(ax, pairs, data=data_subset, x=x, y=y, hue=hue, order=order, hue_order=hue_order)\r\n    annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=0)\r\n    annot.apply_test().annotate()"
0,1,misclassified_in_Test_6.csv.csv,"LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n                              lat=\""LAT\"",\r\n                              lon=\""LON\"",\r\n                              nx_hexagon=25,\r\n                              opacity=0.4,\r\n                              labels={\""color\"": \""Point Count\""},\r\n                              mapbox_style='carto-positron',\r\n                              zoom=1)\r\n    \""layers\"": [\r\n        {\r\n            \""source\"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n            \""below\"": \""traces\"",\r\n            \""type\"": \""fill\"",\r\n            \""color\"": \""orange\"",\r\n            \""opacity\"": 0.1,\r\n            \""line\"": {\""width\"": 1}\r\n        },\r\n    ],"
0,1,misclassified_in_Test_6.csv.csv,"def execute(self, query, params=None):\r\n        pass\r\n    def fetchall(self):\r\n        return [(\""event1\"",), (\""event2\"",)]\r\n    def close(self):\r\n        pass\r\n    def __init__(self):\r\n        self.cursor_obj = MockCursor()\r\n    def cursor(self):\r\n        return self.cursor_obj\r\n    def commit(self):\r\n        pass\r\n    def close(self):\r\n        pass\r\n    mock_connect.return_value = MockConnection()\r\n    db = PostgresqlApi()\r\n    db.add_event(event=\""test event\"")\r\n    db.close()\r\n    mock_connect.return_value = MockConnection()\r\n    db = PostgresqlApi()\r\n    result = db.events()\r\n    assert result == [(\""event1\"",), (\""event2\"",)]\r\n    db.close()"
0,1,misclassified_in_Test_1.csv.csv,"import org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@RestController\r\npublic class MyController {\r\n\r\n    private final RestTemplate restTemplate;\r\n\r\n    public MyController(RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n\r\n    @GetMapping(""/data"")\r\n    public String getData() {\r\n        String url = ""https://example.com/data"";\r\n        return restTemplate.getForObject(url, String.class);\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate() {\r\n        return new RestTemplate();\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\n\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass MyControllerTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    void testGetData() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isOk());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanBuilder;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.context.Context;\r\n\r\npublic class SqsTracePropagation {\r\n\r\n    private final Tracer tracer;\r\n\r\n    public SqsTracePropagation(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void consumeMessage(String traceId) {\r\n        SpanContext spanContext = SpanContext.create(\r\n                traceId,\r\n                Span.current().getSpanContext().getSpanId(),\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Context remoteContext = Context.current().with(Span.wrap(spanContext));\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(""consumeMessage"")\r\n                .setParent(remoteContext)\r\n                .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // Do processing here\r\n            System.out.println(""Processing message..."");\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nclass SqsTracePropagationTest {\r\n\r\n    private final Tracer tracer = GlobalOpenTelemetry.getTracer(""test-tracer"");\r\n\r\n    @Test\r\n    void testConsumeMessage() {\r\n        String traceId = ""0af7651916cd43dd8448eb211c80319c""; // Example trace ID\r\n        SqsTracePropagation sqsTracePropagation = new SqsTracePropagation(tracer);\r\n        sqsTracePropagation.consumeMessage(traceId);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.*;\r\n\r\npublic class Solution {\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        int[] inc = new int[n];\r\n        int[] dec = new int[n];\r\n        \r\n        Arrays.fill(inc, 1);\r\n        Arrays.fill(dec, 1);\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            if (list.get(i) > list.get(i - 1)) {\r\n                inc[i] = inc[i - 1] + 1;\r\n            }\r\n        }\r\n\r\n        for (int i = n - 2; i >= 0; i--) {\r\n            if (list.get(i) > list.get(i + 1)) {\r\n                dec[i] = dec[i + 1] + 1;\r\n            }\r\n        }\r\n\r\n        int result = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                if (j > i && list.get(j) >= list.get(j - 1)) break;\r\n                int left = (i > 0) ? inc[i - 1] : 0;\r\n                int mid = j - i + 1;\r\n                int right = (j < n - 1) ? dec[j + 1] : 0;\r\n                result = Math.max(result, left + mid + right);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        File file = new File(""path/to/file.csv"");\r\n        byte[] data = Files.readAllBytes(file.toPath());\r\n\r\n        RequestBody requestBody = RequestBody.create(data, MediaType.parse(""application/octet-stream""));\r\n\r\n        String fileName = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String contentDisposition = ""attachment; filename=\"""" + fileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://your-url-here"")\r\n                .post(requestBody)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", new String(contentDisposition.getBytes(), ""ISO-8859-1""))\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            System.out.println(response.code());\r\n            System.out.println(response.body().string());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,public abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {}\r\n}\r\n\r\nimport anotherpackage.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self(); // No access violation\r\n        System.out.println(innerChild);\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_1.csv.csv,"package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    private static final String NET_WM_NAME = ""_NET_WM_NAME"";\r\n    private static final String NET_WM_STATE = ""_NET_WM_STATE"";\r\n    private static final String NET_WM_XAPP_PROGRESS = ""_NET_WM_XAPP_PROGRESS"";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session == null) throw new RuntimeException(""Failed to open X11 display"");\r\n\r\n                        MemorySegment atomNetWmState = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_STATE), 0);\r\n                        MemorySegment atomNetWmName = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_NAME), 0);\r\n                        MemorySegment atomNetWmProgress = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_XAPP_PROGRESS), 0);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(\r\n                                x11Session,\r\n                                MemorySegment.ofAddress(rawHandle).address(),\r\n                                atomNetWmProgress.address(),\r\n                                6,\r\n                                32,\r\n                                0,\r\n                                progressData,\r\n                                1\r\n                            );\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Yaml yaml = new Yaml();\r\n        try (InputStream inputStream = new FileInputStream(""config.yaml"")) {\r\n            Map<String, Object> yamlConfig = yaml.load(inputStream);\r\n            Map<String, Object> interestingMap = (Map<String, Object>) yamlConfig.get(""interesting-setup"");\r\n\r\n            Yaml customYaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            InterestingSetup finalObject = customYaml.loadAs(yaml.dump(interestingMap), InterestingSetup.class);\r\n\r\n            System.out.println(finalObject);\r\n        }\r\n    }\r\n}\r\n\r\nclass InterestingSetup {\r\n    private int port;\r\n    private boolean validation;\r\n    private List<Map<String, String>> parts;\r\n\r\n    public int getPort() {\r\n        return port;\r\n    }\r\n\r\n    public void setPort(int port) {\r\n        this.port = port;\r\n    }\r\n\r\n    public boolean isValidation() {\r\n        return validation;\r\n    }\r\n\r\n    public void setValidation(boolean validation) {\r\n        this.validation = validation;\r\n    }\r\n\r\n    public List<Map<String, String>> getParts() {\r\n        return parts;\r\n    }\r\n\r\n    public void setParts(List<Map<String, String>> parts) {\r\n        this.parts = parts;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""InterestingSetup{"" +\r\n                ""port="" + port +\r\n                "", validation="" + validation +\r\n                "", parts="" + parts +\r\n                '}';\r\n    }\r\n}\r\n\r\nyaml\r\nconfig:\r\n  key-1: val-1\r\nother-config:\r\n  lang: en\r\n  year: 1906\r\ninteresting-setup:\r\n  port: 1234\r\n  validation: false\r\n  parts:\r\n    - on-start: backup\r\n      on-stop: say-goodbye\r\n"
0,1,misclassified_in_Test_1.csv.csv,"// For Response Body:\r\n@ApiResponse(responseCode = ""200"", \r\n    content = @Content(\r\n        examples = @ExampleObject(\r\n            name = ""SUCCESS RESPONSE"", \r\n            value = ""{\""key\"": \""value\""}""\r\n        ), \r\n        mediaType = MediaType.APPLICATION_JSON_VALUE\r\n    )\r\n)\r\n\r\n// For Request Body:\r\n@io.swagger.v3.oas.annotations.parameters.RequestBody(\r\n    content = @Content(\r\n        examples = @ExampleObject(\r\n            name = ""REQUEST BODY"", \r\n            value = ""{\""key\"": \""value\""}""\r\n        )\r\n    )\r\n)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n\r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) return null;\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            String escape = ESCAPES.get(c);\r\n            if (escape != null) {\r\n                sb.append(escape);\r\n            } else {\r\n                sb.append(c);\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(escape(""<div class='test'>&\""</div>"")); // Output: &lt;div class=&#039;test&#039;&gt;&amp;&#034;&lt;/div&gt;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;\r\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\n\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.get;\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.put;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\nclass SecurityConfigTest {\r\n\r\n    @InjectMocks\r\n    private SecurityConfig securityConfig;\r\n\r\n    @Mock\r\n    private WebApplicationContext context;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @Value(""${auth0.audience}"")\r\n    private String audience;\r\n\r\n    @Value(""${spring.security.oauth2.resourceserver.jwt.issuer-uri}"")\r\n    private String issuer;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        mockMvc = MockMvcBuilders\r\n                .webAppContextSetup(context)\r\n                .apply(SecurityMockMvcConfigurers.springSecurity())\r\n                .build();\r\n    }\r\n\r\n    @Test\r\n    void testGetActuatorEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void testPutDataEndpointWithValidScope() throws Exception {\r\n        mockMvc.perform(put(""/data/123"")\r\n                        .with(SecurityMockMvcRequestPostProcessors.jwt()\r\n                                .authorities(new SimpleGrantedAuthority(""SCOPE_data:write""))))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void testPutDataEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(put(""/data/123""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void testGetDataEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(get(""/data/123""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> set = ConcurrentHashMap.newKeySet();\r\n\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        executor.submit(() -> {\r\n            for (int i = 3; i <= n; i += 3) set.add(i);\r\n        });\r\n        executor.submit(() -> {\r\n            for (int i = 5; i <= n; i += 5) set.add(i);\r\n        });\r\n        executor.submit(() -> {\r\n            for (int i = 7; i <= n; i += 7) set.add(i);\r\n        });\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n\r\n        return set.stream().mapToInt(Integer::intValue).sum();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));      // Output: 40\r\n        System.out.println(fm.getSum(1000));    // Output: 272066\r\n        System.out.println(fm.getSum(76293));   // Output: 1365433807\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n\r\nimport java.io.IOException;\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n        String content = """"""\r\n                {\r\n                   ""aggregateId"": ""3f61aede-83dd-4049-a6ff-337887b6b807""\r\n                }\r\n                """""";\r\n\r\n        Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n        System.out.println(objectMapper.writeValueAsString(aggregate));\r\n    }\r\n\r\n    public record AggregateId(UUID id) {\r\n\r\n        @JsonCreator\r\n        public AggregateId(String id) {\r\n            this(UUID.fromString(id));\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return id.toString();\r\n        }\r\n    }\r\n\r\n    public static class Aggregate {\r\n\r\n        @JsonSerialize(using = AggregateIdSerializer.class)\r\n        @JsonDeserialize(using = AggregateIdDeserializer.class)\r\n        public final AggregateId aggregateId;\r\n\r\n        @JsonCreator\r\n        public Aggregate(\r\n                @JsonProperty(""aggregateId"") AggregateId aggregateId\r\n        ) {\r\n            this.aggregateId = aggregateId;\r\n        }\r\n    }\r\n}\r\n\r\nimport com.fasterxml.jackson.core.JsonGenerator;\r\nimport com.fasterxml.jackson.databind.JsonSerializer;\r\nimport com.fasterxml.jackson.databind.SerializerProvider;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class AggregateIdSerializer extends JsonSerializer<Main.AggregateId> {\r\n\r\n    @Override\r\n    public void serialize(Main.AggregateId value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\r\n        gen.writeString(value.toString());\r\n    }\r\n}\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.JsonDeserializer;\r\n\r\nimport java.io.IOException;\r\nimport java.util.UUID;\r\n\r\npublic class AggregateIdDeserializer extends JsonDeserializer<Main.AggregateId> {\r\n\r\n    @Override\r\n    public Main.AggregateId deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\r\n        return new Main.AggregateId(p.getValueAsString());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.time.temporal.ChronoUnit;\r\nimport java.time.Year;\r\nimport java.time.YearWeek;\r\n\r\npublic class WeekOperations {\r\n    public static void main(String[] args) {\r\n        YearWeek weekA = YearWeek.of(2012, 48);\r\n        YearWeek weekB = YearWeek.of(2013, 3);\r\n\r\n        System.out.println(weekA.isBefore(weekB)); // true\r\n        System.out.println(ChronoUnit.WEEKS.between(weekA.atDay(1), weekB.atDay(1))); // 6\r\n    }\r\n}\r\n\r\nclass YearWeek implements Comparable<YearWeek> {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    private YearWeek(int year, int week) {\r\n        this.year = year;\r\n        this.week = week;\r\n    }\r\n\r\n    public static YearWeek of(int year, int week) {\r\n        if (week < 1 || week > Year.of(year).length() / 7 + (Year.of(year).length() % 7 > 0 ? 1 : 0)) {\r\n            throw new IllegalArgumentException(""Invalid week: "" + week + "" for year: "" + year);\r\n        }\r\n        return new YearWeek(year, week);\r\n    }\r\n\r\n    public boolean isBefore(YearWeek other) {\r\n        return this.compareTo(other) < 0;\r\n    }\r\n\r\n    public boolean isAfter(YearWeek other) {\r\n        return this.compareTo(other) > 0;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(YearWeek other) {\r\n        if (this.year != other.year) {\r\n            return Integer.compare(this.year, other.year);\r\n        }\r\n        return Integer.compare(this.week, other.week);\r\n    }\r\n\r\n    public java.time.LocalDate atDay(int dayOfWeek) {\r\n        return java.time.LocalDate.ofYearDay(year, 1)\r\n                .with(java.time.temporal.WeekFields.ISO.weekOfYear(), week)\r\n                .with(java.time.temporal.WeekFields.ISO.dayOfWeek(), dayOfWeek);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(""%d-W%02d"", year, week);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        label.setOnMouseEntered(e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.setOnMouseExited(e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\nclass MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"", // 9 digits\r\n            ""2023-10-05T15:14:29.12345678Z"",  // 8 digits\r\n            ""2023-10-05T15:14:29.1234567Z"",   // 7 digits\r\n            ""2023-10-05T15:14:29.123456Z"",    // 6 digits\r\n            ""2023-10-05T15:14:29.12345Z"",     // 5 digits\r\n            ""2023-10-05T15:14:29.1234Z"",      // 4 digits\r\n            ""2023-10-05T15:14:29.123Z"",       // 3 digits\r\n            ""2023-10-05T15:14:29.12Z"",        // 2 digits\r\n            ""2023-10-05T15:14:29.1Z"",         // 1 digit\r\n            ""2023-10-05T15:14:29Z""            // no fractional seconds\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]['Z']"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp.replace(""Z"", """"), formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        char[] string = string1.toCharArray();  \r\n        boolean hasDuplicate = false;\r\n\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n        for (int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for (int j = i + 1; j < string.length; j++) {  \r\n                if (string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if (count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicate = true;\r\n            }  \r\n        }  \r\n        if (!hasDuplicate) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }  \r\n}\r\n\r\n\r\n   Duplicate characters in a given string:\r\n   r\r\n   e\r\n   t\r\n   s\r\n   i\r\n   \r\n\r\n   Duplicate characters in a given string:\r\n   no duplicates\r\n   \r\n\r\n   Duplicate characters in a given string:\r\n   a\r\n   r\r\n   g\r\n   m\r\n   "
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private Group circle;\r\n    private double rotationAngle = 0;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        blueArc = createArc(0, Color.BLUE);\r\n        greenArc = createArc(90, Color.GREEN);\r\n        yellowArc = createArc(180, Color.YELLOW);\r\n        redArc = createArc(270, Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 500, 500);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Arc createArc(double startAngle, Color color) {\r\n        Arc arc = new Arc(250, 250, 150, 150, startAngle, 90);\r\n        arc.setType(ArcType.ROUND);\r\n        arc.setStroke(color);\r\n        arc.setFill(color);\r\n        return arc;\r\n    }\r\n\r\n    private void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DynamicDrawMode extends Application {\r\n\r\n    private boolean drawMode = true; // true = line, false = rectangle\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Canvas canvas = new Canvas(800, 600);\r\n        GraphicsContext gc = canvas.getGraphicsContext2D();\r\n\r\n        canvas.setOnMouseDragged(e -> {\r\n            gc.setFill(Color.LIGHTBLUE);\r\n            gc.setStroke(Color.BLACK);\r\n            gc.setLineWidth(2);\r\n\r\n            if (drawMode) {\r\n                gc.strokeLine(e.getX(), e.getY(), e.getX() + 1, e.getY() + 1);\r\n            } else {\r\n                gc.fillRect(e.getX(), e.getY(), 20, 20);\r\n            }\r\n        });\r\n\r\n        canvas.setOnKeyPressed(e -> {\r\n            if (e.getCode() == KeyCode.SPACE) {\r\n                drawMode = !drawMode;\r\n            }\r\n        });\r\n\r\n        StackPane root = new StackPane(canvas);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        canvas.requestFocus();\r\n\r\n        stage.setTitle(""Dynamic Draw Mode"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"void main() throws InterruptedException {\r\n    final var NAME = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope<>()) {\r\n        ScopedValue.where(NAME, ""haha"", () -> {\r\n            ts.fork(() -> {\r\n                return ScopedValue.where(NAME, ""haha"", () -> null);\r\n            });\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n\r\njava\r\npublic class PlaygroundTest {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        new Playground().main();\r\n        System.out.println(""Test passed."");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        Label label = createTestLabel();\r\n        root.getChildren().add(label);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(getClass().getResource(""/ExampleStylesheet.css"").toExternalForm());\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n        testLabel.setOnMouseEntered(event -> doSomething());\r\n        testLabel.setOnMouseExited(event -> doSomethingElse());\r\n\r\n        testLabel.setMouseTransparent(true);\r\n        testLabel.setOnMouseMoved(this::handleMouseMove);\r\n\r\n        return testLabel;\r\n    }\r\n\r\n    private void handleMouseMove(MouseEvent event) {\r\n        Label label = (Label) event.getSource();\r\n        double x = event.getX();\r\n        double y = event.getY();\r\n        double width = label.getWidth();\r\n        double height = label.getHeight();\r\n\r\n        if (x >= 0 && x <= width && y >= 0 && y <= height) {\r\n            label.setMouseTransparent(false);\r\n        } else {\r\n            label.setMouseTransparent(true);\r\n        }\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.test-label {\r\n    -fx-background-color: blue;\r\n    -fx-border-color: red;\r\n    -fx-font-family: ""Harlow Solid Italic"";\r\n    -fx-font-size: 100;\r\n    -fx-padding: -40 20 0 20;\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Menu;\r\nimport javafx.scene.control.MenuBar;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Popup;\r\n\r\npublic class MenuOpenUpwards extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        MenuBar menuBar = new MenuBar();\r\n        Menu menu = new Menu(""Options"");\r\n        MenuItem item1 = new MenuItem(""Option 1"");\r\n        MenuItem item2 = new MenuItem(""Option 2"");\r\n        menu.getItems().addAll(item1, item2);\r\n        menuBar.getMenus().add(menu);\r\n\r\n        menu.setOnShowing(e -> {\r\n            Popup popup = new Popup();\r\n            popup.getContent().add(menu.getItems().get(0).getParentPopup().getSkin().getNode());\r\n            popup.show(menuBar, menuBar.localToScreen(0, 0).getX(), menuBar.localToScreen(0, 0).getY() - popup.getHeight());\r\n        });\r\n\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuBar);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Menu Open Upwards"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initializeGrid();\r\n    }\r\n\r\n    private void initializeGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class MainViewController implements Initializable {\r\n\r\n    @FXML\r\n    private MenuItem mnuItemNew;\r\n\r\n    @FXML\r\n    private ScrollPane scpGrid;\r\n\r\n    @FXML\r\n    public void onMnuItemNewAction() {\r\n        int cols = 10;\r\n        int rows = 10;\r\n        int horizontalGap = 1;\r\n        int verticalGap = 1;\r\n        int fieldHorizontalSize = 40;\r\n        int fieldVerticalSize = 40;\r\n        var newGrid = new Grid(cols, rows, horizontalGap, verticalGap, fieldHorizontalSize, fieldVerticalSize);\r\n        newGrid.setAlignment(Pos.CENTER);\r\n        scpGrid.setContent(newGrid);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass YourTest {\r\n\r\n    private PDFDocument pdfDocument;\r\n    private PSConverter converter;\r\n    private byte[] content = ""test content"".getBytes();\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        try (MockedConstruction<PDFDocument> pdfMock = Mockito.mockConstruction(PDFDocument.class, (mock, context) -> {\r\n            doNothing().when(mock).load(any(ByteArrayInputStream.class));\r\n        });\r\n             MockedConstruction<PSConverter> converterMock = Mockito.mockConstruction(PSConverter.class, (mock, context) -> {\r\n                 doAnswer(invocation -> {\r\n                     ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n                     outputStream.write(content);\r\n                     return outputStream;\r\n                 }).when(mock).convert(any(), any(ByteArrayOutputStream.class));\r\n             })) {\r\n\r\n            pdfDocument = pdfMock.constructed().get(0);\r\n            converter = converterMock.constructed().get(0);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testConversion() {\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        converter.convert(new Object(), outputStream);\r\n        assert new String(outputStream.toByteArray()).equals(new String(content));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.mongodb.core.MongoTemplate;\r\nimport org.springframework.data.mongodb.core.aggregation.Aggregation;\r\nimport org.springframework.data.mongodb.core.aggregation.AggregationOperation;\r\nimport org.springframework.data.mongodb.core.aggregation.UnionWithOperation;\r\nimport org.springframework.data.mongodb.core.query.Criteria;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class ProductService {\r\n\r\n    private final MongoTemplate mongoTemplate;\r\n\r\n    public ProductService(MongoTemplate mongoTemplate) {\r\n        this.mongoTemplate = mongoTemplate;\r\n    }\r\n\r\n    public List<Product> searchProducts(String searchText, List<Integer> companyNos, List<String> statuses, int page, int size) {\r\n        Pageable pageable = PageRequest.of(page, size);\r\n\r\n        Criteria baseCriteria = Criteria.where(""companyNo"").in(companyNos)\r\n                .and(""status"").in(statuses);\r\n\r\n        Criteria productNameCriteria = Criteria.where(""productName"").regex(searchText, ""i"");\r\n        Criteria subCategoryCriteria = Criteria.where(""subCategoryName"").regex(searchText, ""i"");\r\n        Criteria categoryCriteria = Criteria.where(""categoryName"").regex(searchText, ""i"");\r\n        Criteria brandCriteria = Criteria.where(""brandName"").regex(searchText, ""i"");\r\n\r\n        AggregationOperation matchProductName = Aggregation.match(new Criteria().andOperator(baseCriteria, productNameCriteria));\r\n        AggregationOperation matchSubCategory = Aggregation.match(new Criteria().andOperator(baseCriteria, subCategoryCriteria));\r\n        AggregationOperation matchCategory = Aggregation.match(new Criteria().andOperator(baseCriteria, categoryCriteria));\r\n        AggregationOperation matchBrand = Aggregation.match(new Criteria().andOperator(baseCriteria, brandCriteria));\r\n\r\n        UnionWithOperation unionWithSubCategory = UnionWithOperation.unionWith(""product"").pipeline(matchSubCategory);\r\n        UnionWithOperation unionWithCategory = UnionWithOperation.unionWith(""product"").pipeline(matchCategory);\r\n        UnionWithOperation unionWithBrand = UnionWithOperation.unionWith(""product"").pipeline(matchBrand);\r\n\r\n        Aggregation aggregation = Aggregation.newAggregation(\r\n                matchProductName,\r\n                unionWithSubCategory,\r\n                unionWithCategory,\r\n                unionWithBrand,\r\n                Aggregation.skip(pageable.getOffset()),\r\n                Aggregation.limit(pageable.getPageSize())\r\n        );\r\n\r\n        return mongoTemplate.aggregate(aggregation, ""product"", Product.class).getMappedResults();\r\n    }\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class ProductServiceTest {\r\n\r\n    @Autowired\r\n    private ProductService productService;\r\n\r\n    @Test\r\n    public void testSearchProducts() {\r\n        String searchText = ""HYPER"";\r\n        List<Integer> companyNos = List.of(10000009);\r\n        List<String> statuses = List.of(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"");\r\n        int page = 0;\r\n        int size = 10;\r\n\r\n        List<Product> products = productService.searchProducts(searchText, companyNos, statuses, page, size);\r\n\r\n        assertFalse(products.isEmpty());\r\n        products.forEach(product -> System.out.println(product.getProductName()));\r\n    }\r\n}\r\n\r\nshell\r\ndb.product.createIndex({ productName: ""text"", subCategoryName: ""text"", categoryName: ""text"", brandName: ""text"" })\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public static final String PATH_TO_STYLESHEET = App.class.getResourceAsStream(""/style/style.css"") != null ?\r\n        ""/style/style.css"" : ""Resource not found"";\r\npublic static final String PATH_TO_IMG = App.class.getResourceAsStream(""/img/example.png"") != null ?\r\n        ""/img/example.png"" : ""Resource not found"";\r\npublic static final String PATH_TO_SOUNDS = App.class.getResourceAsStream(""/sound/example.wav"") != null ?\r\n        ""/sound/example.wav"" : ""Resource not found"";\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class ResourceTest {\r\n\r\n    @Test\r\n    void testStylesheetPath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_STYLESHEET);\r\n    }\r\n\r\n    @Test\r\n    void testImagePath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_IMG);\r\n    }\r\n\r\n    @Test\r\n    void testSoundPath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_SOUNDS);\r\n    }\r\n}\r\n\r\nxml\r\n<plugin>\r\n    <groupId>org.openjfx</groupId>\r\n    <artifactId>javafx-maven-plugin</artifactId>\r\n    <version>${javafx.maven.plugin.version}</version>\r\n    <configuration>\r\n        <release>${maven.compiler.release}</release>\r\n        <jlinkImageName>App</jlinkImageName>\r\n        <launcher>launcher</launcher>\r\n        <mainClass>com.test.App</mainClass>\r\n        <stripDebug>false</stripDebug>\r\n        <noHeaderFiles>true</noHeaderFiles>\r\n        <noManPages>true</noManPages>\r\n        <addModules>javafx.controls,javafx.fxml,javafx.media</addModules>\r\n    </configuration>\r\n</plugin>\r\n\r\nsh\r\nmvn clean javafx:jlink\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane background = new Pane();\r\n        background.setStyle(""-fx-background-color: red;"");\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n        \r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        StackPane root = new StackPane(background, testButton);\r\n        \r\n        Scene scene = new Scene(root, 500, 500);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8""; \r\n            String userName = ""User: John Doe"";\r\n            String eventName = ""Event: Tech Conference"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            int width = qrImage.getWidth();\r\n            int height = qrImage.getHeight() + 60;\r\n            BufferedImage combined = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, width, height);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 18));\r\n            g.drawString(userName, 10, height - 40);\r\n            g.drawString(eventName, 10, height - 10);\r\n\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, ""png"", new File(filePath));\r\n            System.out.println(""QR Code created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Inject\r\n@JMSConnectionFactory(""java:/jms/remoteCF"")\r\nprivate JMSContext context;\r\n\r\n@Resource(lookup = ""java:/queue/testQueue"")\r\nprivate Queue queue;\r\n\r\n@Override\r\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n    resp.setContentType(""text/html"");\r\n    PrintWriter out = resp.getWriter();\r\n    try {\r\n        for (int i = 0; i < 5; i++) {\r\n            String text = ""This is message "" + (i + 1);\r\n            context.createProducer().send(queue, text);\r\n            out.write(""Message Sent ("" + i + ""): "" + text + ""<br>"");\r\n        }\r\n    } finally {\r\n        out.close();\r\n    }\r\n}\r\n\r\n// Consumer\r\n@MessageDriven(activationConfig = {\r\n    @ActivationConfigProperty(propertyName = ""destinationLookup"", propertyValue = ""java:/queue/testQueue""),\r\n    @ActivationConfigProperty(propertyName = ""destinationType"", propertyValue = ""javax.jms.Queue"")\r\n})\r\npublic class MyMessageConsumer implements MessageListener {\r\n\r\n    @Override\r\n    public void onMessage(Message message) {\r\n        try {\r\n            if (message instanceof TextMessage) {\r\n                System.out.println(""Received: "" + ((TextMessage) message).getText());\r\n            }\r\n        } catch (JMSException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nbash\r\ncurl http://localhost:8080/your-app/your-endpoint\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    private String sourceNode;\r\n    private String destinationNode;\r\n    private String weekIndex;\r\n    private int quantity;\r\n\r\n    public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n        this.weekIndex = weekIndex;\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNode = destinationNode;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public String getWeekIndex() {\r\n        return weekIndex;\r\n    }\r\n\r\n    public String getSourceNode() {\r\n        return sourceNode;\r\n    }\r\n\r\n    public String getDestinationNode() {\r\n        return destinationNode;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(""week1"", ""source1"", ""destination1"", 100),\r\n            new Record(""week1"", ""source1"", ""destination2"", 200),\r\n            new Record(""week1"", ""source2"", ""destination1"", 200),\r\n            new Record(""week1"", ""source2"", ""destination2"", 100),\r\n            new Record(""week2"", ""source1"", ""destination1"", 200),\r\n            new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        List<String> result = records.stream()\r\n            .collect(Collectors.groupingBy(\r\n                r -> r.getWeekIndex() + ""|"" + r.getSourceNode(),\r\n                Collectors.summingInt(Record::getQuantity)\r\n            ))\r\n            .entrySet().stream()\r\n            .flatMap(entry -> {\r\n                String[] keys = entry.getKey().split(""\\|"");\r\n                String week = keys[0];\r\n                String source = keys[1];\r\n                int total = entry.getValue();\r\n\r\n                return records.stream()\r\n                    .filter(r -> r.getWeekIndex().equals(week) && r.getSourceNode().equals(source))\r\n                    .map(r -> String.format(\r\n                        ""%s  %s  %s  %.2f%%"",\r\n                        r.getWeekIndex(),\r\n                        r.getSourceNode(),\r\n                        r.getDestinationNode(),\r\n                        (r.getQuantity() * 100.0) / total\r\n                    ));\r\n            })\r\n            .collect(Collectors.toList());\r\n\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.google.gson.Gson;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ParallelStreamExample {\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(new Puzzle(""Puzzle1""), new Puzzle(""Puzzle2""), new Puzzle(""Puzzle3""));\r\n\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n                .map(gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        bulkWrites.forEach(System.out::println);\r\n    }\r\n\r\n    static class Puzzle {\r\n        String name;\r\n\r\n        Puzzle(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass ParallelStreamExampleTest {\r\n\r\n    @Test\r\n    void testParallelStream() {\r\n        List<ParallelStreamExample.Puzzle> puzzles = List.of(\r\n                new ParallelStreamExample.Puzzle(""Puzzle1""),\r\n                new ParallelStreamExample.Puzzle(""Puzzle2""),\r\n                new ParallelStreamExample.Puzzle(""Puzzle3"")\r\n        );\r\n\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n                .map(ParallelStreamExample.gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .toList();\r\n\r\n        assertEquals(3, bulkWrites.size());\r\n        assertEquals(""Puzzle1"", bulkWrites.get(0).getDocument().getString(""name""));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class LongArray {\r\n    private final MemorySegment segment;\r\n    private static final ValueLayout.OfLong LAYOUT = ValueLayout.JAVA_LONG;\r\n\r\n    public LongArray(long size) {\r\n        if (size < 0) throw new IllegalArgumentException(""Size must be non-negative"");\r\n        this.segment = Arena.global().allocate(size * LAYOUT.byteSize());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        segment.set(LAYOUT, index * LAYOUT.byteSize(), value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        return segment.get(LAYOUT, index * LAYOUT.byteSize());\r\n    }\r\n\r\n    public void close() {\r\n        segment.scope().close();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LongArray array = new LongArray(10);\r\n\r\n        for (long i = 0; i < 10; i++) {\r\n            array.set(i, i * 2);\r\n        }\r\n\r\n        for (long i = 0; i < 10; i++) {\r\n            System.out.println(""Value at index "" + i + "" = "" + array.get(i));\r\n        }\r\n\r\n        array.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.ArrayList;\r\n\r\npublic class BulletGame extends JPanel {\r\n    private final ArrayList<Bullet> bullets = new ArrayList<>();\r\n    private final BufferedImage bulletImage;\r\n\r\n    public BulletGame() {\r\n        bulletImage = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = bulletImage.createGraphics();\r\n        g2d.setColor(Color.RED);\r\n        g2d.fillOval(0, 0, 16, 16);\r\n        g2d.dispose();\r\n\r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(100 + i % 800, 100 + i % 600, i * 0.1, bulletImage));\r\n        }\r\n\r\n        Timer timer = new Timer(16, e -> {\r\n            for (Bullet bullet : bullets) {\r\n                bullet.update();\r\n            }\r\n            repaint();\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        for (Bullet bullet : bullets) {\r\n            bullet.draw(g2d);\r\n        }\r\n    }\r\n\r\n    private static class Bullet {\r\n        int x, y;\r\n        double angle;\r\n        BufferedImage img;\r\n\r\n        Bullet(int x, int y, double angle, BufferedImage originalImg) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.angle = angle;\r\n            this.img = originalImg;\r\n        }\r\n\r\n        void update() {\r\n            angle += 2;\r\n        }\r\n\r\n        void draw(Graphics2D g) {\r\n            int w = img.getWidth();\r\n            int h = img.getHeight();\r\n            g.rotate(Math.toRadians(angle), x + w / 2, y + h / 2);\r\n            g.drawImage(img, x, y, null);\r\n            g.rotate(-Math.toRadians(angle), x + w / 2, y + h / 2);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(""Touhou-esque Bullet Game"");\r\n        BulletGame game = new BulletGame();\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(800, 600);\r\n        frame.add(game);\r\n        frame.setVisible(true);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n\r\n        System.out.println(result);\r\n        sc.close();\r\n    }\r\n}\r\n\r\n/*\r\nTest Cases:\r\nInput 1:\r\nEnter the sentence\r\nDo you wear your mask\r\nOutput:\r\nmask ruoy raew uoy Do\r\n\r\nInput 2:\r\nEnter the sentence\r\nCard reader\r\nOutput:\r\nInvalid Length\r\n\r\nInput 3:\r\nEnter the sentence\r\nRefer @ friend\r\nOutput:\r\nRefer @ friend is an invalid sentence\r\n*/\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setOnShowing(e -> {\r\n            comboBox.lookup("".combo-box-popup"").getStyleClass().add(""yellowed-popup"");\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(getClass().getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup .list-view .list-cell {\r\n    -fx-background-color: yellow;\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"package app.components;\r\n\r\nimport java.io.IOException;\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\npublic class Custom extends VBox {\r\n\r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n\r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import app.components.Custom?>\r\n\r\n<Custom alignment=""CENTER"" xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-"" />\r\n   </children>\r\n</Custom>\r\n\r\njava\r\npackage app.controllers;\r\n\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class Menu {\r\n\r\n    @FXML private Custom cc;\r\n\r\n    public void initialize() {\r\n        cc.newText(""Test"");\r\n    }\r\n}\r\n\r\njava\r\npackage app;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        StackPane root = FXMLLoader.load(getClass().getResource(""views/fxml/Menu.fxml""));\r\n        Scene scene = new Scene(root, 400, 400);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.layout.StackPane?>\r\n<?import app.components.Custom?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""app.controllers.Menu"">\r\n    <children>\r\n        <Custom fx:id=""cc"" />\r\n    </children>\r\n</StackPane>\r\n"
0,1,misclassified_in_Test_1.csv.csv,"package application;\r\n\r\nimport javafx.animation.Interpolator;\r\nimport javafx.animation.Transition;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n\r\n        StackPane stack = new StackPane();\r\n        Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        text.setFont(Font.font(16));\r\n        stack.getChildren().add(text);\r\n\r\n        Color color1 = Color.RED;\r\n        Color color2 = Color.BLUE;\r\n\r\n        Transition transition = new Transition() {\r\n            {\r\n                setCycleDuration(Duration.seconds(2));\r\n                setInterpolator(Interpolator.EASE_BOTH);\r\n                setCycleCount(INDEFINITE);\r\n                setAutoReverse(true);\r\n            }\r\n\r\n            @Override\r\n            protected void interpolate(double frac) {\r\n                double r = color1.getRed() + (color2.getRed() - color1.getRed()) * frac;\r\n                double g = color1.getGreen() + (color2.getGreen() - color1.getGreen()) * frac;\r\n                double b = color1.getBlue() + (color2.getBlue() - color1.getBlue()) * frac;\r\n                text.setFill(new Color(r, g, b, 1.0));\r\n            }\r\n        };\r\n\r\n        transition.play();\r\n\r\n        root.setCenter(stack);\r\n        Scene scene = new Scene(root, 400, 400);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2OkHttpExample {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String RESOURCE_URL = ""https://example.com/api/resource"";\r\n\r\n    private static String getAccessToken() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        RequestBody formBody = new FormBody.Builder()\r\n                .add(""grant_type"", ""client_credentials"")\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(formBody)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            String responseBody = response.body().string();\r\n            return new org.json.JSONObject(responseBody).getString(""access_token"");\r\n        }\r\n    }\r\n\r\n    private static void callApi(String accessToken) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(RESOURCE_URL)\r\n                .addHeader(""Authorization"", ""Bearer "" + accessToken)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            System.out.println(response.body().string());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            String accessToken = getAccessToken();\r\n            callApi(accessToken);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.squareup.okhttp3</groupId>\r\n        <artifactId>okhttp</artifactId>\r\n        <version>4.12.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.json</groupId>\r\n        <artifactId>json</artifactId>\r\n        <version>20240303</version>\r\n    </dependency>\r\n</dependencies>\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\npublic class GoogleMapsEmbed extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        webView.getEngine().load(""file:///"" + System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n\r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setTitle(""Google Maps Test"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\nhtml\r\n<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n  <meta charset=""UTF-8"">\r\n  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n  <title>Google Maps Test</title>\r\n  <style>\r\n    #map {\r\n      height: 600px;\r\n      width: 100%;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div id=""map""></div>\r\n  <script>\r\n    function initMap() {\r\n      window.map = new google.maps.Map(document.getElementById(""map""), {\r\n        zoom: 15,\r\n        center: { lat: 32.99069195330653, lng: -106.97436738069189 },\r\n        mapTypeId: ""terrain"",\r\n      });\r\n    }\r\n  </script>\r\n  <script async defer \r\n    src=""https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"">\r\n  </script>\r\n</body>\r\n</html>\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignmentExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n            Set<String> fields = new HashSet<>();\r\n            classDeclaration.getFields().forEach(f -> f.getVariables().forEach(v -> fields.add(v.getNameAsString())));\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                Set<String> readAccess = new HashSet<>();\r\n                Set<String> writeAccess = new HashSet<>();\r\n\r\n                methodDeclaration.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        if (fields.contains(n.getNameAsString())) {\r\n                            readAccess.add(n.getNameAsString());\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(AssignmentExpr n, Void arg) {\r\n                        if (n.getTarget().isNameExpr()) {\r\n                            String target = n.getTarget().asNameExpr().getNameAsString();\r\n                            if (fields.contains(target)) {\r\n                                writeAccess.add(target);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        if (n.getExpression().isNameExpr()) {\r\n                            String target = n.getExpression().asNameExpr().getNameAsString();\r\n                            if (fields.contains(target)) {\r\n                                writeAccess.add(target);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n                }, null);\r\n\r\n                if (!readAccess.isEmpty()) {\r\n                    System.out.println(""    Read Access:"");\r\n                    readAccess.forEach(field -> System.out.println(""      "" + field));\r\n                }\r\n                if (!writeAccess.isEmpty()) {\r\n                    System.out.println(""    Write Access:"");\r\n                    writeAccess.forEach(field -> System.out.println(""      "" + field));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\njava\r\npublic class Example {\r\n\r\n    private int field1;\r\n    private String field2;\r\n\r\n    public void method1() {\r\n        field1 = 10;\r\n        field1++;\r\n        System.out.println(field2);\r\n    }\r\n\r\n    public void method2() {\r\n        field2 = ""Hello"";\r\n        String x = field2;\r\n    }\r\n}\r\n\r\n\r\nClass: Example\r\n  Method: method1\r\n    Read Access:\r\n      field2\r\n    Write Access:\r\n      field1\r\n  Method: method2\r\n    Read Access:\r\n      field2\r\n    Write Access:\r\n      field2\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.lang.annotation.*;\r\nimport java.lang.reflect.*;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\npublic @interface Annotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = YetAnotherClass.class)\r\n    private AnotherClass anotherAnnotatedAttribute;\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> value = annotation.className() == Object.class ? field.getType() : annotation.className();\r\n                System.out.printf(""Field: %s, Annotated class: %s%n"", field.getName(), value.getName());\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass AnotherClass {}\r\nclass YetAnotherClass {}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.sun.source.tree.*;\r\nimport com.sun.source.util.*;\r\n\r\nimport javax.annotation.processing.*;\r\nimport javax.lang.model.element.*;\r\nimport javax.lang.model.type.*;\r\nimport javax.lang.model.util.*;\r\nimport java.util.*;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\r\npublic class SwitchTypeAnalyzer extends AbstractProcessor {\r\n\r\n    private Trees trees;\r\n    \r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) return false;\r\n        \r\n        trees = Trees.instance(processingEnv);\r\n        \r\n        for (Element element : roundEnv.getRootElements()) {\r\n            if (element instanceof ExecutableElement) {\r\n                ExecutableElement method = (ExecutableElement) element;\r\n                MethodTree methodTree = (MethodTree) trees.getTree(method);\r\n                BlockTree blockTree = methodTree.getBody();\r\n                \r\n                for (StatementTree statementTree : blockTree.getStatements()) {\r\n                    if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                        SwitchTree switchTree = (SwitchTree) statementTree;\r\n                        ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                        TypeMirror type = trees.getTypeMirror(new TreePath(new TreePath(blockTree), switchTreeExpression));\r\n                        System.out.println(""Type of switchTreeExpression: "" + type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        // Test case code, this is just for illustrative purposes\r\n        // Add your Java file containing a switch statement to analyze its type\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public void createScatterChart() {\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series series1 = new XYChart.Series();\r\n\r\n    for (int i = 0; i < this.r.size(); i++) {\r\n        series1.getData().add(new XYChart.Data(this.r.get(i) * Math.cos(Math.toRadians(this.nodes.get(i))),\r\n                                               this.r.get(i) * Math.sin(Math.toRadians(this.nodes.get(i)))));\r\n    }\r\n\r\n    scatterChart.getData().add(series1);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(scatterChart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"// MainActivity.java\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button OpenBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n\r\n        OpenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// BottomSheetDialog.java\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable\r\n    ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.bottom_sheet_layout,\r\n                container, false);\r\n        \r\n        // Set height to match parent\r\n        ViewGroup.LayoutParams params = v.getLayoutParams();\r\n        params.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        v.setLayoutParams(params);\r\n        \r\n        return v;\r\n    }\r\n}\r\n\r\nxml\r\n<!-- bottom_sheet_layout.xml -->\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical"">\r\n    \r\n    <!-- Add your views here -->\r\n    <Button\r\n        android:id=""@+id/some_button""\r\n        android:layout_width=""wrap_content""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Click Me"" />\r\n</LinearLayout>\r\n\r\nxml\r\n<!-- activity_main.xml -->\r\n<Button\r\n    android:id=""@+id/open_bottom_sheet""\r\n    android:layout_width=""wrap_content""\r\n    android:layout_height=""wrap_content""\r\n    android:text=""Open Bottom Sheet""\r\n    android:layout_centerInParent=""true"" />\r\n\r\njava\r\n// Test case\r\nimport androidx.test.core.app.ActivityScenario;\r\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(AndroidJUnit4.class)\r\npublic class MainActivityTest {\r\n\r\n    @Test\r\n    public void testBottomSheetOpens() {\r\n        ActivityScenario.launch(MainActivity.class);\r\n\r\n        // Add your UI interactions and verifications here\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(""BUSINESS""))\r\n        .filter(object -> object.objectStatus().equals(""ACTIVE""))\r\n        .filter(object -> object.locale().equals(""en-US""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .map(CustomObject::getUrl)\r\n        .findFirst()\r\n        .orElseGet(() -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS""))\r\n            .sorted(Comparator.comparing(CustomObject::url))\r\n            .map(CustomObject::getUrl)\r\n            .findFirst()\r\n            .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND"")));\r\n}\r\n\r\njava\r\n@Test\r\nvoid testTransform() {\r\n    List<CustomObject> list = Arrays.asList(\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""en-US"", ""http://url1""),\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""en-US"", ""http://url2""),\r\n        new CustomObject(""BUSINESS"", ""INACTIVE"", ""en-US"", ""http://url3""),\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""fr-FR"", ""http://url4"")\r\n    );\r\n    \r\n    String result = new YourClass().transform(list);\r\n    assertEquals(""http://url2"", result);\r\n    \r\n    List<CustomObject> emptyList = Collections.emptyList();\r\n    assertThrows(RuntimeException.class, () -> new YourClass().transform(emptyList));\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        private final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(StyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.GREEN);\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(StyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.ORANGE);\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> restartTimeline());\r\n            color2.addListener((obs, o, v) -> restartTimeline());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) {\r\n                    if (timeline.get() != null) {\r\n                        timeline.get().play();\r\n                    }\r\n                } else {\r\n                    if (timeline.get() != null) {\r\n                        timeline.get().stop();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private void restartTimeline() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        private Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), Interpolator.LINEAR)),\r\n                new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), Interpolator.LINEAR))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n\r\n            return timeline;\r\n        }\r\n\r\n        static class StyleableProperties {\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(""-color1"", PaintConverter.getInstance(), Color.GREEN) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(""-color2"", PaintConverter.getInstance(), Color.ORANGE) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n\r\n    public static List<int[]> findPattern(int[][] T, int[][] P) {\r\n        List<int[]> result = new ArrayList<>();\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                boolean match = true;\r\n                for (int x = 0; x < u; x++) {\r\n                    for (int y = 0; y < v; y++) {\r\n                        if (P[x][y] != 0 && P[x][y] != T[i + x][j + y]) {\r\n                            match = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!match) break;\r\n                }\r\n                if (match) {\r\n                    result.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n        \r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> result = findPattern(T, P);\r\n        for (int[] position : result) {\r\n            System.out.println(""("" + position[0] + "","" + position[1] + "")"");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nInput:\r\nT = [\r\n    {2, 3, 4, 3, 6},\r\n    {4, 1, 5, 7, 8},\r\n    {9, 1, 2, 3, 1},\r\n    {2, 4, 5, 1, 5},\r\n    {3, 1, 9, 0, 2}\r\n]\r\nP = [\r\n    {2, 3, 0},\r\n    {0, 1, 5},\r\n    {9, 0, 2}\r\n]\r\n\r\nOutput:\r\n(0, 0)\r\n(2, 2)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"// HomeFragment.java\r\n\r\npublic class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private Query query;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> adapter;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext());\r\n        recyclerView.setLayoutManager(linearLayoutManager);\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        setQueryByOrder(""technology"", ""totalInvestors"");\r\n        fetchResult(query);\r\n\r\n        return v;\r\n    }\r\n\r\n    protected void setQueryByOrder(String choice, String order) {\r\n        query = FirebaseDatabase.getInstance()\r\n                .getReference()\r\n                .child(""Category_wise"").child(choice).orderByChild(order);\r\n    }\r\n\r\n    protected void fetchResult(Query query) {\r\n        FirebaseRecyclerOptions<SCard> options =\r\n                new FirebaseRecyclerOptions.Builder<SCard>()\r\n                        .setQuery(query, new SnapshotParser<SCard>() {\r\n                            @NonNull\r\n                            @Override\r\n                            public SCard parseSnapshot(@NonNull DataSnapshot snapshot) {\r\n                                return new SCard(\r\n                                        Objects.requireNonNull(snapshot.child(""companyName"").getValue()).toString(),\r\n                                        // Add other fields if necessary\r\n                                );\r\n                            }\r\n                        })\r\n                        .build();\r\n        adapter = new SCardAdapter<>(options);\r\n        adapter.startListening();\r\n        recyclerView.setAdapter(adapter);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        adapter.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        adapter.stopListening();\r\n    }\r\n}\r\n\r\n// SCardAdapter.java\r\n\r\npublic class SCardAdapter<M extends SCard, V extends SCardAdapter.ViewHolder> extends FirebaseRecyclerAdapter<SCard, V> {\r\n\r\n    FirebaseRecyclerOptions<SCard> options;\r\n\r\n    public SCardAdapter(@Nullable FirebaseRecyclerOptions<SCard> options) {\r\n        super(options);\r\n        this.options = options;\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(V holder, final int position, SCard model) {\r\n        holder.setName(model.getsName());\r\n        // Bind other fields if necessary\r\n    }\r\n\r\n    @Override\r\n    public V onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.startup_search_card, parent, false);\r\n        return (V) new ViewHolder(view);\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.springframework.context.i18n.LocaleContextHolder;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class CustomLocaleResolver extends CookieLocaleResolver {\r\n\r\n    private static final List<String> ALLOWED_LOCALES = Arrays.asList(""en"", ""hi"");\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String locale = request.getParameter(""locale"");\r\n        if (locale != null && !ALLOWED_LOCALES.contains(locale)) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n        }\r\n        return super.resolveLocale(request);\r\n    }\r\n\r\n    @Override\r\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\r\n        if (locale != null && !ALLOWED_LOCALES.contains(locale.getLanguage())) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale.getLanguage());\r\n        }\r\n        super.setLocale(request, response, locale);\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class CustomLocaleResolverTest {\r\n\r\n    private final CustomLocaleResolver localeResolver = new CustomLocaleResolver();\r\n\r\n    @Test\r\n    public void testValidLocale() {\r\n        MockHttpServletRequest request = new MockHttpServletRequest();\r\n        request.addParameter(""locale"", ""en"");\r\n        MockHttpServletResponse response = new MockHttpServletResponse();\r\n\r\n        localeResolver.resolveLocale(request);\r\n\r\n        assertEquals(""en"", response.getHeader(""Content-Language""));\r\n    }\r\n\r\n    @Test\r\n    public void testInvalidLocale() {\r\n        MockHttpServletRequest request = new MockHttpServletRequest();\r\n        request.addParameter(""locale"", ""fr"");\r\n        MockHttpServletResponse response = new MockHttpServletResponse();\r\n\r\n        assertThrows(IllegalArgumentException.class, () -> localeResolver.resolveLocale(request));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\npublic class Parent {\r\n    private Parent() {\r\n    }\r\n\r\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parent = constructor.newInstance();\r\n        System.out.println(""Parent object created: "" + parent);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU="";\r\n\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""Ed25519"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n\r\n        System.out.println(""Private Key: "" + pkey);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.*;\r\n\r\nclass LRUCache {\r\n    private int capacity;\r\n    private Map<Integer, Integer> cache;\r\n    private DoublyLinkedListNode head, tail;\r\n    \r\n    class DoublyLinkedListNode {\r\n        int key, value;\r\n        DoublyLinkedListNode prev, next;\r\n        DoublyLinkedListNode(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        cache = new HashMap<>();\r\n        head = new DoublyLinkedListNode(0, 0);\r\n        tail = new DoublyLinkedListNode(0, 0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n    \r\n    public int get(int key) {\r\n        if (cache.containsKey(key)) {\r\n            DoublyLinkedListNode node = cache.get(key);\r\n            remove(node);\r\n            insertAtFront(node);\r\n            return node.value;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        if (cache.containsKey(key)) {\r\n            DoublyLinkedListNode node = cache.get(key);\r\n            node.value = value;\r\n            remove(node);\r\n            insertAtFront(node);\r\n        } else {\r\n            if (cache.size() == capacity) {\r\n                DoublyLinkedListNode last = tail.prev;\r\n                remove(last);\r\n                cache.remove(last.key);\r\n            }\r\n            DoublyLinkedListNode newNode = new DoublyLinkedListNode(key, value);\r\n            cache.put(key, newNode);\r\n            insertAtFront(newNode);\r\n        }\r\n    }\r\n\r\n    private void remove(DoublyLinkedListNode node) {\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    private void insertAtFront(DoublyLinkedListNode node) {\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        LRUCache lru = new LRUCache(2);\r\n        lru.put(1, 1);\r\n        lru.put(2, 2);\r\n        System.out.println(lru.get(1)); // returns 1\r\n        lru.put(3, 3); // evicts key 2\r\n        System.out.println(lru.get(2)); // returns -1 (not found)\r\n        lru.put(4, 4); // evicts key 1\r\n        System.out.println(lru.get(1)); // returns -1 (not found)\r\n        System.out.println(lru.get(3)); // returns 3\r\n        System.out.println(lru.get(4)); // returns 4\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 75; \r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        drawImage(g);\r\n    }\r\n\r\n    private void drawImage(Graphics g) {\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) {\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if (rightPressed) {\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if (upPressed) {\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if (downPressed) {\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n\r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 20; \r\n        int newHeight = 20; \r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(500, 500);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n\r\n                frame.setLayout(null);\r\n\r\n                surface.setBounds(0, 0, 500, 500);\r\n                frame.add(surface);\r\n\r\n                blueDot.setBounds((int) (Math.random() * 450), 0, 500, 500);\r\n                frame.add(blueDot);\r\n\r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n\r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n\r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n\r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                             (currentValue >> 32) & 0xFFFF, \r\n                             (currentValue >> 16) & 0xFFF, \r\n                             currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n0000-7000-0001\r\n0000-7000-0002\r\n0000-7000-0003\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.util.regex.Pattern;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class TestPane extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = createSpinner();\r\n\r\n        VBox root = new VBox(10, new Text(""Spinner""), spinner);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Spinner<Double> createSpinner() {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        spinner.setEditable(true);\r\n\r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, 0.0, 0.25);\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        // Custom TextFormatter for spinner editor\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            Pattern validText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n            if (validText.matcher(newText).matches()) {\r\n                if (newText.length() > 0 && !newText.startsWith(""+"") && !newText.startsWith(""-"")) {\r\n                    c.setText(""+"" + newText);\r\n                }\r\n                return c;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        return spinner;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"Map<String, String> result = Flux.fromIterable(list)\r\n        .collectMap(a -> a.getName(),\r\n                b -> functionReturningMonoOfC(b)\r\n                        .map(C::url)\r\n                        .block())\r\n        .block();\r\n\r\njava\r\n@Test\r\nvoid testCollectMap() {\r\n    List<A> list = Arrays.asList(new A(""name1""), new A(""name2""));\r\n    Map<String, String> result = Flux.fromIterable(list)\r\n            .collectMap(a -> a.getName(),\r\n                    b -> Mono.just(new C(""url_"" + b.getName()))\r\n                            .map(C::url)\r\n                            .block())\r\n            .block();\r\n\r\n    assertEquals(2, result.size());\r\n    assertEquals(""url_name1"", result.get(""name1""));\r\n    assertEquals(""url_name2"", result.get(""name2""));\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Configuration\r\npublic class SecurityConfig {\r\n\r\n    private final UserDetailsService userDetailsService;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final String jwtSecret;\r\n    private final long accessTokenExpiredInDays;\r\n    private final long refreshTokenExpiredInDays;\r\n\r\n    public SecurityConfig(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder, \r\n                          String jwtSecret, long accessTokenExpiredInDays, long refreshTokenExpiredInDays) {\r\n        this.userDetailsService = userDetailsService;\r\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\r\n        this.jwtSecret = jwtSecret;\r\n        this.accessTokenExpiredInDays = accessTokenExpiredInDays;\r\n        this.refreshTokenExpiredInDays = refreshTokenExpiredInDays;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        CustomAuthenticationFilter customAuthenticationFilter = new CustomAuthenticationFilter(authenticationManager(http), \r\n            accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n        customAuthenticationFilter.setFilterProcessesUrl(""/api/login"");\r\n\r\n        http.csrf().disable()\r\n            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n            .and()\r\n            .authorizeRequests()\r\n                .antMatchers(""/error"").permitAll()\r\n                .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n                .anyRequest().authenticated()\r\n            .and()\r\n            .addFilter(customAuthenticationFilter)\r\n            .addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n                   .userDetailsService(userDetailsService)\r\n                   .passwordEncoder(bCryptPasswordEncoder)\r\n                   .and()\r\n                   .build();\r\n    }\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void testLoginEndpointAccessible() throws Exception {\r\n        mockMvc.perform(post(""/api/login"")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(""{\""username\"": \""testuser\"", \""password\"": \""password\""}""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testSecuredEndpoint() throws Exception {\r\n        mockMvc.perform(get(""/api/secure"")\r\n                .header(""Authorization"", ""Bearer valid_jwt_token""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testUnauthorizedAccess() throws Exception {\r\n        mockMvc.perform(get(""/api/secure""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javax.net.ssl.*;\r\nimport java.io.*;\r\nimport java.security.*;\r\nimport java.security.cert.CertificateException;\r\nimport java.security.cert.X509Certificate;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport redis.clients.jedis.*;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        testWithTls();\r\n    }\r\n\r\n    public static void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo"")); // prints bar\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\nbash\r\n   redis-server --tls-port 6379 --port 0 --tls-cert-file /tls/redis.crt --tls-key-file /tls/redis.key --tls-ca-cert-file /tls/ca.crt --loglevel warning\r\n   "
0,1,misclassified_in_Test_1.csv.csv,"import org.objectweb.asm.*;\r\n\r\npublic class MethodInstrumenter extends MethodVisitor {\r\n    public MethodInstrumenter(MethodVisitor mv) {\r\n        super(Opcodes.ASM9, mv);\r\n    }\r\n\r\n    private void instrument() {\r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_1);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n        instrument();\r\n    }\r\n}\r\n\r\npublic class ClassVisitorExample extends ClassVisitor {\r\n    public ClassVisitorExample(ClassVisitor cv) {\r\n        super(Opcodes.ASM9, cv);\r\n    }\r\n\r\n    @Override\r\n    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\r\n        MethodVisitor mv = cv.visitMethod(access, name, descriptor, signature, exceptions);\r\n        return new MethodInstrumenter(mv);\r\n    }\r\n}\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        add(1, 2);\r\n    }\r\n\r\n    public static int add(int a, int b) {\r\n        int sum = a + b;\r\n        return sum;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private List<String> transactionsList;\r\n\r\n    public List<String> getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(List<String> transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public int getTotalCount() {\r\n        return totalCount;\r\n    }\r\n\r\n    public void setTotalCount(int totalCount) {\r\n        this.totalCount = totalCount;\r\n    }\r\n\r\n    public int getResponseCode() {\r\n        return responseCode;\r\n    }\r\n\r\n    public void setResponseCode(int responseCode) {\r\n        this.responseCode = responseCode;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{\n"" +\r\n                ""\""payLoad\"": [\n"" +\r\n                ""    {\n"" +\r\n                ""      \""id\"": 1,\n"" +\r\n                ""      \""userName\"": null,\n"" +\r\n                ""      \""arName\"": \""A1\"",\n"" +\r\n                ""      \""areas\"": []\n"" +\r\n                ""    },\n"" +\r\n                ""    {\n"" +\r\n                ""      \""id\"": 2,\n"" +\r\n                ""      \""userName\"": \""alpha2\"",\n"" +\r\n                ""      \""arName\"": \""A2\"",\n"" +\r\n                ""      \""areas\"": []\n"" +\r\n                ""    }\n"" +\r\n                ""  ],\n"" +\r\n                ""\""count\"": 2,\n"" +\r\n                ""\""respCode\"": 200\n"" +\r\n                ""}"";\r\n\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n\r\n        System.out.println(responseRcvd.getTransactionsList());\r\n    }\r\n}\r\n\r\njava\r\n{\r\n    ""payLoad"": [\r\n        {\r\n            ""id"": 1,\r\n            ""userName"": null,\r\n            ""arName"": ""A1"",\r\n            ""areas"": []\r\n        },\r\n        {\r\n            ""id"": 2,\r\n            ""userName"": ""alpha2"",\r\n            ""arName"": ""A2"",\r\n            ""areas"": []\r\n        }\r\n    ],\r\n    ""count"": 2,\r\n    ""respCode"": 200\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn(""2025-03-15T00:00:00Z"");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, mock(DeserializationContext.class));\r\n\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyString() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, mock(DeserializationContext.class));\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, mock(DeserializationContext.class)));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\n\r\npublic class MainExample {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        options.setLogLevel(org.openqa.selenium.logging.LogLevel.ALL);\r\n\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(""https://www.google.com"");\r\n\r\n        LogEntries entries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : entries) {\r\n            System.out.println(entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Value(""${security.jwt.secret}"")\r\n    private String jwtSecret;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n        http.exceptionHandling((exceptions) -> exceptions.defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n            .oauth2ResourceServer((resourceServer) -> resourceServer.jwt(Customizer.withDefaults()));\r\n\r\n        http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(\r\n                    authorize -> authorize.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n            .formLogin(formLogin -> formLogin.loginPage(""/login"").permitAll())\r\n            .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\n        http.csrf(csrf -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n                .keyID(""customKey"")\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                System.out.println(""No keys found matching selection criteria!"");\r\n            } else {\r\n                System.out.println(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n    }\r\n}\r\n\r\nproperties\r\nsecurity.jwt.secret=r26BoWWyTQMp/8rkD3RnRKsbHkRsmQWjTvJTfmhrQxU=\r\n\r\njava\r\n@Test\r\npublic void testJwtEncoding() {\r\n    JwtEncoder encoder = jwtEncoder();\r\n    JwtDecoder decoder = jwtDecoder();\r\n\r\n    // Create a simple JWT\r\n    Map<String, Object> claims = new HashMap<>();\r\n    claims.put(""sub"", ""user"");\r\n\r\n    Jwt jwt = encoder.encode(JwtEncoderParameters.from(claims).build());\r\n\r\n    // Decode it back\r\n    Jwt decodedJwt = decoder.decode(jwt.getTokenValue());\r\n\r\n    assertNotNull(decodedJwt);\r\n    assertEquals(""user"", decodedJwt.getClaim(""sub""));\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    String name;\r\n    String motive;\r\n\r\n    @Value(""Adventure of War"")\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    @Value(""A place for War"")\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        ApplicationContext IOC = new AnnotationConfigApplicationContext(""gd.rf.anuragsaini.stereotype"");\r\n        Company c1 = IOC.getBean(Company.class);\r\n        System.out.println(c1);\r\n    }\r\n}\r\n\r\nxml\r\n<!-- config.xml -->\r\n<context:component-scan base-package=""gd.rf.anuragsaini.stereotype""/>\r\n\r\nbash\r\nSetting Company Name\r\nSetting Company Motive\r\nCompany{name='Adventure of War', motive='A place for War'}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Base64;\r\nimport org.apache.commons.codec.binary.Hex;\r\n\r\npublic class AESFileEncryption {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Path keyPath = Paths.get(""/home/debashishd/Downloads/s_key"");\r\n        byte[] keyBytes = Files.readAllBytes(keyPath);\r\n        \r\n        String testMessage = ""Hello this is Roxane"";\r\n        \r\n        // AES Encryption\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(new byte[16]));\r\n        \r\n        String encryptedValue = Base64.getEncoder().encodeToString(cipher.doFinal(testMessage.getBytes()));\r\n        System.out.println(""Encrypted value: "" + encryptedValue);\r\n        \r\n        // AES Decryption\r\n        Cipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(new byte[16]));\r\n        \r\n        String decryptedValue = new String(decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue)));\r\n        System.out.println(""Decrypted value: "" + decryptedValue);\r\n    }\r\n}\r\n\r\njava\r\nEncrypted value: jvggHDPa58+/zQ+HyGUEk/ypndXbatE+b+hBBqiinABOIwxJ7FXqnDb5j813fPwwm/D6d2Y2uh+k4qD77QMqOg==\r\nDecrypted value: Hello this is Roxane\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    // outputData will be written to Redis (memorystore)\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n              .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                  .withConnectionConfiguration(CustomRedisConfigurations\r\n                          .create(REDIS_HOST, port)\r\n                          .withTimeout(100)\r\n                          .withAuth(""credentials"")\r\n                          .enableSSL()));\r\n    pipeline.run();\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"// Controller.java\r\npackage com.example.demo;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.ComboBox;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Test implements Initializable {\r\n    @FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(""Back-end"", ""Front-end"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(""Java"", ""PHP"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(""HTML"", ""CSS"", ""Javascript"");\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n        DevelopmentType.setValue(""Back-end"");\r\n        DevelopmentTypeEvent();\r\n    }\r\n\r\n    public void DevelopmentTypeEvent() {\r\n        if (DevelopmentType.getValue().equals(""Back-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n            LanguageProgramming.getSelectionModel().clearSelection();\r\n        } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n            LanguageProgramming.getSelectionModel().clearSelection();\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<!-- test.fxml -->\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.ComboBox?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n\r\n<AnchorPane prefHeight=""400.0"" prefWidth=""600.0"" xmlns=""http://javafx.com/javafx/20.0.1"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""com.example.demo.Test"">\r\n   <children>\r\n      <ComboBox fx:id=""DevelopmentType"" layoutX=""75.0"" layoutY=""62.0"" onAction=""#DevelopmentTypeEvent"" prefHeight=""26.0"" prefWidth=""218.0"" promptText=""Select a development type"" />\r\n      <ComboBox fx:id=""LanguageProgramming"" layoutX=""75.0"" layoutY=""98.0"" prefHeight=""26.0"" prefWidth=""217.0"" promptText=""Select a language programming"" />\r\n   </children>\r\n</AnchorPane>\r\n\r\njava\r\n// Test case - Main.java\r\npackage com.example.demo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            Parent root = FXMLLoader.load(this.getClass().getResource(""test.fxml""));\r\n            Scene scene = new Scene(root);\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"// CustomResponseBodyAdvice.java\r\n@RestControllerAdvice\r\npublic class CustomResponseBodyAdvice implements ResponseBodyAdvice<Object> {\r\n    @Override\r\n    public boolean supports(final @NotNull MethodParameter returnType,\r\n                            final @NotNull Class<? extends HttpMessageConverter<?>> converterType) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Object beforeBodyWrite(final Object body,\r\n                                  final @NotNull MethodParameter returnType,\r\n                                  final @NotNull MediaType selectedContentType,\r\n                                  final @NotNull Class<? extends HttpMessageConverter<?>> selectedConverterType,\r\n                                  final @NotNull ServerHttpRequest request,\r\n                                  final @NotNull ServerHttpResponse response) {\r\n        if (body instanceof ResponseEnvelope || body instanceof Resource) {\r\n            return body;\r\n        }\r\n        if (body instanceof final ResponseEntity<?> responseEntity) {\r\n            response.setStatusCode(responseEntity.getStatusCode());\r\n        }\r\n        return ResponseEnvelope.builder().success(true).result(body).build();\r\n    }\r\n}\r\n\r\n// UserController.java\r\n@RestController\r\npublic class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    public UserController(final UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @PostMapping(""/users"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<UserDto> create(final @RequestBody @Valid CreateUserCommand command) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(userService.create(command));\r\n    }\r\n}\r\n\r\n// ResponseEnvelope.java\r\n@Data\r\n@Builder\r\npublic class ResponseEnvelope<T> {\r\n    private boolean success;\r\n    private T result;\r\n}\r\n\r\n// Springdoc OpenAPI configuration\r\n@Configuration\r\npublic class SpringDocConfig {\r\n    @Bean\r\n    public OpenAPI customOpenAPI() {\r\n        return new OpenAPI()\r\n                .components(new Components()\r\n                        .addResponses(""ResponseEnvelope"", new ApiResponse().content(new Content()\r\n                                .addMediaType(""application/json"", new MediaType()\r\n                                        .schema(new Schema().$ref(""#/components/schemas/ResponseEnvelope"")))));\r\n    }\r\n}\r\n\r\n// TestController.java (for testing purposes)\r\n@Test\r\npublic void testCreateUser() throws Exception {\r\n    CreateUserCommand command = new CreateUserCommand(""johndoe"");\r\n    UserDto userDto = new UserDto(""johndoe"");\r\n\r\n    given(userService.create(any())).willReturn(userDto);\r\n\r\n    mockMvc.perform(post(""/users"")\r\n            .contentType(MediaType.APPLICATION_JSON)\r\n            .content(""{\""username\"":\""johndoe\""}""))\r\n            .andExpect(status().isCreated())\r\n            .andExpect(jsonPath(""$.success"").value(true))\r\n            .andExpect(jsonPath(""$.result.username"").value(""johndoe""));\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class Interceptor implements ServerInterceptor {\r\n\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n\r\njava\r\npackage interceptorserver;\r\n\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\n\r\npublic class InterceptorTest {\r\n    @Test\r\n    public void testInterceptorIsServerInterceptor() {\r\n        Interceptor interceptor = new Interceptor();\r\n        assertTrue(interceptor instanceof io.grpc.ServerInterceptor);\r\n    }\r\n}\r\n\r\nbash\r\n./start-connect-server.sh \\r\n    --packages org.apache.spark:spark-connect_2.12:3.4.1 \\r\n    --jars Interceptor.jar \\r\n    --conf spark.connect.grpc.interceptor.classes=interceptorserver.Interceptor\r\n"
0,1,misclassified_in_Test_1.csv.csv,"private <T> void positionEntity(Class<T> clazz, Object... params) {\r\n    int x, y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = clazz.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class)\r\n                        .newInstance(x, y, params[0], params[1], sizeX, sizeY);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\npublic void positionMagician() {\r\n    positionEntity(Magician.class, player, field);\r\n}\r\n\r\npublic void positionGoblin() {\r\n    positionEntity(Goblin.class, player, field);\r\n}\r\n\r\njava\r\n@Test\r\npublic void testPositionEntity() {\r\n    positionEntity(Magician.class, player, field);\r\n    assertTrue(field.getFieldable(magicianX, magicianY) instanceof Magician);\r\n\r\n    positionEntity(Goblin.class, player, field);\r\n    assertTrue(field.getFieldable(goblinX, goblinY) instanceof Goblin);\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"spring:\r\n  elasticsearch:\r\n    uris: \r\n      - https://localhost:9700\r\n    username: elastic\r\n    password: 123\r\n    ssl:\r\n      enabled: true\r\n      key-store: classpath:your-keystore.jks\r\n      key-store-password: your-keystore-password\r\n      trust-store: classpath:your-truststore.jks\r\n      trust-store-password: your-truststore-password\r\n\r\njava\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\nimport org.elasticsearch.client.RequestOptions;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestHighLevelClient;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\nimport org.springframework.data.elasticsearch.core.query.Query;\r\n\r\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.conn.ssl.SSLContextBuilder;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Bean\r\n    public RestHighLevelClient client() throws Exception {\r\n        PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager();\r\n        CloseableHttpClient httpClient = HttpClients.custom()\r\n                .setSSLContext(SSLContextBuilder.create().loadTrustMaterial(new File(""your-truststore.jks""), ""your-truststore-password"".toCharArray()))\r\n                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)\r\n                .setConnectionManager(poolingHttpClientConnectionManager)\r\n                .build();\r\n        return new RestHighLevelClient(\r\n                RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n                        .setHttpClientConfigCallback(httpClientConfig -> httpClient)\r\n        );\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchTemplate elasticsearchTemplate() throws Exception {\r\n        return new ElasticsearchTemplate(client());\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\nimport org.springframework.data.elasticsearch.core.query.Query;\r\nimport org.springframework.data.elasticsearch.core.query.QueryBuilder;\r\n\r\n@SpringBootTest\r\npublic class ElasticsearchConfigTest {\r\n\r\n    @Autowired\r\n    private ElasticsearchTemplate elasticsearchTemplate;\r\n\r\n    @Test\r\n    void testElasticsearchConnection() {\r\n        Query query = new QueryBuilder().build();\r\n        elasticsearchTemplate.queryForList(""test_index"", query, Object.class);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\nimport java.util.*;\r\n\r\npublic class Task implements Runnable {\r\n    private static final Map<String, Lock> lockMap = new ConcurrentHashMap<>();\r\n    private final String x;\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        return lockMap.computeIfAbsent(key, k -> new ReentrantLock());\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock l = getLock(x);\r\n        try {\r\n            l.lock();\r\n            System.out.println(x);\r\n\r\n            try {\r\n                Thread.sleep(5000);\r\n            } catch (InterruptedException ex) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n\r\n        } finally {\r\n            l.unlock();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n\r\n        executor.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javax.xml.bind.JAXBElement;\r\nimport javax.xml.ws.BindingProvider;\r\nimport javax.xml.ws.WebServiceFeature;\r\nimport javax.xml.ws.soap.MTOMFeature;\r\nimport javax.xml.ws.soap.SOAPBinding;\r\n\r\npublic class MdfeClient {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectFactory of = new ObjectFactory();\r\n        String soapBody = ""<soap:Envelope xmlns:soap=\""http://www.w3.org/2003/05/soap-envelope\"" xmlns:mdf=\""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc\"">"" +\r\n                ""<soap:Header/>"" +\r\n                ""<soap:Body>"" +\r\n                ""<mdf:mdfeDadosMsg>"" +\r\n                ""<![CDATA[<your_soap_body_here>]]>"" +\r\n                ""</mdf:mdfeDadosMsg>"" +\r\n                ""</soap:Body>"" +\r\n                ""</soap:Envelope>"";\r\n        \r\n        JAXBElement<String> jaxb = of.createMdfeDadosMsg(soapBody);\r\n\r\n        MDFeRecepcaoSinc recepcao = new MDFeRecepcaoSinc();\r\n        MDFeRecepcaoSincSoap12 soap = recepcao.getMDFeRecepcaoSincSoap12(new MTOMFeature(true));\r\n\r\n        // Set up the digital certificate and SSL context here (as per your certificate settings)\r\n        BindingProvider bindingProvider = (BindingProvider) soap;\r\n        bindingProvider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ""https://mdfe.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx"");\r\n\r\n        MDFeRecepcaoResult result = soap.mdfeRecepcao(jaxb.getValue());\r\n\r\n        System.out.println(result.getRetMDFe());  // Adjust this if needed to print out specific parts\r\n    }\r\n}\r\n\r\njava\r\npublic class MdfeClientTest {\r\n\r\n    @Test\r\n    public void testMdfeRecepcao() throws Exception {\r\n        MdfeClient client = new MdfeClient();\r\n        client.main(null);  // You can further verify the output\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class PdfGenerator {\r\n    public static void main(String[] args) throws Exception {\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>?????? ???</h3>\n"" +\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        String path = ""A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        renderer.setDocumentFromString(htmlString);\r\n        \r\n        // Set the font for Cyrillic support\r\n        renderer.getFontResolver().addFont(""path/to/your/font.ttf"", true);\r\n        \r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        byteArrayOutputStream.writeTo(outputStream);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.Random;\r\n\r\nclass Card {\r\n    String value;\r\n    String suit;\r\n\r\n    Card(String value, String suit) {\r\n        this.value = value;\r\n        this.suit = suit;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return value + "" of "" + suit;\r\n    }\r\n}\r\n\r\npublic class CardShuffle {\r\n    public static void main(String[] args) {\r\n        Card[] unshuffledDeck = new Card[]{\r\n            new Card(""2"", ""Hearts""),\r\n            new Card(""3"", ""Hearts""),\r\n            new Card(""4"", ""Hearts""),\r\n            new Card(""5"", ""Hearts""),\r\n            new Card(""6"", ""Hearts"")\r\n        };\r\n\r\n        Card[] shuffledDeck = shuffleDeck(unshuffledDeck);\r\n\r\n        for (Card card : shuffledDeck) {\r\n            System.out.println(card);\r\n        }\r\n    }\r\n\r\n    public static Card[] shuffleDeck(Card[] unshuffledDeck) {\r\n        Random shuffleRandom = new Random();\r\n        Card[] shuffledDeck = new Card[unshuffledDeck.length];\r\n        boolean[] picked = new boolean[unshuffledDeck.length];\r\n\r\n        for (int i = 0; i < unshuffledDeck.length; i++) {\r\n            int j;\r\n            do {\r\n                j = shuffleRandom.nextInt(unshuffledDeck.length);\r\n            } while (picked[j]);\r\n            shuffledDeck[i] = unshuffledDeck[j];\r\n            picked[j] = true;\r\n        }\r\n\r\n        return shuffledDeck;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\npublic class JUnit5Suite {\r\n\r\n  @RegisterExtension\r\n  public static JUnit5Server MY_SERVER = new JUnit5Server();\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n  private static boolean initialized = false;\r\n\r\n  @Override\r\n  public void beforeAll(ExtensionContext context) throws Exception {\r\n    if (!initialized) {\r\n      // start the server\r\n      MY_SERVER.publish();\r\n      initialized = true;\r\n    }\r\n  }\r\n\r\n  @Override\r\n  public void afterAll(ExtensionContext context) throws Exception {\r\n    // stop the server\r\n  }\r\n}\r\n\r\npublic class FirstTest {\r\n  @Test\r\n  void test1() {\r\n    assertTrue(true);\r\n  }\r\n}\r\n\r\npublic class SecondTest {\r\n  @Test\r\n  void test2() {\r\n    assertTrue(true);\r\n  }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .doOnNext(analysis -> analysis.setResults(results))\r\n            .flatMap(computeSCARepository::save)\r\n            .then();\r\n}\r\n\r\n@PatchMapping(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\n// Test Case\r\n@Test\r\npublic void testUpdateAnalysisWithResults() {\r\n    String uuid = ""test-uuid"";\r\n    String results = ""new-results"";\r\n\r\n    Analysis analysis = new Analysis();\r\n    analysis.setUuid(uuid);\r\n\r\n    when(computeSCARepository.save(any(Analysis.class))).thenReturn(Mono.just(analysis));\r\n    when(computeSCAService.findByUUID(uuid)).thenReturn(Mono.just(analysis));\r\n\r\n    StepVerifier.create(computeSCAService.updateAnalysisWithResults(uuid, results))\r\n            .verifyComplete();\r\n\r\n    verify(computeSCARepository).save(any(Analysis.class));\r\n    assertEquals(""new-results"", analysis.getResults());\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(true); \r\n        marshaller.setMarshallerProperties(Map.of(\r\n            ""com.sun.xml.bind.xmlHeaders"", ""<soapenv:Envelope xmlns:soapenv=\""http://schemas.xmlsoap.org/soap/envelope/\"" xmlns:urn=\""http://my.company.com/xsd/portals/v4_0\""><soapenv:Header/><soapenv:Body>"",\r\n            ""com.sun.xml.bind.v2.runtime.MarshallerImpl.PRETTY_PRINT"", ""true""\r\n        ));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\njava\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    DataHandler dataHandler = new DataHandler(documentData, ""application/pdf"");\r\n    binaryData.setBlob(dataHandler);\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\njava\r\n@Component\r\n@Log4j2\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Override\r\n    public void sendDocuments(MyRequest request) {\r\n        try {\r\n            template.marshalSendAndReceive(request);\r\n        } catch (Exception e) {\r\n            log.error(e, e.getCause());\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\npublic class MyRequestTest {\r\n\r\n    @Test\r\n    public void testSendDocuments() {\r\n        byte[] documentData = ""VeryLongDataBlobInHere"".getBytes(StandardCharsets.UTF_8);\r\n        BinaryData binaryData = buildBinaryData(documentData);\r\n\r\n        MyRequest request = new MyRequest();\r\n        request.setDocumentList(Collections.singletonList(new DocumentList(binaryData)));\r\n\r\n        MyServiceProperties properties = new MyServiceProperties();\r\n        properties.setTargetUrl(""http://localhost:8080/soap"");\r\n\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(true);\r\n\r\n        MySoapClient client = new MySoapClient(properties, marshaller);\r\n        client.sendDocuments(request);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,btnGenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        value1 = Long.parseLong(txtFirst.getText().toString());\r\n        value2 = Long.parseLong(txtSecond.getText().toString());\r\n        for (long i = value1; i <= value2; i++) {\r\n            list.add(String.valueOf(i));\r\n            li.setAdapter(arrayAdapter);\r\n        }\r\n    }\r\n});\r\n
0,1,misclassified_in_Test_1.csv.csv,"import org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class ExcelExport {\r\n    public static void main(String[] args) {\r\n        exportXls();\r\n    }\r\n\r\n    private static void exportXls() {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             Workbook wb = new HSSFWorkbook()) {\r\n            \r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class EthereumSignatureVerifier {\r\n    public static boolean verifySignature(String publicAddress, String message, String signature) {\r\n        byte[] messageHash = Sign.getEthereumMessageHash(message.getBytes(StandardCharsets.UTF_8));\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) {\r\n            return false;\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v,\r\n                Arrays.copyOfRange(signatureBytes, 0, 32),\r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        for (int i = 0; i < 2; i++) {\r\n            BigInteger recoveredKey = Sign.signedMessageHashToKey(messageHash, signatureData);\r\n            String recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\n            if (recoveredAddress.equalsIgnoreCase(publicAddress)) {\r\n                return true;\r\n            }\r\n            signatureData = new Sign.SignatureData(\r\n                    (byte) (signatureData.getV() ^ 1),\r\n                    signatureData.getR(),\r\n                    signatureData.getS()\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String publicAddress = ""0xYourPublicWalletAddress"";\r\n        String message = ""random_nonce_here"";\r\n        String signature = ""0xSignedMessageFromMetamask"";\r\n\r\n        boolean isValid = verifySignature(publicAddress, message, signature);\r\n        System.out.println(""Signature valid: "" + isValid);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.List;\r\nimport java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic class AggregationExample {\r\n    public enum AggregationType {\r\n        MIN(DoubleStream::min),\r\n        MAX(DoubleStream::max),\r\n        AVERAGE(DoubleStream::average);\r\n\r\n        private final Function<DoubleStream, java.util.OptionalDouble> aggregator;\r\n\r\n        AggregationType(Function<DoubleStream, java.util.OptionalDouble> aggregator) {\r\n            this.aggregator = aggregator;\r\n        }\r\n\r\n        public java.util.OptionalDouble apply(DoubleStream stream) {\r\n            return aggregator.apply(stream);\r\n        }\r\n    }\r\n\r\n    private final List<Double> provides = List.of(1.0, 2.0, 3.0, 4.0, 5.0);\r\n\r\n    public Float someFunction(AggregationType e) {\r\n        return (float) e.apply(provides.stream().mapToDouble(Double::doubleValue)).orElse(-1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        AggregationExample example = new AggregationExample();\r\n        System.out.println(""Min: "" + example.someFunction(AggregationType.MIN));\r\n        System.out.println(""Max: "" + example.someFunction(AggregationType.MAX));\r\n        System.out.println(""Average: "" + example.someFunction(AggregationType.AVERAGE));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<E, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CoreNonCoreModules {\r\n    public static void main(String[] args) {\r\n        Map<String, String> moduleClassLoaders = new HashMap<>();\r\n\r\n        ModuleFinder.ofSystem().findAll().forEach(moduleReference -> {\r\n            String moduleName = moduleReference.descriptor().name();\r\n            try {\r\n                Class<?> cls = Class.forName(moduleName + "".module-info"");\r\n                ClassLoader cl = cls.getClassLoader();\r\n                moduleClassLoaders.put(moduleName, cl == null ? ""BootLoader"" : cl.getClass().getSimpleName());\r\n            } catch (ClassNotFoundException ignored) {\r\n                moduleClassLoaders.put(moduleName, ""Unknown"");\r\n            }\r\n        });\r\n\r\n        moduleClassLoaders.forEach((module, classLoader) ->\r\n            System.out.println(module + "" -> "" + classLoader)\r\n        );\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMyyyy"")\r\n                .toFormatter(Locale.forLanguageTag(""es""));\r\n\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", formatter);\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.Cursor;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setCursor(Cursor.NONE);\r\n\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""TextArea Cursor Test"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.Arrays;\r\n\r\npublic class ExcelFormulaTranslator {\r\n    public static String translateFormula(String formula, String originalAddress, String destinationAddress) throws Exception {\r\n        try (XSSFWorkbook wb = (XSSFWorkbook) WorkbookFactory.create(true)) {\r\n            Ptg[] ptgs = FormulaParser.parse(formula, (FormulaRenderingWorkbook) wb, 0, 0);\r\n            for (Ptg ptg : ptgs) {\r\n                if (ptg instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                    ((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).setRow(((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).getRow() + getRowOffset(originalAddress, destinationAddress));\r\n                    ((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).setColumn(((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).getColumn() + getColumnOffset(originalAddress, destinationAddress));\r\n                }\r\n            }\r\n            return FormulaParser.toFormulaString((FormulaRenderingWorkbook) wb, ptgs);\r\n        }\r\n    }\r\n\r\n    private static int getRowOffset(String original, String destination) {\r\n        return Integer.parseInt(destination.replaceAll(""[A-Z]"", """")) - Integer.parseInt(original.replaceAll(""[A-Z]"", """"));\r\n    }\r\n\r\n    private static int getColumnOffset(String original, String destination) {\r\n        return columnToIndex(destination.replaceAll(""[0-9]"", """")) - columnToIndex(original.replaceAll(""[0-9]"", """"));\r\n    }\r\n\r\n    private static int columnToIndex(String column) {\r\n        int index = 0;\r\n        for (char c : column.toCharArray()) {\r\n            index = index * 26 + (c - 'A' + 1);\r\n        }\r\n        return index - 1;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String[][] testCases = {\r\n                {""=(A2+B2)"", ""C2"", ""C3"", ""=(A3+B3)""},\r\n                {""=(A2+B2)"", ""C2"", ""D2"", ""=(B2+C2)""},\r\n                {""=(A2+$B$2)"", ""C2"", ""D10"", ""=(B10+$B$2)""},\r\n                {""=(SheetA2!A2+B2)"", ""C2"", ""C3"", ""=(SheetA2!A3+B3)""},\r\n                {""=IF(A2=A3,A4,A5)"", ""A6"", ""C6"", ""=IF(C2=C3,C4,C5)""}\r\n        };\r\n\r\n        for (String[] testCase : testCases) {\r\n            String translatedFormula = translateFormula(testCase[0], testCase[1], testCase[2]);\r\n            System.out.println(""Input: "" + testCase[0] + "" | Expected: "" + testCase[3] + "" | Output: "" + translatedFormula);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFile {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            raf.write(""123456789"".getBytes());\r\n        }\r\n        try (RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            raf.seek(0);\r\n            raf.write(""hello"".getBytes());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.beans.property.SimpleStringProperty;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.util.Callback;\r\nimport java.net.URL;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class CollectionController implements javafx.fxml.Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n\r\n        authorDirectorColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<LibraryItem, String>, ObservableValue<String>>() {\r\n            @Override\r\n            public ObservableValue<String> call(TableColumn.CellDataFeatures<LibraryItem, String> param) {\r\n                LibraryItem item = param.getValue();\r\n                if (item instanceof Book) {\r\n                    return new SimpleStringProperty(((Book) item).getAuthor());\r\n                } else if (item instanceof Movie) {\r\n                    return new SimpleStringProperty(((Movie) item).getDirector());\r\n                }\r\n                return new SimpleStringProperty("""");\r\n            }\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import static org.mockito.Mockito.*;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\npublic class DataSourceFailureTest {\r\n    private DataSource dataSource;\r\n    private AtomicInteger counter;\r\n\r\n    @BeforeEach\r\n    public void setup() throws SQLException {\r\n        dataSource = mock(DataSource.class);\r\n        counter = new AtomicInteger(0);\r\n\r\n        when(dataSource.getConnection()).thenAnswer(invocation -> {\r\n            if (counter.incrementAndGet() % 3 == 0) { \r\n                throw new SQLException(""Simulated transient connection failure"");\r\n            }\r\n            Connection connection = mock(Connection.class);\r\n            when(connection.isValid(anyInt())).thenReturn(true);\r\n            return connection;\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testConnectionRetries() {\r\n        for (int i = 0; i < 10; i++) {\r\n            try {\r\n                Connection connection = dataSource.getConnection();\r\n                System.out.println(""Connection successful"");\r\n            } catch (SQLException e) {\r\n                System.err.println(""Connection failed: "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\npublic class PriceServiceTest {\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price price;\r\n    private PriceRequest request;\r\n\r\n    @BeforeEach\r\n    public void setup() {\r\n        MockitoAnnotations.openMocks(this);\r\n        priceUuid = UUID.randomUUID();\r\n        price = new Price();\r\n        price.setUuid(priceUuid);\r\n        price.setPriceAmount(100.0);\r\n\r\n        request = new PriceRequest();\r\n        request.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    public void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(price));\r\n        when(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO updatedDto = priceService.update(priceUuid, request);\r\n\r\n        assertNotNull(updatedDto);\r\n        assertEquals(150.0, updatedDto.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(price);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@SpringBootApplication\r\n@EnableMongoRepositories(basePackages = ""com.repository.mongo"", repositoryImplementationPostfix = ""MongoImpl"")\r\n@EnableRedisRepositories(basePackages = ""com.repository.redis"", repositoryImplementationPostfix = ""RedisImpl"")\r\npublic class StoreApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n\r\njava\r\npackage com.repository.mongo;\r\npublic interface PersistencyRepository extends MongoRepository<Store, String> {}\r\n\r\njava\r\npackage com.repository.redis;\r\npublic interface CacheRepository extends CrudRepository<Store, String> {}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"var taskbarList3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\nhr = ITaskbarList.QueryInterface.invoke(taskbarListVtbl, iidTaskbarList3, taskbarList3PtrToPtr);\r\nif (hr != ShObjIdl_core_h.S_OK()) {\r\n    throw new RuntimeException(""QueryInterface for ITaskbarList3 failed with error code: "" + hr);\r\n}\r\nvar taskbar3Ptr = taskbarList3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\nvar taskbarList3Instance = ITaskbarList3.reinterpret(taskbar3Ptr, arena, _ -> {});\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public void copyDatabaseFromAssets() {\r\n    Context context = requireContext();\r\n    AssetManager assetManager = context.getAssets();\r\n    \r\n    File databasesFolder = new File(context.getDataDir(), ""databases"");\r\n    if (!databasesFolder.exists()) {\r\n        databasesFolder.mkdirs();\r\n    }\r\n\r\n    try {\r\n        String[] files = assetManager.list(""database/test"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                File outFile = new File(databasesFolder, filename);\r\n                if (!outFile.exists()) {\r\n                    try (InputStream in = assetManager.open(""database/test/"" + filename);\r\n                         OutputStream out = new FileOutputStream(outFile)) {\r\n                        byte[] buffer = new byte[1024];\r\n                        int read;\r\n                        while ((read = in.read(buffer)) != -1) {\r\n                            out.write(buffer, 0, read);\r\n                        }\r\n                        out.flush();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""DatabaseCopy"", ""Failed to copy database file"", e);\r\n    }\r\n}\r\n\r\n// Test case\r\npublic void testDatabaseCopy() {\r\n    copyDatabaseFromAssets();\r\n    File dbFile = new File(requireContext().getDataDir(), ""databases/test.db"");\r\n    if (dbFile.exists()) {\r\n        Log.i(""Test"", ""Database copied successfully"");\r\n    } else {\r\n        Log.e(""Test"", ""Database copy failed"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10; i++) {\r\n            measurePerformance();\r\n        }\r\n    }\r\n\r\n    private static void measurePerformance() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\n\r\npublic class ScaledBackgroundPanel extends JPanel {\r\n    private final BufferedImage image;\r\n\r\n    public ScaledBackgroundPanel(BufferedImage image) {\r\n        this.image = image;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        if (image != null) {\r\n            int panelWidth = getWidth();\r\n            int panelHeight = getHeight();\r\n\r\n            double imgAspect = (double) image.getWidth() / image.getHeight();\r\n            double panelAspect = (double) panelWidth / panelHeight;\r\n\r\n            int drawWidth, drawHeight, x, y;\r\n\r\n            if (panelAspect > imgAspect) {\r\n                drawHeight = panelHeight;\r\n                drawWidth = (int) (drawHeight * imgAspect);\r\n                x = (panelWidth - drawWidth) / 2;\r\n                y = 0;\r\n            } else {\r\n                drawWidth = panelWidth;\r\n                drawHeight = (int) (drawWidth / imgAspect);\r\n                x = 0;\r\n                y = (panelHeight - drawHeight) / 2;\r\n            }\r\n\r\n            g.drawImage(image, x, y, drawWidth, drawHeight, this);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Scaled Background Test"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setSize(800, 600);\r\n\r\n            BufferedImage dummyImage = new BufferedImage(1280, 859, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g2d = dummyImage.createGraphics();\r\n            g2d.setColor(Color.BLUE);\r\n            g2d.fillRect(0, 0, 1280, 859);\r\n            g2d.dispose();\r\n\r\n            frame.setContentPane(new ScaledBackgroundPanel(dummyImage));\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.stream.IntStream;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\n\r\npublic class VirtualThreadDemo {\r\n\r\n    static class Task implements java.util.concurrent.Callable<String> {\r\n        private final int taskId;\r\n\r\n        Task(int taskId) {\r\n            this.taskId = taskId;\r\n        }\r\n\r\n        @Override\r\n        public String call() {\r\n            System.out.println(""Task: "" + taskId + "" started"");\r\n            StopWatch stopWatch = StopWatch.createStarted();\r\n            String result = null;\r\n            try (Connection connection = DriverManager.getConnection(\r\n                    ""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n                System.out.println(""Task: "" + taskId + "" connection established"");\r\n                var statement = connection.createStatement();\r\n                System.out.println(""Task: "" + taskId + "" executes SQL statement"");\r\n                ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n                while (resultSet.next()) {\r\n                    result = resultSet.getString(""output"");\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n            stopWatch.stop();\r\n            System.out.println(""Task: "" + taskId + "" completed in "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            List<Future<String>> futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(Task::new)\r\n                    .map(executorService::submit)\r\n                    .toList();\r\n\r\n            for (Future<String> future : futures) {\r\n                future.get();\r\n            }\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(""The total time of execution was: "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n    }\r\n}\r\n\r\nsql\r\nDELIMITER //\r\nCREATE FUNCTION hello_world()\r\nRETURNS VARCHAR(255)\r\nDETERMINISTIC\r\nBEGIN\r\n    RETURN 'Hello, World!';\r\nEND //\r\nDELIMITER ;\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T, R extends TaskResult<T>> {\r\n    R make();\r\n}\r\n\r\nclass TaskResult<T> {\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make(){\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make(){\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(V::make)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n\r\n        alphaResults.forEach(result -> System.out.println(""Alpha result: "" + result.value));\r\n        betaResults.forEach(result -> System.out.println(""Beta result: "" + result.value));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n\r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n\r\n        int exitVal = p.waitFor();\r\n        System.out.println(""Exited with error code "" + exitVal);\r\n\r\n        p.destroy();\r\n\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    List<String> output = runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\n    if (output != null) {\r\n        output.forEach(System.out::println);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(""[""); // array begin\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write("","");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    \r\n    respWriter.write(""]""); // array end\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\n                Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n                .build()) {\r\n\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""/data.tsv"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public interface Util {\r\n    void getClient();\r\n}\r\n\r\n@Service(""utilOne"")\r\npublic class UtilOne implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilOne client"");\r\n    }\r\n}\r\n\r\n@Service(""utilTwo"")\r\npublic class UtilTwo implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilTwo client"");\r\n    }\r\n}\r\n\r\n@Component\r\npublic class UtilProvider {\r\n\r\n    @Autowired\r\n    private ApplicationContext context;\r\n\r\n    private Util currentUtil;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        switchUtil(""utilOne""); // default implementation\r\n    }\r\n\r\n    public void switchUtil(String beanName) {\r\n        this.currentUtil = context.getBean(beanName, Util.class);\r\n    }\r\n\r\n    public Util getUtil() {\r\n        return currentUtil;\r\n    }\r\n}\r\n\r\n@Component\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilProvider utilProvider;\r\n\r\n    public void useClient() {\r\n        utilProvider.getUtil().getClient();\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/switch"")\r\npublic class SwitchController {\r\n\r\n    @Autowired\r\n    private UtilProvider utilProvider;\r\n\r\n    @PostMapping(""/{beanName}"")\r\n    public void switchUtil(@PathVariable String beanName) {\r\n        utilProvider.switchUtil(beanName);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class CircularSearch {\r\n\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) return true;\r\n            if (mat[row][col] > num) col--;\r\n            else row++;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            {10, 20, 30, 40},\r\n            {15, 25, 35, 45},\r\n            {27, 29, 37, 48},\r\n            {32, 33, 39, 50}\r\n        };\r\n        System.out.println(search(mat, 22)); // true\r\n        System.out.println(search(mat, 23)); // false\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\r\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\r\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {            \r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);         \r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            addPageBreak();\r\n            for (XWPFParagraph para : src1Document.getParagraphs()) {\r\n                first.createParagraph().getCTP().set(para.getCTP());\r\n            }\r\n        }        \r\n    }\r\n\r\n    private void addPageBreak() {\r\n        XWPFParagraph paragraph = first.createParagraph();\r\n        XWPFRun run = paragraph.createRun();\r\n        run.addBreak(org.apache.poi.xwpf.usermodel.BreakType.PAGE);\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);                \r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        try (FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"")) {\r\n            WordMerge wm = new WordMerge(faos);\r\n            wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n            wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n            wm.doMerge();\r\n            wm.close();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.PasswordFactory;\r\nimport org.wildfly.security.password.WildFlyElytronPasswordProvider;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordSpec;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        String maskedPassword = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        String[] parts = maskedPassword.substring(5).split("";"");\r\n        byte[] initialKeyMaterial = parts[0].getBytes();\r\n        byte[] salt = parts[1].getBytes();\r\n        int iterationCount = Integer.parseInt(parts[2]);\r\n\r\n        MaskedPasswordSpec maskedPasswordSpec = new MaskedPasswordSpec(initialKeyMaterial, salt, iterationCount);\r\n        PasswordFactory passwordFactory = PasswordFactory.getInstance(MaskedPassword.ALGORITHM_MASKED);\r\n        Password storePassword = passwordFactory.generatePassword(maskedPasswordSpec);\r\n\r\n        CredentialStore.ProtectionParameter protectionParameter =\r\n                new CredentialStore.CredentialSourceProtectionParameter(\r\n                        () -> new PasswordCredential(storePassword));\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"");\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"mvn spring-boot:run -Dspring-boot.run.jvmArguments=""-Xdebug --spring.config.additional-location=file:.env"" -Dspring-boot.run.profiles=dev\r\n\r\nxml\r\n<dependency>\r\n    <groupId>io.github.cdimascio</groupId>\r\n    <artifactId>dotenv-java</artifactId>\r\n    <version>2.2.0</version>\r\n</dependency>\r\n\r\njava\r\nimport io.github.cdimascio.dotenv.Dotenv;\r\n\r\npublic static void main(String[] args) {\r\n    Dotenv dotenv = Dotenv.load();\r\n    System.setProperty(""DB_NAME"", dotenv.get(""DB_NAME""));\r\n    System.setProperty(""DB_USERNAME"", dotenv.get(""DB_USERNAME""));\r\n    System.setProperty(""DB_PASSWORD"", dotenv.get(""DB_PASSWORD""));\r\n    SpringApplication.run(Application.class, args);\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Named\r\npublic class MyCamelRouteBuilder extends RouteBuilder {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n    private static final String JOB_METHOD_NAME = ""xyz"";\r\n\r\n    private final MyJob myJob;\r\n\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        super();\r\n        this.myJob = myJob;\r\n    }\r\n\r\n    @Override\r\n    public void configure() {\r\n        fromF(""direct:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n\r\n        fromF(""master:some_name_1/some_name_2:scheduler:%s?delay=%s"", JOB_NAME, 1234)\r\n            .routeId(""JobTimer"")\r\n            .toF(""seda:%s"", JOB_NAME)\r\n            .end();\r\n\r\n        fromF(""seda:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME + ""-seda"")\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n    }\r\n}\r\n\r\n@Named\r\npublic class MyJob {\r\n\r\n    public MyJob() {}\r\n\r\n    public void xyz() {\r\n        System.out.println(""Job executed"");\r\n    }\r\n}\r\n\r\n@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(\r\n            ProducerTemplate producerTemplate\r\n    ) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.requestBody(""seda:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public class MyFragment extends Fragment {\r\n\r\n    private LinearLayout parentLayout;\r\n    private Button addProduct;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View root = inflater.inflate(R.layout.fragment_layout, container, false);\r\n\r\n        parentLayout = root.findViewById(R.id.ll_out);\r\n        addProduct = root.findViewById(R.id.btn_prd);\r\n\r\n        addProduct.setOnClickListener(v -> addNewProduct());\r\n\r\n        return root;\r\n    }\r\n\r\n    private void addNewProduct() {\r\n        LinearLayout productLayout = (LinearLayout) getLayoutInflater().inflate(R.layout.product_row, parentLayout, false);\r\n\r\n        AutoCompleteTextView tvProduct = productLayout.findViewById(R.id.tv_product);\r\n        EditText prodQty = productLayout.findViewById(R.id.prod_qty);\r\n        EditText prodPrice = productLayout.findViewById(R.id.prod_price);\r\n        EditText prodSpecs = productLayout.findViewById(R.id.prod_specs);\r\n        Button deleteButton = new Button(getContext());\r\n        deleteButton.setText(""X"");\r\n        deleteButton.setOnClickListener(v -> parentLayout.removeView(productLayout));\r\n\r\n        productLayout.addView(deleteButton);\r\n        parentLayout.addView(productLayout);\r\n    }\r\n}\r\n\r\nxml\r\n<LinearLayout\r\n    xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""wrap_content""\r\n    android:orientation=""horizontal""\r\n    android:padding=""5dp"">\r\n\r\n    <AutoCompleteTextView\r\n        android:id=""@+id/tv_product""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Enter Product"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_qty""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Enter Quantity""\r\n        android:inputType=""number"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_price""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Prod Price""\r\n        android:inputType=""none"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_specs""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Prod Specs""\r\n        android:inputType=""none"" />\r\n</LinearLayout>\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\nimport javax.crypto.Cipher;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\nimport org.bouncycastle.operator.OperatorCreationException;\r\n\r\npublic class RSACrypto {\r\n\r\n    private static PrivateKey loadEncryptedPrivateKey(String path, String passphrase) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(new File(path)))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            JcePEMDecryptorProviderBuilder decryptorProvider = new JcePEMDecryptorProviderBuilder();\r\n            PEMKeyPair keyPair = ((PEMKeyPair) object).decryptKeyPair(decryptorProvider.build(passphrase.toCharArray()));\r\n            \r\n            return new JcaPEMKeyConverter().getKeyPair(keyPair).getPrivate();\r\n        }\r\n    }\r\n\r\n    private static String encrypt(String plainText, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\r\n        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n\r\n    private static String decrypt(String encryptedText, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA"");\r\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));\r\n        return new String(decryptedBytes, StandardCharsets.UTF_8);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String passphrase = ""your-passphrase"";\r\n        String privateKeyPath = ""path-to-your-private-key.pem"";\r\n        PrivateKey privateKey = loadEncryptedPrivateKey(privateKeyPath, passphrase);\r\n\r\n        String originalMessage = ""Hello, World!"";\r\n        String encrypted = encrypt(originalMessage, privateKey);\r\n        System.out.println(""Encrypted: "" + encrypted);\r\n\r\n        String decrypted = decrypt(encrypted, privateKey);\r\n        System.out.println(""Decrypted: "" + decrypted);\r\n    }\r\n}\r\n\r\nxml\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcprov-jdk15on</artifactId>\r\n    <version>1.70</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcpkix-jdk15on</artifactId>\r\n    <version>1.70</version>\r\n</dependency>\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.net.MalformedURLException;\r\n\r\npublic class EmojiApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws MalformedURLException {\r\n        String emojiFontPath = new File(""/path/to/NotoColorEmoji-Regular.ttf"").toURI().toURL().toExternalForm();\r\n        Font emojiFont = Font.loadFont(emojiFontPath, 18);\r\n        \r\n        TextArea ta = new TextArea(""?? ?? ?? ?? ?? ??"");\r\n        ta.setFont(emojiFont);\r\n\r\n        Scene scene = new Scene(ta, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Emoji Test"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.setProperty(""prism.text"", ""t2k"");\r\n        System.setProperty(""prism.lcdtext"", ""false"");\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"@Test\r\nvoid testCase() throws ItemAlreadyCreatedException {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(data.itemName())).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    String expectedMessage = ""There is an item created with this name"";\r\n    String actualMessage = ex.getMessage();\r\n\r\n    assertEquals(expectedMessage, actualMessage);\r\n    verify(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, \r\n                 CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        String[] header = {""TestInput"", ""ExpectedOutput"", ""TestOutput"", ""ErrorMessage""};\r\n        writer.writeNext(header);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput() != null && !testCase.getTestOutput().isEmpty()) {\r\n                for (Map<String, Object> output : testCase.getTestOutput()) {\r\n                    String testOutput = output.toString();\r\n                    String[] row = {testInput, expectedOutput, testOutput, errorMessage};\r\n                    writer.writeNext(row);\r\n                }\r\n            } else {\r\n                String[] row = {testInput, expectedOutput, """", errorMessage};\r\n                writer.writeNext(row);\r\n            }\r\n        }\r\n\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"private void bfs(String source) {\r\n    level = new int[nodes.size()];\r\n    Arrays.fill(level, -1);\r\n    int sourceIndex = nodes.indexOf(source);\r\n    level[sourceIndex] = 0;\r\n\r\n    Queue<Integer> queue = new LinkedList<>();\r\n    queue.offer(sourceIndex);\r\n\r\n    while (!queue.isEmpty()) {\r\n        int u = queue.poll();\r\n        String uNode = nodes.get(u);\r\n        for (Map.Entry<String, Integer> entry : network.get(uNode).entrySet()) {\r\n            String vNode = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int v = nodes.indexOf(vNode);\r\n            if (capacity > 0 && level[v] == -1) {\r\n                level[v] = level[u] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate int dfs(int u, int flow, int sinkIndex) {\r\n    if (u == sinkIndex) {\r\n        return flow;\r\n    }\r\n\r\n    String uNode = nodes.get(u);\r\n    for (Map.Entry<String, Integer> entry : network.get(uNode).entrySet()) {\r\n        String vNode = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        int v = nodes.indexOf(vNode);\r\n\r\n        if (capacity > 0 && level[u] < level[v]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sinkIndex);\r\n            if (sent > 0) {\r\n                network.get(uNode).put(vNode, capacity - sent);\r\n                network.get(vNode).put(uNode, network.get(vNode).getOrDefault(uNode, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\npublic int calculator(Map<T, Set<T>> graph) {\r\n    nodes = new ArrayList<>();\r\n    nodes.add(""src"");\r\n    nodes.add(""sink"");\r\n    network.clear();\r\n\r\n    for (T t : graph.keySet()) {\r\n        String tKey = ""A"" + t.toString();\r\n        addEdge(""src"", tKey, 1);\r\n        addEdge(""B"" + t, ""sink"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(tKey, u, 1);\r\n        }\r\n    }\r\n\r\n    int maxFlow = 0;\r\n    int sourceIndex = nodes.indexOf(""src"");\r\n    int sinkIndex = nodes.indexOf(""sink"");\r\n\r\n    while (true) {\r\n        bfs(""src"");\r\n        if (level[sinkIndex] == -1) {\r\n            break;\r\n        }\r\n\r\n        int flow;\r\n        while ((flow = dfs(sourceIndex, Integer.MAX_VALUE, sinkIndex)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n\r\n    return graph.size() - maxFlow;\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import android.app.Notification;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.Ringtone;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.Handler;\r\nimport android.os.VibrationEffect;\r\nimport android.os.Vibrator;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\n\r\npublic class AlarmReceiver extends BroadcastReceiver {\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Intent stopIntent = new Intent(context, StopReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\n\r\npublic class StopReceiver extends BroadcastReceiver {\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        AlarmReceiver.stopRingtone();\r\n    }\r\n}\r\n\r\nxml\r\n<receiver android:name="".AlarmReceiver"" />\r\n<receiver android:name="".StopReceiver"" />\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        int[] array = {6, 2, 8, 1, 3, 0, 9, 7};\r\n        Scanner in = new Scanner(System.in);\r\n\r\n        System.out.print(""Search for? "");\r\n        int searching = in.nextInt();\r\n        boolean found = false;\r\n\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + "" is at index "" + i + ""."");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            System.out.println(searching + "" was not found."");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nSearch for? 1\r\n\r\n\r\n1 is at index 3.\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\n\r\npublic class LineChartExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.getData().add(new XYChart.Data<>(1, 5));\r\n        series1.getData().add(new XYChart.Data<>(2, 7));\r\n        series1.getData().add(new XYChart.Data<>(3, 6));\r\n        lineChart.getData().add(series1);\r\n\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.getData().add(new XYChart.Data<>(1, 3));\r\n        series2.getData().add(new XYChart.Data<>(2, 6));\r\n        series2.getData().add(new XYChart.Data<>(3, 8));\r\n        lineChart.getData().add(series2);\r\n\r\n        series1.getNode().setStyle(""-fx-stroke: red;"");\r\n        series2.getNode().setStyle(""-fx-stroke: blue;"");\r\n\r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"public String generateJwtToken(Authentication authentication, String subdomain) {\r\n    UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(""tenant"", subdomain)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n}\r\n\r\npublic String getTenantFromJwtToken(String token) {\r\n    return Jwts.parser()\r\n            .setSigningKey(jwtSecret)\r\n            .parseClaimsJws(token)\r\n            .getBody()\r\n            .get(""tenant"", String.class);\r\n}\r\n\r\njava\r\npublic JwtResponse authenticateUser(String subdomain, LoginRequest loginRequest) {\r\n    Authentication authentication = authenticationManager.authenticate(\r\n            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\r\n    \r\n    SecurityContextHolder.getContext().setAuthentication(authentication);\r\n    String jwt = jwtUtils.generateJwtToken(authentication, subdomain);\r\n\r\n    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\r\n    List<String> roles = userDetails.getAuthorities().stream()\r\n            .map(GrantedAuthority::getAuthority)\r\n            .collect(Collectors.toList());\r\n\r\n    return new JwtResponse(jwt, userDetails.getId(), userDetails.getUsername(), roles);\r\n}\r\n\r\njava\r\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\r\n        throws ServletException, IOException {\r\n    try {\r\n        String jwt = parseJwt(request);\r\n        if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\r\n            String username = jwtUtils.getUserNameFromJwtToken(jwt);\r\n            String tenant = jwtUtils.getTenantFromJwtToken(jwt);\r\n\r\n            String serverName = request.getServerName();\r\n            String subdomain = serverName.substring(0, serverName.indexOf("".""));\r\n\r\n            if (!tenant.equals(subdomain)) {\r\n                throw new IllegalArgumentException(""Tenant mismatch"");\r\n            }\r\n\r\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\r\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\r\n                    userDetails, null, userDetails.getAuthorities());\r\n            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    filterChain.doFilter(request, response);\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass AuthControllerTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    void testAuthenticateUser() throws Exception {\r\n        String subdomain = ""example"";\r\n        String username = ""testuser"";\r\n        String password = ""password"";\r\n\r\n        LoginRequest loginRequest = new LoginRequest(username, password);\r\n\r\n        mockMvc.perform(post(""/auth/signin"")\r\n                        .requestAttr(""subdomain"", subdomain)\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(new ObjectMapper().writeValueAsString(loginRequest)))\r\n                .andExpect(status().isOk())\r\n                .andExpect(jsonPath(""$.accessToken"").exists());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.util.Scanner;\r\n\r\nclass Board {\r\n    private Scanner scan = new Scanner(System.in);\r\n\r\n    public String inputTake() {\r\n        String guess;\r\n        do {\r\n            System.out.println(""choose a word, pick carefully: "");\r\n            guess = scan.next();\r\n        } while (!checkInput(guess));\r\n        return guess;\r\n    }\r\n\r\n    private boolean checkInput(String input) {\r\n        if (input.length() != 5 || !input.matches(""[a-zA-Z]+"")) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n\r\n\r\nchoose a word, pick carefully:  \r\nhello  \r\nYour guess: hello  \r\n\r\nchoose a word, pick carefully:  \r\nhe12o  \r\nmake sure your guess consists of 5 english letters, try again.  \r\nchoose a word, pick carefully:  \r\nworld  \r\nYour guess: world  \r\n"
0,1,misclassified_in_Test_1.csv.csv,"package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Lazy;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService frenchLanguageService;\r\n    private final LanguageService englishLanguageService;\r\n\r\n    private LanguageService languageService;\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    public LanguageController(@Qualifier(""french"") @Lazy LanguageService frenchLanguageService,\r\n                              @Qualifier(""english"") @Lazy LanguageService englishLanguageService) {\r\n        this.frenchLanguageService = frenchLanguageService;\r\n        this.englishLanguageService = englishLanguageService;\r\n    }\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        if (""french"".equalsIgnoreCase(configuration)) {\r\n            this.languageService = frenchLanguageService;\r\n        } else if (""english"".equalsIgnoreCase(configuration)) {\r\n            this.languageService = englishLanguageService;\r\n        }\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n\r\n\r\nconfiguration=french\r\n\r\n\r\ncurl 'http://localhost:8080/test?name=John'\r\nBonjour John\r\n\r\n\r\ncurl 'http://localhost:8080/test?name=John'\r\nWelcome John\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CsvReader {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        FileReader fileReader = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n        BufferedReader br = new BufferedReader(fileReader);\r\n\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n        String line;\r\n        int ext = 0;\r\n\r\n        while ((line = br.readLine()) != null) {\r\n            if (ext == 0) {\r\n                headers = Arrays.asList(line.split("",""));\r\n            } else {\r\n                String[] values = line.split("","");\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                for (int i = 0; i < headers.size(); i++) {\r\n                    myRecord.put(headers.get(i), values[i]);\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            ext++;\r\n        }\r\n\r\n        br.close();\r\n\r\n        // Print table for verification\r\n        for (HashMap<String, String> record : myTable) {\r\n            System.out.println(record);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nTransactionNumber,TransactionType,Amount,TransactionDate,TransactionRemarks\r\n123456,Credit,4000,07/10/2021,Salary Credited\r\n123333,Debit,7000,05/10/2021,Fuel\r\n123446,Credit,3000,01/10/2021,Refund\r\n\r\n\r\n{TransactionNumber=123456, TransactionType=Credit, Amount=4000, TransactionDate=07/10/2021, TransactionRemarks=Salary Credited}\r\n{TransactionNumber=123333, TransactionType=Debit, Amount=7000, TransactionDate=05/10/2021, TransactionRemarks=Fuel}\r\n{TransactionNumber=123446, TransactionType=Credit, Amount=3000, TransactionDate=01/10/2021, TransactionRemarks=Refund}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import org.springframework.http.server.reactive.ServerHttpResponse;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long requestTime = System.nanoTime();\r\n\r\n        return chain.filter(exchange)\r\n                .doOnSuccess(unused -> addTimingHeader(exchange.getResponse(), ""server-timing-success"", requestTime))\r\n                .doOnError(error -> addTimingHeader(exchange.getResponse(), ""server-timing-error"", requestTime))\r\n                .doFinally(signal -> addTimingHeader(exchange.getResponse(), ""server-timing-finally"", requestTime));\r\n    }\r\n\r\n    private void addTimingHeader(ServerHttpResponse response, String header, long requestTime) {\r\n        long deltaTime = System.nanoTime() - requestTime;\r\n        response.getHeaders().add(header, Long.toString(deltaTime));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"I have a python script that reads in data from a csv file\r\nThe code runs fine, but everytime it runs I get this Deprecation message:\r\nDeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\r\n\r\nthe warning stems from this piece of code:\r\nfprice = df.groupby(['StartDate', 'Commodity', 'DealType']).apply(lambda group: -(group['MTMValue'].sum() - (group['FixedPriceStrike'] * group['Quantity']).sum()) / group['Quantity'].sum()).reset_index(name='FloatPrice')\r\n\r\nto my understanding, I am performing the apply function on my groupings,but then I am disregarding the groupings and not using them anymore to be apart of my dataframe. I am confused about the directions to silence the warning\r\nhere is some sample data that this code uses:\r\nTradeID  TradeDate  Commodity  StartDate   ExpiryDate FixedPrice Quantity MTMValue\r\n-------- ---------- ---------  ---------   ---------- ---------- -------- ---------\r\n aaa   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00 \r\n bbb   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00 \r\n ccc   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00  \r\n\r\nand here is the expected output from this data:\r\nTradeID  TradeDate  Commodity  StartDate   ExpiryDate FixedPrice Quantity MTMValue  FloatPrice\r\n-------- ---------- ---------  ---------   ---------- ---------- -------- --------- ----------\r\n aaa   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0\r\n bbb   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0\r\n ccc   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0 \r\n\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right."
0,1,misclassified_in_Test_1.csv.csv,"from sqlalchemy.orm import DeclarativeBase, mapped_column\r\nfrom sqlalchemy import Integer, String\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = 'user'\r\n    id = mapped_column(Integer, primary_key=True)\r\n    name = mapped_column(String)\r\n\r\npython\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.orm import Session\r\n\r\nengine = create_engine(""sqlite:///:memory:"")\r\nBase.metadata.create_all(engine)\r\n\r\nwith Session(engine) as session:\r\n    user = User(id=1, name='Alice')\r\n    session.add(user)\r\n    session.commit()\r\n\r\n    result = session.query(User).filter_by(name='Alice').first()\r\n    assert result.id == 1\r\n"
0,1,misclassified_in_Test_1.csv.csv,import sys\r\n\r\nprint(sys.getsizeof(''))         # 41  \r\nprint(sys.getsizeof('H'))        # 42  \r\nprint(sys.getsizeof('Hi'))       # 43  \r\nprint(sys.getsizeof('ÃÂ'))        # 61  \r\nprint(sys.getsizeof('ÃÂl'))       # 59  \r\n
0,1,misclassified_in_Test_1.csv.csv,"# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""tests.db_session_fixtures"", ""tests.dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    return ""DB session created""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe():\r\n    return {""data"": [1, 2, 3]}\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe):\r\n    assert my_dataframe[""data""] == [1, 2, 3]\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    assert db_session == ""DB session created""\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(""This line is now executed"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(""Caught CancelledError, cleaning up..."")\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_1.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Pytest"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""module"": ""pytest"",\r\n            ""console"": ""integratedTerminal"",\r\n            ""justMyCode"": false,\r\n            ""env"": {\r\n                ""PYTHONUNBUFFERED"": ""1""\r\n            },\r\n            ""redirectOutput"": true\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"# user.py\r\nfrom typing import List, Optional, TYPE_CHECKING\r\nfrom sqlmodel import SQLModel, Field, Relationship\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    age: Optional[int] = None\r\n    bought_items: List[""Item""] = Relationship(back_populates=""owner"")\r\n\r\n# item.py\r\nfrom typing import Optional, TYPE_CHECKING\r\nfrom sqlmodel import SQLModel, Field, Relationship\r\n\r\nif TYPE_CHECKING:\r\n    from user import User\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n    owner_id: Optional[int] = Field(default=None, foreign_key=""user.id"")\r\n    owner: Optional[""User""] = Relationship(back_populates=""bought_items"")\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""id"": 1, ""age"": 30, ""bought_items"": []}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"spouse = {\r\n    ""John"": ""Jane"",\r\n    ""David"": ""Alice""\r\n}.get(name, None)\r\n\r\nprint(spouse)\r\n\r\npython\r\ndef get_spouse(name):\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            return None\r\n\r\nspouse = get_spouse(name)\r\nprint(spouse)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\nfor col in df.columns:\r\n    if col.endswith('_a'):\r\n        base_col = col[:-2]\r\n        if base_col in df.columns:\r\n            df[base_col] = df[base_col].fillna(df[col])\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(str, enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        return cls.__members__.get(value)\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${workspaceFolder}/your_script.py"",\r\n            ""cwd"": ""C:/absolute/path/to/data/root"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter the relative data directory""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import torch\r\nimport torchvision.transforms as T\r\nfrom PIL import Image\r\n\r\nmodel = torch.hub.load(""pytorch/vision:v0.10.0"", ""u2net"", pretrained=True)\r\nmodel.eval()\r\n\r\ndef preprocess_image(image_path):\r\n    image = Image.open(image_path).convert(""RGB"")\r\n    transform = T.Compose([\r\n        T.Resize((320, 320)),\r\n        T.ToTensor(),\r\n    ])\r\n    return transform(image).unsqueeze(0)\r\n\r\nimage_tensor = preprocess_image(""your_image.jpg"")\r\nwith torch.no_grad():\r\n    output = model(image_tensor)\r\n\r\nprint(output.shape)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import pandas as pd\r\n\r\ndata = {\r\n    ""Num"": [""AA-24""],\r\n    ""TP1(USD)"": [0], ""TP2(USD)"": [700], ""TP3(USD)"": [2100],\r\n    ""VReal1(USD)"": [300], ""VReal2(USD)"": [1159], ""VReal3(USD)"": [2877],\r\n    ""TiV1 (EUR)"": [30], ""TiV2 (EUR)"": [30], ""TiV3 (EUR)"": [47],\r\n    ""TR"": [10], ""TR-Tag"": [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ndf_result = pd.DataFrame({\r\n    ""ID"": range(1, 4),\r\n    ""Price"": df.filter(like=""TP"").values.flatten(),\r\n    ""Net"": df.filter(like=""VReal"").values.flatten(),\r\n    ""Range"": df.filter(like=""TiV"").values.flatten()\r\n})\r\n\r\nprint(df_result)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import numpy as np\r\n\r\ndef calculate_Fourier(points, num_coefficients):\r\n    complex_points = np.array([p[0] + 1j * p[1] for p in points])\r\n\r\n    N = len(complex_points)\r\n    t = np.arange(N) / N\r\n\r\n    c_k = np.zeros(num_coefficients, dtype=np.complex128)\r\n\r\n    for k in range(-num_coefficients//2, num_coefficients//2):\r\n        c_k[k + num_coefficients//2] = np.sum(\r\n            complex_points * np.exp(-2j * np.pi * k * t)\r\n        ) / N\r\n    \r\n    return c_k\r\n\r\ndef reconstruct_curve(coefficients, num_points):\r\n    t = np.linspace(0, 1, num_points)\r\n    curve = np.zeros(num_points, dtype=np.complex128)\r\n\r\n    num_coefficients = len(coefficients)\r\n    for k in range(-num_coefficients//2, num_coefficients//2):\r\n        curve += coefficients[k + num_coefficients//2] * np.exp(2j * np.pi * k * t)\r\n\r\n    return curve\r\n\r\nimport matplotlib.pyplot as plt\r\nimport imageio\r\nfrom Contour_Classifier import contours\r\n\r\npng_files = []\r\nnum_points = len(contours[0])\r\n\r\nfor i in range(1, num_points + 1):\r\n    coefficients = calculate_Fourier(contours[0], i)\r\n    curve = reconstruct_curve(coefficients, num_points)\r\n\r\n    plt.figure(figsize=(8, 8))\r\n    plt.plot(curve.real, curve.imag, label=""Trajectory"", color=""blue"")\r\n    plt.scatter(0, 0, color=""black"", label=""Origin"")\r\n    plt.axis(""equal"")\r\n    plt.title(f""Fourier Series with {i} Coefficients"")\r\n    plt.xlabel(""Real Part (X)"")\r\n    plt.ylabel(""Imaginary Part (Y)"")\r\n    plt.legend()\r\n    plt.text(-0.5, -0.5, f""Using {i} coefficients"", fontsize=12, color=""red"")\r\n\r\n    filename = f""fourier_{i}_coefficients.png""\r\n    plt.savefig(filename)\r\n    plt.close()\r\n\r\n    png_files.append(filename)\r\n\r\ngif_filename = ""fourier_series.gif""\r\nwith imageio.get_writer(gif_filename, mode='I', duration=0.5) as writer:\r\n    for filename in png_files:\r\n        image = imageio.imread(filename)\r\n        writer.append_data(image)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import pandas as pd\r\n\r\ninp = pd.DataFrame({'month':[1,1,1,1,1,2,2,2], \r\n                    'item':[10,10,10,10,20,20,20,20], \r\n                    'star':[1,2,1,3,3,2,2,3]})\r\n\r\nout = (inp\r\n       .groupby(['month', 'item', 'star'])\r\n       .size()\r\n       .unstack(fill_value=0)\r\n       .rename(columns={1: 'star_1_cnt', 2: 'star_2_cnt', 3: 'star_3_cnt'})\r\n       .reset_index())\r\n\r\nprint(out)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import os\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport google.generativeai as genai\r\nimport asyncio\r\nimport aiohttp\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\ngenai.configure(api_key=""YOUR_API_KEY"")\r\nmodel = genai.GenerativeModel('gemini-pro-vision')\r\n\r\nasync def extract_text(image_path):\r\n    loop = asyncio.get_event_loop()\r\n    img = await loop.run_in_executor(ThreadPoolExecutor(), Image.open, image_path)\r\n    output = await loop.run_in_executor(ThreadPoolExecutor(), model.generate_content, [prompt, img])\r\n    text = output.text\r\n    return text\r\n\r\nasync def process_images():\r\n    prompt = ""Carefully scan this image: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'.""\r\n    image_dir = ""/path/to/image_dir""\r\n    images_to_process = [os.path.join(image_dir, image_name) for image_name in os.listdir(image_dir)]\r\n\r\n    tasks = []\r\n    for image_path in tqdm(images_to_process):\r\n        task = asyncio.create_task(extract_text(image_path))\r\n        tasks.append(task)\r\n\r\n        if len(tasks) >= 60:\r\n            results = await asyncio.gather(*tasks)\r\n            for text in results:\r\n                print(text)\r\n            tasks = []\r\n\r\n    if tasks:\r\n        results = await asyncio.gather(*tasks)\r\n        for text in results:\r\n            print(text)\r\n\r\nif __name__ == ""__main__"":\r\n    asyncio.run(process_images())\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ncols = ['value', 'value_other', 'value_other2']\r\ndf = df.with_columns(\r\n    pl.when(pl.all_horizontal(pl.col('quantity') == 0, pl.col(cols).is_null()))\r\n      .then(0).otherwise(pl.col(cols))\r\n)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"from dataclasses import dataclass\r\nfrom typing import TypeVar, Callable\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(klass):\r\n    return klass\r\n\r\ndef my_dataclass(klass: Callable[[T], T]) -> Callable[[T], T]:\r\n    return something_else(dataclass(klass))\r\n\r\n@dataclass\r\nclass TestA:\r\n    a: int\r\n    b: str\r\n\r\nTestA(0, """")\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")  # works correctly\r\n"
0,1,misclassified_in_Test_1.csv.csv,"I have a Pandas dataframe with the following structure:\r\nA       B       C\r\na       b       1\r\na       b       2\r\na       b       3\r\nc       d       7\r\nc       d       8\r\nc       d       5\r\nc       d       6\r\nc       d       3\r\ne       b       4\r\ne       b       3\r\ne       b       2\r\ne       b       1\r\n\r\nAnd I will like to transform it into this:\r\nA       B       C1      C2      C3      C4      C5\r\na       b       1       2       3       NAN     NAN\r\nc       d       7       8       5       6       3\r\ne       b       4       3       2       1       NAN\r\n\r\nIn other words, something like groupby A and B and expand C into different columns.\r\nKnowing that the length of each group is different.\r\nC is already ordered\r\nShorter groups can have NAN or NULL values (empty), it does not matter.\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right."
0,1,misclassified_in_Test_1.csv.csv,"import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(await img.read())\r\n        \r\n        outname = os.path.join(dir, 'out.jpg')\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n        \r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n"
0,1,misclassified_in_Test_1.csv.csv,"trigger:\r\n- main\r\n\r\npool:\r\n  vmImage: 'ubuntu-latest'\r\n\r\nsteps:\r\n- script: |\r\n    curl -sSL https://install.python-poetry.org | python3 -\r\n    echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n  displayName: 'Install Poetry'\r\n\r\n- script: |\r\n    poetry install --no-root\r\n  displayName: 'Install dependencies'\r\n\r\n- script: |\r\n    poetry run flake8 src\r\n  displayName: 'Linter'\r\n\r\n- script: |\r\n    poetry add pytest-azurepipelines\r\n    poetry run pytest src\r\n  displayName: 'Tests'\r\n"
0,1,misclassified_in_Test_1.csv.csv,"from typing import Callable, TypeVar, Protocol\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=Callable[[int], int])\r\n\r\n\r\nclass MemoizedFunction(Protocol):\r\n    memory: dict[int, int]\r\n\r\n    def __call__(self, n: int) -> int: ...\r\n\r\n\r\ndef remember(f: T) -> MemoizedFunction:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore\r\n\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\n\r\nprint(fib(100))  # 573147844013817084101\r\nprint(fib.memory[50])  # 20365011074\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import json\r\nimport pytest\r\nfrom starlette.requests import Request\r\nfrom starlette.responses import Response\r\nfrom starlette.testclient import TestClient\r\nfrom fastapi import FastAPI\r\nfrom starlette.types import Scope, Receive, Send\r\nfrom your_middleware_module import MyMiddleware\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/"")\r\nasync def read_root(request: Request):\r\n    body = await request.json()\r\n    return body\r\n\r\napp.add_middleware(MyMiddleware)\r\n\r\nclient = TestClient(app)\r\n\r\ndef test_middleware():\r\n    response = client.post(""/"", json={""key"": ""value""})\r\n    assert response.status_code == 200\r\n    assert response.json() == {""key"": ""value"", ""some_field"": ""foobar""}\r\n"
0,1,misclassified_in_Test_1.csv.csv,"In a more complicated setup using the python dependency injector framework I use the lifespan function for the FastAPI app object to correctly wire everything.\r\nWhen testing I'd like to replace some of the objects with different versions (fakes), and the natural way to accomplish that seems to me like I should override or mock the lifespan function of the app object. However I can't seem to figure out if/how I can do that.\r\nMRE follows\r\nimport pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    # Initialize dependency injection\r\n    global greeting\r\n    greeting = &quot;Hello&quot;\r\n    yield\r\n\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    # Initialize dependency injection\r\n    global greeting\r\n    greeting = &quot;Hi&quot;\r\n    yield\r\n\r\n\r\napp = FastAPI(title=&quot;Test&quot;, lifespan=_lifespan)\r\n\r\n\r\n@app.get(&quot;/&quot;)\r\nasync def root():\r\n    return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(&quot;/&quot;)\r\n    assert response.text == &quot;Hi&quot;\r\n\r\nSo basically in the fake_client fixture I'd like to change it to use the _lifespan_override instead of the original _lifespan, making the dummy test-case above pass\r\nI'd have expected something like with TestClient(app, lifespan=_lifespan_override) as client: to work, but that's not supported. Is there some way I can mock it to get the behavior I want?\r\n(The mre above works if you replace &quot;Hi&quot; with &quot;Hello&quot; in the assert statement)\r\npyproject.toml below with needed dependencies\r\n[tool.poetry]\r\nname = &quot;mre&quot;\r\nversion = &quot;0.1.0&quot;\r\ndescription = &quot;mre&quot;\r\nauthors = []\r\n\r\n[tool.poetry.dependencies]\r\npython = &quot;^3.10&quot;\r\nfastapi = &quot;^0.103.2&quot;\r\n\r\n[tool.poetry.group.dev.dependencies]\r\npytest = &quot;^7.1.2&quot;\r\nhttpx = &quot;^0.25.0&quot;\r\n\r\n\r\n[build-system]\r\nrequires = [&quot;poetry-core&quot;]\r\nbuild-backend = &quot;poetry.core.masonry.api&quot;\r\n\r\nEDIT:\r\nTried extending my code with the suggestion from Hamed Akhavan below as follows\r\n@pytest.fixture\r\ndef fake_client():\r\n    app.dependency_overrides[_lifespan] = _lifespan_override\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\nbut it doesn't work, even though it looks like it should be the right approach. Syntax problem?\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right."
0,1,misclassified_in_Test_1.csv.csv,"import polars as pl\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\n\r\ndf = (\r\n    pl.DataFrame(\r\n        {\r\n            'value': values\r\n        }\r\n    )\r\n    .with_columns(\r\n        pl.col('value')\r\n        .shift_and_fill(1, fill_value=None)\r\n        .ewm_mean(span=9, min_periods=9)\r\n        .alias('ema_9')\r\n    )\r\n)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"It is known that np.sum(arr) is quite a lot slower  than arr.sum().  For example:\r\nimport numpy as np\r\nnp.random.seed(7)\r\nA = np.random.random(1000)\r\n%timeit np.sum(A)\r\n2.94 ÃÂÃ¢ÂÂÃÂÃÂµs ÃÂÃ¢ÂÂÃÂÃÂ± 13.8 ns per loop (mean ÃÂÃ¢ÂÂÃÂÃÂ± std. dev. of 7 runs, 100,000 loops each)\r\n%timeit A.sum()\r\n1.8 ÃÂÃ¢ÂÂÃÂÃÂµs ÃÂÃ¢ÂÂÃÂÃÂ± 40.8 ns per loop (mean ÃÂÃ¢ÂÂÃÂÃÂ± std. dev. of 7 runs, 1,000,000 loops each)\r\n\r\nCan anyone give a detailed code-based explanation of what np.sum(arr) is doing that arr.sum() is not?\r\nThe difference is insignificant for much longer arrays. But it is relatively significant for arrays of length 1000 or less, for example.\r\nIn my code I do millions of array sums so the difference is particularly significant.\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right."
0,1,misclassified_in_Test_1.csv.csv,"from pydantic import BaseModel, Field\r\nfrom typing import Union\r\nfrom fastapi import FastAPI, APIRouter\r\n\r\nclass Foo(BaseModel):\r\n    type: Literal[""Foo""] = Field(""Foo"", exclude=True)\r\n    Name: str\r\n\r\nclass Bar(BaseModel):\r\n    type: Literal[""Bar""] = Field(""Bar"", exclude=True)\r\n    Name: str\r\n\r\nclass Demo(BaseModel):\r\n    example: Union[Foo, Bar] = Field(discriminator=""type"")\r\n\r\n# FastAPI router\r\napp = FastAPI()\r\nrouter = APIRouter()\r\n\r\n@router.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    demo = Demo(example=foo)\r\n    return demo\r\n\r\napp.include_router(router)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"I don't understand how I should be using ArrayLike in my code. If check mypy, I keep getting errors when I try to use the variables for anything without calling cast. I am trying to define function signatures that work with ndarray as well as regular lists.\r\nFor example, the code below\r\nimport numpy.typing as npt\r\nimport numpy as np\r\n\r\nfrom typing import Any\r\n\r\ndef f(a: npt.ArrayLike) -&gt; int:\r\n    return len(a)\r\n\r\ndef g(a: npt.ArrayLike) -&gt; Any:\r\n    return a[0]\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n\r\ngive me theses errors for f() and g():\r\nArgument 1 to &quot;len&quot; has incompatible type &quot;Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]&quot;; expected &quot;Sized&quot;  [arg-type]\r\n\r\nValue of type &quot;Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]&quot; is not indexable  [index]\r\n\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right."
0,1,misclassified_in_Test_1.csv.csv,"# pyproject.toml\r\n[build-system]\r\nrequires = [""setuptools""]\r\nbuild-backend = ""setuptools.build_meta""\r\n\r\n[project]\r\nname = ""myscript""\r\nversion = ""0.0.1""\r\ndependencies = [\r\n    ""Click"",\r\n    ""boto3"",\r\n    ""botocore"",\r\n]\r\n\r\n[project.scripts]\r\nmyscript = ""code.main:run""\r\n\r\n[tool.setuptools]\r\ninclude-package-data = true\r\n\r\n[tool.setuptools.packages.find]\r\nwhere = [""src""]\r\ninclude = [""code*""]\r\nexclude = []\r\n\r\n[tool.setuptools.package-data]\r\n""myscript.resources"" = [""artifacts/*"", ""recipe.template.yaml"", ""confs.yaml""]\r\n\r\npython\r\n# setup.py\r\nfrom setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""myscript"",\r\n    version=""0.0.1"",\r\n    packages=find_packages(where=""src""),\r\n    include_package_data=True,\r\n    install_requires=[\r\n        ""Click"",\r\n        ""boto3"",\r\n        ""botocore"",\r\n    ],\r\n    package_data={\r\n        ""myscript.resources"": [""artifacts/*"", ""recipe.template.yaml"", ""confs.yaml""]\r\n    }\r\n)\r\n\r\npython\r\n# Directory structure for testing:\r\n# ProjectRoot/\r\n# ??? src/\r\n# ?   ??? myscript/\r\n# ?       ??? resources/\r\n# ?           ??? artifacts/\r\n# ?               ??? code1.jar\r\n# ?               ??? code2.jar\r\n# ?               ??? api.keys\r\n# ?           ??? recipe.template.yaml\r\n# ?           ??? confs.yaml\r\n# ??? setup.py\r\n\r\n# Test case to verify resources are packaged\r\nimport myscript\r\n\r\ndef test_resources():\r\n    from importlib.resources import files\r\n    resource_folder = files('myscript.resources')\r\n    assert 'artifacts' in resource_folder.parts\r\n    assert 'recipe.template.yaml' in resource_folder.parts\r\n    assert 'confs.yaml' in resource_folder.parts\r\n\r\ntest_resources()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True, ncols=100):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 3\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, pos, len(tasks)) for (pos, n) in enumerate(tasks))\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n\r\n        return result\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nresult = Tree.traverse_pre()\r\nprint(result)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\n\r\ndef reference_implementation(encoded):\r\n    """"""This is the implementation that gives the desired result""""""\r\n    return base64.b64decode(encoded)\r\n\r\n\r\ndef implmementation1(encoded):\r\n    """"""Try to call the directly the underlying library""""""\r\n    return a2b_base64(encoded)\r\n\r\n\r\ndef threaded_impl(encoded, N):\r\n    """"""Try multi threading calling the underlying library""""""\r\n    # split the string into pieces\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # length of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    \r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    """"""Try multi processing calling the underlying library""""""\r\n    # split the string into pieces\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # length of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    \r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    # Prepare a 4.6 GB byte string (with less than 32 GB ram you may experience swapping on virtual memory)\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    # Compare implementations\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()  # force freeing memory to avoid swapping on virtual memory\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(\r\n    x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"",\r\n    ci=""sd"", edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1,\r\n    height=4, aspect=0.7, alpha=0.5\r\n)\r\n\r\ng.map(\r\n    sns.stripplot, ""sex"", ""total_bill"", ""smoker"", hue_order=['Yes', 'No'],\r\n    order=['Male', 'Female'], palette=sns.color_palette(),\r\n    dodge=True, alpha=0.6, ec='k', linewidth=1\r\n)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nfor ax, (time, sub_df) in zip(g.axes.flat, tips.groupby(""time"")):\r\n    annot = Annotator(ax, pairs, data=sub_df, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\n    annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\n    annot.apply_test().annotate()\r\n\r\nplt.show()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j\r\n\r\nx = np.real(xx).copy()\r\ny = np.real(yy).copy()\r\n\r\ndot = timeit('np.dot(x,y)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x,y)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nmatplotlib.rcParams.update({\r\n    ""font.family"": ""serif"",\r\n    ""font.serif"": [""Computer Modern Roman""],\r\n    ""font.weight"": ""bold"",\r\n    ""mathtext.fontset"": ""cm"",\r\n    ""axes.labelweight"": ""bold"",\r\n    ""xtick.labelsize"": 14,\r\n    ""ytick.labelsize"": 14,\r\n    ""xtick.labelweight"": ""bold"",\r\n    ""ytick.labelweight"": ""bold"",\r\n})\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns = 1 + np.sin(2 * np.pi * t)\r\n\r\nfig, ax = plt.subplots(figsize=(9,6))\r\nax.plot(t, s)\r\n\r\nax.set_xlabel(r'time (s)  $a_1$', fontsize=16, fontweight='bold')\r\nax.set_ylabel(r'voltage (mV)', fontsize=16, fontweight='bold')\r\nax.set_title(r'About as simple as it gets, folks', fontsize=18, fontweight='bold')\r\n\r\nax.grid()\r\nplt.show()\r\n"
0,1,misclassified_in_Test_1.csv.csv,"import polars as pl\r\nfrom datetime import datetime\r\nimport pytz\r\n\r\ndf = pl.DataFrame({\r\n    ""time"": [datetime(2023, 4, 3, 2), datetime(2023, 4, 4, 3), datetime(2023, 4, 5, 4)],\r\n    ""tzone"": [""Asia/Tokyo"", ""America/Chicago"", ""Europe/Paris""]\r\n}).with_columns(pl.col(""time"").dt.replace_time_zone(""UTC""))\r\n\r\ndef convert_timezone(time, timezone):\r\n    return time.replace(tzinfo=pytz.utc).astimezone(pytz.timezone(timezone)).hour\r\n\r\ndf = df.with_columns(\r\n    pl.struct([""time"", ""tzone""]).map_elements(lambda x: convert_timezone(x[""time""], x[""tzone""])).alias(""hour"")\r\n)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nhttp.cors().and().csrf().disable()\r\n.authorizeHttpRequests(auth -> auth\r\n.requestMatchers(""/calciatore/list"").permitAll()\r\n.anyRequest().authenticated());\r\nreturn http.build();\r\n}\r\n@Bean\r\npublic CorsConfigurationSource corsConfigurationSource() {\r\nCorsConfiguration configuration = new CorsConfiguration();\r\nconfiguration.setAllowedOrigins(List.of(""http://localhost:3000""));\r\nconfiguration.setAllowedMethods(List.of(""GET"", ""POST"", ""PUT"", ""DELETE"", ""OPTIONS""));\r\nconfiguration.setAllowedHeaders(List.of(""*""));\r\nconfiguration.setAllowCredentials(true);\r\nUrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\nsource.registerCorsConfiguration(""/**"", configuration);\r\nreturn source;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\nimport java.util.Map;\r\n\r\npublic class SqsTracePropagation {\r\nprivate final Tracer tracer;\r\nprivate final TextMapPropagator propagator = W3CTraceContextPropagator.getInstance();\r\n\r\npublic SqsTracePropagation(Tracer tracer) {\r\nthis.tracer = tracer;\r\n}\r\n\r\npublic Span startSpanWithExtractedTraceId(Map<String, String> messageAttributes) {\r\nContext extractedContext = propagator.extract(Context.root(), messageAttributes, new TextMapGetter<>() {\r\n@Override\r\npublic Iterable<String> keys(Map<String, String> carrier) {\r\nreturn carrier.keySet();\r\n}\r\n\r\n@Override\r\npublic String get(Map<String, String> carrier, String key) {\r\nreturn carrier.get(key);\r\n}\r\n});\r\n\r\nSpan span = tracer.spanBuilder(""consumeMessage"").setParent(extractedContext).startSpan();\r\nspan.makeCurrent();\r\nreturn span;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\nimport java.util.Collections;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n@Bean\r\npublic FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\nFilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\nfilterRegistrationBean.setUrlPatterns(Collections.singletonList(""/*""));\r\nreturn filterRegistrationBean;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,public abstract class Parent {\r\nprotected abstract static class InnerParent {\r\npublic InnerParent self() {\r\nreturn this;\r\n}\r\n}\r\n}\r\n\r\npublic class Child extends Parent {\r\npublic static class InnerChild extends InnerParent {}\r\n}\r\n\r\npublic class Main {\r\npublic static void main(String[] args) {\r\n// Compilation error: Explicit protected access restriction\r\n// Parent.InnerParent innerChild = new Child.InnerChild().self();\r\n\r\n// Works due to type inference (bypasses explicit protected restriction)\r\nvar innerChild = new Child.InnerChild().self();\r\nSystem.out.println(((Object) innerChild).getClass().getName());\r\n}\r\n}
0,1,misclassified_in_Test_4.csv.csv,"package com.example.maildemo;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.CommandLineRunner;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.mail.MailException;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.mail.javamail.MimeMessagePreparator;\r\nimport jakarta.mail.Message;\r\nimport jakarta.mail.internet.InternetAddress;\r\nimport jakarta.mail.internet.MimeMessage;\r\nimport java.util.Date;\r\n/*\r\nEnsure your pom.xml includes the proper Jakarta Mail dependency for Spring Boot 3:\r\n  <dependency>\r\n    <groupId>org.eclipse.angus</groupId>\r\n    <artifactId>angus-mail</artifactId>\r\n    <version>1.0.0</version>\r\n  </dependency>\r\n*/\r\n@SpringBootApplication\r\npublic class MailDemoApplication implements CommandLineRunner {\r\n@Autowired\r\nprivate JavaMailSender javaMailSender;\r\npublic static void main(String[] args) {\r\nSpringApplication.run(MailDemoApplication.class, args);\r\n}\r\n@Override\r\npublic void run(String... args) throws Exception {\r\nsendEmail(""recipient@example.com"", ""Test Subject"", ""Hello from Spring Boot 3.1.1 and Java 17!"", false);\r\n}\r\npublic void sendEmail(String toAddress, String subject, String body, boolean error) {\r\nMimeMessagePreparator preparator = mimeMessage -> {\r\nfinal InternetAddress recipient = new InternetAddress(toAddress);\r\nmimeMessage.setFrom(new InternetAddress(""sender@example.com""));\r\nmimeMessage.setRecipient(Message.RecipientType.TO, recipient);\r\nmimeMessage.setSentDate(new Date());\r\nmimeMessage.setSubject(subject);\r\nmimeMessage.setText(body);\r\n};\r\ntry {\r\njavaMailSender.send(preparator);\r\nSystem.out.println(""Email sent successfully!"");\r\n} catch (MailException e) {\r\nSystem.err.println(""Error sending email: "" + e.getMessage());\r\ne.printStackTrace();\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.authserver;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\r\nimport org.springframework.security.oauth2.server.authorization.web.OAuth2AuthorizationServerConfigurer;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;\r\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\r\nimport org.springframework.security.web.context.NullSecurityContextRepository;\r\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\r\nimport org.springframework.security.web.util.matcher.NegatedRequestMatcher;\r\n@Configuration\r\npublic class SecurityConfig {\r\n@Bean\r\n@Order(1)\r\npublic SecurityFilterChain corsFilterChain(HttpSecurity http) throws Exception {\r\nhttp.cors(Customizer.withDefaults());\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(2)\r\npublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\r\nOAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\nhttp.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\r\n.oidc(Customizer.withDefaults());\r\nhttp.exceptionHandling(exceptions -> exceptions\r\n.defaultAuthenticationEntryPointFor(new LoginUrlAuthenticationEntryPoint(""/login""),\r\nnew AntPathRequestMatcher(""/**"")));\r\nhttp.oauth2ResourceServer(resourceServer -> resourceServer.jwt(Customizer.withDefaults()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(3)\r\npublic SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\nhttp.securityMatcher(new NegatedRequestMatcher(new AntPathRequestMatcher(""/admin/**"")));\r\nhttp.authorizeHttpRequests(authorize -> authorize\r\n.requestMatchers(new AntPathRequestMatcher(""/register"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/recover"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/error/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/css/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/js/**"")).permitAll()\r\n.requestMatchers(new AntPathRequestMatcher(""/favicon.ico"")).permitAll()\r\n.anyRequest().authenticated());\r\nhttp.oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\nhttp.formLogin(form -> {\r\nform.loginPage(""/login"");\r\nform.permitAll();\r\n});\r\nhttp.logout(logout -> logout.logoutSuccessHandler(logoutSuccessHandler()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nhttp.cors(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\n@Order(4)\r\npublic SecurityFilterChain adminResourceFilterChain(HttpSecurity http) throws Exception {\r\nhttp.securityMatcher(new AntPathRequestMatcher(""/admin/**""));\r\nhttp.authorizeHttpRequests(authorize -> authorize.anyRequest().hasRole(""ADMIN""));\r\nhttp.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\r\nhttp.securityContext(securityContext -> securityContext.securityContextRepository(new NullSecurityContextRepository()));\r\nhttp.oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\nhttp.csrf(AbstractHttpConfigurer::disable);\r\nhttp.cors(AbstractHttpConfigurer::disable);\r\nreturn http.build();\r\n}\r\n@Bean\r\npublic LogoutSuccessHandler logoutSuccessHandler() {\r\nreturn (request, response, authentication) -> response.sendRedirect(""/"");\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\nprivate static final Map<Character,String> ESCAPES=new HashMap<>();\r\nstatic {\r\nESCAPES.put('<',""&lt;"");\r\nESCAPES.put('>',""&gt;"");\r\nESCAPES.put('&',""&amp;"");\r\nESCAPES.put('\'',""&#039;"");\r\nESCAPES.put('""',""&#034;"");\r\n}\r\n\r\npublic static String escape(String input) {\r\nStringBuilder result=new StringBuilder();\r\nfor(char c:input.toCharArray()) {\r\nresult.append(ESCAPES.getOrDefault(c,String.valueOf(c)));\r\n}\r\nreturn result.toString();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nString test=""<Hello & 'World'>"";\r\nSystem.out.println(escape(test));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\npublic static Set<Integer> dividends=Collections.synchronizedSet(new HashSet<>());\r\n\r\npublic static class DivisorTask implements Runnable {\r\nprivate final int n;\r\nprivate final int divisor;\r\n\r\npublic DivisorTask(int n,int divisor) {\r\nthis.n=n;\r\nthis.divisor=divisor;\r\n}\r\n\r\n@Override\r\npublic void run() {\r\nfor(int i=1;i<=n;i++) {\r\nif(i%divisor==0) {\r\ndividends.add(i);\r\n}\r\n}\r\n}\r\n}\r\n\r\npublic int getSum(int n) {\r\nExecutorService executor=Executors.newFixedThreadPool(3);\r\nexecutor.execute(new DivisorTask(n,3));\r\nexecutor.execute(new DivisorTask(n,5));\r\nexecutor.execute(new DivisorTask(n,7));\r\nexecutor.shutdown();\r\ntry {\r\nexecutor.awaitTermination(Long.MAX_VALUE,TimeUnit.NANOSECONDS);\r\n}catch(InterruptedException e) {\r\ne.printStackTrace();\r\n}\r\nreturn dividends.stream().mapToInt(Integer::intValue).sum();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nFindMultiples finder=new FindMultiples();\r\nint n=1000;\r\nSystem.out.println(""Sum: ""+finder.getSum(n));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.Set;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n    \r\n    public static class DivisorTask implements Callable<Set<Integer>> {\r\n        private final int n;\r\n        private final int divisor;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public Set<Integer> call() {\r\n            Set<Integer> result = new ConcurrentSkipListSet<>();\r\n            for (int i = 1; i <= n; i++) {\r\n                if (i % divisor == 0) {\r\n                    result.add(i);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        Future<Set<Integer>> future3 = executor.submit(new DivisorTask(n, 3));\r\n        Future<Set<Integer>> future5 = executor.submit(new DivisorTask(n, 5));\r\n        Future<Set<Integer>> future7 = executor.submit(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n\r\n        try {\r\n            Set<Integer> uniqueNumbers = new ConcurrentSkipListSet<>();\r\n            uniqueNumbers.addAll(future3.get());\r\n            uniqueNumbers.addAll(future5.get());\r\n            uniqueNumbers.addAll(future7.get());\r\n\r\n            return uniqueNumbers.stream().mapToInt(Integer::intValue).sum();\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        int n = 1000;\r\n        System.out.println(""Sum: "" + finder.getSum(n));\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.time.LocalDate;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class YearWeek implements Comparable<YearWeek> {\r\nprivate final int year;\r\nprivate final int week;\r\n\r\npublic YearWeek(int year,int week) {\r\nthis.year=year;\r\nthis.week=week;\r\n}\r\n\r\npublic static YearWeek parse(String isoWeek) {\r\nString[] parts=isoWeek.split(""-W"");\r\nreturn new YearWeek(Integer.parseInt(parts[0]),Integer.parseInt(parts[1]));\r\n}\r\n\r\npublic boolean isBefore(YearWeek other) {\r\nreturn this.compareTo(other)<0;\r\n}\r\n\r\n@Override\r\npublic int compareTo(YearWeek other) {\r\nreturn year!=other.year?Integer.compare(year,other.year):Integer.compare(week,other.week);\r\n}\r\n\r\npublic long weeksBetween(YearWeek other) {\r\nLocalDate start=LocalDate.ofYearDay(this.year,1).with(WeekFields.ISO.weekOfYear(),this.week);\r\nLocalDate end=LocalDate.ofYearDay(other.year,1).with(WeekFields.ISO.weekOfYear(),other.week);\r\nreturn java.time.temporal.ChronoUnit.WEEKS.between(start,end);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nYearWeek weekA=YearWeek.parse(""2012-W48"");\r\nYearWeek weekB=YearWeek.parse(""2013-W03"");\r\n\r\nSystem.out.println(""weekA is before weekB: ""+weekA.isBefore(weekB));\r\nSystem.out.println(""Weeks between: ""+weekA.weeksBetween(weekB));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.concurrent.Callable;\r\n\r\npublic class InferenceThrowsExample {\r\n    public static <T, E extends Exception> T execute(Callable<T> action) throws E {\r\n        try {\r\n            return action.call();\r\n        } catch (Exception ex) {\r\n            throw (E) ex; // The compiler infers the type of E\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> { throw new RuntimeException(""Unchecked!""); }); // Infers E as RuntimeException\r\n        } catch (RuntimeException ex) {\r\n            System.out.println(""Caught: "" + ex.getMessage());\r\n        }\r\n\r\n        try {\r\n            execute(() -> { throw new Exception(""Checked!""); }); // Causes unchecked cast warning\r\n        } catch (Exception ex) {\r\n            System.out.println(""Caught: "" + ex.getMessage());\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class EqualSplit {\r\npublic static boolean equalSplit(int[] arr) {\r\nif (arr.length % 2 != 0) return false;\r\nreturn helper(arr, 0, 0, 0, 0);\r\n}\r\n\r\nprivate static boolean helper(int[] arr, int index, int count1, int sum1, int sum2) {\r\nif (index == arr.length) return count1 == arr.length / 2 && sum1 == sum2;\r\nreturn helper(arr, index + 1, count1 + 1, sum1 + arr[index], sum2) ||\r\nhelper(arr, index + 1, count1, sum1, sum2 + arr[index]);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[] arr1 = {1, 2, 3, 4};\r\nint[] arr2 = {1, 1, 1, 1, 2, 2};\r\nint[] arr3 = {3, 1, 1, 2, 2, 3};\r\nSystem.out.println(equalSplit(arr1)); // false\r\nSystem.out.println(equalSplit(arr2)); // true\r\nSystem.out.println(equalSplit(arr3)); // true\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TooltipPositioning extends Application {\r\n\r\n@Override\r\npublic void start(Stage stage) {\r\nLabel label = new Label(""TEST\nTEST\nTEST"");\r\nlabel.setStyle(""-fx-background-color: green;"");\r\n\r\nTooltip tooltip = new Tooltip(""TOOLTIP"");\r\ntooltip.setShowDelay(Duration.seconds(0.5));\r\nlabel.setTooltip(tooltip);\r\n\r\nlabel.setOnMouseEntered(e -> {\r\nBounds bounds = label.localToScreen(label.getBoundsInLocal());\r\ndouble x = bounds.getMaxX();\r\ndouble y = bounds.getMaxY();\r\ntooltip.show(label, x, y);\r\n});\r\n\r\nlabel.setOnMouseExited(e -> tooltip.hide());\r\n\r\nScene scene = new Scene(new AnchorPane(label), 300, 200);\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SliderSwitch extends Control {\r\n\r\nprivate ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n@Override\r\nprotected void invalidated() {\r\nsetEventHandler(ActionEvent.ACTION, get());\r\n}\r\n\r\n@Override\r\npublic Object getBean() {\r\nreturn SliderSwitch.this;\r\n}\r\n\r\n@Override\r\npublic String getName() {\r\nreturn ""onAction"";\r\n}\r\n};\r\n\r\npublic final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\nreturn onAction;\r\n}\r\n\r\npublic final void setOnAction(EventHandler<ActionEvent> value) {\r\nonAction.set(value);\r\n}\r\n\r\npublic final EventHandler<ActionEvent> getOnAction() {\r\nreturn onAction.get();\r\n}\r\n\r\npublic SliderSwitch() {\r\ngetStyleClass().add(""slider-switch"");\r\n}\r\n\r\n@Override\r\nprotected Skin<?> createDefaultSkin() {\r\nreturn new SliderSwitchSkin(this);\r\n}\r\n\r\npublic void fireActionEvent() {\r\nif (getOnAction() != null) {\r\ngetOnAction().handle(new ActionEvent(this, null));\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import static org.junit.jupiter.api.Assertions.assertNotNull;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nclass MapMethodSourceTest {\r\n\r\n@ParameterizedTest\r\n@MethodSource(""hashMapProvider"")\r\nvoid testMyMapObj(Map<String, Object> argument) {\r\nassertNotNull(argument);\r\nObject obj1 = argument.get(""1"");\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\nMap<String, Object> map = new HashMap<>();\r\nmap.put(""1"", ""Obj1"");\r\nmap.put(""2"", ""Obj2"");\r\nreturn Stream.of(map);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\npublic static void main(String[] args) {\r\nString[] timestamps = {\r\n""2023-10-05T15:14:29.123456789Z"",\r\n""2023-10-05T15:14:29.12345678Z"",\r\n""2023-10-05T15:14:29.1234567Z"",\r\n""2023-10-05T15:14:29.123456Z"",\r\n""2023-10-05T15:14:29.12345Z"",\r\n""2023-10-05T15:14:29.1234Z"",\r\n""2023-10-05T15:14:29.123Z"",\r\n""2023-10-05T15:14:29.12Z"",\r\n""2023-10-05T15:14:29.1Z"",\r\n""2023-10-05T15:14:29Z""\r\n};\r\n\r\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\nfor (String timestamp : timestamps) {\r\ntry {\r\nLocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\nSystem.out.println(""Parsed date: "" + dateTime);\r\n} catch (DateTimeParseException e) {\r\nSystem.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n}\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class DuplicateCharacters {\r\npublic static void main(String[] args) {\r\nString string1 = ""Great"";\r\nint count;\r\nboolean hasDuplicates = false;\r\n\r\nchar string[] = string1.toCharArray();\r\nSystem.out.println(""Duplicate characters in a given string:"");\r\n\r\n//Counts each character present in the string\r\nfor (int i = 0; i < string.length; i++) {\r\ncount = 1;\r\nfor (int j = i + 1; j < string.length; j++) {\r\nif (string[i] == string[j] && string[i] != ' ') {\r\ncount++;\r\nstring[j] = '0';\r\n}\r\n}\r\nif (count > 1 && string[i] != '0') {\r\nSystem.out.println(string[i]);\r\nhasDuplicates = true;\r\n}\r\n}\r\nif (!hasDuplicates) {\r\nSystem.out.println(""no duplicates"");\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\nprivate Group circle;\r\nprivate double rotationAngle = 0;\r\n\r\npublic void start(Stage primaryStage) {\r\nArc blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\nblueArc.setType(ArcType.ROUND);\r\nblueArc.setFill(Color.BLUE);\r\n\r\nArc greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\ngreenArc.setType(ArcType.ROUND);\r\ngreenArc.setFill(Color.GREEN);\r\n\r\nArc yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\nyellowArc.setType(ArcType.ROUND);\r\nyellowArc.setFill(Color.YELLOW);\r\n\r\nArc redArc = new Arc(200, 200, 150, 150, 270, 90);\r\nredArc.setType(ArcType.ROUND);\r\nredArc.setFill(Color.RED);\r\n\r\ncircle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\nButton rotate = new Button(""Rotate Right"");\r\nrotate.setOnAction(this::processButtonPress);\r\n\r\nFlowPane pane = new FlowPane(circle, rotate);\r\npane.setAlignment(Pos.CENTER);\r\npane.setHgap(20);\r\npane.setStyle(""-fx-background-color: GRAY"");\r\n\r\nScene scene = new Scene(pane, 400, 400);\r\nprimaryStage.setTitle(""Four-Color Wheel"");\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n}\r\n\r\npublic void processButtonPress(ActionEvent event) {\r\nrotationAngle += 90;\r\ncircle.setRotate(rotationAngle);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DynamicDrawMode extends Application {\r\nprivate Sphere sphere;\r\nprivate DrawMode[] modes = {DrawMode.FILL, DrawMode.LINE, DrawMode.POINT};\r\nprivate int currentModeIndex = 0;\r\n\r\npublic void start(Stage stage) {\r\nsphere = new Sphere(100);\r\nPhongMaterial material = new PhongMaterial(Color.BLUE);\r\nsphere.setMaterial(material);\r\nsphere.setCullFace(CullFace.BACK);\r\n\r\nButton toggleButton = new Button(""Change Draw Mode"");\r\ntoggleButton.setOnAction(e -> switchDrawMode());\r\n\r\nGroup root = new Group(sphere);\r\nVBox layout = new VBox(10, toggleButton, root);\r\nScene scene = new Scene(layout, 600, 400, true);\r\nscene.setFill(Color.LIGHTGRAY);\r\nscene.setCamera(new PerspectiveCamera());\r\n\r\nstage.setTitle(""JavaFX 3D Draw Mode"");\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\n\r\nprivate void switchDrawMode() {\r\ncurrentModeIndex = (currentModeIndex + 1) % modes.length;\r\nsphere.setDrawMode(modes[currentModeIndex]);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    private static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        ScopedValue.where(NAME, ""haha"").run(() -> {\r\n            try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n                var task = ts.fork(() -> {\r\n                    System.out.println(""Scoped Value: "" + NAME.get());\r\n                    return null;\r\n                });\r\n                ts.join();\r\n            }\r\n        });\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.beans.binding.DoubleBinding;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label1 = new Label(""One two three"");\r\n        Label label2 = new Label(""Four five six seven"");\r\n\r\n        TextField textField1 = new TextField();\r\n        TextField textField2 = new TextField();\r\n\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.setHgap(20);\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        // Create column constraints for both grid panes\r\n        ColumnConstraints column1 = new ColumnConstraints();\r\n        ColumnConstraints column2 = new ColumnConstraints();\r\n        gridPane1.getColumnConstraints().addAll(column1, new ColumnConstraints());\r\n        gridPane2.getColumnConstraints().addAll(column2, new ColumnConstraints());\r\n\r\n        // Bind the first column width to the max preferred width of both labels\r\n        DoubleBinding maxWidth = Bindings.createDoubleBinding(\r\n            () -> Math.max(label1.prefWidth(-1), label2.prefWidth(-1)),\r\n            label1.textProperty(), label2.textProperty()\r\n        );\r\n        column1.prefWidthProperty().bind(maxWidth);\r\n        column2.prefWidthProperty().bind(maxWidth);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import jdk.incubator.concurrent.ScopedValue;\r\nimport org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\n\r\npublic class SecurityContextScoped {\r\npublic static final ScopedValue<SecurityContext> SECURITY_CONTEXT=ScopedValue.newInstance();\r\n\r\npublic static void set(SecurityContext securityContext,Runnable task){\r\nScopedValue.where(SECURITY_CONTEXT,securityContext).run(task);\r\n}\r\n\r\npublic static SecurityContext get(){\r\nreturn SECURITY_CONTEXT.get();\r\n}\r\n\r\npublic static void clear(){\r\nSecurityContextHolder.clearContext();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\nprivate final int totalColumnFields;\r\nprivate final int totalRowFields;\r\nprivate final int horizontalGap;\r\nprivate final int verticalGap;\r\nprivate final int fieldHorizontalSize;\r\nprivate final int fieldVerticalSize;\r\n\r\npublic Grid(int totalColumnFields,int totalRowFields,int horizontalGap,int verticalGap,int fieldHorizontalSize,int fieldVerticalSize){\r\nthis.totalColumnFields=totalColumnFields;\r\nthis.totalRowFields=totalRowFields;\r\nthis.horizontalGap=horizontalGap;\r\nthis.verticalGap=verticalGap;\r\nthis.fieldHorizontalSize=fieldHorizontalSize;\r\nthis.fieldVerticalSize=fieldVerticalSize;\r\n\r\nthis.setHgap(horizontalGap);\r\nthis.setVgap(verticalGap);\r\nTextField[][] arrayLetterField=new TextField[totalColumnFields][totalRowFields];\r\n\r\nfor(int row=0;row<totalRowFields;row++){\r\nfor(int col=0;col<totalColumnFields;col++){\r\narrayLetterField[col][row]=new TextField();\r\narrayLetterField[col][row].setMinSize(fieldHorizontalSize,fieldVerticalSize);\r\narrayLetterField[col][row].setMaxSize(fieldHorizontalSize,fieldVerticalSize);\r\nthis.add(arrayLetterField[col][row],col,row);\r\n}\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,import org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig implements WebMvcConfigurer {\r\n@Override\r\npublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\nconfigurer.defaultContentType(org.springframework.http.MediaType.APPLICATION_JSON);\r\n}\r\n}
0,1,misclassified_in_Test_4.csv.csv,"// SecurityConfig.java\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.convert.converter.Converter;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.oauth2.jwt.Jwt;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nreturn http\r\n.cors(Customizer.withDefaults())\r\n.csrf(csrf -> csrf.disable())\r\n.authorizeHttpRequests(auth -> auth\r\n.requestMatchers(""/auth/**"").permitAll()\r\n.anyRequest().authenticated())\r\n.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n.oauth2ResourceServer(oauth2 -> oauth2\r\n.jwt(jwt -> jwt.jwtAuthenticationConverter(customJwtAuthenticationConverter())))\r\n.httpBasic(Customizer.withDefaults())\r\n.build();\r\n}\r\n@Bean\r\npublic JwtAuthenticationConverter customJwtAuthenticationConverter() {\r\nJwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\nconverter.setJwtGrantedAuthoritiesConverter(new Converter<Jwt, Collection<GrantedAuthority>>() {\r\n@Override\r\npublic Collection<GrantedAuthority> convert(Jwt jwt) {\r\nString rolesString = jwt.getClaim(""roles"");\r\nif(rolesString == null || rolesString.isEmpty()) {\r\nreturn java.util.Collections.emptyList();\r\n}\r\nreturn Arrays.stream(rolesString.split("" ""))\r\n.map(role -> new SimpleGrantedAuthority(""ROLE_"" + role))\r\n.collect(Collectors.toList());\r\n}\r\n});\r\nreturn converter;\r\n}\r\n}\r\n\r\n// DefaultTokenService.java\r\nimport java.time.Instant;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.stream.Collectors;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.oauth2.jwt.JwtClaimsSet;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.stereotype.Service;\r\n@Service\r\npublic class DefaultTokenService implements TokenService {\r\nprivate final JwtEncoder encoder;\r\npublic DefaultTokenService(JwtEncoder encoder) {\r\nthis.encoder = encoder;\r\n}\r\n@Override\r\npublic String generateToken(Authentication authentication) {\r\nInstant now = Instant.now();\r\nString roles = authentication.getAuthorities().stream()\r\n.map(GrantedAuthority::getAuthority)\r\n.map(role -> role.startsWith(""ROLE_"") ? role.substring(5) : role)\r\n.collect(Collectors.joining("" ""));\r\nJwtClaimsSet claims = JwtClaimsSet.builder()\r\n.issuer(""self"")\r\n.issuedAt(now)\r\n.expiresAt(now.plus(1, ChronoUnit.HOURS))\r\n.subject(authentication.getName())\r\n.claim(""roles"", roles)\r\n.build();\r\nreturn this.encoder.encode(org.springframework.security.oauth2.jwt.JwtEncoderParameters.from(claims)).getTokenValue();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.Mockito.doAnswer;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.mockConstruction;\r\nimport static org.mockito.Mockito.when;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\npublic class ConstructorMockTest {\r\n@Test\r\nvoid testConstructorMocking() throws Exception {\r\nPDFDocument pdfDocumentMock = mock(PDFDocument.class);\r\nPSConverter converterMock = mock(PSConverter.class);\r\nbyte[] content = ""dummy content"".getBytes();\r\ntry (MockedConstruction<PDFDocument> mockedPDF = mockConstruction(PDFDocument.class);\r\n     MockedConstruction<PSConverter> mockedConverter = mockConstruction(PSConverter.class)) {\r\nPDFDocument constructedPdfDoc = mockedPDF.constructed().get(0);\r\nwhen(constructedPdfDoc.load(any(ByteArrayInputStream.class))).thenReturn(null);\r\nPSConverter constructedConverter = mockedConverter.constructed().get(0);\r\ndoAnswer(invocation -> {\r\nByteArrayOutputStream outputStream = invocation.getArgument(1);\r\noutputStream.write(content);\r\nreturn outputStream;\r\n}).when(constructedConverter).convert(any(), any(ByteArrayOutputStream.class));\r\nPDFDocument pdfDoc = new PDFDocument();\r\nPSConverter converter = new PSConverter();\r\npdfDoc.load(new ByteArrayInputStream(new byte[0]));\r\nByteArrayOutputStream baos = new ByteArrayOutputStream();\r\nconverter.convert(new Object(), baos);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\nreturn http\r\n.cors(Customizer.withDefaults())\r\n.csrf(csrf -> csrf.disable())\r\n.authorizeHttpRequests(authorize -> authorize\r\n.mvcMatchers(""/"").access(new WebExpressionAuthorizationManager(""hasIpAddress('127.0.0.1')""))\r\n.anyRequest().authenticated())\r\n.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n.build();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@State(Scope.Thread)\r\npublic class JdkBenchmarks {\r\n@Benchmark\r\npublic void indexed(Blackhole blackhole, TestState testState) {\r\nint[] values = testState.values;\r\nint length = values.length;\r\nfor(int i = 0; i < length; i++) {\r\nblackhole.consume(values[i]);\r\n}\r\n}\r\n\r\n@Benchmark\r\npublic void enhanced(Blackhole blackhole, TestState testState) {\r\nfor (int value : testState.values) {\r\nblackhole.consume(value);\r\n}\r\n}\r\n\r\n@State(Scope.Thread)\r\npublic static class TestState {\r\npublic int[] values;\r\n\r\n@Setup(Level.Iteration)\r\npublic void setupArray() {\r\nint count = 1000;\r\nvalues = new int[count];\r\nfor(int i = 0; i < count; i++) {\r\nvalues[i] = i;\r\n}\r\n}\r\n}\r\n\r\npublic static void main(String[] args) throws RunnerException {\r\nOptions opt = new OptionsBuilder()\r\n.include(JdkBenchmarks.class.getSimpleName())\r\n.warmupIterations(5)\r\n.measurementIterations(10)\r\n.forks(1)\r\n.build();\r\n\r\nnew Runner(opt).run();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\n\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(TimeUnit.SECONDS)\r\n@State(Scope.Thread)\r\npublic class NestedPerf {\r\npublic static class StateData{\r\npublic static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\npublic static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n}\r\n\r\nprivate static void runInNewPool(Runnable task) {\r\nForkJoinPool pool = new ForkJoinPool();\r\ntry {\r\npool.submit(task).join();\r\n} finally {\r\npool.shutdown();\r\n}\r\n}\r\n\r\nprivate static void innerParallelLoop() {\r\nStateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\ntry {\r\nThread.sleep(5);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\n});\r\n}\r\n\r\nprivate static void innerSequentialLoop() {\r\nStateData.innerLoop.stream().unordered().forEach(i -> {\r\ntry {\r\nThread.sleep(5);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingNewPool(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\nrunInNewPool(NestedPerf::innerParallelLoop);\r\nbh.consume(i);\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingCommonPoolWithSequentialInner(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\ninnerSequentialLoop();\r\nbh.consume(i);\r\n});\r\n}\r\n\r\n@Benchmark\r\npublic void testingCommonPool(Blackhole bh){\r\nStateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\ninnerParallelLoop();\r\nbh.consume(i);\r\n});\r\n}\r\n\r\npublic static void main(String[] args) throws RunnerException {\r\nOptions opt = new OptionsBuilder()\r\n.include(NestedPerf.class.getSimpleName())\r\n.warmupIterations(5)\r\n.measurementIterations(10)\r\n.forks(1)\r\n.build();\r\n\r\nnew Runner(opt).run();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\nprivate static final int WIDTH = 800;\r\nprivate static final int HEIGHT = 600;\r\nprivate static final double EARTH_RADIUS = 150;\r\nprivate static final int DIVISIONS = 64;\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nSphere earthSphere = new Sphere(EARTH_RADIUS, DIVISIONS);\r\nPhongMaterial material = new PhongMaterial();\r\nmaterial.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\nearthSphere.setMaterial(material);\r\n\r\nGroup root = new Group();\r\nroot.getChildren().add(earthSphere);\r\n\r\nScene scene = new Scene(root, WIDTH, HEIGHT, true);\r\nscene.setFill(Color.BLACK);\r\nscene.setCamera(new PerspectiveCamera());\r\n\r\nRotate rotateX = new Rotate(0, Rotate.X_AXIS);\r\nRotate rotateY = new Rotate(0, Rotate.Y_AXIS);\r\nearthSphere.getTransforms().addAll(rotateX, rotateY);\r\n\r\nscene.setOnKeyPressed((KeyEvent event) -> {\r\nswitch (event.getCode()) {\r\ncase LEFT -> rotateY.setAngle(rotateY.getAngle() - 10);\r\ncase RIGHT -> rotateY.setAngle(rotateY.getAngle() + 10);\r\ncase UP -> rotateX.setAngle(rotateX.getAngle() - 10);\r\ncase DOWN -> rotateX.setAngle(rotateX.getAngle() + 10);\r\n}\r\n});\r\n\r\nprimaryStage.setTitle(""JavaFX 3D Earth"");\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.apache.kafka.streams.KeyValue;\r\nimport org.apache.kafka.streams.kstream.KStream;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\n@Configuration\r\npublic class StreamProcessorConfig {\r\n@Bean\r\npublic Function<Map<String, KStream<String, InputType>>, Map<String, KStream<String, OutputType>>> myFunctionDefinition() {\r\nMap<String, KStream<String, InputType>> inputStreams;\r\nreturn inputMap -> {\r\nMap<String, KStream<String, OutputType>> outputMap = new HashMap<>();\r\ninputMap.forEach((bindingName, stream) -> {\r\noutputMap.put(bindingName, stream.map((k, v) -> KeyValue.pair(k, OutputType.createFrom(v))));\r\n});\r\nreturn outputMap;\r\n};\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import jakarta.servlet.FilterChain\r\nimport jakarta.servlet.ServletException\r\nimport jakarta.servlet.http.HttpServletRequest\r\nimport jakarta.servlet.http.HttpServletResponse\r\nimport org.springframework.beans.factory.annotation.Value\r\nimport org.springframework.stereotype.Component\r\nimport org.springframework.web.filter.OncePerRequestFilter\r\nimport java.io.IOException\r\nimport java.util.concurrent.Semaphore\r\n\r\n@Component\r\nclass ConnectionLimiterFilter(\r\n@Value(""\${app.maxConcurrentRequests:50}"") private val maxConcurrentRequests: Int\r\n) : OncePerRequestFilter() {\r\nprivate val semaphore = Semaphore(maxConcurrentRequests)\r\n\r\n@Throws(ServletException::class, IOException::class)\r\noverride fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain) {\r\nif (!semaphore.tryAcquire()) {\r\nresponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE, ""Too many concurrent requests"")\r\nreturn\r\n}\r\ntry {\r\nfilterChain.doFilter(request, response)\r\n} finally {\r\nsemaphore.release()\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.net.URL;\r\nimport java.nio.file.Paths;\r\n\r\npublic class ResourceLoader {\r\n    public static String getResourcePath(String resourceName) {\r\n        URL resourceUrl = ResourceLoader.class.getResource(resourceName);\r\n        if (resourceUrl == null) {\r\n            throw new IllegalArgumentException(""Resource not found: "" + resourceName);\r\n        }\r\n        return Paths.get(resourceUrl.getPath()).toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String stylesheetPath = getResourcePath(""/style/main.css"");\r\n        String imagePath = getResourcePath(""/img/logo.png"");\r\n        String soundPath = getResourcePath(""/sound/notification.wav"");\r\n\r\n        System.out.println(""Stylesheet Path: "" + stylesheetPath);\r\n        System.out.println(""Image Path: "" + imagePath);\r\n        System.out.println(""Sound Path: "" + soundPath);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane backgroundPane = new Pane();\r\n        backgroundPane.setStyle(""-fx-background-color: red;"");\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(backgroundPane, testButton);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), backgroundPane);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String userName = ""John Doe"";\r\n            String eventName = ""Tech Conference 2025"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            int qrSize = 500;\r\n            int textHeight = 100;\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, qrSize, qrSize, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage finalImage = new BufferedImage(qrSize, qrSize + textHeight, BufferedImage.TYPE_INT_RGB);\r\n            \r\n            Graphics2D g = finalImage.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, qrSize, qrSize + textHeight);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n            \r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 24));\r\n            g.drawString(userName, 20, qrSize + 40);\r\n            g.drawString(eventName, 20, qrSize + 80);\r\n            \r\n            g.dispose();\r\n            ImageIO.write(finalImage, ""png"", new File(filePath));\r\n\r\n            System.out.println(""QR Code with text created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.google.gson.Gson;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ParallelStreamOptimization {\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(new Puzzle(""puzzle1""), new Puzzle(""puzzle2""), new Puzzle(""puzzle3""));\r\n\r\n        List<InsertOneModel<Document>> bulkWritesOptimized = puzzles.parallelStream()\r\n                .map(puzzle -> gson.toJson(puzzle))\r\n                .map(json -> Document.parse(json))\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        List<InsertOneModel<Document>> bulkWritesSingleMap = puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(""Optimized: "" + bulkWritesOptimized);\r\n        System.out.println(""Single Map: "" + bulkWritesSingleMap);\r\n    }\r\n}\r\n\r\nclass Puzzle {\r\n    private String name;\r\n\r\n    public Puzzle(String name) {\r\n        this.name = name;\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\n\r\npublic class MapToJsonConverter {\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        Map<String, Integer> fields = new LinkedHashMap<>();\r\n        fields.put(""test_first"", 1);\r\n        fields.put(""test_second"", 2);\r\n\r\n        Map<String, Integer> transformedMap = new LinkedHashMap<>();\r\n        fields.forEach((key, value) -> transformedMap.put(toLowerCamelCase(key), value));\r\n\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(transformedMap);\r\n        \r\n        System.out.println(json);\r\n    }\r\n\r\n    private static String toLowerCamelCase(String input) {\r\n        String[] parts = input.split(""_"");\r\n        StringBuilder camelCaseString = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCaseString.append(parts[i].substring(0, 1).toUpperCase())\r\n                           .append(parts[i].substring(1));\r\n        }\r\n        return camelCaseString.toString();\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class StrictfpTest {\r\npublic static void main(String[] args) {\r\nSystem.out.println(""Without strictfp:"");\r\nNonStrictfpClass nonStrictfp = new NonStrictfpClass();\r\nnonStrictfp.test();\r\n\r\nSystem.out.println(""\nWith strictfp:"");\r\nStrictfpClass strictfp = new StrictfpClass();\r\nstrictfp.test();\r\n}\r\n}\r\n\r\nclass NonStrictfpClass {\r\nvoid test() {\r\ndouble a = Double.MAX_VALUE;\r\ndouble b = a * 2; \r\ndouble c = b / 4;\r\nSystem.out.println(""Result: "" + c);\r\n}\r\n}\r\n\r\nstrictfp class StrictfpClass {\r\nvoid test() {\r\ndouble a = Double.MAX_VALUE;\r\ndouble b = a * 2;\r\ndouble c = b / 4;\r\nSystem.out.println(""Result: "" + c);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\n\r\npublic class LongArray {\r\nprivate static final long ELEMENT_SIZE = Long.BYTES;\r\nprivate final MemorySegment segment;\r\nprivate final VarHandle varHandle;\r\nprivate final long size;\r\n\r\npublic LongArray(long size) {\r\nif (size < 0) {\r\nthrow new IllegalArgumentException(""Size must be non-negative"");\r\n}\r\nthis.size = size;\r\nthis.segment = MemorySegment.allocateNative(size * ELEMENT_SIZE, Arena.global());\r\nthis.varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\r\n}\r\n\r\npublic void set(long index, long value) {\r\ncheckBounds(index);\r\nvarHandle.set(segment, index * ELEMENT_SIZE, value);\r\n}\r\n\r\npublic long get(long index) {\r\ncheckBounds(index);\r\nreturn (long) varHandle.get(segment, index * ELEMENT_SIZE);\r\n}\r\n\r\npublic long size() {\r\nreturn size;\r\n}\r\n\r\npublic void free() {\r\nsegment.close();\r\n}\r\n\r\nprivate void checkBounds(long index) {\r\nif (index < 0 || index >= size) {\r\nthrow new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nLongArray array = new LongArray(5_000_000_000L); // 5 billion elements\r\narray.set(0, 42);\r\narray.set(4_999_999_999L, 84);\r\nSystem.out.println(array.get(0)); // 42\r\nSystem.out.println(array.get(4_999_999_999L)); // 84\r\narray.free();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\npublic boolean isValidSentence(String sentence) {\r\nreturn sentence.matches(""[a-zA-Z ]+"");\r\n}\r\n\r\npublic String processSentence(String sentence) {\r\nif (!isValidSentence(sentence)) {\r\nreturn sentence + "" is an invalid sentence"";\r\n}\r\n\r\nString[] words = sentence.trim().split(""\\s+"");\r\n\r\nif (words.length <= 2) {\r\nreturn ""Invalid Length"";\r\n}\r\n\r\nString firstWord = words[0];\r\nString lastWord = words[words.length - 1];\r\nwords[0] = lastWord;\r\nwords[words.length - 1] = firstWord;\r\n\r\nfor (int i = 1; i < words.length - 1; i++) {\r\nwords[i] = new StringBuilder(words[i]).reverse().toString();\r\n}\r\n\r\nreturn String.join("" "", words);\r\n}\r\n}\r\n\r\npublic class UserInterface {\r\npublic static void main(String[] args) {\r\nScanner sc = new Scanner(System.in);\r\n\r\nSystem.out.println(""Enter the sentence"");\r\nString input = sc.nextLine();\r\n\r\nSentenceProcessor processor = new SentenceProcessor();\r\nString result = processor.processSentence(input);\r\n\r\nSystem.out.println(result);\r\n\r\nsc.close();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package app.components;\r\nimport java.io.IOException;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\npublic class Custom extends VBox{\r\n@FXML private Button plusBtn;\r\n@FXML private Button minusBtn;\r\n@FXML private Label label;\r\npublic Custom(){\r\nFXMLLoader loader=new FXMLLoader(getClass().getResource(""Custom.fxml""));\r\nloader.setRoot(this);\r\nloader.setController(this);\r\ntry{\r\nloader.load();\r\n}catch(IOException e){\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\npublic void newText(String text){\r\nlabel.setText(text);\r\n}\r\n}\r\n\r\n\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n<VBox alignment=""CENTER"" maxHeight=""-Infinity"" maxWidth=""-Infinity"" minHeight=""-Infinity"" minWidth=""-Infinity""\r\nxmlns=""http://javafx.com/javafx/19"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""app.components.Custom"">\r\n<children>\r\n<Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+""/>\r\n<Label fx:id=""label"" text=""Label""/>\r\n<Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-""/>\r\n</children>\r\n</VBox>\r\n\r\n\r\njava\r\npackage app.controllers;\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\npublic class Menu{\r\n@FXML private Custom cc;\r\n@FXML public void initialize(){\r\ncc.newText(""Test"");\r\n}\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"package com.example;\r\n\r\nimport static org.mockito.Mockito.*;\r\nimport static org.assertj.core.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.Pageable;\r\n\r\nimport java.util.List;\r\n\r\nclass ReportServiceTest{\r\nprivate ReportService sut;\r\nprivate ReportRepository reportRepository;\r\nprivate ReportConverter reportConverter;\r\nprivate User user;\r\nprivate Pageable pageable;\r\nprivate List<ReportPageResponse> reportPageResponses;\r\nprivate MockedConstruction<PageImpl> pageMockedConstruction;\r\n\r\n@BeforeEach\r\nvoid setUp(){\r\nreportRepository=mock(ReportRepository.class);\r\nreportConverter=mock(ReportConverter.class);\r\nsut=new ReportService(reportRepository,reportConverter);\r\nuser=new User();\r\npageable=mock(Pageable.class);\r\nreportPageResponses=List.of(new ReportPageResponse());\r\n}\r\n\r\n@AfterEach\r\nvoid tearDown(){\r\nif(pageMockedConstruction!=null){\r\npageMockedConstruction.close();\r\n}\r\n}\r\n\r\n@Test\r\nvoid get_report_page(){\r\nReportPageRequest reportPageRequest=mock(ReportPageRequest.class);\r\nReportSpecification reportSpecification=mock(ReportSpecification.class);\r\nPageRequest pageRequest=mock(PageRequest.class);\r\nPage<Report> reportPage=mock(Page.class);\r\n\r\nwhen(reportConverter.toReportSpecification(user,reportPageRequest)).thenReturn(reportSpecification);\r\nwhen(reportRepository.findAll(reportSpecification,pageRequest)).thenReturn(reportPage);\r\nwhen(reportConverter.toReportPageResponse(reportPage)).thenReturn(reportPageResponses);\r\n\r\npageMockedConstruction=Mockito.mockConstruction(PageImpl.class,\r\n(settings)->settings.useConstructor(reportPageResponses,pageable,9999L),\r\n(mock,context)->{\r\nwhen(mock.getTotalElements()).thenReturn(123456L);\r\nwhen(mock.getTotalPages()).thenReturn(1);\r\nwhen(mock.getContent()).thenReturn(reportPageResponses);\r\n});\r\n\r\nPage<ReportPageResponse> actual=sut.getReportPage(user,reportPageRequest);\r\n\r\nassertThat(actual.getTotalElements()).isEqualTo(123456L);\r\nassertThat(actual.getTotalPages()).isEqualTo(1);\r\nassertThat(actual.getContent()).isEqualTo(reportPageResponses);\r\n\r\nverify(reportConverter).toReportSpecification(user,reportPageRequest);\r\nverify(reportRepository).findAll(reportSpecification,pageRequest);\r\nverify(reportConverter).toReportPageResponse(reportPage);\r\n}\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n@Override\r\npublic void start(Stage primaryStage) {\r\ntry {\r\nBorderPane root=new BorderPane();\r\nScene scene=new Scene(root,400,400);\r\nStackPane stack=new StackPane();\r\nText text=new Text(""Hello there StackOverflow, how are you? (:"");\r\ntext.setFont(Font.font(16));\r\ntext.setFill(Color.RED);\r\nstack.getChildren().add(text);\r\nroot.setCenter(stack);\r\n\r\nTimeline timeline=new Timeline(\r\nnew KeyFrame(Duration.ZERO,new KeyValue(text.fillProperty(),Color.RED)),\r\nnew KeyFrame(Duration.seconds(3),new KeyValue(text.fillProperty(),Color.BLUE))\r\n);\r\ntimeline.setCycleCount(Timeline.INDEFINITE);\r\ntimeline.setAutoReverse(true);\r\ntimeline.play();\r\n\r\nprimaryStage.setScene(scene);\r\nprimaryStage.show();\r\n} catch(Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.config;\r\n\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.stereotype.Component;\r\nimport java.util.Map;\r\n\r\n@Component\r\n@ConfigurationProperties(prefix=""root"")\r\npublic class RootProperties {\r\nprivate Map<String,String> prop;\r\n\r\npublic Map<String,String> getProp() {\r\nreturn prop;\r\n}\r\n\r\npublic void setProp(Map<String,String> prop) {\r\nthis.prop=prop;\r\n}\r\n}\r\n\r\njava\r\npackage com.example.service;\r\n\r\nimport org.springframework.stereotype.Service;\r\nimport java.util.Map;\r\n\r\n@Service\r\npublic class PropertyService {\r\nprivate final RootProperties rootProperties;\r\n\r\npublic PropertyService(RootProperties rootProperties) {\r\nthis.rootProperties=rootProperties;\r\n}\r\n\r\npublic void printProperties() {\r\nMap<String,String> props=rootProperties.getProp();\r\nprops.forEach((key,value) -> System.out.println(key+"": ""+value));\r\n}\r\n}\r\n\r\njava\r\n@SpringBootApplication\r\n@EnableConfigurationProperties(RootProperties.class)\r\npublic class DemoApplication {\r\npublic static void main(String[] args) {\r\nSpringApplication.run(DemoApplication.class,args);\r\n}\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.FIELD)\r\n@Documented\r\npublic @interface Annotation{\r\nClass<?> className() default Object.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass YetAnotherClass {}\r\n\r\nclass Main {\r\n@Annotation\r\nprivate AnotherClass annotatedAttribute;\r\n\r\n@Annotation(className=YetAnotherClass.class)\r\nprivate AnotherClass anotherAttribute;\r\n\r\npublic static void main(String[] args) throws Exception {\r\nfor(Field field: Main.class.getDeclaredFields()) {\r\nAnnotation annotation=field.getAnnotation(Annotation.class);\r\nif(annotation!=null) {\r\nClass<?> classType=annotation.className()==Object.class?field.getType():annotation.className();\r\nSystem.out.println(""Field: ""+field.getName()+"", className: ""+classType.getSimpleName());\r\n}\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport com.sun.source.util.TreePath;\r\nimport javax.annotation.processing.*;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Types;\r\nimport java.util.Set;\r\nimport javax.lang.model.SourceVersion;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_17)\r\npublic class SwitchExpressionTypeProcessor extends AbstractProcessor {\r\nprivate Trees trees;\r\nprivate Types types;\r\n\r\n@Override\r\npublic void init(ProcessingEnvironment processingEnv) {\r\nsuper.init(processingEnv);\r\ntrees = Trees.instance(processingEnv);\r\ntypes = processingEnv.getTypeUtils();\r\n}\r\n\r\n@Override\r\npublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\nfor (Element element : roundEnv.getRootElements()) {\r\nTreePath path = trees.getPath(element);\r\nif (path == null) continue;\r\n\r\nTree tree = path.getLeaf();\r\nif (tree instanceof ClassTree classTree) {\r\nfor (Tree member : classTree.getMembers()) {\r\nif (member instanceof MethodTree methodTree) {\r\nanalyzeMethod(methodTree, element);\r\n}\r\n}\r\n}\r\n}\r\nreturn false;\r\n}\r\n\r\nprivate void analyzeMethod(MethodTree methodTree, Element methodElement) {\r\nBlockTree blockTree = methodTree.getBody();\r\nif (blockTree == null) return;\r\n\r\nfor (StatementTree statementTree : blockTree.getStatements()) {\r\nif (statementTree.getKind() == Tree.Kind.SWITCH) {\r\nSwitchTree switchTree = (SwitchTree) statementTree;\r\nExpressionTree switchTreeExpression = switchTree.getExpression();\r\n\r\n// Get the type of switchTreeExpression\r\nTypeMirror type = trees.getTypeMirror(trees.getPath(methodElement, switchTreeExpression));\r\n\r\nSystem.out.println(""Switch Expression Type: "" + type);\r\n}\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.activity_main);\r\n\r\nButton openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\nopenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nBottomSheetDialog bottomSheet = new BottomSheetDialog();\r\nbottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n}\r\n});\r\n}\r\n}\r\n\r\njava\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\nsuper.onViewCreated(view, savedInstanceState);\r\n\r\nBottomSheetDialog dialog = (BottomSheetDialog) getDialog();\r\nif (dialog != null) {\r\ndialog.setOnShowListener(dialogInterface -> {\r\nView bottomSheet = dialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\nif (bottomSheet != null) {\r\nBottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\nbehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\nbehavior.setPeekHeight(ViewGroup.LayoutParams.MATCH_PARENT);\r\nbottomSheet.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\nbottomSheet.requestLayout();\r\n}\r\n});\r\n}\r\n}\r\n\r\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\nreturn inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n}\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\nandroid:layout_width=""match_parent""\r\nandroid:layout_height=""match_parent""\r\nandroid:orientation=""vertical""\r\nandroid:background=""@android:color/white"">\r\n\r\n<TextView\r\nandroid:layout_width=""match_parent""\r\nandroid:layout_height=""wrap_content""\r\nandroid:text=""Full Screen Bottom Sheet""\r\nandroid:textSize=""18sp""\r\nandroid:padding=""16dp""\r\nandroid:textAlignment=""center""/>\r\n\r\n</LinearLayout>\r\n"
0,1,misclassified_in_Test_4.csv.csv,"public String transform(List<CustomObject> listOfObjects) {\r\nlistOfObjects = listOfObjects.stream().filter(o->o.objectType().equals(""BUSINESS"")).toList();\r\nif(listOfObjects.isEmpty()) throw new RuntimeException(""NO BUSINESS OBJECT FOUND"");\r\nreturn listOfObjects.stream()\r\n.filter(o->o.objectStatus().equals(""ACTIVE""))\r\n.filter(o->o.locale().equals(""en-US""))\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.orElseGet(()->listOfObjects.stream()\r\n.filter(o->o.objectStatus().equals(""ACTIVE""))\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.orElseGet(()->listOfObjects.stream()\r\n.sorted(Comparator.comparing(CustomObject::url))\r\n.findFirst()\r\n.get()))\r\n.getUrl();\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class ExampleApp extends Application {\r\npublic static void main(String[] args) {\r\nlaunch();\r\n}\r\n@Override\r\npublic void start(Stage stage) {\r\nvar r = new AnimatedRect(200, 200);\r\nr.setStyle(""-color1: green; -color2: orange;"");\r\nvar scene = new Scene(new BorderPane(r), 200, 200);\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\nstatic class AnimatedRect extends Rectangle {\r\nSimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\npublic AnimatedRect(double width, double height) {\r\nsuper(width, height);\r\nsetFill(color1.get());\r\ncolor1.addListener((obs, o, v) -> {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\ntimeline.set(createTimeline());\r\ntimeline.get().play();\r\n});\r\ncolor2.addListener((obs, o, v) -> {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\ntimeline.set(createTimeline());\r\ntimeline.get().play();\r\n});\r\nsceneProperty().addListener((obs, o, n) -> {\r\nif (n != null) {\r\nif (timeline.get() != null) {\r\ntimeline.get().play();\r\n}\r\n} else {\r\nif (timeline.get() != null) {\r\ntimeline.get().stop();\r\n}\r\n}\r\n});\r\n}\r\nTimeline createTimeline() {\r\nvar timeline = new Timeline(\r\nnew KeyFrame(Duration.millis(0),\r\nnew KeyValue(fillProperty(), color1.getValue(), LINEAR)\r\n),\r\nnew KeyFrame(Duration.millis(1000),\r\nnew KeyValue(fillProperty(), color2.getValue(), LINEAR)\r\n)\r\n);\r\ntimeline.setCycleCount(Timeline.INDEFINITE);\r\ntimeline.setAutoReverse(false);\r\nreturn timeline;\r\n}\r\nfinal StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\nStyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.RED\r\n);\r\nfinal StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\nStyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.BLUE\r\n);\r\nstatic class StyleableProperties {\r\nprivate static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n""-color1"", PaintConverter.getInstance(), Color.RED\r\n) {\r\n@Override\r\npublic boolean isSettable(AnimatedRect c) {\r\nreturn !c.color1.isBound();\r\n}\r\n@Override\r\npublic StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\nreturn c.color1;\r\n}\r\n};\r\nprivate static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n) {\r\n@Override\r\npublic boolean isSettable(AnimatedRect c) {\r\nreturn !c.color2.isBound();\r\n}\r\n@Override\r\npublic StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\nreturn c.color2;\r\n}\r\n};\r\nprivate static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\nstatic {\r\nfinal List<CssMetaData<? extends Styleable, ?>> styleables =\r\nnew ArrayList<>(Rectangle.getClassCssMetaData());\r\nstyleables.add(COLOR1);\r\nstyleables.add(COLOR2);\r\nSTYLEABLES = Collections.unmodifiableList(styleables);\r\n}\r\n}\r\npublic static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\nreturn StyleableProperties.STYLEABLES;\r\n}\r\n@Override\r\npublic List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\nreturn getClassCssMetaData();\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.google.cloud.storage.Blob;\r\nimport com.google.cloud.storage.Storage;\r\nimport com.google.cloud.storage.StorageOptions;\r\nimport com.google.cloud.ReadChannel;\r\nimport org.springframework.core.io.InputStreamResource;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport java.io.InputStream;\r\nimport java.net.URLConnection;\r\nimport java.nio.channels.Channels;\r\n@RestController\r\npublic class FileController {\r\n@GetMapping(path=""/file"", produces=MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName, @RequestParam String bucketName, @RequestParam String projectName) {\r\nStorage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\nBlob blob = storage.get(bucketName, fileName);\r\nif(blob == null){\r\nreturn ResponseEntity.notFound().build();\r\n}\r\nReadChannel readChannel = blob.reader();\r\nInputStream inputStream = Channels.newInputStream(readChannel);\r\nString contentType = URLConnection.guessContentTypeFromName(fileName);\r\nif(contentType == null){\r\ncontentType = ""application/octet-stream"";\r\n}\r\nreturn ResponseEntity.ok().contentType(MediaType.valueOf(contentType)).header(""Content-Disposition"", ""attachment; filename="" + fileName).body(new InputStreamResource(inputStream));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.TimeUnit;\r\n@RestController\r\npublic class VideoStreamController {\r\n@GetMapping(""/video"")\r\npublic SseEmitter streamVideo() {\r\nSseEmitter emitter = new SseEmitter();\r\ninitSocketConnection(new VideoStreamCallback() {\r\n@Override\r\npublic void onVideoStreamReceived(byte[] bytes) {\r\nMap.Entry<Boolean, List<Integer>> mdatEntry = hasMdat(bytes);\r\nif(mdatEntry.getKey()) {\r\nbyte[] mdatData = Arrays.copyOfRange(bytes, mdatEntry.getValue().get(3) + 1, bytes.length);\r\ntry {\r\nemitter.send(mdatData);\r\n} catch(Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}\r\n});\r\nreturn emitter;\r\n}\r\npublic Map.Entry<Boolean, List<Integer>> hasMdat(byte[] byteArray) {\r\nfor(int i = 0; i < byteArray.length - 3; i++){\r\nif(byteArray[i] == (byte)109 && byteArray[i + 1] == (byte)100 && byteArray[i + 2] == (byte)97 && byteArray[i + 3] == (byte)116){\r\nreturn Map.entry(true, Arrays.asList(i, i + 1, i + 2, i + 3));\r\n}\r\n}\r\nreturn Map.entry(false, Arrays.asList(0));\r\n}\r\npublic void initSocketConnection(VideoStreamCallback callback) {\r\nExecutors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable(){\r\n@Override\r\npublic void run(){\r\nbyte[] dummyData = createDummyData();\r\ncallback.onVideoStreamReceived(dummyData);\r\n}\r\n}, 0, 1, TimeUnit.SECONDS);\r\n}\r\npublic byte[] createDummyData() {\r\nbyte[] data = new byte[100];\r\nint pos = 50;\r\ndata[pos] = (byte)109;\r\ndata[pos + 1] = (byte)100;\r\ndata[pos + 2] = (byte)97;\r\ndata[pos + 3] = (byte)116;\r\nfor(int i = pos + 4; i < data.length; i++){\r\ndata[i] = (byte)(i);\r\n}\r\nreturn data;\r\n}\r\n}\r\ninterface VideoStreamCallback {\r\nvoid onVideoStreamReceived(byte[] bytes);\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.ArrayList;\r\nimport java.util.List;\r\npublic class PatternSearch {\r\npublic static List<int[]> searchPattern(int[][] T, int[][] P) {\r\nList<int[]> result = new ArrayList<>();\r\nint m = T.length;\r\nint n = T[0].length;\r\nint u = P.length;\r\nint v = P[0].length;\r\nfor (int i = 0; i <= m - u; i++) {\r\nfor (int j = 0; j <= n - v; j++) {\r\nboolean match = true;\r\nfor (int a = 0; a < u && match; a++) {\r\nfor (int b = 0; b < v; b++) {\r\nif (P[a][b] != 0 && T[i + a][j + b] != P[a][b]) {\r\nmatch = false;\r\nbreak;\r\n}\r\n}\r\n}\r\nif (match) {\r\nresult.add(new int[]{i, j});\r\n}\r\n}\r\n}\r\nreturn result;\r\n}\r\npublic static void main(String[] args) {\r\nint[][] T = {\r\n{2, 3, 4, 3, 6},\r\n{4, 1, 5, 7, 8},\r\n{9, 1, 2, 3, 1},\r\n{2, 4, 5, 1, 5},\r\n{3, 1, 9, 0, 2}\r\n};\r\nint[][] P = {\r\n{2, 3, 0},\r\n{0, 1, 5},\r\n{9, 0, 2}\r\n};\r\nList<int[]> matches = searchPattern(T, P);\r\nfor (int[] pos : matches) {\r\nSystem.out.println(""Pattern found at ("" + pos[0] + "", "" + pos[1] + "")"");\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import android.os.Bundle;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic class SCard {\r\nprivate String companyName;\r\npublic SCard() {}\r\npublic String getCompanyName() { return companyName; }\r\npublic void setCompanyName(String companyName) { this.companyName = companyName; }\r\n}\r\npublic class SCardListAdapter extends RecyclerView.Adapter<SCardListAdapter.ViewHolder> {\r\nprivate List<SCard> cardList;\r\npublic SCardListAdapter(List<SCard> cardList) { this.cardList = cardList; }\r\n@Override\r\npublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\nView view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\nreturn new ViewHolder(view);\r\n}\r\n@Override\r\npublic void onBindViewHolder(ViewHolder holder, int position) {\r\nSCard card = cardList.get(position);\r\nholder.sname.setText(card.getCompanyName());\r\n}\r\n@Override\r\npublic int getItemCount() { return cardList.size(); }\r\npublic class ViewHolder extends RecyclerView.ViewHolder {\r\nTextView sname;\r\npublic ViewHolder(View itemView) {\r\nsuper(itemView);\r\nsname = itemView.findViewById(R.id.sname);\r\n}\r\n}\r\n}\r\npublic class HomeFragment extends Fragment {\r\nprivate RecyclerView recyclerView;\r\nprivate SCardListAdapter adapter;\r\nprivate List<SCard> cardList = new ArrayList<>();\r\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\nView view = inflater.inflate(R.layout.fragment_home, container, false);\r\nrecyclerView = view.findViewById(R.id.search_recyclerview);\r\nrecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\nadapter = new SCardListAdapter(cardList);\r\nrecyclerView.setAdapter(adapter);\r\nfetchAllData();\r\nreturn view;\r\n}\r\nprivate void fetchAllData() {\r\nDatabaseReference ref = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\nref.addValueEventListener(new ValueEventListener() {\r\n@Override\r\npublic void onDataChange(@NonNull DataSnapshot snapshot) {\r\ncardList.clear();\r\nfor (DataSnapshot categorySnapshot : snapshot.getChildren()) {\r\nfor (DataSnapshot companySnapshot : categorySnapshot.getChildren()) {\r\nSCard card = companySnapshot.getValue(SCard.class);\r\ncardList.add(card);\r\n}\r\n}\r\nadapter.notifyDataSetChanged();\r\n}\r\n@Override\r\npublic void onCancelled(@NonNull DatabaseError error) {\r\n}\r\n});\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import sun.reflect.ReflectionFactory;\r\nimport java.lang.reflect.Constructor;\r\npublic class Parent {\r\nprivate Parent() {\r\nSystem.out.println(""Parent constructor invoked"");\r\n}\r\npublic void hello() {\r\nSystem.out.println(""Hello from Parent"");\r\n}\r\n}\r\npublic class Child extends Parent {\r\nprivate static final Constructor<Child> childConstructor;\r\nstatic {\r\ntry {\r\nReflectionFactory rf = ReflectionFactory.getReflectionFactory();\r\nConstructor<Object> objConstructor = Object.class.getDeclaredConstructor();\r\nchildConstructor = rf.newConstructorForSerialization(Child.class, objConstructor);\r\nchildConstructor.setAccessible(true);\r\n} catch(Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\nprivate Child() {\r\n}\r\npublic static Child newInstance() {\r\ntry {\r\nreturn childConstructor.newInstance();\r\n} catch(Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\npublic void hello() {\r\nSystem.out.println(""Hello from Child"");\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nChild child = Child.newInstance();\r\nchild.hello();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\npublic class Ed25519KeyLoader {\r\npublic static void main(String[] args) throws Exception {\r\nSecurity.addProvider(new BouncyCastleProvider());\r\nString privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\nbyte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\nPKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\nKeyFactory keyFactory = KeyFactory.getInstance(""Ed25519"", ""BC"");\r\nPrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\nSystem.out.println(""Private Key: "" + pkey);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.squareup.wire.schema.internal.parser.ProtoFileElement;\r\nimport com.squareup.wire.schema.internal.parser.ProtoParser;\r\nimport okio.BufferedSource;\r\nimport okio.Okio;\r\nimport java.io.File;\r\npublic class ProtoFileParserExample {\r\npublic static void main(String[] args) throws Exception {\r\nFile protoFile = new File(""path/to/your.proto"");\r\nBufferedSource source = Okio.buffer(Okio.source(protoFile));\r\nProtoFileElement protoFileElement = ProtoParser.parse(source, protoFile.getName());\r\nSystem.out.println(""Parsed Proto File:"");\r\nSystem.out.println(protoFileElement);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.concurrent.Callable;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\npublic class TimeoutRunner {\r\npublic static <T> T runWithTimeout(Callable<T> callable, long timeoutMillis) throws Exception {\r\nThread currentThread = Thread.currentThread();\r\nTimer timer = new Timer(true);\r\ntimer.schedule(new TimerTask() {\r\npublic void run() {\r\ncurrentThread.stop(new RuntimeException(""Timeout exceeded""));\r\n}\r\n}, timeoutMillis);\r\ntry {\r\nreturn callable.call();\r\n} finally {\r\ntimer.cancel();\r\n}\r\n}\r\n}\r\npublic class MyClass {\r\nThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\npublic void entry(Function<Void, Void> callback) {\r\ncounter.get().set(10);\r\ntry {\r\nTimeoutRunner.runWithTimeout(() -> {\r\nI_need_a_timeout(callback, 110);\r\nreturn null;\r\n}, 1000);\r\n} catch(Exception e) {\r\nSystem.out.println(""Timeout occurred: "" + e.getMessage());\r\n}\r\nint result = counter.get().get();\r\nSystem.out.println(""Result: "" + result);\r\n}\r\nprivate void I_need_a_timeout(Function<Void, Void> callback, int loop) {\r\nwhile(loop-- >= 0) {\r\ncounter.get().incrementAndGet();\r\ncallback.apply(null);\r\n}\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nMyClass myClass = new MyClass();\r\nmyClass.entry(param -> {\r\ntry {\r\nThread.sleep(100);\r\n} catch(InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n}\r\nreturn null;\r\n});\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.Random;\r\npublic class EtlTracingHelper {\r\npublic static final int TRACE_ID_HEX_LENGTH = 32;\r\npublic static final int SPAN_ID_HEX_LENGTH = 16;\r\npublic static String padOrTrim(String id, int desiredLength) {\r\nString hex = toHex(id);\r\nif (hex.length() > desiredLength) {\r\nreturn hex.substring(0, desiredLength);\r\n} else if (hex.length() < desiredLength) {\r\nreturn String.format(""%"" + desiredLength + ""s"", hex).replace(' ', '0');\r\n}\r\nreturn hex;\r\n}\r\npublic static String toHex(String input) {\r\nbyte[] bytes = input.getBytes();\r\nStringBuilder sb = new StringBuilder();\r\nfor (byte b : bytes) {\r\nsb.append(String.format(""%02x"", b));\r\n}\r\nreturn sb.toString();\r\n}\r\npublic static String generateRandomSpanId() {\r\nbyte[] bytes = new byte[8];\r\nnew Random().nextBytes(bytes);\r\nStringBuilder sb = new StringBuilder();\r\nfor (byte b : bytes) {\r\nsb.append(String.format(""%02x"", b));\r\n}\r\nreturn sb.toString();\r\n}\r\npublic static Context upsertContext(String uniqueId) {\r\nString traceId = padOrTrim(uniqueId, TRACE_ID_HEX_LENGTH);\r\nString spanId = generateRandomSpanId();\r\nSpanContext spanContext = SpanContext.create(traceId, spanId, TraceFlags.getDefault(), TraceState.getDefault());\r\nSpan span = Span.wrap(spanContext);\r\nreturn Context.root().with(span);\r\n}\r\n}\r\npublic class DataPackage {\r\nprivate String uniqueId;\r\npublic DataPackage(String uniqueId) {\r\nthis.uniqueId = uniqueId;\r\n}\r\npublic String getUniqueId() {\r\nreturn uniqueId;\r\n}\r\n}\r\npublic class Step1 {\r\nprivate final Tracer tracer;\r\npublic Step1(Tracer tracer) {\r\nthis.tracer = tracer;\r\n}\r\npublic void execute(DataPackage obj) {\r\nContext otelContext = EtlTracingHelper.upsertContext(obj.getUniqueId());\r\nSpan span = tracer.spanBuilder(""Step1"").setParent(otelContext).startSpan();\r\ntry {\r\ndoWork();\r\n} catch (Exception e) {\r\nspan.recordException(e);\r\n} finally {\r\nspan.end();\r\n}\r\n}\r\nprivate void doWork() {\r\nSystem.out.println(""Executing step 1 logic..."");\r\n}\r\n}\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nTracer tracer = GlobalOpenTelemetry.getTracer(""etlTracer"");\r\nDataPackage dp = new DataPackage(""id_1234"");\r\nStep1 step1 = new Step1(tracer);\r\nstep1.execute(dp);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\npublic class LRUCache {\r\nclass Node {\r\nint key;\r\nint value;\r\nNode prev;\r\nNode next;\r\npublic Node(int key, int value) {\r\nthis.key = key;\r\nthis.value = value;\r\n}\r\n}\r\nprivate Map<Integer, Node> map;\r\nprivate int capacity;\r\nprivate Node head;\r\nprivate Node tail;\r\npublic LRUCache(int capacity) {\r\nthis.capacity = capacity;\r\nmap = new HashMap<>();\r\nhead = new Node(0, 0);\r\ntail = new Node(0, 0);\r\nhead.next = tail;\r\ntail.prev = head;\r\n}\r\npublic int get(int key) {\r\nif(map.containsKey(key)){\r\nNode node = map.get(key);\r\nremove(node);\r\ninsertToHead(node);\r\nreturn node.value;\r\n}else{\r\nreturn -1;\r\n}\r\n}\r\npublic void put(int key, int value) {\r\nif(map.containsKey(key)){\r\nNode node = map.get(key);\r\nnode.value = value;\r\nremove(node);\r\ninsertToHead(node);\r\n}else{\r\nif(map.size() == capacity){\r\nNode nodeToRemove = tail.prev;\r\nremove(nodeToRemove);\r\nmap.remove(nodeToRemove.key);\r\n}\r\nNode newNode = new Node(key, value);\r\nmap.put(key, newNode);\r\ninsertToHead(newNode);\r\n}\r\n}\r\nprivate void remove(Node node) {\r\nnode.prev.next = node.next;\r\nnode.next.prev = node.prev;\r\n}\r\nprivate void insertToHead(Node node) {\r\nnode.next = head.next;\r\nnode.prev = head;\r\nhead.next.prev = node;\r\nhead.next = node;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.util.JRImageLoader;\r\nimport net.sf.jasperreports.engine.util.JRLoader;\r\nimport net.sf.jasperreports.view.JasperViewer;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class JasperS3Image {\r\n    public static void main(String[] args) throws Exception {\r\n        String bucketName=""your-bucket-name"";\r\n        String imageKey=""path/to/image.jpg"";\r\n        AmazonS3 s3Client=AmazonS3ClientBuilder.defaultClient();\r\n        S3Object s3Object=s3Client.getObject(bucketName,imageKey);\r\n        InputStream imageInputStream=s3Object.getObjectContent();\r\n        BufferedImage image=ImageIO.read(imageInputStream);\r\n        \r\n        InputStream reportStream=JasperS3Image.class.getResourceAsStream(""/your_report.jasper"");\r\n        JasperReport jasperReport=(JasperReport) JRLoader.loadObject(reportStream);\r\n        Map<String,Object> parameters=new HashMap<>();\r\n        parameters.put(""imageParam"",JRImageLoader.loadImage(image));\r\n        \r\n        JasperPrint jasperPrint=JasperFillManager.fillReport(jasperReport,parameters,new net.sf.jasperreports.engine.JREmptyDataSource());\r\n        JasperViewer.viewReport(jasperPrint,false);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\nimport java.util.Random;\r\n\r\nclass GamePanel extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private int redX = 200, redY = 200;\r\n    private final int RED_SIZE = 50;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private int blueX, blueY;\r\n    private final int BLUE_SIZE = 30;\r\n    private final int FALL_SPEED = 2;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n    private Random rand;\r\n\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(500, 500));\r\n        setBackground(Color.WHITE);\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        rand = new Random();\r\n        resetBlueDot();\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void resetBlueDot() {\r\n        blueX = rand.nextInt(getWidth() - BLUE_SIZE);\r\n        blueY = 0;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, RED_SIZE, RED_SIZE);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, BLUE_SIZE, BLUE_SIZE);\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePositions();\r\n        checkCollision();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePositions() {\r\n        if (leftPressed) redX = Math.max(redX - MOVE_AMOUNT, 0);\r\n        if (rightPressed) redX = Math.min(redX + MOVE_AMOUNT, getWidth() - RED_SIZE);\r\n        if (upPressed) redY = Math.max(redY - MOVE_AMOUNT, 0);\r\n        if (downPressed) redY = Math.min(redY + MOVE_AMOUNT, getHeight() - RED_SIZE);\r\n        \r\n        blueY += FALL_SPEED;\r\n        if (blueY > getHeight()) {\r\n            resetBlueDot();\r\n        }\r\n    }\r\n\r\n    private void checkCollision() {\r\n        Rectangle redBounds = new Rectangle(redX, redY, RED_SIZE, RED_SIZE);\r\n        Rectangle blueBounds = new Rectangle(blueX, blueY, BLUE_SIZE, BLUE_SIZE);\r\n        if (redBounds.intersects(blueBounds)) {\r\n            System.out.println(""Collision detected!"");\r\n            resetBlueDot();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\npublic class MyGame {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Collision Game"");\r\n            GamePanel gamePanel = new GamePanel();\r\n            frame.add(gamePanel);\r\n            frame.pack();\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\nprivate static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\npublic static String generateTemplate() {\r\nlong currentValue = COUNTER.getAndIncrement();\r\nreturn String.format(""%04X-7%03X-%04X"", (currentValue >> 32) & 0xFFFF, (currentValue >> 16) & 0xFFF, currentValue & 0xFFFF).toLowerCase();\r\n}\r\n\r\npublic static void main(String[] args) {\r\nfor (int i = 0; i < 3; i++) {\r\nSystem.out.println(generateTemplate());\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = createCustomSpinner();\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        root.setStyle(""-fx-padding: 20;"");\r\n        \r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Custom Spinner"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Spinner<Double> createCustomSpinner() {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        DoubleProperty valueProperty = new SimpleDoubleProperty(0.0);\r\n        \r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, 0.0, 0.25);\r\n        valueFactory.setConverter(new StringConverter<>() {\r\n            @Override\r\n            public String toString(Double value) {\r\n                if (value == null) return ""+0.00"";\r\n                return String.format(""%+.2f"", value).replace(""."", "","");\r\n            }\r\n\r\n            @Override\r\n            public Double fromString(String text) {\r\n                try {\r\n                    return Double.parseDouble(text.replace("","", "".""));\r\n                } catch (NumberFormatException e) {\r\n                    return 0.0;\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n\r\n        Pattern validPattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validPattern.matcher(newText).matches()) {\r\n                try {\r\n                    double newValue = Double.parseDouble(newText.replace("","", "".""));\r\n                    if (newValue >= -20.0 && newValue <= 20.0 && newValue % 0.25 == 0) {\r\n                        return c;\r\n                    }\r\n                } catch (NumberFormatException ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(valueFactory.getConverter(), 0.0, filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        valueProperty.bindBidirectional(spinner.valueProperty());\r\n\r\n        return spinner;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ReactiveExample {\r\npublic static void main(String[] args) {\r\nList<A> list = List.of(new A(""one""), new A(""two""));\r\nMap<String, String> result = Flux.fromIterable(list)\r\n.collectMap(A::getName, b -> functionReturningMonoOfC(b).map(C::getUrl).block())\r\n.block();\r\nSystem.out.println(result);\r\n}\r\n\r\nstatic Mono<C> functionReturningMonoOfC(A a) {\r\nreturn Mono.just(new C(""url-for-"" + a.getName()));\r\n}\r\n\r\nstatic class A {\r\nprivate final String name;\r\npublic A(String name) {this.name = name;}\r\npublic String getName() {return name;}\r\n}\r\n\r\nstatic class C {\r\nprivate final String url;\r\npublic C(String url) {this.url = url;}\r\npublic String getUrl() {return url;}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class RedisTlsConfig {\r\npublic static void main(String[] args) throws Exception {\r\nHostAndPort address = new HostAndPort(""localhost"", 6379);\r\nSSLSocketFactory sslFactory = createSslSocketFactory(""D:\\tmp\\keystore.jks"", ""123456"", ""my_cert"");\r\nJedisClientConfig config = DefaultJedisClientConfig.builder().ssl(true).sslSocketFactory(sslFactory).build();\r\nJedisPooled jedis = new JedisPooled(address, config);\r\njedis.set(""foo"", ""bar"");\r\nSystem.out.println(jedis.get(""foo"")); \r\n}\r\n\r\nprivate static SSLSocketFactory createSslSocketFactory(String keystorePath, String keystorePassword, String alias) throws IOException, GeneralSecurityException {\r\nKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\nkeyStore.load(new FileInputStream(keystorePath), keystorePassword.toCharArray());\r\nKeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\nkeyManagerFactory.init(keyStore, keystorePassword.toCharArray());\r\nKeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\nfor (int i = 0; i < keyManagers.length; i++) {\r\nif (keyManagers[i] instanceof X509KeyManager) {\r\nkeyManagers[i] = new CustomX509KeyManager((X509KeyManager) keyManagers[i], alias);\r\n}\r\n}\r\nSSLContext sslContext = SSLContext.getInstance(""TLS"");\r\nsslContext.init(keyManagers, null, null);\r\nreturn sslContext.getSocketFactory();\r\n}\r\n\r\nprivate static class CustomX509KeyManager implements X509KeyManager {\r\nprivate final X509KeyManager baseKeyManager;\r\nprivate final String alias;\r\n\r\npublic CustomX509KeyManager(X509KeyManager baseKeyManager, String alias) {\r\nthis.baseKeyManager = baseKeyManager;\r\nthis.alias = alias;\r\n}\r\n\r\n@Override\r\npublic String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\nreturn alias;\r\n}\r\n\r\n@Override\r\npublic String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\nreturn baseKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n}\r\n\r\n@Override\r\npublic X509Certificate[] getCertificateChain(String alias) {\r\nreturn baseKeyManager.getCertificateChain(alias);\r\n}\r\n\r\n@Override\r\npublic PrivateKey getPrivateKey(String alias) {\r\nreturn baseKeyManager.getPrivateKey(alias);\r\n}\r\n\r\n@Override\r\npublic String[] getClientAliases(String keyType, Principal[] issuers) {\r\nreturn baseKeyManager.getClientAliases(keyType, issuers);\r\n}\r\n\r\n@Override\r\npublic String[] getServerAliases(String keyType, Principal[] issuers) {\r\nreturn baseKeyManager.getServerAliases(keyType, issuers);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class LineNumberInstrumentation extends MethodVisitor {\r\npublic LineNumberInstrumentation(MethodVisitor mv) {\r\nsuper(Opcodes.ASM9, mv);\r\n}\r\n\r\n@Override\r\npublic void visitCode() {\r\nsuper.visitCode();\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\nmv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\nmv.visitInsn(Opcodes.ICONST_2);\r\nmv.visitInsn(Opcodes.AALOAD);\r\nmv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(I)V"", false);\r\n}\r\n\r\n@Override\r\npublic void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\nsuper.visitLineNumber(line, start);\r\nmv.visitLdcInsn(line);\r\nmv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(I)V"", false);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\n\r\npublic class Main {\r\nprivate static final ExecutorService SERVICE = Executors.newFixedThreadPool(8);\r\nprivate static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(8);\r\n\r\npublic static void main(String[] args) throws InterruptedException {\r\nReportClient client = new ReportClient();\r\nList<CompletableFuture<Boolean>> futures = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\nfutures.add(CompletableFuture.supplyAsync(() -> new Task(client).execute(), SERVICE));\r\n}\r\nCompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\r\nSERVICE.shutdown();\r\nSCHEDULER.shutdown();\r\n}\r\n}\r\n\r\nclass Task {\r\nprivate final ReportClient client;\r\n\r\npublic Task(ReportClient client) {\r\nthis.client = client;\r\n}\r\n\r\npublic Boolean execute() {\r\nString uuid = client.createDocument();\r\nCompletableFuture<Boolean> future = new CompletableFuture<>();\r\ncheckStatus(uuid, future);\r\nreturn future.join();\r\n}\r\n\r\nprivate void checkStatus(String uuid, CompletableFuture<Boolean> future) {\r\nSCHEDULER.schedule(() -> {\r\nGetStatusResponse status = client.getStatus(uuid);\r\nif (Status.PENDING.equals(status.status())) {\r\ncheckStatus(uuid, future);\r\n} else {\r\nclient.getReport(uuid);\r\nfuture.complete(Boolean.TRUE);\r\n}\r\n}, 10, TimeUnit.SECONDS);\r\n}\r\n}\r\n\r\nclass ReportClient {\r\npublic String createDocument() {\r\nreturn UUID.randomUUID().toString();\r\n}\r\n\r\npublic GetStatusResponse getStatus(String uuid) {\r\nreturn new GetStatusResponse(Math.random() > 0.2 ? Status.PENDING : Status.READY);\r\n}\r\n\r\npublic void getReport(String uuid) {\r\nSystem.out.println(""Report fetched for: "" + uuid);\r\n}\r\n}\r\n\r\nenum Status {\r\nPENDING, READY\r\n}\r\n\r\nclass GetStatusResponse {\r\nprivate final Status status;\r\n\r\npublic GetStatusResponse(Status status) {\r\nthis.status = status;\r\n}\r\n\r\npublic Status status() {\r\nreturn status;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public JsonNode getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{ \""payLoad\"": [ { \""id\"": 1, \""userName\"": null, \""arName\"": \""A1\"", \""areas\"": [] }, { \""id\"": 2, \""userName\"": \""alpha2\"", \""arName\"": \""A2\"", \""areas\"": [] } ], \""count\"": 2, \""respCode\"": 200 }"";\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response response = objectMapper.readValue(jsonString, Response.class);\r\n        System.out.println(response.getTransactionsList().toString());\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n    private JsonParser jsonParser;\r\n    private DeserializationContext ctxt;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        deserializer = new StringToDateDeserializer();\r\n        jsonParser = mock(JsonParser.class);\r\n        ctxt = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_ValidDate() throws IOException, ParseException {\r\n        when(jsonParser.getText()).thenReturn(""2024-03-18T12:30:00.000Z"");\r\n        Date result = deserializer.deserialize(jsonParser, ctxt);\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_EmptyString() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n        Date result = deserializer.deserialize(jsonParser, ctxt);\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_InvalidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, ctxt));\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.authserver;\r\n\r\nimport com.nimbusds.jose.jwk.JWK;\r\nimport com.nimbusds.jose.jwk.JWKSet;\r\nimport com.nimbusds.jose.jwk.OctetSequenceKey;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\r\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\r\n\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.util.Base64;\r\nimport java.util.List;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n@Value(""${security.jwt.secret}"")\r\nprivate String jwtSecret;\r\n\r\n@Bean\r\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http.csrf(csrf -> csrf.disable())\r\n        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n        .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n        .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter())));\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    OctetSequenceKey jwk = new OctetSequenceKey.Builder(secretKeySpec).algorithm(new com.nimbusds.jose.JWSAlgorithm(""HS256"")).build();\r\n    JWKSet jwkSet = new JWKSet(jwk);\r\n    return new NimbusJwtEncoder((jwkSelector, context) -> jwkSelector.select(jwkSet));\r\n}\r\n\r\n@Bean\r\npublic JwtDecoder jwtDecoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n}\r\n\r\n@Bean\r\npublic JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n    JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n    grantedAuthoritiesConverter.setAuthorityPrefix(""ROLE_"");\r\n    grantedAuthoritiesConverter.setAuthoritiesClaimName(""roles"");\r\n    JwtAuthenticationConverter authenticationConverter = new JwtAuthenticationConverter();\r\n    authenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\r\n    return authenticationConverter;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n\r\nprivate String name;\r\nprivate String motive;\r\n\r\npublic Company(@Value(""Adventure of War"") String name, @Value(""A place for War"") String motive) {\r\nthis.name = name;\r\nthis.motive = motive;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Company{"" +\r\n""name='"" + name + '\'' +\r\n"", motive='"" + motive + '\'' +\r\n'}';\r\n}\r\n}\r\n\r\njava\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\npublic static void main(String[] args) {\r\nApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\r\nCompany company = context.getBean(Company.class);\r\nSystem.out.println(company);\r\n}\r\n}\r\n\r\njava\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\n@ComponentScan(basePackages = ""gd.rf.anuragsaini.stereotype"")\r\npublic class AppConfig {\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.security;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.core.userdetails.User;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.inmemory.InMemoryUserDetailsManager;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\nreturn new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\npublic UserDetailsService customUserDetailsService(UserRepository userRepository) {\r\nreturn new CustomUserDetailsService(userRepository);\r\n}\r\n\r\n@Bean\r\npublic UserDetailsService inMemoryUserDetailsService() {\r\nUserDetails specialUser = User.withUsername(""specialUser"")\r\n.password(passwordEncoder().encode(""specialPassword""))\r\n.roles(""SPECIALROLE"")\r\n.build();\r\nreturn new InMemoryUserDetailsManager(specialUser);\r\n}\r\n\r\n@Bean\r\n@Order(1)\r\npublic SecurityFilterChain specialFilterChain(HttpSecurity http, UserDetailsService inMemoryUserDetailsService) throws Exception {\r\nhttp.securityMatcher(""/very-special-path/**"")\r\n.authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n.userDetailsService(inMemoryUserDetailsService)\r\n.httpBasic();\r\nreturn http.build();\r\n}\r\n\r\n@Bean\r\n@Order(2)\r\npublic SecurityFilterChain defaultFilterChain(HttpSecurity http, UserDetailsService customUserDetailsService) throws Exception {\r\nhttp.authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n.userDetailsService(customUserDetailsService)\r\n.httpBasic();\r\nreturn http.build();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.polling;\r\n\r\nimport io.smallrye.mutiny.Multi;\r\nimport io.smallrye.mutiny.Uni;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.time.Duration;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\npublic class PollingExample {\r\n\r\nprivate static final Logger log = LoggerFactory.getLogger(PollingExample.class);\r\nprivate final Service service = new Service();\r\nprivate final AtomicBoolean pollingActive = new AtomicBoolean(true);\r\n\r\npublic void startPolling() {\r\nMulti.createFrom().ticks().every(Duration.ofSeconds(5))\r\n.onItem().transformToMultiAndMerge(tick -> {\r\nif (!pollingActive.get()) {\r\nreturn Multi.createFrom().empty();\r\n}\r\nlog.info(""Tick: {}"", tick);\r\nreturn service.getTransactions().toMulti()\r\n.onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n.filter(transaction -> {\r\nboolean transactionFound = transaction.getAmount().stream()\r\n.anyMatch(amount -> amount.getQuantity().equals(""test""));\r\nif (transactionFound) {\r\npollingActive.set(false);\r\n}\r\nreturn transactionFound;\r\n});\r\n})\r\n.subscribe()\r\n.with(transaction -> log.info(""Transaction found: {}"", transaction),\r\nfailure -> log.error(""Polling error"", failure));\r\n}\r\n\r\nstatic class Service {\r\nUni<List<Transaction>> getTransactions() {\r\nreturn Uni.createFrom().item(List.of(new Transaction(List.of(new Amount(""test"")))));\r\n}\r\n}\r\n\r\nstatic class Transaction {\r\nprivate final List<Amount> amount;\r\n\r\nTransaction(List<Amount> amount) {\r\nthis.amount = amount;\r\n}\r\n\r\nList<Amount> getAmount() {\r\nreturn amount;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Transaction{"" + ""amount="" + amount + '}';\r\n}\r\n}\r\n\r\nstatic class Amount {\r\nprivate final String quantity;\r\n\r\nAmount(String quantity) {\r\nthis.quantity = quantity;\r\n}\r\n\r\nString getQuantity() {\r\nreturn quantity;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn ""Amount{"" + ""quantity='"" + quantity + '\'' + '}';\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nnew PollingExample().startPolling();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.security.MessageDigest;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\npublic static void main(String[] args) throws Exception {\r\nString keyFilePath = ""/home/debashishd/Downloads/s_key"";\r\nbyte[] keyBytes = readKeyFile(keyFilePath);\r\nSecretKey secretKey = deriveKeyFromBytes(keyBytes);\r\nString testMessage = ""Hello this is Roxane"";\r\n\r\nbyte[] iv = new byte[16];\r\nIvParameterSpec ivSpec = new IvParameterSpec(iv);\r\n\r\nCipher encryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\nencryptCipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);\r\nString encryptedValue = Base64.getEncoder().encodeToString(encryptCipher.doFinal(testMessage.getBytes(StandardCharsets.UTF_8)));\r\nSystem.out.println(""Encrypted value: "" + encryptedValue);\r\n\r\nCipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\ndecryptCipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);\r\nString decryptedValue = new String(decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue)), StandardCharsets.UTF_8);\r\nSystem.out.println(""Decrypted value: "" + decryptedValue);\r\n}\r\n\r\nprivate static byte[] readKeyFile(String filePath) throws Exception {\r\nreturn Files.readAllBytes(Paths.get(filePath));\r\n}\r\n\r\nprivate static SecretKey deriveKeyFromBytes(byte[] keyBytes) throws Exception {\r\nMessageDigest sha = MessageDigest.getInstance(""SHA-256"");\r\nbyte[] key = sha.digest(keyBytes);\r\nreturn new SecretKeySpec(key, ""AES"");\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerBoundsControl extends Application {\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nSpinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\nSpinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n\r\nspinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\nspinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n});\r\n\r\nspinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\nspinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\ndisableArrows(spinnerMin);\r\ndisableArrows(spinnerMax);\r\n});\r\n\r\nHBox root = new HBox(10, spinnerMin, spinnerMax);\r\nScene scene = new Scene(root, 300, 100);\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Spinner Bounds Control"");\r\nprimaryStage.show();\r\n}\r\n\r\nprivate void disableArrows(Spinner<Integer> spinner) {\r\nTextField editor = spinner.getEditor();\r\neditor.textProperty().addListener(new ChangeListener<String>() {\r\n@Override\r\npublic void changed(ObservableValue<? extends String> obs, String oldVal, String newVal) {\r\nint value = Integer.parseInt(newVal);\r\nboolean disableUp = value == spinner.getValueFactory().getMax();\r\nboolean disableDown = value == spinner.getValueFactory().getMin();\r\nspinner.lookup("".increment-arrow-button"").setDisable(disableUp);\r\nspinner.lookup("".decrement-arrow-button"").setDisable(disableDown);\r\n}\r\n});\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.xerox;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class TestThymeleafUTF8 {\r\npublic static void main(String[] args) {\r\ntry {\r\nTemplateEngine templateEngine = new TemplateEngine();\r\nClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\nresolver.setCharacterEncoding(""UTF-8"");\r\nresolver.setTemplateMode(TemplateMode.XML);\r\ntemplateEngine.setTemplateResolver(resolver);\r\nContext ct = new Context();\r\nct.setVariable(""TEST_AR"", ""???? ????? ?? ??? ?????"");\r\nct.setVariable(""TEST_HE"", ""??????"");\r\nct.setVariable(""TEST_CN"", ""?????"");\r\nct.setVariable(""currentDate"", LocalDateTime.now().toString());\r\nBufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8));\r\ntemplateEngine.process(""test_template.xml"", ct, out);\r\nout.close();\r\n} catch (Exception e) {\r\nSystem.out.println(e);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.demo;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.hardware.usb.UsbDevice;\r\nimport android.hardware.usb.UsbManager;\r\nimport android.util.Log;\r\npublic class NativeUsbService {\r\nprivate static final String TAG = ""USB_SERVICE"";\r\nprivate static final String ACTION_USB_PERMISSION = ""com.example.demo.USB_PERMISSION"";\r\nprivate UsbManager usbManager;\r\nprivate UsbDevice usbDevice;\r\nprivate Context context;\r\npublic NativeUsbService(Context context) {\r\nthis.context = context;\r\nusbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\nIntentFilter filter = new IntentFilter();\r\nfilter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\nfilter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\nfilter.addAction(ACTION_USB_PERMISSION);\r\ncontext.registerReceiver(usbReceiver, filter);\r\n}\r\nprivate final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\npublic void onReceive(Context context, Intent intent) {\r\nString action = intent.getAction();\r\nif (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\nUsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\nif (device != null) {\r\nusbDevice = device;\r\nrequestPermission(device);\r\n}\r\n} else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\nLog.d(TAG, ""onReceive: Device was detached!"");\r\nusbDevice = null;\r\n} else if (ACTION_USB_PERMISSION.equals(action)) {\r\nUsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\nif (device != null && intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\nLog.d(TAG, ""Permission granted for device: "" + device.getDeviceName());\r\nonPermissionGranted(device);\r\n} else {\r\nLog.d(TAG, ""Permission denied for device"");\r\n}\r\n}\r\n}\r\n};\r\nprivate void requestPermission(UsbDevice device) {\r\nPendingIntent permissionIntent = PendingIntent.getBroadcast(context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_UPDATE_CURRENT);\r\nusbManager.requestPermission(device, permissionIntent);\r\n}\r\nprivate void onPermissionGranted(UsbDevice device) {\r\nLog.d(TAG, ""Now you can communicate with the device: "" + device.getDeviceName());\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"private <T extends Fieldable> T positionEntity(Supplier<T> entitySupplier) {\r\nwhile (true) {\r\nint x = random.nextInt(sizeX);\r\nint y = random.nextInt(sizeY);\r\nif (field.getFieldable(x, y) instanceof Empty) {\r\nT entity = entitySupplier.get();\r\nfield.setFieldable(x, y, entity);\r\nreturn entity;\r\n}\r\n}\r\n}\r\n\r\njava\r\nprivate void positionMagician() {\r\nmag = positionEntity(() -> new Magician(x, y, sizeX, sizeY, field, player, this));\r\n}\r\n\r\nprivate void positionGoblin() {\r\ngoblin = positionEntity(() -> new Goblin(x, y, player, field, this, sizeX, sizeY));\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"spring:\r\n elasticsearch:\r\n  uris:\r\n   - https://localhost:9700\r\n  username: elastic\r\n  password: 123\r\n  connection-timeout: 10s\r\n  socket-timeout: 30s\r\n  ssl:\r\n   certificate: classpath:certs/http_ca.crt\r\n   verification-mode: certificate\r\n\r\njava\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n@Bean\r\npublic RestClient restClient() throws IOException {\r\nString certPath = ""certs/http_ca.crt"";\r\nPath caCertificatePath = Paths.get(ResourceUtils.getFile(""classpath:"" + certPath).toURI());\r\nSSLContext sslContext = SSLContextBuilder.create()\r\n.loadTrustMaterial(caCertificatePath.toFile(), null)\r\n.build();\r\nRestClientBuilder builder = RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n.setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder\r\n.setSSLContext(sslContext)\r\n.setDefaultCredentialsProvider(credentialsProvider()));\r\nreturn builder.build();\r\n}\r\n\r\nprivate CredentialsProvider credentialsProvider() {\r\nBasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\ncredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(""elastic"", ""123""));\r\nreturn credentialsProvider;\r\n}\r\n\r\n@Bean\r\npublic ElasticsearchOperations elasticsearchOperations() throws IOException {\r\nreturn new ElasticsearchRestTemplate(client());\r\n}\r\n\r\n@Bean\r\npublic ElasticsearchClient client() throws IOException {\r\nRestClient restClient = restClient();\r\nElasticsearchTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\nreturn new ElasticsearchClient(transport);\r\n}\r\n}\r\n\r\njava\r\n@Autowired\r\nprivate ElasticsearchOperations elasticsearchOperations;\r\n\r\n@Autowired\r\nprivate UserRepository userRepository;\r\n\r\npublic void saveUser(User user) {\r\nuserRepository.save(user);\r\n}\r\n\r\npublic List<User> searchUsers(String keyword) {\r\nQuery query = new NativeSearchQueryBuilder()\r\n.withQuery(QueryBuilders.matchQuery(""name"", keyword))\r\n.build();\r\nreturn elasticsearchOperations.search(query, User.class)\r\n.stream()\r\n.map(SearchHit::getContent)\r\n.collect(Collectors.toList());\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class TaskManager {\r\nprivate static final ConcurrentHashMap<String, ReentrantLock> lockMap = new ConcurrentHashMap<>();\r\nprivate static final ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\npublic static void main(String[] args) {\r\nsubmitTask(""hi"");\r\nsubmitTask(""h"");\r\nsubmitTask(""u"");\r\nsubmitTask(""y"");\r\nsubmitTask(""hi"");\r\nsubmitTask(""p"");\r\nsubmitTask(""o"");\r\nsubmitTask(""bb"");\r\nexecutor.shutdown();\r\n}\r\n\r\nprivate static void submitTask(String value) {\r\nexecutor.submit(new Task(value));\r\n}\r\n\r\nstatic class Task implements Runnable {\r\nprivate final String value;\r\npublic Task(String value) {\r\nthis.value = value;\r\n}\r\n@Override\r\npublic void run() {\r\nReentrantLock lock = lockMap.computeIfAbsent(value, k -> new ReentrantLock());\r\nif (lock.tryLock()) {\r\ntry {\r\nSystem.out.println(""Executing: "" + value);\r\nThread.sleep(5000);\r\n} catch (InterruptedException e) {\r\nThread.currentThread().interrupt();\r\n} finally {\r\nlock.unlock();\r\nlockMap.remove(value, lock);\r\n}\r\n} else {\r\nSystem.out.println(""Skipping duplicate: "" + value);\r\n}\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"\r\n    @PostMapping(\r\n      value = &quot;/sides/Request&quot;,\r\n      consumes = MediaType.APPLICATION_XML_VALUE,\r\n      produces = MediaType.APPLICATION_XML_VALUE)\r\n  public Mono&lt;ResponseModel&gt; getSsi(@RequestBody Mono&lt;RequestModel&gt; requestModelMono) {...\r\n}\r\n\r\nPOM:\r\n &lt;dependency&gt;\r\n            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;\r\n            &lt;version&gt;2.3.1&lt;/version&gt;\r\n        &lt;/dependency&gt;\r\n\r\n        \r\n\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;\r\n \r\n        &lt;/dependency&gt;\r\n\r\n    \r\n\r\n        &lt;dependency&gt;\r\n            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;\r\n            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;\r\n          \r\n            &lt;scope&gt;runtime&lt;/scope&gt;\r\n        &lt;/dependency&gt;\r\n\r\n"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.web.bind.annotation.*;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\npublic class CoordinateController {\r\n@PostMapping(""/hole/coordinate"")\r\n@ResponseBody\r\npublic String saveCoordinate(@RequestBody Map<String, Object> params) {\r\nSystem.out.println(""params = "" + params);\r\n\r\nList<List<Integer>> list = (List<List<Integer>>) params.get(""coordinate"");\r\n\r\nint[][] coordinates = list.stream()\r\n.map(l -> l.stream().mapToInt(Integer::intValue).toArray())\r\n.toArray(int[][]::new);\r\n\r\nfor (int[] row : coordinates) {\r\nSystem.out.println(""Row: "" + java.util.Arrays.toString(row));\r\n}\r\n\r\nreturn ""success"";\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.Random;\r\n\r\nclass Card {\r\nString name;\r\n\r\nCard(String name) {\r\nthis.name = name;\r\n}\r\n\r\n@Override\r\npublic String toString() {\r\nreturn name;\r\n}\r\n}\r\n\r\npublic class CardShuffler {\r\npublic static void fisherYatesShuffle(Card[] deck) {\r\nRandom random = new Random();\r\nfor (int i = deck.length - 1; i > 0; i--) {\r\nint j = random.nextInt(i + 1);\r\nCard temp = deck[i];\r\ndeck[i] = deck[j];\r\ndeck[j] = temp;\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\nCard[] unshuffledDeck = {\r\nnew Card(""Ace""), new Card(""King""), new Card(""Queen""),\r\nnew Card(""Jack""), new Card(""Ten""), new Card(""Nine"")\r\n};\r\n\r\nSystem.out.println(""Before shuffle:"");\r\nfor (Card card : unshuffledDeck) {\r\nSystem.out.print(card + "" "");\r\n}\r\n\r\nfisherYatesShuffle(unshuffledDeck);\r\n\r\nSystem.out.println(""\nAfter shuffle:"");\r\nfor (Card card : unshuffledDeck) {\r\nSystem.out.print(card + "" "");\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\nprivate static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n);\r\nprivate static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n);\r\nprivate AutoCompletionBinding<String> nameBinding;\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nTextField textField = new TextField();\r\ntextField.setOnKeyTyped(event -> {\r\nString input = textField.getText().toUpperCase();\r\nif (input.length() < 2) {\r\nif (nameBinding != null) {\r\nnameBinding.dispose();\r\nnameBinding = null;\r\n}\r\nreturn;\r\n}\r\nif (nameBinding != null) nameBinding.dispose();\r\nif (input.startsWith(""A"")) {\r\nnameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n} else {\r\nnameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n}\r\nnameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n});\r\nVBox root = new VBox(10, textField);\r\nScene scene = new Scene(root, 300, 200);\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Autocomplete Example"");\r\nprimaryStage.show();\r\n}\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExcelExport {\r\npublic static void main(String[] args) {\r\ntry (OutputStream os = new FileOutputStream(""test.xls"");\r\nWorkbook wb = new HSSFWorkbook()) {\r\nSheet sh = wb.createSheet(""test"");\r\nRow r = sh.createRow(0);\r\nCellStyle cs = wb.createCellStyle();\r\ncs.setFillBackgroundColor(IndexedColors.WHITE.index);\r\ncs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\ncs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\nfor (int i = 0; i < 50; i++) {\r\nCell c = r.createCell(i);\r\nc.setCellValue(i + 1);\r\nc.setCellStyle(cs);\r\n}\r\nwb.write(os);\r\nos.flush();\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.*;\r\n\r\npublic class SubsetFinder {\r\npublic static void main(String[] args) {\r\nMap<String, Set<Long>> myMap = new HashMap<>();\r\nmyMap.put(""a"", Set.of(1L, 2L, 3L));\r\nmyMap.put(""b"", Set.of(4L, 5L));\r\nmyMap.put(""c"", Set.of(1L));\r\nmyMap.put(""d"", Set.of(2L, 3L));\r\nmyMap.put(""e"", Set.of(5L));\r\nmyMap.put(""f"", Set.of(6L));\r\n\r\nList<List<String>> result = findSubsets(myMap);\r\nresult.forEach(pair -> System.out.println(pair));\r\n}\r\n\r\npublic static List<List<String>> findSubsets(Map<String, Set<Long>> myMap) {\r\nList<List<String>> overlappingKeys = new ArrayList<>();\r\nList<Map.Entry<String, Set<Long>>> entries = new ArrayList<>(myMap.entrySet());\r\n\r\nfor (int i = 0; i < entries.size(); i++) {\r\nfor (int j = i + 1; j < entries.size(); j++) {\r\nif (entries.get(i).getValue().containsAll(entries.get(j).getValue()) ||\r\nentries.get(j).getValue().containsAll(entries.get(i).getValue())) {\r\noverlappingKeys.add(List.of(entries.get(i).getKey(), entries.get(j).getKey()));\r\n}\r\n}\r\n}\r\nreturn overlappingKeys;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.ReactiveTransactionManager;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.transaction.reactive.TransactionalOperator;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Service\r\npublic class ChatService {\r\nprivate final ChatRepository chatRepository;\r\nprivate final TransactionalOperator transactionalOperator;\r\n\r\npublic ChatService(ChatRepository chatRepository, ReactiveTransactionManager transactionManager) {\r\nthis.chatRepository = chatRepository;\r\nthis.transactionalOperator = TransactionalOperator.create(transactionManager);\r\n}\r\n\r\npublic Mono<Chat> createChat(Chat chat) {\r\nreturn transactionalOperator.transactional(\r\nchatRepository.save(chat)\r\n.map(c -> {\r\nthrow new RuntimeException();\r\n})\r\n);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.*;\r\n\r\npublic class LimitedSumSubset {\r\npublic static List<Integer> findSubset(int[] nums, int target, int limit) {\r\nArrays.sort(nums);\r\nList<Integer> result = new ArrayList<>();\r\nif (backtrack(nums, target, limit, 0, result)) return result;\r\nreturn Collections.emptyList();\r\n}\r\n\r\nprivate static boolean backtrack(int[] nums, int target, int limit, int index, List<Integer> result) {\r\nif (result.size() == limit) return target == 0;\r\nfor (int i = index; i < nums.length; i++) {\r\nif (nums[i] > target) break;\r\nresult.add(nums[i]);\r\nif (backtrack(nums, target - nums[i], limit, i + 1, result)) return true;\r\nresult.remove(result.size() - 1);\r\n}\r\nreturn false;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[] nums = {2, 7, 11, 15};\r\nint target = 20, limit = 3;\r\nSystem.out.println(findSubset(nums, target, limit));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MetamaskSignatureVerifier {\r\npublic static boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\nString message = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\nbyte[] messageHash = org.web3j.crypto.Hash.sha3(message.getBytes(StandardCharsets.UTF_8));\r\nSign.SignatureData signatureData = extractSignature(signature);\r\nBigInteger recoveredKey = Sign.signedMessageToKey(messageHash, signatureData);\r\nString recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\nreturn recoveredAddress.equalsIgnoreCase(publicWalletId);\r\n}\r\n\r\nprivate static Sign.SignatureData extractSignature(String signature) {\r\nbyte[] sigBytes = Numeric.hexStringToByteArray(signature);\r\nbyte v = sigBytes[64];\r\nif (v < 27) v += 27;\r\nbyte[] r = new byte[32], s = new byte[32];\r\nSystem.arraycopy(sigBytes, 0, r, 0, 32);\r\nSystem.arraycopy(sigBytes, 32, s, 0, 32);\r\nreturn new Sign.SignatureData(v, r, s);\r\n}\r\n\r\npublic static void main(String[] args) {\r\nString publicWalletId = ""0xYourMetamaskAddress"";\r\nString nonce = ""randomNonceFromDB"";\r\nString signature = ""0xSignatureFromFrontend"";\r\nboolean isValid = verifySignature(publicWalletId, nonce, signature);\r\nSystem.out.println(""Signature valid: "" + isValid);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.List;\r\nimport java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic class AggregationExample {\r\npublic enum AggregationType {\r\nMIN(DoubleStream::min),\r\nMAX(DoubleStream::max),\r\nAVERAGE(DoubleStream::average);\r\n\r\nprivate final Function<DoubleStream, java.util.OptionalDouble> aggregator;\r\n\r\nAggregationType(Function<DoubleStream, java.util.OptionalDouble> aggregator) {\r\nthis.aggregator = aggregator;\r\n}\r\n\r\npublic double apply(DoubleStream stream) {\r\nreturn aggregator.apply(stream).orElse(-1);\r\n}\r\n}\r\n\r\nprivate List<Double> provides = List.of(10.5, 20.0, 30.8);\r\n\r\nprivate double someFunc(double value) {\r\nreturn value;\r\n}\r\n\r\npublic Float someFunction(AggregationType e) {\r\nreturn (float) e.apply(provides.stream().mapToDouble(this::someFunc));\r\n}\r\n\r\npublic static void main(String[] args) {\r\nAggregationExample example = new AggregationExample();\r\nSystem.out.println(""Min: "" + example.someFunction(AggregationType.MIN));\r\nSystem.out.println(""Max: "" + example.someFunction(AggregationType.MAX));\r\nSystem.out.println(""Average: "" + example.someFunction(AggregationType.AVERAGE));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public abstract class BasePayload {}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\nprivate int id;\r\nprivate String name;\r\n\r\npublic AddItemPayload(int id, String name) {\r\nthis.id = id;\r\nthis.name = name;\r\n}\r\n\r\npublic int getId() {\r\nreturn id;\r\n}\r\n\r\npublic String getName() {\r\nreturn name;\r\n}\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\nString command;\r\nT payload;\r\n\r\npublic BaseCommand(String command, T payload) {\r\nthis.command = command;\r\nthis.payload = payload;\r\n}\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\npublic AddItemCommand(AddItemPayload payload) {\r\nsuper(""AddItem"", payload);\r\n}\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\nabstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\nabstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n@Override\r\nprotected AddItemEventHandler getHandler() {\r\nreturn new AddItemEventHandler();\r\n}\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n@Override\r\npublic void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {}\r\n\r\n@Override\r\npublic void onCommit(String uuid, AddItemEvent event) {}\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\nabstract protected BaseEventHandler<? extends BaseEvent<C, P>, C, P> getHandler();\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.TreeMap;\r\n\r\npublic class CoreNonCoreModules {\r\npublic static void main(String[] args) {\r\nTreeMap<String, ClassLoader> moduleClassLoaders = new TreeMap<>();\r\nModuleFinder.ofSystem().findAll().forEach(moduleRef -> {\r\nString moduleName = moduleRef.descriptor().name();\r\ntry {\r\nmoduleClassLoaders.put(moduleName, Class.forName(moduleName + "".module-info"").getClassLoader());\r\n} catch (ClassNotFoundException e) {\r\nmoduleClassLoaders.put(moduleName, null);\r\n}\r\n});\r\n\r\nSystem.out.println(""Core Modules (Boot ClassLoader - null):"");\r\nmoduleClassLoaders.entrySet().stream()\r\n.filter(entry -> entry.getValue() == null)\r\n.forEach(entry -> System.out.println(entry.getKey()));\r\n\r\nSystem.out.println(""\nNon-Core Modules (PlatformClassLoader or Others):"");\r\nmoduleClassLoaders.entrySet().stream()\r\n.filter(entry -> entry.getValue() != null)\r\n.forEach(entry -> System.out.println(entry.getKey() + "" -> "" + entry.getValue()));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.time.format.TextStyle;\r\nimport java.time.temporal.ChronoField;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nLocale locale = new Locale(""es"", ""ES"");\r\nMap<String, String> monthAbbreviations = IntStream.rangeClosed(1, 12)\r\n.boxed()\r\n.collect(Collectors.toMap(\r\nmonth -> LocalDate.of(2000, month, 1).getMonth().getDisplayName(TextStyle.SHORT, locale).toUpperCase(),\r\nmonth -> String.format(""%02d"", month)\r\n));\r\n\r\nDateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n.parseCaseInsensitive()\r\n.parseDefaulting(ChronoField.DAY_OF_MONTH, 1)\r\n.appendPattern(""ddMMMyyyy"")\r\n.toFormatter(locale);\r\n\r\nString input = ""24ENE1982"";\r\nfor (Map.Entry<String, String> entry : monthAbbreviations.entrySet()) {\r\ninput = input.replace(entry.getKey(), entry.getValue());\r\n}\r\n\r\nLocalDate date = LocalDate.parse(input, DateTimeFormatter.ofPattern(""ddMMyyyy""));\r\nSystem.out.println(""Hello world! "" + date);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.Cursor;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\npublic static void main(String[] args) {\r\nlaunch(args);\r\n}\r\n\r\n@Override\r\npublic void start(Stage primaryStage) {\r\nTextArea numTextArea = new TextArea(""Try moving the mouse over me!"");\r\nnumTextArea.setCursor(Cursor.NONE);\r\n\r\nStackPane root = new StackPane(numTextArea);\r\nScene scene = new Scene(root, 300, 200);\r\n\r\nprimaryStage.setScene(scene);\r\nprimaryStage.setTitle(""Custom Cursor Example"");\r\nprimaryStage.show();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\npublic class ExcelFormulaAdjuster {\r\npublic static void main(String[] args) {\r\nString formula = ""IF(A2=A3,A4,A5)"";\r\nString originalAddress = ""A6"";\r\nString destinationAddress = ""C6"";\r\n\r\nString adjustedFormula = adjustFormula(formula, originalAddress, destinationAddress);\r\nSystem.out.println(""Adjusted Formula: "" + adjustedFormula);\r\n}\r\n\r\npublic static String adjustFormula(String formula, String originalAddress, String destinationAddress) {\r\ntry (Workbook wb = new XSSFWorkbook()) {\r\nSheet sheet = wb.createSheet();\r\nRow row = sheet.createRow(0);\r\nCell cell = row.createCell(0);\r\ncell.setCellFormula(formula);\r\n\r\nFormulaRenderingWorkbook workbookWrapper = (FormulaRenderingWorkbook) wb;\r\nPtg[] ptgs = FormulaParser.parse(formula, workbookWrapper, FormulaType.CELL, 0);\r\n\r\nfor (int i = 0; i < ptgs.length; i++) {\r\nif (ptgs[i] instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\norg.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) ptgs[i];\r\nString newRef = shiftCellReference(ref.toFormulaString(), originalAddress, destinationAddress);\r\nref.setReference(newRef);\r\n}\r\n}\r\n\r\nreturn FormulaRenderer.toFormulaString(workbookWrapper, ptgs);\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\nreturn null;\r\n}\r\n}\r\n\r\npublic static String shiftCellReference(String ref, String original, String destination) {\r\nCellReference originalRef = new CellReference(original);\r\nCellReference destRef = new CellReference(destination);\r\n\r\nint rowOffset = destRef.getRow() - originalRef.getRow();\r\nint colOffset = destRef.getCol() - originalRef.getCol();\r\n\r\nCellReference updatedRef = new CellReference(\r\nref.replaceAll(""\\$"", """"),\r\noriginalRef.getRow() + rowOffset,\r\noriginalRef.getCol() + colOffset,\r\nref.contains(""$""),\r\nfalse\r\n);\r\n\r\nreturn updatedRef.formatAsString();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFile {\r\npublic static void main(String[] args) {\r\nString filePath = ""test.txt"";\r\ntry (RandomAccessFile raf = new RandomAccessFile(filePath, ""rw"")) {\r\nraf.seek(0);\r\nraf.write(""hello"".getBytes());\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import static org.mockito.Mockito.*;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\n@SpringBootTest\r\npublic class DataSourceFailureSimulationTest {\r\n@Test\r\npublic void testSimulateDatabaseConnectionFailure() throws SQLException {\r\nDataSource realDataSource = mock(DataSource.class);\r\nConnection failingConnection = mock(Connection.class);\r\nwhen(realDataSource.getConnection()).thenThrow(new SQLException(""Simulated connection failure""));\r\ntry {\r\nrealDataSource.getConnection();\r\n} catch (SQLException e) {\r\nSystem.out.println(""Caught simulated failure: "" + e.getMessage());\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\npublic class PriceServiceTest {\r\n\r\n@Mock\r\nprivate PriceRepository priceRepository;\r\n\r\n@InjectMocks\r\nprivate PriceService priceService;\r\n\r\n@Test\r\npublic void testUpdatePrice() {\r\nUUID priceUuid = UUID.randomUUID();\r\nPrice existingPrice = new Price();\r\nexistingPrice.setUuid(priceUuid);\r\nexistingPrice.setPriceAmount(100.0);\r\n\r\nPriceRequest request = new PriceRequest();\r\nrequest.setPriceAmount(150.0);\r\n\r\nwhen(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\nwhen(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\nPriceDTO updatedPrice = priceService.update(priceUuid, request);\r\n\r\nassertEquals(150.0, updatedPrice.getPriceAmount());\r\nverify(priceRepository).saveAndFlush(existingPrice);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package taskbar_test;\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.CLSID;\r\nimport taskbar_test.gen.IID;\r\nimport taskbar_test.gen.ITaskbarList3;\r\nimport taskbar_test.gen.ITaskbarList3Vtbl;\r\nimport taskbar_test.gen.ShObjIdl_core_h;\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\npublic class FxWinTaskbar extends Application {\r\npublic static final String GUID_FORMAT=""{%s}"";\r\npublic static final String CLSID_CONST=""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\npublic static final String IID_ITASKBAR_LIST_3=""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n@Override\r\npublic void start(Stage stage)throws Exception{\r\nvar button=new javafx.scene.control.Button(""Click Me"");\r\nbutton.setOnAction(e->handleClick());\r\nvar root=new javafx.scene.layout.StackPane(button);\r\nvar scene=new javafx.scene.Scene(root,300,200);\r\nstage.setTitle(""JavaFX Stage with Button"");\r\nstage.setScene(scene);\r\nstage.show();\r\n}\r\nvoid handleClick(){\r\nlong rawHandle=Window.getWindows().getFirst().getRawHandle();\r\nExecutors.newSingleThreadExecutor().submit(()->{\r\ntry(var arena=Arena.ofConfined()){\r\nvar clsidString=arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST),StandardCharsets.UTF_16LE);\r\nvar iidITaskbarList3=arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3),StandardCharsets.UTF_16LE);\r\nvar clsid=CLSID.allocate(arena);\r\nvar iidTaskbarList3=IID.allocate(arena);\r\nvar taskbar3PtrToPtr=arena.allocate(ShObjIdl_core_h.C_POINTER);\r\nMemorySegment windowHandle=arena.allocate(ValueLayout.ADDRESS,rawHandle);\r\nint hr=ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL,ShObjIdl_core_h.COINIT_MULTITHREADED());\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CoInitialize failed: ""+hr);\r\nhr=ShObjIdl_core_h.CLSIDFromString(clsidString,clsid);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CLSIDFromString failed: ""+hr);\r\nhr=ShObjIdl_core_h.IIDFromString(iidITaskbarList3,iidTaskbarList3);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""IIDFromString failed: ""+hr);\r\nhr=ShObjIdl_core_h.CoCreateInstance(clsid,MemorySegment.NULL,ShObjIdl_core_h.CLSCTX_ALL(),iidTaskbarList3,taskbar3PtrToPtr);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""CoCreateInstance failed: ""+hr);\r\nvar taskbar3Ptr=taskbar3PtrToPtr.get(ValueLayout.ADDRESS,0);\r\nvar taskbarList3Instance=taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\nMemorySegment taskbarList3VtblPtr=ITaskbarList3.lpVtbl(taskbarList3Instance);\r\nMemorySegment taskbarList3Vtbl=taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\nhr=ITaskbarList3Vtbl.HrInit.invoke(taskbarList3Vtbl,taskbarList3Instance);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""HrInit failed: ""+hr);\r\nhr=ITaskbarList3Vtbl.SetProgressState.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,ShObjIdl_core_h.TBPF_NORMAL());\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""SetProgressState failed: ""+hr);\r\nfor(int i=0;i<=100;i+=20){\r\nSystem.out.println(""Progress: ""+i);\r\nhr=ITaskbarList3Vtbl.SetProgressValue.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,i,100);\r\nif(hr!=ShObjIdl_core_h.S_OK())throw new RuntimeException(""SetProgressValue failed: ""+hr);\r\nThread.sleep(500);\r\n}\r\nITaskbarList3Vtbl.SetProgressState.invoke(taskbarList3Vtbl,taskbarList3Instance,windowHandle,ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n}catch(Throwable ex){\r\nex.printStackTrace();\r\n}finally{\r\nShObjIdl_core_h.CoUninitialize();\r\n}});\r\n}\r\npublic static void main(String[] args){\r\nlaunch(args);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"package com.example.databasecopy;\r\nimport android.content.Context;\r\nimport android.content.res.AssetManager;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Objects;\r\npublic class FileCopyUtil {\r\npublic static void copyDatabase(Context context){\r\nif(Build.VERSION.SDK_INT>=Build.VERSION_CODES.Q){\r\ntry{\r\nAssetManager assetManager=Objects.requireNonNull(context).getAssets();\r\nFile databasesFolder=new File(context.getExternalFilesDir(null).getParent(),""com.mydb.orca/databases"");\r\nif(!databasesFolder.exists())databasesFolder.mkdirs();\r\nString[] files=assetManager.list(""database/test"");\r\nif(files!=null){\r\nfor(String filename:files){\r\nInputStream in=null;\r\nOutputStream out=null;\r\ntry{\r\nin=assetManager.open(""database/test/""+filename);\r\nFile outFile=new File(databasesFolder,filename);\r\nout=new FileOutputStream(outFile);\r\ncopyFile(in,out);\r\nLog.d(""FileCopy"",""Successfully copied: ""+filename);\r\n}catch(IOException e){\r\nLog.e(""FileCopyError"",""Failed to copy: ""+filename,e);\r\n}finally{\r\nif(in!=null)in.close();\r\nif(out!=null){\r\nout.flush();\r\nout.close();\r\n}\r\n}\r\n}\r\n}else{\r\nLog.e(""FileCopyError"",""No files found in assets/database/test"");\r\n}\r\n}catch(IOException e){\r\nLog.e(""FileCopyError"",""Error accessing asset files"",e);\r\n}\r\n}\r\n}\r\nprivate static void copyFile(InputStream in,OutputStream out)throws IOException{\r\nbyte[] buffer=new byte[1024];\r\nint read;\r\nwhile((read=in.read(buffer))!=-1){\r\nout.write(buffer,0,read);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.ArrayList;\r\npublic class Main {\r\npublic static void main(String[] args) {\r\nArrayList<String> collection=new ArrayList<>();\r\nwarmup();\r\nlong t1=System.nanoTime();\r\ncollection.add(""a"");\r\nlong t2=System.nanoTime();\r\ncollection.add(""b"");\r\nlong t3=System.nanoTime();\r\nSystem.out.println((t2-t1)+""\n""+(t3-t2));\r\n}\r\nprivate static void warmup() {\r\nArrayList<String> dummyList=new ArrayList<>();\r\nfor(int i=0;i<1000;i++)dummyList.add(""warmup"");\r\ndummyList.clear();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.*;\r\n\r\npublic class ScalablePanel extends JPanel {\r\nprivate BufferedImage backgroundImage;\r\n\r\npublic ScalablePanel(BufferedImage image) {\r\nthis.backgroundImage=image;\r\n}\r\n\r\n@Override\r\nprotected void paintComponent(Graphics g) {\r\nsuper.paintComponent(g);\r\nif(backgroundImage!=null) {\r\nGraphics2D g2d=(Graphics2D)g;\r\nRenderingHints hints=new RenderingHints(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\ng2d.setRenderingHints(hints);\r\ndouble scaleX=getWidth()/(double)backgroundImage.getWidth();\r\ndouble scaleY=getHeight()/(double)backgroundImage.getHeight();\r\ndouble scale=Math.max(scaleX,scaleY);\r\nint newWidth=(int)(backgroundImage.getWidth()*scale);\r\nint newHeight=(int)(backgroundImage.getHeight()*scale);\r\nint x=(getWidth()-newWidth)/2;\r\nint y=(getHeight()-newHeight)/2;\r\ng2d.drawImage(backgroundImage,x,y,newWidth,newHeight,this);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.sql.*;\r\nimport java.time.Duration;\r\nimport java.time.Instant;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\n\r\npublic class VirtualThreadDBTest {\r\npublic static void main(String[] args) {\r\nint numberOfTasks=10;\r\nList<Future<String>> futures;\r\nInstant start=Instant.now();\r\ntry(ExecutorService executorService=Executors.newVirtualThreadPerTaskExecutor()) {\r\nfutures=IntStream.rangeClosed(1,numberOfTasks)\r\n.mapToObj(i->executorService.submit(new Task(i)))\r\n.toList();\r\n}\r\nfutures.forEach(f->{\r\ntry {\r\nf.get();\r\n}catch(InterruptedException|ExecutionException e) {\r\ne.printStackTrace();\r\n}\r\n});\r\nInstant end=Instant.now();\r\nSystem.out.println(""Total execution time: ""+Duration.between(start,end).toMillis()+"" ms"");\r\n}\r\n\r\nstatic class Task implements Callable<String> {\r\nprivate final int taskId;\r\npublic Task(int taskId) {\r\nthis.taskId=taskId;\r\n}\r\n@Override\r\npublic String call() {\r\nSystem.out.println(""Task ""+taskId+"" started"");\r\nInstant start=Instant.now();\r\nString result=null;\r\ntry(Connection connection=DriverManager.getConnection(\r\n""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"");\r\nStatement statement=connection.createStatement();\r\nResultSet resultSet=statement.executeQuery(""SELECT hello_world() AS output"")) {\r\nSystem.out.println(""Task ""+taskId+"" executing SQL query"");\r\nif(resultSet.next()) {\r\nresult=resultSet.getString(""output"");\r\n}\r\n}catch(SQLException e) {\r\ne.printStackTrace();\r\n}\r\nInstant end=Instant.now();\r\nSystem.out.println(""Task ""+taskId+"" completed in ""+Duration.between(start,end).toMillis()+"" ms"");\r\nreturn result;\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T, R extends TaskResult<T>> {\r\nR make();\r\n}\r\n\r\nclass TaskResult<T> {\r\nT value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\nAlphaTaskResult(String value) {\r\nthis.value=value;\r\n}\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\nBetaTaskResult(Integer value) {\r\nthis.value=value;\r\n}\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\npublic AlphaTaskResult make() {\r\nreturn new AlphaTaskResult(""alphaTask"");\r\n}\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\npublic BetaTaskResult make() {\r\nreturn new BetaTaskResult(9001);\r\n}\r\n}\r\n\r\npublic class Main {\r\npublic static<T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\nreturn tasks.stream().map(ITask::make).collect(Collectors.toList());\r\n}\r\n\r\npublic static void main(String[] args) {\r\nList<AlphaTaskResult> alphaResults=run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\nList<BetaTaskResult> betaResults=run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WindowsCommandRunner {\r\npublic static List<String> runWindowsCommandAsRuntime(String command) {\r\nList<String> out=new ArrayList<>();\r\n\r\nString[] comm={\r\n""C:\\Windows\\System32\\cmd.exe"",\r\n""/S"",\r\n""/K"",\r\n""\""""+command+""\"""",\r\n""&"",\r\n""exit""\r\n};\r\n\r\nString dbg="""";\r\nfor(String s:comm)\r\ndbg+=s+"" "";\r\nSystem.out.println(""COMMAND: ""+dbg);\r\n\r\ntry {\r\nRuntime rt=Runtime.getRuntime();\r\nProcess p=rt.exec(comm);\r\n\r\nBufferedReader reader=new BufferedReader(new InputStreamReader(p.getInputStream()));\r\nout=reader.lines().collect(Collectors.toList());\r\n\r\nint exitVal=p.waitFor();\r\nSystem.out.println(""Exited with error code ""+exitVal);\r\n\r\np.destroy();\r\n} catch(Exception ex) {\r\nex.printStackTrace();\r\nreturn null;\r\n}\r\n\r\nreturn out;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nList<String> output=runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\nif(output!=null)\r\noutput.forEach(System.out::println);\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\npublic static void parseTsv(String filePath) throws Exception {\r\ntry (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\nObjects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n.withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n.build()) {\r\nString[] line;\r\nwhile ((line = reader.readNext()) != null) {\r\nSystem.out.println(line[0] + "" "" + line[1]);\r\n}\r\n}\r\n}\r\n\r\npublic static void main(String[] args) {\r\ntry {\r\nparseTsv(""path-to-tsv-file"");\r\n} catch (Exception e) {\r\nthrow new RuntimeException(e);\r\n}\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class CircularMatrixSearch {\r\npublic static boolean search(int[][] mat, int num) {\r\nint n = mat.length;\r\nint row = 0, col = n - 1;\r\n\r\nwhile (row < n && col >= 0) {\r\nif (mat[row][col] == num) {\r\nreturn true;\r\n} else if (mat[row][col] > num) {\r\ncol--;\r\n} else {\r\nrow++;\r\n}\r\n}\r\nreturn false;\r\n}\r\n\r\npublic static void main(String[] args) {\r\nint[][] mat = {\r\n{10, 12, 14, 16},\r\n{22, 24, 26, 28},\r\n{34, 36, 38, 40},\r\n{50, 52, 54, 56}\r\n};\r\n\r\nSystem.out.println(search(mat, 22)); // true\r\nSystem.out.println(search(mat, 23)); // false\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\n\r\npublic class WordMerge {\r\nprivate final OutputStream result;\r\nprivate final List<InputStream> inputs;\r\nprivate XWPFDocument first;\r\n\r\npublic WordMerge(OutputStream result) {\r\nthis.result = result;\r\ninputs = new ArrayList<>();\r\n}\r\n\r\npublic void add(InputStream stream) throws Exception {\r\ninputs.add(stream);\r\nOPCPackage srcPackage = OPCPackage.open(stream);\r\nXWPFDocument srcDoc = new XWPFDocument(srcPackage);\r\n\r\nif (inputs.size() == 1) {\r\nfirst = srcDoc;\r\n} else {\r\nXWPFParagraph pageBreak = first.createParagraph();\r\npageBreak.setPageBreak(true);\r\n\r\nfor (XWPFParagraph p : srcDoc.getParagraphs()) {\r\nXWPFParagraph newP = first.createParagraph();\r\nnewP.getCTP().set(p.getCTP().copy());\r\n}\r\n\r\nfor (XWPFTable table : srcDoc.getTables()) {\r\nXWPFTable newTable = first.createTable();\r\nnewTable.getCTTbl().set(table.getCTTbl().copy());\r\n}\r\n}\r\n}\r\n\r\npublic void doMerge() throws Exception {\r\nfirst.write(result);\r\n}\r\n\r\npublic void close() throws Exception {\r\nresult.flush();\r\nresult.close();\r\nfor (InputStream input : inputs) {\r\ninput.close();\r\n}\r\n}\r\n\r\npublic static void main(String[] args) throws Exception {\r\nFileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\nWordMerge wm = new WordMerge(faos);\r\n\r\nwm.add(new FileInputStream(""/home/victor/001.docx""));\r\nwm.add(new FileInputStream(""/home/victor/002.docx""));\r\n\r\nwm.doMerge();\r\nwm.close();\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"mvn spring-boot:run -Dspring-boot.run.jvmArguments=""-Xdebug"" \\r\n-Dspring-boot.run.profiles=dev \\r\n-Dspring-boot.run.arguments=""DB_NAME=employee_db DB_USERNAME=postgres DB_PASSWORD=******""\r\n\r\nxml\r\n\r\n    org.springframework.boot\r\n    spring-boot-maven-plugin\r\n    2.1.0.RELEASE\r\n    \r\n        \r\n            employee_db\r\n            postgres\r\n            ******\r\n        \r\n    \r\n\r\n\r\njava\r\nimport io.github.cdimascio.dotenv.Dotenv;\r\n\r\npublic class EnvExample {\r\npublic static void main(String[] args) {\r\nDotenv dotenv = Dotenv.configure().load();\r\nString dbName = dotenv.get(""DB_NAME"");\r\nString dbUsername = dotenv.get(""DB_USERNAME"");\r\nString dbPassword = dotenv.get(""DB_PASSWORD"");\r\n\r\nSystem.out.println(""Database Name: "" + dbName);\r\nSystem.out.println(""Database Username: "" + dbUsername);\r\nSystem.out.println(""Database Password: "" + dbPassword);\r\n}\r\n}\r\n"
0,1,misclassified_in_Test_4.csv.csv,"addProduct.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nToast.makeText(getActivity(), ""Add product button click"", Toast.LENGTH_SHORT).show();\r\nLinearLayout linearLayoutProduct = new LinearLayout(getActivity());\r\nlinearLayoutProduct.setOrientation(LinearLayout.HORIZONTAL);\r\nlinearLayoutProduct.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n\r\nAutoCompleteTextView tvProduct = new AutoCompleteTextView(getActivity());\r\ntvProduct.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\ntvProduct.setHint(""Enter Product"");\r\ntvProduct.setInputType(InputType.TYPE_CLASS_TEXT);\r\n\r\nEditText prodQty = new EditText(getActivity());\r\nprodQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodQty.setHint(""Enter Quantity"");\r\nprodQty.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\nEditText prodPrice = new EditText(getActivity());\r\nprodPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodPrice.setHint(""Prod Price"");\r\nprodPrice.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\nEditText prodSpecs = new EditText(getActivity());\r\nprodSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 0.5f));\r\nprodSpecs.setHint(""Prod Specs"");\r\nprodSpecs.setInputType(InputType.TYPE_CLASS_TEXT);\r\n\r\nButton removeBtn = new Button(getActivity());\r\nremoveBtn.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\nremoveBtn.setText(""Remove"");\r\nremoveBtn.setBackgroundColor(Color.RED);\r\nremoveBtn.setTextColor(Color.WHITE);\r\n\r\nremoveBtn.setOnClickListener(new View.OnClickListener() {\r\n@Override\r\npublic void onClick(View v) {\r\nlinearLayoutProduct.setVisibility(View.GONE);\r\n}\r\n});\r\n\r\nlinearLayoutProduct.addView(tvProduct);\r\nlinearLayoutProduct.addView(prodQty);\r\nlinearLayoutProduct.addView(prodPrice);\r\nlinearLayoutProduct.addView(prodSpecs);\r\nlinearLayoutProduct.addView(removeBtn);\r\n\r\nLinearLayout llOut = getActivity().findViewById(R.id.ll_out);\r\nllOut.addView(linearLayoutProduct);\r\n}\r\n});"
0,1,misclassified_in_Test_4.csv.csv,"import java.io.FileInputStream;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.KeyFactory;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.CipherInputStream;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport java.io.InputStreamReader;\r\nimport java.io.BufferedReader;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.bouncycastle.openssl.PEMParser;\r\n\r\npublic class RSAPrivateKeyDecrypt {\r\npublic static void main(String[] args) throws Exception {\r\nSecurity.addProvider(new BouncyCastleProvider());\r\nString keyFile = ""path/to/your/private-key.pem"";\r\nString passphrase = ""yourPassphrase"";\r\n\r\nPrivateKey privateKey = getDecryptedPrivateKey(keyFile, passphrase);\r\nSystem.out.println(""Private Key: "" + privateKey);\r\n}\r\n\r\npublic static PrivateKey getDecryptedPrivateKey(String keyFile, String passphrase) throws Exception {\r\nFileInputStream keyFileStream = new FileInputStream(keyFile);\r\nBufferedReader reader = new BufferedReader(new InputStreamReader(keyFileStream));\r\nString line;\r\nStringBuilder keyBuilder = new StringBuilder();\r\nwhile ((line = reader.readLine()) != null) {\r\nkeyBuilder.append(line).append(""\n"");\r\n}\r\nbyte[] encryptedKey = keyBuilder.toString().getBytes();\r\nbyte[] decryptedKey = decryptPrivateKey(encryptedKey, passphrase);\r\n\r\nPEMParser pemParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(decryptedKey)));\r\nObject parsedObject = pemParser.readObject();\r\npemParser.close();\r\nRSAPrivateKey rsaPrivateKey = (RSAPrivateKey) parsedObject;\r\nreturn rsaPrivateKey;\r\n}\r\n\r\npublic static byte[] decryptPrivateKey(byte[] encryptedKey, String passphrase) throws Exception {\r\nString algorithm = ""DES-EDE3-CBC"";\r\nString salt = ""E51B4CCF38530A32""; // Extracted from DEK-Info field\r\n\r\nSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");\r\nPBEKeySpec keySpec = new PBEKeySpec(passphrase.toCharArray());\r\nSecretKey secretKey = keyFactory.generateSecret(keySpec);\r\nCipher cipher = Cipher.getInstance(algorithm);\r\ncipher.init(Cipher.DECRYPT_MODE, secretKey, new javax.crypto.spec.IvParameterSpec(hexStringToByteArray(salt)));\r\nCipherInputStream cipherInputStream = new CipherInputStream(new ByteArrayInputStream(encryptedKey), cipher);\r\nByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\nint byteRead;\r\nwhile ((byteRead = cipherInputStream.read()) != -1) {\r\nbyteArrayOutputStream.write(byteRead);\r\n}\r\nbyte[] decryptedData = byteArrayOutputStream.toByteArray();\r\nreturn decryptedData;\r\n}\r\n\r\npublic static byte[] hexStringToByteArray(String s) {\r\nint len = s.length();\r\nbyte[] data = new byte[len / 2];\r\nfor (int i = 0; i < len; i += 2) {\r\ndata[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)\r\n+ Character.digit(s.charAt(i + 1), 16));\r\n}\r\nreturn data;\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.UnavailableException;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n    //constructor, variables etc.\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        //read configurations from web.xml\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            getServletContext().log(""Error connecting to Backend Server"", e);\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        // logic to connect to the backend server\r\n        // throw exception if connection fails\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            // Prevent further recursive calls\r\n            return; // Exit the method and stop recursion\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}
0,1,misclassified_in_Test_4.csv.csv,"import static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.BDDMockito.given;\r\nimport static org.mockito.Mockito.verify;\r\nimport static org.mockito.Mockito.when;\r\nimport java.math.BigDecimal;\r\nimport java.util.Optional;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.web.util.UriComponents;\r\nimport org.springframework.web.util.UriComponentsBuilder;\r\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\r\n@ExtendWith(MockitoExtension.class)\r\npublic class ItemServiceTest {\r\nMockItem input;\r\n@InjectMocks\r\nItemService itemService;\r\n@Mock\r\nItemRepository itemRepository;\r\n@Mock\r\nCategorieRepository categorieRepository;\r\n@Mock\r\nItemDTOMapper itemDTOMapper;\r\n@Mock\r\nImageService imageService;\r\n@Mock\r\nprivate UriComponentsBuilder uriBuilder;\r\n@Mock\r\nprivate UriComponents uriComponents;\r\n@Captor\r\nprivate ArgumentCaptor<Long> longCaptor;\r\n@Captor\r\nprivate ArgumentCaptor<String> stringCaptor;\r\n@BeforeEach\r\nvoid setUpMocks() {\r\ninput = new MockItem();\r\nMockitoAnnotations.openMocks(this);\r\n}\r\n@Test\r\nvoid testCase() throws ItemAlreadyCreatedException {\r\nItem item = input.mockEntity();\r\nCreateItemData data = input.mockDTO();\r\nwhen(itemRepository.findByItemNameIgnoreCase(any())).thenReturn(Optional.of(item));\r\ngiven(uriBuilder.path(stringCaptor.capture())).willReturn(uriBuilder);\r\ngiven(uriBuilder.buildAndExpand(longCaptor.capture())).willReturn(uriComponents);\r\nItemAlreadyCreatedException ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\nitemService.createItem(data, uriBuilder);\r\n});\r\nString expectedMessage = ""There is an item created with this name"";\r\nString actualMessage = ex.getMessage();\r\nassertEquals(expectedMessage, actualMessage);\r\nverify(itemRepository).findByItemNameIgnoreCase(any());\r\n}\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"int[] array = new int[10];\r\narray[0] = 6;\r\narray[1] = 2;\r\narray[2] = 8;\r\narray[3] = 1;\r\narray[4] = 3;\r\narray[5] = 0;\r\narray[6] = 9;\r\narray[7] = 7;\r\n\r\nSystem.out.print(""Search for? "");\r\nint searching = in.nextInt();\r\n\r\nboolean found = false;\r\nfor(int i = 0; i < array.length; i++) {\r\n    if(searching == array[i]) {\r\n        System.out.println(searching + "" is at index "" + i + ""."");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\nif(!found) {\r\n    System.out.println(searching + "" was not found."");\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\n\r\npublic class LineChartExample extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n        \r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.setName(""Series 1"");\r\n        series1.getData().add(new XYChart.Data<>(1, 3));\r\n        series1.getData().add(new XYChart.Data<>(2, 5));\r\n        series1.getData().add(new XYChart.Data<>(3, 2));\r\n        \r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.setName(""Series 2"");\r\n        series2.getData().add(new XYChart.Data<>(1, 4));\r\n        series2.getData().add(new XYChart.Data<>(2, 6));\r\n        series2.getData().add(new XYChart.Data<>(3, 7));\r\n        \r\n        // Set individual colors for each series\r\n        series1.getNode().setStyle(""-fx-stroke: red; -fx-stroke-width: 2;"");\r\n        series2.getNode().setStyle(""-fx-stroke: blue; -fx-stroke-width: 2;"");\r\n        \r\n        lineChart.getData().addAll(series1, series2);\r\n        \r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"public class Board {\r\n    public String inputTake() {\r\n        Scanner scan = new Scanner(System.in);\r\n        String guess;\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n        \r\n        // we gotta check whether the input's valid before we return it!\r\n        return checkInput(guess);\r\n    }\r\n\r\n    public String checkInput(String input) {\r\n        boolean isGood = true;\r\n        \r\n        // check if 5 letters\r\n        if(input.length() != 5)\r\n            isGood = false;\r\n        \r\n        // check if all are english\r\n        if(!input.matches(""[a-zA-Z]+"")) \r\n            isGood = false;\r\n        \r\n        if(isGood == false) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            return inputTake();  // return the result of the retry\r\n        }\r\n        \r\n        return input;  // return the valid input\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess is: "" + guess);\r\n    }\r\n}"
0,1,misclassified_in_Test_4.csv.csv,"from pydantic import BaseModel, Field\r\n\r\nclass User(BaseModel):\r\n    id: int\r\n    is_global: bool = Field(..., alias=""global"")\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\npython\r\nfrom sqlalchemy import Column, Integer, Boolean\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import validates\r\n\r\nBase = declarative_base()\r\n\r\nclass User(Base):\r\n    __tablename__ = 'users'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    _global = Column(""global"", Boolean)\r\n\r\n    @property\r\n    def global(self):\r\n        return self._global\r\n\r\n    @global.setter\r\n    def global(self, value):\r\n        self._global = value\r\n"
0,1,misclassified_in_Test_4.csv.csv,"def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n    self.model = model\r\n    self.discard_ratio = discard_ratio\r\n    for name, module in self.model.named_modules():\r\n        if attention_layer_name in name:\r\n            module.register_forward_hook(self.get_attention)\r\n            module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    self.attentions = []\r\n    self.attention_gradients = []\r\n\r\ndef get_attention(self, module, input, output):\r\n    self.attentions.append(output.cpu())\r\n\r\ndef get_attention_gradient(self, module, grad_input, grad_output):\r\n    self.attention_gradients.append(grad_input[0].cpu())\r\n\r\ndef __call__(self, input_tensor, category_index):\r\n    self.model.zero_grad()\r\n    output = self.model(input_tensor)\r\n    loss = ...\r\n    loss.backward()\r\n"
0,1,misclassified_in_Test_4.csv.csv,"from pydantic import BaseModel\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\nclass BaseModel(BaseModel):\r\n    __abstract__ = True\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }\r\n        alias_generator = camelize\r\n        allow_population_by_field_name = True"
0,1,misclassified_in_Test_4.csv.csv,"import numpy as np\r\nimport numba\r\n\r\nx_size=2000\r\ny_size=2500\r\nz_size=400\r\nrng=np.random.default_rng(123)\r\nz_coordinates=np.linspace(0,z_size,y_size)+rng.laplace(0,1,(x_size,y_size))\r\n\r\n@numba.njit(parallel=True)\r\ndef compute_y_coordinates(z_coordinates,x_size,y_size,z_size):\r\n    y_coordinates=np.empty((x_size,z_size),dtype=np.uint16)\r\n    for i in numba.prange(z_size):\r\n        for j in numba.prange(x_size):\r\n            y_coordinates[j,i]=np.argmin(np.abs(z_coordinates[j]-i))\r\n    return y_coordinates\r\n\r\ny_coordinates=compute_y_coordinates(z_coordinates,x_size,y_size,z_size)"
0,1,misclassified_in_Test_4.csv.csv,"from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\nimport torch\r\n\r\nclass LogitsPipeline(pipeline):\r\n    def _forward(self, model_inputs):\r\n        with torch.no_grad():\r\n            outputs = self.model(**model_inputs)\r\n        return outputs.logits\r\n\r\nselected_model=""distilbert-base-uncased-finetuned-sst-2-english""\r\ntokenizer=AutoTokenizer.from_pretrained(selected_model)\r\nmodel=AutoModelForSequenceClassification.from_pretrained(selected_model,num_labels=2)\r\n\r\nclassifier=LogitsPipeline(""sentiment-analysis"", model=model, tokenizer=tokenizer)\r\ntexts=[""this is the first sentence"",""of my data."",""In fact, thats not true,"",""but we are going to assume it"",""is""]\r\n\r\nlogits=classifier(texts)\r\nprint(logits)"
0,1,misclassified_in_Test_4.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n{""name"":list(""abcdef""),""age"":[21,31,32,53,45,26],""country"":list(""AABBBC"")}\r\n)\r\n\r\ndf.group_by(""country"").agg(\r\nsorted_names:=pl.col(""name"").sort_by(""age""),\r\nsorted_names.first().alias(""age_sort_1""),\r\nsorted_names.get(2).fill_null(None).alias(""age_sort_2""),\r\nsorted_names.last().alias(""age_sort_-1"")\r\n)"
0,1,misclassified_in_Test_4.csv.csv,"from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nfrom sklearn.linear_model import ElasticNet\r\nimport json\r\nfrom bson import ObjectId\r\n\r\napp=FastAPI()\r\nclient=pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb=client[""models""]\r\nmodel_collection=db[""example-model""]\r\n\r\nclass JSONEncoder(json.JSONEncoder):\r\n    def default(self,obj):\r\n        if isinstance(obj,ObjectId):\r\n            return str(obj)\r\n        return super().default(obj)\r\n\r\ndef response_to_mongo(r:dict):\r\n    model_collection.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features:List[float]):\r\n    prediction=model.predict(pd.DataFrame([features],columns=model.feature_names_in_))\r\n    response={""predictions"":prediction.tolist()}\r\n    response_to_mongo(json.loads(JSONEncoder().encode(response)))\r\n    return response"
0,1,misclassified_in_Test_4.csv.csv,"import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef process_array(arr:NDArray[np.float64])->NDArray[np.float64]:\r\n return arr*2\r\n\r\narr:np.ndarray[np.float64]=np.array([1.0,2.0,3.0],dtype=np.float64)\r\nresult=process_array(arr)\r\nprint(result) # [2. 4. 6.]\r\n\r\ndef process_typed_array(arr:np.ndarray[tuple[int,...],np.dtype[np.int32]])->np.ndarray[tuple[int,...],np.dtype[np.int32]]:\r\n return arr+10\r\n\r\narr_int:np.ndarray[tuple[int,...],np.dtype[np.int32]]=np.array([[1,2],[3,4]],dtype=np.int32)\r\nprint(process_typed_array(arr_int)) # [[11 12] [13 14]]\r\n"
0,1,misclassified_in_Test_4.csv.csv,"from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nF = TypeVar(""F"", bound=Callable[[int], int])\r\n\r\ndef remember(f: F) -> F:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory: Dict[int, int] = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\nprint(fib(100))"
0,1,misclassified_in_Test_4.csv.csv,"import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmodel=""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nembeddings=HuggingFaceEmbeddings(model_name=model)\r\n\r\ndef main():\r\ndocs=[\r\nDocument(page_content=""The sky is blue."",metadata={""document_id"":""10""}),\r\nDocument(page_content=""The forest is green"",metadata={""document_id"":""62""})\r\n]\r\n\r\nfor doc in docs:\r\ndoc.metadata[""summary""]=""hello""\r\n\r\npprint.pprint(docs)\r\n\r\nwith tqdm(total=len(docs),desc=""Processing Documents"") as pbar:\r\ndb=FAISS.from_documents(docs,embeddings,progress_bar=pbar.update)\r\n\r\ndb.save_local(""faiss_index"")\r\nnew_db=FAISS.load_local(""faiss_index"",embeddings)\r\n\r\nquery=""Which color is the sky?""\r\ndocs=new_db.similarity_search_with_score(query)\r\n\r\nprint(""Retrieved docs:"",docs)\r\nprint(""Metadata of the most relevant document:"",docs[0][0].metadata)\r\n\r\nif __name__==""__main__"":\r\nmain()"
0,1,misclassified_in_Test_4.csv.csv,"from pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import *\r\n\r\nspark = SparkSession.builder.appName(""SchemaAlignment"").getOrCreate()\r\n\r\ndf1_schema = StructType([\r\n StructField(""A"", DateType(), True),\r\n StructField(""B"", IntegerType(), True),\r\n StructField(""C"", StringType(), True)\r\n])\r\n\r\ndf2 = spark.createDataFrame([\r\n (""2024-03-18"", ""123"", ""hello""),\r\n (""2025-06-22"", ""456"", ""world"")\r\n], StructType([\r\n StructField(""A"", StringType(), True),\r\n StructField(""B"", StringType(), True),\r\n StructField(""C"", StringType(), True)\r\n]))\r\n\r\nfor field in df1_schema.fields:\r\n df2 = df2.withColumn(field.name, df2[field.name].cast(field.dataType))\r\n\r\ndf2.printSchema()\r\ndf2.show()"
0,1,misclassified_in_Test_4.csv.csv,"import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n global greeting\r\n greeting = ""Hello""\r\n yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n global greeting\r\n greeting = ""Hi""\r\n yield\r\n\r\ndef create_app(lifespan):\r\n app = FastAPI(title=""Test"", lifespan=lifespan)\r\n @app.get(""/"")\r\n async def root():\r\n  return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n app = create_app(_lifespan_override)\r\n with TestClient(app) as client:\r\n  yield client\r\n\r\ndef test_override(fake_client):\r\n response = fake_client.get(""/"")\r\n assert response.text == ""Hi"
0,1,misclassified_in_Test_4.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 3\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores, prefer=""processes"")(\r\n        delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks)\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()"
0,1,misclassified_in_Test_4.csv.csv,"import numpy as np\r\nimport cv2\r\nfrom PIL import Image\r\nimport random\r\n\r\n# ############\r\n#  INPUTS  #\r\n# ############\r\ndpi = 1000  # dots per inch\r\ndpmm = 0.03937 * dpi  # dots per mm\r\nwidthOfSampleMM = 50  # mm\r\nheightOfSampleMM = 50  # mm\r\npatternSizeMM = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nvariation = 0.75  # 1 is very bad, 0 is very good\r\n############\r\n\r\n# conversions to pixels\r\nwidthOfSamplesPX = int(np.ceil(widthOfSampleMM * dpmm))  # get the width\r\nwidthOfSamplesPX = widthOfSamplesPX + 10 - widthOfSamplesPX % 10  # round up the width to nearest 10\r\nheightOfSamplePX = int(np.ceil(heightOfSampleMM * dpmm))  # get the height\r\nheightOfSamplePX = heightOfSamplePX + 10 - heightOfSamplePX % 10  # round up the height to nearest 10\r\npatternSizePX = patternSizeMM * dpmm  # this is the size of the pattern, so far I am going with circles\r\n\r\n# init an empty image (white background)\r\nim = 255 * np.ones((heightOfSamplePX, widthOfSamplesPX), dtype=np.uint8)\r\n\r\n# horizontal circle centres\r\nnumPoints = int(density * heightOfSamplePX / patternSizePX)  # get number of patterns possible\r\nif numPoints == 1:\r\n    horizontal = [heightOfSamplePX // 2]\r\nelse:\r\n    horizontal = [int(i * heightOfSamplePX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# vertical circle centres\r\nnumPoints = int(density * widthOfSamplesPX / patternSizePX)\r\nif numPoints == 1:\r\n    vertical = [widthOfSamplesPX // 2]\r\nelse:\r\n    vertical = [int(i * widthOfSamplesPX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# generate circles with noise in them\r\nfor i in vertical:\r\n    for j in horizontal:\r\n        # generate the noisy information\r\n        iWithNoise = i + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        jWithNoise = j + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        patternSizePXWithNoise = patternSizePX + patternSizePX * variation * (np.random.rand() - 0.5) / 2\r\n        cv2.circle(im, (int(iWithNoise), int(jWithNoise)), int(patternSizePXWithNoise // 2), 0, -1)  # add circle\r\n\r\n# Now save the image using PIL for efficient handling of large images\r\ndef save_image(image, filename, dpi=1000):\r\n    # Convert the numpy array to a PIL image\r\n    pil_image = Image.fromarray(image)\r\n\r\n    # Save the image as PNG or TIFF (lossless compression)\r\n    pil_image.save(filename, dpi=(dpi, dpi), compression_level=9)  # You can use compression_level for TIFFs\r\n\r\n# Save the image at high resolution\r\nsave_image(im, ""speckle_pattern_high_res.png"", dpi=5280)  # Adjust dpi as needed"
0,1,misclassified_in_Test_4.csv.csv,"from pydantic import BaseModel, ValidationError, root_validator\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\n    @root_validator(pre=True)\r\n    def validate_all(cls, values):\r\n        errors = []\r\n        try:\r\n            Salary(**values['salary'])\r\n        except ValidationError as e:\r\n            errors.append(str(e))\r\n        try:\r\n            Employee(**values)\r\n        except ValidationError as e:\r\n            errors.append(str(e))\r\n        \r\n        if errors:\r\n            raise ValidationError(errors)\r\n        return values\r\n\r\ntry:\r\n    salary = Salary(gross=""hello"", net=1000, tax=10)\r\n    employee = Employee(name=""Mattia"", age=""hello"", salary=salary)\r\nexcept ValidationError as e:\r\n    print(e)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .cors(withDefaults())\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/calciatore/list\"").permitAll()\r\n                .anyRequest().authenticated()\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowedOriginPatterns(List.of(\""http://localhost:3000\""));\r\n        config.setAllowedMethods(List.of(\""GET\"", \""POST\"", \""PUT\"", \""DELETE\"", \""OPTIONS\""));\r\n        config.setAllowedHeaders(List.of(\""*\""));\r\n        config.setAllowCredentials(true); // only if you're using cookies/auth\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n        return source;\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.api.trace.Tracer;\r\n\r\npublic Span startSpanFromTraceId(Tracer tracer, String traceId, String spanId) {\r\n    SpanContext remoteSpanContext = SpanContext.createFromRemoteParent(\r\n        traceId,\r\n        spanId,\r\n        TraceFlags.getSampled(),\r\n        TraceState.getDefault()\r\n    );\r\n\r\n    Context remoteContext = Context.root().with(Span.wrap(remoteSpanContext));\r\n\r\n    return tracer.spanBuilder(\""consumeMessage\"")\r\n        .setParent(remoteContext)\r\n        .startSpan();\r\n}\r\n\r\nString traceId = sqsMessage.attributes().get(\""traceId\"");\r\nString spanId = generateValidSpanId(); // 16-char hex string\r\nSpan span = startSpanFromTraceId(tracer, traceId, spanId);\r\ntry (Scope scope = span.makeCurrent()) {\r\n    // do your work here\r\n    span.addEvent(\""Processing message...\"");\r\n} finally {\r\n    span.end();\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class Solution {\r\n\r\n    public static int solve(List<Integer> nums) {\r\n        int n = nums.size();\r\n        int[] arr = nums.stream().mapToInt(i -> i).toArray();\r\n\r\n        int[] leftInc = new int[n];\r\n        int[] rightInc = new int[n];\r\n        int[] midDec = new int[n];\r\n\r\n        Arrays.fill(leftInc, 1);\r\n        Arrays.fill(rightInc, 1);\r\n        Arrays.fill(midDec, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (arr[j] < arr[i]) {\r\n                    leftInc[i] = Math.max(leftInc[i], leftInc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (arr[j] > arr[i]) {\r\n                    rightInc[i] = Math.max(rightInc[i], rightInc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (arr[j] > arr[i]) {\r\n                    midDec[i] = Math.max(midDec[i], midDec[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLen = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                if (midDec[j] == 1) continue; // no real decreasing sequence\r\n                for (int k = j; k < n; k++) {\r\n                    int total = leftInc[i] + (midDec[j] - 1) + rightInc[k];\r\n                    maxLen = Math.max(maxLen, total);\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // 6\r\n        System.out.println(solve(List.of(1, 100))); // 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // 7\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"List<?> results = executor.submit(\r\n    () -> IntStream.rangeClosed(from, to)\r\n        .mapToObj(i -> ...)\r\n        .parallel()\r\n        .map(... -> {\r\n            try {\r\n                MDC.put(...);\r\n                return service.call(...);\r\n            } finally {\r\n                MDC.clear();\r\n            }\r\n        })\r\n        .toList()\r\n).get();\r\n\r\nList<Future<?>> futures = IntStream.rangeClosed(from, to)\r\n    .mapToObj(i -> executor.submit(() -> {\r\n        try {\r\n            MDC.put(...);\r\n            return service.call(...);\r\n        } finally {\r\n            MDC.clear();\r\n        }\r\n    }))\r\n    .toList();\r\n\r\nList<?> results = futures.stream()\r\n    .map(future -> {\r\n        try {\r\n            return future.get();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    })\r\n    .toList();\r\n\r\n"
0,1,misclassified_in_Test_7.csv.csv,var innerChild = new Child.InnerChild().self();\r\n\r\nParent.InnerParent inner = new Child.InnerChild().self(); // boom: access error\r\n\r\nSystem.out.println(innerChild.getClass().getName()); // doesnât compile\r\n\r\nSystem.out.println(((Object) innerChild).getClass().getName());\r\n\r\n
0,1,misclassified_in_Test_7.csv.csv,"XChangeProperty(..., \r\n    window, \r\n    property, \r\n    6,  // ? This is wrong. This is the \""type\"" argument.\r\n\r\nMemorySegment XA_CARDINAL = Xlib_h.XInternAtom(display, arena.allocateFrom(\""CARDINAL\""), false);\r\nMemorySegment NET_WM_XAPP_PROGRESS = Xlib_h.XInternAtom(display, arena.allocateFrom(\""_NET_WM_XAPP_PROGRESS\""), false);\r\n\r\nXChangeProperty(\r\n    display,\r\n    window,\r\n    NET_WM_XAPP_PROGRESS.address(),\r\n    XA_CARDINAL.address(),\r\n    32,\r\n    PropModeReplace,\r\n    data,\r\n    1\r\n);\r\n\r\nMemorySegment.ofAddress(rawHandle).address()"
0,1,misclassified_in_Test_7.csv.csv,"import java.util.Set;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public static Set<Integer> dividends = new ConcurrentSkipListSet<>();\r\n\r\n    public static class DivisorTask implements Runnable {\r\n        private final int n;\r\n        private final int divisor;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            for (int i = divisor; i <= n; i += divisor) {\r\n                dividends.add(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        executor.execute(new DivisorTask(n, 3));\r\n        executor.execute(new DivisorTask(n, 5));\r\n        executor.execute(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(1, TimeUnit.MINUTES);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n\r\n        int sum = 0;\r\n        for (int i : dividends) {\r\n            sum += i;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        System.out.println(\""Sum = \"" + finder.getSum(1000));  // should be 272066\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public record AggregateId(@JsonValue UUID id) {\r\n    @JsonCreator\r\n    public static AggregateId from(UUID id) {\r\n        return new AggregateId(id);\r\n    }\r\n}\r\n\r\npublic class Aggregate {\r\n\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(\""aggregateId\"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n{\r\n  \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\""\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class Week implements Comparable<Week> {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    public Week(String isoWeek) {\r\n        String[] parts = isoWeek.split(\""-W\"");\r\n        this.year = Integer.parseInt(parts[0]);\r\n        this.week = Integer.parseInt(parts[1]);\r\n    }\r\n\r\n    public LocalDate toLocalDate() {\r\n        return LocalDate\r\n                .of(year, 1, 4)\r\n                .with(WeekFields.ISO.weekOfWeekBasedYear(), week)\r\n                .with(WeekFields.ISO.dayOfWeek(), 1);\r\n    }\r\n\r\n    public long weeksUntil(Week other) {\r\n        return java.time.temporal.ChronoUnit.WEEKS.between(this.toLocalDate(), other.toLocalDate());\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Week other) {\r\n        return this.toLocalDate().compareTo(other.toLocalDate());\r\n    }\r\n\r\n    public boolean isBefore(Week other) {\r\n        return this.compareTo(other) < 0;\r\n    }\r\n\r\n    public boolean isAfter(Week other) {\r\n        return this.compareTo(other) > 0;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(\""%04d-W%02d\"", year, week);\r\n    }\r\n}\r\n\r\nWeek weekA = new Week(\""2012-W48\"");\r\nWeek weekB = new Week(\""2013-W03\"");\r\n\r\nSystem.out.println(weekA.isBefore(weekB)); // true\r\nSystem.out.println(weekA.weeksUntil(weekB)); // 7"
0,1,misclassified_in_Test_7.csv.csv,"public class DemoSecurityProblem {\r\n    public DemoSecurityProblem() {\r\n        if (true) throw new RuntimeException(\""Constructor failed!\"");\r\n    }\r\n\r\n    public void sensitiveOperation() {\r\n        System.out.println(\""Performing sensitive operation!\"");\r\n    }\r\n}\r\n\r\npublic class MaliciousSubClass extends DemoSecurityProblem {\r\n\r\n    public static DemoSecurityProblem resurrected;\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        resurrected = this;\r\n        System.out.println(\""Finalizer hijacked!\"");\r\n    }\r\n}\r\n\r\npublic class FinalizerAttackDemo {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        try {\r\n            new MaliciousSubClass(); // throws in super(), doesn't fully construct\r\n        } catch (Exception ignored) {\r\n        }\r\n\r\n        System.gc();\r\n        Thread.sleep(1000); // wait for finalizer thread\r\n\r\n        if (MaliciousSubClass.resurrected != null) {\r\n            System.out.println(\""Resurrected object: \"" + MaliciousSubClass.resurrected);\r\n            MaliciousSubClass.resurrected.sensitiveOperation();\r\n        } else {\r\n            System.out.println(\""No resurrection occurred\"");\r\n        }\r\n    }\r\n}\r\n\r\nFinalizer hijacked!\r\nResurrected object: MaliciousSubClass@1b6d3586\r\nPerforming sensitive operation!"
0,1,misclassified_in_Test_7.csv.csv,"public static boolean equalSplit(int[] arr) {\r\n    if (arr.length % 2 != 0) return false;\r\n    return equalSplit(arr, 0, 0, 0, 0, 0);\r\n}\r\n\r\nprivate static boolean equalSplit(int[] arr, int i, int sum1, int count1, int sum2, int count2) {\r\n    if (i == arr.length) {\r\n        return count1 == count2 && sum1 == sum2;\r\n    }\r\n\r\n    if (count1 < arr.length / 2) {\r\n        if (equalSplit(arr, i + 1, sum1 + arr[i], count1 + 1, sum2, count2)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (count2 < arr.length / 2) {\r\n        if (equalSplit(arr, i + 1, sum1, count1, sum2 + arr[i], count2 + 1)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(\""TEST\\nTEST\\nTEST\"");\r\n        label.setStyle(\""-fx-background-color: green; -fx-padding: 20px;\"");\r\n\r\n        Tooltip tooltip = new Tooltip(\""TOOLTIP\"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        tooltip.setAutoHide(true);\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_EXITED, e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@ParameterizedTest\r\n@MethodSource(\""hashMapProvider\"")\r\nvoid testMyMapObj(Map<String, Object> argument) {\r\n    assertNotNull(argument);\r\n    Object obj1 = argument.get(\""1\"");\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\n    Map<String, Object> map = new HashMap<>();\r\n    map.put(\""1\"", \""Obj1\"");\r\n    map.put(\""2\"", \""Obj2\"");\r\n    return Stream.of(map);\r\n}\r\n\r\nstatic Stream<Map<String, Object>> hashMapProvider() {\r\n    Map<String, Object> map1 = Map.of(\""1\"", \""Obj1\"", \""2\"", \""Obj2\"");\r\n    Map<String, Object> map2 = Map.of(\""3\"", \""Obj3\"", \""4\"", \""Obj4\"");\r\n    return Stream.of(map1, map2);\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = \""Great\"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n\r\n        char[] string = string1.toCharArray();  \r\n        System.out.println(\""Duplicate characters in a given string:\"");  \r\n\r\n        for (int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for (int j = i + 1; j < string.length; j++) {  \r\n                if (string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if (count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n\r\n        if (!hasDuplicates) {\r\n            System.out.println(\""no duplicates\"");\r\n        }\r\n    }  \r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private double rotation = 0;\r\n\r\n    public void start(Stage primaryStage) {\r\n        Arc blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        Arc greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        Arc yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        Arc redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(\""Rotate Right\"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(\""-fx-background-color: GRAY\"");\r\n\r\n        Scene scene = new Scene(pane, 500, 400);\r\n        primaryStage.setTitle(\""Four-Color Wheel\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotation += 90;\r\n        circle.setRotate(rotation);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DrawModeSwitcher extends Application {\r\n\r\n    private DrawMode[] modes = {DrawMode.FILL, DrawMode.LINE};\r\n    private int modeIndex = 0;\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Sphere sphere = new Sphere(100);\r\n        sphere.setMaterial(new PhongMaterial(Color.CORNFLOWERBLUE));\r\n        sphere.setCullFace(CullFace.NONE);\r\n        sphere.setDrawMode(modes[modeIndex]);\r\n\r\n        Group group = new Group(sphere);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-500);\r\n\r\n        Scene scene = new Scene(group, 800, 600, true);\r\n        scene.setCamera(camera);\r\n        scene.setFill(Color.GRAY);\r\n\r\n        scene.setOnKeyPressed(e -> {\r\n            modeIndex = (modeIndex + 1) % modes.length;\r\n            sphere.setDrawMode(modes[modeIndex]);\r\n        });\r\n\r\n        stage.setScene(scene);\r\n        stage.setTitle(\""Draw Mode Switcher (Press any key)\"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        ScopedValue.runWhere(NAME, \""haha\"", () -> {\r\n            try (var scope = new StructuredTaskScope<Void>()) {\r\n                scope.fork(() -> {\r\n                    System.out.println(\""Scoped value: \"" + NAME.get());\r\n                    return null;\r\n                });\r\n                scope.join();\r\n                scope.throwIfFailed();\r\n            }\r\n        });\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public Label createTestLabel() {\r\n    Label testLabel = new Label(\""Placeholder\\nText\"");\r\n    testLabel.getStyleClass().add(\""test-label\"");\r\n    testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n    testLabel.setOnMouseEntered(e -> doSomething());\r\n    testLabel.setOnMouseExited(e -> doSomethingElse());\r\n\r\n    // Force preferred size calculation\r\n    testLabel.applyCss();\r\n    testLabel.layout();\r\n\r\n    Bounds visualBounds = testLabel.getLayoutBounds();\r\n\r\n    Rectangle clip = new Rectangle(visualBounds.getWidth(), visualBounds.getHeight());\r\n    testLabel.setClip(clip);\r\n\r\n    Group wrapper = new Group(testLabel);\r\n    wrapper.setManaged(false);\r\n    wrapper.setLayoutX(100); // adjust as needed\r\n    wrapper.setLayoutY(100);\r\n\r\n    root.getChildren().add(wrapper);\r\n    return testLabel;\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        ColumnConstraints sharedLabelColumn = new ColumnConstraints();\r\n        sharedLabelColumn.setHgrow(Priority.NEVER);\r\n\r\n        ColumnConstraints controlColumn = new ColumnConstraints();\r\n        controlColumn.setHgrow(Priority.ALWAYS);\r\n\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.getColumnConstraints().addAll(sharedLabelColumn, controlColumn);\r\n        gridPane1.setHgap(20);\r\n        gridPane1.add(new Label(\""One two three\""), 0, 0);\r\n        gridPane1.add(new TextField(), 1, 0);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.getColumnConstraints().addAll(sharedLabelColumn, new ColumnConstraints());\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(new Label(\""Four five six seven\""), 0, 0);\r\n        gridPane2.add(new TextField(), 1, 0);\r\n\r\n        TitledPane titledPane1 = new TitledPane(\""Top\"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        TitledPane titledPane2 = new TitledPane(\""Bottom\"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        VBox root = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class UpwardMenuDemo extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Button menuButton = new Button(\""Menu\"");\r\n        ContextMenu menu = new ContextMenu();\r\n        menu.getItems().addAll(\r\n            new MenuItem(\""Option 1\""),\r\n            new MenuItem(\""Option 2\""),\r\n            new MenuItem(\""Option 3\"")\r\n        );\r\n\r\n        menuButton.setOnAction(e -> {\r\n            Bounds bounds = menuButton.localToScreen(menuButton.getBoundsInLocal());\r\n            double x = bounds.getMinX();\r\n            double y = bounds.getMinY() - menu.getHeight(); // shift upward\r\n            menu.show(menuButton, x, y);\r\n        });\r\n\r\n        VBox root = new VBox();\r\n        Region spacer = new Region();\r\n        VBox.setVgrow(spacer, Priority.ALWAYS);\r\n        root.getChildren().addAll(spacer, menuButton);\r\n\r\n        Scene scene = new Scene(root, 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"for (int i = 1; i <= numberOfPages; i++) {\r\n    Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n    PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n    PdfGState state = new PdfGState();\r\n    state.setFillOpacity(0.3f);\r\n    overContent.saveState();\r\n    overContent.setGState(state);\r\n    overContent.beginText();\r\n    overContent.setFontAndSize(baseFont, 13);\r\n\r\n    for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n        for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n            String reversed = new StringBuilder(watermarkText).reverse().toString();\r\n            overContent.showTextAlignedKerned(Element.ALIGN_CENTER, reversed, x, y, 45f);\r\n        }\r\n    }\r\n\r\n    overContent.endText();\r\n    overContent.restoreState();\r\n}"
0,1,misclassified_in_Test_7.csv.csv," @RestController\r\npublic class SecureController {\r\n\r\n  @GetMapping(\""/secure\"")\r\n  public String secured() {\r\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n    return \""Hello, \"" + auth.getName();\r\n  }\r\n}\r\n\r\npublic String doAsync() {\r\n  CompletableFuture.runAsync(() -> {\r\n    var auth = SecurityContextHolder.getContext().getAuthentication(); // nope, not safe\r\n  });\r\n  return \""fired\"";\r\n}\r\n\r\nvar context = SecurityContextHolder.getContext();\r\nCompletableFuture.runAsync(() -> {\r\n  SecurityContextHolder.setContext(context);\r\n  try {\r\n    // your logic\r\n  } finally {\r\n    SecurityContextHolder.clearContext();\r\n  }\r\n});"
0,1,misclassified_in_Test_7.csv.csv,"public class Grid extends GridPane {\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        setHgap(horizontalGap);\r\n        setVgap(verticalGap);\r\n        setAlignment(Pos.CENTER);\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                TextField tf = new TextField();\r\n                tf.setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                tf.setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                add(tf, col, row);\r\n            }\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv, @Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n        configurer\r\n            .favorPathExtension(false)\r\n            .favorParameter(false)\r\n            .ignoreAcceptHeader(false)\r\n            .defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}
0,1,misclassified_in_Test_7.csv.csv,"@Bean\r\npublic JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n    JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n    grantedAuthoritiesConverter.setAuthorityPrefix(\""ROLE_\""); // optional, defaults to SCOPE_\r\n    grantedAuthoritiesConverter.setAuthoritiesClaimName(\""scope\""); // this must match your token\r\n\r\n    JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\r\n    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\r\n    return jwtAuthenticationConverter;\r\n}\r\n\r\n.oauth2ResourceServer(oauth2 -> oauth2\r\n    .jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter()))\r\n)\r\n\r\n@PreAuthorize(\""hasRole('USER')\"")"
0,1,misclassified_in_Test_7.csv.csv,"PDFDocument doc = new PDFDocument();\r\nPSConverter converter = new PSConverter();\r\n\r\npublic class YourService {\r\n    private final Supplier<PDFDocument> pdfDocumentSupplier;\r\n    private final Supplier<PSConverter> psConverterSupplier;\r\n\r\n    public YourService(Supplier<PDFDocument> pdfDocumentSupplier, Supplier<PSConverter> psConverterSupplier) {\r\n        this.pdfDocumentSupplier = pdfDocumentSupplier;\r\n        this.psConverterSupplier = psConverterSupplier;\r\n    }\r\n\r\n    public void doStuff(InputStream input, OutputStream output) {\r\n        PDFDocument pdfDocument = pdfDocumentSupplier.get();\r\n        PSConverter converter = psConverterSupplier.get();\r\n        // ... rest of your logic\r\n    }\r\n}\r\n\r\nPDFDocument mockPdf = mock(PDFDocument.class);\r\nPSConverter mockConverter = mock(PSConverter.class);\r\n\r\nYourService service = new YourService(() -> mockPdf, () -> mockConverter);\r\n\r\ndoNothing().when(mockPdf).load(any(ByteArrayInputStream.class));\r\n\r\ndoAnswer(invocation -> {\r\n    ByteArrayOutputStream out = invocation.getArgument(1);\r\n    out.write(content);\r\n    return null;\r\n}).when(mockConverter).convert(any(), any(ByteArrayOutputStream.class));"
0,1,misclassified_in_Test_7.csv.csv,"@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(auth -> auth\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .authenticationEntryPoint(new CustomAuthEntryPoint())\r\n                .authenticationManagerResolver(customManagerResolver())\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    private AuthenticationManagerResolver<HttpServletRequest> customManagerResolver() {\r\n        return request -> {\r\n            JwtDecoder jwtDecoder = JwtDecoders.fromIssuerLocation(\""https://your-issuer.com\"");\r\n\r\n            JwtAuthenticationProvider provider = new JwtAuthenticationProvider(jwtDecoder);\r\n            provider.setJwtAuthenticationConverter(new CustomJwtConverter());\r\n\r\n            ProviderManager manager = new ProviderManager(provider);\r\n            manager.setAuthenticationFailureHandler(new JwtAuthFailureHandler());\r\n\r\n            return manager;\r\n        };\r\n    }\r\n}\r\n\r\npublic class JwtAuthFailureHandler implements AuthenticationFailureHandler {\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request,\r\n                                        HttpServletResponse response,\r\n                                        AuthenticationException exception) throws IOException {\r\n        // custom logging goes here\r\n        System.out.println(\""JWT Auth failed: \"" + exception.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \""Unauthorized\"");\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public Page<Product> searchProducts(String searchTerm, int page, int size) {\r\n    Pageable pageable = PageRequest.of(page, size);\r\n\r\n    Criteria baseCriteria = Criteria.where(\""companyNo\"").in(List.of(10000009))\r\n        .and(\""status\"").in(List.of(\""ACTIVE\"", \""IN_ACTIVE\"", \""OUT_OF_STOCK\""));\r\n\r\n    String regex = \"".*\"" + Pattern.quote(searchTerm) + \"".*\"";\r\n\r\n    List<Criteria> searchCriteria = List.of(\r\n        Criteria.where(\""productName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""subCategoryName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""categoryName\"").regex(regex, \""i\""),\r\n        Criteria.where(\""brandName\"").regex(regex, \""i\"")\r\n    );\r\n\r\n    Criteria finalCriteria = new Criteria().andOperator(\r\n        baseCriteria,\r\n        new Criteria().orOperator(searchCriteria.toArray(new Criteria[0]))\r\n    );\r\n\r\n    Query query = new Query(finalCriteria).with(pageable);\r\n    List<Product> products = mongoTemplate.find(query, Product.class);\r\n    long total = mongoTemplate.count(Query.of(query).limit(-1).skip(-1), Product.class);\r\n\r\n    return new PageImpl<>(products, pageable, total);\r\n}\r\n\r\nString[] words = searchTerm.split(\""\\\\s+\"");\r\nList<Criteria> wordCriteria = Arrays.stream(words)\r\n    .map(word -> new Criteria().orOperator(\r\n        Criteria.where(\""productName\"").regex(word, \""i\""),\r\n        Criteria.where(\""subCategoryName\"").regex(word, \""i\""),\r\n        Criteria.where(\""categoryName\"").regex(word, \""i\""),\r\n        Criteria.where(\""brandName\"").regex(word, \""i\"")\r\n    ))\r\n    .toList();\r\nCriteria finalCriteria = new Criteria().andOperator(baseCriteria, new Criteria().andOperator(wordCriteria));"
0,1,misclassified_in_Test_7.csv.csv,"@Benchmark\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(NANOSECONDS)\r\npublic void indexed(Blackhole blackhole, TestState testState) {\r\n    int[] vals = testState.values;\r\n    int len = vals.length;\r\n    for (int i = 0; i < len; i++) {\r\n        blackhole.consume(vals[i]);\r\n    }\r\n}\r\n\r\n@Benchmark\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(NANOSECONDS)\r\npublic void enhanced(Blackhole blackhole, TestState testState) {\r\n    for (int val : testState.values) {\r\n        blackhole.consume(val);\r\n    }\r\n}\r\n\r\n@State(Scope.Thread)\r\npublic static class TestState {\r\n    public int[] values;\r\n\r\n    @Setup(Level.Iteration)\r\n    public void setup() {\r\n        values = new int[10_000];\r\n        ThreadLocalRandom.current().ints(values.length).forEach(i -> values[i % values.length] = i);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public MeshView createTexturedSphere(double radius, int divisions) {\r\n    TriangleMesh mesh = new TriangleMesh();\r\n\r\n    for (int y = 0; y <= divisions; y++) {\r\n        double v = (double) y / divisions;\r\n        double phi = Math.PI * v;\r\n        for (int x = 0; x <= divisions; x++) {\r\n            double u = (double) x / divisions;\r\n            double theta = 2 * Math.PI * u;\r\n            float px = (float) (radius * Math.sin(phi) * Math.cos(theta));\r\n            float py = (float) (radius * Math.cos(phi));\r\n            float pz = (float) (radius * Math.sin(phi) * Math.sin(theta));\r\n            mesh.getPoints().addAll(px, py, pz);\r\n            mesh.getTexCoords().addAll((float) u, (float) v);\r\n        }\r\n    }\r\n\r\n    for (int y = 0; y < divisions; y++) {\r\n        for (int x = 0; x < divisions; x++) {\r\n            int p0 = y * (divisions + 1) + x;\r\n            int p1 = p0 + 1;\r\n            int p2 = p0 + (divisions + 1);\r\n            int p3 = p2 + 1;\r\n\r\n            mesh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n            mesh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n        }\r\n    }\r\n\r\n    MeshView view = new MeshView(mesh);\r\n    PhongMaterial mat = new PhongMaterial();\r\n    mat.setDiffuseMap(new Image(getClass().getResourceAsStream(\""/images/earth2.jpg\"")));\r\n    view.setMaterial(mat);\r\n    return view;\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Configuration\r\nclass ConcurrencyLimiterConfig {\r\n\r\n    @Bean\r\n    fun requestSemaphore(): Semaphore {\r\n        return Semaphore(50) // match your hikari maximum-pool-size\r\n    }\r\n\r\n    @Bean\r\n    fun concurrencyLimitingFilter(semaphore: Semaphore): FilterRegistrationBean<ConcurrencyLimitingFilter> {\r\n        val registration = FilterRegistrationBean(ConcurrencyLimitingFilter(semaphore))\r\n        registration.order = Ordered.HIGHEST_PRECEDENCE\r\n        return registration\r\n    }\r\n}\r\n\r\nclass ConcurrencyLimitingFilter(private val semaphore: Semaphore) : Filter {\r\n    override fun doFilter(request: ServletRequest, response: ServletResponse, chain: FilterChain) {\r\n        if (!semaphore.tryAcquire()) {\r\n            (response as HttpServletResponse).sendError(HttpStatus.TOO_MANY_REQUESTS.value(), \""Too many concurrent requests\"")\r\n            return\r\n        }\r\n        try {\r\n            chain.doFilter(request, response)\r\n        } finally {\r\n            semaphore.release()\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Override\r\npublic void start(Stage stage) throws Exception {\r\n    Pane pane = new Pane();\r\n\r\n    Region background = new Region();\r\n    background.setStyle(\""-fx-background-color: red;\"");\r\n    background.setPrefSize(500, 500);\r\n\r\n    Button testButton = new Button(\""Test\"");\r\n    testButton.setStyle(\""-fx-background-color: green;\"");\r\n    testButton.setLayoutX(200);\r\n    testButton.setLayoutY(200);\r\n\r\n    pane.getChildren().addAll(background, testButton);\r\n\r\n    FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n    transition.setFromValue(1.0);\r\n    transition.setToValue(0.0);\r\n    transition.setCycleCount(Timeline.INDEFINITE);\r\n    transition.setAutoReverse(true);\r\n    transition.play();\r\n\r\n    Scene scene = new Scene(pane, 500, 500);\r\n\r\n    stage.setMinWidth(500);\r\n    stage.setMinHeight(500);\r\n    stage.setTitle(\""Test\"");\r\n    stage.setResizable(false);\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.nio.file.Path;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CreateQRWithText {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = \""https://example.com/your_event\"";\r\n            String filePath = \""C:\\\\Users\\\\Nirmalw\\\\Desktop\\\\Projects\\\\QR\\\\test\\\\test_img\\\\my_QR_with_text.png\"";\r\n            String charset = \""UTF-8\"";\r\n            String userName = \""John Doe\"";\r\n            String eventName = \""Tech Conference 2025\"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            int textHeight = 100;\r\n            int width = qrImage.getWidth();\r\n            int height = qrImage.getHeight() + textHeight;\r\n\r\n            BufferedImage combined = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, width, height);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(\""Arial\"", Font.PLAIN, 20));\r\n            FontMetrics fm = g.getFontMetrics();\r\n            int userNameWidth = fm.stringWidth(userName);\r\n            int eventNameWidth = fm.stringWidth(eventName);\r\n\r\n            g.drawString(userName, (width - userNameWidth) / 2, qrImage.getHeight() + 30);\r\n            g.drawString(eventName, (width - eventNameWidth) / 2, qrImage.getHeight() + 60);\r\n\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, \""png\"", new File(filePath));\r\n            System.out.println(\""QR Code with text created successfully!\"");\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Service\r\n@RequiredArgsConstructor\r\npublic class DirectoryWatcherService {\r\n\r\n    private final WatchService watchService;\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try {\r\n                WatchKey key = watchService.take();\r\n                for (WatchEvent<?> event : key.pollEvents()) {\r\n                    try {\r\n                        // your logic here\r\n                    } catch (Exception e) {\r\n                        // log and continue with next event\r\n                        System.err.println(\""Error processing file event: \"" + e.getMessage());\r\n                    }\r\n                }\r\n                key.reset();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n                break;\r\n            } catch (Exception e) {\r\n                // log the exception, maybe sleep a bit before retrying\r\n                System.err.println(\""WatchService error, will retry: \"" + e.getMessage());\r\n                try {\r\n                    Thread.sleep(1000);\r\n                } catch (InterruptedException interruptedException) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class SnakeToCamelMap {\r\n    public static void main(String[] args) throws Exception {\r\n        Map<String, Integer> original = Map.of(\r\n            \""test_first\"", 1,\r\n            \""test_second\"", 2\r\n        );\r\n\r\n        Map<String, Integer> transformed = original.entrySet().stream()\r\n            .collect(Collectors.toMap(\r\n                e -> toCamelCase(e.getKey()),\r\n                Map.Entry::getValue\r\n            ));\r\n\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(transformed);\r\n        System.out.println(json);\r\n    }\r\n\r\n    private static String toCamelCase(String snake) {\r\n        StringBuilder result = new StringBuilder();\r\n        boolean upperNext = false;\r\n        for (char c : snake.toCharArray()) {\r\n            if (c == '_') {\r\n                upperNext = true;\r\n            } else {\r\n                result.append(upperNext ? Character.toUpperCase(c) : c);\r\n                upperNext = false;\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv," @Configuration\r\npublic class CorsConfig {\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer(){\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(\""/**\"").allowedOrigins(\""*\"").allowedMethods(\""*\"");\r\n            }\r\n        };\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class NonStrictDemo {\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e-308;\r\n\r\n        double c = a + b; // b is too small to affect a in 64-bit, but not in 80-bit\r\n        double d = c - a; // if 80-bit precision was used, d could be non-zero\r\n\r\n        System.out.println(\""d = \"" + d);\r\n    }\r\n}\r\n\r\npublic strictfp class StrictDemo {\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e-308;\r\n\r\n        double c = a + b;\r\n        double d = c - a;\r\n\r\n        System.out.println(\""d = \"" + d);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class BulletSpriteCache {\r\n    private final BufferedImage[] cachedRotations;\r\n    private final int rotationSteps;\r\n\r\n    public BulletSpriteCache(BufferedImage baseSprite, int rotationSteps) {\r\n        this.rotationSteps = rotationSteps;\r\n        this.cachedRotations = new BufferedImage[rotationSteps];\r\n\r\n        for (int i = 0; i < rotationSteps; i++) {\r\n            double angle = 360.0 * i / rotationSteps;\r\n            cachedRotations[i] = rotateImage(baseSprite, angle);\r\n        }\r\n    }\r\n\r\n    private BufferedImage rotateImage(BufferedImage img, double angle) {\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.rotate(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n        g2d.drawImage(img, 0, 0, null);\r\n        g2d.dispose();\r\n        return rotated;\r\n    }\r\n\r\n    public BufferedImage getSpriteForAngle(double angle) {\r\n        int index = (int) ((angle % 360 + 360) % 360 / 360.0 * rotationSteps);\r\n        return cachedRotations[index];\r\n    }\r\n}\r\n\r\npublic class Bullet {\r\n    private final BulletSpriteCache spriteCache;\r\n    private final double angle;\r\n\r\n    public Bullet(BulletSpriteCache cache, double angle) {\r\n        this.spriteCache = cache;\r\n        this.angle = angle;\r\n    }\r\n\r\n    public void draw(Graphics g, int x, int y) {\r\n        BufferedImage sprite = spriteCache.getSpriteForAngle(angle);\r\n        g.drawImage(sprite, x, y, null);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(\""[a-zA-Z ]+\"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + \"" is an invalid sentence\"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(\""\\\\s+\"");\r\n\r\n        if (words.length <= 2) {\r\n            return \""Invalid Length\"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n\r\n        StringBuilder middle = new StringBuilder();\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            middle.append(words[i]);\r\n            if (i != words.length - 2) {\r\n                middle.append(\"" \"");\r\n            }\r\n        }\r\n\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(lastWord).append(\"" \"");\r\n        result.append(new StringBuilder(middle.toString()).reverse()).append(\"" \"");\r\n        result.append(firstWord);\r\n\r\n        return result.toString();\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\""Enter the sentence\"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        System.out.println(result);\r\n\r\n        sc.close();\r\n    }\r\n}\r\n\r\nDo you wear your mask\r\n\r\nmask ruoy raew uoy Do"
0,1,misclassified_in_Test_7.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Skin;\r\nimport javafx.scene.control.skin.ComboBoxListViewSkin;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(\""Option 1\"", \""Option 2\"", \""Option 3\"");\r\n        comboBox.getStyleClass().add(\""yellowed\"");\r\n\r\n        comboBox.showingProperty().addListener((obs, wasShowing, isNowShowing) -> {\r\n            if (isNowShowing) {\r\n                Skin<?> skin = comboBox.getSkin();\r\n                if (skin instanceof ComboBoxListViewSkin<?>) {\r\n                    ComboBoxListViewSkin<?> cbSkin = (ComboBoxListViewSkin<?>) skin;\r\n                    cbSkin.getPopupContent().getStyleClass().add(\""yellowed\"");\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(\""test.css\"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.list-view.yellowed .list-cell {\r\n    -fx-background-color: yellow;\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"try (MockedConstruction<PageImpl> pageMockedConstruction =\r\n         Mockito.mockConstruction(PageImpl.class,\r\n             withSettings().useConstructor(reportPageResponses, pageable, 9999L),\r\n             (mock, context) -> {\r\n                 when(mock.getTotalElements()).thenReturn(123456L);\r\n                 when(mock.getTotalPages()).thenReturn(1);\r\n                 when(mock.getContent()).thenReturn(reportPageResponses);\r\n             })) {\r\n\r\n    Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n\r\n    PageImpl<ReportPageResponse> expected = pageMockedConstruction.constructed().get(0);\r\n\r\n    Assertions.assertThat(actual).isSameAs(expected);\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Text text = new Text(\""Hello there StackOverflow, how are you? (:\"");\r\n        text.setFont(Font.font(16));\r\n\r\n        ObjectProperty<Color> color = new SimpleObjectProperty<>(Color.RED);\r\n        text.fillProperty().bind(color);\r\n\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.ZERO,\r\n                new KeyValue(color, Color.RED)\r\n            ),\r\n            new KeyFrame(Duration.seconds(2),\r\n                new KeyValue(color, Color.BLUE)\r\n            )\r\n        );\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.setAutoReverse(true);\r\n        timeline.play();\r\n\r\n        StackPane root = new StackPane(text);\r\n        Scene scene = new Scene(root, 400, 400);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Component\r\n@ConfigurationProperties(prefix = \""root\"")\r\npublic class RootProperties {\r\n    private final Map<String, String> props = new HashMap<>();\r\n\r\n    public Map<String, String> getProps() {\r\n        return props;\r\n    }\r\n}\r\n\r\nroot.prop=xxxx\r\nroot.prop2=yyyy\r\nroot.prop3=zzzz\r\n\r\n@Autowired\r\nprivate RootProperties rootProperties;\r\n\r\npublic void doStuff() {\r\n    Map<String, String> map = rootProperties.getProps();\r\n    // do something with your map\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"OkHttpClient client = new OkHttpClient();\r\n\r\nRequestBody formBody = new FormBody.Builder()\r\n    .add(\""grant_type\"", \""client_credentials\"")\r\n    .add(\""client_id\"", \""your-client-id\"")\r\n    .add(\""client_secret\"", \""your-client-secret\"")\r\n    .build();\r\n\r\nRequest request = new Request.Builder()\r\n    .url(\""https://auth.example.com/oauth/token\"")\r\n    .post(formBody)\r\n    .build();\r\n\r\ntry (Response response = client.newCall(request).execute()) {\r\n    if (!response.isSuccessful()) throw new IOException(\""Unexpected code \"" + response);\r\n\r\n    String responseBody = response.body().string();\r\n    JSONObject json = new JSONObject(responseBody);\r\n    String accessToken = json.getString(\""access_token\"");\r\n\r\n    // now use the token\r\n    Request apiRequest = new Request.Builder()\r\n        .url(\""https://api.example.com/some-protected-endpoint\"")\r\n        .header(\""Authorization\"", \""Bearer \"" + accessToken)\r\n        .build();\r\n\r\n    try (Response apiResponse = client.newCall(apiRequest).execute()) {\r\n        System.out.println(apiResponse.body().string());\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.*;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\nimport com.github.javaparser.resolution.declarations.ResolvedFieldDeclaration;\r\nimport com.github.javaparser.symbolsolver.JavaSymbolSolver;\r\nimport com.github.javaparser.symbolsolver.model.resolution.TypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver;\r\nimport com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;\r\n\r\nimport java.io.File;\r\nimport java.util.*;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        File projectDir = new File(\""src/main/java\"");\r\n        File sourceFile = new File(projectDir, \""Example.java\"");\r\n\r\n        TypeSolver typeSolver = new CombinedTypeSolver(\r\n                new ReflectionTypeSolver(),\r\n                new JavaParserTypeSolver(projectDir)\r\n        );\r\n\r\n        StaticJavaParser.getConfiguration().setSymbolResolver(new JavaSymbolSolver(typeSolver));\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(\""Class: \"" + classDecl.getNameAsString());\r\n\r\n            Set<String> fieldNames = new HashSet<>();\r\n            classDecl.findAll(FieldDeclaration.class).forEach(fd ->\r\n                    fd.getVariables().forEach(var -> fieldNames.add(var.getNameAsString()))\r\n            );\r\n\r\n            classDecl.findAll(MethodDeclaration.class).forEach(method -> {\r\n                System.out.println(\""  Method: \"" + method.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                method.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(AssignExpr n, Void arg) {\r\n                        Expression target = n.getTarget();\r\n                        if (target.isNameExpr()) {\r\n                            String name = target.asNameExpr().getNameAsString();\r\n                            if (fieldNames.contains(name)) writeFields.add(name);\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        Expression expr = n.getExpression();\r\n                        if (expr.isNameExpr()) {\r\n                            String name = expr.asNameExpr().getNameAsString();\r\n                            if (fieldNames.contains(name)) {\r\n                                writeFields.add(name);\r\n                                readFields.add(name);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        String name = n.getNameAsString();\r\n                        if (fieldNames.contains(name)) {\r\n                            readFields.add(name);\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n                }, null);\r\n\r\n                System.out.println(\""    Read Fields: \"" + readFields);\r\n                System.out.println(\""    Write Fields: \"" + writeFields);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nClass: Example\r\n  Method: method1\r\n    Read Fields: [field2]\r\n    Write Fields: [field1]\r\n  Method: method2\r\n    Read Fields: []\r\n    Write Fields: [field2]"
0,1,misclassified_in_Test_7.csv.csv," @Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Annotation {\r\n    Class<?> className() default Void.class;\r\n}\r\n\r\npublic class AnotherClass {}\r\n\r\npublic class Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = String.class)\r\n    private String overrideAttribute;\r\n}\r\n\r\nfor (Field field : Main.class.getDeclaredFields()) {\r\n    Annotation ann = field.getAnnotation(Annotation.class);\r\n    if (ann != null) {\r\n        Class<?> actualClass = ann.className() == Void.class ? field.getType() : ann.className();\r\n        System.out.println(field.getName() + \"" -> \"" + actualClass.getSimpleName());\r\n    }\r\n}\r\n\r\nannotatedAttribute -> AnotherClass\r\noverrideAttribute -> String"
0,1,misclassified_in_Test_7.csv.csv,"Trees trees = Trees.instance(processingEnv);\r\nTreePath path = trees.getPath(element); // `element` being the method or class\r\nCompilationUnitTree cu = path.getCompilationUnit();\r\nTreeScanner<Void, Void> scanner = new TreeScanner<Void, Void>() {\r\n    @Override\r\n    public Void visitSwitch(SwitchTree switchTree, Void aVoid) {\r\n        ExpressionTree expr = switchTree.getExpression();\r\n        TreePath exprPath = TreePath.getPath(cu, expr);\r\n        TypeMirror type = trees.getTypeMirror(exprPath);\r\n\r\n        if (type != null) {\r\n            System.out.println(\""Switch expression type: \"" + type);\r\n        }\r\n        return super.visitSwitch(switchTree, aVoid);\r\n    }\r\n};\r\nscanner.scan(cu, null);"
0,1,misclassified_in_Test_7.csv.csv," @Component\r\n@Scope(\""prototype\"")\r\npublic class MyListItemController {\r\n    // your code\r\n}\r\n\r\nFXMLLoader fxmlLoader = new FXMLLoader(PATH_TO_FXML);\r\nfxmlLoader.setControllerFactory(applicationContext::getBean);\r\nVBox listItem = fxmlLoader.load();\r\ncontentArea.getChildren().add(listItem);\r\n\r\n"
0,1,misclassified_in_Test_7.csv.csv,"double x = r.get(i) * Math.cos(Math.toRadians(nodes.get(i)));\r\ndouble y = r.get(i) * Math.sin(Math.toRadians(nodes.get(i)));\r\n\r\nList<Point> points = new ArrayList<>();\r\nfor (int i = 0; i < r.size(); i++) {\r\n    double angle = nodes.get(i);\r\n    double radius = r.get(i);\r\n    points.add(new Point(angle, radius));\r\n}\r\n\r\npoints.sort(Comparator.comparingDouble(p -> p.angle));\r\n\r\nfor (Point p : points) {\r\n    double x = p.radius * Math.cos(Math.toRadians(p.angle));\r\n    double y = p.radius * Math.sin(Math.toRadians(p.angle));\r\n    series1.getData().add(new XYChart.Data<>(x, y));\r\n}\r\n\r\nprivate static class Point {\r\n    double angle;\r\n    double radius;\r\n\r\n    Point(double angle, double radius) {\r\n        this.angle = angle;\r\n        this.radius = radius;\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import android.app.Dialog;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n\r\n        return inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n\r\n        Dialog dialog = getDialog();\r\n        if (dialog instanceof BottomSheetDialog) {\r\n            BottomSheetDialog bottomSheetDialog = (BottomSheetDialog) dialog;\r\n\r\n            View bottomSheet = bottomSheetDialog\r\n                    .findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n\r\n            if (bottomSheet != null) {\r\n                BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\n                behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                behavior.setSkipCollapsed(true);\r\n\r\n                ViewGroup.LayoutParams layoutParams = bottomSheet.getLayoutParams();\r\n                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n                bottomSheet.setLayoutParams(layoutParams);\r\n            }\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(\""BUSINESS\""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .findFirst()\r\n        .orElseThrow(() -> new RuntimeException(\""NO BUSINESS OBJECT FOUND\""))\r\n        .getUrl();\r\n\r\n    // or with full fallback chain:\r\n    return listOfObjects.stream()\r\n        .filter(obj -> obj.objectType().equals(\""BUSINESS\""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .collect(Collectors.collectingAndThen(Collectors.toList(), businessList -> {\r\n\r\n            if (businessList.isEmpty()) {\r\n                throw new RuntimeException(\""NO BUSINESS OBJECT FOUND\"");\r\n            }\r\n\r\n            return businessList.stream()\r\n                .filter(obj -> obj.objectStatus().equals(\""ACTIVE\""))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .collect(Collectors.collectingAndThen(Collectors.toList(), activeList -> {\r\n\r\n                    if (activeList.isEmpty()) {\r\n                        return businessList.get(0).getUrl();\r\n                    }\r\n\r\n                    return activeList.stream()\r\n                        .filter(obj -> obj.locale().equals(\""en-US\""))\r\n                        .sorted(Comparator.comparing(CustomObject::url))\r\n                        .map(CustomObject::getUrl)\r\n                        .findFirst()\r\n                        .orElse(activeList.get(0).getUrl());\r\n                }));\r\n        }));\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class ExampleApp extends Application {\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(\""-color1: green; -color2: orange;\"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, \""-color1\"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, \""-color2\"", Color.BLUE\r\n        );\r\n\r\n        Timeline timeline;\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n\r\n            sceneProperty().addListener((obs, oldScene, newScene) -> {\r\n                if (newScene != null) {\r\n                    Platform.runLater(this::startAnimation);\r\n                } else {\r\n                    if (timeline != null) timeline.stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void startAnimation() {\r\n            setFill(color1.get());\r\n\r\n            if (timeline != null) timeline.stop();\r\n\r\n            timeline = new Timeline(\r\n                new KeyFrame(Duration.ZERO,\r\n                    new KeyValue(fillProperty(), color1.get(), Interpolator.LINEAR)),\r\n                new KeyFrame(Duration.seconds(1),\r\n                    new KeyValue(fillProperty(), color2.get(), Interpolator.LINEAR))\r\n            );\r\n            timeline.setCycleCount(Animation.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            timeline.play();\r\n        }\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 =\r\n                new CssMetaData<>(\""-color1\"", PaintConverter.getInstance(), Color.RED) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect node) {\r\n                        return !node.color1.isBound();\r\n                    }\r\n\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                        return node.color1;\r\n                    }\r\n                };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 =\r\n                new CssMetaData<>(\""-color2\"", PaintConverter.getInstance(), Color.BLUE) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect node) {\r\n                        return !node.color2.isBound();\r\n                    }\r\n\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                        return node.color2;\r\n                    }\r\n                };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES =\r\n                List.of(COLOR1, COLOR2);\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv," @GetMapping(path = \""/file\"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(\r\n        @RequestParam String fileName,\r\n        @RequestParam String bucketName,\r\n        @RequestParam String projectName) {\r\n\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n\r\n    if (blob == null || !blob.exists()) {\r\n        return ResponseEntity.notFound().build();\r\n    }\r\n\r\n    ReadChannel reader = blob.reader();\r\n    InputStream inputStream = Channels.newInputStream(reader);\r\n\r\n    String contentType = blob.getContentType();\r\n    if (contentType == null) {\r\n        contentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;\r\n    }\r\n\r\n    return ResponseEntity.ok()\r\n            .contentType(MediaType.parseMediaType(contentType))\r\n            .header(HttpHeaders.CONTENT_DISPOSITION, \""attachment; filename=\"" + fileName)\r\n            .body(new InputStreamResource(inputStream));\r\n}"
0,1,misclassified_in_Test_7.csv.csv," @Component\r\npublic class ExpensiveService {\r\n    public String doThis() {\r\n        return \""expensiveToCompute\"";\r\n    }\r\n}\r\n\r\npublic class myEntityListener {\r\n\r\n    private static ExpensiveService expensiveService;\r\n\r\n    public static void setExpensiveService(ExpensiveService service) {\r\n        expensiveService = service;\r\n    }\r\n\r\n    public String doThis() {\r\n        return expensiveService.doThis();\r\n    }\r\n\r\n    @PrePersist\r\n    public void myListener(myEntity e) {\r\n        if (complexConditionToTest) {\r\n            e.setSomething(doThis());\r\n        }\r\n    }\r\n}\r\n\r\n@SpringBootTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    myEntityRepository repo;\r\n\r\n    @MockBean\r\n    ExpensiveService expensiveService;\r\n\r\n    @BeforeEach\r\n    public void setup() {\r\n        myEntityListener.setExpensiveService(expensiveService);\r\n    }\r\n\r\n    @Test\r\n    public void myListenerTest() {\r\n        String expected = \""fake-text\"";\r\n        Mockito.when(expensiveService.doThis()).thenReturn(expected);\r\n\r\n        myEntity e = new myEntity();\r\n        myEntity stored = repo.save(e);\r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"initSocketConnection(new VideoStreamCallback() {\r\n    @Override\r\n    public void onVideoStreamReceived(byte[] bytes) {\r\n        Map.Entry<Boolean, List<Integer>> mdat = hasMdat(bytes);\r\n        if (!mdat.getKey()) return;\r\n\r\n        int start = mdat.getValue().get(3) + 1;\r\n        byte[] h264Payload = Arrays.copyOfRange(bytes, start, bytes.length);\r\n\r\n        SseEmitter emitter = getEmitterForClient(); // however youâre managing connected clients\r\n        try {\r\n            emitter.send(h264Payload, MediaType.APPLICATION_OCTET_STREAM);\r\n        } catch (IOException e) {\r\n            emitter.completeWithError(e);\r\n        }\r\n    }\r\n});"
0,1,misclassified_in_Test_7.csv.csv,"public class PatternSearch {\r\n\r\n    public static List<int[]> search(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        List<int[]> results = new ArrayList<>();\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matchesAt(T, P, i, j)) {\r\n                    results.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    private static boolean matchesAt(int[][] T, int[][] P, int row, int col) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[row + i][col + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Example usage\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> results = search(T, P);\r\n        for (int[] pos : results) {\r\n            System.out.println(Arrays.toString(pos));\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private SCardNormalAdapter adapter;\r\n    private List<SCard> allStartups = new ArrayList<>();\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        adapter = new SCardNormalAdapter(allStartups);\r\n        recyclerView.setAdapter(adapter);\r\n\r\n        fetchAllStartups();\r\n        return v;\r\n    }\r\n\r\n    private void fetchAllStartups() {\r\n        DatabaseReference ref = FirebaseDatabase.getInstance().getReference(\""Category_wise\"");\r\n        ref.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                allStartups.clear();\r\n                for (DataSnapshot categorySnap : snapshot.getChildren()) {\r\n                    for (DataSnapshot companySnap : categorySnap.getChildren()) {\r\n                        SCard card = companySnap.getValue(SCard.class);\r\n                        allStartups.add(card);\r\n                    }\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {}\r\n        });\r\n    }\r\n}\r\n\r\npublic class SCardNormalAdapter extends RecyclerView.Adapter<SCardNormalAdapter.ViewHolder> {\r\n    private List<SCard> cardList;\r\n\r\n    public SCardNormalAdapter(List<SCard> cardList) {\r\n        this.cardList = cardList;\r\n    }\r\n\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(ViewHolder holder, int position) {\r\n        SCard model = cardList.get(position);\r\n        holder.setName(model.getsName());\r\n        // ... other setters\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return cardList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class StrictCookieLocaleResolver extends CookieLocaleResolver {\r\n    private static final List<Locale> SUPPORTED_LOCALES = Arrays.asList(\r\n            new Locale(\""en\""),\r\n            new Locale(\""hi\"")\r\n    );\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String newLocale = request.getParameter(getParamName());\r\n        if (newLocale != null) {\r\n            Locale candidate = StringUtils.parseLocaleString(newLocale);\r\n            if (!SUPPORTED_LOCALES.contains(candidate)) {\r\n                throw new IllegalArgumentException(\""Unsupported locale: \"" + newLocale);\r\n            }\r\n        }\r\n        return super.resolveLocale(request);\r\n    }\r\n}\r\n\r\n@Bean\r\npublic LocaleResolver localeResolver() {\r\n    StrictCookieLocaleResolver resolver = new StrictCookieLocaleResolver();\r\n    resolver.setDefaultLocale(Locale.ENGLISH);\r\n    resolver.setCookieName(\""myLocaleCookie\"");\r\n    return resolver;\r\n}\r\n\r\n@Bean\r\npublic LocaleChangeInterceptor localeChangeInterceptor() {\r\n    LocaleChangeInterceptor lci = new LocaleChangeInterceptor();\r\n    lci.setParamName(\""locale\"");\r\n    return lci;\r\n}\r\n\r\n@Override\r\npublic void addInterceptors(InterceptorRegistry registry) {\r\n    registry.addInterceptor(localeChangeInterceptor());\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class Ed25519KeyLoader {\r\n    public static void main(String[] args) throws Exception {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n\r\n        String privateKey = \""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU\"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n        KeyFactory kf = KeyFactory.getInstance(\""Ed25519\"", \""BC\"");\r\n        PrivateKey pk = kf.generatePrivate(keySpec);\r\n\r\n        System.out.println(\""Loaded private key: \"" + pk);\r\n    }\r\n}\r\n\r\n<dependency>\r\n  <groupId>org.bouncycastle</groupId>\r\n  <artifactId>bcprov-jdk15on</artifactId>\r\n  <version>1.70</version>\r\n</dependency>"
0,1,misclassified_in_Test_7.csv.csv,"import com.squareup.wire.schema.Location;\r\nimport com.squareup.wire.schema.internal.parser.ProtoFileElement;\r\nimport com.squareup.wire.schema.internal.parser.ProtoParser;\r\n\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\n\r\npublic class ProtoParserExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String path = \""src/main/proto/your_file.proto\"";\r\n        String protoContent = new String(Files.readAllBytes(Paths.get(path)));\r\n\r\n        Location location = Location.get(\""\"", path);\r\n        ProtoFileElement parsed = ProtoParser.parse(location, protoContent);\r\n\r\n        System.out.println(\""Package: \"" + parsed.getPackageName());\r\n        parsed.getTypes().forEach(type -> System.out.println(\""Type: \"" + type.getName()));\r\n        parsed.getServices().forEach(service -> System.out.println(\""Service: \"" + service.getName()));\r\n    }\r\n}\r\n\r\n<dependency>\r\n  <groupId>com.squareup.wire</groupId>\r\n  <artifactId>wire-schema</artifactId>\r\n  <version>4.7.0</version>\r\n</dependency>"
0,1,misclassified_in_Test_7.csv.csv,"class MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        runWithTimeout(() -> I_need_a_timeout(callback, 110), 500, TimeUnit.MILLISECONDS);\r\n        int result = counter.get().get();\r\n        System.out.println(\""Final count: \"" + result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop) {\r\n        while (loop-- >= 0) {\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n\r\n    private void runWithTimeout(Runnable task, long timeout, TimeUnit unit) {\r\n        Thread current = Thread.currentThread();\r\n        ScheduledExecutorService killer = Executors.newSingleThreadScheduledExecutor();\r\n        ScheduledFuture<?> timeoutFuture = killer.schedule(() -> current.stop(), timeout, unit);\r\n        try {\r\n            task.run();\r\n        } catch (ThreadDeath td) {\r\n            throw new RuntimeException(\""Execution timed out\"");\r\n        } finally {\r\n            timeoutFuture.cancel(true);\r\n            killer.shutdownNow();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class EtlStepExecutor {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(\""my-etl-pipeline\"");\r\n\r\n    public void execute(DataPackage dataPackage, String stepName) {\r\n        String traceId = normalizeTraceId(dataPackage.getId());\r\n        String spanId = generateSpanIdForStep(stepName);\r\n\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceId,\r\n                spanId,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context parentContext = Context.root().with(parentSpan);\r\n\r\n        Span span = tracer.spanBuilder(stepName)\r\n                .setParent(parentContext)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try (Scope scope = span.makeCurrent()) {\r\n                // do your actual work here\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n\r\n    private String normalizeTraceId(String id) {\r\n        String padded = String.format(\""%032x\"", new BigInteger(1, id.getBytes(StandardCharsets.UTF_8)));\r\n        return padded.length() > 32 ? padded.substring(0, 32) : padded;\r\n    }\r\n\r\n    private String generateSpanIdForStep(String stepName) {\r\n        byte[] hash = MessageDigest.getInstance(\""SHA-256\"").digest(stepName.getBytes(StandardCharsets.UTF_8));\r\n        String spanId = Hex.encodeHexString(Arrays.copyOfRange(hash, 0, 8));\r\n        return spanId;\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"class LRUCache {\r\n\r\n    class Node {\r\n        int key, value;\r\n        Node prev, next;\r\n        Node(int k, int v) {\r\n            key = k;\r\n            value = v;\r\n        }\r\n    }\r\n\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map = new HashMap<>();\r\n    private final Node head = new Node(0, 0);\r\n    private final Node tail = new Node(0, 0);\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (!map.containsKey(key)) return -1;\r\n        Node node = map.get(key);\r\n        remove(node);\r\n        insert(node);\r\n        return node.value;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            remove(map.get(key));\r\n        }\r\n        if (map.size() == capacity) {\r\n            remove(tail.prev);\r\n        }\r\n        insert(new Node(key, value));\r\n    }\r\n\r\n    private void insert(Node node) {\r\n        map.put(node.key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n\r\n    private void remove(Node node) {\r\n        map.remove(node.key);\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\n\r\npublic class GamePanel extends JPanel implements ActionListener, KeyListener {\r\n\r\n    private final int WIDTH = 500, HEIGHT = 500;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private int redX = 200, redY = 200;\r\n    private int blueX = 100, blueY = 0;\r\n    private final int DOT_SIZE = 20;\r\n    private final int RED_SIZE = 50;\r\n\r\n    private boolean up, down, left, right;\r\n\r\n    private Timer timer;\r\n\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(WIDTH, HEIGHT));\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        timer = new Timer(16, this);\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, RED_SIZE, RED_SIZE);\r\n\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if (left) redX = Math.max(0, redX - MOVE_AMOUNT);\r\n        if (right) redX = Math.min(WIDTH - RED_SIZE, redX + MOVE_AMOUNT);\r\n        if (up) redY = Math.max(0, redY - MOVE_AMOUNT);\r\n        if (down) redY = Math.min(HEIGHT - RED_SIZE, redY + MOVE_AMOUNT);\r\n\r\n        blueY += 2;\r\n        if (blueY > HEIGHT) {\r\n            blueY = 0;\r\n            blueX = (int) (Math.random() * (WIDTH - DOT_SIZE));\r\n        }\r\n\r\n        Rectangle redBounds = new Rectangle(redX, redY, RED_SIZE, RED_SIZE);\r\n        Rectangle blueBounds = new Rectangle(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n\r\n        if (redBounds.intersects(blueBounds)) {\r\n            System.out.println(\""Collision!\"");\r\n        }\r\n\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = true;\r\n            case KeyEvent.VK_RIGHT -> right = true;\r\n            case KeyEvent.VK_UP -> up = true;\r\n            case KeyEvent.VK_DOWN -> down = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = false;\r\n            case KeyEvent.VK_RIGHT -> right = false;\r\n            case KeyEvent.VK_UP -> up = false;\r\n            case KeyEvent.VK_DOWN -> down = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(\""Game\"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(new GamePanel());\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long value = COUNTER.getAndIncrement() & 0xFFFFFFFFFFFL;\r\n\r\n        long part1 = (value >> 28) & 0xFFFF;\r\n        long part2 = (value >> 16) & 0xFFF;\r\n        long part3 = value & 0xFFFF;\r\n\r\n        return String.format(\""%04x-7%03x-%04x\"", part1, part2, part3);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n\r\n0000-7000-0000\r\n0000-7000-0001\r\n0000-7000-0002"
0,1,misclassified_in_Test_7.csv.csv,"public class CustomSpinner extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        double initialValue = 0.0;\r\n\r\n        SpinnerValueFactory.DoubleSpinnerValueFactory valueFactory =\r\n                new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, initialValue, 0.25);\r\n\r\n        valueFactory.setConverter(new StringConverter<Double>() {\r\n            private final DecimalFormat df = new DecimalFormat(\""+0.00;-0.00\"");\r\n\r\n            @Override\r\n            public String toString(Double value) {\r\n                return df.format(value);\r\n            }\r\n\r\n            @Override\r\n            public Double fromString(String text) {\r\n                text = text.replace(',', '.');\r\n                try {\r\n                    return Double.parseDouble(text);\r\n                } catch (NumberFormatException e) {\r\n                    return valueFactory.getValue();\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n\r\n        Pattern pattern = Pattern.compile(\""[+-]?\\\\d{0,2}([\\\\.,]\\\\d{0,2})?\"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            String newText = change.getControlNewText();\r\n            if (newText.isEmpty() || pattern.matcher(newText).matches()) {\r\n                try {\r\n                    double parsed = valueFactory.getConverter().fromString(newText);\r\n                    if (parsed >= -20.0 && parsed <= 20.0 && parsed * 100 % 25 == 0) {\r\n                        return change;\r\n                    }\r\n                } catch (Exception ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<Double> formatter = new TextFormatter<>(valueFactory.getConverter(), initialValue, filter);\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        valueFactory.valueProperty().bindBidirectional(formatter.valueProperty());\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        root.setPadding(new Insets(20));\r\n        Scene scene = new Scene(root, 300, 100);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Custom Spinner\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.oracle.OracleSpatial10gDialect\r\n\r\nimport org.hibernate.annotations.Type;\r\nimport org.locationtech.jts.geom.Polygon;\r\n\r\n@Entity\r\npublic class Range {\r\n\r\n    @Type(type = \""org.hibernate.spatial.GeometryType\"")\r\n    @Column(name = \""shape\"")\r\n    private Polygon shape;\r\n\r\n    // getters/setters\r\n}\r\n\r\nGeometryFactory geometryFactory = new GeometryFactory();\r\nCoordinate[] coords = ... // build coordinates array\r\nPolygon polygon = geometryFactory.createPolygon(coords);\r\nrange.setShape(polygon);\r\n\r\nimport org.hibernate.annotations.Type;\r\nimport org.locationtech.jts.geom.Polygon;\r\n\r\n@Entity\r\npublic class Range {\r\n\r\n    @Type(type = \""org.hibernate.spatial.GeometryType\"")\r\n    @Column(name = \""shape\"")\r\n    private Polygon shape;\r\n\r\n    // getter/setter\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class AliasSelectorKeyManager extends X509ExtendedKeyManager {\r\n    private final X509KeyManager originalKeyManager;\r\n    private final String aliasToUse;\r\n\r\n    public AliasSelectorKeyManager(X509KeyManager originalKeyManager, String aliasToUse) {\r\n        this.originalKeyManager = originalKeyManager;\r\n        this.aliasToUse = aliasToUse;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        if (aliasToUse != null && isAliasValidForKeyTypes(aliasToUse, keyType)) {\r\n            return aliasToUse;\r\n        }\r\n        return originalKeyManager.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    private boolean isAliasValidForKeyTypes(String alias, String[] keyTypes) {\r\n        for (String kt : keyTypes) {\r\n            X509Certificate[] certs = originalKeyManager.getCertificateChain(alias);\r\n            if (certs != null && certs.length > 0) {\r\n                String alg = certs[0].getPublicKey().getAlgorithm();\r\n                if (kt.equalsIgnoreCase(alg)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // delegate all other methods to originalKeyManager\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return originalKeyManager.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return originalKeyManager.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\nKeyManagerFactory kmf = KeyManagerFactory.getInstance(\""SunX509\"");\r\nkmf.init(keyStore, keyPassword);\r\n\r\nX509KeyManager originalKm = null;\r\nfor (KeyManager km : kmf.getKeyManagers()) {\r\n    if (km instanceof X509KeyManager) {\r\n        originalKm = (X509KeyManager) km;\r\n        break;\r\n    }\r\n}\r\n\r\nX509KeyManager aliasSelectorKm = new AliasSelectorKeyManager(originalKm, \""my_cert_alias\"");\r\n\r\nSSLContext sslContext = SSLContext.getInstance(\""TLS\"");\r\nsslContext.init(new KeyManager[] { aliasSelectorKm }, trustManagerFactory.getTrustManagers(), null);"
0,1,misclassified_in_Test_7.csv.csv," @Override\r\npublic void visitLineNumber(int line, Label start) {\r\n    super.visitLineNumber(line, start);\r\n    if (!instrumented) {\r\n        instrument();  // insert your bytecode here, after line number info is available\r\n        instrumented = true;\r\n    }\r\n}\r\n\r\n"
0,1,misclassified_in_Test_7.csv.csv,"private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(8);\r\n\r\npublic CompletableFuture<Boolean> runTaskAsync(ReportClient client, String documentId) {\r\n    return CompletableFuture.supplyAsync(() -> client.createDocument(documentId))\r\n        .thenCompose(uuid -> pollStatus(uuid, client));\r\n}\r\n\r\nprivate CompletableFuture<Boolean> pollStatus(String uuid, ReportClient client) {\r\n    CompletableFuture<Boolean> promise = new CompletableFuture<>();\r\n\r\n    Runnable poller = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            var status = client.getStatus(uuid);\r\n            if (Status.PENDING.equals(status.status())) {\r\n                scheduler.schedule(this, 10, TimeUnit.SECONDS);\r\n            } else {\r\n                client.getReport(uuid);\r\n                promise.complete(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    scheduler.schedule(poller, 0, TimeUnit.SECONDS);\r\n    return promise;\r\n}\r\n\r\nList<CompletableFuture<Boolean>> futures = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\n    futures.add(runTaskAsync(client, documentId));\r\n}\r\nCompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();\r\nscheduler.shutdown();"
0,1,misclassified_in_Test_7.csv.csv," @Override\r\npublic boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n    TypeElement generatedAnn = processingEnv.getElementUtils().getTypeElement(\""com.company.MyEnumAnnotation\"");\r\n    if (generatedAnn == null) {\r\n        // Generate MyEnumAnnotation now\r\n        generateMyEnumAnnotation();\r\n        return false; // Keep processing rounds open\r\n    }\r\n    // Now MyEnumAnnotation exists, so process client code annotated with it\r\n    for (Element annotatedElem : roundEnv.getElementsAnnotatedWith(generatedAnn)) {\r\n        // do stuff with annotatedElem\r\n    }\r\n    return true;\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    void testDeserialize_validDate() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""2023-06-27T15:30:00Z\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        Date result = deserializer.deserialize(parser, ctxt);\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\""yyyy-MM-dd'T'HH:mm:ssX\"");\r\n        Date expected = sdf.parse(\""2023-06-27T15:30:00Z\"");\r\n\r\n        assertEquals(expected, result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_emptyString_returnsNull() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        Date result = deserializer.deserialize(parser, ctxt);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserialize_invalidDate_throwsException() throws Exception {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext ctxt = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""invalid-date\"");\r\n\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n        MyCustomException thrown = assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(parser, ctxt);\r\n        });\r\n\r\n        assertEquals(\""Invalid date passed, ISO 8601 is expected\"", thrown.getMessage());\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails specialUser = User.withUsername(\""specialUser\"")\r\n                .password(passwordEncoder().encode(\""specialPass\""))\r\n                .roles(\""SPECIALROLE\"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(specialUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .securityMatcher(\""/very-special-path/**\"")\r\n            .userDetailsService(inMemoryUserDetailsService())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated());\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain appFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .userDetailsService(customUserDetailsService())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated());\r\n\r\n        return http.build();\r\n    }\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n    .onItem().transformToUniAndConcatenate(tick -> \r\n        service.getTransactions()\r\n            .toMulti()\r\n            .select().first() // just an example to get one transaction at a time\r\n            .filter(transaction -> {\r\n                boolean transactionFound = transaction.getAmount().stream()\r\n                    .anyMatch(amount -> amount.getQuantity().equals(\""test\""));\r\n                return transactionFound;\r\n            })\r\n            .collect().first() // collect first matching transaction, if any\r\n            .replaceIfNull(() -> null) // null if none found\r\n            .toUni()\r\n    )\r\n    .select().first(transaction -> transaction != null) // take first non-null\r\n    .subscribe()\r\n    .with(transaction -> {\r\n        if (transaction != null) {\r\n            log.info(\""Found transaction: \"" + transaction);\r\n        } else {\r\n            log.info(\""No transaction found\"");\r\n        }\r\n    }, Throwable::printStackTrace);"
0,1,misclassified_in_Test_7.csv.csv,"LanguageProgramming.getSelectionModel().clearSelection();\r\n\r\npublic void DevelopmentTypeEvent() {\r\n    if (DevelopmentType.getValue().equals(\""Back-end\"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setPromptText(\""Select a language programming\"");\r\n    } else if (DevelopmentType.getValue().equals(\""Front-end\"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setPromptText(\""Select a language programming\"");\r\n    }\r\n}\r\n\r\nLanguageProgramming.setValue(null);\r\n\r\n"
0,1,misclassified_in_Test_7.csv.csv,"private static final String ACTION_USB_PERMISSION = \""com.yourapp.USB_PERMISSION\"";\r\n\r\npublic NativeUsbService(ReactApplicationContext reactContext) {\r\n  this.reactContext = reactContext;\r\n  usbManager = (UsbManager) reactContext.getSystemService(Context.USB_SERVICE);\r\n\r\n  IntentFilter filter = new IntentFilter();\r\n  filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n  filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n  filter.addAction(ACTION_USB_PERMISSION);\r\n  reactContext.registerReceiver(usbReceiver, filter);\r\n}\r\n\r\nprivate final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n  public void onReceive(Context context, Intent intent) {\r\n    String action = intent.getAction();\r\n\r\n    if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n      UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n      if (device != null) {\r\n        usbDevice = device;\r\n        if (!usbManager.hasPermission(device)) {\r\n          PendingIntent permissionIntent = PendingIntent.getBroadcast(context, 0,\r\n              new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n          usbManager.requestPermission(device, permissionIntent);\r\n        } else {\r\n          onUsbPermissionGranted(device);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (ACTION_USB_PERMISSION.equals(action)) {\r\n      UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n      if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n        if (device != null) {\r\n          onUsbPermissionGranted(device);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n      if (connection != null) {\r\n        connection.releaseInterface(usbDeviceInterface);\r\n        connection.close();\r\n      }\r\n      connection = null;\r\n      usbDevice = null;\r\n      endpointIn = null;\r\n      endpointOut = null;\r\n    }\r\n  }\r\n};\r\n\r\nprivate void onUsbPermissionGranted(UsbDevice device) {\r\n  connection = usbManager.openDevice(device);\r\n  usbDeviceInterface = device.getInterface(0);\r\n  connection.claimInterface(usbDeviceInterface, true);\r\n  // your logic here\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@Schema(name = \""UserResponse\"", description = \""User creation response\"")\r\npublic class UserResponseEnvelope {\r\n    private boolean success;\r\n    private UserDto result;\r\n\r\n    public boolean isSuccess() { return success; }\r\n    public void setSuccess(boolean success) { this.success = success; }\r\n\r\n    public UserDto getResult() { return result; }\r\n    public void setResult(UserDto result) { this.result = result; }\r\n}\r\n\r\n@Operation(summary = \""Create user\"")\r\n@ApiResponse(responseCode = \""201\"", description = \""User created\"",\r\n    content = @Content(mediaType = \""application/json\"",\r\n        schema = @Schema(implementation = UserResponseEnvelope.class)))\r\n@PostMapping(\""/users\"")\r\n@PreAuthorize(\""hasAuthority('create:user')\"")\r\npublic ResponseEntity<UserDto> create(@RequestBody @Valid CreateUserCommand command) {\r\n    return ResponseEntity.status(HttpStatus.CREATED).body(userService.create(command));\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"findAll()\r\n  .flatMapSequential(relation ->\r\n    findStorageId(relation)\r\n      .filter(id -> isPassing(relation))\r\n      .map(id -> Tuples.of(relation, id))\r\n  )\r\n  .next()\r\n  .subscribe(match -> {\r\n    // handle your first match here\r\n  });\r\n\r\n.findAll()\r\n  .flatMapSequential(relation ->\r\n    findStorageId(relation)\r\n      .filterWhen(id -> Mono.fromCallable(() -> isPassing(relation)))\r\n      .map(id -> Tuples.of(relation, id))\r\n  )\r\n  .next()"
0,1,misclassified_in_Test_7.csv.csv,"public class Task implements Runnable {\r\n    private static final ConcurrentHashMap<String, ReentrantLock> locks = new ConcurrentHashMap<>();\r\n    private final String key;\r\n\r\n    public Task(String key) {\r\n        this.key = key;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        ReentrantLock lock = locks.computeIfAbsent(key, k -> new ReentrantLock());\r\n\r\n        if (!lock.tryLock()) {\r\n            System.out.println(\""Task with key \"" + key + \"" is already running. Skipping.\"");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            System.out.println(\""Running: \"" + key);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            lock.unlock();\r\n            locks.remove(key, lock);\r\n        }\r\n    }\r\n}\r\n\r\nExecutorService executor = Executors.newFixedThreadPool(5);\r\nexecutor.submit(new Task(\""hi\""));\r\nexecutor.submit(new Task(\""h\""));\r\nexecutor.submit(new Task(\""u\""));\r\nexecutor.submit(new Task(\""y\""));\r\nexecutor.submit(new Task(\""hi\""));\r\nexecutor.submit(new Task(\""p\""));\r\nexecutor.submit(new Task(\""o\""));\r\nexecutor.submit(new Task(\""bb\""));"
0,1,misclassified_in_Test_7.csv.csv," @Configuration\r\n@EnableWebSocketSecurity\r\npublic class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n}\r\n\r\nhttp.csrf(AbstractHttpConfigurer::disable)\r\n    .authorizeHttpRequests(auth -> auth\r\n        .requestMatchers(\""/ws/**\"").permitAll()\r\n        .anyRequest().authenticated()\r\n    );\r\n\r\nhttp.csrf(csrf -> csrf\r\n    .ignoringRequestMatchers(new AntPathRequestMatcher(\""/ws/**\""))\r\n);\r\n\r\n"
0,1,misclassified_in_Test_7.csv.csv,"String xmlPayload = new String(Files.readAllBytes(Paths.get(\""signed_mdfe.xml\"")), StandardCharsets.UTF_8);\r\n\r\nMDFeRecepcaoSinc service = new MDFeRecepcaoSinc();\r\nMDFeRecepcaoSincSoap12 port = service.getMDFeRecepcaoSincSoap12();\r\n\r\nMdfeRecepcaoResult result = port.mdfeRecepcao(xmlPayload);\r\nSystem.out.println(result.getRetMDFe()); // assuming JAXB binding has proper getter\r\n\r\nJAXB.marshal(result, System.out);\r\n\r\n@XmlElement(name = \""retMDFe\"", namespace = \""http://www.portalfiscal.inf.br/mdfe\"")\r\nprivate RetMDFeType retMDFe;\r\n\r\nString rawXml = port.mdfeRecepcao(xmlPayload).getAny().toString();\r\nJAXBContext ctx = JAXBContext.newInstance(RetMDFeType.class);\r\nUnmarshaller unmarshaller = ctx.createUnmarshaller();\r\nRetMDFeType ret = (RetMDFeType) unmarshaller.unmarshal(new StringReader(rawXml));\r\nSystem.out.println(ret.getCStat());"
0,1,misclassified_in_Test_7.csv.csv,"String htmlString = \""<!DOCTYPE html>\\n\"" +\r\n        \""<html lang=\\\""ru\\\"">\\n\"" +\r\n        \""<head>\\n\"" +\r\n        \""    <meta charset=\\\""UTF-8\\\""/>\\n\"" +\r\n        \""    <style>\\n\"" +\r\n        \""        @font-face {\\n\"" +\r\n        \""            font-family: 'DejaVu';\\n\"" +\r\n        \""            src: url('file:///C:/Windows/Fonts/DejaVuSans.ttf');\\n\"" + // adjust path on Linux/Mac\r\n        \""        }\\n\"" +\r\n        \""        body { font-family: 'DejaVu'; }\\n\"" +\r\n        \""    </style>\\n\"" +\r\n        \""</head>\\n\"" +\r\n        \""<body>\\n\"" +\r\n        \""    <h3>?????????????</h3>\\n\"" +\r\n        \""</body>\\n\"" +\r\n        \""</html>\"";\r\n\r\nString path = System.getProperty(\""user.home\"") + \""/A.pdf\"";\r\ntry (OutputStream outputStream = new FileOutputStream(path)) {\r\n    ITextRenderer renderer = new ITextRenderer();\r\n\r\n    ITextFontResolver fontResolver = renderer.getFontResolver();\r\n    fontResolver.addFont(\""C:/Windows/Fonts/DejaVuSans.ttf\"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); // adjust if Linux/Mac\r\n\r\n    renderer.setDocumentFromString(htmlString);\r\n    renderer.layout();\r\n    renderer.createPDF(outputStream);\r\n}"
0,1,misclassified_in_Test_7.csv.csv," @PostMapping(\""/hole/coordinate\"")\r\n@ResponseBody\r\npublic String saveCoordinate(@RequestBody Map<String, Object> params) {\r\n    List<List<Double>> rawList = (List<List<Double>>) params.get(\""coordinate\"");\r\n\r\n    int[][] coordinates = rawList.stream()\r\n        .map(inner -> inner.stream().mapToInt(Double::intValue).toArray())\r\n        .toArray(int[][]::new);\r\n\r\n    for (int[] pair : coordinates) {\r\n        System.out.println(Arrays.toString(pair));\r\n    }\r\n\r\n    return \""success\"";\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"public class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n    private static boolean started = false;\r\n\r\n    @Override\r\n    public void beforeAll(ExtensionContext context) {\r\n        if (!started) {\r\n            // start the server\r\n            started = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void afterAll(ExtensionContext context) {\r\n        // only shut down after the last test class\r\n        if (context.getRoot().getStore(ExtensionContext.Namespace.GLOBAL)\r\n                  .get(\""shutdownHook\"") == null) {\r\n            context.getRoot().getStore(ExtensionContext.Namespace.GLOBAL)\r\n                .put(\""shutdownHook\"", (ExtensionContext.Store.CloseableResource) () -> {\r\n                    // stop the server\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n@ExtendWith(JUnit5Server.class)\r\npublic class FirstTest {\r\n    // tests using the server\r\n}"
0,1,misclassified_in_Test_7.csv.csv,"@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = \""BinaryData\"", propOrder = {\r\n    \""blob\"",\r\n    \""extension\""\r\n})\r\npublic class BinaryData {\r\n\r\n    @XmlElement(required = true)\r\n    protected byte[] blob;\r\n\r\n    @XmlElement(required = true)\r\n    protected String extension;\r\n\r\n    public byte[] getBlob() {\r\n        return blob;\r\n    }\r\n\r\n    public void setBlob(byte[] value) {\r\n        this.blob = value;\r\n    }\r\n\r\n    public String getExtension() {\r\n        return extension;\r\n    }\r\n\r\n    public void setExtension(String value) {\r\n        this.extension = value;\r\n    }\r\n}\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    binaryData.setBlob(documentData);\r\n    binaryData.setExtension(\""pdf\"");\r\n    return binaryData;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1 = Long.parseLong(txtfirst.getText().toString());\r\n        long value2 = Long.parseLong(txtsecond.getText().toString());\r\n        list.clear();\r\n        for (long i = value1; i <= value2; i++) {\r\n            list.add(String.format(\""%011d\"", i));\r\n        }\r\n        arrayAdapter.notifyDataSetChanged();\r\n    }\r\n});\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Bean\r\n@Order(10)\r\npublic SecurityFilterChain authChain(HttpSecurity http) throws Exception {\r\n    http.securityMatcher(\""/**\"")\r\n        .authorizeHttpRequests(authorizeRequests ->\r\n            authorizeRequests\r\n                .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n                .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... );\r\n    return http.build();\r\n}\r\n@Bean\r\n@Order(20)\r\npublic SecurityFilterChain resourceChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http.securityMatcher(\""/**\"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}\r\n@Bean\r\n@Order(10)\r\npublic SecurityFilterChain mainChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http\r\n        .authorizeHttpRequests(authz -> authz\r\n            .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... )\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"private final Elements elementUtils;\r\nprivate final Types typeUtils;\r\nprivate final DocTrees docTrees;\r\n\r\npublic MyProcessor(ProcessingEnvironment processingEnv) {\r\n    this.elementUtils = processingEnv.getElementUtils();\r\n    this.typeUtils = processingEnv.getTypeUtils();\r\n    this.docTrees = DocTrees.instance(processingEnv);\r\n}\r\n\r\n@Override\r\npublic Void visitLink(LinkTree linkTree, Void unused) {\r\n    ReferenceTree ref = linkTree.getReference();\r\n    String signature = ref.getSignature();\r\n\r\n    DocTreePath docPath = getCurrentPath(); // assuming youâre visiting via a DocTreeScanner\r\n    TreePath path = docPath.getTreePath();\r\n    Element currentElement = docTrees.getElement(path);\r\n\r\n    Symbol resolvedSymbol = resolveReference(currentElement, signature);\r\n    if (resolvedSymbol != null) {\r\n        String fqName = ((TypeElement) resolvedSymbol).getQualifiedName().toString();\r\n        System.out.println(\""Resolved: \"" + signature + \"" â \"" + fqName);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nprivate Symbol resolveReference(Element context, String signature) {\r\n    if (!(context instanceof Symbol)) return null;\r\n    Symbol sym = (Symbol) context;\r\n    JavacElements javacElements = (JavacElements) elementUtils;\r\n    return javacElements.resolveDocReference(sym, signature);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            \""Alice\"", \""Adam\"", \""Alfred\"", \""Amon\"", \""Alfredo\"", \""Al\"", \""Albert\""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            \""Bob\"", \""Conner\"", \""Robin\"", \""Fred\"", \""Freddy\"", \""Edward\"", \""Fredward\"", \""Mariam\""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (input.length() == 2) {\r\n                if (nameBinding != null) {\r\n                    nameBinding.dispose();\r\n                    nameBinding = null;\r\n                }\r\n\r\n                if (input.startsWith(\""A\"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(\""You selected \"" + val.getCompletion() + \"" from list 1.\""));\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(\""You selected \"" + val.getCompletion() + \"" from list 2.\""));\r\n                }\r\n            } else if (input.length() < 2) {\r\n                if (nameBinding != null) {\r\n                    nameBinding.dispose();\r\n                    nameBinding = null;\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Autocomplete Example\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"private void exportXls() {\r\n    try (\r\n        OutputStream os = new FileOutputStream(\""test.xls\"");\r\n        Workbook wb = new HSSFWorkbook()\r\n    ) {\r\n        Sheet sh = wb.createSheet(\""test\"");\r\n        Row r = sh.createRow(0);\r\n\r\n        CellStyle cs = wb.createCellStyle();\r\n        cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n        for (int i = 0; i < 50; i++) {\r\n            Cell c = r.createCell(i);\r\n            c.setCellValue(i + 1);\r\n            c.setCellStyle(cs);\r\n        }\r\n\r\n        wb.write(os);\r\n        os.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"Map<String, Set<Long>> myMap = new HashMap<>();\r\nmyMap.put(\""a\"", Set.of(1L, 2L, 3L));\r\nmyMap.put(\""b\"", Set.of(4L, 5L));\r\nmyMap.put(\""c\"", Set.of(1L));\r\nmyMap.put(\""d\"", Set.of(2L, 3L));\r\nmyMap.put(\""e\"", Set.of(5L));\r\nmyMap.put(\""f\"", Set.of(6L));\r\n\r\nList<String[]> results = myMap.entrySet().stream()\r\n    .flatMap(e1 -> myMap.entrySet().stream()\r\n        .filter(e2 -> !e1.getKey().equals(e2.getKey()))\r\n        .filter(e2 -> e1.getValue().containsAll(e2.getValue()))\r\n        .map(e2 -> new String[]{e1.getKey(), e2.getKey()}))\r\n    .distinct()\r\n    .toList();\r\n\r\nresults.forEach(pair -> System.out.println(pair[0] + \"" and \"" + pair[1]));\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public class KSumSolver {\r\n\r\n    public List<Integer> findKSum(int[] nums, int target, int limit) {\r\n        List<Integer> result = new ArrayList<>();\r\n        Arrays.sort(nums); // optional, helps pruning if you want to be fancy\r\n        if (backtrack(nums, target, limit, 0, result)) {\r\n            return result;\r\n        }\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    private boolean backtrack(int[] nums, int target, int limit, int start, List<Integer> path) {\r\n        if (path.size() == limit) {\r\n            return target == 0;\r\n        }\r\n        for (int i = start; i < nums.length; i++) {\r\n            if (nums[i] > target && nums[i] > 0) continue;\r\n            path.add(nums[i]);\r\n            if (backtrack(nums, target - nums[i], limit, i + 1, path)) return true;\r\n            path.remove(path.size() - 1);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        KSumSolver solver = new KSumSolver();\r\n        int[] nums = {2, 7, 11, 15};\r\n        int target = 20;\r\n        int limit = 3;\r\n        System.out.println(solver.findKSum(nums, target, limit)); // Output: [2, 7, 11]\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import org.web3j.crypto.Sign;\r\nimport org.web3j.crypto.Hash;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\n\r\npublic class SignatureVerifier {\r\n\r\n    public static boolean verifySignature(String message, String signature, String walletAddress) {\r\n        String prefix = \""\\u0019Ethereum Signed Message:\\n\"" + message.length();\r\n        String prefixedMessage = prefix + message;\r\n        byte[] msgHash = Hash.sha3(prefixedMessage.getBytes());\r\n\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) {\r\n            throw new IllegalArgumentException(\""Invalid signature length\"");\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData sigData = new Sign.SignatureData(\r\n            v,\r\n            Arrays.copyOfRange(signatureBytes, 0, 32),\r\n            Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger publicKeyRecovered = null;\r\n        for (int i = 0; i < 4; i++) {\r\n            try {\r\n                publicKeyRecovered = Sign.signedMessageToKey(msgHash, new Sign.SignatureData((byte) (27 + i), sigData.getR(), sigData.getS()));\r\n                String addressRecovered = \""0x\"" + Keys.getAddress(publicKeyRecovered);\r\n                if (addressRecovered.equalsIgnoreCase(walletAddress)) {\r\n                    return true;\r\n                }\r\n            } catch (Exception e) {\r\n                // ignore and try next\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import java.util.function.Function;\r\nimport java.util.OptionalDouble;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum AggregationType {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVERAGE(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, OptionalDouble> operation;\r\n\r\n    AggregationType(Function<DoubleStream, OptionalDouble> operation) {\r\n        this.operation = operation;\r\n    }\r\n\r\n    public OptionalDouble apply(DoubleStream stream) {\r\n        return operation.apply(stream);\r\n    }\r\n}\r\npublic Float someFunction(AggregationType e) {\r\n    return (float) e.apply(provides.stream()\r\n            .mapToDouble(this::someFunc))\r\n        .orElse(-1);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import org.springframework.http.MediaType;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\n\r\nimport java.io.IOException;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n@RestController\r\npublic class TestController {\r\n\r\n    private final ExecutorService executor = Executors.newSingleThreadExecutor();\r\n    private SseEmitter emitter;\r\n\r\n    @GetMapping(\""/test-status-stream\"")\r\n    public SseEmitter streamTestStatus() {\r\n        emitter = new SseEmitter();\r\n        return emitter;\r\n    }\r\n\r\n    @PostMapping(\""/start-tests\"")\r\n    public void startTests() {\r\n        executor.execute(() -> {\r\n            for (int i = 1; i <= 30; i++) {\r\n                try {\r\n                    // simulate test execution\r\n                    Thread.sleep(5000); // replace with real test logic\r\n                    String message = \""Test \"" + i + \"" completed successfully\"";\r\n                    emitter.send(SseEmitter.event()\r\n                            .name(\""test-status\"")\r\n                            .data(message, MediaType.TEXT_PLAIN));\r\n                } catch (Exception e) {\r\n                    try {\r\n                        emitter.send(SseEmitter.event()\r\n                                .name(\""test-status\"")\r\n                                .data(\""Test \"" + i + \"" failed: \"" + e.getMessage()));\r\n                    } catch (IOException ioException) {\r\n                        emitter.completeWithError(ioException);\r\n                    }\r\n                }\r\n            }\r\n            emitter.complete();\r\n        });\r\n    }\r\n}\r\nconst eventSource = new EventSource(\""/test-status-stream\"");\r\n\r\neventSource.onmessage = function (event) {\r\n    console.log(\""Message: \"", event.data);\r\n    // append status to UI\r\n};\r\n\r\neventSource.addEventListener(\""test-status\"", function(event) {\r\n    console.log(\""Test update:\"", event.data);\r\n    // update test status in UI\r\n});\r\n\r\nfetch(\""/start-tests\"", { method: \""POST\"" });\r\n"
0,1,misclassified_in_Test_7.csv.csv,"BaseEventHandler<BaseEvent<C, P>, C, P>\r\nBaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload>\r\npublic abstract class BaseEvent<\r\n    E extends BaseEvent<E, C, P>,\r\n    C extends BaseCommand<P>,\r\n    P extends BasePayload\r\n> {\r\n    protected abstract BaseEventHandler<E, C, P> getHandler();\r\n}\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"java.base\r\njava.lang\r\njava.io\r\njava.util\r\njava.net\r\njava.nio\r\njava.sql\r\njava.logging\r\njdk.crypto.ec\r\njdk.xml.dom\r\njava.management\r\nModuleLayer.boot().modules().stream()\r\n    .filter(m -> {\r\n        try {\r\n            Class<?> clazz = Class.forName(m.getName() + \"".package-info\"", false, ClassLoader.getPlatformClassLoader());\r\n            return clazz.getClassLoader() == ClassLoader.getPlatformClassLoader();\r\n        } catch (ClassNotFoundException e) {\r\n            return false;\r\n        }\r\n    })\r\n    .map(Module::getName)\r\n    .sorted()\r\n    .forEach(System.out::println);\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Map<Long, String> monthMap = new HashMap<>();\r\n        monthMap.put(1L, \""ENE\"");\r\n        monthMap.put(2L, \""FEB\"");\r\n        monthMap.put(3L, \""MAR\"");\r\n        monthMap.put(4L, \""ABR\"");\r\n        monthMap.put(5L, \""MAY\"");\r\n        monthMap.put(6L, \""JUN\"");\r\n        monthMap.put(7L, \""JUL\"");\r\n        monthMap.put(8L, \""AGO\"");\r\n        monthMap.put(9L, \""SEP\"");\r\n        monthMap.put(10L, \""OCT\"");\r\n        monthMap.put(11L, \""NOV\"");\r\n        monthMap.put(12L, \""DIC\"");\r\n\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n            .parseCaseInsensitive()\r\n            .appendValue(ChronoField.DAY_OF_MONTH, 2)\r\n            .appendText(ChronoField.MONTH_OF_YEAR, monthMap)\r\n            .appendValue(ChronoField.YEAR, 4)\r\n            .toFormatter(Locale.forLanguageTag(\""es-ES\""));\r\n\r\n        LocalDate date = LocalDate.parse(\""24ENE1982\"", formatter);\r\n        System.out.println(\""Hello world! \"" + date);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import org.apache.poi.ss.formula.FormulaShifter;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.formula.FormulaRenderer;\r\nimport org.apache.poi.ss.formula.FormulaParsingWorkbook;\r\nimport org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\npublic class FormulaShiftExample {\r\n\r\n    public static String shiftFormula(String formula, String originalAddress, String destinationAddress) {\r\n        Workbook wb = new XSSFWorkbook();  // create dummy workbook\r\n        FormulaParsingWorkbook fpWorkbook = org.apache.poi.ss.formula.WorkbookEvaluator.create(wb);\r\n\r\n        CellReference srcRef = new CellReference(originalAddress);\r\n        CellReference dstRef = new CellReference(destinationAddress);\r\n        int rowShift = dstRef.getRow() - srcRef.getRow();\r\n        int colShift = dstRef.getCol() - srcRef.getCol();\r\n\r\n        Ptg[] ptgs = FormulaParser.parse(formula, fpWorkbook, FormulaType.CELL, wb.getSheetIndex(\""Sheet0\""));\r\n        FormulaShifter shifter = FormulaShifter.createForCellShift(\r\n                wb.getSheetIndex(\""Sheet0\""),\r\n                srcRef.getRow(), srcRef.getRow(),\r\n                rowShift, colShift,\r\n                wb.getSheetName(wb.getSheetIndex(\""Sheet0\"")),\r\n                wb.getSpreadsheetVersion());\r\n\r\n        if (shifter.adjustFormula(ptgs, wb.getSheetIndex(\""Sheet0\""))) {\r\n            return FormulaRenderer.toFormulaString(fpWorkbook, ptgs);\r\n        }\r\n\r\n        return formula;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String f1 = \""=(A2+$B$2)\"";\r\n        String result = shiftFormula(f1, \""C2\"", \""D10\"");\r\n        System.out.println(\""Shifted Formula: \"" + result);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import java.io.RandomAccessFile;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0); // only needed the first time to start fresh\r\n            file.write(\""123456789\"".getBytes());\r\n        }\r\n\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.seek(0); // start at the beginning\r\n            file.write(\""hello\"".getBytes());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"authorDirectorColumn.setCellValueFactory(cellData -> {\r\n    LibraryItem item = cellData.getValue();\r\n    if (item instanceof Book) {\r\n        return new ReadOnlyStringWrapper(((Book) item).getAuthor());\r\n    } else if (item instanceof Movie) {\r\n        return new ReadOnlyStringWrapper(((Movie) item).getDirector());\r\n    } else {\r\n        return new ReadOnlyStringWrapper(\""N/A\"");\r\n    }\r\n});\r\npublic String getAuthor() {\r\n    return author;\r\n}\r\npublic String getDirector() {\r\n    return director;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@ExtendWith(MockitoExtension.class)\r\nclass PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    @Test\r\n    void testUpdate_shouldMapRequestAndReturnUpdatedDTO() {\r\n        UUID uuid = UUID.randomUUID();\r\n\r\n        Price existing = new Price();\r\n        existing.setUuid(uuid);\r\n        existing.setPriceAmount(BigDecimal.valueOf(10));\r\n\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(BigDecimal.valueOf(25));\r\n\r\n        Price updated = new Price();\r\n        updated.setUuid(uuid);\r\n        updated.setPriceAmount(BigDecimal.valueOf(25));\r\n\r\n        when(priceRepository.findByUuid(uuid)).thenReturn(Optional.of(existing));\r\n        when(priceRepository.saveAndFlush(existing)).thenReturn(updated);\r\n\r\n        PriceDTO result = priceService.update(uuid, request);\r\n\r\n        assertEquals(BigDecimal.valueOf(25), result.getPriceAmount());\r\n        verify(priceRepository).findByUuid(uuid);\r\n        verify(priceRepository).saveAndFlush(existing);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Configuration\r\n@EnableMongoRepositories(\r\n    basePackages = \""com.repository.mongo\"",\r\n    repositoryImplementationPostfix = \""Impl\"",\r\n    mongoTemplateRef = \""mongoTemplate\""\r\n)\r\npublic class MongoRepoConfig {\r\n    @Bean\r\n    public MongoTemplate mongoTemplate(MongoDbFactory factory, MongoConverter converter) {\r\n        return new MongoTemplate(factory, converter);\r\n    }\r\n}\r\n@Configuration\r\n@EnableRedisRepositories(\r\n    basePackages = \""com.repository.redis\"",\r\n    redisTemplateRef = \""redisTemplate\""\r\n)\r\npublic class RedisRepoConfig {\r\n    @Bean\r\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\r\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(connectionFactory);\r\n        return template;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import com.sun.jna.platform.win32.User32;\r\nimport com.sun.jna.platform.win32.WinDef;\r\n\r\nWinDef.HWND hwnd = User32.INSTANCE.FindWindow(null, \""JavaFX Stage with Button\"");\r\nlong rawHandle = Pointer.nativeValue(hwnd.getPointer());\r\nSetProgressState(..., TBPF_NORMAL);\r\n"
0,1,misclassified_in_Test_7.csv.csv,"AssetManager assetManager = requireContext().getAssets();\r\nFile targetDir = new File(requireContext().getApplicationInfo().dataDir + \""/databases\"");\r\nif (!targetDir.exists()) {\r\n    targetDir.mkdirs();\r\n}\r\n\r\ntry {\r\n    String[] files = assetManager.list(\""database/test\"");\r\n    if (files != null) {\r\n        for (String filename : files) {\r\n            File outFile = new File(targetDir, filename);\r\n            if (!outFile.exists()) {\r\n                try (InputStream in = assetManager.open(\""database/test/\"" + filename);\r\n                     OutputStream out = new FileOutputStream(outFile)) {\r\n                    byte[] buffer = new byte[1024];\r\n                    int read;\r\n                    while ((read = in.read(buffer)) != -1) {\r\n                        out.write(buffer, 0, read);\r\n                    }\r\n                    out.flush();\r\n                }\r\n            }\r\n        }\r\n    }\r\n} catch (IOException e) {\r\n    Log.e(\""AssetCopy\"", \""Failed to copy asset file\"", e);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public class Main {\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10_000; i++) {\r\n            ArrayList<String> dummy = new ArrayList<>();\r\n            dummy.add(\""warmup\"");\r\n            dummy.add(\""phase\"");\r\n        }\r\n\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(\""a\"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(\""b\"");\r\n        long t3 = System.nanoTime();\r\n\r\n        System.out.println((t2 - t1));\r\n        System.out.println((t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Override\r\nprotected void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    BufferedImage img = ApplicationImages.getImage();\r\n    if (img == null) return;\r\n\r\n    int compWidth = getWidth();\r\n    int compHeight = getHeight();\r\n\r\n    float imgAspect = 1280f / 859f;\r\n    float compAspect = (float) compWidth / compHeight;\r\n\r\n    int drawWidth, drawHeight, x, y;\r\n\r\n    if (compAspect > imgAspect) {\r\n        drawHeight = compHeight;\r\n        drawWidth = (int) (compHeight * imgAspect);\r\n        x = (compWidth - drawWidth) / 2;\r\n        y = 0;\r\n    } else {\r\n        drawWidth = compWidth;\r\n        drawHeight = (int) (compWidth / imgAspect);\r\n        x = 0;\r\n        y = (compHeight - drawHeight) / 2;\r\n    }\r\n\r\n    g.drawImage(img.getScaledInstance(drawWidth, drawHeight, Image.SCALE_SMOOTH), x, y, this);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"interface ITask<T, R extends TaskResult<T>> {\r\n    R make();\r\n}\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(\""alphaTask\"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\npublic static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n    return tasks.stream()\r\n                .map(ITask::make)\r\n                .collect(Collectors.toList());\r\n}\r\nList<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\nList<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n"
0,1,misclassified_in_Test_7.csv.csv,"try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(\""content-type\"", \""application/json\"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(\""[\"");\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        try {\r\n            respWriter.write(jsonSerialize(data));\r\n            if (iterator.hasNext()) {\r\n                respWriter.write(\"",\"");\r\n            }\r\n        } catch (JsonProcessingException e) {\r\n            log(e);\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n\r\n    respWriter.write(\""]\"");\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\n\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        try (\r\n            InputStreamReader isr = new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath)));\r\n            CSVReader reader = new CSVReaderBuilder(isr).withSeparator('\\t').build()\r\n        ) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + \"" \"" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(\""/path-to-tsv-file.tsv\"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public static boolean search(int[][] mat, int num) {\r\n    int n = mat.length;\r\n    int mid = n / 2;\r\n\r\n    if (binarySearch(mat, 0, 0, mid - 1, mid - 1, num)) return true;\r\n    if (binarySearch(mat, 0, mid, mid - 1, n - 1, num)) return true;\r\n    if (binarySearch(mat, mid, mid, n - 1, n - 1, num)) return true;\r\n    if (binarySearch(mat, mid, 0, n - 1, mid - 1, num)) return true;\r\n\r\n    return false;\r\n}\r\n\r\nprivate static boolean binarySearch(int[][] mat, int r1, int c1, int r2, int c2, int target) {\r\n    while (r1 <= r2 && c1 <= c2) {\r\n        int low = 0, high = (r2 - r1 + 1) * (c2 - c1 + 1) - 1;\r\n\r\n        while (low <= high) {\r\n            int mid = (low + high) / 2;\r\n            int row = r1 + mid / (c2 - c1 + 1);\r\n            int col = c1 + mid % (c2 - c1 + 1);\r\n            int val = mat[row][col];\r\n\r\n            if (val == target) return true;\r\n            if (val < target) low = mid + 1;\r\n            else high = mid - 1;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return false;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@PostMapping(path = \""/my_endpoint\"")\r\npublic String run() throws Exception {\r\n    producerTemplate.sendBody(\""direct:\"" + JOB_NAME, null);\r\n    return \""ok\"";\r\n}\r\npublic String xyz() {\r\n    // do job stuff\r\n    return \""done\"";\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport java.io.FileReader;\r\nimport java.security.KeyPair;\r\nimport java.security.PrivateKey;\r\n\r\npublic class LoadEncryptedPrivateKey {\r\n\r\n    public static PrivateKey loadPrivateKey(String pemFilePath, char[] password) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(pemFilePath))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\""BC\"");\r\n\r\n            KeyPair keyPair;\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMEncryptedKeyPair encryptedKeyPair = (PEMEncryptedKeyPair) object;\r\n\r\n                // decrypt the key pair using the password\r\n                keyPair = encryptedKeyPair.decryptKeyPair(\r\n                    new JcePEMDecryptorProviderBuilder().build(password)\r\n                );\r\n            } else if (object instanceof PEMKeyPair) {\r\n                // unencrypted key pair\r\n                keyPair = (PEMKeyPair) object;\r\n            } else {\r\n                throw new IllegalArgumentException(\""Not a valid PEM key pair\"");\r\n            }\r\n\r\n            return converter.getPrivateKey(keyPair.getPrivateKeyInfo());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        // Make sure BouncyCastle provider is added:\r\n        java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n\r\n        String pathToEncryptedKey = \""path/to/your/encrypted_rsa_private_key.pem\"";\r\n        char[] password = \""your_passphrase\"".toCharArray();\r\n\r\n        PrivateKey privateKey = loadPrivateKey(pathToEncryptedKey, password);\r\n\r\n        System.out.println(\""Loaded private key algorithm: \"" + privateKey.getAlgorithm());\r\n\r\n        // Now you can use this PrivateKey for your crypto ops.\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Override\r\npublic void init(ServletConfig config) throws ServletException {\r\n    super.init(config);\r\n    try {\r\n        connectToBackendServer();\r\n    } catch (Exception e) {\r\n        throw new UnavailableException(\""Cannot connect to Backend Server\"", -1); // -1 means indefinite unavailability\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Test\r\nvoid testItemAlreadyCreatedException() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(any(String.class))).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(\""There is an item created with this name\"", ex.getMessage());\r\n\r\n    verify(itemRepository).findByItemNameIgnoreCase(any(String.class));\r\n}\r\n@BeforeEach\r\nvoid setup() {\r\n    MockitoAnnotations.openMocks(this);\r\n    itemService = new ItemService(itemRepository, categorieRepository, itemDTOMapper, imageService);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class FlatDmnTestCaseResult {\r\n    private Map<String, Object> testInput;\r\n    private Map<String, Object> expectedOutput;\r\n    private Map<String, Object> singleTestOutput;\r\n    private String errorMessage;\r\n}\r\npublic String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    List<FlatDmnTestCaseResult> flatResults = new ArrayList<>();\r\n\r\n    for (DmnTestCaseResult r : results) {\r\n        if (r.getTestOutput() != null && !r.getTestOutput().isEmpty()) {\r\n            for (Map<String, Object> output : r.getTestOutput()) {\r\n                flatResults.add(new FlatDmnTestCaseResult(r.getTestInput(), r.getExpectedOutput(), output, r.getErrorMessage()));\r\n            }\r\n        } else {\r\n            flatResults.add(new FlatDmnTestCaseResult(r.getTestInput(), r.getExpectedOutput(), null, r.getErrorMessage()));\r\n        }\r\n    }\r\n\r\n    try(StringWriter sw = new StringWriter();\r\n        CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, CSVWriter.NO_QUOTE_CHARACTER,\r\n                                         CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        StatefulBeanToCsv<FlatDmnTestCaseResult> beanToCsv = new StatefulBeanToCsvBuilder<FlatDmnTestCaseResult>(writer)\r\n                .withApplyQuotesToAll(false)\r\n                .build();\r\n\r\n        beanToCsv.write(flatResults);\r\n        return sw.toString();\r\n    } catch(Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"// Replace your nodes List with:\r\nprivate Map<String, Integer> nodeIndices = new HashMap<>();\r\n\r\n// When adding nodes, assign their index:\r\nprivate void addNodeIfAbsent(String node) {\r\n    if (!nodeIndices.containsKey(node)) {\r\n        nodeIndices.put(node, nodeIndices.size());\r\n    }\r\n}\r\n\r\n// Update your addEdge method:\r\nprivate void addEdge(String from, String to, int capacity) {\r\n    addNodeIfAbsent(from);\r\n    addNodeIfAbsent(to);\r\n    network.computeIfAbsent(from, k -> new HashMap<>()).put(to, capacity);\r\n    network.computeIfAbsent(to, k -> new HashMap<>()).put(from, 0);\r\n}\r\n\r\n// Then, in bfs and dfs, replace every nodes.indexOf(x) with nodeIndices.get(x):\r\n// Example in bfs:\r\nlevel = new int[nodeIndices.size()];\r\nArrays.fill(level, -1);\r\nlevel[nodeIndices.get(source)] = 0;\r\n\r\n...\r\n\r\nint uIndex = nodeIndices.get(u);\r\nint vIndex = nodeIndices.get(v);\r\n\r\nif (capacity > 0 && level[vIndex] == -1) {\r\n    level[vIndex] = level[uIndex] + 1;\r\n    queue.offer(v);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    public static Ringtone r;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            VibrationEffect vibrationEffect = VibrationEffect.createOneShot(1000, VibrationEffect.DEFAULT_AMPLITUDE);\r\n            Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n            if (vibrator != null) vibrator.vibrate(vibrationEffect);\r\n        } else {\r\n            Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n            if (vibrator != null) vibrator.vibrate(1000);\r\n        }\r\n\r\n        String event = intent.getStringExtra(\""title\"");\r\n        String comment = intent.getStringExtra(\""comment\"");\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        String text = \""Reminder for the Event: \\n\"" + event + \""\\nComments: \\n\"" + comment;\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \""myandroid\"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat.from(context).notify(123, builder.build());\r\n\r\n        Uri notificationSound = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        r = RingtoneManager.getRingtone(context, notificationSound);\r\n        if (r != null && !r.isPlaying()) r.play();\r\n    }\r\n}\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n    if (AlarmReceiver.r != null && AlarmReceiver.r.isPlaying()) {\r\n        AlarmReceiver.r.stop();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"int[] array = new int[10];\r\narray[0] = 6;\r\narray[1] = 2;\r\narray[2] = 8;\r\narray[3] = 1;\r\narray[4] = 3;\r\narray[5] = 0;\r\narray[6] = 9;\r\narray[7] = 7;\r\n\r\nSystem.out.print(\""Search for? \"");\r\nint searching = in.nextInt();\r\nboolean found = false;\r\n\r\nfor(int i = 0; i < array.length; i++) {\r\n    if(searching == array[i]) {\r\n        System.out.println(searching + \"" is at index \"" + i + \"".\"");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\n\r\nif (!found) {\r\n    System.out.println(searching + \"" was not found.\"");\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"lineChart.getData().addAll(series1, series2, series3);\r\n\r\nPlatform.runLater(() -> {\r\n    setSeriesColor(series1, \""red\"");\r\n    setSeriesColor(series2, \""blue\"");\r\n    setSeriesColor(series3, \""green\"");\r\n});\r\n\r\nprivate void setSeriesColor(XYChart.Series<Number, Number> series, String color) {\r\n    Node line = series.getNode().lookup(\"".chart-series-line\"");\r\n    if (line != null) {\r\n        line.setStyle(\""-fx-stroke: \"" + color + \"";\"");\r\n    }\r\n    for (XYChart.Data<Number, Number> data : series.getData()) {\r\n        Node symbol = data.getNode().lookup(\"".chart-line-symbol\"");\r\n        if (symbol != null) {\r\n            symbol.setStyle(\""-fx-background-color: \"" + color + \"", white;\"");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"private Group createOutlinedMesh(MeshView original, Color outlineColor, double outlineWidth) {\r\n    MeshView outline = new MeshView(original.getMesh());\r\n    outline.setMaterial(new PhongMaterial(outlineColor));\r\n    outline.setCullFace(CullFace.FRONT);\r\n    outline.setDrawMode(DrawMode.FILL);\r\n    outline.setScaleX(original.getScaleX() + outlineWidth);\r\n    outline.setScaleY(original.getScaleY() + outlineWidth);\r\n    outline.setScaleZ(original.getScaleZ() + outlineWidth);\r\n\r\n    Group group = new Group(outline, original);\r\n    return group;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public String generateJwtToken(Authentication authentication, String tenantId) {\r\n    UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(\""tenant\"", tenantId)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n}\r\nString jwt = jwtUtils.generateJwtToken(authentication, subdomain);\r\npublic String getTenantFromJwtToken(String token) {\r\n    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().get(\""tenant\"", String.class);\r\n}\r\nString tenantFromToken = jwtUtils.getTenantFromJwtToken(jwt);\r\nif (!tenantFromToken.equals(subdomain)) {\r\n    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \""Tenant mismatch\"");\r\n    return;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public String inputTake() {\r\n    Scanner scan = new Scanner(system.in);\r\n    String guess;\r\n\r\n    while (true) {\r\n        System.out.println(\""choose a word, pick carefully: \"");\r\n        guess = scan.next();\r\n\r\n        if (checkInput(guess)) {\r\n            return guess;\r\n        } else {\r\n            System.out.println(\""make sure your guess consists of 5 english letters, try again.\"");\r\n        }\r\n    }\r\n}\r\n\r\npublic boolean checkInput(String input) {\r\n    if (input.length() != 5) return false;\r\n    if (!input.matches(\""[a-zA-Z]+\"")) return false;\r\n    return true;\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Component\r\npublic class LanguageFactory {\r\n\r\n    private final Map<String, LanguageService> languageServiceMap;\r\n\r\n    public LanguageFactory(List<LanguageService> services) {\r\n        this.languageServiceMap = services.stream()\r\n            .collect(Collectors.toMap(s -> s.getClass().getAnnotation(Service.class).value(), Function.identity()));\r\n    }\r\n\r\n    public LanguageService getLanguageService(String qualifier) {\r\n        return languageServiceMap.getOrDefault(qualifier, languageServiceMap.get(\""english\""));\r\n    }\r\n}\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(LanguageFactory factory, @Value(\""${configuration}\"") String configuration) {\r\n        this.languageService = factory.getLanguageService(configuration);\r\n    }\r\n\r\n    @GetMapping(\""/test\"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Mapper(componentModel = \""spring\"")\r\npublic abstract class YourMapper {\r\n\r\n    @Mapping(target = \""agentName\"", source = \""agentName\"")\r\n    @Mapping(target = \""agentIdentityType\"", source = \""agentIdentityType\"")\r\n    @Mapping(target = \""agentIdentityNo\"", source = \""agentIdentityNo\"")\r\n    @Mapping(target = \""agentIdentityExpireAt\"", source = \""agentIdentityExpireAt\"")\r\n    public abstract AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO dto);\r\n\r\n    @BeforeMapping\r\n    protected AgentInfo skipIfAllFieldsNull(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) return null;\r\n\r\n        if (dto.getAgentName() == null &&\r\n            dto.getAgentIdentityType() == null &&\r\n            dto.getAgentIdentityNo() == null &&\r\n            dto.getAgentIdentityExpireAt() == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(); // return dummy to continue mapping\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"public static void main(String[] args) throws IOException {\r\n\r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(\""user.home\"") + \""\\\\Desktop\\\\testData.txt\""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n    String line;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split(\"",\""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<>();\r\n            String[] values = line.split(\"",\"");\r\n            for (int i = 0; i < values.length; i++) {\r\n                myRecord.put(headers.get(i), values[i]);\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n\r\n    System.out.println(\""My Table:\"" + myTable);\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n\r\n        return chain.filter(exchange)\r\n                .doOnSuccess(aVoid -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-success\"", Long.toString(delta));\r\n                    }\r\n                })\r\n                .doOnError(throwable -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-error\"", Long.toString(delta));\r\n                    }\r\n                })\r\n                .doFinally(signalType -> {\r\n                    if (!exchange.getResponse().isCommitted()) {\r\n                        long delta = System.nanoTime() - startTime;\r\n                        exchange.getResponse()\r\n                                .getHeaders()\r\n                                .add(\""server-timing-finally\"", Long.toString(delta));\r\n                    }\r\n                });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import ctypes\r\n\r\ndef ref_count(x):\r\n    return ctypes.c_long.from_address(id(x))\r\n\r\ndef mutate_int(val, new_val):\r\n    int_type = ctypes.c_long\r\n    addr = id(val)\r\n    value_ptr = ctypes.cast(addr + ctypes.sizeof(int_type) * 2, ctypes.POINTER(int_type))\r\n    value_ptr.contents.value = new_val\r\n\r\nmutate_int(1, 2)\r\n\r\nprint(1 == 2)  # True\r\nprint(1 + 1)   # 4\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import cv2 as cv\r\nimport numpy as np\r\n\r\nimg = cv.imread(\""boston_cooking_a.jpg\"", cv.IMREAD_GRAYSCALE)\r\nthresh = cv.adaptiveThreshold(img, 255, cv.ADAPTIVE_THRESH_MEAN_C,\r\n                              cv.THRESH_BINARY_INV, 31, 15)\r\n\r\ncontours, _ = cv.findContours(thresh, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)\r\n\r\npoints_by_line = {}\r\n\r\nfor cnt in contours:\r\n    x, y, w, h = cv.boundingRect(cnt)\r\n    if h > 5 and w > 5:\r\n        cy = y + h  # bottom of the character\r\n        line_key = cy // 20  # crude line grouping by vertical position\r\n        points_by_line.setdefault(line_key, []).append((x + w // 2, cy))\r\n\r\nbaseline_img = cv.cvtColor(img, cv.COLOR_GRAY2BGR)\r\n\r\nfor line in points_by_line.values():\r\n    if len(line) < 5:\r\n        continue\r\n    pts = np.array(line)\r\n    [vx, vy, x0, y0] = cv.fitLine(pts, cv.DIST_L2, 0, 0.01, 0.01)\r\n    left_x = 0\r\n    right_x = img.shape[1]\r\n    left_y = int(((left_x - x0) * vy / vx) + y0)\r\n    right_y = int(((right_x - x0) * vy / vx) + y0)\r\n    cv.line(baseline_img, (left_x, left_y), (right_x, right_y), (0, 0, 255), 2)\r\n\r\ncv.imwrite(\""baseline_output.jpg\"", baseline_img)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from pydantic import BaseModel, field_validator\r\nfrom typing import Tuple\r\n\r\nclass Window(BaseModel):\r\n    size: Tuple[int, int]\r\n\r\n    @field_validator('size', mode='before')\r\n    @classmethod\r\n    def parse_size(cls, v):\r\n        if isinstance(v, str):\r\n            try:\r\n                x, y = v.split('x')\r\n                return int(x), int(y)\r\n            except Exception:\r\n                raise ValueError(\""Size must be in format 'WIDTHxHEIGHT'\"")\r\n        return v\r\n\r\nfields = {'size': '1920x1080'}\r\nwindow = Window(**fields)\r\nprint(window)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"def deduplicate(logs):\r\n    seen = set()\r\n    for log in logs:\r\n        key = tuple(sorted(log.items()))\r\n        if key in seen:\r\n            continue\r\n        seen.add(key)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'fruit': 'orange', 'id': '1234', 'error': None}\r\n]\r\n\r\nprint(list(deduplicate(logs)))\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from fastapi import FastAPI, Request, Response\r\nimport time\r\nfrom starlette.responses import StreamingResponse\r\nimport asyncio\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware(\""http\"")\r\nasync def capture_response_body(request: Request, call_next):\r\n    start_time = time.time()\r\n\r\n    response = await call_next(request)\r\n\r\n    # read the body from the response stream\r\n    body = b\""\""\r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n\r\n    process_time = time.time() - start_time\r\n\r\n    # log or modify `body` here if needed\r\n    print(f\""Response body: {body.decode()}\"")\r\n\r\n    # build a new response so we don't break streaming\r\n    new_response = Response(\r\n        content=body,\r\n        status_code=response.status_code,\r\n        headers=dict(response.headers),\r\n        media_type=response.media_type\r\n    )\r\n    new_response.headers[\""X-Process-Time\""] = str(process_time)\r\n    return new_response\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import numpy as np\r\n\r\nclass NonRandomGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.iterator = iter(self.sequence)\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.iterator)\r\n        except StopIteration:\r\n            raise RuntimeError(\""Non-random sequence exhausted\"")\r\n\r\nrng = lambda : np.random.randint(2, 20) // 2\r\nnrng = NonRandomGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import asyncio\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(\""Enter to the Context Manager...\"")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(\""Exit from the Context Manager...\"")\r\n\r\n        try:\r\n            async with asyncio.timeout(5):  # optional timeout to avoid hangs\r\n                await asyncio.sleep(1)\r\n                print(\""This line is executed\"")\r\n                await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(\""Cancelled during __aexit__, suppressing temporarily\"")\r\n            # optional: re-raise or log\r\n            return True  # suppresses CancelledError (careful with this)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"\""python.testing.pytestArgs\"": [\r\n    \""tests\""\r\n],\r\n\""python.testing.unittestEnabled\"": false,\r\n\""python.testing.pytestEnabled\"": true,\r\n\""python.testing.cwd\"": \""${workspaceFolder}\"",\r\n\""python.testing.debugPort\"": 5678,\r\n\""python.testing.autoTestDiscoverOnSaveEnabled\"": true,\r\n\""python.testing.pytestPath\"": \""pytest\"",\r\n\""python.testing.pytestEnabled\"": true,\r\n\""python.testing.pytestDebuggingOptions\"": {\r\n    \""console\"": \""integratedTerminal\"",\r\n    \""redirectOutput\"": true\r\n}\r\n{\r\n    \""name\"": \""Debug Pytest\"",\r\n    \""type\"": \""python\"",\r\n    \""request\"": \""launch\"",\r\n    \""module\"": \""pytest\"",\r\n    \""args\"": [\r\n        \""tests/test_something.py::test_failing_case\""\r\n    ],\r\n    \""console\"": \""integratedTerminal\"",\r\n    \""justMyCode\"": false\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from fastapi import FastAPI\r\nfrom user import User\r\nfrom item import Item\r\n\r\nUser.update_forward_refs(Item=Item)\r\n\r\napp = FastAPI()\r\n\r\n@app.get(\""/\"", response_model=User)\r\ndef main():\r\n    return {\r\n        \""id\"": 1,\r\n        \""age\"": 30,\r\n        \""bought_items\"": [\r\n            {\""id\"": 101, \""price\"": 9.99, \""name\"": \""banana\""}\r\n        ]\r\n    }\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from dataclasses import dataclass\r\nfrom typing import Protocol, Callable, Dict, runtime_checkable\r\n\r\n@runtime_checkable\r\nclass HasSaveAndFields(Protocol):\r\n    def save(self) -> None: ...\r\n    my_fields_dict: Dict[str, str]\r\n\r\ndef mydecorator(cls):\r\n    def save(self):\r\n        print(f\""saving {self}\"")\r\n    setattr(cls, \""save\"", save)\r\n    setattr(cls, \""my_fields_dict\"", {\""a\"": \""str\""})\r\n    return cls\r\n\r\n@mydecorator\r\n@dataclass\r\nclass A:\r\n    a: str = \""\""\r\n\r\na: HasSaveAndFields = A()\r\na.save()\r\nprint(a.my_fields_dict)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  # x1 + x2 + x3 = 2\r\n    [1, 0, 0, 1],  # x1 + x4 = 1\r\n    [1, 1, 0, 0]   # x1 + x2 = 1\r\n])\r\nb_eq = np.array([2, 1, 1])\r\nn = A_eq.shape[1]\r\n\r\nguaranteed_0 = []\r\nguaranteed_1 = []\r\n\r\nfor i in range(n):\r\n    bounds_0 = [(0, 1)] * n\r\n    bounds_0[i] = (0, 0)\r\n    res0 = linprog(np.zeros(n), A_eq=A_eq, b_eq=b_eq, bounds=bounds_0, method='highs-ipm')\r\n\r\n    bounds_1 = [(0, 1)] * n\r\n    bounds_1[i] = (1, 1)\r\n    res1 = linprog(np.zeros(n), A_eq=A_eq, b_eq=b_eq, bounds=bounds_1, method='highs-ipm')\r\n\r\n    if res0.success and not res1.success:\r\n        guaranteed_0.append(i)\r\n    elif res1.success and not res0.success:\r\n        guaranteed_1.append(i)\r\n\r\nprint(\""Guaranteed 0s:\"", guaranteed_0)\r\nprint(\""Guaranteed 1s:\"", guaranteed_1)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        \""nrs\"": [1, 2, 3, None, 5],\r\n        \""names\"": [\""foo\"", \""ham\"", \""spam\"", \""egg\"", None],\r\n        \""random\"": np.random.rand(5),\r\n        \""groups\"": [\""A\"", \""A\"", \""B\"", \""C\"", \""B\""],\r\n    }\r\n)\r\n\r\nfig = px.bar(x=df[\""names\""].to_list(), y=df[\""random\""].to_list())\r\nfig.show()\r\n"
0,1,misclassified_in_Test_7.csv.csv,"spouse = match name:\r\n    case \""John\"":\r\n        \""Jane\""\r\n    case \""David\"":\r\n        \""Alice\""\r\ndef get_spouse(name):\r\n    match name:\r\n        case \""John\"":\r\n            return \""Jane\""\r\n        case \""David\"":\r\n            return \""Alice\""\r\n        case _:\r\n            return \""Unknown\""\r\n\r\nspouse = get_spouse(name)\r\nspouse = {\""John\"": \""Jane\"", \""David\"": \""Alice\""}.get(name, \""Unknown\"")\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from llama_cpp import Llama\r\n\r\nllm = Llama(\r\n    model_path=\""path/to/model.gguf\"",\r\n    n_ctx=2048,  # context window\r\n    n_threads=4, # adjust for your CPU\r\n)\r\n\r\noutput = llm(\""Q: What's the capital of France?\\nA:\"", max_tokens=32)\r\nprint(output[\""choices\""][0][\""text\""])\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from elasticsearch import Elasticsearch\r\n\r\nes = Elasticsearch(\r\n    hosts=[{\r\n        'host': str(es_host),\r\n        'port': int(es_port),\r\n        'scheme': 'http'\r\n    }],\r\n    http_auth=(str(es_username), str(es_password)),\r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_index)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"{\r\n  \""version\"": \""0.2.0\"",\r\n  \""configurations\"": [\r\n    {\r\n      \""name\"": \""Python: Prompt for data dir\"",\r\n      \""type\"": \""python\"",\r\n      \""request\"": \""launch\"",\r\n      \""program\"": \""${file}\"",\r\n      \""args\"": [\""${input:dataDir}\""],\r\n      \""cwd\"": \""${workspaceFolder}/my_data\""\r\n    }\r\n  ],\r\n  \""inputs\"": [\r\n    {\r\n      \""id\"": \""dataDir\"",\r\n      \""type\"": \""promptString\"",\r\n      \""description\"": \""Enter relative path to data directory\"",\r\n      \""default\"": \""dataset1\""\r\n    }\r\n  ]\r\n}\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import logging\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\nimport logging\r\nfrom langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nprompt = ChatPromptTemplate.from_template(\""tell me a joke about {topic}\"")\r\nmodel = ChatOpenAI(verbose=True)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\nprint(chain.invoke({\""topic\"": \""ice cream\""}))\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from transformers import pipeline, AutoProcessor\r\nfrom PIL import Image\r\n\r\n# This repo lacks config.json, so you can't load via pipeline or AutoModel directly\r\n# Instead, you need to load the raw model weights manually or use another repo that provides a config.\r\n\r\n# Check if you can use the raw weights or a compatible repo:\r\n# e.g. look for a repo with config.json for U2NET or your model variant.\r\n\r\n# Alternatively, try using AutoProcessor for preprocessing (if available)\r\nprocessor = AutoProcessor.from_pretrained(\""Carve/u2net-universal\"", trust_remote_code=True)\r\n\r\n# But loading model weights manually is likely needed:\r\n# from your local checkpoint or via custom code.\r\n\r\n# So, best approach is to find a HF repo for your model that includes config.json or convert the model weights yourself.\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        \""A\"": [\""foo\"", \""ham\"", \""spam\"", \""egg\""],\r\n        \""L\"": [\""A54\"", \""A12\"", \""B84\"", \""C12\""],\r\n        \""G\"": [\""X34\"", \""C84\"", \""G96\"", \""L6\""],\r\n    }\r\n)\r\n\r\ndf = df.with_columns([\r\n    pl.when(pl.col(\""A\"").is_in([\""foo\"", \""spam\""]))\r\n      .then(\""XX\"")\r\n      .otherwise(pl.col(\""L\""))\r\n      .alias(\""L\""),\r\n    pl.when(pl.col(\""A\"").is_in([\""foo\"", \""spam\""]))\r\n      .then(\""XX\"")\r\n      .otherwise(pl.col(\""G\""))\r\n      .alias(\""G\""),\r\n])\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import os\r\nimport time\r\nimport signal\r\n\r\ndef _do_work(data, parent_pid):\r\n    def parent_is_alive(pid):\r\n        try:\r\n            # Sending signal 0 just tests if pid exists\r\n            os.kill(pid, 0)\r\n            return True\r\n        except OSError:\r\n            return False\r\n\r\n    # Your normal work loop, but check parent every so often\r\n    for chunk in data:\r\n        if not parent_is_alive(parent_pid):\r\n            print(\""Parent died, exiting worker.\"")\r\n            return None\r\n        # do actual work on chunk here\r\n        time.sleep(0.1)  # simulate work\r\n\r\n    return \""done\""\r\nimport concurrent.futures\r\nimport os\r\n\r\nparent_pid = os.getpid()\r\n\r\nwith concurrent.futures.ProcessPoolExecutor(max_workers=n_workers) as executor:\r\n    futures = [executor.submit(_do_work, data, parent_pid) for data in data_list]\r\n    for i, future in enumerate(concurrent.futures.as_completed(futures)):\r\n        print(f'{i}: {future.result()}')\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from tqdm import tqdm\r\nimport pandas as pd\r\n\r\ntqdm.pandas()\r\n\r\n# Make sure your DataFrame isn't too small and func1 actually takes time per row\r\ndf.progress_apply(lambda x: func1(x.textbody), axis=1)\r\ndf.progress_apply(lambda x: func1(x.textbody), axis=1, miniters=1)\r\nfrom tqdm import tqdm\r\n\r\nresults = []\r\nfor _, row in tqdm(df.iterrows(), total=len(df)):\r\n    results.append(func1(row.textbody))\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from fastapi import FastAPI, Request, status\r\nfrom fastapi.responses import RedirectResponse, HTMLResponse\r\nfrom starlette.middleware.sessions import SessionMiddleware\r\n\r\napp = FastAPI()\r\napp.add_middleware(SessionMiddleware, secret_key=\""your-secret-key\"")\r\n\r\n@app.get(\""/\"", response_class=HTMLResponse)\r\nasync def get_main_data(request: Request):\r\n    msg = request.session.pop(\""msg\"", None)\r\n    result = request.session.pop(\""result\"", None)\r\n    return templates.TemplateResponse(\""home.html\"", {\""request\"": request, \""msg\"": msg, \""result\"": result})\r\n\r\n@app.post(\""/\"")\r\nasync def post_main_data(request: Request):\r\n    form = await request.form()\r\n    # your logic here, e.g.:\r\n    if condition:\r\n        request.session[\""result\""] = str(trans)\r\n    else:\r\n        request.session[\""msg\""] = str(err)\r\n    return RedirectResponse(url=request.url_for(\""get_main_data\""), status_code=status.HTTP_303_SEE_OTHER)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\nmask = (pl.col(\""value\"").is_null()) & (pl.col(\""quantity\"") == 0)\r\n\r\ncols = [\""value\"", \""value_other\"", \""value_other2\""]\r\n\r\ndf = df.with_columns(\r\n    [\r\n        pl.when(mask)\r\n          .then(0)\r\n          .otherwise(pl.col(col))\r\n          .alias(col)\r\n        for col in cols\r\n    ]\r\n)\r\nmask = (pl.col(\""value\"").is_null()) & (pl.col(\""quantity\"") == 0)\r\n\r\ndf = df.with_columns(\r\n    pl.all(cols).map(lambda s: s.where(~mask, 0))\r\n)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import os\r\nfrom fastapi import Depends, HTTPException, Security\r\n\r\nAPI_KEY = \""secret\""\r\nENV = os.getenv(\""ENVIRONMENT\"", \""localhost\"")  # or \""production\""\r\n\r\nasync def api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    if api_key_header != API_KEY:\r\n        raise HTTPException(status_code=401, detail=\""Invalid API Key\"")\r\n\r\nasync def conditional_api_key():\r\n    if ENV == \""localhost\"":\r\n        # skip auth on localhost\r\n        return\r\n    await api_key()\r\n\r\n# then in your router:\r\nrouter = APIRouter(\r\n    prefix=\""/v2/test\"",\r\n    tags=[\""helloWorld\""],\r\n    dependencies=[Depends(conditional_api_key)],\r\n    responses={404: {\""description\"": \""Not found\""}},\r\n)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame({\r\n    \""Type\"": [\""RF\"", \""RF\"", \""RF\"", \""MLP\"", \""MLP\"", \""MLP\""],\r\n    \""Value\"": [-1.5, -0.1, 1.7, 0.2, -0.7, -0.6]\r\n})\r\n\r\nconditions = [\r\n    df[\""Value\""] < -0.25,\r\n    (df[\""Value\""] >= -0.25) & (df[\""Value\""] <= 0.25),\r\n    df[\""Value\""] > 0.25,\r\n]\r\n\r\nchoices = [\""Low\"", \""Hit\"", \""High\""]\r\n\r\ndf[\""Category\""] = np.select(conditions, choices)\r\n\r\nresult = (\r\n    df.groupby(\""Type\"")[\""Category\""]\r\n    .value_counts()\r\n    .unstack(fill_value=0)\r\n    .reset_index()\r\n)\r\n\r\nprint(result)\r\nCategory Type  Hit  High  Low\r\n0           MLP    1     0    2\r\n1            RF    1     1    1\r\nresult = (\r\n    df.assign(Category=np.select(conditions, choices))\r\n      .groupby(\""Type\"")[\""Category\""]\r\n      .value_counts()\r\n      .unstack(fill_value=0)\r\n      .reset_index()\r\n)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"class SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        return cls(int(v))\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\nclass BaseModel(pydantic.BaseModel):\r\n    __abstract__ = True\r\n\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }\r\n        alias_generator = camelize\r\n        allow_population_by_field_name = True\r\nobj = BaseModel(id=SnowflakeId(12345678901234567890))\r\nprint(obj.json())  # id will be serialized as a string\r\nprint(obj.dict())  # id will still be an int\r\nprint(obj.dict(by_alias=True, encoder={SnowflakeId: str}))\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from datetime import datetime, date\r\nfrom pydantic import BaseModel, field_validator\r\n\r\ndef to_date(field_name, value, formats, return_str=False):\r\n    for fmt in formats:\r\n        try:\r\n            parsed = datetime.strptime(value, fmt).date()\r\n            return parsed if not return_str else parsed.strftime(fmt)\r\n        except Exception:\r\n            continue\r\n    raise ValueError(f\""Invalid date format for field '{field_name}': {value}\"")\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: date\r\n    dt2: date\r\n\r\n    @field_validator('dt', 'dt2', mode='before')\r\n    @classmethod\r\n    def parse_custom_date(cls, value, info):\r\n        formats = ['%Y-%m-%d', '%Y/%m/%d']\r\n        return to_date(info.field_name, value, formats, return_str=False)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"ffrom dataclasses import dataclass\r\nfrom typing import TypeVar, Type, Callable, Any\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(cls: Type[T]) -> Type[T]:\r\n    return cls\r\n\r\ndef my_dataclass(cls: Type[T]) -> Type[T]:\r\n    return something_else(dataclass(cls))\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, \""\"")  # no error now\r\n"
0,1,misclassified_in_Test_7.csv.csv,"# app/dependencies.py\r\ndef build_db_dependency(name: str):\r\n    def dependency() -> Database:\r\n        return build_singleton_whatever(MongoClient, name)\r\n    return dependency\r\n\r\n# app/routes.py\r\nfrom app.dependencies import build_db_dependency\r\n\r\n@app.post(\""/notification/feed\"")\r\nasync def route_receive_notifications(db: Database = Depends(build_db_dependency(\""someDB\""))):\r\n    ...\r\nfrom app.dependencies import build_db_dependency\r\n\r\napp.dependency_overrides[build_db_dependency(\""someDB\"")] = lambda: mock_db\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from itertools import combinations\r\nfrom functools import lru_cache\r\n\r\ndef group_combos(elements, k, n):\r\n    elements = tuple(sorted(elements))\r\n\r\n    @lru_cache(maxsize=None)\r\n    def _helper(remaining, depth):\r\n        if depth == k:\r\n            return [()]\r\n        result = []\r\n        for group in combinations(remaining, n):\r\n            rest = tuple(e for e in remaining if e not in group)\r\n            for subgroups in _helper(rest, depth + 1):\r\n                combo = tuple(sorted((group,) + subgroups))\r\n                if combo not in result:\r\n                    result.append(combo)\r\n        return result\r\n\r\n    return _helper(elements, 0)\r\n\r\nletters = ['A','B','C','D']\r\nres = group_combos(letters, 2, 2)\r\nfor r in res:\r\n    print([''.join(g) for g in r])\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from fastapi.middleware.cors import CORSMiddleware\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\""http://localhost:3000\""],  # or \""*\"" won't work with credentials\r\n    allow_credentials=True,\r\n    allow_methods=[\""*\""],\r\n    allow_headers=[\""*\""],\r\n)await axios.post(login_url, formdata, { withCredentials: true })\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from pyspark.sql import SparkSession, Window\r\nimport pyspark.sql.functions as F\r\n\r\nspark = SparkSession.builder.getOrCreate()\r\n\r\ndf = spark.createDataFrame([\r\n    (\""A\"", 10),\r\n    (\""A\"", 20),\r\n    (\""A\"", 30),\r\n    (\""B\"", 5),\r\n    (\""B\"", 15)\r\n], [\""group\"", \""value\""])\r\n\r\nw = Window.partitionBy(\""group\"").orderBy(\""value\"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n\r\ndf = df.withColumn(\""cumulative_sum\"", F.sum(\""value\"").over(w))\r\ndf.show()\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import asyncio\r\nimport httpx\r\n\r\nurls = [\r\n    \""https://example.com\"",\r\n    \""https://www.google.com\"",\r\n    \""https://www.bbc.co.uk\"",\r\n    # ...\r\n]\r\n\r\nasync def fetch(client, url):\r\n    try:\r\n        resp = await client.get(url, timeout=5)\r\n        return resp.text\r\n    except Exception as e:\r\n        return f\""ERROR: {e}\""\r\n\r\nasync def fetch_all(urls, max_connections=100):\r\n    limits = httpx.Limits(max_connections=max_connections)\r\n    async with httpx.AsyncClient(limits=limits, timeout=5) as client:\r\n        tasks = [fetch(client, url) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\nhtml_responses = asyncio.run(fetch_all(urls))"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\ndf1 = pl.read_json('../AAPL/single_statements/1985-09-30-quarterly_balance.json')\r\ndf2 = pl.read_json('../AAPL/single_statements/1986-09-30-quarterly_balance.json')\r\n\r\ndef parse_dates(df):\r\n    return (\r\n        df.lazy()\r\n        .with_columns([\r\n            pl.col(\""date\"").str.to_date(),\r\n            pl.col(\""fillingDate\"").str.to_date(),\r\n            pl.col(\""acceptedDate\"").str.to_date(),\r\n        ])\r\n        .collect()\r\n    )\r\n\r\ndf1 = parse_dates(df1)\r\ndf2 = parse_dates(df2)\r\n\r\ncombined = pl.concat([df1, df2])\r\ncombined_sorted = combined.sort(\""date\"")\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from plotly.subplots import make_subplots\r\nimport plotly.graph_objects as go\r\n\r\nfig = make_subplots(\r\n    rows=2, cols=1,\r\n    shared_xaxes=True,\r\n    vertical_spacing=0.05,\r\n    subplot_titles=(title, \""\"")\r\n)\r\n\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x=A_error['CloseDate'], \r\n        y=A_error[err], \r\n        line_color='green',\r\n        marker_color='green',\r\n        mode='lines+markers',\r\n        showlegend=True,\r\n        name=\""A\""\r\n    ),\r\n    row=1, col=1\r\n)\r\n\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x=B_error['CloseDate'], \r\n        y=B_error[err], \r\n        line_color='blue',\r\n        mode='lines+markers',\r\n        showlegend=True,\r\n        name=\""B\""\r\n    ),\r\n    row=2, col=1\r\n)\r\n\r\nfig.update_layout(\r\n    hovermode=\""x unified\"",\r\n    legend_traceorder=\""normal\""\r\n)\r\n\r\nfig.update_yaxes(tickprefix=\""$\"")\r\nfig.add_hline(y=0, line_width=3, line_dash=\""dash\"", line_color=\""black\"")\r\n\r\nfig.show()\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from icu import Collator, Locale\r\nimport unicodedata\r\n\r\ncoll_en = Collator.createInstance(Locale(\""en_US.UTF-8\""))\r\ncoll_fa = Collator.createInstance(Locale(\""fa_IR.UTF-8\""))\r\n\r\ndef is_ascii(s):\r\n    return all(ord(c) < 128 for c in s)\r\n\r\ndef sort_key(s):\r\n    if is_ascii(s):\r\n        return (0, coll_en.getSortKey(s))\r\n    else:\r\n        return (1, coll_fa.getSortKey(s))\r\n\r\nmylist.sort(key=sort_key)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import pandas as pd\r\nfrom io import StringIO\r\n\r\ntext = \""\""\""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|\r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n\""\""\""\r\n\r\nlines = [line for line in text.strip().splitlines() if '---' not in line]\r\nclean_text = '\\n'.join(lines)\r\n\r\ndf = pd.read_csv(StringIO(clean_text), sep='|').iloc[:, 1:-1]\r\ndf.columns = df.columns.str.strip()\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import torch\r\nimport torchvision.transforms as T\r\nfrom PIL import Image\r\nimport requests\r\nimport onnx\r\nfrom onnx import helper\r\nfrom onnx_tf.backend import prepare\r\n\r\nmodel = torch.hub.load('facebookresearch/detr', 'detr_resnet50', pretrained=True)\r\nmodel.eval()\r\n\r\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\r\nimage = Image.open(requests.get(url, stream=True).raw)\r\ntransform = T.Compose([\r\n    T.Resize(800),\r\n    T.ToTensor(),\r\n    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\r\nimg_tensor = transform(image).unsqueeze(0)\r\n\r\ntorch.onnx.export(\r\n    model, img_tensor, 'detr.onnx',\r\n    opset_version=11,\r\n    input_names=[\""input\""],\r\n    output_names=[\""logits\"", \""boxes\""],\r\n    dynamic_axes={\""input\"": {0: \""batch_size\""}, \""logits\"": {0: \""batch_size\""}, \""boxes\"": {0: \""batch_size\""}}\r\n)\r\n\r\nonnx_model = onnx.load(\""detr.onnx\"")\r\nfor node in onnx_model.graph.node:\r\n    if node.op_type == \""Pad\"" and len(node.input) == 2:\r\n        node.input.append(\""\"")  # workaround for ONNX-TF bug\r\n\r\nonnx.save(onnx_model, \""patched_detr.onnx\"")\r\ntf_rep = prepare(onnx.load(\""patched_detr.onnx\""))\r\ntf_rep.export_graph(\""model_tf\"")\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    \""x\"": [[1], [1, 2], [1, 2, 3]],\r\n    \""y\"": [[True], None, [True, False, True]]\r\n})\r\n\r\nout = df.with_columns([\r\n    pl.when(pl.col(\""y\"").is_null())\r\n      .then(pl.Series([None]) * pl.col(\""x\"").list.len())\r\n      .otherwise(pl.col(\""y\""))\r\n      .alias(\""y\"")\r\n]).explode([\""x\"", \""y\""])\r\n\r\nprint(out)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"def combine(levels):\r\n    def helper(level, prefix):\r\n        if level == len(levels):\r\n            result.append(prefix)\r\n            return\r\n        for item in levels[level]:\r\n            helper(level + 1, prefix + [item])\r\n\r\n    def recurse(level, path, depth):\r\n        if depth == len(levels):\r\n            helper(0, [])\r\n            return\r\n        for item in levels[depth]:\r\n            recurse(item, path + [item], depth + 1)\r\n\r\n    result = []\r\n\r\n    def walk(vals, prefix):\r\n        if not vals:\r\n            result.append(prefix)\r\n            return\r\n        head, *tail = vals\r\n        for i, x in enumerate(head):\r\n            walk(tail, prefix + [x])\r\n\r\n    def align(vals, prefix):\r\n        if len(vals) == 1:\r\n            for x in vals[0]:\r\n                result.append(prefix + [x])\r\n            return\r\n        for x in vals[0]:\r\n            align(vals[1:], prefix + [x])\r\n\r\n    def flatten(vals, prefix=[]):\r\n        if len(vals) == 1:\r\n            for x in vals[0]:\r\n                result.append(prefix + [x])\r\n        else:\r\n            for i, x in enumerate(vals[0]):\r\n                flatten(vals[1:], prefix + [x])\r\n\r\n    def build(base, *levels):\r\n        def dfs(prefix, groups):\r\n            if not groups:\r\n                result.append(prefix)\r\n                return\r\n            head, *tail = groups\r\n            for g in head:\r\n                dfs(prefix + [g], tail)\r\n        for i, year in enumerate(base):\r\n            for j, color in enumerate(levels[0][i]):\r\n                for number in levels[1][i * len(levels[0][0]) + j]:\r\n                    result.append([year[0], color, number])\r\n        return result\r\n\r\n    return build(*levels)\r\n\r\na = [[\""2022\""], [\""2023\""]]\r\nb = [[\""blue\"", \""red\""], [\""green\"", \""yellow\""]]\r\nc = [[\""1\"", \""2\"", \""3\""], [\""4\"", \""5\"", \""6\"", \""7\""], [\""8\"", \""9\"", \""10\"", \""11\""], [\""12\"", \""13\""]]\r\n\r\nprint(combine([a, b, c]))"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\ndata = {\r\n    \""a\"": [[1], [2], [3, 4], [5, 6, 7]],\r\n    \""b\"": [[], [8], [9, 10], [11, 12]],\r\n}\r\ndf = pl.DataFrame(data)\r\n\r\nout = df.with_columns(\r\n    pl.min_horizontal(\r\n        pl.col(\""a\"").list.len(),\r\n        pl.col(\""b\"").list.len()\r\n    ).alias(\""len\"")\r\n).with_columns([\r\n    pl.col(\""a\"").list.slice(0, pl.col(\""len\"")).alias(\""a_trimmed\""),\r\n    pl.col(\""b\"").list.slice(0, pl.col(\""len\"")).alias(\""b_trimmed\"")\r\n]).select([\r\n    pl.struct([\""a_trimmed\"", \""b_trimmed\""]).list.eval(\r\n        pl.element().struct.fields([\""a_trimmed\"", \""b_trimmed\""])\r\n    ).alias(\""zipped\"")\r\n]).explode(\""zipped\"").unnest(\""zipped\"")\r\n\r\nprint(out)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from typing import Callable, Protocol, runtime_checkable\r\nfrom functools import wraps\r\n\r\n\r\n@runtime_checkable\r\nclass MemoizedFib(Protocol):\r\n    def __call__(self, n: int) -> int: ...\r\n    memory: dict[int, int]\r\n\r\n\r\ndef remember(f: Callable[[int], int]) -> MemoizedFib:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore[return-value]\r\n\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\n\r\nprint(fib(100))\r\nprint(fib.memory[100])"
0,1,misclassified_in_Test_7.csv.csv,"from langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmodel = \""sentence-transformers/multi-qa-MiniLM-L6-cos-v1\""\r\nembeddings = HuggingFaceEmbeddings(model_name=model)\r\n\r\ndocs = [\r\n    Document(page_content=\""The sky is blue.\"", metadata={\""document_id\"": \""10\""}),\r\n    Document(page_content=\""The forest is green\"", metadata={\""document_id\"": \""62\""}),\r\n    # add more docs...\r\n]\r\n\r\n# Embed each doc with progress bar\r\nembedded_vectors = []\r\nfor doc in tqdm(docs, desc=\""Embedding documents\""):\r\n    vector = embeddings.embed_query(doc.page_content)\r\n    embedded_vectors.append(vector)\r\n\r\n# Now build FAISS index from vectors and docs\r\ndb = FAISS.from_documents(docs, embeddings, embeddings=embedded_vectors)\r\n\r\ndb.save_local(\""faiss_index\"")"
0,1,misclassified_in_Test_7.csv.csv,"import pytest\r\nfrom fastapi import FastAPI, Response, status\r\nfrom fastapi.testclient import TestClient\r\nfrom contextlib import asynccontextmanager\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = \""Hello\""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = \""Hi\""\r\n    yield\r\n\r\ndef create_app(lifespan):\r\n    app = FastAPI(lifespan=lifespan)\r\n\r\n    @app.get(\""/\"")\r\n    async def root():\r\n        return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n    return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app = create_app(_lifespan_override)\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(\""/\"")\r\n    assert response.text == \""Hi\"
0,1,misclassified_in_Test_7.csv.csv,"import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef add_real_time(t, delta):\r\n    return (t.astimezone(dt.timezone.utc) + delta).astimezone(t.tzinfo)\r\n\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(\""Europe/Paris\""))\r\nd2_fixed = add_real_time(d0, dt.timedelta(hours=3))\r\n\r\nprint(d2_fixed.isoformat())\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    \""a_0\"": [1, 2],\r\n    \""a_1\"": [3, 4],\r\n    \""a_2\"": [5, 6],\r\n    \""b_0\"": [7, 8],\r\n    \""b_1\"": [9, 10],\r\n    \""b_2\"": [11, 12],\r\n})\r\n\r\nlong_df = (\r\n    df\r\n    .melt()\r\n    .with_columns([\r\n        pl.col(\""variable\"").str.extract(r\""(a|b)\"", 1).alias(\""group\""),\r\n        pl.col(\""value\"")\r\n    ])\r\n    .group_by(\""group\"")\r\n    .agg(pl.col(\""value\""))\r\n    .unnest(\""value\"")\r\n    .transpose(include_header=True)\r\n)\r\n\r\nprint(long_df)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import polars as pl\r\nimport numpy as np\r\nfrom numpy.linalg import norm\r\n\r\ndata = {\r\n    \""col1\"": [\""a\"", \""b\"", \""c\"", \""d\""],\r\n    \""col2\"": [\r\n        [-0.06066, 0.072485, 0.548874, 0.158507],\r\n        [-0.536674, 0.10478, 0.926022, -0.083722],\r\n        [-0.21311, -0.030623, 0.300583, 0.261814],\r\n        [-0.308025, 0.006694, 0.176335, 0.533835],\r\n    ],\r\n}\r\n\r\ndf = pl.DataFrame(data)\r\n\r\nvectors = np.stack(df[\""col2\""].to_list())\r\nlabels = df[\""col1\""].to_list()\r\n\r\nsimilarity_matrix = (vectors @ vectors.T) / (norm(vectors, axis=1)[:, None] * norm(vectors, axis=1))\r\n\r\nresult = pl.DataFrame(similarity_matrix, schema=labels).with_columns(pl.Series(\""col1_col2\"", labels))\r\n\r\nprint(result)\r\n"
0,1,misclassified_in_Test_7.csv.csv,"from pydantic import BaseModel, Field\r\nfrom typing import Literal, Union\r\nfrom fastapi import FastAPI\r\nfrom fastapi.routing import APIRouter\r\nfrom fastapi.openapi.utils import get_openapi\r\n\r\napp = FastAPI()\r\nrouter = APIRouter()\r\n\r\nclass BDCBaseModel(BaseModel):\r\n    class Config:\r\n        extra = \""forbid\""\r\n\r\nclass Foo(BDCBaseModel):\r\n    type: Literal[\""Foo\""] = Field(\""Foo\"", const=True)\r\n    Name: str\r\n\r\nclass Bar(BDCBaseModel):\r\n    type: Literal[\""Bar\""] = Field(\""Bar\"", const=True)\r\n    Name: str\r\n\r\nclass Demo(BDCBaseModel):\r\n    example: Union[Foo, Bar] = Field(..., discriminator=\""type\"")\r\n\r\n@router.post(\""/demo\"")\r\nasync def demo(foo: Foo):\r\n    return Demo(example=foo)\r\n\r\napp.include_router(router)\r\n\r\ndef custom_openapi():\r\n    if app.openapi_schema:\r\n        return app.openapi_schema\r\n    openapi_schema = get_openapi(\r\n        title=\""My API\"",\r\n        version=\""1.0.0\"",\r\n        routes=app.routes,\r\n    )\r\n    for schema in openapi_schema.get(\""components\"", {}).get(\""schemas\"", {}).values():\r\n        props = schema.get(\""properties\"", {})\r\n        if \""type\"" in props:\r\n            props.pop(\""type\"", None)\r\n            req = schema.get(\""required\"", [])\r\n            if \""type\"" in req:\r\n                req.remove(\""type\"")\r\n    app.openapi_schema = openapi_schema\r\n    return app.openapi_schema\r\n\r\napp.openapi = custom_openapi\r\n"
0,1,misclassified_in_Test_7.csv.csv,"import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\nimport sympy as sp\r\n\r\n# example data\r\nX = np.random.rand(100, 2)\r\ny = 3 * X[:, 0]**2 + 2 * X[:, 0] * X[:, 1] + 4 * X[:, 1] + 5\r\n\r\npoly = PolynomialFeatures(degree=2, include_bias=True)\r\nXp = poly.fit_transform(X)\r\nmodel = LinearRegression().fit(Xp, y)\r\n\r\n# extract terms and symbols\r\nn_features = X.shape[1]\r\nsymbols = sp.symbols(f'x0:{n_features}')\r\npoly_terms = poly.get_feature_names_out()\r\n\r\n# build symbolic polynomial\r\nexpr = 0\r\nfor coef, term in zip(model.coef_, poly_terms):\r\n    expr += coef * sp.sympify(term, locals={f'x{i}': symbols[i] for i in range(n_features)})\r\nexpr += model.intercept_\r\n\r\n# compute gradient and Hessian\r\ngradient = [sp.diff(expr, s) for s in symbols]\r\nhessian = [[sp.diff(g, s2) for s2 in symbols] for g in gradient]\r\n\r\n# convert to callable functions\r\nf_grad = sp.lambdify(symbols, gradient, 'numpy')\r\nf_hess = sp.lambdify(symbols, hessian, 'numpy')\r\n\r\n# evaluate\r\nx_sample = X[0]\r\nprint(f_grad(*x_sample))\r\nprint(f_hess(*x_sample))"
0,1,misclassified_in_Test_7.csv.csv,"class BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len_hack__(cls):\r\n        return 9002\r\n\r\n    def __len__(self):\r\n        return self.__len_hack__()\r\n\r\n    def __class_getitem__(cls, item):  # just hijacking some class-level access point\r\n        return cls\r\n\r\n    def __new__(cls, *args, **kwargs):\r\n        cls.__class__.__len__ = lambda kls: kls.__len_hack__()\r\n        return super().__new__(cls)"
0,1,misclassified_in_Test_7.csv.csv,FROM python:3.9\r\n\r\nWORKDIR /project\r\n\r\nCOPY poetry.lock pyproject.toml ./\r\nRUN pip install poetry\r\n\r\nCOPY . .  # or whatever source you need\r\n\r\n# install dependencies without token first to prime the cache\r\nRUN poetry config virtualenvs.create false \\\r\n && poetry install --no-root --no-interaction\r\n\r\n# now inject the token but don't invalidate previous layers\r\nARG CI_JOB_TOKEN\r\nRUN poetry config http-basic.gitlab-pypi-repo gitlab-ci-token ${CI_JOB_TOKEN} \\\r\n && poetry install --no-interaction
0,1,misclassified_in_Test_7.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom multiprocessing import Pool\r\nfrom tqdm import tqdm\r\nimport os\r\n\r\ndef calc(args):\r\n    n_digits, pos, total = args\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    getcontext().prec = n_digits + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    pbar = tqdm(total=n, position=pos, desc=f\""Job {pos+1} of {total}\"", leave=True)\r\n    for k in range(n):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n        pbar.update(1)\r\n    pbar.close()\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    return 1 / pi\r\n\r\ndef parallel_with_pool():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    args = [(n, pos, len(tasks)) for pos, n in enumerate(tasks)]\r\n\r\n    with Pool(processes=n_cores) as pool:\r\n        results = pool.map(calc, args)\r\n\r\nif __name__ == \""__main__\"":\r\n    parallel_with_pool()"
0,1,misclassified_in_Test_7.csv.csv,"class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self):\r\n        result = [self.value]\r\n        if self.left:\r\n            result += self.left.traverse_pre()\r\n        if self.right:\r\n            result += self.right.traverse_pre()\r\n        return result\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nprint(Tree.traverse_pre())"
0,1,misclassified_in_Test_7.csv.csv,"from flask import Flask, render_template, jsonify\r\nimport threading\r\nimport time\r\nimport os\r\n\r\napp = Flask(__name__)\r\n\r\nmap_ready = False\r\n\r\ndef create_map_background():\r\n    global map_ready\r\n    # simulate long map creation\r\n    time.sleep(15)  # your create_map()\r\n    # after done:\r\n    map_ready = True\r\n\r\n@app.route('/')\r\ndef loading():\r\n    return render_template(\""loading.html\"")  # show loading spinner or message here\r\n\r\n@app.route('/start_map')\r\ndef start_map():\r\n    global map_ready\r\n    map_ready = False\r\n    threading.Thread(target=create_map_background).start()\r\n    return jsonify({\""status\"": \""started\""})\r\n\r\n@app.route('/check_map')\r\ndef check_map():\r\n    return jsonify({\""ready\"": map_ready})\r\n\r\n@app.route('/map')\r\ndef show_map():\r\n    if map_ready and os.path.exists('templates/map.html'):\r\n        return render_template(\""map.html\"")\r\n    else:\r\n        return \""Map is not ready yet\"", 404"
0,1,misclassified_in_Test_7.csv.csv,"from fastapi import APIRouter, UploadFile, File\r\nfrom app.models.schemas.files import FileInResponse\r\n\r\nrouter = APIRouter()\r\n\r\n@router.post(\r\n    \""\"",\r\n    name=\""files:create-file\"",\r\n    response_model=FileInResponse,\r\n    openapi_extra={\r\n        \""requestBody\"": {\r\n            \""content\"": {\r\n                \""multipart/form-data\"": {\r\n                    \""schema\"": {\r\n                        \""title\"": \""CustomFileUpload\"",  # your custom schema name here\r\n                        \""type\"": \""object\"",\r\n                        \""properties\"": {\r\n                            \""file\"": {\""type\"": \""string\"", \""format\"": \""binary\""}\r\n                        },\r\n                        \""required\"": [\""file\""],\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n)\r\nasync def create(file: UploadFile = File(...)) -> FileInResponse:\r\n    pass"
0,1,misclassified_in_Test_7.csv.csv,"from selenium import webdriver\r\nfrom selenium.webdriver.chrome.options import Options\r\nfrom bs4 import BeautifulSoup\r\nimport pandas as pd\r\n\r\noptions = Options()\r\noptions.headless = True\r\ndriver = webdriver.Chrome(options=options)\r\n\r\ndriver.get('https://www.bmv.com.mx/es/mercados/capitales')\r\n\r\n# wait a bit for JS to render the table, or better: wait for the element explicitly\r\ndriver.implicitly_wait(5)\r\n\r\nsoup = BeautifulSoup(driver.page_source, 'html.parser')\r\ndriver.quit()\r\n\r\ntable = soup.find('table', {'id': 'your-table-id-if-any'})  # or find the <tbody> directly\r\n\r\nheaders = [th.get_text(strip=True) for th in table.find('thead').find_all('th')]\r\nrows = table.find('tbody').find_all('tr')\r\n\r\ndata = []\r\nfor row in rows:\r\n    cols = row.find_all('td')\r\n    data.append([col.get_text(strip=True) for col in cols])\r\n\r\ndf = pd.DataFrame(data, columns=headers)\r\nprint(df)"
0,1,misclassified_in_Test_7.csv.csv,"import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(\""tips\"")\r\n\r\nx = \""sex\""\r\ny = \""total_bill\""\r\nhue = \""smoker\""\r\nrow = \""time\""\r\nhue_order = [\""Yes\"", \""No\""]\r\norder = [\""Male\"", \""Female\""]\r\npairs = [\r\n    ((\""Male\"", \""Yes\""), (\""Male\"", \""No\"")),\r\n    ((\""Female\"", \""Yes\""), (\""Female\"", \""No\""))\r\n]\r\n\r\ng = sns.catplot(\r\n    x=x, y=y, hue=hue, row=row, data=tips, kind=\""bar\"", ci=\""sd\"",\r\n    edgecolor=\""black\"", errcolor=\""black\"", errwidth=1.5, capsize=0.1,\r\n    height=4, aspect=.7, alpha=0.5\r\n)\r\n\r\ng.map(\r\n    sns.stripplot, x, y, hue,\r\n    hue_order=hue_order, order=order,\r\n    palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1\r\n)\r\n\r\nfor i, ax in enumerate(g.axes.flatten()):\r\n    current_time = tips[row].unique()[i]\r\n    data_subset = tips[tips[row] == current_time]\r\n\r\n    annotator = Annotator(\r\n        ax, pairs, data=data_subset,\r\n        x=x, y=y, hue=hue,\r\n        order=order, hue_order=hue_order\r\n    )\r\n    annotator.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=0)\r\n    annotator.apply_test().annotate()\r\n\r\nplt.tight_layout()"
0,1,misclassified_in_Test_7.csv.csv,"import numpy as np\r\nimport pandas as pd\r\nimport geopandas as gpd\r\nimport json\r\nimport plotly.express as px\r\nimport plotly.graph_objects as go\r\nfrom shapely.geometry import Polygon\r\nfrom sklearn.neighbors import BallTree\r\n\r\nfrom shapely.geometry import Point\r\nfrom shapely.ops import unary_union\r\n\r\nfrom plotly.figure_factory import create_hexbin_mapbox\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n})\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(\""naturalearth_lowres\""))\r\nafr_poly = gdf_poly[gdf_poly['continent'] == 'Africa'].geometry.unary_union\r\n\r\ngdf = gpd.GeoDataFrame(data, geometry=gpd.points_from_xy(data.LON, data.LAT), crs='EPSG:4326')\r\ngdf = gdf[gdf.within(afr_poly)]\r\n\r\nfig = create_hexbin_mapbox(\r\n    data_frame=gdf,\r\n    lat=\""LAT\"",\r\n    lon=\""LON\"",\r\n    nx_hexagon=25,\r\n    opacity=0.4,\r\n    labels={\""color\"": \""Point Count\""},\r\n    mapbox_style='carto-positron',\r\n    zoom=1,\r\n)\r\n\r\nfig.update_layout(\r\n    mapbox={\r\n        \""layers\"": [\r\n            {\r\n                \""source\"": json.loads(gdf_poly[gdf_poly['continent'] == 'Africa'].geometry.to_json()),\r\n                \""below\"": \""traces\"",\r\n                \""type\"": \""fill\"",\r\n                \""color\"": \""orange\"",\r\n                \""opacity\"": 0.1,\r\n                \""line\"": {\""width\"": 1},\r\n            },\r\n        ],\r\n    }\r\n)\r\n\r\nfig.show()"
0,1,misclassified_in_Test_7.csv.csv,"import matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib\r\n\r\nmatplotlib.rcParams.update({\r\n    \""text.usetex\"": True,\r\n    \""font.family\"": \""serif\"",\r\n    \""font.serif\"": [\""Computer Modern\""],\r\n    \""font.size\"": 12,\r\n    \""axes.labelweight\"": \""bold\"",\r\n    \""xtick.labelsize\"": 12,\r\n    \""ytick.labelsize\"": 12,\r\n})\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns = 1 + np.sin(2 * np.pi * t)\r\n\r\nfig, ax = plt.subplots(figsize=(9,6))\r\nax.plot(t, s)\r\n\r\nax.set_xlabel(r\""\\textbf{time (s) $a_1$}\"")\r\nax.set_ylabel(r\""\\textbf{voltage (mV)}\"")\r\nax.set_title(r\""\\textbf{About as simple as it gets, folks}\"")\r\n\r\nfor label in ax.get_xticklabels():\r\n    label.set_fontweight(\""bold\"")\r\nfor label in ax.get_yticklabels():\r\n    label.set_fontweight(\""bold\"")\r\n\r\nax.grid()\r\nfig.savefig(\""test.png\"")\r\nplt.show()"
0,1,misclassified_in_Test_7.csv.csv,"from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_v1_5\r\nimport socket\r\n\r\nwith socket.create_connection((ip, port)) as s:\r\n    def recv_all(n):\r\n        data = b\""\""\r\n        while len(data) < n:\r\n            chunk = s.recv(n - len(data))\r\n            if not chunk:\r\n                break\r\n            data += chunk\r\n        return data\r\n\r\n    send_cmd = \""auth\""\r\n    version_parts = ver.split(\"".\"")\r\n    # send the auth command with version strings here\r\n\r\n    modulus = recv_all(256)\r\n    exponent = recv_all(3)\r\n\r\n    n = int.from_bytes(modulus, 'big')\r\n    e = int.from_bytes(exponent, 'big')\r\n\r\n    pubkey = RSA.construct((n, e))\r\n    cipher = PKCS1_v1_5.new(pubkey)\r\n\r\n    payload = string1.encode() + string2.encode()\r\n    encrypted = cipher.encrypt(payload)\r\n\r\n    # send encrypted to server here"
0,1,misclassified_in_Test_7.csv.csv,"from pydantic import BaseModel, ValidationError\r\nfrom pydantic import RootModel\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ntry:\r\n    Employee.model_validate({\r\n        \""name\"": \""Mattia\"",\r\n        \""age\"": \""hello\"",\r\n        \""salary\"": {\r\n            \""gross\"": \""hello\"",\r\n            \""net\"": 1000,\r\n            \""tax\"": 10\r\n        }\r\n    })\r\nexcept ValidationError as e:\r\n    print(e)"
0,1,misclassified_in_Test_3.csv.csv,class Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        } else {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        }\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"package test.one;\r\n\r\npublic abstract class One {\r\n  \r\n  protected abstract void whatever();\r\n\r\n  public void run() {\r\n    whatever();\r\n  }\r\n  \r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n  public static void main(String[] args) {\r\n    new One() {\r\n      @Override\r\n      protected void whatever() {\r\n        System.out.println(""Do whatever.."");\r\n      }\r\n    }.whatever();\r\n  }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ecdh Key Pair Generation</title>\r\n</head>\r\n<body> \r\n  <script>\r\n\r\n//Utils\r\nfunction _extractRawKeyMaterial(pem, type) {\r\n  const pemHeader = `-----BEGIN ${type} KEY-----`;\r\n  const pemFooter = `-----END ${type} KEY-----`;\r\n\r\n  const endingIndex = pem.indexOf(pemFooter);\r\n  const startingIndex = pem.indexOf(pemHeader) + pemHeader.length;\r\n\r\n  const pemContents = pem.substring(startingIndex, endingIndex);\r\n  var return_object = convertBase64StringToArrayBuffer(pemContents.trim());\r\n  return return_object;\r\n}\r\n\r\n const convertBase64StringToArrayBuffer = base64String => {\r\n  const text = window.atob(base64String);\r\n  return convertStringToArrayBuffer(text);\r\n};\r\n\r\n const convertStringToArrayBuffer = str => {\r\n  const buf = new ArrayBuffer(str.length);\r\n  const bufView = new Uint8Array(buf);\r\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n    bufView[i] = str.charCodeAt(i);\r\n  }\r\n  return buf;\r\n};\r\n\r\n\r\n// private key\r\nvar privateKeyGenerated = `-----BEGIN PRIVATE KEY-----\r\nME4CAQAwEAYHKoZIzj0CAQYFK4EEACIENzA1AgEBBDAMvyd7HU0FwJxgs5N87NVw\r\nMPOR60umJXnhPjdtn0O0RHgx2J0sVnvw7B6ue1Wb5uQ=\r\n-----END PRIVATE KEY-----`\r\n\r\n// Pass the loaded private key to your function\r\n_loadEccPrivateKey(privateKeyGenerated);\r\n\r\n// Code working in chrome but fails in safari with an error : Data provided to an operation does not meet requirements\r\nasync function _loadEccPrivateKey(pemKey) {\r\n  try {\r\n     const rawKey = _extractRawKeyMaterial(pemKey.trim(), ""PRIVATE"");\r\n\r\n    //console.log(rawKey)\r\n    const key = await window.crypto.subtle.importKey(\r\n      ""pkcs8"", // Format for private keys\r\n      rawKey,\r\n      {\r\n        name: ""ECDH"",\r\n        namedCurve: ""P-384"",\r\n      },\r\n      true,\r\n      [""deriveBits"", ""deriveKey""] // Key usages\r\n    );\r\n\r\n    console.log('Imported Private Key:', key);\r\n    return key;\r\n  } catch (e) {\r\n    console.error('Error importing private key:', e);\r\n    throw e;\r\n  }\r\n}\r\n\r\n</script> \r\n</body>\r\n</html>\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.*;\r\n\r\npublic class Solution {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        int[] lis = new int[n];\r\n        int[] lds = new int[n];\r\n        \r\n        Arrays.fill(lis, 1);\r\n        Arrays.fill(lds, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (list.get(i) > list.get(j)) {\r\n                    lis[i] = Math.max(lis[i], lis[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (list.get(i) > list.get(j)) {\r\n                    lds[i] = Math.max(lds[i], lds[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLength = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            if (lis[i] > 1 && lds[i] > 1) {\r\n                maxLength = Math.max(maxLength, lis[i] + lds[i] - 1);\r\n            }\r\n        }\r\n        return maxLength;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class WebConfig {\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/*""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,public abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {}\r\n}\r\n\r\nimport anotherpackage.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(rawHandle);\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    System.out.println(""Started"");\r\n\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        var NET_WM_XAPP_PROGRESS = arena.allocateUtf8String(""_NET_WM_XAPP_PROGRESS"");\r\n\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        System.out.println(x11Session);\r\n\r\n                        // Prepare the progress data\r\n                        MemorySegment initData = arena.allocate(ValueLayout.JAVA_INT, 0);\r\n                        Xlib_h.XChangeProperty(x11Session, MemorySegment.ofAddress(rawHandle).address(),\r\n                                NET_WM_XAPP_PROGRESS.address(), 6, 32, 0, initData, 1);\r\n                        Xlib_h.XFlush(x11Session);\r\n\r\n                        System.out.println(""Countdown started"");\r\n\r\n                        // Set the taskbar progress\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            // Simulate work\r\n                            Thread.sleep(500);\r\n                            System.out.println(i);\r\n                            MemorySegment progressData = arena.allocate(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session, MemorySegment.ofAddress(rawHandle).address(),\r\n                                    NET_WM_XAPP_PROGRESS.address(), 6, 32, 0, progressData, 1);\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n                        System.out.println(""Finished"");\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n\r\n                    } catch (Throwable ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import org.yaml.snakeyaml.DumperOptions;\r\nimport org.yaml.snakeyaml.Yaml;\r\nimport java.util.Map;\r\n\r\npublic class YamlMapper {\r\n\r\n    public static InterestingSetup mapYamlToClass(Map<String, Object> yamlConfig) {\r\n        Yaml yaml = new Yaml();\r\n        Map<String, Object> interestingMap = (Map<String, Object>) yamlConfig.get(""interesting-setup"");\r\n        return yaml.loadAs(yaml.dump(interestingMap), InterestingSetup.class);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void testPermitAllEndpoint() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testHasScopeDataWrite() throws Exception {\r\n        mockMvc.perform(put(""/data/any"")\r\n                .header(HttpHeaders.AUTHORIZATION, ""Bearer valid-token-with-scope-data:write""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testUnauthenticatedRequest() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n            .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n\r\nimport java.util.UUID;\r\n\r\npublic record AggregateId(UUID id) {}\r\n\r\npublic class Aggregate {\r\n\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(""aggregateId"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}\r\n\r\n@JsonSerialize\r\n@JsonDeserialize(using = AggregateIdSerializer.class)\r\npublic static class AggregateIdSerializer extends com.fasterxml.jackson.databind.JsonSerializer<AggregateId> {\r\n    @Override\r\n    public void serialize(AggregateId value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider serializers) throws java.io.IOException {\r\n        gen.writeString(value.id().toString());\r\n    }\r\n}\r\n\r\npublic static void main(String[] args) throws Exception {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    String content = ""{\""aggregateId\"":\""3f61aede-83dd-4049-a6ff-337887b6b807\""}"";\r\n    Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n    System.out.println(objectMapper.writeValueAsString(aggregate));\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.time.YearWeek;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class WeekOperations {\r\n\r\n    public static boolean isBefore(String weekA, String weekB) {\r\n        YearWeek ywA = YearWeek.parse(weekA, DateTimeFormatter.ISO_WEEK_DATE);\r\n        YearWeek ywB = YearWeek.parse(weekB, DateTimeFormatter.ISO_WEEK_DATE);\r\n        return ywA.isBefore(ywB);\r\n    }\r\n\r\n    public static long weeksBetween(String weekA, String weekB) {\r\n        YearWeek ywA = YearWeek.parse(weekA, DateTimeFormatter.ISO_WEEK_DATE);\r\n        YearWeek ywB = YearWeek.parse(weekB, DateTimeFormatter.ISO_WEEK_DATE);\r\n        return ywB.toEpochWeek() - ywA.toEpochWeek();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"// Sample code illustrating the concept\r\n\r\npublic class InferenceExample {\r\n\r\n    public <T extends Exception> void handleExceptionThrows(T exception) throws T {\r\n        // throws clause with inferred exception type\r\n        throw exception;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            new InferenceExample().handleExceptionThrows(new Exception(""Checked Exception""));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static boolean equalSplit(int[] arr) {\r\n    if (arr.length % 2 != 0)\r\n        return false;\r\n    return equalSplit(arr, 0, 0, arr.length / 2, arr.length / 2);\r\n}\r\n\r\npublic static boolean equalSplit(int[] arr, int startSum, int endSum, int start, int end) {\r\n    if (start == startSum && end == endSum)\r\n        return startSum == endSum;\r\n    \r\n    if (start < end) {\r\n        return equalSplit(arr, startSum + arr[start], endSum, start + 1, end) ||\r\n               equalSplit(arr, startSum, endSum + arr[end], start, end - 1);\r\n    }\r\n    return false;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        \r\n        stage.show();\r\n\r\n        label.setOnMouseEntered(event -> {\r\n            Point2D p = label.localToScene(0.0, 0.0);\r\n            double x = p.getX() + label.getScene().getX() + label.getScene().getWindow().getX();\r\n            double y = p.getY() + label.getScene().getY() + label.getScene().getWindow().getY();\r\n            tooltip.show(label, x + label.getWidth() - tooltip.getWidth(), y + label.getHeight());\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\npublic class MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"", // 9 digits\r\n            ""2023-10-05T15:14:29.12345678Z"",  // 8 digits\r\n            ""2023-10-05T15:14:29.1234567Z"",   // 7 digits\r\n            ""2023-10-05T15:14:29.123456Z"",    // 6 digits\r\n            ""2023-10-05T15:14:29.12345Z"",     // 5 digits\r\n            ""2023-10-05T15:14:29.1234Z"",      // 4 digits\r\n            ""2023-10-05T15:14:29.123Z"",       // 3 digits\r\n            ""2023-10-05T15:14:29.12Z"",        // 2 digits\r\n            ""2023-10-05T15:14:29.1Z"",         // 1 digit\r\n            ""2023-10-05T15:14:29Z""            // no fractional seconds\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n\r\n        char string[] = string1.toCharArray();  \r\n          \r\n        System.out.println(""Duplicate characters in a given string: "");  \r\n        \r\n        for(int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for(int j = i + 1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n        \r\n        if(!hasDuplicates) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }  \r\n}  \r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private Button rotate;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        circle.setRotate(circle.getRotate() + 90);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.concurrent.StructuredTaskScope;\r\nimport java.util.concurrent.ScopedValue;\r\n\r\npublic class Playground {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        final var NAME = ScopedValue.<String>newInstance();\r\n        try (var ts = new StructuredTaskScope<>()) {\r\n            ScopedValue.runWhere(NAME, ""haha"", () -> {\r\n                ts.fork(() -> {\r\n                    ScopedValue.runWhere(NAME, ""bar"", () -> {\r\n                        return null;\r\n                    });\r\n                    return null;\r\n                });\r\n            });\r\n            ts.join();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(createTestLabel());\r\n        Scene scene = new Scene(root);\r\n\r\n        scene.getStylesheets().add(""/ExampleStylesheet.css"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setOnMouseEntered(this::doSomething);\r\n        testLabel.setOnMouseExited(this::doSomethingElse);\r\n\r\n        testLabel.setOnMousePressed(event -> handleMousePress(event));\r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething(MouseEvent event) {\r\n        // System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse(MouseEvent event) {\r\n        // System.out.println(""Outside label."");\r\n    }\r\n\r\n    public void handleMousePress(MouseEvent event) {\r\n        Label label = (Label) event.getSource();\r\n        if (!label.getBoundsInParent().contains(event.getSceneX(), event.getSceneY())) {\r\n            event.consume();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        Label label1 = new Label(""One two three"");\r\n        TextField textField1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n        gridPane1.setHgap(20);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        Label label2 = new Label(""Four five six seven"");\r\n        TextField textField2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n        gridPane2.setHgap(20);\r\n\r\n        TitledPane titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        \r\n        TitledPane titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        gridPane1.prefWidthProperty().bind(gridPane2.widthProperty());\r\n\r\n        VBox vbox = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(vbox, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class TestWatermark3 {\r\n\r\n    public static String resourcesPath = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    public static String FILE_NAME = resourcesPath + ""test.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        System.out.println(""########## STARTED ADDING WATERMARK ###########"");\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        try {\r\n            byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n            String watermarkText = ""confidential"";\r\n            String fontPath = resourcesPath + ""myCustomFont.ttf"";\r\n            Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, 16);\r\n\r\n            BaseFont baseFont = arabicFont.getBaseFont();\r\n            PdfReader reader = new PdfReader(byteArray);\r\n            PdfStamper stamper = new PdfStamper(reader, baos);\r\n            Phrase watermarkPhrase = new Phrase(watermarkText, arabicFont);\r\n\r\n            int numberOfPages = reader.getNumberOfPages();\r\n\r\n            float height = baseFont.getAscentPoint(watermarkText, 24) + baseFont.getDescentPoint(watermarkText, 24);\r\n\r\n            for (int i = 1; i <= numberOfPages; i++) {\r\n\r\n                Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n                PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n                PdfGState state = new PdfGState();\r\n                state.setFillOpacity(0.3f);\r\n                overContent.saveState();\r\n                overContent.setGState(state);\r\n\r\n                for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n                    for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n                        ColumnText.showTextAligned(overContent, Element.ALIGN_CENTER, watermarkPhrase, x, y, 45f,\r\n                                PdfWriter.RUN_DIRECTION_RTL, ColumnText.DIGITS_AN2EN);\r\n                    }\r\n                }\r\n\r\n                overContent.restoreState();\r\n\r\n            }\r\n\r\n            stamper.close();\r\n            reader.close();\r\n            byteArray = baos.toByteArray();\r\n            File outputFile = new File(resourcesPath + ""output.pdf"");\r\n            if (outputFile.exists()) {\r\n                outputFile.delete();\r\n            }\r\n            Files.write(outputFile.toPath(), byteArray);\r\n\r\n            System.out.println(""########## FINISHED ADDING WATERMARK ###########"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class VirtualThreadSecurityContextExample {\r\n\r\n    @GetMapping(""/secure-endpoint"")\r\n    public String getSecureEndpoint() {\r\n        SecurityContext securityContext = SecurityContextHolder.getContext();\r\n        String currentPrincipalName = securityContext.getAuthentication().getName();\r\n        return ""Hello, "" + currentPrincipalName;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        \r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }            \r\n    }\r\n}\r\n\r\npublic class MainViewController implements Initializable {\r\n\r\n    @FXML\r\n    private MenuItem mnuItemNew;\r\n\r\n    @FXML\r\n    private ScrollPane scpGrid;\r\n\r\n    @FXML\r\n    public void onMnuItemNewAction() {\r\n        int cols = 10;\r\n        int rows = 10;\r\n        int horizontalGap = 1;\r\n        int verticalGap = 1;\r\n        int fieldHorizontalSize = 40;\r\n        int fieldVerticalSize = 40;\r\n        var newGrid = new Grid(cols, rows, horizontalGap, verticalGap, fieldHorizontalSize, fieldVerticalSize);\r\n        scpGrid.setContent(newGrid);\r\n        newGrid.setAlignment(Pos.CENTER);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n        configurer.defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"@ExtendWith(MockitoExtension.class)\r\nclass YourTest {\r\n\r\n    @Mock\r\n    private PDFDocument pdfDocument;\r\n\r\n    @Mock\r\n    private PSConverter converter;\r\n\r\n    @Test\r\n    void test() throws Exception {\r\n        PDFDocument mockPdfDocument = Mockito.mock(PDFDocument.class);\r\n        PSConverter mockConverter = Mockito.mock(PSConverter.class);\r\n\r\n        whenNew(PDFDocument.class).withNoArguments().thenReturn(mockPdfDocument);\r\n        whenNew(PSConverter.class).withNoArguments().thenReturn(mockConverter);\r\n\r\n        doNothing().when(mockPdfDocument).load(Mockito.any(ByteArrayInputStream.class));\r\n        doAnswer(invocation -> {\r\n            ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n            outputStream.write(content);\r\n            return outputStream;\r\n        }).when(mockConverter).convert(Mockito.any(), Mockito.any(ByteArrayOutputStream.class));\r\n\r\n        // Add your test code here\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Bean\r\nSecurityFilterChain web(HttpSecurity http) throws Exception {\r\n    http\r\n        .authorizeHttpRequests(authorize -> authorize\r\n            .mvcMatchers(""/resources/**"", ""/signup"", ""/about"").permitAll()\r\n            .mvcMatchers(""/admin/**"").hasRole(""ADMIN"")\r\n            .mvcMatchers(""/db/**"").access((authentication, context) -> {\r\n                if (authentication != null && authentication.getAuthorities().stream()\r\n                        .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(""ROLE_ADMIN""))) {\r\n                    return AuthorizationDecision.ALLOW;\r\n                }\r\n                return AuthorizationDecision.DENY;\r\n            })\r\n            .anyRequest().denyAll()\r\n        );\r\n\r\n    return http.build();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public List<Product> searchProducts(String searchQuery, Pageable pageable) {\r\n    MatchOperation matchOperation = Aggregation.match(\r\n        Criteria.where(""companyNo"").in(10000009)\r\n            .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n            .and(""productName"").regex(searchQuery, ""i"")\r\n    );\r\n\r\n    UnionWithOperation unionWithSubCategory = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""subCategoryName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    UnionWithOperation unionWithCategory = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""categoryName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    UnionWithOperation unionWithBrand = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""brandName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    Aggregation aggregation = Aggregation.newAggregation(\r\n        matchOperation,\r\n        unionWithSubCategory,\r\n        unionWithCategory,\r\n        unionWithBrand,\r\n        Aggregation.skip((long) pageable.getOffset()),\r\n        Aggregation.limit(pageable.getPageSize())\r\n    );\r\n\r\n    AggregationResults<Product> results = mongoTemplate.aggregate(aggregation, ""product"", Product.class);\r\n    return results.getMappedResults();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class JdkBenchmarks {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(AverageTime)\r\n    @OutputTimeUnit(NANOSECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int length = testState.values.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(testState.values[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(AverageTime)\r\n    @OutputTimeUnit(NANOSECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        for (int value : testState.values) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class TestState {\r\n        public int[] values;\r\n\r\n        @Setup(Level.Trial)\r\n        public void setupArray() {\r\n            int count = 1000;\r\n            values = new int[count];\r\n            for (int i = 0; i < count; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class NestedPerf {\r\n\r\n  @State(Scope.Benchmark)\r\n  public static class StateData {\r\n    public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n    public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n  }\r\n\r\n  private static void runInNewPool(Runnable task) {\r\n    ForkJoinPool pool = new ForkJoinPool();\r\n    try {\r\n      pool.submit(task).join();\r\n    } finally {\r\n      pool.shutdown();\r\n    }\r\n  }\r\n\r\n  private static void innerParallelLoop() {\r\n    StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n      try {\r\n        Thread.sleep(5);\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n    });\r\n  }\r\n\r\n  private static void innerSequentialLoop() {\r\n    StateData.innerLoop.stream().unordered().forEach(i -> {\r\n      try {\r\n        Thread.sleep(5);\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingNewPool(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      runInNewPool(NestedPerf::innerParallelLoop);\r\n      bh.consume(i);\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      innerSequentialLoop();\r\n      bh.consume(i);\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingCommonPool(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      innerParallelLoop();\r\n      bh.consume(i);\r\n    });\r\n  }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.scene.image.Image;\r\nimport javafx.scene.material.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Text;\r\n\r\npublic class EarthSphere {\r\n    public static Sphere createEarthSphere() {\r\n        Sphere earthSphere = new Sphere(256);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(EarthSphere.class.getResourceAsStream(""/images/earth2.jpg"")));\r\n        earthSphere.setMaterial(material);\r\n        return earthSphere;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        pane.getChildren().add(testButton);\r\n        pane.setStyle(""-fx-background-color: red;"");\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), pane);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(pane, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.awt.Graphics2D;\r\nimport java.awt.Font;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR_with_text.png"";\r\n            String charset = ""UTF-8""; \r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            // Add text to the image\r\n            Graphics2D g = qrImage.createGraphics();\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            g.drawString(""User: John Doe"", 20, 530); // Add user name\r\n            g.drawString(""Event: My Event"", 20, 560); // Add event name\r\n            g.dispose();\r\n\r\n            // Save the image with text\r\n            ImageIO.write(qrImage, ""PNG"", new File(filePath));\r\n\r\n            System.out.println(""QR Code with text created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,public List<InsertOneModel<Document>> processPuzzles(List<Puzzle> puzzles) {\r\n    return puzzles.parallelStream()\r\n        .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n        .toList();\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"import com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\r\n\r\npublic static String convertMapToJsonWithCamelCase(Map<String, String> fields) throws Exception {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);\r\n    return mapper.writeValueAsString(fields);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Configuration\r\n@EnableWebSecurity\r\npublic class WebSecurityConfig  extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private DataSource dataSource;\r\n\r\n    @Autowired\r\n    private JwtTokenProvider jwtTokenProvider;\r\n\r\n    @Bean\r\n    public static PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors().and()\r\n                .authorizeRequests()\r\n                .antMatchers(""/resources/**"", ""/error"", ""/api/user/**"").permitAll()\r\n                .antMatchers(""/api/admin/**"").hasRole(""ADMIN"")\r\n                .anyRequest().fullyAuthenticated()\r\n                .and()\r\n                .logout().permitAll()\r\n                .logoutRequestMatcher(new AntPathRequestMatcher(""/api/user/logout"", ""POST""))\r\n                .and()\r\n                .formLogin().loginPage(""/api/user/login"").and()\r\n                .httpBasic().and()\r\n                .csrf().disable();\r\n\r\n        http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtTokenProvider));\r\n    }\r\n\r\n    @Autowired\r\n    public void configAuthentication(AuthenticationManagerBuilder authBuilder) throws Exception {\r\n        authBuilder.jdbcAuthentication()\r\n                .dataSource(dataSource)\r\n                .passwordEncoder(new BCryptPasswordEncoder())\r\n                .usersByUsernameQuery(""select username, password, enabled from usr01 where username=?"")\r\n                .authoritiesByUsernameQuery(""select username, role from usr01 where username=?"");\r\n    }\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer(){\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(""/**"").allowedOrigins(""*"").allowedMethods(""*"");\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void configure(WebSecurity web) throws Exception {\r\n        web.ignoring().antMatchers(""/resources/**"", ""/error"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public strictfp class StrictfpExample {\r\n    public static void main(String[] args) {\r\n        double maxDouble = Double.MAX_VALUE;\r\n        double result = (maxDouble * 2) / 4;\r\n        System.out.println(""Result: "" + result);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.lang.invoke.MethodHandles;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.LongBuffer;\r\n\r\npublic class LargeArray {\r\n    private static final VarHandle LONG_HANDLE;\r\n    private final ByteBuffer buffer;\r\n    private final LongBuffer longBuffer;\r\n\r\n    static {\r\n        try {\r\n            LONG_HANDLE = MethodHandles.byteArrayViewVarHandle(long[].class, java.nio.ByteOrder.nativeOrder());\r\n        } catch (NoSuchFieldException | IllegalAccessException e) {\r\n            throw new AssertionError(e);\r\n        }\r\n    }\r\n\r\n    public LargeArray(long size) {\r\n        buffer = ByteBuffer.allocateDirect((int) (size * Long.BYTES));\r\n        longBuffer = buffer.asLongBuffer();\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        LONG_HANDLE.set(buffer, index * Long.BYTES, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        return (long) LONG_HANDLE.get(buffer, index * Long.BYTES);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public BufferedImage rotateImage(BufferedImage img, double angle) {\r\n    int w = img.getWidth();\r\n    int h = img.getHeight();\r\n    BufferedImage rotatedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n    Graphics2D g = rotatedImg.createGraphics();\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\r\n    g.setBackground(new Color(255, 255, 255, 0));\r\n    g.clearRect(0, 0, w, h);\r\n    g.rotate(Math.toRadians(angle), w / 2, h / 2);\r\n    g.drawImage(img, 0, 0, null);\r\n    g.dispose();\r\n    return rotatedImg;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static void main(String[] args) throws Exception {\r\n    try (org.graalvm.polyglot.Context context = org.graalvm.polyglot.Context.create()) {\r\n        String jsCode = ""console.log('Hello, GraalVM!');"";\r\n        context.eval(""js"", jsCode);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n\r\n        System.out.println(result);\r\n\r\n        sc.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setStyle(""-fx-background-color: yellow;"");\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.combo-box-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.combo-box-popup .list-view {\r\n    -fx-background-color: yellow;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"package app.components;\r\n\r\nimport java.io.IOException;\r\n\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.StackPane;\r\n\r\npublic class Custom extends StackPane {\r\n\r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n\r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/19"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-"" />\r\n   </children>\r\n</StackPane>\r\n"
0,1,misclassified_in_Test_3.csv.csv,"java\r\npackage application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            BorderPane root = new BorderPane();\r\n            Scene scene = new Scene(root, 400, 400);\r\n            StackPane stack = new StackPane();\r\n\r\n            Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n            text.setFont(Font.font(16));\r\n            stack.getChildren().add(text);\r\n            root.getChildren().add(stack);\r\n\r\n            Color color1 = Color.RED;\r\n            Color color2 = Color.BLUE;\r\n            \r\n            Timeline timeline = new Timeline(\r\n                new KeyFrame(Duration.seconds(0), e -> text.setFill(color1)),\r\n                new KeyFrame(Duration.seconds(2), e -> text.setFill(color2))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.play();\r\n\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"java\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@Configuration\r\npublic class PropertyService {\r\n\r\n    @Autowired\r\n    private Environment environment;\r\n\r\n    public Map<String, String> getPropertiesByPrefix(String prefix) {\r\n        Map<String, String> properties = new HashMap<>();\r\n        for (String property : environment.getPropertyNames()) {\r\n            if (property.startsWith(prefix)) {\r\n                String key = property.substring(prefix.length() + 1);\r\n                String value = environment.getProperty(property);\r\n                properties.put(key, value);\r\n            }\r\n        }\r\n        return properties;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import okhttp3.*;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Example {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth2/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String SCOPE = ""your-scope"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = getOAuth2Token();\r\n        String response = makeApiRequest(token);\r\n        System.out.println(response);\r\n    }\r\n\r\n    public static String getOAuth2Token() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        RequestBody body = new FormBody.Builder()\r\n            .add(""grant_type"", GRANT_TYPE)\r\n            .add(""client_id"", CLIENT_ID)\r\n            .add(""client_secret"", CLIENT_SECRET)\r\n            .add(""scope"", SCOPE)\r\n            .build();\r\n        \r\n        Request request = new Request.Builder()\r\n            .url(TOKEN_URL)\r\n            .post(body)\r\n            .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                String responseBody = response.body().string();\r\n                // Extract token from response (depends on response format)\r\n                // Assuming it's in JSON format like {""access_token"": ""your_token""}\r\n                return responseBody; // You should parse the token from the response\r\n            } else {\r\n                throw new IOException(""Failed to get token: "" + response.message());\r\n            }\r\n        }\r\n    }\r\n\r\n    public static String makeApiRequest(String token) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n            .url(""https://example.com/api/resource"")\r\n            .header(""Authorization"", ""Bearer "" + token)\r\n            .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                return response.body().string();\r\n            } else {\r\n                throw new IOException(""API request failed: "" + response.message());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class GoogleMapEmbed extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n\r\n        String mapHtml = """";\r\n        try {\r\n            File myObj = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n            Scanner myReader = new Scanner(myObj);\r\n            while (myReader.hasNextLine()) {\r\n                mapHtml += myReader.nextLine();\r\n                mapHtml += ""\n"";\r\n            }\r\n            myReader.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        webEngine.loadContent(mapHtml);\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n        \r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Google Map Embed"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.FieldAccessExpr;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                methodDeclaration.findAll(FieldAccessExpr.class).forEach(fieldAccessExpr -> {\r\n                    String fieldName = fieldAccessExpr.getNameAsString();\r\n                    if (fieldAccessExpr.getParentNode().isPresent() && fieldAccessExpr.getParentNode().get() instanceof AssignExpr) {\r\n                        System.out.println(""    Write Access: "" + fieldName);\r\n                    } else if (fieldAccessExpr.getParentNode().isPresent() && fieldAccessExpr.getParentNode().get() instanceof UnaryExpr) {\r\n                        System.out.println(""    Write Access: "" + fieldName);\r\n                    } else {\r\n                        System.out.println(""    Read Access: "" + fieldName);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,import com.sun.source.tree.*;\r\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\r\nimport com.sun.tools.javac.tree.JCTree;\r\nimport com.sun.tools.javac.util.Context;\r\n\r\nimport javax.annotation.processing.Processor;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.type.TypeMirror;\r\n\r\npublic class SwitchExpressionTypeFinder {\r\n\r\n    public TypeMirror getSwitchExpressionType(SwitchTree switchTree) {\r\n        ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\r\n        JCTree tree = (JCTree) switchTreeExpression;\r\n        return tree.type;\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"@FXML\r\nprivate void initialize() {\r\n    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(PATH_TO_FXML));\r\n    fxmlLoader.setControllerFactory(applicationContext::getBean);\r\n    VBox listItem = fxmlLoader.load();\r\n    contentArea.getChildren().add(listItem);\r\n}\r\n\r\n@Bean\r\n@Scope(""prototype"")\r\npublic MyController myController() {\r\n    return new MyController();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public void createScatterChart(){\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n\r\n    for (int i = 0; i < this.r.size(); i++) {\r\n        series1.getData().add(new XYChart.Data<>(this.r.get(i) * Math.cos(Math.toRadians(this.nodes.get(i))),\r\n                                                  this.r.get(i) * Math.sin(Math.toRadians(this.nodes.get(i)))));\r\n    }\r\n\r\n    scatterChart.getData().add(series1);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(scatterChart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable\r\n    ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n\r\n        // Set height to match parent\r\n        ViewGroup.LayoutParams layoutParams = v.getLayoutParams();\r\n        layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        v.setLayoutParams(layoutParams);\r\n\r\n        return v;\r\n    }\r\n\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS""))\r\n            .filter(object -> object.objectStatus().equals(""ACTIVE""))\r\n            .filter(object -> object.locale().equals(""en-US""))\r\n            .findFirst()\r\n            .map(CustomObject::getUrl)\r\n            .orElseGet(() -> listOfObjects.stream()\r\n                .filter(object -> object.objectType().equals(""BUSINESS""))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .findFirst()\r\n                .get()\r\n                .getUrl());\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n                StyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.RED);\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n                StyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.BLUE);\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> updateTimeline());\r\n            color2.addListener((obs, o, v) -> updateTimeline());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) timeline.get().play();\r\n                else timeline.get().stop();\r\n            });\r\n        }\r\n\r\n        private void updateTimeline() {\r\n            if (timeline.get() != null) timeline.get().stop();\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        private Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                    new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), LINEAR)),\r\n                    new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), LINEAR))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                    ""-color1"", PaintConverter.getInstance(), Color.RED) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n                    ""-color2"", PaintConverter.getInstance(), Color.BLUE) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@GetMapping(path = ""/file"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName,\r\n        @RequestParam String bucketName, @RequestParam String projectName) {\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n    ReadChannel readChannel = blob.reader();\r\n\r\n    try {\r\n        String contentType = Files.probeContentType(Paths.get(fileName));\r\n        InputStreamResource inputStreamResource = new InputStreamResource(Channels.newInputStream(readChannel));\r\n        return ResponseEntity.ok().contentType(MediaType.valueOf(contentType))\r\n                .header(""Content-Disposition"", ""attachment; filename="" + fileName)\r\n                .body(inputStreamResource);\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().body(null);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    myEntityRepository repo;\r\n\r\n    @MockBean\r\n    private myEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        Mockito.when(entityListener.doThis()).thenReturn(expected);\r\n\r\n        myEntity e = new myEntity();\r\n        repo.save(e);\r\n\r\n        assertThat(e.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public List<int[]> patternSearch(int[][] T, int[][] P) {\r\n    List<int[]> result = new ArrayList<>();\r\n    int m = T.length, n = T[0].length;\r\n    int u = P.length, v = P[0].length;\r\n\r\n    for (int i = 0; i <= m - u; i++) {\r\n        for (int j = 0; j <= n - v; j++) {\r\n            boolean match = true;\r\n            for (int x = 0; x < u; x++) {\r\n                for (int y = 0; y < v; y++) {\r\n                    if (P[x][y] != 0 && P[x][y] != T[i + x][j + y]) {\r\n                        match = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!match) break;\r\n            }\r\n            if (match) result.add(new int[]{i, j});\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Configuration\r\npublic class LocaleConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new LocaleInterceptor()).addPathPatterns(""/**"");\r\n    }\r\n\r\n    public class LocaleInterceptor implements HandlerInterceptor {\r\n        private final Set<String> allowedLocales = new HashSet<>(Arrays.asList(""en"", ""hi""));\r\n\r\n        @Override\r\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n            String localeParam = request.getParameter(""locale"");\r\n            if (localeParam != null && !allowedLocales.contains(localeParam)) {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + localeParam);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,import java.lang.reflect.Constructor;\r\n\r\npublic class ReflectionExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parentInstance = constructor.newInstance();\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"import java.security.*;\r\nimport java.security.spec.*;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static PrivateKey getPrivateKey(String privateKey) throws Exception {\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""EdDSA"");\r\n        return keyFactory.generatePrivate(keySpec);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\n        PrivateKey pkey = getPrivateKey(privateKey);\r\n        System.out.println(pkey);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.function.Function;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1000); // timeout after 1000 ms\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Timeout reached"");\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeoutMillis) throws TimeoutException {\r\n        ExecutorService executor = Executors.newSingleThreadExecutor();\r\n        Callable<Void> task = () -> {\r\n            while (loop-- >= 0) {\r\n                counter.get().incrementAndGet();\r\n                callback.apply(null);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Future<Void> future = executor.submit(task);\r\n        try {\r\n            future.get(timeoutMillis, TimeUnit.MILLISECONDS);\r\n        } catch (TimeoutException e) {\r\n            future.cancel(true);\r\n            throw e;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            executor.shutdownNow();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class ETLPipeline {\r\n    private final Tracer tracer;\r\n\r\n    public ETLPipeline(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void executeStep(DataPackage obj, String processorName) {\r\n        byte[] traceIdBytes = obj.getUniqueId().getBytes();\r\n        byte[] paddedArray = new byte[16];\r\n        System.arraycopy(traceIdBytes, 0, paddedArray, 16 - traceIdBytes.length, traceIdBytes.length);\r\n\r\n        SpanContext spanContext = SpanContext.create(\r\n                TraceId.fromBytes(paddedArray),\r\n                SpanId.fromBytes(paddedArray),\r\n                TraceFlags.getDefault(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context context = Context.root().with(parentSpan);\r\n\r\n        Span span = tracer.spanBuilder(""Step1"")\r\n                .setParent(context)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                // ETL Step code here\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"class LRUCache {\r\n    int capacity;\r\n    Map<Integer, Integer> map;\r\n    Map<Integer, DoublyLinkedNode> nodeMap;\r\n    DoublyLinkedNode head, tail;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        map = new HashMap<>();\r\n        nodeMap = new HashMap<>();\r\n        head = new DoublyLinkedNode(-1, -1);\r\n        tail = new DoublyLinkedNode(-1, -1);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (map.containsKey(key)) {\r\n            moveToHead(key);\r\n            return map.get(key);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            map.put(key, value);\r\n            moveToHead(key);\r\n        } else {\r\n            if (map.size() >= capacity) {\r\n                removeLRU();\r\n            }\r\n            map.put(key, value);\r\n            addNodeToHead(key);\r\n        }\r\n    }\r\n\r\n    private void moveToHead(int key) {\r\n        DoublyLinkedNode node = nodeMap.get(key);\r\n        removeNode(node);\r\n        addNodeToHead(node);\r\n    }\r\n\r\n    private void removeLRU() {\r\n        DoublyLinkedNode node = tail.prev;\r\n        removeNode(node);\r\n        map.remove(node.key);\r\n    }\r\n\r\n    private void addNodeToHead(int key) {\r\n        DoublyLinkedNode node = new DoublyLinkedNode(key, map.get(key));\r\n        nodeMap.put(key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n\r\n    private void removeNode(DoublyLinkedNode node) {\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    class DoublyLinkedNode {\r\n        int key, value;\r\n        DoublyLinkedNode prev, next;\r\n\r\n        public DoublyLinkedNode(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    public final int width = 800;\r\n    public final int length = 600;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 75;\r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        drawImage(g);\r\n    }\r\n\r\n    private void drawImage(Graphics g) {\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) {\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if (rightPressed) {\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if (upPressed) {\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if (downPressed) {\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n    }\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n    private int n = 0;\r\n\r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 50;\r\n        int newHeight = 50;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            n++;\r\n            System.out.println(""reset"" + n);\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(800, 600);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n\r\n                frame.setLayout(null);\r\n\r\n                surface.setBounds(0, 0, 800, 600);\r\n                frame.add(surface);\r\n\r\n                blueDot.setBounds(0, 0, 800, 600);\r\n                frame.add(blueDot);\r\n\r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n\r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n\r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n\r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", (currentValue >> 32) & 0xFFFF, (currentValue >> 16) & 0xFFF, currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.converter.DoubleStringConverter;\r\nimport java.text.DecimalFormat;\r\nimport java.util.regex.Pattern;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class TestPane extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.00, 20.00, 0.00, 0.25);\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        DecimalFormat format = new DecimalFormat(""+#0.00;-#0.00"");\r\n\r\n        Pattern validDoubleText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validDoubleText.matcher(newText).matches()) {\r\n                return c;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(new DoubleStringConverter(), 0.00, filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().addListener((obs, oldValue, newValue) -> {\r\n            editor.setText(format.format(newValue));\r\n        });\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(spinner);\r\n\r\n        Scene scene = new Scene(root, 300, 250);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    CustomAuthenticationFilter customAuthenticationFilter = new CustomAuthenticationFilter(authenticationManagerBean(), accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n    customAuthenticationFilter.setFilterProcessesUrl(""/api/login"");\r\n\r\n    http.csrf().disable()\r\n        .sessionManagement()\r\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n        .authorizeRequests()\r\n            .antMatchers(""/error"").permitAll()\r\n            .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n            .anyRequest().authenticated()\r\n        .addFilter(customAuthenticationFilter)\r\n        .addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic AuthenticationManager authenticationManagerBean() throws Exception {\r\n    return authenticationManager();\r\n}\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private static SSLSocketFactory createSslSocketFactory(\r\n        String caCertPath, String caCertPassword, String userCertPath, String userCertPassword)\r\n        throws IOException, GeneralSecurityException {\r\n\r\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n    trustManagerFactory.init(trustStore);\r\n\r\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n    keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n    SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n    sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\r\n\r\n    return sslContext.getSocketFactory();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,@Override\r\npublic void visitCode() {\r\n    super.visitCode();\r\n    instrument();\r\n    mv.visitInsn(Opcodes.ICONST_0);\r\n    mv.visitInsn(Opcodes.ISTORE);\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"@SupportedAnnotationTypes({""com.company.generator.GenerateAnnotation""})\r\n@AutoService(Processor.class)\r\npublic class EnumAnnotationProcessor extends AbstractProcessor {\r\n\r\n    private static final Map<String, TypeElement> generatedEnumTypes = new HashMap<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) {\r\n            return false;\r\n        }\r\n\r\n        annotations.forEach(annotation -> {\r\n            roundEnv.getElementsAnnotatedWith(annotation).forEach(element -> {\r\n                if (element.getKind() == ElementKind.ENUM) {\r\n                    generateAnnotationForEnum((TypeElement) element);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (!roundEnv.getElementsAnnotatedWith(MyEnumAnnotation.class).isEmpty()) {\r\n            generateCodeBasedOnEnumAnnotations(roundEnv);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private void generateAnnotationForEnum(TypeElement enumElement) {\r\n        String enumName = enumElement.getSimpleName().toString();\r\n        // Generate @MyEnumAnnotation for the enum and store it in generatedEnumTypes\r\n        TypeElement generatedAnnotation = createGeneratedAnnotation(enumName);\r\n        generatedEnumTypes.put(enumName, generatedAnnotation);\r\n    }\r\n\r\n    private TypeElement createGeneratedAnnotation(String enumName) {\r\n        // Implement code to generate annotation and return TypeElement\r\n        return null; // Placeholder for actual implementation\r\n    }\r\n\r\n    private void generateCodeBasedOnEnumAnnotations(RoundEnvironment roundEnv) {\r\n        roundEnv.getElementsAnnotatedWith(MyEnumAnnotation.class).forEach(element -> {\r\n            // Generate code based on @MyEnumAnnotation\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private List<String> transactionsList;\r\n\r\n    public List<String> getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(List<String> transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n}\r\n\r\npublic void transactionsReceived() throws JsonProcessingException {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\r\n    Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    public void testDeserialize() throws IOException, ParseException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser mockParser = Mockito.mock(JsonParser.class);\r\n        DeserializationContext mockContext = Mockito.mock(DeserializationContext.class);\r\n\r\n        String testDate = ""2025-03-17T00:00:00Z"";\r\n        Mockito.when(mockParser.getText()).thenReturn(testDate);\r\n\r\n        Date expectedDate = new StdDateFormat().parse(testDate);\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n\r\n        assertEquals(expectedDate, result);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeInvalidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser mockParser = Mockito.mock(JsonParser.class);\r\n        DeserializationContext mockContext = Mockito.mock(DeserializationContext.class);\r\n\r\n        String invalidDate = ""invalid-date"";\r\n        Mockito.when(mockParser.getText()).thenReturn(invalidDate);\r\n\r\n        MyCustomException exception = assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(mockParser, mockContext);\r\n        });\r\n\r\n        assertEquals(""Invalid date passed, ISO 8601 is expected"", exception.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    String name;\r\n    String motive;\r\n\r\n    @Value(""Adventure of War"")\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    @Value(""A place for War"")\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        ApplicationContext IOC = new AnnotationConfigApplicationContext(Company.class);\r\n        Company c1 = IOC.getBean(Company.class);\r\n        System.out.println(c1);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails healthUser = User.withUsername(specialUser.getId())\r\n                .password(passwordEncoder().encode(specialUser.getPassword()))\r\n                .roles(""SPECIALROLE"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(healthUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n                .and()\r\n                .userDetailsService(inMemoryUserDetailsService())\r\n                .antMatcher(""/very-special-path/**"")\r\n                .authorizeRequests(auth -> auth\r\n                        .anyRequest().authenticated());\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n                .and()\r\n                .userDetailsService(customUserDetailsService())\r\n                .authorizeRequests(auth -> auth\r\n                        .anyRequest().authenticated());\r\n        return http.build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n    .onItem().transformToMultiAndMerge(tick -> {\r\n        System.out.println(""Tick:"" + tick);\r\n        return Multi.createFrom().emitter(emitter -> {\r\n            service.getTransactions().toMulti()\r\n                .onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n                .subscribe().with(transaction -> {\r\n                    if (!verification.isOngoing()) {\r\n                        emitter.fail(new TransactionVerificationException());\r\n                    } else {\r\n                        boolean transactionFound = transaction.getAmount().stream().anyMatch(\r\n                            amount -> amount.getQuantity().equals(""test""));\r\n                        if (transactionFound) {\r\n                            emitter.emit(transaction);\r\n                            emitter.complete();\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    })\r\n    .onItem().invoke(transaction -> log.info(transaction))\r\n    .onFailure().invoke(x -> x.printStackTrace())\r\n    .subscribe().with(transaction -> {}, failure -> {});\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n        \r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n        \r\n        spinnerMin.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newValue, 6, spinnerMax.getValue()));\r\n            if (newValue.equals(spinnerMax.getValue())) {\r\n                spinnerMin.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n                spinnerMax.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n            } else {\r\n                spinnerMin.getEditor().setStyle("""");\r\n                spinnerMax.getEditor().setStyle("""");\r\n            }\r\n        });\r\n        \r\n        spinnerMax.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newValue, spinnerMin.getValue()));\r\n            if (newValue.equals(spinnerMin.getValue())) {\r\n                spinnerMin.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n                spinnerMax.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n            } else {\r\n                spinnerMin.getEditor().setStyle("""");\r\n                spinnerMax.getEditor().setStyle("""");\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(spinnerMin, spinnerMax);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private void processTemplateWithUTF8(String templateName, Context context) {\r\n    TemplateEngine templateEngine = new TemplateEngine();\r\n    ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n    resolver.setCharacterEncoding(""UTF-8"");\r\n    resolver.setTemplateMode(TemplateMode.XML);\r\n    templateEngine.setTemplateResolver(resolver);\r\n    \r\n    try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8))) {\r\n        templateEngine.process(templateName, context, out);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    TestThymeleafUTF8 app = new TestThymeleafUTF8();\r\n    Context context = new Context();\r\n    context.setVariable(""TEST_AR"", ""ARABIC_TEXT"");\r\n    context.setVariable(""TEST_HE"", ""HEBREW_TEXT"");\r\n    context.setVariable(""TEST_CN"", ""CHINESE_TEXT"");\r\n    app.processTemplateWithUTF8(""test_template.xml"", context);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n            .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n\r\n    pipeline.run().waitUntilFinish();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Bean\r\npublic OpenAPI customOpenAPI() {\r\n    return new OpenAPI()\r\n            .info(new Info().title(""API Documentation"").version(""1.0""))\r\n            .components(new Components()\r\n                .addResponses(""ResponseEnvelope"", new ApiResponse().description(""Wrapper response"")\r\n                    .content(new Content().addMediaType(""application/json"", new MediaType().schema(new ObjectSchema()\r\n                        .addProperty(""status"", new StringSchema().example(""OK""))\r\n                        .addProperty(""result"", new ObjectSchema().additionalProperties(new StringSchema()))))));\r\n}\r\n\r\n@Schema(name = ""ResponseEnvelope"", description = ""Wrapper response"")\r\npublic class ResponseEnvelope<T> {\r\n    @Schema(description = ""Response status"", example = ""OK"")\r\n    private String status;\r\n    \r\n    @Schema(description = ""The result object"")\r\n    private T result;\r\n    \r\n    // getters and setters\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\nimport org.apache.spark.sql.connect.grpc.ServerInterceptor as SparkServerInterceptor;\r\n\r\npublic class Interceptor implements SparkServerInterceptor {\r\n\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private <T> void positionEntity(Class<T> entityClass, Object... params) {\r\n    int x;\r\n    int y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = entityClass.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class)\r\n                        .newInstance(x, y, params);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Value(""${spring.elasticsearch.uris}"")\r\n    private String elasticsearchUris;\r\n\r\n    @Value(""${spring.elasticsearch.username}"")\r\n    private String username;\r\n\r\n    @Value(""${spring.elasticsearch.password}"")\r\n    private String password;\r\n\r\n    @Value(""${spring.elasticsearch.ssl.certPath}"")\r\n    private String certPath;\r\n\r\n    @Bean\r\n    public RestHighLevelClient client() throws Exception {\r\n        RestClientBuilder builder = RestClient.builder(HttpHost.create(elasticsearchUris));\r\n\r\n        if (certPath != null && !certPath.isEmpty()) {\r\n            Path path = Paths.get(certPath);\r\n            SSLContext sslContext = SSLContexts.custom()\r\n                    .loadTrustMaterial(path.toFile(), null)\r\n                    .build();\r\n\r\n            builder.setHttpClientConfigCallback(httpClientBuilder -> \r\n                httpClientBuilder.setSSLContext(sslContext)\r\n                                 .setDefaultCredentialsProvider(credentialsProvider())\r\n            );\r\n        }\r\n\r\n        return new RestHighLevelClient(builder);\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchRestTemplate elasticsearchRestTemplate() {\r\n        return new ElasticsearchRestTemplate(client());\r\n    }\r\n\r\n    private CredentialsProvider credentialsProvider() {\r\n        BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n        credentialsProvider.setCredentials(AuthScope.ANY, \r\n            new UsernamePasswordCredentials(username, password));\r\n        return credentialsProvider;\r\n    }\r\n}\r\n\r\nyaml\r\nspring:\r\n  elasticsearch:\r\n    uris: http://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certPath: /path/to/cert.pem\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class Task implements Runnable {\r\n\r\n    private final String x;\r\n    private static final ConcurrentMap<String, Lock> locks = new ConcurrentHashMap<>();\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock lock = getLock(x);\r\n        try {\r\n            lock.lock();\r\n            System.out.println(x);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        return locks.computeIfAbsent(key, k -> new ReentrantLock());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n\r\n        executor.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.util.*;\r\n\r\npublic class CoordinateConverter {\r\n\r\n    public static int[][] convertStringToIntArray(String str) {\r\n        String[] rows = str.replaceAll(""[\\[\\]]"", """").split(""],"");\r\n        int[][] result = new int[rows.length][2];\r\n        \r\n        for (int i = 0; i < rows.length; i++) {\r\n            String[] values = rows[i].replaceAll(""[\\[\\]]"", """").split("","");\r\n            result[i][0] = Integer.parseInt(values[0].trim());\r\n            result[i][1] = Integer.parseInt(values[1].trim());\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String str = ""[[445, 292], [585, 331], [612, 223], [205, 532]]"";\r\n        int[][] coordinates = convertStringToIntArray(str);\r\n        \r\n        for (int[] coord : coordinates) {\r\n            System.out.println(Arrays.toString(coord));\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,import java.util.Random;\r\n\r\npublic class CardShuffle {\r\n\r\n    public static void shuffleDeck(Card[] unshuffledDeck) {\r\n        Random shuffleRandom = new Random();\r\n        int cardAmount = unshuffledDeck.length;\r\n        Card[] shuffledDeck = new Card[cardAmount];\r\n        boolean[] used = new boolean[cardAmount];\r\n\r\n        for (int i = 0; i < cardAmount; i++) {\r\n            int j;\r\n            do {\r\n                j = shuffleRandom.nextInt(cardAmount);\r\n            } while (used[j]);\r\n            shuffledDeck[i] = unshuffledDeck[j];\r\n            used[j] = true;\r\n        }\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"import org.junit.jupiter.api.extension.BeforeAllCallback;\r\nimport org.junit.jupiter.api.extension.AfterAllCallback;\r\nimport org.junit.jupiter.api.extension.ExtensionContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.extension.RegisterExtension;\r\nimport org.junit.jupiter.api.extensions.ExtensionContext;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\r\npublic class JUnit5Suite {\r\n  \r\n  @RegisterExtension\r\n  public static JUnit5Server MY_SERVER = new JUnit5Server();\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n  @Override\r\n  public void beforeAll(ExtensionContext context) throws Exception {\r\n    // start the server\r\n  }\r\n\r\n  @Override\r\n  public void afterAll(ExtensionContext context) throws Exception {\r\n    // stop the server\r\n  }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .doOnNext(analysis -> analysis.setResults(results))\r\n            .flatMap(computeSCARepository::save)\r\n            .then();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"btnGenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        value1 = Long.parseLong(txtFirst.getText().toString());\r\n        value2 = Long.parseLong(txtSecond.getText().toString());\r\n        for(long i = value1; i <= value2; i++){\r\n            list.add(String.format(""%011d"", i));\r\n            li.setAdapter(arrayAdapter);\r\n        }\r\n    }\r\n});\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.io.File;\r\nimport java.lang.management.ManagementFactory;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class FileDescriptorChecker {\r\n\r\n    public static List<String> findProcessesHoldingFile(String filePath) {\r\n        List<String> result = new ArrayList<>();\r\n        String pid = getCurrentPid();\r\n        \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(""cmd.exe /c handle.exe -accepteula "" + filePath);\r\n            process.waitFor();\r\n            String output = new String(process.getInputStream().readAllBytes());\r\n            String[] lines = output.split(""\n"");\r\n\r\n            for (String line : lines) {\r\n                if (line.contains(filePath)) {\r\n                    result.add(line);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    private static String getCurrentPid() {\r\n        String name = ManagementFactory.getRuntimeMXBean().getName();\r\n        return name.split(""@"")[0];\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String filePath = ""C:\\path\\to\\your\\file.txt"";\r\n        List<String> processes = findProcessesHoldingFile(filePath);\r\n        \r\n        for (String process : processes) {\r\n            System.out.println(process);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.*;\r\nimport org.w3c.dom.*;\r\nimport javax.xml.parsers.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\nimport javax.xml.xpath.*;\r\n\r\npublic class TransformDemo1 {\r\n    public static void main(String args[]) throws Exception {\r\n        String xsltfilename = ""D:\\Demo\\src\\test\\java\\StringXml\\_ignoreText.xsl"";\r\n        File xsltfile = new File(xsltfilename);\r\n        String strSource = ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""no\""?>\n"" +\r\n                ""<SOAP-ENV:Envelope xmlns:SOAP-ENV=\""http://schemas.xmlsoap.org/soap/envelope/\"" xmlns:xsd=\""http://www.w3.org/1999/XMLSchema\"" xmlns:xsi=\""http://www.w3.org/1999/XMLSchema-instance\"">\n"" +\r\n                ""    <SOAP-ENV:Body>\n"" +\r\n                ""        <return>\n"" +\r\n                ""            <ICD10Flag>hello</ICD10Flag>\n"" +\r\n                ""            <status>123</status>\n"" +\r\n                ""        </return>\n"" +\r\n                ""    </SOAP-ENV:Body>\n"" +\r\n                ""</SOAP-ENV:Envelope>\n"";\r\n\r\n        InputStream input = new ByteArrayInputStream(strSource.getBytes(""UTF-8""));\r\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n        StreamSource xsltStream = new StreamSource(xsltfile);\r\n        Transformer transformer = transformerFactory.newTransformer(xsltStream);\r\n\r\n        StreamSource xmlStream = new StreamSource(input);\r\n        StringWriter output = new StringWriter();\r\n        StreamResult result = new StreamResult(output);\r\n        transformer.transform(xmlStream, result);\r\n\r\n        System.out.println(output.toString());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Bean\r\n@Order(10)\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .securityMatcher(""/**"")\r\n        .authorizeHttpRequests(authorizeRequests ->\r\n            authorizeRequests\r\n                .requestMatchers(createAntRequestMatchers(whitelist))\r\n                .permitAll().anyRequest()\r\n                .authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... );\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain filterChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    return http\r\n        .securityMatcher(""/**"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class)\r\n        .build();\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.doctree.DocCommentTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Elements;\r\nimport javax.lang.model.util.Types;\r\n\r\npublic String getFullyQualifiedNameOfLinkReference(LinkTree linkTree, DocTrees docTrees, Trees trees, Elements elements, Types types) {\r\n    String reference = linkTree.getReference().getSignature();\r\n    Element element = trees.getElement(linkTree);\r\n    \r\n    if (element != null) {\r\n        TypeMirror typeMirror = element.asType();\r\n        return types.asElement(typeMirror).toString();\r\n    } else {\r\n        return reference; // fallback to the reference itself if element is null\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n        ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n        ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (input.length() == 2) {\r\n                if (nameBinding != null) nameBinding.dispose();\r\n                if (input.startsWith(""A"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion() + "" from list 1.""));\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion() + "" from list 2.""));\r\n                }\r\n            } else if (nameBinding != null && input.length() < 2) {\r\n                nameBinding.dispose();\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private void exportXls() {\r\n    try (OutputStream os = new FileOutputStream(""test.xls"");\r\n         Workbook wb = new HSSFWorkbook()) {\r\n        Sheet sh = wb.createSheet(""test"");\r\n        Row r = sh.createRow(0);\r\n        \r\n        // Create a CellStyle object once and reuse it for each cell\r\n        CellStyle cs = wb.createCellStyle();\r\n        cs.setFillBackgroundColor(IndexedColors.WHITE.index);\r\n        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n        cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n\r\n        for (int i = 0; i < 50; i++) {\r\n            Cell c = r.createCell(i);\r\n            c.setCellValue(i + 1);\r\n            c.setCellStyle(cs);\r\n        }\r\n\r\n        wb.write(os);\r\n        os.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private void findOverlappingSets(Map<String, Set<Long>> myMap) {\r\n    myMap.entrySet().stream()\r\n        .flatMap(entry1 -> myMap.entrySet().stream()\r\n            .filter(entry2 -> !entry1.getKey().equals(entry2.getKey()) && !Collections.disjoint(entry1.getValue(), entry2.getValue()))\r\n            .map(entry2 -> new AbstractMap.SimpleEntry<>(entry1.getKey(), entry2.getKey())))\r\n        .forEach(pair -> System.out.println(pair.getKey() + "" and "" + pair.getValue()));\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,public Float someFunction(final AggregationType e) {\r\n    return (float) provides.stream()\r\n        .mapToDouble(this::someFunc)\r\n        .collect(\r\n            switch (e) {\r\n                case MIN -> Collectors.minBy(Double::compare);\r\n                case MAX -> Collectors.maxBy(Double::compare);\r\n                case AVERAGE -> Collectors.averagingDouble(d -> d);\r\n            })\r\n        .orElse(-1);\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<BaseEvent<C, P>, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<BaseEvent<AddItemCommand, AddItemPayload>, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.Set;\r\n\r\npublic class CoreAndNonCoreModules {\r\n\r\n    public static void main(String[] args) {\r\n        Set<ModuleReference> modules = ModuleFinder.ofSystem().findAll();\r\n\r\n        modules.forEach(module -> {\r\n            String moduleName = module.descriptor().name();\r\n            ClassLoader classLoader = module.reference().getClass().getClassLoader();\r\n            \r\n            if (classLoader == null) {\r\n                System.out.println(moduleName + "" is part of core (boot classloader)"");\r\n            } else {\r\n                System.out.println(moduleName + "" is part of non-core (platform class loader)"");\r\n            }\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMuuuu"")\r\n                .toFormatter(Locale.forLanguageTag(""es-ES"")));\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class FileOverwriteExample {\r\n    public static void main(String[] args) throws IOException {\r\n        try (FileWriter fw = new FileWriter(""test.txt"")) {\r\n            fw.write(""123456789"");\r\n        }\r\n\r\n        try (FileWriter fw = new FileWriter(""test.txt"", false)) {\r\n            fw.write(""hello6789"");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class CollectionController implements Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n        \r\n        authorDirectorColumn.setCellValueFactory(cellData -> {\r\n            LibraryItem item = cellData.getValue();\r\n            if (item instanceof Book) {\r\n                return new SimpleStringProperty(((Book) item).getAuthor());\r\n            } else if (item instanceof Movie) {\r\n                return new SimpleStringProperty(((Movie) item).getDirector());\r\n            }\r\n            return null;\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.*;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\npublic class PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    @Test\r\n    public void testUpdatePrice() {\r\n        UUID priceUuid = UUID.randomUUID();\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(100.0);\r\n\r\n        Price existingPrice = new Price();\r\n        existingPrice.setItemCode(1);\r\n        existingPrice.setTitle(""Old Price"");\r\n        existingPrice.setPriceAmount(50.0);\r\n\r\n        Price updatedPrice = new Price();\r\n        updatedPrice.setItemCode(1);\r\n        updatedPrice.setTitle(""Old Price"");\r\n        updatedPrice.setPriceAmount(100.0);\r\n\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(existingPrice)).thenReturn(updatedPrice);\r\n\r\n        PriceDTO result = priceService.update(priceUuid, request);\r\n\r\n        assertEquals(100.0, result.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@EnableMongoRepositories(basePackageClasses = PersistencyRepository.class, mongoTemplateRef = ""mongoTemplate"")\r\n@EnableRedisRepositories(basePackageClasses = CacheRepository.class, redisTemplateRef = ""redisTemplate"")\r\n@SpringBootApplication\r\npublic class StoreApplication {\r\n\r\n    @Bean\r\n    public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter mongoConverter) {\r\n        return new MongoTemplate(mongoDbFactory, mongoConverter);\r\n    }\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(factory);\r\n        return template;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class FxWinTaskbar extends Application {\r\n\r\n    public static final String GUID_FORMAT = ""{%s}"";\r\n    public static final String CLSID_CONST = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String IID_ITASKBAR_LIST_3 = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        var button = new javafx.scene.control.Button(""Click Me"");\r\n        button.setOnAction(e -> handleClick());\r\n\r\n        var root = new javafx.scene.layout.StackPane(button);\r\n        var scene = new javafx.scene.Scene(root, 300, 200);\r\n\r\n        stage.setTitle(""JavaFX Stage with Button"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    void handleClick() {\r\n        long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            try (var arena = Arena.ofConfined()) {\r\n                var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n                var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n                var clsid = CLSID.allocate(arena);\r\n                var iidTaskbarList3 = IID.allocate(arena);\r\n                var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""CoInitialize failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""CLSIDFromString failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""IIDFromString failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    if (hr == ShObjIdl_core_h.REGDB_E_CLASSNOTREG()) {\r\n                        System.out.println(""COM class is not registered!"");\r\n                    }\r\n                    throw new RuntimeException(""CoCreateInstance failed with error code: "" + hr);\r\n                }\r\n\r\n                var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n                var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n                MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n                MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n                MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""HrInit failed with error code: "" + hr);\r\n                }\r\n\r\n                MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n                }\r\n\r\n                for (int i = 0; i < 100; i+=20) {\r\n                    System.out.println(""Progress is: "" + i);\r\n                    MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                    if (hr != ShObjIdl_core_h.S_OK()) {\r\n                        throw new RuntimeException(""SetProgressValue failed with error code: "" + hr);\r\n                    }\r\n                    Thread.sleep(500);\r\n                }\r\n\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NORMAL());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n                }\r\n\r\n            } catch (Throwable ex) {\r\n                ex.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public void saveFileToExternalStorage(String assetPath, String fileName) {\r\n    AssetManager assetManager = requireContext().getAssets();\r\n    FileOutputStream out = null;\r\n    InputStream in = null;\r\n    Context context = requireContext();\r\n    try {\r\n        File databasesFolder = new File(context.getExternalFilesDir(null).getParent(), ""com.mydb.orca/databases"");\r\n        if (!databasesFolder.exists()) {\r\n            databasesFolder.mkdirs();\r\n        }\r\n        File outFile = new File(databasesFolder, fileName);\r\n        in = assetManager.open(assetPath + ""/"" + fileName);\r\n        out = new FileOutputStream(outFile);\r\n        copyFile(in, out);\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        try {\r\n            if (in != null) in.close();\r\n            if (out != null) out.flush();\r\n            if (out != null) out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nprivate void copyFile(InputStream in, OutputStream out) throws IOException {\r\n    byte[] buffer = new byte[1024];\r\n    int read;\r\n    while ((read = in.read(buffer)) != -1) {\r\n        out.write(buffer, 0, read);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>(2); // Pre-allocate capacity\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println(String.valueOf(t2 - t1) + ""\n"" + String.valueOf(t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    if (ApplicationImages.getImage() != null) {\r\n        double scaleFactor = Math.min((double) getParent().getWidth() / 1280, (double) getParent().getHeight() / 859);\r\n        int width = (int) (1280 * scaleFactor);\r\n        int height = (int) (859 * scaleFactor);\r\n        int x = (getParent().getWidth() - width) / 2;\r\n        int y = (getParent().getHeight() - height) / 2;\r\n\r\n        g.drawImage(ApplicationImages.getImage().getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH), x, y, this);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Main {\r\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<? extends Future<String>> futures;\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                              .mapToObj(i -> new Task(i))\r\n                              .map(executorService::submit)\r\n                              .toList();\r\n        }\r\n        \r\n        for (Future<String> future : futures) {\r\n            future.get();\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(format(""The total time of execution was: {0} ms"", stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n    }\r\n}\r\n\r\nclass Task implements Callable<String> {\r\n    private final int taskId;\r\n\r\n    public Task(int taskId) {\r\n        this.taskId = taskId;\r\n    }\r\n\r\n    @Override\r\n    public String call() {\r\n        System.out.println(format(""Task: {0} started"", taskId));\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        Connection connection = null;\r\n        String result = null;\r\n        try {\r\n            connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"");\r\n            System.out.println(format(""Task: {0} connection established"", taskId));\r\n            var statement = connection.createStatement();\r\n            System.out.println(format(""Task: {0} executes SQL statement"", taskId));\r\n            ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n            while (resultSet.next()) {\r\n                result = resultSet.getString(""output"");\r\n            }\r\n            statement.close();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n            System.out.println(format(""Task: {0} connection closed"", taskId));\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(format(""Task: {0} completed in {1} ms"", taskId, stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n        return result;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class Main {\r\n\r\n    public static <T, U extends TaskResult<T>, V extends ITask<T>> List<U> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(task -> (U) task.make())\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n    \r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    String dbg = """";\r\n    for(String s : comm)\r\n        dbg += s + "" "";\r\n    System.out.println(""COMMAND: "" + dbg);\r\n    \r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n        \r\n        // get the output\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        \r\n        int exitVal = p.waitFor();\r\n        System.out.println(""Exited with error code "" + exitVal);\r\n\r\n        p.destroy();\r\n        \r\n    } catch (Exception ex) {\r\n        Utility.logException(""Utility(SystemWindows)"", ex);\r\n        return null;\r\n    }\r\n    \r\n    return out;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(""[""); // array begin\r\n\r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write("","");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    \r\n    respWriter.write(""]""); // array end\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static void parseTsv(String filePath) throws Exception {\r\n    try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\n            Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n            .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n            .build()) {\r\n        String[] line;\r\n        while ((line = reader.readNext()) != null) {\r\n            System.out.println(line[0] + "" "" + line[1]);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Component\r\npublic class UtilFactory {\r\n\r\n    @Autowired\r\n    private ApplicationContext applicationContext;\r\n\r\n    public Util getUtil(String activeUtil) {\r\n        if (""UtilTwo"".equalsIgnoreCase(activeUtil)) {\r\n            return applicationContext.getBean(UtilTwo.class);\r\n        }\r\n        return applicationContext.getBean(UtilOne.class);\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n\r\n    @Value(""${active.util}"")\r\n    private String activeUtil;\r\n\r\n    public void useClient() {\r\n        Util util = utilFactory.getUtil(activeUtil);\r\n        util.getClient();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static boolean search(int[][] mat, int num) {\r\n    int n = mat.length, r = n / 2, c = n / 2;\r\n    while (r >= 0 && r < n && c >= 0 && c < n) {\r\n        if (mat[r][c] == num) return true;\r\n        if (num < mat[r][c]) {\r\n            if (c > 0 && num >= mat[r][c - 1]) c--;\r\n            else r--;\r\n        } else {\r\n            if (r < n - 1 && num <= mat[r + 1][c]) r++;\r\n            else c++;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,import java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\r\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\r\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTBody;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPPr;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.STSectionMark;\r\n\r\npublic class WordMerge {\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument srcDoc = new XWPFDocument(srcPackage);\r\n        if (inputs.size() == 1) {\r\n            first = srcDoc;\r\n        } else {\r\n            addPageBreak(first);\r\n            CTBody srcBody = srcDoc.getDocument().getBody();\r\n            first.getDocument().addNewBody().set(srcBody);\r\n        }\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    private void addPageBreak(XWPFDocument doc) {\r\n        XWPFParagraph paragraph = doc.createParagraph();\r\n        CTP ctp = paragraph.getCTP();\r\n        CTPPr ctppr = ctp.isSetPPr() ? ctp.getPPr() : ctp.addNewPPr();\r\n        CTSectPr sectPr = ctppr.isSetSectPr() ? ctppr.getSectPr() : ctppr.addNewSectPr();\r\n        sectPr.addNewType().setVal(STSectionMark.NEXT_PAGE);\r\n        XWPFRun run = paragraph.createRun();\r\n        run.addBreak();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.CredentialStoreException;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.spec.PasswordSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.provider.WildFlyElytronPasswordProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreUtil {\r\n    public static CredentialStore connectToCredentialStore(String maskedPasswordString) throws Exception {\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        MaskedPasswordAlgorithmSpec spec = ModularCrypt.decodeMaskedPassword(maskedPasswordString);\r\n        Password maskedPassword = MaskedPassword.createRaw(MaskedPassword.ALGORITHM_MASKED, spec);\r\n        \r\n        CredentialStore.ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                () -> new PasswordCredential(maskedPassword)\r\n        );\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n        return credentialStore;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private void addNewProductRow(LinearLayout parentLayout) {\r\n    LinearLayout newProductLayout = new LinearLayout(getActivity());\r\n    newProductLayout.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n    newProductLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n\r\n    AutoCompleteTextView tvProduct = new AutoCompleteTextView(getActivity());\r\n    tvProduct.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    tvProduct.setHint(""Enter Product"");\r\n\r\n    EditText prodQty = new EditText(getActivity());\r\n    prodQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodQty.setHint(""Enter Quantity"");\r\n\r\n    EditText prodPrice = new EditText(getActivity());\r\n    prodPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodPrice.setHint(""Prod Price"");\r\n    prodPrice.setFocusable(false);\r\n\r\n    EditText prodSpecs = new EditText(getActivity());\r\n    prodSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodSpecs.setHint(""Prod Specs"");\r\n    prodSpecs.setFocusable(false);\r\n\r\n    Button removeBtn = new Button(getActivity());\r\n    removeBtn.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n    removeBtn.setText(""X"");\r\n    removeBtn.setOnClickListener(v -> parentLayout.removeView(newProductLayout));\r\n\r\n    newProductLayout.addView(tvProduct);\r\n    newProductLayout.addView(prodQty);\r\n    newProductLayout.addView(prodPrice);\r\n    newProductLayout.addView(prodSpecs);\r\n    newProductLayout.addView(removeBtn);\r\n\r\n    parentLayout.addView(newProductLayout);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\npublic PrivateKey loadEncryptedPrivateKey(String keyFilePath, String passphrase) throws Exception {\r\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n    try (PEMParser pemParser = new PEMParser(new FileReader(new File(keyFilePath)))) {\r\n        Object object = pemParser.readObject();\r\n        JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");\r\n        if (object instanceof PEMEncryptedKeyPair) {\r\n            PEMDecryptorProvider decryptor = new JceOpenSSLPKCS8DecryptorProviderBuilder().build(passphrase.toCharArray());\r\n            object = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n        }\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(converter.getKeyPair((PEMKeyPair) object).getPrivate().getEncoded()));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EmojiTextArea extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea textArea = new TextArea(""?? ?? ?? ?? ?? ?? ?? ?? ?? ??"");\r\n        textArea.setStyle(""-fx-font-family: 'Segoe UI Emoji', 'Noto Color Emoji', 'Apple Color Emoji', 'Twemoji Mozilla'; -fx-font-size: 14px;"");\r\n        \r\n        StackPane root = new StackPane(textArea);\r\n        Scene scene = new Scene(root, 400, 300);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        defaultBackgroundColor = ContextCompat.getColor(mCtx, nightModeFlags == Configuration.UI_MODE_NIGHT_YES ? R.color.defaultBackgroundDark : R.color.defaultBackgroundLight);\r\n        selectedBackgroundColor = ContextCompat.getColor(mCtx, nightModeFlags == Configuration.UI_MODE_NIGHT_YES ? R.color.selectedBackgroundDark : R.color.selectedBackgroundLight);\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) selectedPositions.add(Integer.parseInt(position));\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        PyqModel temp = pyqModelList.get(position);\r\n        holder.textView.setText(temp.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(temp.getPyqTopics());\r\n        holder.cardView.setCardBackgroundColor(selectedPositions.contains(position) ? selectedBackgroundColor : defaultBackgroundColor);\r\n\r\n        holder.cardView.setOnClickListener(v -> {\r\n            if (selectedPositions.contains(position)) selectedPositions.remove(position);\r\n            else selectedPositions.add(position);\r\n            SharedPreferences.Editor editor = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE).edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) selectedItems.add(String.valueOf(pos));\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems).apply();\r\n            notifyItemChanged(position);\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(""pdfName"", temp.getPdfName());\r\n            i.putExtra(""pdfUrl"", temp.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Test\r\nvoid testCase() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(data.itemName())).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(""There is an item created with this name"", ex.getMessage());\r\n    verify(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public void setAlignedText(TextView textView, String leftText, String rightText) {\r\n    SpannableString finalString = new SpannableString(leftText + ""\t\t\t\t"" + rightText);\r\n    finalString.setSpan(new TabStopSpan.Standard(1000), leftText.length(), leftText.length() + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n    textView.setText(finalString);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, \r\n                                          CSVWriter.NO_QUOTE_CHARACTER, \r\n                                          CSVWriter.NO_ESCAPE_CHARACTER, \r\n                                          CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        String[] headers = {""Test Input"", ""Expected Output"", ""Test Output"", ""Error Message""};\r\n        writer.writeNext(headers);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput().isEmpty()) {\r\n                writer.writeNext(new String[]{testInput, expectedOutput, """", errorMessage});\r\n            } else {\r\n                for (Map<String, Object> output : testCase.getTestOutput()) {\r\n                    writer.writeNext(new String[]{testInput, expectedOutput, output.toString(), errorMessage});\r\n                }\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"private int getNodeIndex(Map<String, Integer> nodeIndexMap, List<String> nodes, String node) {\r\n    return nodeIndexMap.computeIfAbsent(node, k -> {\r\n        nodes.add(k);\r\n        return nodes.size() - 1;\r\n    });\r\n}\r\n\r\nprivate void bfs(String source, Map<String, Integer> nodeIndexMap) {\r\n    level = new int[nodes.size()];\r\n    Arrays.fill(level, -1);\r\n    level[getNodeIndex(nodeIndexMap, nodes, source)] = 0;\r\n\r\n    Queue<String> queue = new LinkedList<>();\r\n    queue.offer(source);\r\n\r\n    while (!queue.isEmpty()) {\r\n        String u = queue.poll();\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int vIndex = getNodeIndex(nodeIndexMap, nodes, v);\r\n            if (capacity > 0 && level[vIndex] == -1) {\r\n                level[vIndex] = level[getNodeIndex(nodeIndexMap, nodes, u)] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate int dfs(String u, int flow, String sink, Map<String, Integer> nodeIndexMap) {\r\n    if (u.equals(sink)) {\r\n        return flow;\r\n    }\r\n\r\n    for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n        String v = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        if (capacity > 0 && level[getNodeIndex(nodeIndexMap, nodes, u)] < level[getNodeIndex(nodeIndexMap, nodes, v)]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sink, nodeIndexMap);\r\n            if (sent > 0) {\r\n                network.get(u).put(v, capacity - sent);\r\n                network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\npublic int calculator(Map<T, Set<T>> graph) {\r\n    Map<String, Integer> nodeIndexMap = new HashMap<>();\r\n\r\n    for (T t : graph.keySet()) {\r\n        addEdge(""src"", ""A"" + t.toString(), 1);\r\n        addEdge(""B"" + t, ""sink"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(""A"" + t, u, 1);\r\n        }\r\n    }\r\n\r\n    int maxFlow = 0;\r\n    while (true) {\r\n        bfs(""src"", nodeIndexMap);\r\n        if (level[getNodeIndex(nodeIndexMap, nodes, ""sink"")] == -1) {\r\n            break;\r\n        }\r\n\r\n        int flow;\r\n        while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"", nodeIndexMap)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n\r\n    return graph.size() - maxFlow;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public class AlarmReceiver extends BroadcastReceiver {\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Intent stopIntent = new Intent(context, NotificationDismissReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\r\n        notificationManager.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) ringtone.play();\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n\r\npublic class NotificationDismissReceiver extends BroadcastReceiver {\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        AlarmReceiver.stopRingtone();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static void searchNumber(int[] array, int searching) {\r\n    boolean found = false;\r\n    for (int i = 0; i < array.length; i++) {\r\n        if (searching == array[i]) {\r\n            System.out.println(searching + "" is at index "" + i + ""."");\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!found) {\r\n        System.out.println(searching + "" was not found."");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static void setSeriesColor(LineChart<Number, Number> lineChart, XYChart.Series<Number, Number> series, String color) {\r\n    for (Node node : lineChart.lookupAll("".series"" + lineChart.getData().indexOf(series))) {\r\n        node.setStyle(""-fx-stroke: "" + color + "";"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,private void addOutlineEffect(Node node) {\r\n    Glow glow = new Glow(1.0);\r\n    node.setEffect(glow);\r\n}\r\n
0,1,misclassified_in_Test_3.csv.csv,"@Service\r\n@RequiredArgsConstructor\r\npublic class TenantService {\r\n\r\n    private final UserTenantRepository userTenantRepository;\r\n\r\n    public boolean isUserAuthorizedForTenant(String username, String subdomain) {\r\n        return userTenantRepository.existsByUsernameAndSubdomain(subdomain, username);\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/auth"")\r\n@RequiredArgsConstructor\r\npublic class AuthController {\r\n\r\n    private final AuthService authService;\r\n    private final TenantService tenantService;\r\n\r\n    @PostMapping(""/signin"")\r\n    public ResponseEntity<?> authenticateUser(\r\n            @RequestAttribute String subdomain,\r\n            @Valid @RequestBody LoginRequest loginRequest\r\n    ) {\r\n        if (!tenantService.isUserAuthorizedForTenant(loginRequest.getUsername(), subdomain)) {\r\n            return ResponseEntity\r\n                    .badRequest()\r\n                    .body(new MessageResponse(""Unauthorized: This username and tenant is not authorized!""));\r\n        }\r\n        return ResponseEntity.ok(authService.authenticateUser(subdomain, loginRequest));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public String inputTake() {\r\n    Scanner scan = new Scanner(System.in);\r\n    String guess;\r\n\r\n    while (true) {\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n        \r\n        if (checkInput(guess)) {\r\n            return guess;\r\n        }\r\n    }\r\n}\r\n\r\npublic boolean checkInput(String input) {\r\n    if (input.length() != 5 || !input.matches(""[a-zA-Z]+"")) {\r\n        System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(@Value(""${configuration}"") String configuration, ApplicationContext context) {\r\n        this.languageService = (LanguageService) context.getBean(configuration);\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Mapper\r\npublic interface WealthProdAccountInfoMapper {\r\n\r\n    @Mapping(target = ""agentName"", source = ""agentName"")\r\n    @Mapping(target = ""agentIdentityType"", source = ""agentIdentityType"")\r\n    @Mapping(target = ""agentIdentityNo"", source = ""agentIdentityNo"")\r\n    @Mapping(target = ""agentIdentityExpireAt"", source = ""agentIdentityExpireAt"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"public static void main(String[] args) throws IOException {\r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<String>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<HashMap<String, String>>();\r\n\r\n    String line = null;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<String, String>();\r\n            int index = 0;\r\n            for (String each : line.split("","")) {\r\n                myRecord.put(headers.get(index), each);\r\n                index++;\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n\r\n    System.out.println(""My Table:"" + myTable);\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"@Component\r\npublic class TMPFilter implements WebFilter {\r\n    private long requestTime = System.nanoTime();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long deltaTime = System.nanoTime() - requestTime;\r\n        \r\n        return chain.filter(exchange)\r\n                .doOnRequest(request -> {\r\n                    requestTime = System.nanoTime();\r\n                })\r\n                .doOnSuccess(arg -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-success"", Long.toString(delta));\r\n                })\r\n                .doOnError((arg) -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-error"", Long.toString(delta));\r\n                })\r\n                .doFinally((arg) -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from typing import Literal, Union\r\n\r\nfrom pydantic import BaseModel, Field, ValidationError, root_validator\r\n\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n"
0,1,misclassified_in_Test_3.csv.csv,def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    already_seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in already_seen:\r\n            continue\r\n        already_seen.add(log_hash)\r\n        yield log\r\n
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\n\r\nclass SequenceGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.index = 0\r\n    \r\n    def __call__(self):\r\n        value = self.sequence[self.index]\r\n        self.index = (self.index + 1) % len(self.sequence)\r\n        return value\r\n\r\nrng = lambda : np.random.randint(2, 20) // 2\r\n\r\nnrng = SequenceGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n"
0,1,misclassified_in_Test_3.csv.csv,"# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    # setup db session\r\n    yield session\r\n    # teardown db session\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe_fixture():\r\n    # setup dataframe\r\n    yield dataframe\r\n    # teardown dataframe\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe_fixture):\r\n    # some tests\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    # some tests\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import requests\r\n\r\ndef get_access_token(client_id, client_secret, refresh_token):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    headers = {\r\n        ""Content-Type"": ""application/x-www-form-urlencoded""\r\n    }\r\n    data = {\r\n        ""grant_type"": ""refresh_token"",\r\n        ""refresh_token"": refresh_token,\r\n        ""client_id"": client_id,\r\n        ""client_secret"": client_secret\r\n    }\r\n    \r\n    response = requests.post(url, headers=headers, data=data)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json()\r\n    else:\r\n        raise Exception(f""Error: {response.status_code}, {response.text}"")\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        await asyncio.sleep(1)\r\n        print(""This line is executed"")\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_3.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""debugOptions"": [\r\n                ""WaitOnAbnormalExit"",\r\n                ""WaitOnNormalExit""\r\n            ],\r\n            ""console"": ""integratedTerminal"",\r\n            ""stopOnEntry"": false,\r\n            ""redirectOutput"": true,\r\n            ""outputCapture"": ""std"",\r\n            ""env"": {\r\n                ""PYTHONIOENCODING"": ""utf-8""\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"# user.py\r\nfrom typing import List, TYPE_CHECKING, Optional\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    age: Optional[int]\r\n    bought_items: List[""Item""] = []\r\n\r\n# item.py\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guaranteed_values(A_eq, b_eq, num_variables):\r\n    c = np.zeros(num_variables)\r\n    bounds = [(0, 1)] * num_variables\r\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n    if res.success:\r\n        solution = np.round(res.x)\r\n        guaranteed_zeros = np.where(solution == 0)[0]\r\n        guaranteed_ones = np.where(solution == 1)[0]\r\n        return guaranteed_zeros, guaranteed_ones\r\n    else:\r\n        return [], []\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],\r\n    [1, 0, 0, 1],\r\n    [1, 1, 0, 0]\r\n])\r\nb_eq = np.array([2, 1, 1])\r\n\r\nguaranteed_zeros, guaranteed_ones = find_guaranteed_values(A_eq, b_eq, 4)\r\nprint(""Guaranteed zeros:"", guaranteed_zeros)\r\nprint(""Guaranteed ones:"", guaranteed_ones)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndef plot_polars_bar(df: pl.DataFrame, x: str, y: str):\r\n    fig = px.bar(df.to_dict(as_series=False), x=x, y=y)\r\n    fig.show()\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\nplot_polars_bar(df, x=""names"", y=""random"")\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from dataclasses import dataclass\r\nfrom hydra.core.config_store import ConfigStore\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\nclass PydanticConfig(BaseModel):\r\n    param: int = Field(..., ge=0, le=100)\r\n\r\n@dataclass\r\nclass HydraConfig:\r\n    param: int\r\n\r\ndef validate_config(cfg: HydraConfig):\r\n    try:\r\n        PydanticConfig(**cfg.__dict__)\r\n    except ValidationError as e:\r\n        raise ValueError(e)\r\n\r\ncs = ConfigStore.instance()\r\ncs.store(name=""config"", node=HydraConfig)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"javascript\r\nclass Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(`I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`);\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        return ""Squarish:"" + super.rectHello().split(':')[1];\r\n    }\r\n}\r\n\r\nfunction testShapes() {\r\n    const rect = new Rectangle(6, 4);\r\n    rect.shoutArea();\r\n\r\n    const squa = new Square(5);\r\n    squa.shoutArea();\r\n    console.log(squa.squaHello());\r\n}\r\n\r\ntestShapes();\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndef fill_na_with_pair(df):\r\n    cols = [col for col in df.columns if not col.endswith('_a')]\r\n    df[cols] = df[cols].fillna(df[[f""{col}_a"" for col in cols]].values)\r\n    return df\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\nprint(fill_na_with_pair(df))\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from elasticsearch import Elasticsearch\r\n\r\ndef connect_es(es_host, es_port, es_username, es_password):\r\n    return Elasticsearch(f""http://{es_username}:{es_password}@{es_host}:{es_port}"")\r\n\r\nes_host = ""<>""\r\nes_port = ""<>""\r\nes_username = ""<>""\r\nes_password = ""<>""\r\nes_index = ""<>""\r\n\r\nes = connect_es(es_host, es_port, es_username, es_password)\r\nes.indices.refresh(index=es_index)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass MyEnum(str, enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        return cls.__members__.get(value)\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import torch\r\nimport torch.nn as nn\r\n\r\nclass Hook:\r\n    def __init__(self, model, layer_name='desired_layer'):\r\n        self.model = model\r\n        self.attentions = []\r\n        self.gradients = []\r\n\r\n        for name, module in self.model.named_modules():\r\n            if layer_name in name:\r\n                module.register_forward_hook(self.forward_hook)\r\n                module.register_full_backward_hook(self.backward_hook)\r\n\r\n    def forward_hook(self, module, input, output):\r\n        self.attentions.append(output.detach().cpu())\r\n\r\n    def backward_hook(self, module, grad_input, grad_output):\r\n        self.gradients.append(grad_output[0].detach().cpu())\r\n\r\n    def __call__(self, input_tensor):\r\n        self.model.zero_grad()\r\n        return self.model(input_tensor)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""cwd"": ""C:/path/to/base/directory"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter the relative data directory""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import bpy\r\n\r\ndef convert_tris_to_quads(input_path, output_path):\r\n    bpy.ops.wm.read_factory_settings(use_empty=True)\r\n    bpy.ops.import_scene.obj(filepath=input_path)\r\n    obj = bpy.context.selected_objects[0]\r\n    bpy.context.view_layer.objects.active = obj\r\n    bpy.ops.object.mode_set(mode='EDIT')\r\n    bpy.ops.mesh.select_all(action='SELECT')\r\n    bpy.ops.mesh.tris_convert_to_quads(quad_method='FIXED', ngon_method='BEAUTY')\r\n    bpy.ops.object.mode_set(mode='OBJECT')\r\n    bpy.ops.export_scene.obj(filepath=output_path)\r\n\r\nconvert_tris_to_quads('mushroom-shelve-1-merged.obj', 'quad_mesh.obj')\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\nimport time\r\nimport matplotlib.pyplot as plt\r\n\r\ndef measure_execution_time(matrix_size=3000, num_iterations=50):\r\n    execution_times1, execution_times2 = [], []\r\n\r\n    for _ in range(num_iterations):\r\n        matrix_a = np.random.rand(matrix_size, matrix_size)\r\n        start = time.time()\r\n        _ = np.matmul(matrix_a, matrix_a)\r\n        execution_times1.append(time.time() - start)\r\n\r\n    for _ in range(num_iterations):\r\n        matrix_b = np.random.rand(matrix_size, matrix_size)\r\n        start = time.time()\r\n        _ = np.matmul(matrix_b, matrix_b.T)\r\n        execution_times2.append(time.time() - start)\r\n\r\n    plt.plot(range(num_iterations), execution_times1, label='A @ A')\r\n    plt.plot(range(num_iterations), execution_times2, label='B @ B.T')\r\n    plt.xlabel('Iteration')\r\n    plt.ylabel('Execution Time')\r\n    plt.title('Matrix Multiplication Execution Time Comparison')\r\n    plt.legend()\r\n    plt.show()\r\n\r\n    return np.mean(execution_times1), np.mean(execution_times2)\r\n\r\nmeasure_execution_time()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\nimport logging\r\n\r\ndef enable_langchain_logging():\r\n    logging.basicConfig(level=logging.INFO)\r\n    logger = logging.getLogger(""langchain"")\r\n    logger.setLevel(logging.DEBUG)\r\n\r\ndef invoke_chain(topic):\r\n    enable_langchain_logging()\r\n    prompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\n    model = ChatOpenAI(verbose=True)\r\n    output_parser = StrOutputParser()\r\n    chain = prompt | model | output_parser\r\n    return chain.invoke({""topic"": topic})\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\n\r\ndef calculate_Fourier(points, num_coefficients):\r\n    complex_points = np.array([p[0] + 1j * p[1] for p in points])\r\n    t = np.linspace(0, 1, len(complex_points), endpoint=False)\r\n    delta_t = 1 / len(complex_points)\r\n\r\n    c_k = np.array([\r\n        np.sum(complex_points * np.exp(-2j * np.pi * k * t)) * delta_t\r\n        for k in range(-num_coefficients // 2, num_coefficients // 2)\r\n    ])\r\n\r\n    return c_k\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\n\r\ndef numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {i: np.random.rand(array_size) for i in range(num_arrays)}\r\n    cache = {} if do_cache else None\r\n\r\n    for _ in range(num_iter):\r\n        i, j = np.random.randint(num_arrays, size=2)\r\n        if do_cache:\r\n            a = cache.get((i, j))\r\n            if a is None:\r\n                a = arrays[i] + arrays[j]\r\n                cache[(i, j)] = a\r\n        else:\r\n            a = arrays[i] + arrays[j]\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import concurrent.futures\r\nimport multiprocessing\r\n\r\ndef _do_work(data):\r\n    multiprocessing.current_process().daemon = True\r\n    return data\r\n\r\ndef process_with_executor(n_workers, data_list):\r\n    with concurrent.futures.ProcessPoolExecutor(n_workers) as executor:\r\n        result_list = [executor.submit(_do_work, data) for data in data_list]\r\n        for id, future in enumerate(concurrent.futures.as_completed(result_list)):\r\n            print(f'{id}: {future.result()}')\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\n\r\ndef count_star_combinations(inp):\r\n    return (inp.groupby(['month', 'item', 'star'])\r\n              .size()\r\n              .unstack(fill_value=0)\r\n              .rename(columns=lambda x: f'star_{x}_cnt')\r\n              .reset_index())\r\n\r\ninp = pd.DataFrame({'month': [1, 1, 1, 1, 1, 2, 2, 2], \r\n                    'item': [10, 10, 10, 10, 20, 20, 20, 20], \r\n                    'star': [1, 2, 1, 3, 3, 2, 2, 3]})\r\n\r\noutput = count_star_combinations(inp)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import os\r\nimport asyncio\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport google.generativeai as genai\r\n\r\nasync def process_image_batch(model, prompt, image_paths):\r\n    tasks = [asyncio.to_thread(process_image, model, prompt, path) for path in image_paths]\r\n    return await asyncio.gather(*tasks)\r\n\r\ndef process_image(model, prompt, image_path):\r\n    img = Image.open(image_path)\r\n    output = model.generate_content([prompt, img])\r\n    return output.text\r\n\r\nasync def main():\r\n    model = genai.GenerativeModel('gemini-pro-vision', safety_settings=safety_settings)\r\n    images_to_process = [os.path.join(image_dir, image_name) for image_name in os.listdir(image_dir)]\r\n    prompt = ""Carefully scan this images: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'.""\r\n    \r\n    batch_size = 60\r\n    results = []\r\n\r\n    for i in tqdm(range(0, len(images_to_process), batch_size)):\r\n        batch = images_to_process[i:i + batch_size]\r\n        results.extend(await process_image_batch(model, prompt, batch))\r\n\r\n    for text in results:\r\n        print(text)\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom starlette import status\r\n\r\napp = FastAPI()\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\n@app.get(""/"", response_class=HTMLResponse, name=""homepage"")\r\nasync def get_main_data(request: Request):\r\n    result = request.session.pop(""result"", None)\r\n    msg = request.session.pop(""msg"", None)\r\n    return templates.TemplateResponse(""home.html"", {""request"": request, ""result"": result, ""msg"": msg})\r\n\r\n@app.post(""/"", name=""homepage_post"")\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    if condition:\r\n        request.session[""result""] = str(trans)\r\n    else:\r\n        request.session[""msg""] = str(err)\r\n    return RedirectResponse(url=app.url_path_for(""homepage""), status_code=status.HTTP_303_SEE_OTHER)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\r\nfrom shapely.geometry import Polygon, MultiPolygon\r\nfrom matplotlib.patches import Polygon as MplPolygon\r\nfrom matplotlib.collections import PatchCollection\r\n\r\ndef plot_phase_diagram(df):\r\n    points = df[['x', 'y']].values\r\n    labels = df['label'].values\r\n    colors = df['color'].values\r\n\r\n    vor = Voronoi(points)\r\n    fig, ax = plt.subplots(figsize=(8, 8))\r\n\r\n    patches = []\r\n    for region in vor.regions:\r\n        if not -1 in region and region:\r\n            poly = Polygon([vor.vertices[i] for i in region])\r\n            center = poly.centroid\r\n            label_idx = np.argmin(np.linalg.norm(points - np.array([center.x, center.y]), axis=1))\r\n            color = colors[label_idx]\r\n            patches.append(MplPolygon(list(poly.exterior.coords), closed=True, color=color))\r\n\r\n    p = PatchCollection(patches, match_original=True, edgecolor='black', linewidth=0.5, alpha=0.7)\r\n    ax.add_collection(p)\r\n    ax.set_xlim([-40, 0])\r\n    ax.set_ylim([-30, 10])\r\n    ax.set_xlabel('Log pO2(g)')\r\n    ax.set_ylabel('Log pSO2(g)')\r\n    plt.show()\r\n\r\nplot_phase_diagram(df)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from pydantic import BaseModel\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict):\r\n        field_schema[""type""] = ""string""\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\n\r\nclass Model(BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: str}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from sqlmodel import SQLModel, Field, Relationship, Session, create_engine, select\r\nfrom typing import Optional, List\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": ""Node.id""})\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef insert_nodes(session: Session):\r\n    root = Node(data=""root"")\r\n    child1 = Node(data=""child1"", parent=root)\r\n    child2 = Node(data=""child2"", parent=root)\r\n    session.add(root)\r\n    session.commit()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from datetime import date\r\nfrom typing import Annotated\r\nfrom pydantic import BaseModel, Field, field_validator, BeforeValidator\r\n\r\ndef to_date(field_name, value, formats, return_str=False):\r\n    for fmt in formats:\r\n        try:\r\n            parsed_date = date.strptime(value, fmt)\r\n            return parsed_date if not return_str else parsed_date.strftime(fmt)\r\n        except ValueError:\r\n            continue\r\n    raise ValueError(f""Invalid date format for field {field_name}"")\r\n\r\ndef custom_date(potential_formats):\r\n    def validate_date(value, info):\r\n        if isinstance(value, date):\r\n            return value\r\n        return to_date(info.alias, value, potential_formats, return_str=False)\r\n    return Annotated[date, BeforeValidator(validate_date)]\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: custom_date(['%Y-%m-%d', '%Y/%m/%d'])\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n\r\n        subprocess.run(f""oiiotool {inname} -o {outname}"", shell=True, check=True)\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=out.jpg'})\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from itertools import combinations\r\n\r\ndef generate_combinations(letters, k, n):\r\n    def helper(remaining, groups):\r\n        if not remaining:\r\n            yield groups\r\n            return\r\n        first_group = combinations(remaining, n)\r\n        for group in first_group:\r\n            new_remaining = set(remaining) - set(group)\r\n            yield from helper(new_remaining, groups + [tuple(sorted(group))])\r\n\r\n    unique_combos = set()\r\n    for combo in helper(set(letters), []):\r\n        unique_combos.add(tuple(sorted(combo)))\r\n    return [list(map(list, combo)) for combo in unique_combos]\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline\r\nimport torch\r\n\r\ndef get_logits(texts):\r\n    model_name = ""distilbert-base-uncased-finetuned-sst-2-english""\r\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\r\n    model = AutoModelForSequenceClassification.from_pretrained(model_name)\r\n\r\n    classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)\r\n    \r\n    with torch.no_grad():\r\n        tokenized = tokenizer(texts, padding=True, truncation=True, return_tensors=""pt"")\r\n        logits = model(**tokenized).logits\r\n    \r\n    return logits.tolist()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"def user_login(response: Response, username: str = Form(), password: str = Form(), db: Session = Depends(get_db)):\r\n    user = db.query(models.User).filter(models.User.mobile_number == username).first()\r\n    if not user or not verify_password(password, user.password):\r\n        raise HTTPException(400, detail='wrong phone number or password')\r\n\r\n    access_token = create_access_token(data={""sub"": user.mobile_number})\r\n    response.set_cookie(\r\n        key=""fakesession"", \r\n        value=""fake-cookie-session-value"", \r\n        httponly=True, \r\n        samesite=""None"", \r\n        secure=True\r\n    )\r\n    return {""status"": ""success""}\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from pyspark.sql import SparkSession\r\nfrom pyspark.sql.window import Window\r\nfrom pyspark.sql.functions import sum\r\n\r\ndef window_rows_between_example():\r\n    spark = SparkSession.builder.appName(""WindowExample"").getOrCreate()\r\n    \r\n    data = [(1, ""A"", 10), (2, ""A"", 20), (3, ""A"", 30),\r\n            (4, ""B"", 40), (5, ""B"", 50), (6, ""B"", 60)]\r\n    \r\n    df = spark.createDataFrame(data, [""id"", ""group"", ""value""])\r\n    \r\n    window_spec = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n    \r\n    df = df.withColumn(""cumulative_sum"", sum(""value"").over(window_spec))\r\n    \r\n    df.show()\r\n\r\nwindow_rows_between_example()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\n\r\ndef group_by_sorted_names(df):\r\n    return df.group_by(""country"").agg(\r\n        sorted_names := pl.col(""name"").sort_by(""age""),\r\n        sorted_names.first().alias(""age_sort_1""),\r\n        sorted_names.get(2, default=None).alias(""age_sort_2""),\r\n        sorted_names.last().alias(""age_sort_-1"")\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    {""name"": list(""abcdef""), ""age"": [21, 31, 32, 53, 45, 26], ""country"": list(""AABBBC"")}\r\n)\r\n\r\nresult = group_by_sorted_names(df)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import asyncio\r\nimport httpx\r\n\r\nasync def fetch(url, client):\r\n    try:\r\n        resp = await client.get(url)\r\n        return resp.text\r\n    except Exception:\r\n        return None\r\n\r\nasync def fetch_all(urls):\r\n    async with httpx.AsyncClient() as client:\r\n        return await asyncio.gather(*(fetch(url, client) for url in urls))\r\n\r\ndef get_html(urls):\r\n    return asyncio.run(fetch_all(urls))\r\n"
0,1,misclassified_in_Test_3.csv.csv,from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):\r\n    a: int\r\n\r\n@dataclass\r\nclass Outer(HasHasA):\r\n    hasa: HasA\r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n
0,1,misclassified_in_Test_3.csv.csv,"torch.onnx.export(model, img, 'detr.onnx', opset_version=16)\r\n     \r\npython\r\n     onnx_model = onnx.load(""detr.onnx"")\r\n     for node in onnx_model.graph.node:\r\n         print(node.op_type)\r\n     \r\npython\r\n     import onnxruntime as ort\r\n     ort_session = ort.InferenceSession(""detr.onnx"")\r\n     outputs = ort_session.run(None, {""input"": img.numpy()})\r\n     \r\nbash\r\n     pip install tf2onnx\r\n     python -m tf2onnx.convert --input detr.onnx --output model.pb --opset 16\r\n     \r\nbash\r\n     pip install --upgrade onnx-tf\r\n     \r\nbash\r\n     pip install onnx2tf\r\n     onnx2tf -i detr.onnx -o tf_model\r\n     tflite_convert --saved_model_dir=tf_model --output_file=detr.tflite\r\n     "
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\nfrom sklearn import datasets\r\n\r\ndef mutate_keep_unused(df, new_col_name, expr):\r\n    used_cols = {name.strip() for name in expr.replace('+', ' ').replace('*', ' ').split()}\r\n    df[new_col_name] = df.eval(expr)\r\n    return df.drop(columns=used_cols, errors='ignore')\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\nresult = mutate_keep_unused(iris, 'new_col', 'sepal length (cm) + petal length (cm) * petal width (cm)')\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\n\r\ndef truncate_explode(df):\r\n    min_len = min(df[""a""].arr.lengths().min(), df[""b""].arr.lengths().min())\r\n    df = df.with_columns([\r\n        pl.col(""a"").arr.slice(0, min_len),\r\n        pl.col(""b"").arr.slice(0, min_len)\r\n    ])\r\n    return df.explode([""a"", ""b""])\r\n\r\ndata = {\r\n    ""a"": [[1], [2], [3, 4], [5, 6, 7]],\r\n    ""b"": [[], [8], [9, 10], [11, 12]],\r\n}\r\ndf = pl.DataFrame(data)\r\n\r\nresult = truncate_explode(df)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from typing import Callable, Dict\r\nfrom functools import wraps\r\n\r\ndef remember(f: Callable[[int], int]) -> Callable[[int], int]:\r\n    class Wrapper:\r\n        memory: Dict[int, int]\r\n\r\n        def __init__(self, f: Callable[[int], int]):\r\n            self.f = f\r\n            self.memory = {}\r\n\r\n        def __call__(self, n: int) -> int:\r\n            if n not in self.memory:\r\n                self.memory[n] = self.f(n)\r\n            return self.memory[n]\r\n\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        return wrapper._wrapper(n)\r\n\r\n    wrapper._wrapper = Wrapper(f)\r\n    return wrapper\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import contextlib\r\nfrom typing import List, Type\r\n\r\nclass Validator:\r\n    def validate(self, something, *, suppress: List[Type[Exception]] = []) -> None:\r\n        self._check_a(something, suppress)\r\n        self._check_b(something, suppress)\r\n        self._check_c(something, suppress)\r\n\r\n    def _check_a(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if a:\r\n            self._raise(ErrorA(), suppress)\r\n\r\n    def _check_b(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if b:\r\n            self._raise(ErrorB(), suppress)\r\n\r\n    def _check_c(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if c:\r\n            self._raise(ErrorC(), suppress)\r\n\r\n    def _raise(self, e: Exception, suppress: List[Type[Exception]]) -> None:\r\n        with contextlib.suppress(*suppress):\r\n            raise e\r\n"
0,1,misclassified_in_Test_3.csv.csv,"def page_header():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    header = st.container()\r\n    with header:\r\n        logo = Image.open(""images/logo.png"")\r\n        st.image(logo, width=300)\r\n\r\n        ga_code = """"""\r\n        <!-- Google tag (gtag.js) -->\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n        """"""\r\n        st.markdown(ga_code, unsafe_allow_html=True)\r\n\r\ndef main():\r\n    page_header()\r\n    # Other code...\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\n\r\ndef calculate_ema_polars(values, span):\r\n    df = pl.DataFrame({'value': values})\r\n    df = df.with_columns(\r\n        pl.col('value').ewm_mean(span=span, adjust=False).alias('ema_9')\r\n    )\r\n    return df\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\ndf = calculate_ema_polars(values, span=9)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef handle_dst():\r\n    d0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\n    d1 = d0 + dt.timedelta(hours=2)\r\n    d2 = d0 + dt.timedelta(hours=3)\r\n    \r\n    d1u = d1.astimezone(dt.timezone.utc)\r\n    d2u = d2.astimezone(dt.timezone.utc)\r\n    \r\n    timedelta_utc = d2u - d1u\r\n    return timedelta_utc\r\n\r\nif __name__ == ""__main__"":\r\n    print(handle_dst())\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\ndef test_partial_behavior():\r\n    f1 = partial(bar, 3)\r\n    assert str(signature(f1)) == '(b)'\r\n    assert f1(6) == 0.5\r\n\r\n    try:\r\n        f1(a=2, b=6)\r\n    except TypeError as e:\r\n        assert str(e) == ""bar() got multiple values for argument 'a'""\r\n\r\n    try:\r\n        f1(c=2, b=6)\r\n    except TypeError as e:\r\n        assert str(e) == ""bar() got an unexpected keyword argument 'c'""\r\n\r\n    f2 = partial(bar, b=3)\r\n    assert str(signature(f2)) == '(a, *, b=3)'\r\n    assert f2(6) == 2.0\r\n    assert f2(6, b=1) == 6.0\r\n\r\n    f3 = partial(bar, a=3)\r\n    assert str(signature(f3)) == '(*, a=3, b)'\r\n\r\nif __name__ == ""__main__"":\r\n    test_partial_behavior()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import requests\r\n\r\ndef fetch_tokens():\r\n    url = ""https://etherscan.io/tokens""\r\n    headers = {\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n    }\r\n    session = requests.Session()\r\n    session.headers.update(headers)\r\n    response = session.get(url, verify=True)\r\n    return response.text\r\n\r\nprint(fetch_tokens())\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\n\r\ndef transform_df(A):\r\n    melted = A.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""VALUE"")\r\n    melted[""FIELD_STR_VALUE""] = melted[""VALUE""].where(melted[""VALUE""].apply(lambda x: isinstance(x, str)))\r\n    melted[""FIELD_NUM_VALUE""] = melted[""VALUE""].where(melted[""VALUE""].apply(lambda x: isinstance(x, (int, float))))\r\n    melted[""ID""] = melted.groupby(""FIELD_A"").cumcount() + 1\r\n    return melted[[""ID"", ""FIELD_A"", ""FIELD_NAME"", ""FIELD_STR_VALUE"", ""FIELD_NUM_VALUE""]]\r\n\r\nA = pd.DataFrame({\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": ['a', 'c', 'x'],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n})\r\n\r\nresult = transform_df(A)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""myscript"",\r\n    version=""0.0.1"",\r\n    packages=find_packages(where=""src""),\r\n    include_package_data=True,\r\n    install_requires=[\r\n        'Click',\r\n        'boto3',\r\n        'botocore',\r\n    ],\r\n    package_data={\r\n        ""resources.artifacts"": [""*""],\r\n        ""resources"": [""recipe.template.yaml"", ""*.yaml""]\r\n    },\r\n    entry_points={\r\n        'console_scripts': [\r\n            'myscript = code.main:run',\r\n        ],\r\n    },\r\n)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\ndef len_with_classmethod(cls):\r\n    if isinstance(cls, type):\r\n        return cls.__len__()\r\n    return len(cls)\r\n\r\nlen_with_classmethod(BadBar)  # 9002\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\n\r\ndef remove_duplicates(df):\r\n    df['pair'] = df.apply(lambda row: tuple(sorted([row['person1'], row['person2']])), axis=1)\r\n    return df.drop_duplicates(subset='pair').drop('pair', axis=1)\r\n\r\ndf = pd.DataFrame({\r\n    """": [0,1,2,3,4,5,6],\r\n    ""person1"": [""ryan"", ""delta"", ""delta"", ""delta"", ""bravo"", ""alpha"", ""ryan""],\r\n    ""person2"": [""delta"", ""ryan"", ""alpha"", ""bravo"", ""delta"", ""ryan"", ""alpha""],\r\n    ""messages"": [1, 1, 2, 3, 3, 9, 9]\r\n})\r\n\r\nfinaldf = remove_duplicates(df)\r\nprint(finaldf)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\ndef combine_series(pls):\r\n    return functools.reduce(lambda a, b: a.join(b, on='index', how='full', coalesce=True), pls).sort(by='index')\r\n\r\nN, C = 300000, 20\r\npls = []\r\nfor i in range(C):\r\n    A = pl.DataFrame({\r\n        ""index"": np.linspace(i, N*3-i, num=N, dtype=np.int32),\r\n        f""A{i}"": np.arange(N, dtype=np.float32),\r\n    })\r\n    pls.append(A)\r\n\r\nresult = combine_series(pls)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True, dynamic_ncols=True):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 4\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, pos, len(tasks)) for (pos, n) in enumerate(tasks))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\n\r\ndef get_closest_matches(df1, df2):\r\n    result = []\r\n    \r\n    for sec in df1['seconds']:\r\n        closest_idx = (df2['seconds'] - sec).abs().argmin()\r\n        start_idx = max(closest_idx - 2, 0)\r\n        end_idx = min(closest_idx + 2, len(df2) - 1)\r\n        result.append(df2.iloc[start_idx:end_idx + 1])\r\n    \r\n    return pd.concat(result).drop_duplicates().reset_index(drop=True)\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame.from_dict(data1)\r\ndf2 = pd.DataFrame.from_dict(data2)\r\n\r\nresult = get_closest_matches(df1, df2)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(1, 100),\r\n            ""b"": ''.join(random.choices(string.digits, k=10))\r\n        }\r\n\r\nexample = ExampleData.example()\r\nprint(example)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, values=None):\r\n        if values is None:\r\n            values = []\r\n        values.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(values)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(values)\r\n\r\n        return values\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nresult = Tree.traverse_pre()\r\nprint(result)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import base64\r\nimport numpy as np\r\nimport json\r\nimport requests\r\nfrom skimage.transform import resize\r\nfrom matplotlib.pyplot import imread\r\n\r\nif __name__ == '__main__':\r\n    path_to_img = ""my image path""\r\n\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512))\r\n\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {""shape"": image.shape, ""image"": image_byte.decode()}\r\n\r\n    response = requests.post('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\n\r\nfrom fastapi import FastAPI\r\nimport numpy as np\r\nimport base64\r\nimport uvicorn\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: dict):\r\n    image_byte = data.get('image').encode()\r\n    image_shape = tuple(data.get('shape'))\r\n    image_array = np.frombuffer(base64.b64decode(image_byte), dtype=np.float32).reshape(image_shape)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef reference_implementation(encoded):\r\n    return base64.b64decode(encoded)\r\n\r\ndef implmementation1(encoded):\r\n    return a2b_base64(encoded)\r\n\r\ndef threaded_impl(encoded, N):\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i * lbatch:(i + 1) * lbatch] for i in range(N - 1)]\r\n    batches.append(encoded[(N - 1) * lbatch:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i * lbatch:(i + 1) * lbatch] for i in range(N - 1)]\r\n    batches.append(encoded[(N - 1) * lbatch:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import pandas as pd\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\ndef fetch_bmv_data():\r\n    url = 'https://www.bmv.com.mx/es/mercados/capitales'\r\n    page = requests.get(url)\r\n    soup = BeautifulSoup(page.text, 'lxml')\r\n    \r\n    headers = [""EMISORA"", ""SERIE"", ""HORA"", ""ÃÂLTIMO"", ""PPP"", ""ANTERIOR"", ""MÃÂXIMO"", ""MÃÂNIMO"", ""VOLUMEN"", ""IMPORTE"", ""OPS."", ""VAR PUNTOS"", ""VAR %""]\r\n    df = pd.DataFrame(columns=headers)\r\n\r\n    rows = soup.find_all('tr', {""role"": ""row""})\r\n    for row in rows:\r\n        cells = row.find_all('td')\r\n        if len(cells) > 1:\r\n            data = [cell.get_text(strip=True).replace('\n', '') for cell in cells]\r\n            df.loc[len(df)] = data\r\n    \r\n    return df\r\n\r\ndf = fetch_bmv_data()\r\nprint(df)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\n\r\ndef unpack_sector_exposure(df):\r\n    return df.with_columns(\r\n        pl.col(""sector_exposure"")\r\n        .str.split("";"")\r\n        .arr.eval(\r\n            pl.element().str.split(""="").arr.get(1).cast(pl.Float64),\r\n            return_dtype=pl.List(pl.Float64),\r\n        )\r\n        .alias(""exposures"")\r\n    ).unnest(""exposures"")\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nunpacked_df = unpack_sector_exposure(df)\r\nprint(unpacked_df)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\nimport numpy as np\r\n\r\ndef simulate_events(df):\r\n    return df.with_columns(\r\n        pl.col(""daily_n"").zip(pl.col(""prob""))\r\n        .apply(lambda x: np.random.binomial(n=x[0], p=x[1], size=1), return_dtype=pl.Int32)\r\n        .alias('events')\r\n    )\r\n\r\ndf_sim = pl.DataFrame({\r\n    ""daily_n"": [1000, 2000, 3000, 4000],\r\n    ""prob"": [.5, .5, .5, .6],\r\n    ""size"": 1\r\n})\r\n\r\ndf_sim = simulate_events(df_sim)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"", ci=""sd"",\r\n                edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5)\r\n\r\ng.map(sns.stripplot, 'sex', 'total_bill', 'smoker', hue_order=['Yes', 'No'], order=['Male', 'Female'],\r\n      palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nannot = Annotator(g.ax, pairs, data=tips, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\nannot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\nannot.apply_test().annotate()\r\n\r\nplt.show()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\nfrom timeit import timeit\r\n\r\ndef compare_dot_vs_matmul(N=1300):\r\n    xx = np.random.randn(N, N) + 1j\r\n    yy = np.random.randn(N, N) + 1j\r\n\r\n    x = np.real(xx)\r\n    y = np.real(yy)\r\n    \r\n    assert np.shares_memory(x, xx)\r\n    assert np.shares_memory(y, yy)\r\n\r\n    dot = timeit('np.dot(x,y)', number=10, globals=globals())\r\n    matmul = timeit('np.matmul(x,y)', number=10, globals=globals())\r\n\r\n    print('time for np.matmul: ', matmul)\r\n    print('time for np.dot: ', dot)\r\n\r\ncompare_dot_vs_matmul()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nimport json\r\n\r\ndef plot_hexbin_with_boundary():\r\n    data = pd.DataFrame({\r\n        'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n        'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\n    gdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\n    gdf_poly = gdf_poly.drop('name', axis=1)\r\n\r\n    Afr_gdf_area = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop=True)\r\n\r\n    fig = ff.create_hexbin_mapbox(data_frame=data,\r\n                               lat=""LAT"", \r\n                               lon=""LON"",\r\n                               nx_hexagon=25,\r\n                               opacity=0.4,\r\n                               labels={""color"": ""Point Count""},\r\n                               mapbox_style='carto-positron',\r\n                               zoom=1\r\n                               )\r\n\r\n    fig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n             ""below"": ""traces"",\r\n             ""type"": ""fill"",\r\n             ""color"": ""orange"",\r\n             ""opacity"": 0.1,\r\n             ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })\r\n\r\n    fig.show()\r\n\r\nplot_hexbin_with_boundary()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import sys\r\nimport subprocess\r\nimport matplotlib\r\n\r\ndef install_matplotlib():\r\n    subprocess.check_call([sys.executable, ""-m"", ""pip"", ""install"", ""matplotlib""])\r\n\r\ntry:\r\n    import matplotlib.pyplot as plt\r\nexcept ImportError:\r\n    install_matplotlib()\r\n    import matplotlib.pyplot as plt\r\n\r\nwith open('notebook.txt', encoding='utf-8') as file:\r\n    contents = file.readlines()\r\n\r\nnewList = []\r\nfor content in contents:\r\n    newContent = content.replace('\n', '')\r\n    money = newContent.split(':')[-1]\r\n    newList.append(int(money))\r\n\r\nx = [1, 2, 3, 4, 5, 6]\r\ny = newList\r\nplt.plot(x, y, 'r')\r\nplt.xlabel('month')\r\nplt.ylabel('money')\r\nplt.legend()\r\nplt.show()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from unittest import mock\r\nimport psycopg2\r\nfrom db import PostgresqlApi\r\n\r\ndef mock_db_connection():\r\n    mock_db = mock.Mock()\r\n    mock_cursor = mock.Mock()\r\n    mock_db.cursor.return_value = mock_cursor\r\n    mock_db.commit = mock.MagicMock()\r\n    return mock_db, mock_cursor\r\n\r\ndef test_postgresql_api():\r\n    with mock.patch('psycopg2.connect', mock_db_connection):\r\n        db = PostgresqlApi()\r\n        db.add_event(event=""Test Event"")\r\n        db.events()\r\n        db.close()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"import polars as pl\r\n\r\ndef aggregate_fqid(df):\r\n    return df.groupby(""session_id"").agg(\r\n        pl.col(""fqid"").value_counts().alias(""fqid_counts"")\r\n    ).with_columns(\r\n        pl.col(""fqid_counts"").apply(lambda x: pl.DataFrame(x).rename({""fqid"": ""fqid_"" + str(cat) for cat in x[""fqid""].unique()}), return_dtype=pl.Object)\r\n    ).explode(""fqid_counts"")\r\n\r\ndf = pl.DataFrame({\r\n    ""session_id"": [20090312431273200, 20090312431273200, 20090312431273200, 20090312431273200],\r\n    ""fqid"": [""intro"", ""gramps"", ""gramps"", ""teddy""],\r\n    ""elapsed_time"": [0, 1323, 831, 5197]\r\n})\r\n\r\nresult = aggregate_fqid(df)\r\nresult.show()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from fastapi import FastAPI, Request\r\nfrom starlette.middleware.base import BaseHTTPMiddleware\r\nfrom starlette.responses import Response\r\nimport json\r\n\r\nclass AddMetadataMiddleware(BaseHTTPMiddleware):\r\n    async def dispatch(self, request: Request, call_next):\r\n        response = await call_next(request)\r\n\r\n        body = b""""\r\n        async for chunk in response.body_iterator:\r\n            body += chunk\r\n\r\n        data = {}\r\n        data[""data""] = json.loads(body.decode())\r\n        data[""metadata""] = {\r\n            ""some_data_key_1"": ""some_data_value_1"",\r\n            ""some_data_key_2"": ""some_data_value_2"",\r\n            ""some_data_key_3"": ""some_data_value_3""\r\n        }\r\n\r\n        body = json.dumps(data, indent=2).encode(""utf-8"")\r\n\r\n        return Response(content=body, status_code=response.status_code, media_type=response.media_type)\r\n\r\napp = FastAPI()\r\n\r\napp.add_middleware(AddMetadataMiddleware)\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_v1_5\r\nfrom Crypto.Util.Padding import pad\r\n\r\ndef encrypt_data(modulus, exponent, string1, string2):\r\n    key = RSA.construct((int.from_bytes(modulus, 'big'), int.from_bytes(exponent, 'big')))\r\n    cipher = PKCS1_v1_5.new(key)\r\n    \r\n    data = (string1 + string2).encode()\r\n    encrypted_data = cipher.encrypt(pad(data, key.size_in_bytes()))\r\n    \r\n    return encrypted_data\r\n"
0,1,misclassified_in_Test_3.csv.csv,"# pyproject.toml\r\n\r\n[build-system]\r\nrequires = [""setuptools>=61.0"", ""numpy>=1.17"", ""cython>=0.18""]\r\nbuild-backend = ""setuptools.build_meta""\r\n\r\n[tool.setuptools]\r\npackage-dir = {"""" = "".""}\r\n\r\n[tool.setuptools.packages]\r\nfind = {}\r\n\r\n[tool.setuptools.cmdclass]\r\nbuild_ext = ""_custom_build.build_ext""\r\neditable = ""_custom_build.editable""\r\n\r\n# _custom_build.py\r\n\r\nfrom setuptools.command.build_ext import build_ext as _build_ext\r\nfrom setuptools import Extension\r\nfrom Cython.Build import cythonize\r\nimport os\r\nfrom setuptools.command.install import install as _install\r\n\r\nclass build_ext(_build_ext):\r\n    def initialize_options(self):\r\n        super().initialize_options()\r\n        if self.distribution.ext_modules is None:\r\n            self.distribution.ext_modules = []\r\n        extensions = Extension('module_name', sources=['module_name.pyx'])\r\n        self.distribution.ext_modules.extend(cythonize(extensions))\r\n\r\n    def build_extensions(self):\r\n        super().build_extensions()\r\n\r\nclass editable(_install):\r\n    def run(self):\r\n        self.run_command('build_ext')\r\n        super().run()\r\n"
0,1,misclassified_in_Test_3.csv.csv,"from pydantic import BaseModel, ValidationError, root_validator\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\n    @root_validator(pre=True)\r\n    def check_all(cls, values):\r\n        try:\r\n            Salary(**values['salary'])\r\n        except ValidationError as e:\r\n            raise e\r\n        return values\r\n\r\nsalary = {""gross"": ""hello"", ""net"": 1000, ""tax"": 10}\r\nemployee = {""name"": ""Mattia"", ""age"": ""hello"", ""salary"": salary}\r\n\r\ntry:\r\n    emp = Employee(**employee)\r\nexcept ValidationError as e:\r\n    print(e.errors())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\npublic class Clt {\r\n    private final RestTemplate rt = new RestTemplate();\r\n\r\n    public String req(String url) {\r\n        ResponseEntity<String> rs = rt.getForEntity(url, String.class);\r\n        return rs.getBody();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,class Ins {\r\n    static void chk(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"package test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        one.run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport java.security.*;\r\nimport java.security.spec.ECGenParameterSpec;\r\nimport java.util.Base64;\r\n\r\npublic class GenKey {\r\n    private static final String CUR = ""secp384r1"";\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Security.addProvider(new BouncyCastleProvider());\r\n            ECGenParameterSpec par = new ECGenParameterSpec(CUR);\r\n            KeyPairGenerator gen = KeyPairGenerator.getInstance(""EC"", ""BC"");\r\n            gen.initialize(par, new SecureRandom());\r\n            KeyPair kp = gen.generateKeyPair();\r\n            String pri = toPem(kp.getPrivate());\r\n            System.out.println(pri);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String toPem(PrivateKey key) {\r\n        String b64 = Base64.getEncoder().encodeToString(key.getEncoded());\r\n        return ""-----BEGIN PRIVATE KEY-----\n"" + b64 + ""\n-----END PRIVATE KEY-----"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.*;\r\n\r\npublic class MsgTrc {\r\n\r\n    private final Tracer trc;\r\n\r\n    public MsgTrc(Tracer trc) {\r\n        this.trc = trc;\r\n    }\r\n\r\n    public void procMsg(String tid) {\r\n        SpanContext ctx = SpanContext.createFromRemoteParent(\r\n            tid, ""0000000000000000"", TraceFlags.getSampled(), TraceState.getDefault()\r\n        );\r\n        Context c = Context.current().with(Span.wrap(ctx));\r\n\r\n        try (Scope s = c.makeCurrent()) {\r\n            Span sp = trc.spanBuilder(""consumeMsg"").setParent(c).startSpan();\r\n            sp.end();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class ZigZag {\r\n    public static int sol(List<Integer> lst) {\r\n        List<Integer> up = new ArrayList<>();\r\n        List<Integer> dn = new ArrayList<>();\r\n        List<Integer> up2 = new ArrayList<>();\r\n\r\n        TreeSet<Integer> set = new TreeSet<>(lst);\r\n        for (int x : set) up.add(x);\r\n\r\n        for (int i = up.size() - 1; i >= 0; i--) dn.add(up.get(i));\r\n\r\n        for (int x : set) {\r\n            if (x > dn.get(dn.size() - 1)) up2.add(x);\r\n        }\r\n\r\n        return up.size() + dn.size() + up2.size() - 2;\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        System.out.println(sol(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(sol(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(sol(List.of(1, 100)));\r\n        System.out.println(sol(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class AppCfg {\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hdnMet() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> fil = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        fil.setUrlPatterns(List.of(""/*""));\r\n        return fil;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.slf4j.MDC;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class RunTest {\r\n    private static final ExecutorService fJ = new ForkJoinPool(30);\r\n    private static final ExecutorService vT = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        int from = 1, to = 100;\r\n        Svc svc = new Svc();\r\n\r\n        System.out.println(""ForkJoin: "" + run(fJ, svc, from, to));\r\n        System.out.println(""Virtual: "" + run(vT, svc, from, to));\r\n\r\n        fJ.shutdown();\r\n        vT.shutdown();\r\n    }\r\n\r\n    static long run(ExecutorService exe, Svc svc, int from, int to) throws Exception {\r\n        long st = System.nanoTime();\r\n        exe.submit(() -> IntStream.rangeClosed(-from, to)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        svc.set(""key-"" + i);\r\n                        MDC.put(""key1"", ""val1"");\r\n                        MDC.put(""key2"", ""val2"");\r\n                        return svc.call(i);\r\n                    } finally {\r\n                        svc.rm();\r\n                        MDC.clear();\r\n                    }\r\n                })\r\n                .toList()).get();\r\n        return (System.nanoTime() - st) / 1_000_000;\r\n    }\r\n}\r\n\r\nclass Svc {\r\n    private static final ThreadLocal<String> tl = new ThreadLocal<>();\r\n\r\n    void set(String v) { tl.set(v); }\r\n    void rm() { tl.remove(); }\r\n\r\n    int call(int i) {\r\n        try { Thread.sleep(10); } catch (Exception e) { }\r\n        return i * 2;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import okhttp3.*;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        OkHttpClient cli = new OkHttpClient();\r\n        MediaType typ = MediaType.parse(""application/octet-stream"");\r\n        RequestBody bod = RequestBody.create(typ, new byte[0]);\r\n        String fN = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String cD = ""attachment; filename*=UTF-8''"" + java.net.URLEncoder.encode(fN, ""UTF-8"");\r\n\r\n        Request req = new Request.Builder()\r\n                .url(""xxxx"")\r\n                .method(""POST"", bod)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", cD)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response res = cli.newCall(req).execute();\r\n        System.out.println(res.code());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,public abstract class Par {\r\n    protected abstract static class InPar {\r\n        public InPar get() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Chi extends Par {\r\n    public static class InChi extends InPar {}\r\n}\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        var obj = new Chi.InChi().get();\r\n        System.out.println(((Object) obj).getClass().getName());\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"package tskbar;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport tskbar.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        Button btn = new Button(""Start Task"");\r\n\r\n        btn.setOnAction(e -> {\r\n            long win = Window.getWindows().getFirst().getRawHandle();\r\n            Task<Void> tsk = new Task<>() {\r\n                @Override\r\n                protected Void call() {\r\n                    try (var ar = Arena.ofConfined()) {\r\n                        var prop = ar.allocateFrom(""_NET_WM_STATE"");\r\n                        var prog = ar.allocateFrom(""_NET_WM_STATE_DEMANDS_ATTENTION"");\r\n\r\n                        MemorySegment dsp = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        MemorySegment winSeg = MemorySegment.ofAddress(win);\r\n                        Xlib_h.XChangeProperty(dsp, winSeg.address(), prop.address(), 4, 32, 0, prog, 1);\r\n                        Xlib_h.XFlush(dsp);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment data = ar.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(dsp, winSeg.address(), prop.address(), 4, 32, 0, data, 1);\r\n                            Xlib_h.XFlush(dsp);\r\n                        }\r\n\r\n                        Xlib_h.XCloseDisplay(dsp);\r\n                    } catch (Throwable x) {\r\n                        x.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(tsk).start();\r\n        });\r\n\r\n        VBox box = new VBox(10, btn);\r\n        Scene scn = new Scene(box, 300, 200);\r\n        stg.setScene(scn);\r\n        stg.setTitle(""Taskbar Progress"");\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,import jakarta.mail.internet.InternetAddress;\r\nimport jakarta.mail.internet.MimeMessage;\r\nimport jakarta.mail.Message;\r\nimport jakarta.mail.MessagingException;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.mail.javamail.MimeMessagePreparator;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n
0,1,misclassified_in_Test_9.csv.csv,"({\r\n    @ApiResponse(responseCode = ""200"", content = @Content(\r\n        examples = @ExampleObject(name = ""Success"", value = ""JsonResponse...""),\r\n        mediaType = MediaType.APPLICATION_JSON_VALUE)),\r\n    @ApiResponse(responseCode = ""400"", description = ""BAD REQUEST"", content = @Content(schema = @Schema(hidden = true)))\r\n})\r\n\r\n@io.swagger.v3.oas.annotations.parameters.RequestBody(\r\n    content = @Content(examples = @ExampleObject(name = ""Req"", value = ""JsonRequestBody...""))\r\n)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class Esc {\r\n    private static final Map<Character, String> map = new HashMap<>();\r\n\r\n    static {\r\n        map.put('<', ""&lt;"");\r\n        map.put('>', ""&gt;"");\r\n        map.put('&', ""&amp;"");\r\n        map.put('\'', ""&#039;"");\r\n        map.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String esc(String inp) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : inp.toCharArray()) {\r\n            sb.append(map.getOrDefault(c, String.valueOf(c)));\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\nclass MltSum {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> res = ConcurrentHashMap.newKeySet();\r\n        ExecutorService ex = Executors.newFixedThreadPool(3);\r\n\r\n        ex.execute(() -> addMul(n, 3, res));\r\n        ex.execute(() -> addMul(n, 5, res));\r\n        ex.execute(() -> addMul(n, 7, res));\r\n\r\n        ex.shutdown();\r\n        try { ex.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS); } \r\n        catch (InterruptedException e) {}\r\n\r\n        return res.stream().mapToInt(Integer::intValue).sum();\r\n    }\r\n\r\n    private void addMul(int n, int d, Set<Integer> res) {\r\n        for (int i = d; i <= n; i += d) res.add(i);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MltSum obj = new MltSum();\r\n        System.out.println(obj.getSum(10));\r\n        System.out.println(obj.getSum(1000));\r\n        System.out.println(obj.getSum(76293));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n\r\nimport java.util.UUID;\r\n\r\npublic record AggId(@JsonValue UUID id) {}\r\n\r\npublic class Agg {\r\n\r\n    public final AggId aggId;\r\n\r\n    @JsonCreator\r\n    public Agg(@JsonProperty(""aggregateId"") AggId aggId) {\r\n        this.aggId = aggId;\r\n    }\r\n}\r\n\r\nclass Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper objMap = new ObjectMapper();\r\n        String str = ""{ \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\"" }"";\r\n        Agg agg = objMap.readValue(str, Agg.class);\r\n        System.out.println(objMap.writeValueAsString(agg));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.junit.jupiter.api.extension.BeforeAllCallback;\r\nimport org.junit.jupiter.api.extension.ExtensionContext;\r\nimport org.mockito.MockedStatic;\r\nimport org.mockito.Mockito;\r\n\r\npublic class MockUtilExt implements BeforeAllCallback, ExtensionContext.Store.CloseableResource {\r\n\r\n    private static MockedStatic<UtilCls> mock;\r\n\r\n    @Override\r\n    public void beforeAll(ExtensionContext ctx) {\r\n        if (mock == null) {\r\n            mock = Mockito.mockStatic(UtilCls.class);\r\n            mock.when(UtilCls::genId).thenReturn(""mock-id"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        if (mock != null) {\r\n            mock.close();\r\n            mock = null;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.time.*;\r\nimport java.time.format.*;\r\nimport java.time.temporal.*;\r\n\r\npublic record Wk(int yr, int wk) implements Comparable<Wk> {\r\n\r\n    private static final DateTimeFormatter fmt = DateTimeFormatter.ofPattern(""YYYY-'W'ww"");\r\n\r\n    public static Wk of(String str) {\r\n        TemporalAccessor t = fmt.parse(str);\r\n        return new Wk(t.get(ChronoField.YEAR), t.get(ChronoField.ALIGNED_WEEK_OF_YEAR));\r\n    }\r\n\r\n    public boolean isBfr(Wk o) {\r\n        return this.compareTo(o) < 0;\r\n    }\r\n\r\n    public int wksBtw(Wk o) {\r\n        return Period.between(LocalDate.ofYearDay(yr, 1).with(WeekFields.ISO.weekOfYear(), wk),\r\n                LocalDate.ofYearDay(o.yr, 1).with(WeekFields.ISO.weekOfYear(), o.wk)).getDays() / 7;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Wk o) {\r\n        return yr != o.yr ? Integer.compare(yr, o.yr) : Integer.compare(wk, o.wk);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return fmt.format(LocalDate.ofYearDay(yr, 1).with(WeekFields.ISO.weekOfYear(), wk));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.concurrent.*;\r\n\r\nclass ExHnd<T extends Throwable> {\r\n    void thrw(T ex) throws T {\r\n        throw ex;\r\n    }\r\n}\r\n\r\npublic class InfTst {\r\n    public static void main(String[] args) {\r\n        ExHnd<RuntimeException> exHnd = new ExHnd<>();\r\n        try {\r\n            exHnd.thrw(new IllegalArgumentException());\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n\r\n        ExHnd<ExecutionException> chkExHnd = new ExHnd<>();\r\n        try {\r\n            chkExHnd.thrw(new ExecutionException(""Err"", null));\r\n        } catch (ExecutionException e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class EqDiv {\r\n    public static boolean chk(int[] arr) {\r\n        if (arr.length % 2 != 0) return false;\r\n        return chk(arr, 0, 0, 0, 0);\r\n    }\r\n\r\n    private static boolean chk(int[] arr, int idx, int s1, int c1, int c2) {\r\n        if (idx == arr.length) return c1 == c2 && s1 * 2 == sum(arr, 0);\r\n        return chk(arr, idx + 1, s1 + arr[idx], c1 + 1, c2) ||\r\n               chk(arr, idx + 1, s1, c1, c2 + 1);\r\n    }\r\n\r\n    private static int sum(int[] arr, int idx) {\r\n        return idx == arr.length ? 0 : arr[idx] + sum(arr, idx + 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(chk(new int[]{1, 5, 11, 5}));\r\n        System.out.println(chk(new int[]{1, 2, 3, 5}));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TipFix extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        Label lbl = new Label(""TEST\nTEST\nTEST"");\r\n        lbl.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tip = new Tooltip(""TOOLTIP"");\r\n        tip.setShowDelay(Duration.seconds(0.5));\r\n        lbl.setTooltip(tip);\r\n\r\n        lbl.setOnMouseEntered(e -> {\r\n            Bounds b = lbl.localToScreen(lbl.getBoundsInLocal());\r\n            tip.show(lbl, b.getMaxX(), b.getMaxY());\r\n        });\r\n\r\n        lbl.setOnMouseExited(e -> tip.hide());\r\n\r\n        stg.setScene(new Scene(new AnchorPane(lbl)));\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SwiBtn extends Control {\r\n    private final ObjectProperty<EventHandler<ActionEvent>> act = new ObjectPropertyBase<>() {\r\n        @Override protected void invalidated() { setEventHandler(ActionEvent.ACTION, get()); }\r\n        @Override public Object getBean() { return SwiBtn.this; }\r\n        @Override public String getName() { return ""onAction""; }\r\n    };\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() { return act; }\r\n    public final void setOnAction(EventHandler<ActionEvent> val) { act.set(val); }\r\n    public final EventHandler<ActionEvent> getOnAction() { return act.get(); }\r\n\r\n    public SwiBtn() { setSkin(new SwiBtnSkin(this)); }\r\n    \r\n    @Override protected Skin<?> createDefaultSkin() { return new SwiBtnSkin(this); }\r\n\r\n    public void fire() { fireEvent(new ActionEvent()); }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import static org.junit.jupiter.api.Assertions.*;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.stream.Stream;\r\n\r\nclass MyTest {\r\n    @ParameterizedTest\r\n    @MethodSource(""mapSrc"")\r\n    void chk(Map<String, Object> arg) {\r\n        assertNotNull(arg);\r\n        assertNotNull(arg.get(""1""));\r\n    }\r\n\r\n    static Stream<Map<String, Object>> mapSrc() {\r\n        Map<String, Object> mp = new HashMap<>();\r\n        mp.put(""1"", ""Obj1"");\r\n        mp.put(""2"", ""Obj2"");\r\n        return Stream.of(mp);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\nclass DTF {\r\n    public static void main(String[] args) {\r\n        String[] ts = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter fmt = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String t : ts) {\r\n            try {\r\n                LocalDateTime dt = LocalDateTime.parse(t, fmt);\r\n                System.out.println(""OK: "" + dt);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""FAIL: "" + t);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class Dup {\r\n    public static void main(String[] a) {\r\n        String s = ""Great"";\r\n        int c;\r\n        char[] ch = s.toCharArray();\r\n        boolean f = false;\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n        for (int i = 0; i < ch.length; i++) {\r\n            c = 1;\r\n            for (int j = i + 1; j < ch.length; j++) {\r\n                if (ch[i] == ch[j] && ch[i] != ' ') {\r\n                    c++;\r\n                    ch[j] = '0';\r\n                }\r\n            }\r\n            if (c > 1 && ch[i] != '0') {\r\n                System.out.println(ch[i]);\r\n                f = true;\r\n            }\r\n        }\r\n        if (!f) System.out.println(""no duplicates"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class Rot extends Application {\r\n    private Group grp;\r\n    private int ang = 0;\r\n\r\n    public void start(Stage stg) {\r\n        Arc b = new Arc(100, 100, 80, 80, 0, 90);\r\n        b.setType(ArcType.ROUND);\r\n        b.setFill(Color.BLUE);\r\n        \r\n        Arc g = new Arc(100, 100, 80, 80, 90, 90);\r\n        g.setType(ArcType.ROUND);\r\n        g.setFill(Color.GREEN);\r\n        \r\n        Arc y = new Arc(100, 100, 80, 80, 180, 90);\r\n        y.setType(ArcType.ROUND);\r\n        y.setFill(Color.YELLOW);\r\n        \r\n        Arc r = new Arc(100, 100, 80, 80, 270, 90);\r\n        r.setType(ArcType.ROUND);\r\n        r.setFill(Color.RED);\r\n        \r\n        grp = new Group(b, g, y, r);\r\n        \r\n        Button rot = new Button(""Rotate"");\r\n        rot.setOnAction(this::clk);\r\n        \r\n        FlowPane p = new FlowPane(grp, rot);\r\n        p.setAlignment(Pos.CENTER);\r\n        p.setHgap(20);\r\n        \r\n        stg.setScene(new Scene(p, 250, 250));\r\n        stg.setTitle(""Wheel"");\r\n        stg.show();\r\n    }\r\n\r\n    public void clk(ActionEvent e) {\r\n        ang += 90;\r\n        grp.setRotate(ang);\r\n    }\r\n\r\n    public stat\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.web.bind.annotation.*;\r\nimport org.springframework.http.*;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport java.net.http.*;\r\nimport java.net.*;\r\n\r\n@RestController\r\n@Slf4j\r\npublic class Ctl {\r\n    @GetMapping(""/m1"")\r\n    public ResponseEntity<String> m1(@RequestParam String in) throws Exception {\r\n        log.info(""In m1 with {}"", in);\r\n        HttpRequest req = HttpRequest.newBuilder().uri(URI.create(""http://localhost:8090/m2"")).build();\r\n        HttpResponse<String> res = HttpClient.newHttpClient().send(req, HttpResponse.BodyHandlers.ofString());\r\n        return ResponseEntity.ok(res.body());\r\n    }\r\n\r\n    @GetMapping(""/m2"")\r\n    public ResponseEntity<String> m2() {\r\n        log.info(""In m2"");\r\n        return ResponseEntity.ok(""OK"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.paint.*;\r\nimport javafx.scene.shape.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.*;\r\n\r\npublic class Drw3D extends Application {\r\n    private MeshView msh;\r\n    private PhongMaterial mat1 = new PhongMaterial(Color.RED);\r\n    private PhongMaterial mat2 = new PhongMaterial(Color.BLUE);\r\n\r\n    public void start(Stage stg) {\r\n        msh = new MeshView(new Sphere(50).getMesh());\r\n        msh.setMaterial(mat1);\r\n\r\n        Button btn = new Button(""Tog"");\r\n        btn.setOnAction(e -> msh.setMaterial(msh.getMaterial() == mat1 ? mat2 : mat1));\r\n\r\n        Group grp = new Group(msh);\r\n        Scene scn = new Scene(new Group(grp, btn), 400, 400, true);\r\n        scn.setFill(Color.GRAY);\r\n        scn.setCamera(new PerspectiveCamera());\r\n\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.concurrent.*;\r\nimport java.lang.ScopedValue;\r\n\r\nvoid main() throws InterruptedException {\r\n    final var nm = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope<>()) {\r\n        ScopedValue.where(nm, ""haha"", () -> {\r\n            ts.fork(() -> ScopedValue.where(nm, ""haha"", () -> null));\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.input.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        var root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(mkLbl());\r\n        var scn = new Scene(root);\r\n        scn.getStylesheets().add(""/ExampleStylesheet.css"");\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label mkLbl() {\r\n        var lbl = new Label(""Placeholder\nText"");\r\n        lbl.getStyleClass().add(""test-label"");\r\n        lbl.setTextAlignment(javafx.scene.text.TextAlignment.CENTER);\r\n        lbl.setOnMouseEntered(e -> inLbl(e, lbl));\r\n        lbl.setOnMouseExited(e -> outLbl(e, lbl));\r\n        return lbl;\r\n    }\r\n\r\n    public void inLbl(MouseEvent e, Label lbl) {\r\n        var bnd = lbl.getBoundsInParent();\r\n        if (bnd.contains(e.getX(), e.getY())) {\r\n            System.out.println(""Inside label."");\r\n        }\r\n    }\r\n\r\n    public void outLbl(MouseEvent e, Label lbl) {\r\n        var bnd = lbl.getBoundsInParent();\r\n        if (!bnd.contains(e.getX(), e.getY())) {\r\n            System.out.println(""Outside label."");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        var col = new ColumnConstraints();\r\n        col.setMinWidth(Region.USE_PREF_SIZE);\r\n        col.setHgrow(Priority.ALWAYS);\r\n\r\n        var g1 = mkGp(""One two three"", col);\r\n        var g2 = mkGp(""Four five six seven"", col);\r\n\r\n        var t1 = new TitledPane(""Top"", g1);\r\n        var t2 = new TitledPane(""Bottom"", g2);\r\n        t1.setCollapsible(false);\r\n        t2.setCollapsible(false);\r\n\r\n        var scn = new Scene(new VBox(t1, t2), 400, 200);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public GridPane mkGp(String txt, ColumnConstraints col) {\r\n        var gp = new GridPane();\r\n        var lbl = new Label(txt);\r\n        var fld = new TextField();\r\n        gp.add\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Popup;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UpMenu extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        MenuBar bar = new MenuBar();\r\n        Menu itm = new Menu(""Opt"");\r\n        MenuItem sub = new MenuItem(""Sel"");\r\n        itm.getItems().add(sub);\r\n        bar.getMenus().add(itm);\r\n\r\n        Popup pop = new Popup();\r\n        VBox box = new VBox(sub);\r\n        box.setStyle(""-fx-background-color: white; -fx-border-color: black;"");\r\n        pop.getContent().add(box);\r\n\r\n        itm.setOnShowing(e -> {\r\n            pop.show(bar, bar.getLayoutX(), bar.getLayoutY() - box.getHeight());\r\n        });\r\n\r\n        itm.setOnHidden(e -> pop.hide());\r\n\r\n        VBox root = new VBox();\r\n        root.getChildren().add(bar);\r\n        root.setStyle(""-fx-background-color: gray;"");\r\n        root.setTranslateY(300);\r\n\r\n        Scene scn = new Scene(root, 400, 400);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import com.itextpdf.text.*;\r\nimport com.itextpdf.text.pdf.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\n\r\nclass PdfMark {\r\n    private static final String DIR = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    private static final String SRC = DIR + ""test.pdf"";\r\n    private static final String OUT = DIR + ""output.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException, DocumentException {\r\n        ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n        byte[] raw = Files.readAllBytes(Paths.get(SRC));\r\n        String txt = ""???"";\r\n        String fntPath = DIR + ""myCustomFont.ttf"";\r\n        Font fnt = FontFactory.getFont(fntPath, BaseFont.IDENTITY_H, 16);\r\n        BaseFont bf = fnt.getBaseFont();\r\n        PdfReader rdr = new PdfReader(raw);\r\n        PdfStamper stp = new PdfStamper(rdr, buf);\r\n        int pg = rdr.getNumberOfPages();\r\n\r\n        for (int i = 1; i <= pg; i++) {\r\n            Rectangle sz = rdr.getPageSizeWithRotation(i);\r\n            PdfContentByte lay = stp.getOverContent(i);\r\n            PdfGState gs = new PdfGState();\r\n            gs.setFillOpacity(0.3f);\r\n            lay.saveState();\r\n            lay.setGState(gs);\r\n            lay.beginText();\r\n            lay.setFontAndSize(bf, 16);\r\n            for (float x = 70f; x < sz.getWidth(); x += 150) {\r\n                for (float y = 90; y < sz.getHeight(); y += 150) {\r\n                    lay.showTextAlignedKerned(Element.ALIGN_CENTER, txt, x, y, 45f);\r\n                }\r\n            }\r\n            lay.endText();\r\n            lay.restoreState();\r\n        }\r\n\r\n        stp.close();\r\n        rdr.close();\r\n        Files.write(Paths.get(OUT), buf.toByteArray());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.boot.*;\r\nimport org.springframework.boot.autoconfigure.*;\r\nimport org.springframework.security.config.annotation.web.builders.*;\r\nimport org.springframework.security.core.context.*;\r\nimport org.springframework.security.web.*;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@SpringBootApplication\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(App.class, args);\r\n    }\r\n}\r\n\r\n@RestController\r\nclass Ctl {\r\n    @GetMapping(""/user"")\r\n    public String usr() {\r\n        return SecurityContextHolder.getContext().getAuthentication().getName();\r\n    }\r\n}\r\n\r\n@Configuration\r\nclass SecCfg {\r\n    @Bean\r\n    public SecurityFilterChain flt(HttpSecurity sec) throws Exception {\r\n        return sec.authorizeHttpRequests(r -> r.anyRequest().authenticated())\r\n                  .oauth2Login().and().build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Gd extends GridPane {\r\n    public Gd(int c, int r, int hg, int vg, int fh, int fv) {\r\n        setHgap(hg);\r\n        setVgap(vg);\r\n        for (int y = 0; y < r; y++) {\r\n            for (int x = 0; x < c; x++) {\r\n                var f = new TextField();\r\n                f.setMinSize(fh, fv);\r\n                f.setMaxSize(fh, fv);\r\n                add(f, x, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,import org.springframework.context.annotation.*;\r\nimport org.springframework.http.*;\r\nimport org.springframework.web.servlet.config.annotation.*;\r\n\r\n@Configuration\r\npublic class WebCfg implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer cfg) {\r\n        cfg.defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"import org.junit.jupiter.api.*;\r\nimport org.junit.jupiter.api.extension.*;\r\nimport org.mockito.*;\r\nimport org.mockito.junit.jupiter.*;\r\n\r\nimport java.io.*;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass PdfTest {\r\n    \r\n    @Mock\r\n    PDFDocument doc;\r\n    \r\n    @Mock\r\n    PSConverter cnv;\r\n    \r\n    @InjectMocks\r\n    PdfSvc svc;\r\n    \r\n    @Test\r\n    void tst() throws Exception {\r\n        try (MockedConstruction<PDFDocument> mockDoc = mockConstruction(PDFDocument.class,\r\n                (m, ctx) -> doNothing().when(m).load(any(ByteArrayInputStream.class)));\r\n             MockedConstruction<PSConverter> mockCnv = mockConstruction(PSConverter.class,\r\n                (m, ctx) -> doAnswer(i -> {\r\n                    ByteArrayOutputStream out = i.getArgument(1);\r\n                    out.write(new byte[]{1, 2, 3});\r\n                    return out;\r\n                }).when(m).convert(any(), any(ByteArrayOutputStream.class)))) {\r\n\r\n            PDFDocument d = new PDFDocument();\r\n            PSConverter c = new PSConverter();\r\n            d.load(new ByteArrayInputStream(new byte[0]));\r\n            ByteArrayOutputStream o = new ByteArrayOutputStream();\r\n            c.convert(d, o);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.context.annotation.*;\r\nimport org.springframework.security.config.annotation.web.builders.*;\r\nimport org.springframework.security.config.annotation.web.configuration.*;\r\nimport org.springframework.security.config.http.*;\r\nimport org.springframework.security.web.*;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecCfg {\r\n\r\n    @Bean\r\n    SecurityFilterChain web(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf().disable()\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(""/"").access((ctx, req) -> \r\n                    ctx.getAuthentication() != null && req.getRemoteAddr().equals(""127.0.0.1""))\r\n                .anyRequest().denyAll()\r\n            )\r\n            .sessionManagement(ses -> ses.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\r\n        return http.build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.*;\r\nimport org.openjdk.jmh.runner.options.*;\r\n\r\nimport java.util.concurrent.*;\r\n\r\npublic class JdkBmk {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void idx(Blk blk, Tst tst) {\r\n        int len = tst.arr.length;\r\n        for (int i = 0; i < len; i++) {\r\n            blk.use(tst.arr[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void enh(Blk blk, Tst tst) {\r\n        for (int v : tst.arr) {\r\n            blk.use(v);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Thread)\r\n    public static class Tst {\r\n        public int[] arr;\r\n\r\n        @Setup(Level.Iteration)\r\n        public void set() {\r\n            int cnt = 1000;\r\n            arr = new int[cnt];\r\n            for (int i = 0; i < cnt; i++) {\r\n                arr[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class Blk {\r\n        public void use(int v) {}\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Opts opt = new OptsBld()\r\n                .include(JdkBmk.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(10)\r\n                .build();\r\n\r\n        new Rnr(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.*;\r\nimport org.openjdk.jmh.runner.options.*;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.*;\r\n\r\npublic class NstPrf {\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class Stt {\r\n        public static final List<Integer> out = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> inn = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void run(Runnable tsk) {\r\n        ForkJoinPool pl = new ForkJoinPool();\r\n        try {\r\n            pl.submit(tsk).join();\r\n        } finally {\r\n            pl.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void inPar() {\r\n        Stt.inn.parallelStream().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void inSeq() {\r\n        Stt.inn.stream().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tNew(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            run(NstPrf::inPar);\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tComSeq(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            inSeq();\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tComPar(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            inPar();\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    public static class Blk {\r\n        public void use(int v) {}\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Opts opt = new OptsBld()\r\n                .include(NstPrf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(10)\r\n                .build();\r\n\r\n        new Rnr(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EqtSp extends Application {\r\n\r\n    private static final int SZ = 128;\r\n    private static final float R = 200;\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        MeshView sph = mkSph();\r\n        Group grp = new Group(sph);\r\n        Scene scn = new Scene(grp, 800, 600, true);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    private MeshView mkSph() {\r\n        TriangleMesh msh = new TriangleMesh();\r\n        for (int y = 0; y <= SZ; y++) {\r\n            float v = (float) y / SZ;\r\n            double lat = Math.PI * (v - 0.5);\r\n            for (int x = 0; x <= SZ; x++) {\r\n                float u = (float) x / SZ;\r\n                double lon = 2 * Math.PI * u;\r\n                float xPos = (float) (R * Math.cos(lat) * Math.cos(lon));\r\n                float yPos = (float) (R * Math.sin(lat));\r\n                float zPos = (float) (R * Math.cos(lat) * Math.sin(lon));\r\n                msh.getPoints().addAll(xPos, yPos, zPos);\r\n                msh.getTexCoords().addAll(u, v);\r\n            }\r\n        }\r\n        for (int y = 0; y < SZ; y++) {\r\n            for (int x = 0; x < SZ; x++) {\r\n                int p0 = y * (SZ + 1) + x;\r\n                int p1 = p0 + 1;\r\n                int p2 = p0 + SZ + 1;\r\n                int p3 = p2 + 1;\r\n                msh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n                msh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n            }\r\n        }\r\n        MeshView vw = new MeshView(msh);\r\n        PhongMaterial mat = new PhongMaterial();\r\n        mat.setDiffuseMap(new Image(EqtSp.class.getResourceAsStream(""/images/earth2.jpg"")));\r\n        vw.setMaterial(mat);\r\n        return vw;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class Tst {\r\n    public static void go(Short n) { System.out.println(""Short""); }\r\n    public static void go(int n) { System.out.println(""int""); }\r\n\r\n    public static void main(String[] args) {\r\n        Short x = 11;\r\n        go(x);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class StrmCfg {\r\n\r\n    @Bean\r\n    public Function<KStream<String, Inp>, Map<String, KStream<String, Outp>>> myfn() {\r\n        return inp -> {\r\n            Map<String, KStream<String, Outp>> out = new HashMap<>();\r\n            List<String> tnts = List.of(""A"", ""B"");\r\n            for (String tnt : tnts) {\r\n                KStream<String, Inp> flt = inp.filter((k, v) -> k.startsWith(tnt));\r\n                out.put(tnt, flt.map((k, v) -> KeyValue.pair(k, Outp.mk(v))));\r\n            }\r\n            return out;\r\n        };\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," Conf {\r\n    @Bean\r\n    fun sem(): Semaphore = Semaphore(50)\r\n}\r\n\r\n@Component\r\n@Aspect\r\nclass Lim(@Autowired private val sem: Semaphore) {\r\n\r\n    @Around(""@annotation(LimReq)"")\r\n    fun ctrl(pjp: ProceedingJoinPoint): Any {\r\n        sem.acquire()\r\n        return try {\r\n            pjp.proceed()\r\n        } finally {\r\n            sem.release()\r\n        }\r\n    }\r\n}\r\n\r\n@Target(AnnotationTarget.FUNCTION)\r\n@Retention(AnnotationRetention.RUNTIME)\r\nannotation class LimReq\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\nclass Ctl(@Autowired private val srv: Srv) {\r\n\r\n    @GetMapping(""/data"")\r\n    @LimReq\r\n    fun get(): String = srv.fetch()\r\n}\r\n\r\n@Service\r\nclass Srv {\r\n    fun fetch(): String {\r\n        Thread.sleep(500)\r\n        return ""ok""\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class App {\r\n    public static final String CSS = App.class.getResource(""/style/"").toExternalForm();\r\n    public static final String IMG = App.class.getResource(""/img/"").toExternalForm();\r\n    public static final String SND = App.class.getResource(""/sound/"").toExternalForm();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stg) throws Exception {\r\n        StackPane stk = new StackPane();\r\n        Pane pnl = new Pane();\r\n        Button btn = new Button(""Test"");\r\n\r\n        pnl.setStyle(""-fx-background-color: red;"");\r\n        btn.setStyle(""-fx-background-color: green;"");\r\n        \r\n        stk.getChildren().addAll(pnl, btn);\r\n\r\n        FadeTransition trn = new FadeTransition(Duration.millis(5000), pnl);\r\n        trn.setFromValue(1.0);\r\n        trn.setToValue(0.0);\r\n        trn.setCycleCount(Timeline.INDEFINITE);\r\n        trn.setAutoReverse(true);\r\n        trn.play();\r\n\r\n        Scene scn = new Scene(stk, 500, 500);\r\n\r\n        stg.setMinWidth(500);\r\n        stg.setMinHeight(500);\r\n        stg.setTitle(""Test"");\r\n        stg.setResizable(false);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class QRGen {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String txt = ""User: John\nEvent: TechConf"";\r\n            String qrTxt = ""https://example.com"";\r\n            String fPath = ""qr_code.png"";\r\n            int w = 500, h = 500;\r\n            Map<EncodeHintType, Object> opt = new HashMap<>();\r\n            opt.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n            BitMatrix mat = new MultiFormatWriter().encode(qrTxt, BarcodeFormat.QR_CODE, w, h, opt);\r\n            BufferedImage qrImg = MatrixToImageWriter.toBufferedImage(mat);\r\n            BufferedImage outImg = new BufferedImage(w, h + 50, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = outImg.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, w, h + 50);\r\n            g.drawImage(qrImg, 0, 0, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            FontMetrics fm = g.getFontMetrics();\r\n            int x\r\n"
0,1,misclassified_in_Test_9.csv.csv,import java.io.IOException;\r\nimport java.nio.file.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.event.EventListener;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class DirMon {\r\n    private final WatchService ws;\r\n    private final ExecutorService ex = Executors.newSingleThreadExecutor();\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void run() {\r\n        ex.submit(() -> {\r\n            while (!Thread.currentThread().isInterrupted()) {\r\n                try {\r\n                    WatchKey k = ws.take();\r\n                    for (WatchEvent<?> e : k.pollEvents()) {\r\n                        // actions on files\r\n                    }\r\n                    k.reset();\r\n                } catch (Exception e) {\r\n                    run();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"import jakarta.annotation.Resource;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.jms.*;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class MsgSrv extends HttpServlet {\r\n    @Inject\r\n    @JMSConnectionFactory(""java:/jms/remoteCF"")\r\n    private JMSContext ctx;\r\n\r\n    @Resource(lookup = ""java:/queue/testQueue"")\r\n    private Queue q;\r\n\r\n    private static final int CNT = 5;\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\r\n        res.setContentType(""text/html"");\r\n        try (PrintWriter out = res.getWriter()) {\r\n            out.write(""<p>Sending msgs to <em>"" + q + ""</em></p>"");\r\n            out.write(""<h2>Msgs sent and rec:</h2>"");\r\n            for (int i = 0; i < CNT; i++) {\r\n                String txt = ""Msg "" + (i + 1);\r\n                ctx.createProducer().send(q, txt);\r\n                out.write(""Sent ("" + i + ""): "" + txt + ""<br/>"");\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\nimport java.util.stream.*;\r\n\r\nclass Rec {\r\n    String wk, src, dst;\r\n    int qty;\r\n\r\n    Rec(String wk, String src, String dst, int qty) {\r\n        this.wk = wk;\r\n        this.src = src;\r\n        this.dst = dst;\r\n        this.qty = qty;\r\n    }\r\n}\r\n\r\npublic class Calc {\r\n    public static void main(String[] args) {\r\n        List<Rec> recs = Arrays.asList(\r\n            new Rec(""week1"", ""source1"", ""destination1"", 100),\r\n            new Rec(""week1"", ""source1"", ""destination2"", 200),\r\n            new Rec(""week1"", ""source2"", ""destination1"", 200),\r\n            new Rec(""week1"", ""source2"", ""destination2"", 100),\r\n            new Rec(""week2"", ""source1"", ""destination1"", 200),\r\n            new Rec(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        recs.stream()\r\n            .collect(Collectors.groupingBy(r -> r.wk + r.src, \r\n                Collectors.collectingAndThen(\r\n                    Collectors.toList(), lst -> {\r\n                        int ttl = lst.stream().mapToInt(r -> r.qty).sum();\r\n                        return lst.stream()\r\n                            .map(r -> String.format(""%s  %s  %s   %.2f%%"", r.wk, r.src, r.dst, (r.qty * 100.0) / ttl))\r\n                            .collect(Collectors.toList());\r\n                    }\r\n                )\r\n            ))\r\n            .values()\r\n        \r\n"
0,1,misclassified_in_Test_9.csv.csv," class SecCfg {\r\n\r\n    @Bean\r\n    public static PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain sec(HttpSecurity http, JwtTokenProvider jwt) throws Exception {\r\n        http.cors().and()\r\n            .authorizeRequests()\r\n            .antMatchers(""/resources/**"", ""/error"", ""/api/user/**"").permitAll()\r\n            .antMatchers(""/api/admin/**"").hasRole(""ADMIN"")\r\n            .anyRequest().authenticated()\r\n            .and()\r\n            .logout().permitAll()\r\n            .logoutRequestMatcher(new AntPathRequestMatcher(""/api/user/logout"", ""POST""))\r\n            .and()\r\n            .formLogin().loginPage(""/api/user/login"").and()\r\n            .httpBasic().and()\r\n            .csrf().disable()\r\n            .addFilter(new JWTAuthorizationFilter(http.getSharedObject(AuthenticationManager.class), jwt));\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager auth(HttpSecurity http, PasswordEncoder enc, DataSource src) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n            .jdbcAuthentication()\r\n            .dataSource(src)\r\n            .passwordEncoder(enc)\r\n            .usersByUsernameQuery(""select username, password, enabled from usr01 where username=?"")\r\n            .authoritiesByUsernameQuery(""select username, role from usr01 where username=?"")\r\n            .and()\r\n            .build();\r\n    }\r\n\r\n    @Bean\r\n    public WebMvcConfigurer cors() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry reg) {\r\n                reg.addMapping(""/**"").allowedOrigins(""*"").allowedMethods(""\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class FpTest {\r\n    public static void main(String[] args) {\r\n        run();\r\n        runStrict();\r\n    }\r\n\r\n    static void run() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Norm: "" + c);\r\n    }\r\n\r\n    strictfp static void runStrict() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Strict: "" + c);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\n\r\npublic class LArr {\r\n    private static final long SIZ = Long.BYTES;\r\n    private final MemorySegment seg;\r\n    private final VarHandle vh;\r\n\r\n    public LArr(long len) {\r\n        seg = MemorySegment.allocateNative(len * SIZ, MemorySession.global());\r\n        vh = MemorySegment.varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\r\n    }\r\n\r\n    public void set(long idx, long val) {\r\n        vh.set(seg, idx * SIZ, val);\r\n    }\r\n\r\n    public long get(long idx) {\r\n        return (long) vh.get(seg, idx * SIZ);\r\n    }\r\n\r\n    public void free() {\r\n        seg.session().close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.awt.*;\r\nimport java.awt.image.*;\r\nimport java.util.*;\r\nimport javax.swing.*;\r\n\r\nclass Bul {\r\n    double x, y, d;\r\n    BufferedImage img;\r\n    static Map<Double, BufferedImage> rotCache = new HashMap<>();\r\n\r\n    Bul(double x, double y, double d, BufferedImage img) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.d = d;\r\n        this.img = rot(d, img);\r\n    }\r\n\r\n    BufferedImage rot(double d, BufferedImage img) {\r\n        return rotCache.computeIfAbsent(d, k -> {\r\n            int w = img.getWidth(), h = img.getHeight();\r\n            BufferedImage out = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g = out.createGraphics();\r\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n            g.rotate(Math.toRadians(k), w / 2.0, h / 2.0);\r\n            g.drawImage(img, 0, 0, null);\r\n            g.dispose();\r\n            return out;\r\n        });\r\n    }\r\n}\r\n\r\nclass Pan extends JPanel {\r\n    List<Bul> bls = new ArrayList<>();\r\n    BufferedImage img;\r\n\r\n    Pan(BufferedImage img) {\r\n        this.img = img;\r\n        for (int i = 0; i < 10000; i++) bls.add(new Bul(Math.random() * 800, Math.random() * 600, Math.random() * 360, img));\r\n        new Timer(16, e -> repaint()).start();\r\n    }\r\n\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        for (Bul b : bls) g.drawImage(b.img, (int) b.x, (int) b.y, null);\r\n    }\r\n}\r\n\r\npublic class Gam {\r\n    public static void main(String[] a) throws Exception {\r\n        BufferedImage img = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g = img.createGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(0, 0, 16, 16);\r\n        g.dispose();\r\n        JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        f.setSize(800, 600);\r\n        f.add(new Pan(img));\r\n        f.setVisible(true);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\nclass SenPro {\r\n    public boolean chk(String s) {\r\n        return s.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String pro(String s) {\r\n        if (!chk(s)) return s + "" is an invalid sentence"";\r\n\r\n        String[] w = s.trim().split(""\\s+"");\r\n        if (w.length <= 2) return ""Invalid Length"";\r\n\r\n        String t = w[0];\r\n        w[0] = w[w.length - 1];\r\n        w[w.length - 1] = t;\r\n\r\n        for (int i = 1; i < w.length - 1; i++) {\r\n            w[i] = new StringBuilder(w[i]).reverse().toString();\r\n        }\r\n        return String.join("" "", w);\r\n    }\r\n}\r\n\r\npublic class UI {\r\n    public static void main(String[] a) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(""Enter the sentence"");\r\n        String s = sc.nextLine();\r\n        System.out.println(new SenPro().pro(s));\r\n        sc.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage p) {\r\n        ComboBox<String> cb = new ComboBox<>();\r\n        cb.getItems().addAll(""One"", ""Two"", ""Three"");\r\n        cb.getStyleClass().add(""yel"");\r\n        cb.setOnShowing(e -> cb.lookup("".list-view"").getStyleClass().add(""yel""));\r\n\r\n        VBox v = new VBox(cb);\r\n        Scene s = new Scene(v, 400, 300);\r\n        s.getStylesheets().add(App.class.getResource(""test.css"").toExternalForm());\r\n        p.setScene(s);\r\n        p.show();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,package utils;\r\n\r\nimport org.hibernate.*;\r\nimport org.hibernate.boot.*;\r\nimport org.hibernate.boot.registry.*;\r\n\r\npublic class HibUtil {\r\n    private static final SessionFactory fac = build();\r\n\r\n    public static SessionFactory build() {\r\n        try {\r\n            ServiceRegistry reg = new StandardServiceRegistryBuilder()\r\n                .configure()\r\n                .build();\r\n            Metadata meta = new MetadataSources(reg)\r\n                .getMetadataBuilder().build();\r\n            return meta.getSessionFactoryBuilder().build();\r\n        } catch (Throwable ex) {\r\n            throw new ExceptionInInitializerError(ex);\r\n        }\r\n    }\r\n\r\n    public static SessionFactory get() {\r\n        return fac;\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"(MockitoExtension.class)\r\nclass TestCls {\r\n    @Mock Repo repo;\r\n    @Mock Cvt cvt;\r\n    @InjectMocks Svc svc;\r\n    @Mock User usr;\r\n    @Mock Ctx ctx;\r\n    @Mock Req req;\r\n    @Mock Spc spc;\r\n    @Mock Pg pg;\r\n    @Mock Res res;\r\n    @Mock Pageable pgbl;\r\n    @Mock Page<Res> pgr;\r\n    @MockConstruction(PageImpl.class) MockedConstruction<PageImpl<Res>> pgMock;\r\n\r\n    @Test\r\n    void get_pg() {\r\n        when(cvt.toSpc(usr, req)).thenReturn(spc);\r\n        when(PageRequest.of(1, 100)).thenReturn(pgbl);\r\n        when(repo.findAll(spc, pgbl)).thenReturn(pgr);\r\n        when(cvt.toRes(ctx)).thenReturn(res);\r\n        \r\n        pgMock = Mockito.mockConstruction(PageImpl.class, \r\n            (m, c) -> {\r\n                when(m.getTotalElements()).thenReturn(123456L);\r\n                when(m.getTotalPages()).thenReturn(1);\r\n                when(m.getContent()).thenReturn(List.of(res));\r\n            });\r\n\r\n        Page<Res> act = svc.getPg(usr, req);\r\n\r\n        Assertions.assertThat(act.getTotalElements()).isEqualTo(123456L);\r\n        Assertions.assertThat(act.getTotalPages()).isEqualTo(1);\r\n        Assertions.assertThat(act.getContent()).isEqualTo(List.of(res));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.util.Duration;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage ps) {\r\n        BorderPane root = new BorderPane();\r\n        Scene sc = new Scene(root, 400, 400);\r\n        StackPane sp = new StackPane();\r\n        \r\n        Text txt = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        \r\n        Color c1 = Color.RED;\r\n        Color c2 = Color.BLUE;\r\n        \r\n        Timeline tl = new Timeline(\r\n            new KeyFrame(Duration.seconds(0), e -> txt.setFill(c1)),\r\n            new KeyFrame(Duration.seconds(2), e -> txt.setFill(c2))\r\n        );\r\n        \r\n        tl.setCycleCount(Timeline.INDEFINITE);\r\n        tl.setAutoReverse(true);\r\n        tl.play();\r\n        \r\n        sp.getChildren().add(txt);\r\n        root.getChildren().add(sp);\r\n        \r\n        ps.setScene(sc);\r\n        ps.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.env.Environment;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@Configuration\r\npublic class Config {\r\n    \r\n    private final Environment env;\r\n\r\n    public Config(Environment env) {\r\n        this.env = env;\r\n    }\r\n\r\n    public Map<String, String> getProperties() {\r\n        Map<String, String> properties = new HashMap<>();\r\n        \r\n        for (String key : env.getProperty(""root"").split("","")) {\r\n            properties.put(key, env.getProperty(""root."" + key));\r\n        }\r\n\r\n        return properties;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import okhttp3.*;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Example {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = ""YOUR_ACCESS_TOKEN""; // OAuth2 token\r\n\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://api.example.com/endpoint"")\r\n                .header(""Authorization"", ""Bearer "" + token)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                System.out.println(response.body().string());\r\n            } else {\r\n                System.out.println(""Request failed: "" + response.code());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n        String mapHtml = """";\r\n\r\n        try {\r\n            File myObj = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n            Scanner myReader = new Scanner(myObj);\r\n            while (myReader.hasNextLine()) {\r\n                mapHtml += myReader.nextLine();\r\n                mapHtml += ""\n"";\r\n            }\r\n            myReader.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        webEngine.loadContent(mapHtml);\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.FieldAccessExpr;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        File src = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(src);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(cls -> {\r\n            System.out.println(""Class: "" + cls.getNameAsString());\r\n\r\n            cls.findAll(MethodDeclaration.class).forEach(mthd -> {\r\n                System.out.println(""  Method: "" + mthd.getNameAsString());\r\n\r\n                mthd.findAll(FieldAccessExpr.class).forEach(fld -> {\r\n                    String fieldName = fld.getNameAsString();\r\n                    if (fieldName != null && !fieldName.isEmpty()) {\r\n                        System.out.println(""    Fi\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\npublic @interface MyAnnotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\npublic class AnotherClass {}\r\n\r\npublic class YetAnotherClass {}\r\n\r\npublic class Main {\r\n\r\n    @MyAnnotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    public static void main(String[] args) throws NoSuchFieldException {\r\n        Main main = new Main();\r\n        Field field = main.getClass().getDeclaredField(""annotatedAttribute"");\r\n        MyAnnotation annotation = field.getAnnotation(MyAnnotation.class);\r\n        Class<?> className = annotation.className();\r\n        System.out.println(className);  // Prints: class AnotherClass\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Elements;\r\n\r\npublic class SwitchTypeFinder {\r\n\r\n    private Trees trees;\r\n    private Elements elements;\r\n\r\n    public SwitchTypeFinder(Trees trees, Elements elements) {\r\n        this.trees = trees;\r\n        this.elements = elements;\r\n    }\r\n\r\n    public TypeMirror getSwitchExpressionType(MethodTree methodTree) {\r\n        BlockTree blockTree = methodTree.getBody();\r\n\r\n        for (StatementTree statementTree : blockTree.getStatements()) {\r\n            if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                SwitchTree switchTree = (SwitchTree) statementTree;\r\n                ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                return trees.getTypeMirror(new TreePath(trees.getPath(methodTree), switchTreeExpression));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n"
0,1,misclassified_in_Test_9.csv.csv,"// LocalizationConfiguration.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\r\n\r\n@Configuration\r\npublic class LocalizationConfiguration implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public LocaleResolver localeResolver() {\r\n        SessionLocaleResolver localeResolver = new SessionLocaleResolver();\r\n        localeResolver.setDefaultLocale(java.util.Locale.ENGLISH);\r\n        return localeResolver;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\r\n        localeChangeInterceptor.setParamName(""lang"");\r\n        return localeChangeInterceptor;\r\n    }\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry interceptorRegistry) {\r\n        interceptorRegistry.addInterceptor(localeChangeInterceptor());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class ListPopulator {\r\n\r\n    private final ApplicationContext context;\r\n\r\n    @Autowired\r\n    public ListPopulator(ApplicationContext context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public void populateList(VBox contentArea, String pathToFxml) {\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(pathToFxml));\r\n            fxmlLoader.setControllerFactory(context::getBean);\r\n            VBox listItem = fxmlLoader.load();\r\n            contentArea.getChildren().add(listItem);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public void createChart() {\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final XYChart<Number, Number> chart = new XYChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series series = new XYChart.Series();\r\n\r\n    for (int i = 0; i < r.size(); i++) {\r\n        series.getData().add(new XYChart.Data<>(r.get(i) * Math.cos(Math.toRadians(nodes.get(i))),\r\n                                                 r.get(i) * Math.sin(Math.toRadians(nodes.get(i)))));\r\n    }\r\n\r\n    chart.getData().add(series);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(chart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button btn = findViewById(R.id.open_bottom_sheet);\r\n\r\n        btn.setOnClickListener(v -> {\r\n            BottomSheetDialog sheet = new BottomSheetDialog();\r\n            sheet.show(getSupportFragmentManager(), ""Sheet"");\r\n        });\r\n    }\r\n}\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n        v.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        return v;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> {\r\n                updateTimeline();\r\n            });\r\n\r\n            color2.addListener((obs, o, v) -> {\r\n                updateTimeline();\r\n            });\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null && timeline.get() != null) {\r\n                    timeline.get().play();\r\n                } else if (timeline.get() != null) {\r\n                    timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        SimpleObjectProperty<Paint> color1 = new SimpleObjectProperty<>(Color.RED);\r\n        SimpleObjectProperty<Paint> color2 = new SimpleObjectProperty<>(Color.BLUE);\r\n\r\n        void updateTimeline() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.get(), Interpolator.LINEAR)\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.get(), Interpolator.LINEAR)\r\n                )\r\n            );\r\n            timelin\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(MyEntityListener.class)\r\n@Entity\r\npublic class MyEntity {\r\n    private String something;\r\n\r\n    public String getSomething() {\r\n        return something;\r\n    }\r\n\r\n    public void setSomething(String something) {\r\n        this.something = something;\r\n    }\r\n}\r\n\r\npublic class MyEntityListener {\r\n\r\n    public String doThis() {\r\n        return ""expensive-computation"";\r\n    }\r\n\r\n    @PrePersist\r\n    public void myListener(MyEntity e) {\r\n        if (true) e.setSomething(doThis());\r\n    }\r\n}\r\n\r\n@SpringBootTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    MyEntityRepository repo;\r\n\r\n    @MockBean\r\n    MyEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        Mockito.when(entityListener.doThis()).thenReturn(expected);\r\n\r\n        MyEntity e = new MyEntity();\r\n        MyEntity stored = repo.save(e);\r\n        \r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class PatternSearch {\r\n\r\n    public static void main(String[] args) {\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5}\r\n        };\r\n\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        PatternSearch ps = new PatternSearch();\r\n        ps.search(T, P);\r\n    }\r\n\r\n    public void search(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        \r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (match(T, P, i, j, u, v)) {\r\n                    System.out.println(""Pattern found at ("" + i + "","" + j + "")"");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean match(int[][] T, int[][] P, int x, int y, int u, int v) {\r\n        for (int i = 0; i < u; i++) {\r\n            for (int j = 0; j < v; j++) {\r\n     \r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class HomeFragment extends Fragment {\r\n    private RecyclerView rv;\r\n    private Query q;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> ad;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        rv = v.findViewById(R.id.search_recyclerview);\r\n        LinearLayoutManager llm = new LinearLayoutManager(getContext());\r\n        rv.setLayoutManager(llm);\r\n        rv.setHasFixedSize(true);\r\n\r\n        setQByOrder(""technology"", ""totalInvestors"");\r\n        fetchRes(q);\r\n\r\n        return v;\r\n    }\r\n\r\n    protected void setQByOrder(String choice, String order) {\r\n        q = FirebaseDatabase.getInstance()\r\n                .getReference()\r\n                .child(""Category_wise"").child(choice).orderByChild(order);\r\n    }\r\n\r\n    protected void fetchRes(Query q) {\r\n        FirebaseRecyclerOptions<SCard> opts =\r\n                new FirebaseRecyclerOptions.Builder<SCard>()\r\n                        .setQuery(q, new SnapshotParser<SCard>() {\r\n                            @NonNull\r\n                            @Override\r\n                            public SCard parseSnapshot(@NonNull DataSnapshot snapshot) {\r\n                                return new SCard(\r\n                                        Objects.requireNonNull(snapshot.child(""companyName"").getValue()).toString(),\r\n                                        Objects.requireNonNull(snapshot.getKey()).toString()\r\n                                );\r\n                            }\r\n                        })\r\n                        .build();\r\n        ad = new SCardAdapter<>(opts);\r\n        ad.startListening();\r\n        rv.setAdapter(ad);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        ad.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        ad.stopListening();\r\n    }\r\n}\r\n\r\npublic class SCardAdapter<M extends SCard, V extends SCardAdapter.ViewHolder> extends FirebaseRecyclerAdapter<SCard, V> {\r\n\r\n    FirebaseRecyclerOptions<SCard> opts;\r\n    public SCardAdapter(@Nullable FirebaseRecyclerOptions<SCard> opts) {\r\n        super(opts);\r\n        this.opts = opts;\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(V holder, @SuppressLint(""RecyclerView"") final int pos, SCard model) {\r\n        holder.setName(model.getsName());\r\n    }\r\n\r\n    @Override\r\n    public V onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.startup_search_card, parent, false);\r\n        return (V) new ViewHolder(view);\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class LocaleConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new LocaleInterceptor());\r\n    }\r\n\r\n    public class LocaleInterceptor extends HandlerInterceptorAdapter {\r\n        private static final Set<String> VALID_LOCALES = new HashSet<>(Arrays.asList(""en"", ""hi""));\r\n\r\n        @Override\r\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n            String locale = request.getParameter(""locale"");\r\n            if (locale != null && !VALID_LOCALES.contains(locale)) {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,import java.lang.reflect.Constructor;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<?>[] constructors = Parent.class.getDeclaredConstructors();\r\n        constructors[0].setAccessible(true);\r\n        Parent parent = (Parent) constructors[0].newInstance();\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory kf = KeyFactory.getInstance(""EC"");\r\n        PrivateKey pkey = kf.generatePrivate(keySpec);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import com.google.protobuf.Descriptors;\r\nimport com.google.protobuf.GeneratedMessageV3;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\n\r\npublic class ProtoParser {\r\n    public static void main(String[] args) throws IOException {\r\n        String protoFile = ""path/to/your.proto"";\r\n        FileInputStream fis = new FileInputStream(protoFile);\r\n        \r\n        Descriptors.FileDescriptor fileDescriptor = \r\n            Descriptors.FileDescriptor.buildFrom(fis, new Descriptors.FileDescriptor[0]);\r\n        \r\n        for (Descriptors.ServiceDescriptor service : fileDescriptor.getServices()) {\r\n            System.out.println(""Service: "" + service.getName());\r\n        }\r\n        \r\n        for (Descriptors.Descriptor message : fileDescriptor.getMessageTypes()) {\r\n            System.out.println(""Message: "" + message.getName());\r\n        }\r\n        \r\n        fi\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.concurrent.*;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1000);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Timeout occurred"");\r\n        }\r\n        int result = counter.get().get();\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout) throws TimeoutException {\r\n        ExecutorService executor = Executors.newSingleThreadExecutor();\r\n        try {\r\n            Future<?> future = executor.submit(() -> {\r\n                while (loop-- >= 0) {\r\n                    counter.get().incrementAndGet();\r\n                    callback.apply(null);\r\n                }\r\n            });\r\n            future.get(timeout, TimeUnit.MILLISECONDS);\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        } catch (TimeoutException e) {\r\n            throw e;\r\n        } finally {\r\n            executor.shutdownNow();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.*;\r\n\r\npublic class Step1 {\r\n    private Tracer tracer;\r\n\r\n    public Step1(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj) {\r\n        var paddedArray = new byte[16];\r\n        var originalArray = obj.getUniqueId().getBytes();\r\n        System.arraycopy(originalArray, 0, paddedArray, 16 - originalArray.length, originalArray.length);\r\n\r\n        var traceId = TraceId.fromBytes(paddedArray);\r\n        var spanId = SpanId.fromBytes(paddedArray);\r\n\r\n        var spanContext = SpanContext.create(traceId, spanId, TraceFlags.getDefault(), TraceState.getDefault());\r\n        var wrap = Span.wrap(spanContext);\r\n        var otelContext = Context.root().with(wrap);\r\n\r\n        var span = tracer.spanBuilder(""Step1"").setParent(otelContext).startSpan();\r\n        CompletableFuture.runAsync(() -> {\r\n            // ETL code he\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class LRUCache {\r\n    int cap;\r\n    Map<Integer, Integer> map = new HashMap<>();\r\n    LinkedHashMap<Integer, Integer> cache;\r\n\r\n    public LRUCache(int cap) {\r\n        this.cap = cap;\r\n        cache = new LinkedHashMap<>(cap, 0.75f, true);\r\n    }\r\n\r\n    public int get(int key) {\r\n        return cache.getOrDefault(key, -1);\r\n    }\r\n\r\n    public void put(int key, int val) {\r\n        if (cache.size() >= cap && !cache.containsKey(key)) {\r\n            int eldestKey = cache.entrySet().iterator().next().getKey();\r\n            cache.remove(eldestKey);\r\n        }\r\n        cache.put(key, val);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"findAll().flatMap(p -> {\r\n    return Flux.fromStream(p.getRelations().stream())\r\n            .filter(r -> isPassing(r))\r\n            .flatMap(r -> findStorageId(r));\r\n})\r\n.take(1)\r\n.handle((Long storageId, SynchronousSink<Long> sink) -> {\r\n    if (storageId != null) {\r\n        sink.next(storageId);\r\n        sink.complete();\r\n    }\r\n})\r\n.switchIfEmpty(Mono.error(new RuntimeException(""Can't find storageId."")));\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    public final int width = 800;\r\n    public final int length = 600;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n    \r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n    \r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n    \r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n    \r\n    private void loadImage(){\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        Image originalImage =ii.getImage();\r\n        int newWidth = 75;\r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n    \r\n    @Override\r\n    protected void paintComponent(Graphics g){\r\n        super.paintComponent(g);\r\n        g.clearRect(0, 0, getWidth(), getHeight());\r\n        drawImage(g);\r\n    }\r\n    \r\n    private void drawImage(Graphics g){\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n    \r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n    \r\n    private void updatePosition(){\r\n        if (leftPressed){\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if(rightPressed){\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if(upPressed){\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if(downPressed){\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyPressed(KeyEvent e){\r\n        int key = e.getKeyCode();\r\n        \r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n        \r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n    }\r\n\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n    \r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n    \r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n    \r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        Image originalImage =ii.getImage();\r\n        int newWidth = 200;\r\n        int newHeight = 200;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n    \r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.clearRect(0, 0, getWidth(), getHeight());\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e){\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args){\r\n        SwingUtilities.invokeLater(new Runnable(){\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(500,500);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n                \r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n                \r\n                frame.setLayout(null);\r\n                \r\n                surface.setBounds(0, 0, 500, 500);\r\n                frame.add(surface);\r\n                \r\n                blueDot.setBounds((int) (Math.random() * 450), 0, 500, 500);\r\n                frame.add(blueDot);\r\n                \r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n                \r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n                \r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n                        \r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class GenTemp {\r\n    private static final AtomicLong CNT = new AtomicLong(0);\r\n\r\n    public static String genTemp() {\r\n        long val = CNT.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", (val >> 32) & 0xFFFF, (val >> 16) & 0xFFF, val & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(genTemp());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.util.function.UnaryOperator;\r\nimport javafx.scene.control.TextFormatter;\r\n\r\npublic class TestApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        SpinnerValueFactory<BigDecimal> factory = new SpinnerValueFactory<BigDecimal>() {\r\n            @Override\r\n            public void decrement(int steps) {\r\n                setValue(getValue().subtract(BigDecimal.valueOf(steps * 0.25)));\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                setValue(getValue().add(BigDecimal.valueOf(steps * 0.25)));\r\n            }\r\n        };\r\n\r\n        factory.setValue(BigDecimal.ZERO);\r\n        factory.setAmountToStepBy(BigDecimal.valueOf(0.25));\r\n        factory.setConverter(new javafx.util.StringConverter<BigDecimal>() {\r\n            @Override\r\n            public String toString(BigDecimal object) {\r\n                DecimalFormat df = new DecimalFormat(""+#.00;-#.00"");\r\n                return df.format(object);\r\n            }\r\n\r\n            @Override\r\n            public BigDecimal fromString(String string) {\r\n                try {\r\n                    return new BigDecimal(string.replace("","", "".""));\r\n                } catch (NumberFormatException e) {\r\n                    return BigDecimal.ZERO;\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(factory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        Pattern validText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            if (validText.matcher(change.getControlNewText()).matches()) {\r\n                return change;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().addListener(new ChangeListener<BigDecimal>() {\r\n            @Override\r\n            public void changed(ObservableValue<? extends BigDecimal> observable, BigDecimal oldValue, BigDecimal newValue) {\r\n                if (newValue.compareTo(BigDecimal.valueOf(-20.00)) < 0) {\r\n                    spinner.getValueFactory().setValue(BigDecimal.valueOf(-20.00));\r\n                }\r\n                if (newValue.compareTo(BigDecimal.valueOf(20.00)) > 0) {\r\n                    spinner.getValueFactory().setValue(BigDecimal.valueOf(20.00));\r\n  \r\n"
0,1,misclassified_in_Test_9.csv.csv,"SimpleObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>(stage.getUserData());\r\n\r\nuserDataProperty.addListener((observable, oldValue, newValue) -> {\r\n    System.out.println(""new userdata: "" + newValue);\r\n});\r\n\r\nstage.setUserData(2);\r\nuserDataProperty.set(stage.getUserData());\r\nSystem.out.println(stage.getUserData());\r\n\r\nstage.setUserData(3);\r\nuserDataProperty.set(stage.getUserData());\r\nSystem.out.println(stage.getUserData());\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package com.example.security;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.authentication.AuthenticationManagerBuilder;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecConfig {\r\n\r\n    private final UserDetailsService userService;\r\n    private final BCryptPasswordEncoder bCryptPwdEnc;\r\n    private final String jwtSec;\r\n    private final long accessTokExp;\r\n    private final long refreshTokExp;\r\n\r\n    public SecConfig(UserDetailsService userService, BCryptPasswordEncoder bCryptPwdEnc, \r\n                     String jwtSec, long accessTokExp, long refreshTokExp) {\r\n        this.userService = userService;\r\n        this.bCryptPwdEnc = bCryptPwdEnc;\r\n        this.jwtSec = jwtSec;\r\n        this.accessTokExp = accessTokExp;\r\n        this.refreshTokExp = refreshTokExp;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain security(HttpSecurity http) throws Exception {\r\n        CustomAuthFilter customAuthFilter = new CustomAuthFilter(authMgr(), accessTokExp, refreshTokExp, jwtSec);\r\n        customAuthFilter.setFilterProcessesUrl(""/api/login"");\r\n        http.csrf().disable()\r\n            .sessionManagement()\r\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n            .authorizeRequests()\r\n                .antMatchers(""/error"").permitAll()\r\n                .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n                .anyRequest().authenticated()\r\n            .and()\r\n            .addFilter(customAuthFilter)\r\n            .addFilterBefore(new CustomAuthzFilter(jwtSec), UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authMgr() throws Exception {\r\n        return authenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder pwdEnc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.userDetailsService(userService).passwordEncoder(pwdEnc());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class MyKeyMgr extends X509ExtendedKeyManager {\r\n    private final X509KeyManager km;\r\n    private final String als;\r\n\r\n    MyKeyMgr(X509KeyManager km, String als) {\r\n        this.km = km;\r\n        this.als = als;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] key, Principal[] p, Socket s) {\r\n        return als;\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String key, Principal[] p, Socket s) {\r\n        return km.chooseServerAlias(key, p, s);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String als) {\r\n        return km.getCertificateChain(als);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String als) {\r\n        return km.getPrivateKey(als);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String key, Principal[] p) {\r\n        return km.getClientAliases(key, p);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String key, Principal[] p) {\r\n        return km.getServerAliases(key, p);\r\n    }\r\n}\r\n\r\nprivate static SSLSocketFactory getFac(String ca, String caPwd, String usr, String usrPwd, String als) \r\n        throws IOException, GeneralSecurityException {\r\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    ks.load(new FileInputStream(usr), usrPwd.toCharArray());\r\n\r\n    KeyStore ts = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    ts.load(new FileInputStream(ca), caPwd.toCharArray());\r\n\r\n    TrustManagerFactory tmf = TrustManagerFactory.getInstance(""SunX509"");\r\n    tmf.init(ts);\r\n\r\n    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");\r\n    kmf.init(ks, usrPwd.toCharArray());\r\n\r\n    X509KeyManager km = (X509KeyManager) kmf.getKeyManagers()[0];\r\n    SSLContext ctx = SSLContext.getInstance(""TLS"");\r\n    ctx.init(new KeyManager[]{new MyKeyMgr(km, als)}, tmf.getTrustManagers(), null);\r\n\r\n    return ctx.getSocketFactory();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," void visitLineNumber(int ln, Label lb) {\r\n    super.visitLineNumber(ln, lb);\r\n    mv.visitLdcInsn(ln);\r\n    mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""log"", ""(I)V"", false);\r\n}\r\n\r\n@Override\r\npublic void visitCode() {\r\n    super.visitCode();\r\n    Label lb = new Label();\r\n    mv.visitLabel(lb);\r\n    visitLineNumber(-1, lb);\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"private static final ScheduledExecutorService SCH = Executors.newScheduledThreadPool(8);\r\nprivate static final ExecutorService SER = Executors.newFixedThreadPool(8);\r\n\r\nList<CompletableFuture<Boolean>> lst = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\n    lst.add(CompletableFuture.supplyAsync(() -> run(new Cli()), SER));\r\n}\r\nSER.shutdown();\r\n\r\nprivate static Boolean run(Cli cli) {\r\n    var id = cli.gen();\r\n    return chk(cli, id);\r\n}\r\n\r\nprivate static Boolean chk(Cli cli, String id) {\r\n    CompletableFuture<Boolean> fut = new CompletableFuture<>();\r\n    Runnable r = () -> {\r\n        if (cli.sts(id).eq(Sts.PEN)) return;\r\n        fut.complete(cli.rep(id));\r\n    };\r\n    SCH.scheduleAtFixedRate(r, 0, 10, TimeUnit.SECONDS);\r\n    return fut.join();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"JTextArea txt = new JTextArea();\r\ntxt.addKeyListener(new KeyAdapter() {\r\n    public void keyPressed(KeyEvent e) {\r\n        if (e.getKeyCode() == KeyEvent.VK_TAB) {\r\n            e.consume();\r\n            txt.insert(""    "", txt.getCaretPosition());\r\n        }\r\n    }\r\n});\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class AnnGen extends AbstractProcessor {\r\n    \r\n    private final Map<String, TypeElement> annMap = new HashMap<>();\r\n    \r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> anns, RoundEnvironment env) {\r\n        if (env.processingOver()) {\r\n            annMap.forEach((k, v) -> procGen(v));\r\n            return false;\r\n        }\r\n        env.getElementsAnnotatedWith(Gen.class).forEach(el -> {\r\n            String n = el.getSimpleName() + ""Ann"";\r\n            annMap.put(n, (TypeElement) el);\r\n            procAnn(n, (TypeElement) el);\r\n        });\r\n        return false;\r\n    }\r\n    \r\n    private void procAnn(String n, TypeElement el) {\r\n        String p = processingEnv.getElementUtils().getPackageOf(el).toString();\r\n        try (Writer w = processingEnv.getFiler().createSourceFile(p + ""."" + n).openWriter()) {\r\n            w.write(""package "" + p + "";\n"");\r\n            w.write(""@interface "" + n + "" { "" + el.getSimpleName() + "" val(); }"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    \r\n    private void procGen(TypeElement el) {\r\n        processingEnv.getElementUtils().getPackageElement(el.getQualifiedName().toString())\r\n            .getEnclosedElements().stream()\r\n            .filter(e -> e.getAnnotationMirrors().stream()\r\n                .anyMatch(a -> annMap.containsKey(a.getAnnotationType().toString())))\r\n            .forEach(e -> genCode(e));\r\n    }\r\n    \r\n    private void genCode(Element el) {\r\n        String p = processingEnv.getElementUtils().getPackageOf(el).toString();\r\n        String n = el.getSimpleName() + ""Impl"";\r\n        try (Writer w = processingEnv.getFiler().createSourceFile(p + ""."" + n).openWriter()) {\r\n            w.write(""package "" + p + "";\n class "" + n + "" {}"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class Res {\r\n    @JsonProperty(""count"")\r\n    private int cnt;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int code;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    @JsonSerialize(using = StrArrSer.class)\r\n    @JsonDeserialize(using = StrArrDes.class)\r\n    private String[] data;\r\n\r\n    public String[] getData() { return data; }\r\n    public void setData(String[] data) { this.data = data; }\r\n}\r\n\r\npublic class StrArrSer extends JsonSerializer<String[]> {\r\n    @Override\r\n    public void serialize(String[] val, JsonGenerator gen, SerializerProvider sp) throws IOException {\r\n        gen.writeStartArray();\r\n        for (String s : val) gen.writeRawValue(s);\r\n        gen.writeEndArray();\r\n    }\r\n}\r\n\r\npublic class StrArrDes extends JsonDeserializer<String[]> {\r\n    @Override\r\n    public String[] deserialize(JsonParser p, DeserializationContext ctx) throws IOException {\r\n        List<String> lst = new ArrayList<>();\r\n        while (p.nextToken() != JsonToken.END_ARRAY) lst.add(p.readValueAsTree().toString());\r\n        return lst.toArray(new String[0]);\r\n    }\r\n}\r\n\r\nObjectMapper om = new ObjectMapper();\r\nRes res = om.readValue(jsonStr\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class StrToDtDesTest {\r\n    \r\n    private StrToDtDes des;\r\n    private JsonParser jp;\r\n    private DeserializationContext ctx;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        des = new StrToDtDes();\r\n        jp = mock(JsonParser.class);\r\n        ctx = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testValidDate() throws Exception {\r\n        when(jp.getText()).thenReturn(""2025-03-17T10:15:30Z"");\r\n        Date dt = des.deserialize(jp, ctx);\r\n        assertNotNull(dt);\r\n    }\r\n\r\n    @Test\r\n    void testEmptyDate() throws Exception {\r\n        when(jp.getText()).thenReturn("""");\r\n        Date dt = des.deserialize(jp, ctx);\r\n        assertNull(dt);\r\n    }\r\n\r\n    @Test\r\n    void testInvalidDate() throws Exception {\r\n        when(jp.getText()).thenReturn(""invalid-date"");\r\n        assertThrows(MyCustomException.class, () -> des.deserialize(jp, ctx));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\nimport org.openqa.selenium.logging.LoggingPreferences;\r\nimport java.util.logging.Level;\r\n\r\npublic class MainEx {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n        FirefoxOptions opt = new FirefoxOptions();\r\n        LoggingPreferences logPrefs = new LoggingPreferences();\r\n        logPrefs.enable(LogType.BROWSER, Level.ALL);\r\n        opt.setCapability(""goog:loggingPrefs"", logPrefs);\r\n        WebDriver drv = new FirefoxDriver(opt);\r\n        drv.get(""https://www.google.com"");\r\n        drv.manage().logs().get(LogType.BROWSER).forEach(e -> System.out.println(e.getMessage()));\r\n        drv.quit();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class SecCfg {\r\n\r\n    @Value(""${sec.jwt.key}"")\r\n    private String key;\r\n\r\n    @Bean\r\n    SecurityFilterChain auth(HttpSecurity http) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain res(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(a -> a.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n            .formLogin(f -> f.loginPage(""/login"").permitAll())\r\n            .oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    JwtEncoder encJwt() {\r\n        byte[] b = Base64.getDecoder().decode(key);\r\n        SecretKeySpec s = new SecretKeySpec(b, ""HmacSHA256"");\r\n        OctetSequenceKey o = new OctetSequenceKey.Builder(s).keyID(""k"").algorithm(MACAlgorithm.HS256).build();\r\n        JWKSet j = new JWKSet(o);\r\n        JWKSource<SecurityContext> src = (s1, s2) -> s1.select(j);\r\n        return new NimbusJwtEncoder(src);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder decJwt() {\r\n        byte[] b = Base64.getDecoder().decode(key);\r\n        SecretKeySpec s = new SecretKeySpec(b, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(s).build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Co {\r\n\r\n    private String n;\r\n    private String m;\r\n\r\n    public Co(@Value(""Adventure of War"") String n, @Value(""A place for War"") String m) {\r\n        this.n = n;\r\n        this.m = m;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Co{"" + ""n='"" + n + '\'' + "", m='"" + m + '\'' + '}';\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package sec.cfg;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.core.userdetails.*;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecCfg {\r\n\r\n    @Bean\r\n    public PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService memUsr() {\r\n        UserDetails u = User.withUsername(""spcUsr"")\r\n                .password(enc().encode(""spcPwd""))\r\n                .roles(""SPC"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(u);\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService dbUsr() {\r\n        return new CstUsrSrv();\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain spcSec(HttpSecurity h) throws Exception {\r\n        h.securityMatcher(""/spc/**"")\r\n                .authorizeHttpRequests(a -> a.anyRequest().authenticated())\r\n                .userDetailsService(memUsr())\r\n                .httpBasic();\r\n        return h.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain genSec(HttpSecurity h) throws Exception {\r\n        h.authorizeHttpRequests(a -> a.anyRequest().authenticated())\r\n                .userDetailsService(dbUsr())\r\n                .httpBasic();\r\n        return h.build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package poll.me;\r\n\r\nimport io.smallrye.mutiny.Multi;\r\nimport java.time.Duration;\r\n\r\npublic class Poll {\r\n\r\n    public static void main(String[] args) {\r\n        Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n                .onItem().transformToUniAndMerge(t -> chkTxn())\r\n                .select().first()\r\n                .subscribe().with(txn -> System.out.println(""Txn: "" + txn), Throwable::printStackTrace);\r\n    }\r\n\r\n    static Multi<String> chkTxn() {\r\n        return Multi.createFrom().emitter(e -> {\r\n            srv.getTxn().toMulti()\r\n                    .onItem().transformToMultiAndMerge(t -> Multi.createFrom().iterable(t))\r\n                    .subscribe().with(t -> {\r\n                        if (!ver.on()) {\r\n                            e.fail(new Err());\r\n                        } else if (t.getAmt().stream().anyMatch(a -> a.getQty().equals(""test""))) {\r\n                            e.emit(t);\r\n                            e.complete();\r\n                        }\r\n                 \r\n"
0,1,misclassified_in_Test_9.csv.csv,"package enc.me;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Base64;\r\n\r\npublic class Enc {\r\n    public static void main(String[] args) throws Exception {\r\n        byte[] key = Files.readAllBytes(Paths.get(""/home/debashishd/Downloads/s_key""));\r\n        byte[] fixKey = new byte[32];\r\n        System.arraycopy(key, 0, fixKey, 0, Math.min(key.length, 32));\r\n\r\n        SecretKeySpec sec = new SecretKeySpec(fixKey, ""AES"");\r\n        IvParameterSpec iv = new IvParameterSpec(new byte[16]);\r\n\r\n        Cipher en = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        en.init(Cipher.ENCRYPT_MODE, sec, iv);\r\n        String msg = ""Hello this is Roxane"";\r\n        String enc = Base64.getEncoder().encodeToString(en.doFinal(msg.getBytes(StandardCharsets.UTF_8)));\r\n\r\n        System.out.println(""Encrypted value: "" + enc);\r\n\r\n        Cipher de = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        de.init(Cipher.DECRYPT_MODE, sec, iv);\r\n        String dec = new String(de.doFinal(Base64.getDecoder().decode(enc)), StandardCharsets.UTF_8);\r\n\r\n        System.out.println(""Decrypted value: "" + dec);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.*;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpnDis extends Application {\r\n    public void start(Stage stg) {\r\n        Spinner<Integer> spnMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spnMax = new Spinner<>(2, 6, 6);\r\n        spnMin.valueProperty().addListener((o, old, val) -> {\r\n            spnMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(val, 6, spnMax.getValue()));\r\n            setBtn(spnMin, val == 6, true);\r\n        });\r\n        spnMax.valueProperty().addListener((o, old, val) -> {\r\n            spnMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, val, spnMin.getValue()));\r\n            setBtn(spnMax, val == 2, false);\r\n        });\r\n        VBox v = new VBox(10, spnMin, spnMax);\r\n        stg.setScene(new Scene(v, 200, 100));\r\n        stg.show();\r\n    }\r\n\r\n    private void setBtn(Spinner<Integer> spn, boolean d, boolean up) {\r\n        spn.lookupAll("".increment-arrow"").forEach(n -> n.setDisable(d && up));\r\n        spn.lookupAll("".decrement-arrow"").forEach(n -> n.setDisable(d && !up));\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package com.xrx;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class Tst {\r\n    public static void main(String[] a) {\r\n        try {\r\n            TemplateEngine te = new TemplateEngine();\r\n            ClassLoaderTemplateResolver r = new ClassLoaderTemplateResolver();\r\n            r.setCharacterEncoding(""UTF-8"");\r\n            r.setTemplateMode(TemplateMode.XML);\r\n            te.setTemplateResolver(r);\r\n            Context c = new Context();\r\n            c.setVariable(""TA"", ""????? ?????? ?? ??? ?????"");\r\n            c.setVariable(""TH"", ""?????"");\r\n            c.setVariable(""TC"", ""???"");\r\n            c.setVariable(""DT"", LocalDateTime.now().toString());\r\n            BufferedWriter o = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""out.xml""), StandardCharsets.UTF_8));\r\n            te.process(""tst.xml"", c, o);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package com.example.dataflow.io.redis;\r\n\r\nimport com.github.fppt.jedismock.RedisServer;\r\nimport org.apache.beam.sdk.io.TextIO;\r\nimport org.apache.beam.sdk.testing.PAssert;\r\nimport org.apache.beam.sdk.testing.TestPipeline;\r\nimport org.apache.beam.sdk.transforms.Create;\r\nimport org.apache.beam.sdk.transforms.Wait;\r\nimport org.apache.beam.sdk.values.KV;\r\nimport org.apache.beam.sdk.values.PCollection;\r\nimport org.junit.*;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.Transaction;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class RwIOTest {\r\n\r\n    private static final String R_HOST = ""localhost"";\r\n    private static final String[] DATA = new String[]{""123456789"", ""Bruce"", ""Wayne""};\r\n    @Mock\r\n    static Jedis jeds;\r\n    @Mock\r\n    private Transaction trns;\r\n    @Mock\r\n    CustomRedisConfigurations cnfg;\r\n\r\n    private int cnt;\r\n\r\n    @Rule\r\n    public TestPipeline p = TestPipeline.create();\r\n\r\n    @Before\r\n    public void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        when(cnfg.connect()).thenReturn(jeds);\r\n        when(jeds.multi()).thenReturn(trns);\r\n        cnt = 0;\r\n    }\r\n\r\n    @BeforeClass\r\n    public static void beforeClass() throws Exception {\r\n        RedisServer svr = RedisServer.newRedisServer(8000);\r\n        svr.start();\r\n        jeds = new Jedis(svr.getHost(), svr.getBindPort());\r\n    }\r\n\r\n    @AfterClass\r\n    public static void afterClass() throws IOException {\r\n        jeds.close();\r\n    }\r\n\r\n    @Test\r\n    public void testBatchProcessing() {\r\n        RwIO.Write spc = RwIO.write().withConnectionConfiguration(cnfg);\r\n        PCollection<KV<String, String>> flsh = p.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n        List<KV<String, String>> recs = new ArrayList<>();\r\n        for (int i = 0; i < 10000; i++) {\r\n            recs.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n        }\r\n\r\n        PCollection<KV<String, String>> out = p.apply(Create.of(recs));\r\n\r\n        out.apply(""Wait for flush"", Wait.on(flsh))\r\n           .apply(""Write to Redis"", RwIO.write()\r\n                .withConnectionConfiguration(CustomRedisConfigurations\r\n                    .create(R_HOST, 8000)\r\n                    .withTimeout(100)\r\n                    .withAuth(""creds"")\r\n                    .enableSSL()));\r\n        p.run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public void DevEvt(){\r\n    LangPrg.getSelectionModel().clearSelection();\r\n    LangPrg.setValue(null);\r\n    LangPrg.setPromptText(""Select a language programming"");\r\n    if(Dev.getValue().equals(""Back-end"")){\r\n        LangPrg.setItems(LangPrgBE);\r\n    }\r\n    else if(Dev.getValue().equals(""Front-end"")){\r\n        LangPrg.setItems(LangPrgFE);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"private static final String USB_PERM = ""com.ex.USB_PERM"";\r\n\r\npublic UsbSrv(ReactApplicationContext ctx) {\r\n    IntentFilter flt = new IntentFilter();\r\n    flt.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n    flt.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n    flt.addAction(USB_PERM);\r\n    ctx.registerReceiver(usbRec, flt);\r\n}\r\n\r\nprivate final BroadcastReceiver usbRec = new BroadcastReceiver() {\r\n    public void onReceive(Context ctx, Intent it) {\r\n        String act = it.getAction();\r\n        if (act.equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {\r\n            synchronized (this) {\r\n                UsbDevice dev = it.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                if (dev != null) {\r\n                    usbDev = dev;\r\n                    UsbManager mgr = (UsbManager) ctx.getSystemService(Context.USB_SERVICE);\r\n                    PendingIntent pi = PendingIntent.getBroadcast(ctx, 0, new Intent(USB_PERM), 0);\r\n                    mgr.requestPermission(usbDev, pi);\r\n                }\r\n            }\r\n        } else if (act.equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {\r\n            if (con != null) {\r\n                con.releaseInterface(usbIf);\r\n                con.close();\r\n            }\r\n            con = null;\r\n            usbDev = null;\r\n            endIn = null;\r\n            endOut = null;\r\n        } else if (act.equals(USB_PERM)) {\r\n            if (it.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                Log.d(""USB"", ""Perm OK"");\r\n            } else {\r\n                Log.d(""USB"", ""Perm Deny"");\r\n            }\r\n        }\r\n    }\r\n};\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package io.armadillo.aftfileuploads;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\r\n\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\n\r\n@SpringBootApplication\r\npublic class AftFileUploadsApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AftFileUploadsApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public ThreadPoolTaskScheduler taskSch() {\r\n        ThreadPoolTaskScheduler sch = new ThreadPoolTaskScheduler();\r\n        sch.setPoolSize(10);\r\n        sch.setThreadNamePrefix(""task-"");\r\n        sch.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\r\n        return sch;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class ResEnv<T> {\r\n    @Schema\r\n    private boolean sts;\r\n    @Schema\r\n    private T res;\r\n\r\n    public ResEnv(T res) {\r\n        this.sts = true;\r\n        this.res = res;\r\n    }\r\n\r\n    public boolean isSts() {\r\n        return sts;\r\n    }\r\n\r\n    public T getRes() {\r\n        return res;\r\n    }\r\n}\r\n\r\n@RestController\r\npublic class UsrCtl {\r\n    private final UsrSrv srv;\r\n\r\n    public UsrCtl(final UsrSrv srv) {\r\n        this.srv = srv;\r\n    }\r\n\r\n    @PostMapping(""/usr"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<ResEnv<UsrDto>> crt(final @RequestBody @Valid CrtUsr cmd) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(new ResEnv<>(srv.crt(cmd)));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package intcp;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class IntcpSrv implements ServerInterceptor {\r\n    @Override\r\n    public <R, S> Listener<R> interceptCall(ServerCall<R, S> cal, Metadata hdr, ServerCallHandler<R, S> nxt) {\r\n        System.out.println(""Hi"");\r\n        return nxt.startCall(cal, hdr);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"private <T> void pos(Class<T> cls) {\r\n    int x, y;\r\n    boolean crt = false;\r\n    while (!crt) {\r\n        x = rnd.nextInt(sx);\r\n        y = rnd.nextInt(sy);\r\n        if (fld.getFld(x, y) instanceof Emp) {\r\n            try {\r\n                T obj = cls.getConstructor(int.class, int.class, int.class, int.class, Fld.class, Ply.class, Obj.class)\r\n                          .newInstance(x, y, sx, sy, fld, ply, this);\r\n                fld.setFld(x, y, obj);\r\n                crt = true;\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class EsCfg {\r\n    @Bean\r\n    public RestClient rc() {\r\n        return RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n                .setHttpClientConfigCallback(http -> http\r\n                        .setSSLContext(ssl())\r\n                        .setDefaultCredentialsProvider(creds()))\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchTransport etp() {\r\n        return new RestClientTransport(rc(), new JacksonJsonpMapper());\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient ec() {\r\n        return new ElasticsearchClient(etp());\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchOperations eo() {\r\n        return new ElasticsearchTemplate(ec());\r\n    }\r\n\r\n    private SSLContext ssl() {\r\n        try (InputStream in = new ClassPathResource(""cert.pem"").getInputStream()) {\r\n            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");\r\n            Certificate cert = cf.generateCertificate(in);\r\n            KeyStore ks = KeyStore.getInstance(""pkcs12"");\r\n            ks.load(null, null);\r\n            ks.setCertificateEntry(""es-cert"", cert);\r\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n            tmf.init(ks);\r\n            SSLContext sc = SSLContext.getInstance(""TLS"");\r\n            sc.init(null, tmf.getTrustManagers(), new SecureRandom());\r\n            return sc;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private CredentialsProvider creds() {\r\n        CredentialsProvider cp = new BasicCredentialsProvider();\r\n        cp.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(""elastic"", ""123""));\r\n        return cp;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        Exe svc = new Exe(5);\r\n        svc.run(""hi"");\r\n        svc.run(""h"");\r\n        svc.run(""u"");\r\n        svc.run(""y"");\r\n        svc.run(""hi"");\r\n        svc.run(""p"");\r\n        svc.run(""o"");\r\n        svc.run(""bb"");\r\n        svc.shut();\r\n    }\r\n}\r\n\r\nclass Exe {\r\n    private final ExecutorService ex;\r\n    private final ConcurrentMap<String, Lock> map = new ConcurrentHashMap<>();\r\n\r\n    public Exe(int n) {\r\n        this.ex = Executors.newFixedThreadPool(n);\r\n    }\r\n\r\n    public void run(String s) {\r\n        ex.submit(() -> {\r\n            Lock l = map.computeIfAbsent(s, k -> new ReentrantLock());\r\n            if (l.tryLock()) {\r\n                try {\r\n                    System.out.println(s);\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException e) {\r\n                    Thread.currentThread().interrupt();\r\n                } finally {\r\n                    l.unlock();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void shut() {\r\n        ex.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,import org.springframework.context.annotation.*;\r\nimport org.springframework.http.codec.*;\r\n\r\n@Configuration\r\npublic class XmlCfg {\r\n\r\n    @Bean\r\n    public HttpMsgCod xmlCod() {\r\n        return new Jaxb2XmlDecoder();\r\n    }\r\n\r\n    @Bean\r\n    public HttpMsgCod xmlEnc() {\r\n        return new Jaxb2XmlEncoder();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"import javax.xml.bind.JAXBElement;\r\nimport javax.xml.namespace.QName;\r\nimport javax.xml.ws.WebServiceFeature;\r\nimport br.inf.portalfiscal.mdfe.wsdl.mdferecepcaosinc.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        ObjFct fct = new ObjFct();\r\n        QName qn = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""mdfeDadosMsg"");\r\n        JAXBElement<String> jax = new JAXBElement<>(qn, String.class, ""<mdfeDadosMsg xmlns=\""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc\"">...</mdfeDadosMsg>"");\r\n\r\n        MDFeRec rec = new MDFeRec();\r\n        MDFeRecS12 sp = rec.getMDFeRecS12(new WebServiceFeature[0]);\r\n        MdfeRecRes res = sp.mdfeRecepcao(jax.getValue());\r\n\r\n        System.out.println(res.getAny());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport java.io.*;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport com.itextpdf.text.pdf.BaseFont;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) throws Exception {\r\n        String htm = ""<!DOCTYPE html><html lang='ru'><head><meta charset='UTF-8'/></head><body><h3 style='font-family:Arial;'>??????</h3></body></html>"";\r\n        String pth = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream out = new FileOutputStream(pth);\r\n        ITextRenderer ren = new ITextRenderer();\r\n        ren.getFontResolver().addFont(""arial.ttf"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n        ren.setDocumentFromString(htm);\r\n        ren.layout();\r\n    \r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\nimport java.util.stream.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        String str = ""[[445, 292], [585, 331], [612, 223], [205, 532]]"";\r\n        int[][] arr = Arrays.stream(str.replaceAll(""[\\[\\]]"", """").split(""],\\s*\\[""))\r\n                .map(s -> Arrays.stream(s.split("","")).mapToInt(Integer::parseInt).toArray())\r\n                .toArray(int[][]::new);\r\n        for (int[] a : arr) System.out.println(Arrays.toString(a));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        Card[] d = {new Card(""A""), new Card(""B""), new Card(""C""), new Card(""D"")};\r\n        Random r = new Random();\r\n        for (int i = d.length - 1; i > 0; i--) {\r\n            int j = r.nextInt(i + 1);\r\n            Card t = d[i];\r\n            d[i] = d[j];\r\n            d[j] = t;\r\n        }\r\n        for (Card c : d) System.out.println(c);\r\n    }\r\n}\r\n\r\nclass Card {\r\n    String v;\r\n    Card(String v) { this.v = v; }\r\n    public String toString() { return v; }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.junit.jupiter.api.extension.*;\r\nimport org.junit.platform.suite.api.*;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\n@ExtendWith(JUnit5Srv.class)\r\npublic class JUnit5S {}\r\n\r\nclass JUnit5Srv implements BeforeAllCallback, AfterAllCallback {\r\n    @Override\r\n    public void beforeAll(ExtensionContext c) throws Exception { start(); }\r\n    @Override\r\n    public void afterAll(ExtensionContext c) throws Exception { stop(); }\r\n    void start() { System.out.println(""Start""); }\r\n    void stop() { System.out.println(""Stop""); }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(""compute/{u}/res"")\r\npublic Mono<Void> pch(@PathVariable String u, @RequestBody String r) {\r\n    return svc.upd(u, r);\r\n}\r\n\r\npublic Mono<Void> upd(String u, String r) {\r\n    return fnd(u).flatMap(a -> {\r\n        a.setResults(r);\r\n        return repo.save(a);\r\n    }).then();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class JaxbCfg {\r\n    @Bean\r\n    public Jaxb2Marshaller mar() {\r\n        Jaxb2Marshaller m = new Jaxb2Marshaller();\r\n        m.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        m.setMtomEnabled(false);\r\n        return m;\r\n    }\r\n}\r\n\r\n@Component\r\npublic class MySoap extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate tmp;\r\n\r\n    public MySoap(Jaxb2Marshaller mar) {\r\n        setMarshaller(mar);\r\n        setUnmarshaller(mar);\r\n        tmp = getWebServiceTemplate();\r\n    }\r\n\r\n    public void send(MyReq req) {\r\n        try {\r\n            tmp.marshalSendAndReceive(req);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\npublic class Bin {\r\n    public static BinDat mkBin(byte[] dat) {\r\n        BinDat b = new BinDat();\r\n        b.setBlob(new String(Base64.getEncoder().encode(dat)));\r\n        b.setExt(""pdf"");\r\n        return b;\r\n    }\r\n}\r\n\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = ""BinDat"", propOrder = {""blob"", ""ext""})\r\npublic class BinDat {\r\n    @XmlElement(required = true)\r\n    protected String blob;\r\n    @XmlElement(required = true)\r\n    protected String ext;\r\n\r\n    public void setBlob(String b) { this.blob = b; }\r\n    public void setExt(String e) { this.ext = e; }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View v) {\r\n        long v1, v2;\r\n        v1 = Long.parseLong(txtfirst.getText().toString());\r\n        v2 = Long.parseLong(txtsecond.getText().toString());\r\n        list.clear();\r\n        for(long i = v1; i <= v2; i++) {\r\n            list.add("""" + i);\r\n        }\r\n        li.setAdapter(arrayAdapter);\r\n    }\r\n});\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.lang.management.ManagementFactory;\r\nimport java.nio.file.*;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        var mx = ManagementFactory.getRuntimeMXBean();\r\n        var pid = mx.getName().split(""@"")[0];\r\n        var path = Paths.get(""path/to/file"");\r\n        var w = path.toFile().toPath();\r\n        var ref = new Object() { String usr = """"; };\r\n\r\n        Files.lines(Paths.get(""/proc/"" + pid + ""/fd""))\r\n            .filter(l -> l.contains(w.toString()))\r\n            .forEach(l -> ref.usr = l);\r\n\r\n        System.out.println(ref.usr);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.*;\r\nimport java.io.*;\r\n\r\npublic class App {\r\n    public static void main(String[] a) throws Exception {\r\n        var f = new File(""D:\\Demo\\src\\test\\java\\StringXml\\_ignoreText.xsl"");\r\n        var s = ""<?xml version='1.0' encoding='UTF-8'?>""\r\n              + ""<root><n>123</n><t>hello</t></root>"";\r\n        var tf = TransformerFactory.newInstance();\r\n        var t = tf.newTransformer(new StreamSource(f));\r\n        var r = new StringWriter();\r\n        t.transform(new StreamSource(new StringReader(s)), new StreamResult(r));\r\n        System.out.println(r);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(10)\r\npublic SecurityFilterChain sec1(HttpSecurity h) throws Exception {\r\n    h.securityMatcher(""/**"")\r\n     .authorizeHttpRequests(a -> a.requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n     .anyRequest().authenticated())\r\n     .oauth2ResourceServer(...);\r\n    return h.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain sec2(HttpSecurity h, ResourceFilter f) throws Exception {\r\n    h.securityMatcher(""/**"").addFilterAfter(f, SessionManagementFilter.class);\r\n    return h.build();\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class DocProc extends SimpleDocTreeVisitor<Void, Trees> {\r\n    private final Elements elm;\r\n    private final Types typ;\r\n\r\n    DocProc(ProcessingEnvironment e) {\r\n        this.elm = e.getElementUtils();\r\n        this.typ = e.getTypeUtils();\r\n    }\r\n\r\n    @Override\r\n    public Void visitLink(LinkTree l, Trees t) {\r\n        String sig = l.getReference().getSignature();\r\n        for (Element e : elm.getAllModuleElements()) {\r\n            for (Element p : e.getEnclosedElements()) {\r\n                for (Element i : p.getEnclosedElements()) {\r\n                    if (i.getSimpleName().toString().equals(sig)) {\r\n                        System.out.println(elm.getBinaryName((TypeElement) i));\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"interface S1 {\r\n    default void dsp() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface S2 {\r\n    void dsp();\r\n}\r\n\r\npublic class Per implements S1, S2 {\r\n    public void dsp() {\r\n        S1.super.dsp();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        Per p = new Per();\r\n        p.dsp();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package com.auto.ex;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\n\r\npublic class Main extends Application {\r\n\r\n    private static final ObservableList<String> lst1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert"");\r\n\r\n    private static final ObservableList<String> lst2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam"");\r\n\r\n    private AutoCompletionBinding<String> bind;\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        TextField txt = new TextField();\r\n        txt.setOnKeyTyped(e -> {\r\n            String in = txt.getText().toUpperCase();\r\n            if (bind != null) bind.dispose();\r\n            if (in.length() == 2) {\r\n                bind = TextFields.bindAutoCompletion(txt, in.startsWith(""A"") ? lst1 : lst2);\r\n                bind.setOnAutoCompleted(v -> System.out.println(""You picked "" + v.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox box = new VBox(10, txt);\r\n        stg.setScene(new Scene(box, 300, 200));\r\n        stg.setTitle(""AutoComplete"");\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\nimport org.apache.poi.hssf.usermodel.*;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExpXls {\r\n    public static void main(String[] args) {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             HSSFWorkbook wb = new HSSFWorkbook()) {\r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n            HSSFCellStyle[] stl = new HSSFCellStyle[50];\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                stl[i] = wb.createCellStyle();\r\n                stl[i].setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n                stl[i].setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n            }\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(stl[i]);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class SubSetChk {\r\n    public static void main(String[] args) {\r\n        Map<String, Set<Long>> mp = new HashMap<>();\r\n        mp.put(""a"", Set.of(1L, 2L, 3L));\r\n        mp.put(""b"", Set.of(4L, 5L));\r\n        mp.put(""c"", Set.of(1L));\r\n        mp.put(""d"", Set.of(2L, 3L));\r\n        mp.put(""e"", Set.of(5L));\r\n        mp.put(""f"", Set.of(6L));\r\n\r\n        List<String> res = new ArrayList<>();\r\n        List<String> ks = new ArrayList<>(mp.keySet());\r\n\r\n        for (int i = 0; i < ks.size(); i++) {\r\n            for (int j = i + 1; j < ks.size(); j++) {\r\n                if (mp.get(ks.get(i)).containsAll(mp.get(ks.get(j))) ||\r\n                    mp.get(ks.get(j)).containsAll(mp.get(ks.get(i)))) {\r\n                    res.add(ks.get(i) + "" and "" + ks.get(j));\r\n                }\r\n            }\r\n        }\r\n\r\n        res.forEach(System.out::println);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.reactive.*;\r\nimport reactor.core.publisher.*;\r\n\r\n@Service\r\npublic class ChSvc {\r\n    private final ChRep rep;\r\n    private final RxtxMgr txMgr;\r\n\r\n    public ChSvc(ChRep rep, RxtxMgr txMgr) {\r\n        this.rep = rep;\r\n        this.txMgr = txMgr;\r\n    }\r\n\r\n    public Mono<Ch> crt(Ch ch) {\r\n        return txMgr.getRxtx()\r\n            .execute(tx -> rep.sav(ch)\r\n                .map(c -> {\r\n                    if (true) throw new RuntimeException();\r\n                    return c;\r\n                })\r\n            );\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class SumLim {\r\n    public List<Integer> getSet(int[] arr, int tgt, int lim) {\r\n        List<Integer> res = new ArrayList<>();\r\n        if (dfs(arr, tgt, lim, 0, res)) return res;\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    private boolean dfs(int[] arr, int tgt, int lim, int idx, List<Integer> res) {\r\n        if (tgt == 0 && res.size() == lim) return true;\r\n        if (res.size() >= lim || idx >= arr.length) return false;\r\n        res.add(arr[idx]);\r\n        if (dfs(arr, tgt - arr[idx], lim, idx + 1, res)) return true;\r\n        res.remove(res.size() - 1);\r\n        return dfs(arr, tgt, lim, idx + 1, res);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SumLim obj = new SumLim();\r\n        System.out.println(obj.getSet(new int[]{2, 7, 11, 15}, 20, 3));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.web3j.crypto.*;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class SigVer {\r\n    public boolean chk(String adr, String sig, String nc) {\r\n        try {\r\n            String pre = ""\u0019Ethereum Signed Message:\n"" + nc.length() + nc;\r\n            byte[] msg = pre.getBytes(StandardCharsets.UTF_8);\r\n            byte[] msgH = Hash.sha3(msg);\r\n            Sign.SignatureData sigD = sigDat(sig);\r\n            BigInteger pubK = Sign.signedMessageToKey(msgH, sigD);\r\n            String recAdr = ""0x"" + Keys.getAddress(pubK);\r\n            return recAdr.equalsIgnoreCase(adr);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private Sign.SignatureData sigDat(String sig) {\r\n        byte[] sigB = Numeric.hexStringToByteArray(sig);\r\n        byte v = sigB[64];\r\n        if (v < 27) v += 27;\r\n        return new Sign.SignatureData(v, \r\n                Arrays.copyOfRange(sigB, 0, 32), \r\n                Arrays.copyOfRange(sigB, 32, 64));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum Agg {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVG(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, java.util.OptionalDouble> fn;\r\n\r\n    Agg(Function<DoubleStream, java.util.OptionalDouble> fn) {\r\n        this.fn = fn;\r\n    }\r\n\r\n    public double app(DoubleStream ds) {\r\n        return fn.apply(ds).orElse(-1);\r\n    }\r\n}\r\n\r\npublic class Cal {\r\n    public float calc(Agg a) {\r\n        return (float) a.app(provides.stream().mapToDouble(this::someFunc));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public abstract class BPld {\r\n}\r\n\r\npublic class APld extends BPld {\r\n    private int id;\r\n    private String nm;\r\n    public APld(int id, String nm) {\r\n        this.id = id;\r\n        this.nm = nm;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getNm() {\r\n        return nm;\r\n    }\r\n}\r\n\r\npublic class BCmd<T extends BPld> {\r\n    String cmd;\r\n    T pld;\r\n    public BCmd(String cmd, T pld) {\r\n        this.cmd = cmd;\r\n        this.pld = pld;\r\n    }\r\n}\r\n\r\npublic class ACmd extends BCmd<APld> {\r\n    public ACmd(APld pld) {\r\n        super(""Add"", pld);\r\n    }\r\n}\r\n\r\npublic abstract class BEvt<C extends BCmd<P>, P extends BPld> {\r\n    abstract protected BEH<? extends BEvt<C, P>, C, P> getHnd();\r\n}\r\n\r\npublic abstract class BEH<E extends BEvt<C, P>, C extends BCmd<P>, P extends BPld> {\r\n    abstract public void onTry(E e, ArrayList<BEvt<?, ?>> ev);\r\n    abstract public void onCom(String uid, E e);\r\n}\r\n\r\npublic class AEH extends BEH<AEvt, ACmd, APld> {\r\n    @Override\r\n    public void onTry(AEvt e, ArrayList<BEvt<?, ?>> ev) {\r\n    }\r\n    @Override\r\n    public void onCom(String uid, AEvt e) {\r\n    }\r\n}\r\n\r\npublic class AEvt extends BEvt<ACmd, APld> {\r\n    @Override\r\n    protected BEH<AEvt, ACmd, APld> getHnd() {\r\n        return new AEH();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.lang.module.*;\r\nimport java.util.*;\r\n\r\npublic class ModChk {\r\n    public static void main(String[] args) {\r\n        ModuleLayer l = ModuleLayer.boot();\r\n        Set<String> cor = Set.of(""java.base"", ""java.sql"", ""java.xml"", ""java.desktop"",\r\n                                 ""java.logging"", ""java.management"", ""java.naming"",\r\n                                 ""java.security.sasl"", ""java.instrument"", ""jdk.unsupported"");\r\n\r\n        Map<Boolean, List<String>> grp = new HashMap<>();\r\n        grp.put(true, new ArrayList<>());\r\n        grp.put(false, new ArrayList<>());\r\n\r\n        for (Module m : l.modules()) {\r\n            grp.get(cor.contains(m.getName())).add(m.getName());\r\n        }\r\n\r\n        System.out.println(""Core: "" + grp.get(true));\r\n        System.out.println(""Non-Core: "" + grp.get(false));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.time.*;\r\nimport java.time.format.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter fmt = new DateTimeFormatterBuilder()\r\n            .parseCaseInsensitive()\r\n            .appendPattern(""ddMMMyyyy"")\r\n            .toFormatter(Locale.of(""es"", ""ES""));\r\n\r\n        Map<String, String> rep = Map.of(\r\n            ""ENE"", ""JAN"", ""FEB"", ""FEB"", ""MAR"", ""MAR"",\r\n            ""ABR"", ""APR"", ""MAY"", ""MAY"", ""JUN"", ""JUN"",\r\n            ""JUL"", ""JUL"", ""AGO"", ""AUG"", ""SEP"", ""SEP"",\r\n            ""OCT"", ""OCT"", ""NOV"", ""NOV"", ""DIC"", ""DEC""\r\n        );\r\n\r\n        String txt = ""24ENE1982"";\r\n        for (var e : rep.entrySet()) {\r\n            txt = txt.replace(e.getKey(), e.getValue());\r\n        }\r\n\r\n        LocalDate dt = LocalDate.parse(txt, DateTimeFormatter.ofPattern(""ddMMMyyyy"", Locale.ENGLISH));\r\n        System.out.println(""Hello world! "" + dt);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class TxtCur {\r\n    public static void main(String[] args) {\r\n        JFrame frm = new JFrame();\r\n        JTextArea txt = new JTextArea(5, 20);\r\n        txt.setCursor(txt.getToolkit().createCustomCursor(\r\n            new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB), \r\n            new Point(), \r\n            ""NOCUR""\r\n        ));\r\n\r\n        frm.add(new JScrollPane(txt));\r\n        frm.setSize(300, 200);\r\n        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frm.setVisible(true);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.apache.poi.ss.formula.*;\r\nimport org.apache.poi.ss.formula.ptg.*;\r\nimport org.apache.poi.ss.util.*;\r\nimport java.util.*;\r\n\r\npublic class FmSh {\r\n    public static void main(String[] args) {\r\n        String fm = ""=(A2+B2)"";\r\n        String org = ""C2"";\r\n        String des = ""D2"";\r\n        System.out.println(shf(fm, org, des));\r\n    }\r\n\r\n    public static String shf(String fm, String org, String des) {\r\n        Ptgs ptg = FormulaParser.parse(fm, null, FormulaType.CELL, 0);\r\n        CellRef o = new CellRef(org);\r\n        CellRef d = new CellRef(des);\r\n        int dr = d.getRow() - o.getRow();\r\n        int dc = d.getCol() - o.getCol();\r\n        \r\n        for (Ptg p : ptg) {\r\n            if (p instanceof RefPtgBase) {\r\n                RefPtgBase r = (RefPtgBase) p;\r\n                if (!r.isColumnAbsolute()) r.setColumn(r.getColumn() + dc);\r\n                if (!r.isRowAbsolute()) r.setRow(r.getRow() + dr);\r\n            }\r\n        }\r\n        \r\n        return FormulaRenderer.toFormulaString(null, ptg);\r\n    }\r\n}\r\n\r\nclass CellRef {\r\n    private final CellReference ref;\r\n\r\n    public CellRef(String addr) {\r\n        this.ref = new CellReference(addr);\r\n    }\r\n\r\n    public int getRow() {\r\n        return ref.getRow();\r\n    }\r\n\r\n    public int getCol() {\r\n        return ref.getCol();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\n\r\npublic class FWr {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile f = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            f.write(""123456789"".getBytes());\r\n        }\r\n        try (RandomAccessFile f = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            f.seek(0);\r\n            f.write(""hello"".getBytes());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.beans.property.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.util.*;\r\nimport java.net.*;\r\nimport java.time.*;\r\nimport java.util.*;\r\n\r\npublic class Ctl implements Initializable {\r\n    @FXML\r\n    private TableView<Lib> tab;\r\n    @FXML\r\n    private TableColumn<Lib, String> cod, avl, tit, autDir;\r\n    private Svc svc = new Svc();\r\n\r\n    @Override\r\n    public void initialize(URL loc, ResourceBundle res) {\r\n        cod.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        avl.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        tit.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n        autDir.setCellValueFactory(c -> {\r\n            if (c.getValue() instanceof Bok) \r\n                return new SimpleStringProperty(((Bok) c.getValue()).getAut());\r\n            if (c.getValue() instanceof Mov) \r\n                return new SimpleStringProperty(((Mov) c.getValue()).getDir());\r\n            return new SimpleStringProperty("""");\r\n        });\r\n\r\n        tab.getItems().addAll(svc.getLibs());\r\n    }\r\n}\r\n\r\nabstract class Lib {\r\n    private int cod;\r\n    private String tit;\r\n    private boolean avl;\r\n    private int mid;\r\n    private LocalDate dt;\r\n\r\n    protected Lib(int cod, String tit, boolean avl, int mid, LocalDate dt) {\r\n        this.cod = cod;\r\n        this.tit = tit;\r\n        this.avl = avl;\r\n        this.mid = mid;\r\n        this.dt = dt;\r\n    }\r\n\r\n    public int getItemCode() { return cod; }\r\n    public String getTitle() { return tit; }\r\n    public boolean isAvailability() { return avl; }\r\n}\r\n\r\nclass Bok extends Lib {\r\n    private String aut;\r\n\r\n    protected Bok(int cod, String tit, boolean avl, int mid, LocalDate dt, String aut) {\r\n        super(cod, tit, avl, mid, dt);\r\n        this.aut = aut;\r\n    }\r\n\r\n    public String getAut() { return aut; }\r\n}\r\n\r\nclass Mov extends Lib {\r\n    private String dir;\r\n\r\n    protected Mov(int cod, String tit, boolean avl, int mid, LocalDate dt, String dir) {\r\n        super(cod, tit, avl, mid, dt);\r\n        this.dir = dir;\r\n    }\r\n\r\n    public String getDir() { return dir; }\r\n}\r\n\r\nclass Svc {\r\n    public List<Lib> getLibs() {\r\n        return List.of(\r\n            new Bok(1, ""Bk1"", true, 0, LocalDate.now(), ""Aut1""),\r\n            new Mov(2, ""Mv1"", false, 1, LocalDate.now(), ""Dir1"")\r\n        );\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.mockito.*;\r\nimport javax.sql.*;\r\nimport java.sql.*;\r\n\r\npublic class DbSim {\r\n    public static DataSource mockDS() throws SQLException {\r\n        DataSource ds = Mockito.spy(DataSourceBuilder.create().build());\r\n        Mockito.doAnswer(inv -> {\r\n            if (Math.random() < 0.5) throw new SQLTransientConnectionException(""Mock Timeout"");\r\n            return ds.getConnection();\r\n        }).when(ds).getConnection();\r\n        return ds;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import org.junit.jupiter.api.*;\r\nimport org.mockito.*;\r\nimport java.util.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass SvcTest {\r\n    private Svc svc;\r\n    @Mock\r\n    private Repo repo;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        svc = new Svc(repo);\r\n    }\r\n\r\n    @Test\r\n    void tstUpd() {\r\n        UUID id = UUID.randomUUID();\r\n        Req req = new Req(100);\r\n        Ent ent = new Ent(id, 50);\r\n\r\n        when(repo.findByUuid(id)).thenReturn(Optional.of(ent));\r\n        when(repo.saveAndFlush(any(Ent.class))).thenAnswer(i -> i.getArgument(0));\r\n\r\n        Dto res = svc.update(id, req);\r\n\r\n        assertEquals(100, res.getAmt());\r\n        verify(repo).saveAndFlush(ent);\r\n    }\r\n}\r\n\r\nclass Dto {\r\n    private int amt;\r\n    public Dto(Ent e) { this.amt = e.getAmt(); }\r\n    public int getAmt() { return amt; }\r\n}\r\n\r\nclass Req {\r\n    private int amt;\r\n    public Req(int amt) { this.amt = amt; }\r\n    public int getAmt() { return amt; }\r\n}\r\n\r\nclass Ent {\r\n    private UUID id;\r\n    private int amt;\r\n    public Ent(UUID id, int amt) { this.id = id; this.amt = amt; }\r\n    public int getAmt() { return amt; }\r\n    public void setAmt(int amt) { this.amt = amt; }\r\n}\r\n\r\ninterface Repo {\r\n    Optional<Ent> findByUuid(UUID id);\r\n    Ent saveAndFlush(Ent e);\r\n}\r\n\r\nclass Svc {\r\n    private Repo repo;\r\n    public Svc(Repo repo) { this.repo = repo; }\r\n    public Dto update(UUID id, Req req) {\r\n        Ent e = repo.findByUuid(id).orElseThrow();\r\n        e.setAmt(req.getAmt());\r\n        return new Dto(repo.saveAndFlush(e));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(basePackages = ""com.repo.db"", repositoryImplementationPostfix = ""DB"")\r\n@EnableRedisRepositories(basePackages = ""com.repo.rd"", repositoryImplementationPostfix = ""RD"")\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(App.class, args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package tb;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport tb.gen.CLSID;\r\nimport tb.gen.IID;\r\nimport tb.gen.ITaskbarList3;\r\nimport tb.gen.ITaskbarList3Vtbl;\r\nimport tb.gen.ShObjIdl_core_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Tb extends Application {\r\n    public static final String G = ""{%s}"";\r\n    public static final String C = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String I = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage s) {\r\n        var b = new javafx.scene.control.Button(""Go"");\r\n        b.setOnAction(e -> clk());\r\n        var r = new javafx.scene.layout.StackPane(b);\r\n        var sc = new javafx.scene.Scene(r, 300, 200);\r\n        s.setTitle(""Tb"");\r\n        s.setScene(sc);\r\n        s.show();\r\n    }\r\n\r\n    void clk() {\r\n        long w = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            try (var a = Arena.ofConfined()) {\r\n                var c = a.allocateFrom(G.formatted(C), StandardCharsets.UTF_16LE);\r\n                var i = a.allocateFrom(G.formatted(I), StandardCharsets.UTF_16LE);\r\n                var cl = CLSID.allocate(a);\r\n                var ii = IID.allocate(a);\r\n                var p = a.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment wh = a.allocate(ValueLayout.ADDRESS, w);\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.CLSIDFromString(c, cl);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.IIDFromString(i, ii);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.CoCreateInstance(cl, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), ii, p);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                var tp = p.get(ValueLayout.ADDRESS, 0);\r\n                var ti = tp.reinterpret(ITaskbarList3.sizeof());\r\n                MemorySegment vt = ITaskbarList3.lpVtbl(ti);\r\n                MemorySegment vti = vt.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n                MemorySegment hi = ITaskbarList3Vtbl.HrInit(vti);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(hi, ti);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                MemorySegment ps = ITaskbarList3Vtbl.SetProgressState(vti);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(ps, ti, wh, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                for (int i = 0; i < 100; i += 20) {\r\n                    MemorySegment pv = ITaskbarList3Vtbl.SetProgressValue(vti);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(pv, ti, wh, i, 100);\r\n                    if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                    Thread.sleep(500);\r\n                }\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(ps, ti, wh, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n            } catch (Throwable e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public void cpDb() {\r\n    AssetManager am = Objects.requireNonNull(requireContext()).getAssets();\r\n    Context ctx = requireContext();\r\n    ctx.getExternalFilesDir(null);\r\n    File dbFld = new File(ctx.getExternalFilesDir(null).getParent(), ""com.mydb.orca/databases"");\r\n    dbFld.mkdirs();\r\n\r\n    try {\r\n        String[] fls = am.list(""database/test"");\r\n        if (fls != null) {\r\n            for (String fn : fls) {\r\n                InputStream in = am.open(""database/test/"" + fn);\r\n                File outF = new File(dbFld, fn);\r\n                OutputStream out = new FileOutputStream(outF);\r\n                cpFl(in, out);\r\n                in.close();\r\n                out.flush();\r\n                out.close();\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""tag"", ""Failed to copy"", e);\r\n    }\r\n}\r\n\r\nprivate void cpFl(InputStream in, OutputStream out) throws IOException {\r\n    byte[] buf = new byte[1024];\r\n    int rd;\r\n    while ((rd = in.read(buf)) != -1) {\r\n        out.write(buf, 0, rd);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\npublic class M {\r\n    public static void main(String[] args) {\r\n        List<String> lst = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        lst.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        lst.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public void pC(Graphics g) {\r\n    super.pC(g);\r\n    if (A.getImg() != null) {\r\n        float wF = getP().getW() / 1280F;\r\n        float hF = getP().getH() / 859F;\r\n        int w, h, x, y;\r\n        if (wF < hF) {\r\n            h = getP().getH();\r\n            w = (int) (1280F * hF);\r\n            x = getP().getW() / 2 - w / 2;\r\n            y = 0;\r\n        } else {\r\n            w = getP().getW();\r\n            h = (int) (859F * wF);\r\n            x = 0;\r\n            y = getP().getH() / 2 - h / 2;\r\n        }\r\n        g.dI(A.getImg(), x, y, w, h, this);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"var es = Executors.newVirtualThreadPerTaskExecutor();\r\nvar sw = StopWatch.createStarted();\r\nvar ts = 10;\r\nvar fs = IntStream.range(1, ts + 1)\r\n    .mapToObj(i -> es.submit(new Tsk(i)))\r\n    .toList();\r\nfs.forEach(f -> { try { f.get(); } catch (Exception e) { e.printStackTrace(); } });\r\nsw.stop();\r\nSystem.out.println(""Time: "" + sw.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\nes.close();\r\n\r\nclass Tsk implements Callable<String> {\r\n    int id;\r\n    Tsk(int id) { this.id = id; }\r\n    public String call() {\r\n        System.out.println(""T: "" + id + "" start"");\r\n        var sw = StopWatch.createStarted();\r\n        try (var cn = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(""T: "" + id + "" con ok"");\r\n            var st = cn.createStatement();\r\n            System.out.println(""T: "" + id + "" sql go"");\r\n            var rs = st.executeQuery(""SELECT hello_world() AS out"");\r\n            String res = rs.next() ? rs.getString(""out"") : null;\r\n            st.close();\r\n            System.out.println(""T: "" + id + "" con cls"");\r\n            sw.stop();\r\n            System.out.println(""T: "" + id + "" done "" + sw.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n            return res;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\nimport java.util.*;\r\nimport java.util.stream.*;\r\n\r\npublic class M {\r\n    private static List<String> run(String cmd) {\r\n        List<String> out = new ArrayList<>();\r\n        String[] arr = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + cmd + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n        };\r\n        try {\r\n            Process p = Runtime.getRuntime().exec(arr);\r\n            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n            out = r.lines().collect(Collectors.toList());\r\n            p.waitFor();\r\n            p.destroy();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    public static void main(String[] x) {\r\n        List<String> res = run(""WMIC OS Get Caption,Version"");\r\n        if (res != null) res.forEach(System.out::println);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"try (Stream<Employee> s = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter w = response.getWriter();\r\n    Iterator<Employee> i = s.iterator();\r\n    w.write(""["");\r\n    if (i.hasNext()) {\r\n        w.write(jsonSerialize(i.next()));\r\n        while (i.hasNext()) {\r\n            w.write("","");\r\n            w.write(jsonSerialize(i.next()));\r\n        }\r\n    }\r\n    w.write(""]"");\r\n    w.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class Tst {\r\n    public static void prs(String pth) throws Exception {\r\n        try (CSVReader rdr = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(Tst.class.getResourceAsStream(pth))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n                .build()) {\r\n            String[] ln;\r\n            while ((ln = rdr.readNext()) != null) {\r\n                System.out.println(ln[0] + "" "" + ln[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            prs(""pth-tsv"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public interface Utl {\r\n    void get();\r\n}\r\n\r\n@Service\r\npublic class UtlOne implements Utl {\r\n    public void get() { }\r\n}\r\n\r\n@Service\r\npublic class UtlTwo implements Utl {\r\n    public void get() { }\r\n}\r\n\r\n@Component\r\npublic class UtlMgr {\r\n    private final UtlOne one;\r\n    private final UtlTwo two;\r\n    private Utl act;\r\n\r\n    @Autowired\r\n    public UtlMgr(UtlOne one, UtlTwo two) {\r\n        this.one = one;\r\n        this.two = two;\r\n        this.act = one;\r\n    }\r\n\r\n    public void swp(String val) {\r\n        act = ""one"".equals(val) ? one : two;\r\n    }\r\n\r\n    public Utl get() {\r\n        return act;\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DmoSvc {\r\n    private final UtlMgr mgr;\r\n\r\n    @Autowired\r\n    public DmoSvc(UtlMgr mgr) {\r\n        this.mgr = mgr;\r\n    }\r\n\r\n    public void run() {\r\n        mgr.get().get();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class Src {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length, r = 0, c = n - 1;\r\n        while (r < n && c >= 0) {\r\n            if (mat[r][c] == num) return true;\r\n            if (mat[r][c] > num) c--;\r\n            else r++;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\nimport java.util.*;\r\nimport org.apache.poi.openxml4j.opc.*;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.*;\r\n\r\npublic class WrdMrg {\r\n    private final OutputStream out;\r\n    private final List<InputStream> ins;\r\n    private XWPFDocument fst;\r\n\r\n    public WrdMrg(OutputStream out) {\r\n        this.out = out;\r\n        this.ins = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream in) throws Exception {\r\n        ins.add(in);\r\n        XWPFDocument doc = new XWPFDocument(OPCPackage.open(in));\r\n        if (fst == null) {\r\n            fst = doc;\r\n        } else {\r\n            XWPFParagraph br = fst.createParagraph();\r\n            br.setPageBreak(true);\r\n            for (XWPFParagraph p : doc.getParagraphs()) {\r\n                XWPFParagraph np = fst.createParagraph();\r\n                np.getCTP().set(p.getCTP().copy());\r\n            }\r\n            for (XWPFTable t : doc.getTables()) {\r\n                XWPFTable nt = fst.createTable();\r\n                nt.getCTTbl().set(t.getCTTbl().copy());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void merge() throws Exception {\r\n        fst.write(out);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        out.flush();\r\n        out.close();\r\n        for (InputStream i : ins) i.close();\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream fo = new FileOutputStream(""/home/vic/res.docx"");\r\n        WrdMrg wm = new WrdMrg(fo);\r\n        wm.add(new FileInputStream(""/home/vic/001.docx""));\r\n        wm.add(new FileInputStream(""/home/vic/002.docx""));\r\n        wm.merge();\r\n        wm.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\nimport java.security.*;\r\nimport java.util.*;\r\nimport org.wildfly.security.credential.*;\r\nimport org.wildfly.security.password.*;\r\nimport org.wildfly.security.password.interfaces.*;\r\nimport org.wildfly.security.password.util.*;\r\nimport org.wildfly.security.credential.store.*;\r\nimport org.wildfly.security.provider.*;\r\n\r\npublic class Sec {\r\n    public static void main(String[] args) throws Exception {\r\n        Provider prv = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(prv);\r\n\r\n        String msk = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        String[] pts = msk.split("";"");\r\n        MaskedPasswordSpec spc = new MaskedPasswordSpec(pts[1].toCharArray(), Integer.parseInt(pts[2]), Base64.getDecoder().decode(pts[0].substring(5)));\r\n        PasswordFactory fac = PasswordFactory.getInstance(MaskedPassword.ALGORITHM_MASKED, prv);\r\n        Password pwd = fac.generatePassword(spc);\r\n\r\n        CredentialStore.ProtectionParameter prm = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(new PasswordCredential(pwd)));\r\n\r\n        CredentialStore cs = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        String dir = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> cfg = new HashMap<>();\r\n        cfg.put(""keyStoreType"", ""JCEKS"");\r\n        cfg.put(""location"", dir + File.separator + ""credentials"" + File.separator + ""csstore.jceks"");\r\n        cfg.put(""modifiable"", ""false"");\r\n        cs.initialize(cfg, prm);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class MyFrag extends Fragment {\r\n    LinearLayout out;\r\n    Button btn;\r\n    int id = 0;\r\n\r\n    public View onCreateView(LayoutInflater inf, ViewGroup grp, Bundle b) {\r\n        View v = inf.inflate(R.layout.my_frag, grp, false);\r\n        out = v.findViewById(R.id.ll_out);\r\n        btn = v.findViewById(R.id.btn_prd);\r\n        btn.setOnClickListener(x -> addRow());\r\n        return v;\r\n    }\r\n\r\n    void addRow() {\r\n        LinearLayout row = new LinearLayout(getActivity());\r\n        row.setLayoutParams(new LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.MATCH_PARENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT));\r\n        row.setOrientation(LinearLayout.HORIZONTAL);\r\n        row.setId(id++);\r\n\r\n        EditText nm = new EditText(getActivity());\r\n        nm.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        nm.setHint(""Name"");\r\n\r\n        EditText pr = new EditText(getActivity());\r\n        pr.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        pr.setHint(""Price"");\r\n\r\n        EditText sp = new EditText(getActivity());\r\n        sp.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        sp.setHint(""Specs"");\r\n\r\n        Button del = new Button(getActivity());\r\n        del.setText(""X"");\r\n        del.setOnClickListener(x -> out.removeView(row));\r\n\r\n        row.addView(nm);\r\n        row.addView(pr);\r\n        row.addView(sp);\r\n        row.addView(del);\r\n        out.addView(row);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.*;\r\nimport java.security.spec.*;\r\nimport javax.crypto.*;\r\nimport javax.crypto.spec.*;\r\nimport org.bouncycastle.openssl.*;\r\nimport org.bouncycastle.openssl.jcajce.*;\r\n\r\npublic class KeyUtil {\r\n    public static PrivateKey getKey(String path, String pwd) throws Exception {\r\n        PEMParser p = new PEMParser(new FileReader(path));\r\n        Object o = p.readObject();\r\n        p.close();\r\n        JcaPEMKeyConverter c = new JcaPEMKeyConverter().setProvider(""BC"");\r\n        if (o instanceof PEMEncryptedKeyPair) {\r\n            PEMDecryptorProvider d = new JcePEMDecryptorProviderBuilder().build(pwd.toCharArray());\r\n            o = ((PEMEncryptedKeyPair) o).decryptKeyPair(d);\r\n        }\r\n        return c.getKeyPair((PEMKeyPair) o).getPrivate();\r\n    }\r\n\r\n    public static byte[] enc(PrivateKey k, byte[] d) throws Exception {\r\n        Cipher c = Cipher.getInstance(""RSA"");\r\n        c.init(Cipher.ENCRYPT_MODE, k);\r\n        return c.doFinal(d);\r\n    }\r\n\r\n    public static byte[] dec(PrivateKey k, byte[] d) throws Exception {\r\n        Cipher c = Cipher.getInstance(""RSA"");\r\n        c.init(Cipher.DECRYPT_MODE, k);\r\n        return c.doFinal(d);\r\n    }\r\n\r\n    public static void main(String[] a) throws Exception {\r\n        PrivateKey k = getKey(""key.pem"", ""pass"");\r\n        byte[] msg = ""Hello"".getBytes(StandardCharsets.UTF_8);\r\n        byte[] en = enc(k, msg);\r\n        byte[] de = dec(k, en);\r\n        System.out.println(new String(de, StandardCharsets.UTF_8));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\npublic class MainSrv extends HttpServlet {\r\n    public void init(ServletConfig cfg) throws ServletException {\r\n        super.init(cfg);\r\n        try {\r\n            conn();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(""Fail to conn"");\r\n        }\r\n    }\r\n\r\n    void conn() throws Exception {\r\n        if (!isUp()) throw new Exception(""No conn"");\r\n    }\r\n\r\n    boolean isUp() {\r\n        return false;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,public class App {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        f();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage s) {\r\n        var ta = new TextArea(""?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??"");\r\n        ta.setStyle(""-fx-font-family: 'Noto Color Emoji'; -fx-font-size: 16;"");\r\n        s.setScene(new Scene(new StackPane(ta), 400, 300));\r\n        s.show();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class PAdp extends RecyclerView.Adapter<PAdp.VH> {\r\n    private final Context ctx;\r\n    private final List<PMod> lst;\r\n    private final int dCol, sCol;\r\n    private final Set<Integer> sel;\r\n\r\n    private static final String P_N = ""PqItm"";\r\n    private static final String S_K = ""PqSel"";\r\n\r\n    public PAdp(Context ctx, List<PMod> lst) {\r\n        this.ctx = ctx;\r\n        this.lst = lst;\r\n        this.sel = new HashSet<>();\r\n\r\n        Resources res = ctx.getResources();\r\n        int m = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        dCol = ContextCompat.getColor(ctx, (m == Configuration.UI_MODE_NIGHT_YES) ? R.color.dD : R.color.dL);\r\n        sCol = ContextCompat.getColor(ctx, (m == Configuration.UI_MODE_NIGHT_YES) ? R.color.sD : R.color.sL);\r\n\r\n        SharedPreferences p = ctx.getSharedPreferences(P_N, Context.MODE_PRIVATE);\r\n        for (String i : p.getStringSet(S_K, new HashSet<>())) sel.add(Integer.parseInt(i));\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public VH onCreateViewHolder(@NonNull ViewGroup p, int v) {\r\n        return new VH(LayoutInflater.from(p.getContext()).inflate(R.layout.pq_l, p, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull VH h, int p) {\r\n        final PMod t = lst.get(p);\r\n        h.cv.setCardBackgroundColor(sel.contains(p) ? sCol : dCol);\r\n        h.cv.setOnClickListener(v -> {\r\n            SharedPreferences e = ctx.getSharedPreferences(P_N, Context.MODE_PRIVATE);\r\n            sel.add(p);\r\n            e.edit().putStringSet(S_K, sel.stream().map(String::valueOf).collect(Collectors.toSet())).apply();\r\n            notifyItemChanged(p);\r\n            Intent i = new Intent(h.cv.getContext(), VPdf.class);\r\n            i.putExtra(""pN"", t.getN());\r\n            i.putExtra(""pU"", t.getU());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            h.cv.getContext().startActivity(i);\r\n        });\r\n        h.t.setText(t.getN());\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return lst.size();\r\n    }\r\n\r\n    public static class VH extends RecyclerView.ViewHolder {\r\n        CardView cv;\r\n        TextView t;\r\n\r\n        public VH(View i) {\r\n            super(i);\r\n            cv = i.findViewById(R.id.pqC);\r\n            t = i.findViewById(R.id.pqT);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"(TestInstance.Lifecycle.PER_CLASS)\r\n@ExtendWith(MockitoExtension.class)\r\nclass ITst {\r\n\r\n    @InjectMocks\r\n    ISvc svc;\r\n\r\n    @Mock\r\n    IRep rep;\r\n\r\n    @Mock\r\n    CRep crep;\r\n\r\n    @Mock\r\n    IDMap map;\r\n\r\n    @Mock\r\n    UriComponentsBuilder ub;\r\n\r\n    @Mock\r\n    UriComponents uc;\r\n\r\n    @Captor\r\n    ArgumentCaptor<Long> lCap;\r\n\r\n    @Captor\r\n    ArgumentCaptor<String> sCap;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n    }\r\n\r\n    @Test\r\n    void tst() {\r\n        ITm itm = new ITm();\r\n        itm.setN(""Test"");\r\n        CData d = new CData(""Test"", ""Desc"", 11L, BigDecimal.TEN, 5);\r\n\r\n        when(rep.findByNIgnoreCase(any())).thenReturn(Optional.of(itm));\r\n\r\n        Exception ex = assertThrows(ICrtEx.class, () -> svc.create(d, ub));\r\n\r\n        assertEquals(""There is an item created with this name"", ex.getMessage());\r\n    }\r\n}\r\n\r\npublic interface IRep extends JpaRepository<ITm, Long> {\r\n    Optional<ITm> findByNIgnoreCase(String n);\r\n}\r\n\r\n@Service\r\npublic class ISvc {\r\n\r\n    private final IRep rep;\r\n    private final CRep crep;\r\n    private final IDMap map;\r\n    private final IImg img;\r\n\r\n    public ISvc(IRep rep, CRep crep, IDMap map, IImg img) {\r\n        this.rep = rep;\r\n        this.crep = crep;\r\n        this.map = map;\r\n        this.img = img;\r\n    }\r\n\r\n    @Transactional\r\n    public CRU create(CData d, UriComponentsBuilder ub) {\r\n        Optional<ITm> f = rep.findByNIgnoreCase(d.n());\r\n\r\n        if (f.isPresent()) throw new ICrtEx(""There is an item created with this name"");\r\n\r\n        return new CRU();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"String l = ""Left"";\r\nString r = ""Right"";\r\nString s = l + ""\t\t\t\t\t"" + r;\r\ntextView.setText(s);\r\ntextView.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public String toCsv(DmnRuleTestResult res) {\r\n    List<DmnTestCaseResult> lst = res.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter wr = new CSVWriter(sw, ',', CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, ""\n"")) {\r\n        \r\n        wr.writeNext(new String[]{""testInput"", ""expectedOutput"", ""testOutput"", ""errorMessage""});\r\n        \r\n        for (DmnTestCaseResult r : lst) {\r\n            for (Map<String, Object> out : r.getTestOutput()) {\r\n                wr.writeNext(new String[]{\r\n                    r.getTestInput().toString(),\r\n                    r.getExpectedOutput().toString(),\r\n                    out.toString(),\r\n                    r.getErrorMessage()\r\n                });\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception e) {\r\n        throw new CsvParseException(e.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class Dinic<T> {\r\n    private final Map<String, Map<String, Integer>> net = new HashMap<>();\r\n    private final List<String> nds = new ArrayList<>(List.of(""src"", ""sink""));\r\n    private int[] lvl;\r\n\r\n    private void bfs(String src) {\r\n        lvl = new int[nds.size()];\r\n        Arrays.fill(lvl, -1);\r\n        lvl[nds.indexOf(src)] = 0;\r\n        Queue<String> q = new LinkedList<>();\r\n        q.offer(src);\r\n        while (!q.isEmpty()) {\r\n            String u = q.poll();\r\n            for (var e : net.get(u).entrySet()) {\r\n                String v = e.getKey();\r\n                if (e.getValue() > 0 && lvl[nds.indexOf(v)] == -1) {\r\n                    lvl[nds.indexOf(v)] = lvl[nds.indexOf(u)] + 1;\r\n                    q.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int f, String snk) {\r\n        if (u.equals(snk)) return f;\r\n        for (var e : net.get(u).entrySet()) {\r\n            String v = e.getKey();\r\n            if (e.getValue() > 0 && lvl[nds.indexOf(u)] < lvl[nds.indexOf(v)]) {\r\n                int s = dfs(v, Math.min(f, e.getValue()), snk);\r\n                if (s > 0) {\r\n                    net.get(u).put(v, e.getValue() - s);\r\n                    net.get(v).put(u, net.get(v).getOrDefault(u, 0) + s);\r\n                    return s;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private void add(String f, String t, int c) {\r\n        net.computeIfAbsent(f, k -> new HashMap<>()).put(t, c);\r\n        net.computeIfAbsent(t, k -> new HashMap<>()).put(f, 0);\r\n        if (!nds.contains(f)) nds.add(f);\r\n        if (!nds.contains(t)) nds.add(t);\r\n    }\r\n\r\n    public int run(Map<T, Set<T>> g) {\r\n        Map<String, Integer> idx = new HashMap<>();\r\n        int id = 0;\r\n        for (T t : g.keySet()) {\r\n            String a = ""A"" + t.toString();\r\n            String b = ""B"" + t.toString();\r\n            idx.put(a, id++);\r\n            idx.put(b, id++);\r\n            add(""src"", a, 1);\r\n            add(b, ""sink"", 1);\r\n            for (T n : g.get(t)) add(a, ""B"" + n.toString(), 1);\r\n        }\r\n\r\n        int mf = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (lvl[nds.indexOf(""sink"")] == -1) break;\r\n            int f;\r\n            while ((f = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) mf += f;\r\n        }\r\n        return g.size() - mf;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public class AlrmRcvr extends BroadcastReceiver {\r\n\r\n    @Override\r\n    public void onReceive(Context ctx, Intent it) {\r\n\r\n        Vibrator vib = (Vibrator) ctx.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vib != null && vib.hasVibrator()) {\r\n            vib.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String ttl = it.getStringExtra(""title"");\r\n        String cmt = it.getStringExtra(""comment"");\r\n        Intent actIt = new Intent(ctx, MainActivity.class);\r\n        actIt.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        actIt.putExtra(""stop"", true);\r\n\r\n        PendingIntent penIt = PendingIntent.getActivity(ctx, 0, actIt, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String txt = ""Reminder for: "" + ttl + ""\n"" + ""Comments: "" + cmt;\r\n        NotificationCompat.Builder bld = new NotificationCompat.Builder(ctx, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(ttl)\r\n                .setContentText(txt)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(txt))\r\n                .setContentIntent(penIt)\r\n                .setDeleteIntent(penIt)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat mgr = NotificationManagerCompat.from(ctx);\r\n        mgr.notify(123, bld.build());\r\n\r\n        Uri uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        Ringtone rng = RingtoneManager.getRingtone(ctx, uri);\r\n        rng.play();\r\n\r\n        AlrmSrv.rng = rng;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"int[] arr = new int[10];\r\narr[0] = 6;\r\narr[1] = 2;\r\narr[2] = 8;\r\narr[3] = 1;\r\narr[4] = 3;\r\narr[5] = 0;\r\narr[6] = 9;\r\narr[7] = 7;\r\n\r\nSystem.out.print(""Search for? "");\r\nint s = in.nextInt();\r\nboolean found = false;\r\n\r\nfor(int i = 0; i < arr.length; i++) {\r\n    if(s == arr[i]) {\r\n        System.out.println(s + "" is at index "" + i + ""."");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\n\r\nif(!found) {\r\n    System.out.println(s + "" was not found."");\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Box box = new Box(200, 200, 200);\r\n        box.setTranslateX(300);\r\n        box.setTranslateY(200);\r\n        box.setTranslateZ(100);\r\n\r\n        box.setDrawMode(DrawMode.LINE);\r\n\r\n        box.setOnMouseEntered((MouseEvent e) -> {\r\n            box.setMaterial(new javafx.scene.paint.PhongMaterial(Color.RED));\r\n        });\r\n\r\n        box.setOnMouseExited((MouseEvent e) -> {\r\n            box.setMaterial(null);\r\n        });\r\n\r\n        PerspectiveCamera cam = new PerspectiveCamera(true);\r\n        Scene scene = new Scene(box, 600, 400, true);\r\n        scene.setFill(Color.LIGHTBLUE);\r\n        scene.setCamera(cam);\r\n\r\n        stage.setTitle(""3D Outline Effect"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import java.util.*;\r\n\r\nclass Brd {\r\n    public String gss;\r\n\r\n    public String tke() {\r\n        Scanner sc = new Scanner(System.in);\r\n        String gss;\r\n\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        gss = sc.next();\r\n        \r\n        chck(gss);\r\n        \r\n        return gss;\r\n    }\r\n\r\n    public void chck(String gss) {\r\n        boolean isOk = true;\r\n\r\n        if (gss.length() != 5)\r\n            isOk = false;\r\n\r\n        if (!gss.matches(""[a-zA-Z]+""))\r\n            isOk = false;\r\n\r\n        if (!isOk) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            gss = tke();\r\n        }\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Brd brd = new Brd();\r\n        String guess = brd.tke();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"package com.question.controller;\r\n\r\nimport com.question.service.LangService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LangCtrl {\r\n\r\n    private final LangService lService;\r\n\r\n    @Value(""${configuration}"")\r\n    private String config;\r\n\r\n    public LangCtrl(@Qualifier(""french"") LangService lService) {\r\n        this.lService = lService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String tst(@RequestParam String name) {\r\n        return lService.proc(name);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," interface MMapper {\r\n\r\n    @Mapping(target = ""agentName"", source = ""agentName"")\r\n    @Mapping(target = ""agentIdentityType"", source = ""agentIdentityType"")\r\n    @Mapping(target = ""agentIdentityNo"", source = ""agentIdentityNo"")\r\n    @Mapping(target = ""agentIdentityExpireAt"", source = ""agentIdentityExpireAt"")\r\n    AgentInfo toAgentInfo(WealthProdAccountInfoDTO dto);\r\n\r\n    default AgentInfo toAgentInfoWithNullCheck(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) {\r\n            return null;\r\n        }\r\n        if (dto.getAgentName() == null && dto.getAgentIdentityType() == null && \r\n            dto.getAgentIdentityNo() == null && dto.getAgentIdentityExpireAt() == null) {\r\n            return null;\r\n        }\r\n        return toAgentInfo(dto);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"public static void main(String[] args) throws IOException {\r\n    \r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n    \r\n    BufferedReader br = new BufferedReader(filObj);\r\n    \r\n    List<String> hdr = new ArrayList<String>();\r\n    List<HashMap<String, String>> tbl = new ArrayList<HashMap<String, String>>();\r\n    \r\n    String line = null;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            hdr = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> rec = new HashMap<String, String>();\r\n            int idx = 0;\r\n            for (String each : line.split("","")) {\r\n                rec.put(hdr.get(idx), each);\r\n                idx++;\r\n            }\r\n            tbl.add(rec);\r\n        }\r\n        ext++;\r\n    }\r\n    System.out.println(""My Table:"" + tbl);\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv," class TMPFilter implements WebFilter {\r\n    private long reqTime = System.nanoTime();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange ex, WebFilterChain chain) {\r\n        long deltaTime = System.nanoTime() - reqTime;\r\n        ex.getResponse().getHeaders().add(""server-timing-test"", ""test"");\r\n        System.out.println(deltaTime);\r\n        return chain.filter(ex)\r\n                .doOnRequest(req -> {\r\n                    reqTime = System.nanoTime();\r\n                })\r\n                .doOnSuccess(arg -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-success"", Long.toString(delta));\r\n                })\r\n                .doOnError((arg) -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-error"", Long.toString(delta));\r\n                })\r\n                .doFinally((arg) -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\n\r\ndata = {\r\n    'TradeID': ['aaa', 'bbb', 'ccc'],\r\n    'TradeDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'Commodity': ['(com1,com2)', '(com1,com2)', '(com1,com2)'],\r\n    'StartDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'ExpiryDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'FixedPrice': [10, 10, 10],\r\n    'Quantity': [10, 10, 10],\r\n    'MTMValue': [100.00, 100.00, 100.00]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\nfprice = df.groupby(['StartDate', 'Commodity', 'DealType'], as_index=False).apply(\r\n    lambda group: -(group['MTMValue'].sum() - (group['FixedPrice'] * group['Quantity']).sum()) / group['Quantity'].sum()\r\n).reset_index(name='FloatPrice')\r\n\r\nprint(fprice)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from sqlalchemy import create_engine, Column, Integer, String\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nBase = declarative_base()\r\n\r\nclass Pet(Base):\r\n    __tablename__ = 'pets'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    age = Column(Integer)\r\n\r\nengine = create_engine('sqlite:///:memory:')\r\nBase.metadata.create_all(engine)\r\n\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nnew_pet = Pet(name='Buddy', age=5)\r\nsession.add(new_pet)\r\nsession.commit()\r\n\r\npet = session.query(Pet).first()\r\nprint(pet.name, pet.age)\r\n"
0,1,misclassified_in_Test_9.csv.csv,import sys\r\n\r\nprint(sys.getsizeof(''))\r\nprint(sys.getsizeof('H'))\r\nprint(sys.getsizeof('Hi'))\r\nprint(sys.getsizeof('ÃÂÃÂÃÂ¢ÃÂÃÂ'))\r\nprint(sys.getsizeof('ÃÂÃÂÃÂ¢ÃÂÃÂl'))\r\n
0,1,misclassified_in_Test_9.csv.csv,"import openai\r\nimport os\r\n\r\nopenai.api_key = os.getenv(""OPENAI_API_KEY"")\r\n\r\ndef upload_pdf(file_path):\r\n    with open(file_path, ""rb"") as file:\r\n        response = openai.File.create(\r\n            file=file,\r\n            purpose='answers'\r\n        )\r\n    return response['id']\r\n\r\ndef create_assistant(file_id):\r\n    response = openai.Assistant.create(\r\n        model=""gpt-4-1106-preview"",\r\n        tools=[{""type"": ""code_interpreter""}],\r\n        file_ids=[file_id]\r\n    )\r\n    return response\r\n\r\ndef main():\r\n    file_path = ""example.pdf""\r\n    file_id = upload_pdf(file_path)\r\n    assistant = create_assistant(file_id)\r\n    print(assistant)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import cv2 as cv\r\nimport numpy as np\r\n\r\nsrc = cv.imread(""boston_cooking_a.jpg"", cv.IMREAD_GRAYSCALE)\r\nthresh = cv.adaptiveThreshold(src, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 55, 11)\r\ndil = cv.dilate(thresh, cv.getStructuringElement(cv.MORPH_RECT, (3, 3)))\r\nero = cv.erode(dil, cv.getStructuringElement(cv.MORPH_RECT, (50, 3)))\r\ngrad = cv.Sobel(ero, cv.CV_8U, 0, 1, ksize=5)\r\nlines = cv.HoughLinesP(grad, 1, np.pi / 180, threshold=100, minLineLength=200, maxLineGap=10)\r\n\r\nfor line in lines:\r\n    x1, y1, x2, y2 = line[0]\r\n    cv.line(src, (x1, y1), (x2, y2), (0, 0, 255), 2)\r\n\r\ncv.imwrite(""output.jpg"", src)\r\ncv.imshow(""output"", src)\r\ncv.waitKey(0)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\n\r\ndef nrng():\r\n    nums = np.arange(1, 10.5, 0.5)\r\n    i = 0\r\n    while True:\r\n        yield nums[i % len(nums)]\r\n        i += 1\r\n\r\nrng = lambda : np.random.randint(2,20)//2\r\nn_rng = nrng()\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', next(n_rng))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_sess():\r\n    return ""db_session""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef df():\r\n    return ""dataframe""\r\n\r\n# test_a.py\r\ndef test_a(db_sess, df):\r\n    assert db_sess == ""db_session""\r\n    assert df == ""dataframe""\r\n\r\n# test_b.py\r\ndef test_b(db_sess, df):\r\n    assert db_sess == ""db_session""\r\n    assert df == ""dataframe""\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from sqlalchemy.future import select\r\n\r\nquery = (\r\n    select(\r\n        models.Payment.organization_id,\r\n        models.Payment.id,\r\n        models.Payment.payment_type,\r\n    )\r\n    .where(\r\n        models.Payment.is_cleared.is_(True),\r\n    )\r\n    .limit(10)\r\n)\r\n\r\nresult = await self.session.execute(query)\r\n\r\nrows = result.fetchall()\r\ndata = [row._asdict() for row in rows]\r\n\r\nreturn data\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        await asyncio.sleep(1)\r\n        print(""This line is executed after the await"")  \r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"# user.py\r\nfrom typing import List, TYPE_CHECKING, Optional\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    age: Optional[int]\r\n    bought_items: List[""Item""] = []\r\n\r\n# item.py\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\n\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from dataclasses import dataclass\r\nfrom typing import Dict, Callable\r\n\r\ndef mydec(cls):\r\n    setattr(cls, 'save', lambda self: print('Saved'))\r\n    setattr(cls, 'my_dict', {'a': 'str'})\r\n    return cls\r\n\r\n@mydec\r\n@dataclass\r\nclass A:\r\n    a: str = """"\r\n\r\ndef main():\r\n    a = A()\r\n    a.save()\r\n    print(a.my_dict)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guar_vals(A_eq, b_eq, n):\r\n    c = np.zeros(n)\r\n    bounds = [(0, 1)] * n\r\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n    if not res.success:\r\n        return [], []\r\n\r\n    sol = np.round(res.x).astype(int)\r\n    guaranteed_ones = [i for i in range(n) if sol[i] == 1]\r\n    guaranteed_zeros = [i for i in range(n) if sol[i] == 0]\r\n    return guaranteed_zeros, guaranteed_ones\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],\r\n    [1, 0, 0, 1],\r\n    [1, 1, 0, 0]\r\n])\r\n\r\nb_eq = np.array([2, 1, 1])\r\nn = 4\r\n\r\nguar_zeros, guar_ones = find_guar_vals(A_eq, b_eq, n)\r\n\r\nprint(f""Guaranteed zeros: {guar_zeros}"")\r\nprint(f""Guaranteed ones: {guar_ones}"")\r\n"
0,1,misclassified_in_Test_9.csv.csv,"def make_pt(pt):\r\n    match pt:\r\n        case (x, y):\r\n            return Point2d(x, y)\r\n        case _:\r\n            raise TypeError(""not a point we support"")\r\n\r\nsp = match name:\r\n    case ""John"":\r\n        ""Jane""\r\n    case ""David"":\r\n        ""Alice""\r\nprint(sp)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from pathlib import Path\r\nfrom yolov5 import YOLOv5\r\n\r\ndef load_model(path):\r\n    return YOLOv5(path)\r\n\r\ndef train_model(model, data_path, imgsz):\r\n    model.train(data=data_path, imgsz=imgsz)\r\n\r\ndef detect(model, img_path):\r\n    return model(img_path)\r\n\r\nmodel = load_model('yolov5s.pt')\r\ntrain_model(model, Path('data/custom'), 640)\r\ndetect(model, 'path/to/image.jpg')\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from pathlib import Path\r\nimport torch\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\n\r\ndef load_mod(path):\r\n    return AutoModelForCausalLM.from_pretrained(path, torch_dtype=torch.float32)\r\n\r\ndef load_tok(path):\r\n    return AutoTokenizer.from_pretrained(path)\r\n\r\ndef infer(mod, tok, prompt):\r\n    inputs = tok(prompt, return_tensors=""pt"")\r\n    outputs = mod.generate(inputs['input_ids'])\r\n    return tok.decode(outputs[0])\r\n\r\nmod = load_mod(Path('path/to/gguf/model'))\r\ntok = load_tok(Path('path/to/gguf/tokenizer'))\r\nres = infer(mod, tok, ""Hello, world!"")\r\nprint(res)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class Rect {\r\n    constructor(l, w) {\r\n        this.name = ""Rect"";\r\n        this.l = l;\r\n        this.w = w;\r\n    }\r\n\r\n    shout() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.l * this.w}`\r\n        );\r\n    }\r\n\r\n    hello() {\r\n        return ""Rect: hello"";\r\n    }\r\n}\r\n\r\nclass Squa extends Rect {\r\n    constructor(l) {\r\n        super(l, l);\r\n        this.name = ""Squa"";\r\n    }\r\n\r\n    sqHello() {\r\n        const h = super.hello();\r\n        return ""Squa:"" + h.split("":"")[1];\r\n    }\r\n}\r\n\r\nconst r = new Rect(6, 4);\r\nr.shout();\r\n\r\nconst s = new Squa(5);\r\ns.shout();\r\n\r\nconsole.log(s.sqHello());\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\ndef fill_na(df):\r\n    cols = [col for col in df.columns if not col.endswith('_a')]\r\n    for col in cols:\r\n        df[col] = df[col].fillna(df[f'{col}_a'])\r\n    return df\r\n\r\ndf = fill_na(df)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\nid = ['a','b','c','a','b','e','f','a','b','k']\r\nvalue = [12,14,3,13,16,7,4,6,10,18]\r\n\r\ndf = pd.DataFrame({'id':id, 'value':value})\r\n\r\ndf['cum'] = df.groupby('id')['value'].apply(lambda x: x[::-1].cumsum()[::-1])\r\ndf['desired'] = df['cum'].where(~df['id'].duplicated(), np.nan)\r\n\r\ndf['desired'] = df['desired'].fillna(method='ffill')\r\nprint(df)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from elasticsearch import Elasticsearch\r\n\r\nes_host = '<host>'\r\nes_port = '<port>'\r\nes_user = '<user>'\r\nes_pass = '<pass>'\r\nes_idx = '<index>'\r\n\r\nes = Elasticsearch(\r\n    [{'host': es_host, 'port': es_port}],\r\n    http_auth=(es_user, es_pass),\r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_idx)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        if value == ""ab"":\r\n            return cls.ab\r\n        if value == ""cd"":\r\n            return cls.cd\r\n        return super()._missing_(value)\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${workspaceFolder}/your_script.py"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""cwd"": ""${workspaceFolder}/path_to_data_dirs"",\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter data directory name""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nimport time\r\n\r\ns = 3000\r\n\r\net1 = []\r\net2 = []\r\n\r\nn = 50\r\nfor _ in range(n):\r\n    a = np.random.rand(s, s)\r\n    st = time.time()\r\n    r1 = np.matmul(a, a)\r\n    et1.append(time.time() - st)\r\n\r\nfor _ in range(n):\r\n    b = np.random.rand(s, s)\r\n    st = time.time()\r\n    r2 = np.matmul(b, b.T)\r\n    et2.append(time.time() - st)\r\n\r\navg1 = np.mean(et1)\r\navg2 = np.mean(et2)\r\n\r\nprint(f""Avg time A @ A: {avg1}"")\r\nprint(f""Avg time B @ B.T: {avg2}"")\r\n\r\nimport matplotlib.pyplot as plt\r\nplt.plot(range(n), et1, label='A @ A')\r\nplt.plot(range(n), et2, label='B @ B.T')\r\nplt.xlabel('Iteration')\r\nplt.ylabel('Execution Time')\r\nplt.title('Matrix Multiplication Time Comparison')\r\nplt.legend()\r\nplt.show()\r\n\r\nnp.show_config()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.output_parsers import StrOutputParser\r\nfrom langchain.callbacks import get_openai_callback\r\n\r\nprompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\nmodel = ChatOpenAI(verbose=True)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\ncallback = get_openai_callback()\r\nchain.invoke({""topic"": ""ice cream""}, callbacks=[callback])\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\n\r\ndata = {\r\n    'Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ncols_tp = [col for col in df.columns if 'TP' in col]\r\ncols_vr = [col for col in df.columns if 'VReal' in col]\r\ncols_tv = [col for col in df.columns if 'TiV' in col]\r\n\r\nresult = pd.DataFrame({\r\n    'ID': [1, 2, 3],\r\n    'Price': df[cols_tp].values[0],\r\n    'Net': df[cols_vr].values[0],\r\n    'Range': df[cols_tv].values[0]\r\n})\r\n\r\nprint(result)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom time import time\r\n\r\ndef cmp(do_cache: bool, arr_sz: int, n_arr: int, n_iter: int):\r\n    arrs = {i: np.random.rand(arr_sz) for i in range(n_arr)}\r\n\r\n    if do_cache:\r\n        cache = {}\r\n\r\n    for _ in range(n_iter):\r\n        i, j = np.random.randint(n_arr, size=2)\r\n\r\n        if do_cache and (i, j) in cache:\r\n            _ = cache[(i, j)]\r\n        else:\r\n            _ = arrs[i] + arrs[j]\r\n            if do_cache:\r\n                cache[(i, j)] = _\r\n\r\n%timeit cmp(do_cache=False, arr_sz=10000, n_arr=100, n_iter=1000)\r\n%timeit cmp(do_cache=True, arr_sz=10000, n_arr=100, n_iter=1000)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import asyncio\r\nimport os\r\nfrom PIL import Image\r\nfrom tqdm import tqdm\r\nimport genai\r\n\r\nmodel = genai.GenerativeModel('gemini-pro-vision', safety_settings=safety_settings)\r\n\r\ndef process_img(img_path):\r\n    img = Image.open(img_path)\r\n    return img\r\n\r\nasync def fetch_data(batch):\r\n    tasks = []\r\n    for img_path in batch:\r\n        tasks.append(process_img(img_path))\r\n    return await asyncio.gather(*tasks)\r\n\r\nasync def main():\r\n    imgs = [os.path.join(image_dir, img) for img in os.listdir(image_dir)]\r\n    batch_size = 60\r\n    for i in tqdm(range(0, len(imgs), batch_size)):\r\n        batch = imgs[i:i+batch_size]\r\n        img_data = await fetch_data(batch)\r\n        \r\n        prompts = [""Carefully scan this images: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'."" for _ in img_data]\r\n        responses = await asyncio.gather(*[model.generate_content([prompt, img]) for prompt, img in zip(prompts, img_data)])\r\n\r\n        for res in responses:\r\n            print(res.text)\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\n\r\ndef ijRev(i, j, rows, cols):\r\n    r = i + j\r\n    if r >= cols:\r\n        return rows - 1 - (r - cols), cols - 1 - j\r\n    return i, j\r\n\r\ndef rev_anti_diag(arr):\r\n    rows, cols = arr.shape\r\n    rev_arr = np.empty_like(arr)\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            rev_i, rev_j = ijRev(i, j, rows, cols)\r\n            rev_arr[rev_i, rev_j] = arr[i, j]\r\n    return rev_arr\r\n\r\nsrcArr = np.array([[ 1,  2,  4],\r\n                   [ 3,  5,  7],\r\n                   [ 6,  8, 10],\r\n                   [ 9, 11, 13],\r\n                   [12, 14, 15]])\r\n\r\nrev_arr = rev_anti_diag(srcArr)\r\nprint(rev_arr)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from fastapi import FastAPI, Request, Form, Depends, status\r\nfrom fastapi.responses import RedirectResponse\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass FormData(BaseModel):\r\n    text: str\r\n\r\n@app.get('/', name='homepage')\r\nasync def get_main(request: Request, msg: Optional[str] = None, result: Optional[str] = None):\r\n    if msg:\r\n        response = {""msg"": msg}\r\n    elif result:\r\n        response = {""result"": result}\r\n    else:\r\n        response = {}\r\n    return response\r\n\r\n@app.post('/')\r\nasync def post_main(request: Request, file: FormData = Depends(FormData.as_form)):\r\n    if condition:\r\n        trans = ""some_transformed_data""\r\n        return RedirectResponse(app.url_path_for('homepage'), status_code=status.HTTP_303_SEE_OTHER)\r\n    err = ""some_error""\r\n    return RedirectResponse(app.url_path_for('homepage'), status_code=status.HTTP_303_SEE_OTHER)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom shapely.geometry import Point, Polygon\r\nfrom scipy.spatial import Delaunay\r\n\r\nlabels = ['Fe', 'Fe3O4', 'FeS', 'Fe2O3', 'FeS2', 'FeSO4', 'Fe2(SO4)3']\r\ncolors = ['#660066', '#b6fcd5', '#ff7f50', '#ffb6c1', '#c6e2ff', '#d3ffce', '#8a2be2']\r\npolygons = []\r\npolygons.append(Polygon([(-26.7243,-14.7423), (-26.7243,-30.0000), (-40.0000,-30.0000), (-40.0000,-28.0181)]))\r\npolygons.append(Polygon([(-18.1347,-0.4263), (-16.6048,1.6135), (-16.6048,-30.0000), (-26.7243,-30.0000), (-26.7243,-14.7423), (-18.1347,-0.4263)]))\r\npolygons.append(Polygon([(-18.1347,-0.4263), (-26.7243,-14.7423), (-40.0000,-28.0181), (-40.0000,-22.2917), (-18.1347,-0.4263)]))\r\npolygons.append(Polygon([(0.0000,-20.2615), (0.0000,-30.0000), (-16.6048,-30.0000), (-16.6048,1.6135), (-16.5517,1.6865), (-6.0517,-0.9385), (0.0000,-3.9643)]))\r\npolygons.append(Polygon([(-14.2390,10.0000), (-14.5829,7.5927), (-16.5517,1.6865), (-16.6048,1.6135), (-18.1347,-0.4263), (-40.0000,-22.2917), (-40.0000,10.0000)]))\r\npolygons.append(Polygon([(-6.0517,-0.9385), (-16.5517,1.6865), (-14.5829,7.5927), (-6.0517,-0.9385)]))\r\npolygons.append(Polygon([(0.0000,-3.9643), (-6.0517,-0.9385), (-14.5829,7.5927), (-14.2390,10.0000), (0.0000,10.0000)]))\r\n\r\nx_grid = np.arange(-40., 0.01, 1.)\r\ny_grid = np.arange(-30., 10.01, 1.)\r\nxy_grid = np.array(np.meshgrid(x_grid, y_grid)).T.reshape(-1, 2).tolist()\r\ndata = []\r\nfor coords in xy_grid:\r\n    point = Point(coords)\r\n    for i, poly in enumerate(polygons):\r\n        if poly.buffer(1e-3).contains(point):\r\n            data.append({\r\n                'x': point.x,\r\n                'y': point.y,\r\n                'label': labels[i],\r\n                'color': colors[i]\r\n            })\r\n            break\r\ndf = pd.DataFrame(data)\r\n\r\nplt.figure(figsize=(8, 8))\r\nfor color in df.color.unique():\r\n    df_color = df[df.color == color]\r\n    plt.scatter(\r\n        x=df_color.x,\r\n        y=df_color.y,\r\n        c=color,\r\n        s=100,\r\n        label=df_color.label.iloc[0]\r\n    )\r\n\r\npoints = df[['x', 'y']].values\r\ntri = Delaunay(points)\r\n\r\nfor simplex in tri.simplices:\r\n    pts = points[simplex]\r\n    plt.plot(pts[:, 0], pts[:, 1], 'k-', lw=0.5)\r\n\r\nplt.xlim([-40., 0.])\r\nplt.ylim([-30., 10.])\r\nplt.xlabel('Log pO2(g)')\r\nplt.ylabel('Log pSO2(g)')\r\nplt.legend(bbox_to_anchor=(1.05, 1.))\r\nplt.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\n\r\ndef fix(df):\r\n    mask = (pl.col('value').is_null()) & (pl.col('quantity') == 0)\r\n    return df.with_columns([\r\n        pl.when(mask).then(0).otherwise(pl.col(col)).alias(col)\r\n        for col in df.columns if col != 'item' and col != 'quantity'\r\n    ])\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ndf = fix(df)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import os\r\nfrom fastapi import FastAPI, Depends, HTTPException, Security\r\nfrom fastapi.security.api_key import APIKeyHeader\r\nfrom fastapi.routing import APIRouter\r\n\r\nAPI_KEY = ""your-api-key""\r\napi_key_header_auth = APIKeyHeader(name=""X-API-KEY"")\r\nenv = os.getenv(""ENV"", ""localhost"")\r\n\r\nasync def api_key_func(api_key_header: str = Security(api_key_header_auth)):\r\n    if env != ""localhost"" and api_key_header != API_KEY:\r\n        raise HTTPException(\r\n            status_code=401,\r\n            detail=""Invalid API Key"",\r\n        )\r\n\r\nrouter = APIRouter(\r\n    prefix=""/v2/test"",\r\n    tags=[""helloWorld""],\r\n    dependencies=[Depends(api_key_func)],\r\n    responses={404: {""description"": ""Not found""}},\r\n)\r\n\r\napp = FastAPI()\r\napp.include_router(router)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from pydantic import BaseModel\r\nclass SFId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\nclass Mdl(BaseModel):\r\n    id: SFId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SFId: lambda v: str(v)\r\n        }\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from sqlmodel import SQLModel, Field, Relationship\r\nfrom sqlalchemy.orm import relationship\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: int = Field(default=None, foreign_key=""node.id"")\r\n    \r\n    parent: ""Node"" = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": [id]})\r\n    children: list[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef create_node(session, data, parent=None):\r\n    node = Node(data=data, parent=parent)\r\n    session.add(node)\r\n    session.commit()\r\n    session.refresh(node)\r\n    return node\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from datetime import date\r\nfrom pydantic import BaseModel, field_validator\r\n\r\nclass CustomDate(date):\r\n    POTENTIAL_FORMATS = []\r\n\r\n    @classmethod\r\n    def validate(cls, v, field):\r\n        if isinstance(v, date):\r\n            return v\r\n        return to_date(field.name, v, cls.POTENTIAL_FORMATS, return_str=False)\r\n\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(cls, source, handler):\r\n        return handler.general_plain_validator_function(cls.validate)\r\n\r\n\r\ndef custom_date(formats):\r\n    def validate_date(v, field):\r\n        if isinstance(v, date):\r\n            return v\r\n        return to_date(field.name, v, formats, return_str=False)\r\n    return field_validator(validate_date)\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: CustomDate\r\n    dt2: custom_date(['%Y-%m-%d', '%Y/%m/%d'])\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nimport pandas as pd\r\n\r\ndef check_overflow(lst, dtype):\r\n    try:\r\n        return pd.Series(lst, dtype=dtype)\r\n    except OverflowError:\r\n        raise ValueError(f""Overflow error for dtype {dtype}"")\r\n\r\nlst = [2**31-1]\r\nser = check_overflow(lst, 'int32')\r\nser = ser + 1\r\n\r\nif ser.dtype == 'int32' and (ser < np.iinfo(np.int32).min or ser > np.iinfo(np.int32).max).any():\r\n    raise ValueError(""Overflow occurred after operation"")\r\n"
0,1,misclassified_in_Test_9.csv.csv,"# app\r\ndef build_db(name: str):\r\n    def close():\r\n        return build_singleton_whatever(MongoClient, args....)\r\n    return close\r\n\r\n# endpoint\r\n@app.post(""/notification/feed"")\r\nasync def route_receive_notifications(db: Database = Depends(build_db(""someDB""))):\r\n    ...\r\n\r\n# pytest\r\ndef mock_db(*args):\r\n    def close():\r\n        return 'mock_db'\r\n    return close\r\n\r\nfastapi_app.dependency_overrides[build_db] = mock_db\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        outname = os.path.join(dir, 'out.jpg')\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n        \r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class Pt:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        self._val = (x, y)\r\n\r\n    def __repr__(self):\r\n        return f""Pt({self.x}, {self.y})""\r\n\r\n    def __iter__(self):\r\n        return iter(self._val)\r\n\r\np = Pt(4, 5)\r\nmy_x = p.x\r\nmy_tuple = p\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom numba import njit\r\n\r\n@njit\r\ndef calc_y(z, x_size, z_size):\r\n    y = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for i in range(z_size):\r\n        for j in range(x_size):\r\n            y[j, i] = np.argmin(np.abs(z[j] - i))\r\n    return y\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = calc_y(z_coordinates, x_size, z_size)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\n\r\nCOL_VALUE = ""value""\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\n\r\nsum_lower = (\r\n    df.with_columns(\r\n        pl.col(COL_VALUE).rank(reverse=True, method=""average"")\r\n        .alias(""rank"")\r\n    )\r\n    .join(df, on=""rank"", how=""left"")\r\n    .with_columns(\r\n        pl.col(COL_VALUE).apply(lambda x: sum(df[COL_VALUE] < x)).alias(""sum_lower"")\r\n    )\r\n)\r\n\r\nmax_other = df.with_columns(\r\n    pl.col(COL_VALUE).apply(lambda x: max(df[COL_VALUE] - x)).alias(""max_other"")\r\n)\r\n\r\ndf = df.join(sum_lower, on=COL_VALUE).join(max_other, on=COL_VALUE)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from collections import deque\r\n\r\nclass Sub:\r\n    def __init__(self, prev=None, s=0, e=0, diff=0):\r\n        self.prev = prev\r\n        self.s = s\r\n        self.e = e\r\n        self.diff = diff\r\n\r\ndef part(nums, mn, mx):\r\n    n = len(nums)\r\n    dp = [None] * (n + 1)\r\n    dp[0] = Sub()\r\n\r\n    for i in range(1, n + 1):\r\n        for j in range(mn, mx + 1):\r\n            if i - j >= 0:\r\n                sub = dp[i - j]\r\n                if sub:\r\n                    diff = max(nums[i - j:i]) - min(nums[i - j:i])\r\n                    new_diff = sub.diff + diff\r\n                    if dp[i] is None or new_diff > dp[i].diff:\r\n                        dp[i] = Sub(sub, i - j, i - 1, new_diff)\r\n\r\n    return dp[n]\r\n\r\nnum\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline\r\nimport torch\r\n\r\ndef custom_pipeline(model_name):\r\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\r\n    model = AutoModelForSequenceClassification.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)\r\n\r\n    def predict(texts):\r\n        tokenized = tokenizer(texts, padding=True, truncation=True, return_tensors='pt')\r\n        with torch.no_grad():\r\n            outputs = model(**tokenized)\r\n            logits = outputs.logits\r\n        return logits\r\n\r\n    return predict\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\nmodel_name = ""distilbert-base-uncased-finetuned-sst-2-english""\r\npipe = cust\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import geopandas as gpd\r\nimport requests\r\nimport zipfile\r\nimport io\r\n\r\ndef download_map(url, extract_to):\r\n    r = requests.get(url)\r\n    with zipfile.ZipFile(io.BytesIO(r.content)) as zip_ref:\r\n        zip_ref.extractall(extract_to)\r\n\r\ndef load_world_map():\r\n    url = ""https://www.naturalearthdata.com/http//www.naturalearthdata.com/downloads/110m-cultural-vectors/countries-110m.zip""\r\n    extract_to = ""./data""\r\n    download_map(url, extract_to)\r\n    world = gpd.read_file(f""{extract_to}/ne_110m_admin_0_countries.shp"")\r\n    return world\r\n\r\nworld = load_world_map()\r\nprint(world.head())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from fastapi import FastAPI\r\nfrom contextlib import asynccontextmanager\r\n\r\n# --- main app ---\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\n# --- sub app ---\r\n\r\nsub_app = FastAPI()\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\n@asynccontextmanager\r\nasync def sub_lifespan(_):\r\n    print(""sub startup"")\r\n    yield\r\n    print(""sub shutdown"")\r\n\r\nsub_app = FastAPI(lifespan=sub_lifespan)\r\n\r\napp.mount(""/sub"", sub_app)\r\n\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from pyspark.sql import SparkSession\r\nfrom pyspark.sql import functions as F\r\nfrom pyspark.sql.window import Window\r\n\r\nspark = SparkSession.builder.master(""local"").appName(""WindowExample"").getOrCreate()\r\n\r\ndata = [(1, ""A"", 10), (2, ""B"", 20), (3, ""C"", 30), (4, ""D"", 40)]\r\ndf = spark.createDataFrame(data, [""id"", ""name"", ""value""])\r\n\r\nwindow_spec = Window.orderBy(""id"")\r\n\r\ndf_with_sum = df.withColumn(""sum_value"", F.sum(""value"").over(window_spec.rowsBetween(Window.unboundedPreceding, Window.currentRow)))\r\ndf_with_sum.show()\r\n\r\ndf_with_sum_all = df.withColumn(""sum_value_all"", F.sum(""value"").over(window_spec.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)))\r\ndf_with_sum_all.show()\r\n\r\ndf_with_current = df.withColumn(""current_row_sum"", F.sum(""value"").over(window_spec.rowsBetween(Window.currentRow, Window.curr\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nimport joblib\r\n\r\napp = FastAPI()\r\n\r\nmodel = joblib.load(""model.joblib"")\r\n\r\ndef to_mongo(r: dict):\r\n    client = pymongo.MongoClient(""mongodb://mongo:27017"")\r\n    db = client[""models""]\r\n    col = db[""example-model""]\r\n    col.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict(features: List[float]):\r\n    pred = model.predict(pd.DataFrame([features], columns=model.feature_names_in_))\r\n    res = {""predictions"": pred.tolist()}\r\n    to_mongo(res)\r\n    return res\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\n\r\ndef rd_json(pth: str):\r\n    df = pl.read_json(pth)\r\n    return df.with_columns(\r\n        pl.col(""date"").str.to_date(),\r\n        pl.col(""fillingDate"").str.to_date(),\r\n        pl.col(""acceptedDate"").str.to_date()\r\n    )\r\n\r\ndf1 = rd_json('../AAPL/single_statements/1985-09-30-quarterly_balance.json')\r\ndf2 = rd_json('../AAPL/single_statements/1986-09-30-quarterly_balance.json')\r\n\r\ndf = pl.concat([df1, df2]).sort(""date"")\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from icu import Collator, Locale\r\n\r\nloc1 = Locale(""en_US.UTF-8"")\r\nloc2 = Locale(""fa_IR.UTF-8"")\r\ncol1 = Collator.createInstance(loc1)\r\ncol2 = Collator.createInstance(loc2)\r\n\r\ndef key(s):\r\n    key1 = col1.getSortKey(s)\r\n    key2 = col2.getSortKey(s)\r\n    return (key1, key2)\r\n\r\nmylist.sort(key=key)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom cython.parallel import prange\r\nimport cython\r\nfrom cython import boundscheck, wraparound\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef parallel_sort(arr):\r\n    n = len(arr)\r\n    chunk_size = n // 4\r\n    with ThreadPoolExecutor(max_workers=4) as executor:\r\n        futures = [executor.submit(np.sort, arr[i:i+chunk_size]) for i in range(0, n, chunk_size)]\r\n        results = [f.result() for f in futures]\r\n    return np.concatenate(results)\r\n\r\narr = np.random.randint(0, 2**64, int(3e8), dtype='uint64')\r\nsorted_arr = parallel_sort(arr)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef chk(a: NDArray[np.float64]) -> NDArray[np.float64]:\r\n    return a * 2\r\n\r\nx: np.ndarray[np.float64] = np.array([1.0, 2.0, 3.0])\r\ny = chk(x)\r\nprint(y)\r\n\r\nt1: np.ndarray[Any, np.dtype[Any]] = np.array([1, 2, 3])\r\nt2: np.ndarray[np.float64] = np.array([1.0, 2.0, 3.0])\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef mk_df(n):\r\n    dt = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    dat = {\r\n        'dt': np.random.choice(dt, n),\r\n        'cat': np.random.choice(['A', 'B', 'C', 'D'], n),\r\n        'sub': np.random.choice(['X', 'Y', 'Z'], n),\r\n        'val': np.random.rand(n) * 100\r\n    }\r\n    df = pd.DataFrame(dat).sort_values('dt')\r\n    return pl.from_pandas(df)\r\n\r\ndf = mk_df(1000000)\r\n\r\ndf = df.with_columns(pl.col('dt').cast(pl.Datetime))\r\ndf = df.group_by(['cat', 'sub']).agg(\r\n    pl.col('dt').min().alias('dt_min')\r\n).join(df, on=['cat', 'sub'])\r\ndf = df.group_by_dynamic('dt', every='1w', closed='right').agg(\r\n    pl.col('val').sum().alias('val_sum'),\r\n    pl.col('val').mean().alias('val_avg'),\r\n    pl.col('val').max().alias('val_max'),\r\n    pl.col('val').min().alias('val_min')\r\n)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"jobs:\r\n- job: build\r\n  steps:\r\n  - script: |\r\n      curl -sSL https://install.python-poetry.org | python3 -\r\n      echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n    displayName: 'Install Poetry'\r\n\r\n  - script: poetry install --no-root\r\n    displayName: 'Install Deps'\r\n\r\n  - script: poetry run flake8 src\r\n    displayName: 'Linter'\r\n\r\n  - script: |\r\n      poetry add pytest-azurepipelines\r\n      poetry run pytest src\r\n    displayName: 'Tests'\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=Callable[[int], int])\r\n\r\ndef remember(f: T) -> T:\r\n    mem: Dict[int, int] = {}\r\n\r\n    @wraps(f)\r\n    def wrap(n: int) -> int:\r\n        if n not in mem:\r\n            mem[n] = f(n)\r\n        return mem[n]\r\n\r\n    return wrap  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from contextlib import suppress\r\n\r\nclass Vld:\r\n    def chk(self, x, *, sup=None):\r\n        sup = sup or []\r\n        self._rs(EA(), sup) if a else None\r\n        self._rs(EB(), sup) if b else None\r\n        self._rs(EC(), sup) if c else None\r\n\r\n    def _rs(self, e, sup):\r\n        with suppress(*sup):\r\n            raise e\r\n\r\nv = Vld()\r\nv.chk(x, sup=[EB])\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({\r\n    ""sid"": [1, 2, 3],\r\n    ""eng"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n    ""dur"": [123, 456, 789]\r\n})\r\n\r\ndf = df.with_columns(pl.col(""eng"").str.split("","")).explode(""eng"")\r\ndf = df.with_columns(pl.col(""dur"") / df.groupby(""sid"").count().select(""eng""))\r\n\r\nfig = px.bar(df, x=""sid"", y=""dur"", color=""eng"")\r\nfig.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import torch\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\n\r\npth = ""Meta-Llama-3.1-8B-Instruct""\r\n\r\ntok = AutoTokenizer.from_pretrained(pth)\r\nmdl = AutoModelForCausalLM.from_pretrained(pth, torch_dtype=torch.float16, device_map=""auto"")\r\n\r\ntxt = ""Hello, how are you?""\r\ninp = tok(txt, return_tensors=""pt"").to(""cuda"")\r\nout = mdl.generate(**inp, max_length=50)\r\n\r\nprint(tok.decode(out[0], skip_special_tokens=True))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\n\r\ndef cnt_3w(df):\r\n    df = df.sort_values([""group_id"", ""sent_time""])\r\n    res = 0\r\n    for g, d in df.groupby(""group_id""):\r\n        d = d[[""user_id"", ""touchpoint""]].values\r\n        for i in range(len(d) - 2):\r\n            if d[i][1] == 1 and d[i+1][1] == 2 and d[i+2][1] == 3 and d[i][0] == d[i+2][0] and d[i][0] != d[i+1][0]:\r\n                res += 1\r\n    return res\r\n\r\nprint(cnt_3w(t1_df))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmod = ""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nemb = HuggingFaceEmbeddings(model_name=mod)\r\n\r\ndef main():\r\n    d1 = Document(page_content=""The sky is blue."", metadata={""doc_id"": ""10""})\r\n    d2 = Document(page_content=""The forest is green"", metadata={""doc_id"": ""62""})\r\n    docs = [d1, d2]\r\n\r\n    for d in tqdm(docs, desc=""Proc""):\r\n        d.metadata['sum'] = 'hello'\r\n\r\n    pprint.pprint(docs)\r\n    db = FAISS.from_documents(docs, emb)\r\n    db.save_local(""faiss_idx"")\r\n    new_db = FAISS.load_local(""faiss_idx"", emb)\r\n\r\n    q = ""Which color is the sky?""\r\n    res = new_db.similarity_search_with_score(q)\r\n    print('Got:', res)\r\n    print('Meta:', res[0][0].metadata)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nfrom tqdm import tqdm\r\n\r\ndf = pl.DataFrame({\r\n    ""tm"": [""A"", ""A"", ""A"", ""B"", ""B"", ""C""],\r\n    ""conf"": [""E"", ""E"", ""E"", ""W"", ""W"", ""E""],\r\n    ""pts"": [11, 8, 10, 6, 6, 5],\r\n    ""rbs"": [7, 7, 6, 9, 12, 8]\r\n})\r\n\r\ndef proc(x):\r\n    return x.select(pl.col(""pts"").mean())\r\n\r\ngrps = df.select(""tm"").unique().height\r\nbar = tqdm(total=grps, desc=""Proc"")\r\n\r\ndef wrap(x):\r\n    bar.update(1)\r\n    return proc(x)\r\n\r\nres = df.group_by(""tm"").map_groups(\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import LSTM, Dense, Masking\r\n\r\ndef pad_seq(seq, val=0.0):\r\n    mx = max(len(s) for s in seq)\r\n    return np.array([np.pad(s, (0, mx - len(s)), constant_values=val) for s in seq])\r\n\r\nx = [np.random.rand(np.random.randint(100, 200)) for _ in range(50)]\r\ny = np.random.rand(50)\r\n\r\nx = pad_seq(x)[..., np.newaxis]\r\n\r\nmdl = Sequential([\r\n    Masking(mask_value=0.0, input_shape=(x.shape[1], 1)),\r\n    LSTM(64),\r\n    Dense(1)\r\n])\r\n\r\nmdl.compile(optimizer='adam', loss='mse')\r\nmdl.fit(x, y, e\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import serial\r\nimport time\r\n\r\ndef wr(ser, msg):\r\n    ser.write(msg.encode())\r\n\r\ndef rd(ser):\r\n    return ser.readline().decode().strip()\r\n\r\nser = serial.Serial('/dev/ttyUSB0', 115200, timeout=1)\r\ntime.sleep(2)\r\n\r\nwr(ser, 'hello\n')\r\nprint(rd(ser))\r\n\r\nser.close()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import boto3\r\nfrom pyiceberg.catalog import load_catalog\r\nfrom pyiceberg.schema import Schema\r\nfrom pyiceberg.types import TimestampType, DoubleType, StringType, NestedField\r\nfrom pyiceberg.partitioning import PartitionSpec, PartitionField\r\nfrom pyiceberg.transforms import YearTransform, MonthTransform\r\n\r\ndef mk_tbl():\r\n    bkt = ""my-bkt""\r\n    tbl = ""my-tbl""\r\n    db = ""iceberg_db""\r\n\r\n    sch = Schema(\r\n        NestedField(1, ""f1"", DoubleType(), False),\r\n        NestedField(2, ""f2"", StringType(), False)\r\n    )\r\n\r\n    part = PartitionSpec(\r\n        PartitionField(3, 3, YearTransform(), ""yr""),\r\n        PartitionField(3, 3, MonthTransform(), ""mn"")\r\n    )\r\n\r\n    cli = boto3.client(""glue"")\r\n    uri = f""s3://{bkt}/meta""\r\n    cat = load_catalog(""glue"", client=cli, uri=uri, type=""GLUE"")\r\n\r\n    cat.create_table(\r\n        identifier=f""{db}.{tbl}"",\r\n        schema=sch,\r\n        partition_spec=part,\r\n        location=f""s3://{bkt}/{tbl}/""\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    mk_tbl()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import streamlit as st\r\n\r\ndef hdr():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    st.image(""images/logo.png"", width=300)\r\n    st.components.v1.html(""""""\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n    """""", height=0)\r\n\r\ndef run():\r\n    hdr()\r\n\r\nif __name__ == ""__main__"":\r\n    run()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ng = None\r\n\r\n@asynccontextmanager\r\nasync def lsp(app: FastAPI):\r\n    global g\r\n    g = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def lsp2(app: FastAPI):\r\n    global g\r\n    g = ""Hi""\r\n    yield\r\n\r\ndef get_app(lsp_fn):\r\n    return FastAPI(title=""Test"", lifespan=lsp_fn)\r\n\r\napp = get_app(lsp)\r\n\r\n@app.get(""/"")\r\nasync def rt():\r\n    return Response(status_code=status.HTTP_200_OK, content=g)\r\n\r\n@pytest.fixture\r\ndef cli():\r\n    a = get_app(lsp2)\r\n    with TestClient(a) as c:\r\n        yield c\r\n\r\ndef test_ok(cli):\r\n    r = cli.get(""/"")\r\n    assert r.text == ""Hi""\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef fix_add(d, h):\r\n    return (d.astimezone(dt.timezone.utc) + dt.timedelta(hours=h)).astimezone(d.tzinfo)\r\n\r\nz = ZoneInfo(""Europe/Paris"")\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=z)\r\n\r\nd1 = fix_add(d0, 2)\r\nd2 = fix_add(d0, 3)\r\nd3 = fix_add(d0, 4)\r\n\r\nprint(d1.isoformat())\r\nprint(d2.isoformat())\r\nprint(d3.isoformat())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\ndef chk(f):\r\n    return str(signature(f))\r\n\r\np1 = partial(bar, 3)\r\np2 = partial(bar, b=3)\r\np3 = partial(bar, a=3)\r\n\r\nprint(chk(p1))\r\nprint(chk(p2))\r\nprint(chk(p3))\r\n\r\nprint(p1(6))\r\nprint(p2(6))\r\nprint(p2(6, b=1))\r\nprint(p3(b=6))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nimport numpy as np\r\n\r\ndat = {\r\n    ""c1"": [""a"", ""b"", ""c"", ""d""],\r\n    ""c2"": [[-0.06066, 0.072485, 0.548874, 0.158507],\r\n           [-0.536674, 0.10478, 0.926022, -0.083722],\r\n           [-0.21311, -0.030623, 0.300583, 0.261814],\r\n           [-0.308025, 0.006694, 0.176335, 0.533835]],\r\n}\r\n\r\ndf = pl.DataFrame(dat)\r\n\r\ndef sim(x, y):\r\n    return (x @ y.T) / (np.linalg.norm(x) * np.linalg.norm(y))\r\n\r\nmat = np.array(df[""c2""].to_list())\r\n\r\nout = pl.DataFrame(\r\n    [[df[""c1""][i]] + [sim(mat[i], mat[j]) for j in range(len(mat))] for i in range(len(mat))],\r\n    schema=[""c1""] + df[""c1""].to_list()\r\n)\r\n\r\nprint(out)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from typing import Union, Literal\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, Field\r\n\r\napp = FastAPI()\r\n\r\nclass Foo(BaseModel):\r\n    typ: Literal[""Foo""] = Field(""Foo"", alias=""type"")\r\n    nam: str\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\nclass Bar(BaseModel):\r\n    typ: Literal[""Bar""] = Field(""Bar"", alias=""type"")\r\n    nam: str\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\nclass Demo(BaseModel):\r\n    exm: Union[Foo, Bar] = Field(..., discriminator=""typ"")\r\n\r\n@app.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    return Demo(exm=foo)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef fit_poly(x, y, d=2):\r\n    p = PolynomialFeatures(d)\r\n    xp = p.fit_transform(x)\r\n    m = LinearRegression()\r\n    m.fit(xp, y)\r\n    return m, p\r\n\r\ndef grd_hes(m, p, x):\r\n    j = p.transform(x)\r\n    c = m.coef_\r\n    g = c[:, 1:].reshape(-1, x.shape[1])\r\n    h = np.zeros((x.shape[1], x.shape[1]))\r\n    idx = 1\r\n    for i in range(x.shape[1]):\r\n        h[i, i] = c[0, idx + i]\r\n        idx += x.shape[1] - i\r\n    return g, h\r\n\r\nx = np.random.rand(10, 2)\r\ny = np.random.rand(10, 1)\r\nm, p = fit_poly(x, y)\r\ng, h = grd_hes(m, p, x[:1])\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from abc import ABC, abstractmethod\r\n\r\nclass FBase(ABC):\r\n    foo: str\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = ""baz""\r\n\r\n    @abstractmethod\r\n    def _req(self): pass\r\n\r\nclass F(FBase):\r\n    foo: str = ""hello""\r\n\r\n    def _req(self): pass\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\nvals = [1000, 2500, 3000, 4500]\r\nx = np.arange(len(vals))\r\nbars = ax.bar(x, vals)\r\n\r\nfor bar in bars:\r\n    ax.text(\r\n        bar.get_x() + bar.get_width() / 2,\r\n        bar.get_height(),\r\n        f""{bar.get_height():,.2f}"",\r\n        ha=""center"",\r\n        va=""bottom"",\r\n    )\r\n\r\nplt.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nfrom datetime import datetime\r\n\r\nd1 = pl.DataFrame({\r\n    ""id"": [1, 2, 3, 4, 5],\r\n    ""ini"": [""2022-01-01"", ""2022-01-02"", ""2022-01-03"", ""2022-01-04"", ""2022-01-05""],\r\n    ""fin"": [""2022-01-03"", ""2022-01-06"", ""2022-01-07"", ""2022-01-09"", ""2022-01-07""],\r\n    ""val"": [10, 20, 30, 40, 50]\r\n}).with_columns(pl.col(""ini"").str.to_date(), pl.col(""fin"").str.to_date())\r\n\r\nd2 = pl.datetime_range(\r\n    start=datetime(2022, 1, 1),\r\n    end=datetime(2022, 1, 7),\r\n    interval=""1d"",\r\n    eager=True\r\n).to_frame(""dat"")\r\n\r\nres = d2.with_columns(\r\n    pl.sum(\r\n        pl.when(\r\n            (d1[""ini""] <= pl.col(""dat"")) & (d1[""fin""] >= pl.col(""dat""))\r\n        ).then(d1[""val""]).otherwise(0)\r\n    ).alias(""sum"")\r\n)\r\n\r\nprint(res)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy.typing as npt\r\nimport numpy as np\r\nfrom typing import Sequence, Union\r\n\r\nT = Union[npt.NDArray, Sequence]\r\n\r\ndef f(a: T) -> int:\r\n    return len(a)  \r\n\r\ndef g(a: T) -> Union[int, float, complex]:\r\n    return a[0]  \r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\n\r\na = pd.DataFrame({\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": [""a"", ""c"", ""x""],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n})\r\n\r\nb = a.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""VAL"")\r\nb[""ID""] = range(1, len(b) + 1)\r\nb[""FIELD_NAME""] = b[""FIELD_NAME""].str[-1]\r\nb[""FIELD_STR_VALUE""] = b[""VAL""].where(b[""VAL""].apply(lambda x: isinstance(x, str)))\r\nb[""FIELD_NUM_VALUE""] = b[""VAL""].where(b[""VAL""].apply(lambda x: isinstance(x, (int, float))))\r\nb = b.drop(columns=[""VAL""])\r\n\r\nprint(b)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\nsetattr(BadBar, ""__len__"", classmethod(lambda cls: 9002))\r\n\r\nprint(len(BadBar))\r\nprint(len(BadBar()))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\nA = pl.DataFrame({ ""idx"": [0, 20, 40], ""A"": ['a', 'b', 'c'] })\r\nB = pl.DataFrame({ ""idx"": [10, 20, 30], ""B"": ['d', 'e', 'f'] })\r\nC = pl.DataFrame({ ""idx"": [20, 30], ""C"": ['g', 'h'] })\r\n\r\nF = functools.reduce(lambda x, y: x.join(y, on=""idx"", how=""outer""), [A, B, C])\r\nprint(F.sort(""idx""))\r\n\r\nN, C = 300000, 20\r\nlst = [pl.DataFrame({ ""idx"": np.linspace(i, N*3-i, num=N, dtype=np.int32), f""A{i}"": np.arange(N, dtype=np.float32) }) for i in range(C)]\r\nres = functools.reduce(lambda x, y: x.join(y, on=""idx"", how=""outer""), lst)\r\nprint(res.sort(""idx""))\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n, p, t):\r\n    n = int(n + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n    getcontext().prec = n + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n    for k in trange(n, position=p, desc=f""Job {p + 1} of {t}"", leave=True, ncols=100):\r\n        t = ((-1)**k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5)))\r\n    pi = 1 / pi\r\n    return pi\r\n\r\ndef par_job():\r\n    n_cores = 3\r\n    jobs = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, p, len(jobs)) for p, n in enumerate(jobs))\r\n\r\nif __name__ == ""__main__"":\r\n    par_job()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pandas as pd\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame.from_dict(data1)\r\ndf2 = pd.DataFrame.from_dict(data2)\r\n\r\ndef closest_match(s, df):\r\n    idx = (df['seconds'] - s).abs().argsort()[:3]\r\n    return df.iloc[idx]\r\n\r\nresult = pd.concat([closest_match(s, df2) for s in df1['seconds']]).reset_index(drop=True)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\nclass Ex(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n    \r\n    @staticmethod\r\n    def ex() -> dict[str, Any]:\r\n        return {\r\n            'a': random.randint(1, 100),\r\n            'b': ''.join(random.choices(string.digits, k=10)),\r\n        }\r\n\r\nprint(Ex.ex())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n        return result\r\n\r\n\r\ntree = BST(5)\r\ntree.add(10)\r\ntree.add(8)\r\ntree.add(2)\r\ntree.add(4)\r\ntree.add(7)\r\n\r\nprint(tree.traverse_pre())\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from http.server import SimpleHTTPRequestHandler, HTTPServer\r\nimport os\r\n\r\nclass MyHandler(SimpleHTTPRequestHandler):\r\n    def translate_path(self, path):\r\n        path = super().translate_path(path)\r\n        return os.path.abspath(path)\r\n\r\ndef run(addr='', port=8000, dir='.'):\r\n    os.chdir(dir)\r\n    server_address = (addr, port)\r\n    httpd = HTTPServer(server_address, MyHandler)\r\n    httpd.serve_forever()\r\n\r\nrun('', 8000, '/path/to/directory')\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\nif __name__ == '__main__':\r\n    path = ""my image path""\r\n\r\n    img = imread(path)\r\n    img = resize(img, (512, 512))\r\n\r\n    img_byte = base64.b64encode(img.tobytes())\r\n    data = {""shape"": img.shape, ""img"": img_byte.decode()}\r\n\r\n    response = requests.get('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\nimport json\r\nimport base64\r\nimport uvicorn\r\nimport numpy as np\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"")\r\ndef read_root():\r\n    return {""Hello"": ""World""}\r\n\r\n@app.get(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: dict):\r\n    img_byte = data.get('img').encode()\r\n    img_shape = tuple(data.get('shape'))\r\n    img_arr = np.frombuffer(base64.b64decode(img_byte), dtype=np.float32).reshape(img_shape)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef ref_impl(enc):\r\n    return base64.b64decode(enc)\r\n\r\ndef impl1(enc):\r\n    return a2b_base64(enc)\r\n\r\ndef thread_impl(enc, n):\r\n    d = len(enc) // n\r\n    lbatch = (d // 4) * 4\r\n    batches = []\r\n    for i in range(n-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(enc[start:end])\r\n    batches.append(enc[end:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=n) as ex:\r\n        for res in ex.map(a2b_base64, batches):\r\n            ret += res\r\n    return ret\r\n\r\ndef proc_impl(enc, n):\r\n    d = len(enc) // n\r\n    lbatch = (d // 4) * 4\r\n    batches = []\r\n    for i in range(n-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(enc[start:end])\r\n    batches.append(enc[end:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=n) as ex:\r\n        for res in ex.map(a2b_base64, batches):\r\n            ret += res\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    cpu_num = cpu_count()\r\n    repeat = 60000000\r\n    large_b64 = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nref_impl"")\r\n    t_start = perf_counter()\r\n    dec1 = ref_impl(large_b64)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimpl1"")\r\n    t_start = perf_counter()\r\n    dec2 = impl1(large_b64)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthread_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = thread_impl(large_b64, cpu_num)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = proc_impl(large_b64, cpu_num)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nout = df.select(\r\n    pl.col(""sector_exposure"")\r\n    .str.split("";"")\r\n    .arr.eval(pl.element().str.split(""="").alias(""split""))\r\n    .arr.eval(pl.struct([pl.col(""split"").arr.get(0).alias(""sector""), pl.col(""split"").arr.get(1).cast(pl.Float64).alias(""value"")]))\r\n    .arr.to_struct()\r\n)\r\n\r\nout\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import hashlib\r\nimport sys\r\n\r\ndef get_hash(alg):\r\n    filename = input(""Enter the file name: "")\r\n    hash_obj = hashlib.new(alg)\r\n    with open(filename, ""rb"") as f:\r\n        for byte_block in iter(lambda: f.read(4096), b""""):\r\n            hash_obj.update(byte_block)\r\n    print(f""{alg} value has been calculated"")\r\n    return hash_obj.hexdigest()\r\n\r\ndef verify_checksum(alg):\r\n    checksum = input(f""Enter the {alg} checksum: "")\r\n    calc_hash = get_hash(alg)\r\n    if calc_hash == checksum:\r\n        print(f""{alg} checksum verified!"")\r\n    else:\r\n        print(f""{alg} checksum does not match."")\r\n\r\ndef which_hash():\r\n    alg = input(""Which hash do you want to calculate: sha256 or sha512? \n"")\r\n    if alg == ""sha256"" or alg == ""sha512"":\r\n        calc = get_hash(alg)\r\n        verify_checksum(alg)\r\n    else:\r\n        print(""Type either sha256 or sha512. If you type anything else the program will close...like this."")\r\n        sys.exit()\r\n\r\nif __name__ == ""__main__"":\r\n    which_hash()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"", ci=""sd"", \r\n                edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5)\r\n\r\ng.map(sns.stripplot, 'sex', 'total_bill', 'smoker', hue_order=['Yes', 'No'], order=['Male', 'Female'],\r\n      palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nannot = Annotator(g.ax, pairs, data=tips, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\nannot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\nannot.apply_test().annotate()\r\n\r\nplt.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j\r\n\r\nx = np.real(xx)\r\ny = np.real(yy)\r\nassert np.shares_memory(x, xx)\r\nassert np.shares_memory(y, yy)\r\n\r\nx_copy = np.real(xx).copy()\r\ny_copy = np.real(yy).copy()\r\n\r\ndot = timeit('np.dot(x_copy, y_copy)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x_copy, y_copy)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nimport json\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\ngdf_poly = gdf_poly.drop('name', axis=1)\r\n\r\nafr_gdf = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop=True)\r\n\r\nfig = ff.create_hexbin_mapbox(data_frame=data,\r\n                              lat=""LAT"", \r\n                              lon=""LON"",\r\n                              nx_hexagon=25,\r\n                              opacity=0.4,\r\n                              labels={""color"": ""Point Count""},\r\n                              mapbox_style='carto-positron',\r\n                              zoom=1\r\n                              )\r\n\r\nfig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(afr_gdf.geometry.to_json()),\r\n             ""below"": ""traces"",\r\n             ""type"": ""fill"",\r\n             ""color"": ""orange"",\r\n             ""opacity"": 0.1,\r\n             ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })   \r\n\r\nfig.update_traces(marker=dict(outlinecolor='rgba(0,0,0,0)'))\r\n\r\nfig.show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import pytest\r\nfrom unittest.mock import MagicMock\r\nfrom db import PostgresqlApi\r\n\r\n\r\n@pytest.fixture\r\ndef mock_db():\r\n    db = MagicMock(PostgresqlApi)\r\n    db.cursor.return_value = MagicMock()\r\n    return db\r\n\r\n\r\ndef test_db_connection(mock_db):\r\n    mock_db.add_event(event=""Test Event"")\r\n    mock_db.events.return_value = [(""Test Event"",)]\r\n    assert mock_db.events() == [(""Test Event"",)]\r\n\r\n\r\ndef test_add_event(mock_db):\r\n    mock_db.add_event(event=""Test Event"")\r\n    mock_db.cursor.execute.assert_called_with(\r\n        ""INSERT INTO history (event) VALUES (%s);"", (""Test Event"",)\r\n    )\r\n\r\n\r\ndef test_read_currencies(mock_db):\r\n    mock_db.events.return_value = [(""Test Event"",)]\r\n    result = {'get events': 'ok'}\r\n    assert result == {'get events': 'ok'}\r\n"
0,1,misclassified_in_Test_9.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    ""session_id"": [20090312431273200, 20090312431273200, 20090312431273200, 20090312431273200],\r\n    ""fqid"": [""intro"", ""gramps"", ""gramps"", ""teddy""],\r\n    ""elapsed_time"": [0, 1323, 831, 5197]\r\n})\r\n\r\ndef agg_fqid(df):\r\n    return df.groupby(""session_id"").agg(\r\n        pl.col(""fqid"").value_counts().alias(""fqid_counts"")\r\n    ).explode(""fqid_counts"").unnest(""fqid_counts"").pivot(\r\n        values=""counts"", index=""session_id"", columns=""fqid""\r\n    )\r\n\r\nagg_fqid(df).show()\r\n"
0,1,misclassified_in_Test_9.csv.csv,"from fastapi import FastAPI, Request\r\nfrom fastapi.responses import JSONResponse\r\nfrom starlette.middleware.base import BaseHTTPMiddleware\r\nimport json\r\n\r\napp = FastAPI()\r\n\r\nclass AddMetaMiddleware(BaseHTTPMiddleware):\r\n    async def dispatch(self, request: Request, call_next):\r\n        response = await call_next(request)\r\n\r\n        body = b""""\r\n        async for chunk in response.body_iterator:\r\n            body += chunk\r\n\r\n        data = {}\r\n        data[""data""] = json.loads(body.decode())\r\n        data[""metadata""] = {\r\n            ""some_data_key_1"": ""some_data_value_1"",\r\n            ""some_data_key_2"": ""some_data_value_2"",\r\n            ""some_data_key_3"": ""some_data_value_3""\r\n        }\r\n\r\n        body = json.dumps(data, indent=2).encode(""utf-8"")\r\n\r\n        return JSONResponse(content=body, status_code=response.status_code)\r\n\r\napp.add_middleware(AddMetaMiddleware)\r\n\r\n@app.get(""/"")\r\nasync def read_root():\r\n    return {""message"": ""Hello, World!""}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.web.reactive.function.client.WebClient;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport reactor.core.publisher.Mono;\r\n\r\npublic class HttpClientExample {\r\n    private static final WebClient webClient = WebClient.create(""https://api.example.com"");\r\n    private static final RestTemplate restTemplate = new RestTemplate();\r\n\r\n    public static void main(String[] args) {\r\n        String result1 = callApiWithWebClient();\r\n        System.out.println(""WebClient Response: "" + result1);\r\n\r\n        String result2 = callApiWithRestTemplate();\r\n        System.out.println(""RestTemplate Response: "" + result2);\r\n    }\r\n\r\n    private static String callApiWithWebClient() {\r\n        return webClient.get()\r\n                .uri(""/data"")\r\n                .retrieve()\r\n                .bodyToMono(String.class)\r\n                .block(); \r\n    }\r\n\r\n    private static String callApiWithRestTemplate() {\r\n        return restTemplate.getForObject(""https://api.example.com/data"", String.class);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,class Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }   \r\n        System.out.println(s);\r\n    }\r\n\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        } else {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n\r\n    static void doesWorkAlternative(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        }\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n\r\n    static void doesWorkSingleIf(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_8.csv.csv,"package test.one;\r\n\r\npublic abstract class One {\r\n    \r\n    protected abstract void whatever();\r\n\r\n    public void run() {\r\n        whatever();\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Three {\r\n\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        one.whatever(); // Error\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n    public static void main(String[] args) {\r\n        new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        }\r\n        .whatever(); \r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\nimport io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport java.util.Map;\r\n\r\npublic class MessageConsumer {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(""my-tracer"");\r\n    private static final TextMapPropagator propagator = GlobalOpenTelemetry.getPropagators().getTextMapPropagator();\r\n\r\n    public void consumeMessage(Map<String, String> messageAttributes) {\r\n        Context extractedContext = propagator.extract(Context.current(), messageAttributes, new TextMapGetter<>() {\r\n            @Override\r\n            public Iterable<String> keys(Map<String, String> carrier) {\r\n                return carrier.keySet();\r\n            }\r\n\r\n            @Override\r\n            public String get(Map<String, String> carrier, String key) {\r\n                return carrier.get(key);\r\n            }\r\n        });\r\n\r\n        Span span = tracer.spanBuilder(""consumeMessage"")\r\n            .setParent(extractedContext)\r\n            .startSpan();\r\n\r\n        try (var scope = span.makeCurrent()) {\r\n            System.out.println(""Processing message with traceId: "" + span.getSpanContext().getTraceId());\r\n        } finally {\r\n            span.end();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.*;\r\n\r\npublic class LongestMountainSequence {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        if (n < 2) return n;\r\n\r\n        List<Integer> uniqueSorted = new ArrayList<>(new TreeSet<>(list));\r\n\r\n        int maxLen = 0;\r\n        for (int i = 1; i < uniqueSorted.size() - 1; i++) {\r\n            for (int j = i + 1; j < uniqueSorted.size(); j++) {\r\n                List<Integer> increasing = new ArrayList<>();\r\n                List<Integer> decreasing = new ArrayList<>();\r\n                List<Integer> increasingAgain = new ArrayList<>();\r\n\r\n                for (int num : list) {\r\n                    if (num <= uniqueSorted.get(i) && (increasing.isEmpty() || num > increasing.get(increasing.size() - 1))) {\r\n                        increasing.add(num);\r\n                    } else if (num <= uniqueSorted.get(j) && (decreasing.isEmpty() || num < decreasing.get(decreasing.size() - 1))) {\r\n                        decreasing.add(num);\r\n                    } else if (!decreasing.isEmpty() && num > decreasing.get(decreasing.size() - 1)) {\r\n                        increasingAgain.add(num);\r\n                    }\r\n                }\r\n\r\n                if (!increasing.isEmpty() && !decreasing.isEmpty() && !increasingAgain.isEmpty()) {\r\n                    maxLen = Math.max(maxLen, increasing.size() + decreasing.size() + increasingAgain.size());\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(solve(List.of(1, 100)));\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\nimport java.util.Arrays;\r\n\r\n@SpringBootApplication\r\npublic class ThymeleafApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ThymeleafApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\nimport org.slf4j.MDC;\r\n\r\npublic class VirtualThreadTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ExecutorService forkJoinPool = new ForkJoinPool(30);\r\n        ExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n        System.out.println(""Testing ForkJoinPool..."");\r\n        long forkJoinTime = testPerformance(forkJoinPool);\r\n        System.out.println(""ForkJoinPool time: "" + forkJoinTime + "" ms"");\r\n\r\n        System.out.println(""Testing Virtual Threads..."");\r\n        long virtualThreadTime = testPerformance(virtualThreadExecutor);\r\n        System.out.println(""Virtual Threads time: "" + virtualThreadTime + "" ms"");\r\n\r\n        forkJoinPool.shutdown();\r\n        virtualThreadExecutor.shutdown();\r\n    }\r\n\r\n    private static long testPerformance(ExecutorService executorService) throws Exception {\r\n        long start = System.currentTimeMillis();\r\n\r\n        List<String> results = executorService.submit(() ->\r\n            IntStream.rangeClosed(1, 100)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(""key"", ""value"");\r\n                        return callExternalService(i);\r\n                    } finally {\r\n                        MDC.remove(""key"");\r\n                    }\r\n                })\r\n                .toList()\r\n        ).get();\r\n\r\n        return System.currentTimeMillis() - start;\r\n    }\r\n\r\n    private static String callExternalService(int i) {\r\n        try {\r\n            Thread.sleep(50);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        return ""Response "" + i;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.net.URLEncoder;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient.Builder().build();\r\n\r\n        MediaType mediaType = MediaType.parse(""application/octet-stream"");\r\n        RequestBody body = RequestBody.create("""", mediaType);\r\n\r\n        String fileName = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8).replace(""+"", ""%20"");\r\n        String contentDisposition = ""attachment; filename=\"""" + encodedFileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://example.com/upload"")\r\n                .method(""POST"", body)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", contentDisposition)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n        System.out.println(response.code());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(rawHandle);\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    System.out.println(""Started"");\r\n\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        var NET_WM_XAPP_PROGRESS = arena.allocateFrom(""NET_WM_XAPP_PROGRESS"");\r\n\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session == null) {\r\n                            System.err.println(""Failed to open X11 display."");\r\n                            return null;\r\n                        }\r\n\r\n                        MemorySegment initData = arena.allocateFrom(ValueLayout.JAVA_INT, 0);\r\n                        Xlib_h.XChangeProperty(x11Session,                    \r\n                                MemorySegment.ofAddress(rawHandle), \r\n                                NET_WM_XAPP_PROGRESS,               \r\n                                6,                                            \r\n                                32,                                           \r\n                                0,                                            \r\n                                initData,                                     \r\n                                1);                                           \r\n                        Xlib_h.XFlush(x11Session);\r\n\r\n                        System.out.println(""Countdown started"");\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            System.out.println(i);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session,                    \r\n                                    MemorySegment.ofAddress(rawHandle), \r\n                                    NET_WM_XAPP_PROGRESS,               \r\n                                    6,                                            \r\n                                    32,                                           \r\n                                    0,                                            \r\n                                    progressData,                                 \r\n                                    1);                                           \r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n\r\n                        System.out.println(""Finished"");\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n\r\n                    } catch (Throwable ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.yaml.snakeyaml.Yaml;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class YamlLoader {\r\n    public static void main(String[] args) {\r\n        try (InputStream input = new FileInputStream(""config.yaml"")) {\r\n            Yaml yaml = new Yaml();\r\n            Map<String, Object> yamlConfig = yaml.load(input);\r\n\r\n            Object interestingObject = yamlConfig.get(""interesting-setup"");\r\n            Map<String, Object> interestingMap = (Map<String, Object>) interestingObject;\r\n\r\n            InterestingSetup setup = new InterestingSetup();\r\n            setup.port = (int) interestingMap.get(""port"");\r\n            setup.validation = (boolean) interestingMap.get(""validation"");\r\n            setup.parts = (List<Map<String, String>>) interestingMap.get(""parts"");\r\n\r\n            System.out.println(setup);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nclass InterestingSetup {\r\n    int port;\r\n    boolean validation;\r\n    List<Map<String, String>> parts;\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""InterestingSetup{"" +\r\n                ""port="" + port +\r\n                "", validation="" + validation +\r\n                "", parts="" + parts +\r\n                '}';\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n    \r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) return null;\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            String escaped = ESCAPES.get(c);\r\n            sb.append(escaped != null ? escaped : c);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    private static final Set<Integer> uniqueDividends = Collections.synchronizedSet(new HashSet<>());\r\n\r\n    static class DivisorTask implements Runnable {\r\n        private int divisor, n;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            for (int i = 1; i <= n; i++) {\r\n                if (i % divisor == 0) {\r\n                    uniqueDividends.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        int sum = 0;\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        \r\n        executor.execute(new DivisorTask(n, 3));\r\n        executor.execute(new DivisorTask(n, 5));\r\n        executor.execute(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(1, TimeUnit.SECONDS);\r\n        } catch (InterruptedException e) {\r\n        }\r\n\r\n        for (int num : uniqueDividends) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        int n = 1000;\r\n        System.out.println(""Sum: "" + finder.getSum(n));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        String content = """"""\r\n                {\r\n                   ""aggregateId"": ""3f61aede-83dd-4049-a6ff-337887b6b807""\r\n                }\r\n                """""";\r\n\r\n        Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n        System.out.println(objectMapper.writeValueAsString(aggregate));\r\n    }\r\n}\r\n\r\nrecord AggregateId(UUID id) {\r\n    @JsonValue\r\n    public UUID value() {\r\n        return id;\r\n    }\r\n\r\n    @JsonCreator\r\n    public static AggregateId fromString(String id) {\r\n        return new AggregateId(UUID.fromString(id));\r\n    }\r\n}\r\n\r\nclass Aggregate {\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(""aggregateId"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.time.*;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\n\r\npublic class IsoWeek {\r\n    private Year year;\r\n    private int week;\r\n\r\n    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""YYYY-'W'ww"");\r\n\r\n    public IsoWeek(String weekString) {\r\n        LocalDate date = LocalDate.parse(weekString + ""-1"", formatter);\r\n        this.year = Year.of(date.getYear());\r\n        this.week = date.get(ChronoField.ALIGNED_WEEK_OF_YEAR);\r\n    }\r\n\r\n    public boolean isBefore(IsoWeek other) {\r\n        return this.year.getValue() < other.year.getValue() ||\r\n               (this.year.getValue() == other.year.getValue() && this.week < other.week);\r\n    }\r\n\r\n    public long weeksBetween(IsoWeek other) {\r\n        LocalDate start = LocalDate.ofYearDay(this.year.getValue(), 1)\r\n                                   .with(ChronoField.ALIGNED_WEEK_OF_YEAR, this.week);\r\n        LocalDate end = LocalDate.ofYearDay(other.year.getValue(), 1)\r\n                                 .with(ChronoField.ALIGNED_WEEK_OF_YEAR, other.week);\r\n        return ChronoUnit.WEEKS.between(start, end);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return year + ""-W"" + (week < 10 ? ""0"" + week : week);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        IsoWeek weekA = new IsoWeek(""2012-W48"");\r\n        IsoWeek weekB = new IsoWeek(""2013-W03"");\r\n\r\n        System.out.println(weekA.isBefore(weekB)); \r\n        System.out.println(weekA.weeksBetween(weekB)); \r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic class DemoSecurityProblem {\r\n    static final AtomicReference<DemoSecurityProblem> instance = new AtomicReference<>();\r\n\r\n    public DemoSecurityProblem() {\r\n        if (true) {\r\n            throw new RuntimeException(""Constructor failed!"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        instance.set(this);\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Executing dangerous operation!"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            new MaliciousSubClass();\r\n        } catch (Exception ignored) { }\r\n\r\n        System.gc();\r\n\r\n        if (instance.get() != null) {\r\n            instance.get().doSomething();\r\n        }\r\n    }\r\n}\r\n\r\nclass MaliciousSubClass extends DemoSecurityProblem { }\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.Callable;\r\n\r\nclass InferenceExample {\r\n    static <T, E extends Exception> T execute(Callable<T> callable) throws E {\r\n        try {\r\n            return callable.call();\r\n        } catch (Exception e) {\r\n            throw (E) e; // unchecked cast, can be unsafe\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> {\r\n                if (true) throw new IllegalArgumentException(""Unchecked""); \r\n                return ""OK"";\r\n            }); // No compilation error\r\n\r\n            execute(() -> {\r\n                if (true) throw new Exception(""Checked""); \r\n                return ""OK"";\r\n            }); // Compilation error: unhandled exception\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class EqualSplit {\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0) \r\n            return false;\r\n        return equalSplit(arr, 0, 0, 0, arr.length / 2);\r\n    }\r\n\r\n    private static boolean equalSplit(int[] arr, int index, int sum1, int sum2, int count1) {\r\n        if (index == arr.length) \r\n            return sum1 == sum2 && count1 == 0;\r\n        \r\n        if (count1 > 0 && equalSplit(arr, index + 1, sum1 + arr[index], sum2, count1 - 1)) \r\n            return true;\r\n        \r\n        return equalSplit(arr, index + 1, sum1, sum2 + arr[index], count1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] arr = {1, 2, 3, 4, 6, 8};\r\n        System.out.println(equalSplit(arr)); \r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n\r\n        label.setOnMouseEntered(e -> {\r\n            Point2D p = label.localToScene(label.getWidth(), label.getHeight());\r\n            tooltip.show(label,\r\n                    p.getX() + label.getScene().getX() + label.getScene().getWindow().getX(),\r\n                    p.getY() + label.getScene().getY() + label.getScene().getWindow().getY());\r\n        });\r\n\r\n        label.setOnMouseExited(e -> tooltip.hide());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\nclass MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.HashSet;\r\n\r\npublic class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n          \r\n        char string[] = string1.toCharArray();  \r\n          \r\n        System.out.println(""Duplicate characters in a given string: "");  \r\n        HashSet<Character> printed = new HashSet<>();\r\n          \r\n        for(int i = 0; i < string.length - 1; i++) {  \r\n            count = 1;  \r\n            for(int j = i+1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0' && !printed.contains(string[i])) {  \r\n                System.out.println(string[i]);  \r\n                printed.add(string[i]);\r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n        if (!hasDuplicates) \r\n            System.out.println(""no duplicates""); \r\n    }  \r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private int rotationAngle = 0;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private Button rotate;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.input.KeyEvent;\r\n\r\npublic class DynamicDrawMode extends Application {\r\n    private Box box;\r\n    private boolean wireframe = false;\r\n\r\n    public void start(Stage stage) {\r\n        box = new Box(200, 200, 200);\r\n        box.setMaterial(new PhongMaterial(Color.BLUE));\r\n        box.setCullFace(CullFace.BACK);\r\n        box.setDrawMode(DrawMode.FILL);\r\n        box.getTransforms().add(new Rotate(30, Rotate.X_AXIS));\r\n        box.getTransforms().add(new Rotate(30, Rotate.Y_AXIS));\r\n\r\n        BorderPane root = new BorderPane(box);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.setOnKeyPressed(this::toggleDrawMode);\r\n\r\n        stage.setTitle(""3D Draw Mode Toggle"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private void toggleDrawMode(KeyEvent event) {\r\n        if (event.getText().equalsIgnoreCase(""w"")) {\r\n            wireframe = !wireframe;\r\n            box.setDrawMode(wireframe ? DrawMode.LINE : DrawMode.FILL);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\nvoid main() throws InterruptedException {\r\n    final var NAME = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n        ScopedValue.runWhere(NAME, ""haha"", () -> {\r\n            ts.fork(() -> {\r\n                return NAME.get() + "" world""; \r\n            });\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.text.TextAlignment;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(createTestLabel());\r\n        Scene scene = new Scene(root, 400, 200);\r\n\r\n        scene.getStylesheets().add(""ExampleStylesheet.css"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setPickOnBounds(false);\r\n\r\n        testLabel.setOnMouseEntered(this::doSomething);\r\n        testLabel.setOnMouseExited(this::doSomethingElse);\r\n\r\n        testLabel.setShape(new javafx.scene.shape.Rectangle(180, 100));\r\n        \r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething(MouseEvent e) {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse(MouseEvent e) {\r\n        System.out.println(""Outside label."");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.add(new Label(""One two three""), 0, 0);\r\n        gridPane1.add(new TextField(), 1, 0);\r\n        gridPane1.setHgap(20);\r\n        \r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(new Label(""Four five six seven""), 0, 0);\r\n        gridPane2.add(new TextField(), 1, 0);\r\n\r\n        ColumnConstraints column1 = new ColumnConstraints();\r\n        column1.setPercentWidth(40);\r\n        ColumnConstraints column2 = new ColumnConstraints();\r\n        column2.setPercentWidth(60);\r\n\r\n        gridPane1.getColumnConstraints().addAll(column1, column2);\r\n        gridPane2.getColumnConstraints().addAll(column1, column2);\r\n\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Popup;\r\n\r\npublic class MenuUpwardsApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        MenuBar menuBar = new MenuBar();\r\n        menuBar.getMenus().add(createMenu(""Options""));\r\n\r\n        VBox root = new VBox();\r\n        root.getChildren().add(menuBar);\r\n        root.setStyle(""-fx-background-color: lightgray;"");\r\n        \r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n        \r\n        menuBar.setTranslateY(250);  \r\n    }\r\n\r\n    private Menu createMenu(String title) {\r\n        Menu menu = new Menu(title);\r\n        menu.getItems().addAll(new MenuItem(""Item 1""), new MenuItem(""Item 2""));\r\n\r\n        menu.setOnShowing(e -> {\r\n            Popup popup = new Popup();\r\n            popup.getContent().add(new Label(""Temporary Workaround""));\r\n            popup.setAutoHide(true);\r\n            popup.show(menu.getParentPopup(), 200, 100);\r\n        });\r\n\r\n        return menu;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.itextpdf.text.*;\r\nimport com.itextpdf.text.pdf.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\n\r\npublic class TestWatermark3 {\r\n    public static String resourcesPath = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    public static String FILE_NAME = resourcesPath + ""test.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        System.out.println(""########## STARTED ADDING WATERMARK ###########"");\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        try {\r\n            byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n            String watermarkText = ""??? ??????""; \r\n            String fontPath = resourcesPath + ""myCustomFont.ttf"";\r\n            Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 18);\r\n\r\n            BaseFont baseFont = arabicFont.getBaseFont();\r\n            PdfReader reader = new PdfReader(byteArray);\r\n            PdfStamper stamper = new PdfStamper(reader, baos);\r\n            Phrase watermarkPhrase = new Phrase(watermarkText, arabicFont);\r\n\r\n            int numberOfPages = reader.getNumberOfPages();\r\n\r\n            for (int i = 1; i <= numberOfPages; i++) {\r\n                Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n                PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n                PdfGState state = new PdfGState();\r\n                state.setFillOpacity(0.4f);\r\n                overContent.saveState();\r\n                overContent.setGState(state);\r\n\r\n                for (float x = 80f; x < pageSize.getWidth(); x += 120) {\r\n                    for (float y = 100; y < pageSize.getHeight(); y += 120) {\r\n                        ColumnText.showTextAligned(overContent, Element.ALIGN_CENTER, watermarkPhrase, x, y, 45f,\r\n                                PdfWriter.RUN_DIRECTION_RTL, ColumnText.AR_NOVOWEL);\r\n                    }\r\n                }\r\n\r\n                overContent.restoreState();\r\n            }\r\n\r\n            stamper.close();\r\n            reader.close();\r\n            byteArray = baos.toByteArray();\r\n            File outputFile = new File(resourcesPath + ""output.pdf"");\r\n            if (outputFile.exists()) {\r\n                outputFile.delete();\r\n            }\r\n            Files.write(outputFile.toPath(), byteArray);\r\n\r\n            System.out.println(""########## FINISHED ADDING WATERMARK ###########"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport java.util.concurrent.*;\r\n\r\n@SpringBootApplication\r\npublic class VirtualThreadSecurityApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(VirtualThreadSecurityApp.class, args);\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/secure"")\r\nclass SecureController {\r\n    private final ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n    @GetMapping(""/user"")\r\n    public String getUser() throws Exception {\r\n        return executor.submit(() -> {\r\n            var auth = SecurityContextHolder.getContext().getAuthentication();\r\n            return auth != null ? ""User: "" + auth.getName() : ""No User"";\r\n        }).get();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.fxml.Initializable;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Grid extends GridPane implements Initializable {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n        \r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initialize(null, null);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        this.setStyle(""-fx-border-color: black;"");\r\n        \r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row <= totalRowFields; row++) {\r\n            for (int col = 0; col <= totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n    \r\n    @Bean\r\n    public MappingJackson2HttpMessageConverter jsonMessageConverter() {\r\n        return new MappingJackson2HttpMessageConverter();\r\n    }\r\n\r\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n        converters.add(jsonMessageConverter());\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_8.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.ArgumentMatchers;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\n\r\nclass DocumentConverterTest {\r\n\r\n    private byte[] content;\r\n    \r\n    @BeforeEach\r\n    void setUp() {\r\n        content = ""sample content"".getBytes();\r\n    }\r\n\r\n    @Test\r\n    void testDocumentConversion() throws Exception {\r\n        try (MockedConstruction<PDFDocument> pdfMock = Mockito.mockConstruction(PDFDocument.class);\r\n             MockedConstruction<PSConverter> converterMock = Mockito.mockConstruction(PSConverter.class)) {\r\n\r\n            PDFDocument pdfDocument = pdfMock.constructed().get(0);\r\n            PSConverter converter = converterMock.constructed().get(0);\r\n\r\n            doNothing().when(pdfDocument).load(ArgumentMatchers.any(ByteArrayInputStream.class));\r\n\r\n            doAnswer(invocation -> {\r\n                ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n                outputStream.write(content);\r\n                return outputStream;\r\n            }).when(converter).convert(ArgumentMatchers.any(), ArgumentMatchers.any(ByteArrayOutputStream.class));\r\n\r\n            assertNotNull(pdfDocument);\r\n            assertNotNull(converter);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class NestedPerf {\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(1) // Too few warmup iterations\r\n                .measurementIterations(3) // Too few measurement iterations\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\n\r\n    private static final double EARTH_RADIUS = 200;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Sphere earthSphere = new Sphere(EARTH_RADIUS, 128);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\n        earthSphere.setMaterial(material);\r\n\r\n        Group root = new Group(earthSphere);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setTitle(""JavaFX 3D Earth"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class Test {\r\n    public static void go(Short n) {\r\n        System.out.println(""Short"");\r\n    }\r\n\r\n    public static void go(int n) {\r\n        System.out.println(""int"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go((short) x);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import kotlinx.coroutines.sync.Semaphore\r\nimport kotlinx.coroutines.sync.withPermit\r\nimport org.springframework.web.bind.annotation.GetMapping\r\nimport org.springframework.web.bind.annotation.RequestMapping\r\nimport org.springframework.web.bind.annotation.RestController\r\nimport java.util.concurrent.Executors\r\nimport java.util.concurrent.Semaphore as JSemaphore\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\nclass ApiController {\r\n\r\n    private val semaphore = JSemaphore(50, true)\r\n    private val executor = Executors.newVirtualThreadPerTaskExecutor()\r\n\r\n    @GetMapping(""/process"")\r\n    fun processRequest(): String {\r\n        if (!semaphore.tryAcquire()) {\r\n            return ""Too many concurrent requests""\r\n        }\r\n\r\n        return try {\r\n            executor.submit {\r\n                Thread.sleep(100) \r\n            }.get()\r\n            ""Processed""\r\n        } finally {\r\n            semaphore.release()\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.test;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\npublic class App extends Application {\r\n    public static final String PATH_TO_STYLESHEET = App.class.getResource(""/style/style.css"") != null \r\n        ? App.class.getResource(""/style/style.css"").toExternalForm() \r\n        : """";\r\n\r\n    public static final String PATH_TO_IMG = App.class.getResource(""/img/logo.png"") != null \r\n        ? App.class.getResource(""/img/logo.png"").toExternalForm() \r\n        : """";\r\n\r\n    public static final String PATH_TO_SOUNDS = App.class.getResource(""/sound/click.wav"") != null \r\n        ? App.class.getResource(""/sound/click.wav"").toExternalForm() \r\n        : """";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(new Text(""Hello, JavaFX!""));\r\n\r\n        Scene scene = new Scene(root, 300, 200);\r\n        if (!PATH_TO_STYLESHEET.isEmpty()) {\r\n            scene.getStylesheets().add(PATH_TO_STYLESHEET);\r\n        }\r\n\r\n        primaryStage.setTitle(""JavaFX App"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.Region;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        StackPane root = new StackPane();\r\n\r\n        Region background = new Region();\r\n        background.setStyle(""-fx-background-color: red;"");\r\n        background.setPrefSize(500, 500);\r\n\r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        root.getChildren().addAll(background, testButton);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String userName = ""John Doe"";\r\n            String eventName = ""Tech Conference"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 400, 400, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage combined = new BufferedImage(420, 500, BufferedImage.TYPE_INT_RGB);\r\n\r\n            Graphics2D g = combined.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, 420, 500);\r\n\r\n            g.drawImage(qrImage, 10, 10, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            g.drawString(userName, 20, 450);\r\n            g.drawString(eventName, 20, 480);\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, ""png"", new File(filePath));\r\n\r\n            System.out.println(""QR Code created successfully!"");\r\n        } catch (WriterException | IOException e) {\r\n            System.err.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import jakarta.annotation.Resource;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.jms.*;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class JMSExampleServlet extends HttpServlet {\r\n\r\n    private static final int MSG_COUNT = 5;\r\n\r\n    @Inject\r\n    @JMSConnectionFactory(""java:/jms/remoteCF"")\r\n    private JMSContext context;\r\n\r\n    @Resource(lookup = ""java:/queue/testQueue"")\r\n    private Queue queue;\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        resp.setContentType(""text/html"");\r\n        PrintWriter out = resp.getWriter();\r\n        \r\n        try {\r\n            out.write(""<p>Sending messages to <em>"" + queue + ""</em></p>"");\r\n            out.write(""<h2>The following messages will be sent to the destination:</h2>"");\r\n            \r\n            for (int i = 0; i < MSG_COUNT; i++) {\r\n               \r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    private String sourceNode;\r\n    private String destinationNode;\r\n    private String weekIndex;\r\n    private int quantity;\r\n\r\n    public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n        this.weekIndex = weekIndex;\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNode = destinationNode;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public String getSourceNode() {\r\n        return sourceNode;\r\n    }\r\n\r\n    public String getDestinationNode() {\r\n        return destinationNode;\r\n    }\r\n\r\n    public String getWeekIndex() {\r\n        return weekIndex;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n}\r\n\r\npublic class GroupByPercentage {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n                new Record(""week1"", ""source1"", ""destination1"", 100),\r\n                new Record(""week1"", ""source1"", ""destination2"", 200),\r\n                new Record(""week1"", ""source2"", ""destination1"", 200),\r\n                new Record(""week1"", ""source2"", ""destination2"", 100),\r\n                new Record(""week2"", ""source1"", ""destination1"", 200),\r\n                new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        Map<String, Map<String, Integer>> totalQuantityByWeekAndSource = records.stream()\r\n                .collect(Collectors.groupingBy(Record::getWeekIndex,\r\n                        Collectors.groupingBy(Record::getSourceNode,\r\n                                Collectors.summingInt(Record::getQuantity))));\r\n\r\n        List<String> result = records.stream()\r\n                .map(r -> {\r\n                    int total = totalQuantityByWeekAndSource.get(r.getWeekIndex()).get(r.getSourceNode());\r\n                    double percentage = (double) r.getQuantity() / total * 100;\r\n                    return r.getWeekIndex() + "" "" + r.getSourceNode() + "" "" + r.getDestinationNode() +\r\n                            "" "" + String.format(""%.2f%%"", percentage);\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.mongodb.client.model.InsertOneModel;\r\n\r\npublic class ParallelStreamTest {\r\n    public static void main(String[] args) {\r\n        List<String> puzzles = List.of(""puzzle1"", ""puzzle2"", ""puzzle3"");\r\n        Gson gson = new Gson();\r\n\r\n        List<InsertOneModel<Document>> bulkWrites1 = puzzles.parallelStream()\r\n                .map(gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        List<InsertOneModel<Document>> bulkWrites2 = puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .collect(Collectors.toList());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class StrictFpExample {\r\n    public static void main(String[] args) {\r\n        double a = Double.MAX_VALUE;\r\n        double b = 2.0;\r\n        double c = a * b;\r\n        double d = c / 4;  \r\n\r\n        System.out.println(""Without strictfp: "" + d);\r\n\r\n        StrictFpClass strictFpClass = new StrictFpClass();\r\n        strictFpClass.runStrictFp();\r\n    }\r\n}\r\n\r\nstrictfp class StrictFpClass {\r\n    public void runStrictFp() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = 2.0;\r\n        double c = a * b;\r\n        double d = c / 4;  \r\n\r\n        System.out.println(""With strictfp: "" + d);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.MemorySession;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.util.stream.LongStream;\r\n\r\npublic class LargeLongArray {\r\n    private final MemorySegment segment;\r\n    private final long size;\r\n\r\n    public LargeLongArray(long size) {\r\n        this.size = size;\r\n        this.segment = MemorySegment.allocateNative(size * Long.BYTES, MemorySession.global());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();\r\n        segment.set(ValueLayout.JAVA_LONG, index * Long.BYTES, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();\r\n        return segment.get(ValueLayout.JAVA_LONG, index * Long.BYTES);\r\n    }\r\n\r\n    public long sum() {\r\n        return LongStream.range(0, size).map(this::get).sum();\r\n    }\r\n\r\n    public void close() {\r\n        segment.close();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LargeLongArray array = new LargeLongArray(1_000_000L);\r\n        array.set(999_999, 42);\r\n        System.out.println(array.get(999_999));\r\n        System.out.println(array.sum());\r\n        array.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class BulletHell extends JPanel {\r\n    private final List<Bullet> bullets = new ArrayList<>();\r\n    private final BufferedImage bulletSprite;\r\n\r\n    public BulletHell() {\r\n        bulletSprite = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics g = bulletSprite.getGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(0, 0, 16, 16);\r\n        g.dispose();\r\n        \r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(Math.random() * 800, Math.random() * 600, Math.random() * 360, bulletSprite));\r\n        }\r\n\r\n        Timer timer = new Timer(16, e -> {\r\n            bullets.forEach(Bullet::update);\r\n            repaint();\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        bullets.forEach(b -> b.draw(g2d));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame();\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(800, 600);\r\n        frame.add(new BulletHell());\r\n        frame.setVisible(true);\r\n    }\r\n}\r\n\r\nclass Bullet {\r\n    double x, y, angle;\r\n    BufferedImage sprite;\r\n\r\n    public Bullet(double x, double y, double angle, BufferedImage sprite) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.angle = angle;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    public void update() {\r\n        x += Math.cos(Math.toRadians(angle)) * 2;\r\n        y += Math.sin(Math.toRadians(angle)) * 2;\r\n    }\r\n\r\n    public void draw(Graphics2D g) {\r\n        AffineTransform old = g.getTransform();\r\n        g.translate(x, y);\r\n        g.rotate(Math.toRadians(angle), sprite.getWidth() / 2.0, sprite.getHeight() / 2.0);\r\n        g.drawImage(sprite, 0, 0, null);\r\n        g.setTransform(old);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.control.SkinBase;\r\nimport javafx.scene.control.skin.ComboBoxListViewSkin;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setSkin(new ComboBoxListViewSkin<>(comboBox) {\r\n            @Override\r\n            protected void updatePopup() {\r\n                super.updatePopup();\r\n                if (getPopupContent() != null) {\r\n                    getPopupContent().getStyleClass().add(""yellowed-popup"");\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package GUI.QLKH;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport DTO.QLKH_DTO;\r\nimport utils.HibernateUtil;\r\nimport java.util.List;\r\n\r\npublic class QLKH {\r\n    private static SessionFactory factory;\r\n    Session session=null;\r\n    \r\n    public static void main(String[] args) {\r\n        factory = HibernateUtil.getSessionFactory();\r\n        QLKH Customer = new QLKH();\r\n       \r\n        System.out.println(""search customers:"");\r\n        Customer.search();\r\n    }\r\n\r\n    public void search(){\r\n         String temp = ""%John%"";\r\n         session = factory.openSession();\r\n         session.beginTransaction(); \r\n        List<QLKH_DTO> search;\r\n        search = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n        \r\n        session.getTransaction().commit();      \r\n        \r\n        for (QLKH_DTO customer : search) {\r\n            System.out.print(""Password: "" + customer.getPassword());\r\n            System.out.print(""Fullname: "" + customer.getFullname());\r\n            System.out.println(""Address: "" + customer.getAddress());\r\n            System.out.println(""City: "" + customer.getCity());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package app.components;\r\n\r\nimport java.io.IOException;\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\npublic class Custom extends VBox {\r\n    \r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    \r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<VBox alignment=""CENTER"" xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" text=""-"" />\r\n   </children>\r\n</VBox>\r\npackage app.controllers;\r\n\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class Menu {\r\n\r\n    @FXML\r\n    private Custom cc;\r\n\r\n    public void initialize() {\r\n        if (cc != null) {\r\n            cc.newText(""Test"");\r\n        }\r\n    }\r\n}\r\nmodule app {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    \r\n    opens app to javafx.fxml;\r\n    opens app.controllers to javafx.fxml;\r\n    \r\n    exports app;\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n        Scene scene = new Scene(root, 400, 400);\r\n        StackPane stack = new StackPane();\r\n        \r\n        Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        \r\n        Color color1 = Color.RED;\r\n        Color color2 = Color.BLUE;\r\n        \r\n        double[] r = {color1.getRed()};\r\n        double[] g = {color1.getGreen()};\r\n        double[] b = {color1.getBlue()};\r\n        \r\n        text.setFont(Font.font(16));\r\n        text.setFill(color1);\r\n        \r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.millis(20), event -> {\r\n                r[0] += (color2.getRed() - color1.getRed()) / 50;\r\n                g[0] += (color2.getGreen() - color1.getGreen()) / 50;\r\n                b[0] += (color2.getBlue() - color1.getBlue()) / 50;\r\n                \r\n                if (r[0] > color2.getRed()) r[0] = color2.getRed();\r\n                if (g[0] > color2.getGreen()) g[0] = color2.getGreen();\r\n                if (b[0] > color2.getBlue()) b[0] = color2.getBlue();\r\n                \r\n                text.setFill(new Color(r[0], g[0], b[0], 1.0));\r\n            })\r\n        );\r\n        \r\n        timeline.setCycleCount(50);\r\n        timeline.play();\r\n        \r\n        stack.getChildren().add(text);\r\n        root.getChildren().add(stack);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import okhttp3.*;\r\nimport org.json.JSONObject;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Client {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = getAccessToken();\r\n        if (token != null) {\r\n            callApiWithToken(token);\r\n        }\r\n    }\r\n\r\n    private static String getAccessToken() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        RequestBody body = new FormBody.Builder()\r\n                .add(""grant_type"", GRANT_TYPE)\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(body)\r\n                .addHeader(""Content-Type"", ""application/x-www-form-urlencoded"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) return null;\r\n            JSONObject json = new JSONObject(response.body().string());\r\n            return json.getString(""access_token"");\r\n        }\r\n    }\r\n\r\n    private static void callApiWithToken(String token) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        Request request = new Request.Builder()\r\n                .url(""https://example.com/protected-resource"")\r\n                .get()\r\n                .addHeader(""Authorization"", ""Bearer "" + token)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                System.out.println(response.body().string());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MapViewer extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n        \r\n        File file = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n        String content = """";\r\n        try {\r\n            content = new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        webEngine.loadContent(content);\r\n        \r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Google Maps in JavaFX"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n    public static void main(String[] args) throws IOException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(""Class: "" + classDecl.getNameAsString());\r\n\r\n            classDecl.findAll(MethodDeclaration.class).forEach(methodDecl -> {\r\n                System.out.println(""  Method: "" + methodDecl.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                methodDecl.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (classDecl.getFieldByName(n.getNameAsString()).isPresent()) {\r\n                            readFields.add(n.getNameAsString());\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(AssignExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (n.getTarget() instanceof NameExpr) {\r\n                            String fieldName = ((NameExpr) n.getTarget()).getNameAsString();\r\n                            if (classDecl.getFieldByName(fieldName).isPresent()) {\r\n                                writeFields.add(fieldName);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (n.getExpression() instanceof NameExpr) {\r\n                            String fieldName = ((NameExpr) n.getExpression()).getNameAsString();\r\n                            if (classDecl.getFieldByName(fieldName).isPresent()) {\r\n                                writeFields.add(fieldName);\r\n                            }\r\n                        }\r\n                    }\r\n                }, null);\r\n\r\n                if (!readFields.isEmpty()) {\r\n                    System.out.println(""    Read Fields: "" + readFields);\r\n                }\r\n                if (!writeFields.isEmpty()) {\r\n                    System.out.println(""    Write Fields: "" + writeFields);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@interface Annotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = String.class)\r\n    private String explicitAttribute;\r\n}\r\n\r\npublic class AnnotationProcessor {\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> clazz = annotation.className() == Object.class ? field.getType() : annotation.className();\r\n                System.out.println(""Field: "" + field.getName() + "", Class: "" + clazz.getSimpleName());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport com.sun.tools.javac.api.JavacTrees;\r\nimport com.sun.tools.javac.code.Type;\r\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\r\nimport com.sun.tools.javac.tree.JCTree;\r\n\r\nimport javax.annotation.processing.AbstractProcessor;\r\nimport javax.annotation.processing.RoundEnvironment;\r\nimport javax.annotation.processing.SupportedAnnotationTypes;\r\nimport javax.annotation.processing.SupportedSourceVersion;\r\nimport javax.lang.model.SourceVersion;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport java.util.Set;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_17)\r\npublic class SwitchExpressionTypeProcessor extends AbstractProcessor {\r\n\r\n    private Trees trees;\r\n\r\n    @Override\r\n    public synchronized void init(javax.annotation.processing.ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        this.trees = JavacTrees.instance(processingEnv);\r\n    }\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getRootElements()) {\r\n            TreePath path = trees.getPath(element);\r\n            if (path != null) {\r\n                new TreeScanner<Void, Void>() {\r\n                    @Override\r\n                    public Void visitMethod(MethodTree methodTree, Void unused) {\r\n                        BlockTree blockTree = methodTree.getBody();\r\n                        if (blockTree != null) {\r\n                            for (StatementTree statementTree : blockTree.getStatements()) {\r\n                                if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                                    SwitchTree switchTree = (SwitchTree) statementTree;\r\n                                    ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                                    if (switchTreeExpression instanceof JCTree.JCExpression) {\r\n                                        Type type = ((JCTree.JCExpression) switchTreeExpression).type;\r\n                                        if (type != null) {\r\n                                            System.out.println(""Switch Expression Type: "" + type.toString());\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return super.visitMethod(methodTree, unused);\r\n                    }\r\n                }.scan(path.getCompilationUnit(), null);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport java.io.IOException;\r\n\r\n@Component\r\npublic class ListItemFactory {\r\n\r\n    private final ApplicationContext applicationContext;\r\n\r\n    public ListItemFactory(ApplicationContext applicationContext) {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n\r\n    public VBox createListItem() {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(""/path/to/fxml""));\r\n        fxmlLoader.setControllerFactory(clazz -> {\r\n            if (clazz.isAnnotationPresent(Component.class)) {\r\n                return applicationContext.getAutowireCapableBeanFactory().createBean(clazz);\r\n            }\r\n            try {\r\n                return clazz.getDeclaredConstructor().newInstance();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n\r\n        try {\r\n            return fxmlLoader.load();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class MainController {\r\n\r\n    @FXML\r\n    private VBox contentArea;\r\n\r\n    private final ListItemFactory listItemFactory;\r\n\r\n    public MainController(ListItemFactory listItemFactory) {\r\n        this.listItemFactory = listItemFactory;\r\n    }\r\n\r\n    public void addItem() {\r\n        VBox listItem = listItemFactory.createListItem();\r\n        if (listItem != null) {\r\n            contentArea.getChildren().add(listItem);\r\n        }\r\n    }\r\n}import javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class ListItemController {\r\n\r\n    @FXML\r\n    private Label label;\r\n\r\n    public void setText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ScatterChartExample extends Application {\r\n\r\n    private List<Double> r = new ArrayList<>();\r\n    private List<Double> nodes = new ArrayList<>();\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        populateData();\r\n        createScatterChart();\r\n    }\r\n\r\n    private void populateData() {\r\n        for (int i = 0; i < 10; i++) {\r\n            r.add(10.0 + i * 2);\r\n            nodes.add(i * 36.0);\r\n        }\r\n    }\r\n\r\n    public void createScatterChart() {\r\n        final NumberAxis xAxis = new NumberAxis();\r\n        final NumberAxis yAxis = new NumberAxis();\r\n\r\n        final XYChart<Number, Number> smoothedChart = new XYChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n\r\n        for (int i = 0; i < r.size(); i++) {\r\n            double x = r.get(i) * Math.cos(Math.toRadians(nodes.get(i)));\r\n            double y = r.get(i) * Math.sin(Math.toRadians(nodes.get(i)));\r\n            series1.getData().add(new XYChart.Data<>(x, y));\r\n\r\n            if (i < r.size() - 1) {\r\n                double xNext = r.get(i + 1) * Math.cos(Math.toRadians(nodes.get(i + 1)));\r\n                double yNext = r.get(i + 1) * Math.sin(Math.toRadians(nodes.get(i + 1)));\r\n                series2.getData().add(new XYChart.Data<>(xNext, yNext));\r\n            }\r\n        }\r\n\r\n        smoothedChart.getData().add(series1);\r\n        smoothedChart.getData().add(series2);\r\n\r\n        Stage stage = new Stage();\r\n        Scene scene = new Scene(smoothedChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n        openBottomSheet.setOnClickListener(v -> {\r\n            BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n            bottomSheet.show(getSupportFragmentManager(), ""BottomSheet"");\r\n        });\r\n    }\r\n}\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        BottomSheetDialog dialog = (BottomSheetDialog) getDialog();\r\n        if (dialog != null) {\r\n            View bottomSheet = dialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n            if (bottomSheet != null) {\r\n                BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\n                behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                behavior.setSkipCollapsed(true);\r\n                bottomSheet.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n            }\r\n        }\r\n    }\r\n}\r\n<!-- bottom_sheet_layout.xml -->\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical"">\r\n\r\n    <Button\r\n        android:id=""@+id/close_button""\r\n        android:layout_width=""wrap_content""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Close"" />\r\n</LinearLayout>\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.List;\r\nimport java.util.Comparator;\r\n\r\npublic class CustomProcessor {\r\n\r\n    public String transform(List<CustomObject> listOfObjects) {\r\n        return listOfObjects.stream()\r\n                .filter(obj -> ""BUSINESS"".equals(obj.objectType()))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .findFirst()\r\n                .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND""))\r\n                .getUrl();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.*;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport java.util.*;\r\n\r\npublic class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> restartAnimation());\r\n            color2.addListener((obs, o, v) -> restartAnimation());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null && timeline.get() != null) {\r\n                    timeline.get().play();\r\n                } else if (timeline.get() != null) {\r\n                    timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        void restartAnimation() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.getValue())\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.getValue())\r\n                )\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n        );\r\n\r\n        static class StyleableProperties {\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                ""-color1"", PaintConverter.getInstance(), Color.RED\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getSt\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import static org.assertj.core.api.Assertions.assertThat;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport jakarta.persistence.EntityListeners;\r\nimport jakarta.persistence.PrePersist;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\r\n\r\n@DataJpaTest\r\n@ExtendWith({SpringExtension.class, MockitoExtension.class})\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    private myEntityRepository repo;\r\n    \r\n    @InjectMocks\r\n    private myEntityListener entityListener;\r\n    \r\n    @Mock\r\n    private myEntityListener mockListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        doReturn(expected).when(mockListener).doThis();\r\n        \r\n        myEntity e = new myEntity();\r\n        myEntity stored = repo.save(e);\r\n        \r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> result = searchPattern(T, P);\r\n        for (int[] pos : result) {\r\n            System.out.println(""("" + pos[0] + "","" + pos[1] + "")"");\r\n        }\r\n    }\r\n\r\n    static List<int[]> searchPattern(int[][] T, int[][] P) {\r\n        List<int[]> matches = new ArrayList<>();\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n\r\n        for (int i = 0; i <= m - u + 1; i++) {  \r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matchesAt(T, P, i, j)) {\r\n                    matches.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n        return matches;\r\n    }\r\n\r\n    static boolean matchesAt(int[][] T, int[][] P, int x, int y) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[x + i][y + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.firebase.ui.database.FirebaseRecyclerAdapter;\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.google.firebase.database.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private SCardAdapter adapter;\r\n    private DatabaseReference reference;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        reference = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\n        fetchAll();\r\n\r\n        return v;\r\n    }\r\n\r\n    private void fetchAll() {\r\n        reference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                List<SCard> list = new ArrayList<>();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard sCard = company.getValue(SCard.class);\r\n                        if (sCard != null) {\r\n                            list.add(sCard);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                FirebaseRecyclerOptions<SCard> options =\r\n                        new FirebaseRecyclerOptions.Builder<SCard>()\r\n                                .setQuery(reference, SCard.class)\r\n                                .build();\r\n\r\n                adapter = new SCardAdapter(options);\r\n                recyclerView.setAdapter(adapter);\r\n                adapter.startListening();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {}\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        if (adapter != null) adapter.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (adapter != null) adapter.stopListening();\r\n    }\r\n}\r\n\r\nclass SCard {\r\n    private String companyName;\r\n\r\n    public SCard() {}\r\n\r\n    public SCard(String companyName) {\r\n        this.companyName = companyName;\r\n    }\r\n\r\n    public String getCompanyName() {\r\n        return companyName;\r\n    }\r\n\r\n    public void setCompanyName(String companyName) {\r\n        this.companyName = companyName;\r\n    }\r\n}\r\n\r\nclass SCardAdapter extends FirebaseRecyclerAdapter<SCard, SCardAdapter.ViewHolder> {\r\n\r\n    public SCardAdapter(@NonNull FirebaseRecyclerOptions<SCard> options) {\r\n        super(options);\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(@NonNull ViewHolder holder, int position, @NonNull SCard model) {\r\n        holder.sname.setText(model.getCompanyName());\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n@Configuration\r\npublic class LocaleConfig {\r\n\r\n    private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(Locale.ENGLISH, new Locale(""hi""));\r\n\r\n    @Bean\r\n    public LocaleResolver localeResolver() {\r\n        CookieLocaleResolver resolver = new CookieLocaleResolver();\r\n        resolver.setDefaultLocale(Locale.ENGLISH);\r\n        return resolver;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        return new LocaleChangeInterceptor() {\r\n            @Override\r\n            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\r\n                String newLocale = request.getParameter(getParamName());\r\n                if (newLocale != null) {\r\n                    Locale locale = Locale.forLanguageTag(newLocale);\r\n                    if (!ALLOWED_LOCALES.contains(locale)) {\r\n                        throw new IllegalArgumentException(""Invalid locale: "" + newLocale);\r\n                    }\r\n                }\r\n                return super.preHandle(request, response, handler);\r\n            }\r\n        };\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.Modifier;\r\n\r\npublic class ReflectionExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        if (Modifier.isPrivate(constructor.getModifiers())) {\r\n            constructor.setAccessible(true);\r\n        }\r\n        Parent parentInstance = constructor.newInstance();\r\n        System.out.println(""Instance created: "" + parentInstance);\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {}\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU="";\r\n\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n\r\n        System.out.println(""Private Key: "" + pkey);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorSet;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorProto;\r\n\r\npublic class ProtoParser {\r\n    public static void main(String[] args) throws IOException {\r\n        byte[] protoBytes = Files.readAllBytes(Paths.get(""example.proto""));\r\n\r\n        FileDescriptorSet descriptorSet = FileDescriptorSet.parseFrom(protoBytes);\r\n\r\n        for (FileDescriptorProto descriptorProto : descriptorSet.getFileList()) {\r\n            System.out.println(""Proto Name: "" + descriptorProto.getName());\r\n            System.out.println(""Package: "" + descriptorProto.getPackage());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 2, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Execution timed out!"");\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(""Final Counter: "" + result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout, TimeUnit unit) \r\n            throws TimeoutException, InterruptedException {\r\n        long startTime = System.nanoTime();\r\n        while (loop-- >= 0) {\r\n            if (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) >= unit.toMillis(timeout)) {\r\n                throw new TimeoutException();\r\n            }\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MyClass obj = new MyClass();\r\n        obj.entry(x -> {\r\n            try {\r\n                Thread.sleep(500); \r\n            } catch (InterruptedException ignored) {}\r\n            return null;\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class Step1 {\r\n    private final Tracer tracer;\r\n\r\n    public Step1(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj) {\r\n        byte[] traceIdBytes = obj.getUniqueId().getBytes(StandardCharsets.UTF_8);\r\n        byte[] paddedTraceId = new byte[16];\r\n        System.arraycopy(traceIdBytes, 0, paddedTraceId, 16 - Math.min(traceIdBytes.length, 16), Math.min(traceIdBytes.length, 16));\r\n\r\n        byte[] spanIdBytes = (""span-"" + obj.getStep()).getBytes(StandardCharsets.UTF_8);\r\n        byte[] paddedSpanId = new byte[8];\r\n        System.arraycopy(spanIdBytes, 0, paddedSpanId, 8 - Math.min(spanIdBytes.length, 8), Math.min(spanIdBytes.length, 8));\r\n\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                TraceId.fromBytes(paddedTraceId),\r\n                SpanId.fromBytes(paddedSpanId),\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span wrappedSpan = Span.wrap(spanContext);\r\n        Context otelContext = Context.root().with(wrappedSpan);\r\n\r\n        Span span = tracer.spanBuilder(""Step1"")\r\n                .setParent(otelContext)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                Thread.sleep(100);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }).whenComplete((res, ex) -> {\r\n            if (ex != null) {\r\n                span.recordException(ex);\r\n            }\r\n            span.end();\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.*;\r\n\r\nclass LRUCache {\r\n    int capacity;\r\n    Map<Integer, Integer> map;\r\n    Queue<Integer> queue;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        this.map = new HashMap<>();\r\n        this.queue = new LinkedList<>();\r\n    }\r\n    \r\n    public int get(int key) {\r\n        if (map.containsKey(key)) {\r\n            queue.remove(key);\r\n            queue.add(key);\r\n            return map.get(key);\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            queue.remove(key);\r\n        } else if (queue.size() >= capacity) {\r\n            int oldest = queue.poll();\r\n            map.remove(oldest);\r\n        }\r\n        queue.add(key);\r\n        map.put(key, value);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JRException;\r\nimport net.sf.jasperreports.engine.JasperCompileManager;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.JasperExportManager;\r\n\r\nimport java.awt.Image;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class S3JasperReport {\r\n    public static void main(String[] args) throws JRException, IOException {\r\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\r\n        String bucketName = ""your-bucket"";\r\n        String key = ""image_name.jpg"";\r\n\r\n        S3Object s3Object = s3Client.getObject(bucketName, key);\r\n        Image image = ImageIO.read(new ByteArrayInputStream(s3Object.getObjectContent().readAllBytes()));\r\n\r\n        Map<String, Object> params = new HashMap<>();\r\n        params.put(""imageParam"", image);\r\n\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(""report_template.jrxml"");\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params);\r\n\r\n        JasperExportManager.exportReportToPdfFile(jasperPrint, ""output.pdf"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.awt.*;  \r\nimport java.awt.event.*;\r\nimport javax.swing.*;  \r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n    \r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n    \r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, 75, 75);\r\n    }\r\n    \r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n    \r\n    @Override\r\n    protected void paintComponent(Graphics g){\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(x, y, 75, 75);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n    \r\n    private void updatePosition(){\r\n        if (leftPressed) x = Math.max(x - MOVE_AMOUNT, 0);\r\n        if (rightPressed) x = Math.min(x + MOVE_AMOUNT, getWidth() - 75);\r\n        if (upPressed) y = Math.max(y - MOVE_AMOUNT, 0);\r\n        if (downPressed) y = Math.min(y + MOVE_AMOUNT, getHeight() - 75);\r\n    }\r\n    \r\n    @Override\r\n    public void keyPressed(KeyEvent e){\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private final int DOT_SIZE = 20;\r\n    private final int FALL_SPEED = 2;\r\n    private Timer timer;\r\n    \r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        x = (int) (Math.random() * 480);\r\n        y = 0;\r\n        timer = new Timer(20, this);\r\n        timer.start();\r\n    }\r\n    \r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e){\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 480);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args){\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame();\r\n            frame.setTitle(""Image Display"");\r\n            frame.setSize(500, 500);\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            \r\n            Surface surface = new Surface();\r\n            BlueDot blueDot = new BlueDot();\r\n            \r\n            frame.setLayout(null);\r\n            surface.setBounds(0, 0, 500, 500);\r\n            blueDot.setBounds(0, 0, 500, 500);\r\n            \r\n            frame.add(surface);\r\n            frame.add(blueDot);\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                             (currentValue >> 32) & 0xFFFF, \r\n                             (currentValue >> 16) & 0xFFF, \r\n                             currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        spinner.setEditable(true);\r\n        \r\n        BigDecimal min = new BigDecimal(""-20.00"");\r\n        BigDecimal max = new BigDecimal(""20.00"");\r\n        BigDecimal step = new BigDecimal(""0.25"");\r\n\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            private final SimpleObjectProperty<BigDecimal> value = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n\r\n            {\r\n                setConverter(new StringConverter<BigDecimal>() {\r\n                    @Override\r\n                    public String toString(BigDecimal value) {\r\n                        if (value == null) return ""+0,00"";\r\n                        return (value.compareTo(BigDecimal.ZERO) >= 0 ? ""+"" : """") + value.setScale(2).toPlainString().replace(""."", "","");\r\n                    }\r\n\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            return new BigDecimal(string.replace("","", "".""));\r\n                        } catch (NumberFormatException e) {\r\n                            return BigDecimal.ZERO;\r\n                        }\r\n                    }\r\n                });\r\n                setValue(BigDecimal.ZERO);\r\n            }\r\n\r\n            @Override\r\n            public void decrement(int steps) {\r\n                BigDecimal newValue = getValue().subtract(step.multiply(new BigDecimal(steps)));\r\n                if (newValue.compareTo(min) >= 0) setValue(newValue);\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                BigDecimal newValue = getValue().add(step.multiply(new BigDecimal(steps)));\r\n                if (newValue.compareTo(max) <= 0) setValue(newValue);\r\n            }\r\n        };\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        Pattern validPattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validPattern.matcher(newText).matches()) {\r\n                try {\r\n                    BigDecimal newValue = new BigDecimal(newText.replace("","", "".""));\r\n                    if (newValue.remainder(step).compareTo(BigDecimal.ZERO) == 0 && newValue.compareTo(min) >= 0 && newValue.compareTo(max) <= 0) {\r\n                        return c;\r\n                    }\r\n                } catch (NumberFormatException ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(valueFactory.getConverter(), BigDecimal.ZERO, filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().bindBidirectional(textFormatter.valueProperty());\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Custom Spinner"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UserDataListenerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>(stage.getUserData());\r\n        \r\n        stage.setUserData(""InitialData"");\r\n\r\n        userDataProperty.addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(""New userData: "" + newValue);\r\n        });\r\n\r\n        stage.setUserData(""Test1"");\r\n        userDataProperty.set(stage.getUserData());\r\n\r\n        stage.setUserData(""Test2"");\r\n        userDataProperty.set(stage.getUserData());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class ReactiveExample {\r\n    public static void main(String[] args) {\r\n        List<A> list = List.of(new A(""one""), new A(""two""));\r\n        \r\n        Map<String, String> result = Flux.fromIterable(list)\r\n                .flatMap(a -> functionReturningMonoOfC(a)\r\n                        .map(C::url)\r\n                        .map(url -> Map.entry(a.getName(), url))\r\n                )\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n    }\r\n    \r\n    static Mono<C> functionReturningMonoOfC(A a) {\r\n        return Mono.just(new C(""http://example.com/"" + a.getName()));\r\n    }\r\n\r\n    static class A {\r\n        private final String name;\r\n        A(String name) { this.name = name; }\r\n        String getName() { return name; }\r\n    }\r\n\r\n    static class C {\r\n        private final String url;\r\n        C(String url) { this.url = url; }\r\n        String url() { return url; }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.cert.CertificateException;\r\n\r\npublic class RedisSSLConfig {\r\n\r\n    public void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""my_cert""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo""));\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String alias)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream fis = new FileInputStream(userCertPath)) {\r\n            keyStore.load(fis, userCertPassword.toCharArray());\r\n        }\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream fis = new FileInputStream(caCertPath)) {\r\n            trustStore.load(fis, caCertPassword.toCharArray());\r\n        }\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        X509KeyManager defaultKeyManager = (X509KeyManager) keyManagerFactory.getKeyManagers()[0];\r\n        X509KeyManager customKeyManager = new CustomKeyManager(defaultKeyManager, alias);\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLSv1.2"");\r\n        sslContext.init(new KeyManager[]{customKeyManager}, trustManagerFactory.getTrustManagers(), new SecureRandom());\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n\r\n    private static class CustomKeyManager implements X509KeyManager {\r\n        private final X509KeyManager baseKeyManager;\r\n        private final String alias;\r\n\r\n        public CustomKeyManager(X509KeyManager baseKeyManager, String alias) {\r\n            this.baseKeyManager = baseKeyManager;\r\n            this.alias = alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n            return alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n            return baseKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n        }\r\n\r\n        @Override\r\n        public X509Certificate[] getCertificateChain(String alias) {\r\n            return baseKeyManager.getCertificateChain(alias);\r\n        }\r\n\r\n        @Override\r\n        public PrivateKey getPrivateKey(String alias) {\r\n            return baseKeyManager.getPrivateKey(alias);\r\n        }\r\n\r\n        @Override\r\n        public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n            return baseKeyManager.getClientAliases(keyType, issuers);\r\n        }\r\n\r\n        @Override\r\n        public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n            return baseKeyManager.getServerAliases(keyType, issuers);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class MyMethodVisitor extends MethodVisitor {\r\n\r\n    private final String classAndMethodName;\r\n\r\n    public MyMethodVisitor(int api, MethodVisitor mv, String classAndMethodName) {\r\n        super(api, mv);\r\n        this.classAndMethodName = classAndMethodName;\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n        \r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitLdcInsn(""_"" + classAndMethodName + ""_"");\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_2);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\n        super.visitLineNumber(line, start);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.*;\r\n\r\npublic class Task implements Callable<Boolean> {\r\n\r\n    private final ReportClient client;\r\n\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public Boolean call() {\r\n        final var uuid = client.createDocument(documentId);\r\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n        CompletableFuture<Boolean> future = new CompletableFuture<>();\r\n\r\n        Runnable checkStatus = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                GetStatusResponse status = client.getStatus(uuid);\r\n                if (!Status.PENDING.equals(status.status())) {\r\n                    future.complete(client.getReport(uuid) != null);\r\n                }\r\n            }\r\n        };\r\n\r\n        scheduler.scheduleAtFixedRate(checkStatus, 0, 10, TimeUnit.SECONDS);\r\n        try {\r\n            return future.get();\r\n        } catch (Exception e) {\r\n            return Boolean.FALSE;\r\n        } finally {\r\n            scheduler.shutdown();\r\n        }\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    private static final ExecutorService SERVICE = Executors.newFixedThreadPool(8);\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        List<Callable<Boolean>> callableTasks = new ArrayList<>();\r\n        ReportClient client = new ReportClient();\r\n        \r\n        for (int i = 0; i <= 100; i++) {  \r\n            callableTasks.add(new Task(client));\r\n        }\r\n\r\n        SERVICE.invokeAll(callableTasks);\r\n        SERVICE.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.fasterxml.jackson.core.JsonGenerator;\r\nimport com.fasterxml.jackson.databind.SerializerProvider;\r\nimport com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\r\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer;\r\nimport java.io.IOException;\r\nimport java.util.Iterator;\r\n\r\npublic class ItemSerializer extends StdSerializer<Item> {\r\n\r\n    public ItemSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public ItemSerializer(Class<Item> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(Item item, JsonGenerator gen, SerializerProvider provider) throws IOException {\r\n        ToXmlGenerator xmlGen = (ToXmlGenerator) gen;\r\n        xmlGen.writeStartObject();\r\n        \r\n        xmlGen.writeStringField(""SNO"", item.getSNo());\r\n        xmlGen.writeNumberField(""Weight"", item.getWeight());\r\n\r\n        Iterator<String> aIter = item.getAList().iterator();\r\n        Iterator<String> bIter = item.getBList().iterator();\r\n\r\n        while (aIter.hasNext() || bIter.hasNext()) {\r\n            if (aIter.hasNext()) xmlGen.writeStringField(""A"", aIter.next());\r\n            if (bIter.hasNext()) xmlGen.writeStringField(""B"", bIter.next());\r\n        }\r\n\r\n        xmlGen.writeEndObject();\r\n    }\r\n}\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\r\n\r\nimport java.util.List;\r\n\r\n@JacksonXmlRootElement(localName = ""Item"")\r\n@JsonSerialize(using = ItemSerializer.class)\r\npublic class Item {\r\n    \r\n    @JacksonXmlProperty(localName = ""SNO"")\r\n    private String sNo;\r\n\r\n    @JacksonXmlProperty(localName = ""Weight"")\r\n    private Float weight;\r\n\r\n    private List<String> aList;\r\n    private List<String> bList;\r\n\r\n    public String getSNo() { return sNo; }\r\n    public Float getWeight() { return weight; }\r\n    public List<String> getAList() { return aList; }\r\n    public List<String> getBList() { return bList; }\r\n\r\n    public void setSNo(String sNo) { this.sNo = sNo; }\r\n    public void setWeight(Float weight) { this.weight = weight; }\r\n    public void setAList(List<String> aList) { this.aList = aList; }\r\n    public void setBList(List<String> bList) { this.bList = bList; }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public String[] getTransactionsList() {\r\n        if (transactionsList == null || !transactionsList.isArray()) {\r\n            return new String[0];\r\n        }\r\n        String[] result = new String[transactionsList.size()];\r\n        for (int i = 0; i < transactionsList.size(); i++) {\r\n            result[i] = transactionsList.get(i).toString();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{ \""payLoad\"": [{ \""id\"": 1, \""userName\"": null, \""arName\"": \""A1\"", \""areas\"": [] }, { \""id\"": 2, \""userName\"": \""alpha2\"", \""arName\"": \""A2\"", \""areas\"": [] }], \""count\"": 2, \""respCode\"": 200 }"";\r\n        \r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n\r\n        for (String item : responseRcvd.getTransactionsList()) {\r\n            System.out.println(item);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private final StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException, ParseException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn(""2024-03-12T15:30:00Z"");\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyString() throws IOException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(mockParser, mockContext));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\nimport org.openqa.selenium.logging.LoggingPreferences;\r\n\r\nimport java.util.logging.Level;\r\n\r\npublic class MainExample {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        LoggingPreferences logs = new LoggingPreferences();\r\n        logs.enable(LogType.BROWSER, Level.ALL);\r\n        options.setCapability(""goog:loggingPrefs"", logs);\r\n\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(""https://www.google.com"");\r\n\r\n        try {\r\n            Thread.sleep(2000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        LogEntries entries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : entries) {\r\n            System.out.println(entry.getLevel() + "": "" + entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," class SecurityConfig {\r\n\r\n    @Value(""${security.jwt.secret}"")\r\n    private String jwtSecret;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n        http.exceptionHandling(exceptions -> exceptions.defaultAuthenticationEntryPointFor(\r\n                        new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n                .oauth2ResourceServer(resourceServer -> resourceServer.jwt(Customizer.withDefaults()));\r\n\r\n        http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(\r\n                        authorize -> authorize.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n                .formLogin(formLogin -> formLogin.loginPage(""/login"").permitAll())\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\n        http.csrf(csrf -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n                .keyID(UUID.randomUUID().toString()) // Should match in decoder\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                System.out.println(""No keys found matching selection criteria!"");\r\n            } else {\r\n                System.out.println(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        NimbusJwtDecoder decoder = NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n        decoder.setJwtValidator(JwtValidators.createDefaultWithIssuer(""http://localhost:8080"")); \r\n        return decoder;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    private String name;\r\n    private String motive;\r\n\r\n    public Company(@Value(""Adventure of War"") String name, @Value(""A place for War"") String motive) {\r\n        this.name = name;\r\n        this.motive = motive;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import io.smallrye.mutiny.Multi;\r\nimport io.smallrye.mutiny.subscription.Cancellable;\r\nimport java.time.Duration;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\npublic class PollingService {\r\n    public static void main(String[] args) {\r\n        AtomicBoolean stopPolling = new AtomicBoolean(false);\r\n\r\n        Cancellable cancellable = Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n            .onItem().transformToMultiAndMerge(tick -> {\r\n                System.out.println(""Tick: "" + tick);\r\n                return Multi.createFrom().<Transaction>emitter(emitter -> {\r\n                    if (stopPolling.get()) {\r\n                        emitter.complete();\r\n                        return;\r\n                    }\r\n                    service.getTransactions().toMulti()\r\n                        .onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n                        .subscribe().with(transaction -> {\r\n                            if (!verification.isOngoing()) {\r\n                                emitter.fail(new TransactionVerificationException());\r\n                            } else {\r\n                                boolean transactionFound = transaction.getAmount().stream()\r\n                                    .anyMatch(amount -> ""test"".equals(amount.getQuantity()));\r\n                                if (transactionFound) {\r\n                                    emitter.emit(transaction);\r\n                                    stopPolling.set(true);\r\n                                    emitter.complete();\r\n                                }\r\n                            }\r\n                        });\r\n                });\r\n            })\r\n            .subscribe()\r\n            .with(transaction -> log.info(transaction), Throwable::printStackTrace);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.security.SecureRandom;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\n    public static void main(String[] args) throws Exception {\r\n        byte[] keyValue = Files.readAllBytes(Paths.get(""/home/debashishd/Downloads/s_key""));\r\n\r\n        byte[] keyBytes = new byte[32];\r\n        System.arraycopy(keyValue, 0, keyBytes, 0, Math.min(keyValue.length, 32));\r\n\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n\r\n        byte[] iv = new byte[16];\r\n        new SecureRandom().nextBytes(iv);\r\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\r\n\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);\r\n        String testMessage = ""Hello this is Roxane"";\r\n        byte[] encryptedBytes = cipher.doFinal(testMessage.getBytes(StandardCharsets.UTF_8));\r\n        String encryptedValue = Base64.getEncoder().encodeToString(encryptedBytes);\r\n        String ivString = Base64.getEncoder().encodeToString(iv);\r\n\r\n        System.out.println(""Encrypted value: "" + encryptedValue);\r\n\r\n        Cipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(Base64.getDecoder().decode(ivString)));\r\n        byte[] decryptedBytes = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue));\r\n        String decryptedResult = new String(decryptedBytes, StandardCharsets.UTF_8);\r\n\r\n        System.out.println(""Decrypted value: "" + decryptedResult);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n        \r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n\r\n        spinnerMin.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            int newMax = newValue.intValue();\r\n            if (newMax > spinnerMax.getValue()) {\r\n                spinnerMax.getValueFactory().setValue(newMax);\r\n            }\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newValue.intValue(), 6, spinnerMax.getValue()));\r\n            checkButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            int newMin = newValue.intValue();\r\n            if (newMin < spinnerMin.getValue()) {\r\n                spinnerMin.getValueFactory().setValue(newMin);\r\n            }\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newValue.intValue(), spinnerMin.getValue()));\r\n            checkButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(spinnerMin, spinnerMax);\r\n\r\n        Scene scene = new Scene(root, 300, 250);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void checkButtons(Spinner<Integer> spinnerMin, Spinner<Integer> spinnerMax) {\r\n        if (spinnerMin.getValue() == spinnerMax.getValue()) {\r\n            spinnerMin.getEditor().setStyle(""-fx-background-color: lightgray;"");\r\n            spinnerMax.getEditor().setStyle(""-fx-background-color: lightgray;"");\r\n        } else {\r\n            spinnerMin.getEditor().setStyle(""-fx-background-color: white;"");\r\n            spinnerMax.getEditor().setStyle(""-fx-background-color: white;"");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n               .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n    pipeline.run();\r\n}\r\n\r\n@Test\r\npublic void testBatchProcessingWithTransactionExecutedOver1000() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingMoreThan1000Records.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n               .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n    pipeline.run();\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.example.demo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            Parent root = FXMLLoader.load(this.getClass().getResource(""test.fxml""));\r\n            Scene scene = new Scene(root);\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\npackage com.example.demo;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.ComboBox;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Test implements Initializable {\r\n    @FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(""Back-end"", ""Front-end"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(""Java"", ""PHP"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(""HTML"", ""CSS"", ""Javascript"");\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n        DevelopmentType.setValue(""Front-end""); // Default value for testing\r\n        LanguageProgramming.setPromptText(""Select a language programming"");\r\n    }\r\n\r\n    public void DevelopmentTypeEvent(){\r\n        if(DevelopmentType.getValue().equals(""Back-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.example.usb;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.hardware.usb.UsbDevice;\r\nimport android.hardware.usb.UsbManager;\r\nimport android.util.Log;\r\n\r\npublic class NativeUsbService {\r\n\r\n    private static final String TAG = ""NativeUsbService"";\r\n    private static final String ACTION_USB_PERMISSION = ""com.android.example.USB_PERMISSION"";\r\n    private UsbDevice usbDevice;\r\n    private UsbManager usbManager;\r\n    private UsbConnection connection;\r\n    private UsbInterface usbDeviceInterface;\r\n    private UsbEndpoint endpointIn;\r\n    private UsbEndpoint endpointOut;\r\n\r\n    public NativeUsbService(Context context) {\r\n        usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n\r\n        IntentFilter filter = new IntentFilter();\r\n        filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n        filter.addAction(ACTION_USB_PERMISSION);\r\n\r\n        context.registerReceiver(usbReceiver, filter);\r\n    }\r\n\r\n    private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getAction();\r\n            if (action.equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {\r\n                synchronized (this) {\r\n                    UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                    if (device != null) {\r\n                        usbDevice = device;\r\n                        // I'm not sure if permission is automatically granted here, so let's check\r\n                        if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                            Log.d(TAG, ""onReceive: Permission granted for device"");\r\n                        } else {\r\n                            // Permission not granted, might need to request it\r\n                            Log.d(TAG, ""onReceive: Permission not granted for device"");\r\n                            // Attempt to request permission (if needed)\r\n                            Intent permissionIntent = new Intent(ACTION_USB_PERMISSION);\r\n                            usbManager.requestPermission(device, permissionIntent);\r\n                        }\r\n                    } else {\r\n                        Log.d(TAG, ""onReceive: DEVICE WAS ATTACHED AND WAS NULL :("");\r\n                    }\r\n                }\r\n            } else if (action.equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {\r\n                Log.d(TAG, ""onReceive: Device was detached!"");\r\n                if (connection != null) {\r\n                    connection.releaseInterface(usbDeviceInterface);\r\n                    connection.close();\r\n                }\r\n                connection = null;\r\n                usbDevice = null;\r\n                endpointIn = null;\r\n                endpointOut = null;\r\n            } else if (action.equals(ACTION_USB_PERMISSION)) {\r\n                if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                    Log.d(TAG, ""onReceive: USB permission granted for device"");\r\n                    // Now that permission is granted, establish a connection with the device\r\n                    if (usbDevice != null) {\r\n                        // Proceed to setup the connection or handle device communication\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, ""onReceive: USB permission denied for device"");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Ensure to unregister the receiver when it's no longer needed\r\n    public void unregisterReceiver(Context context) {\r\n        context.unregisterReceiver(usbReceiver);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    public UserController(final UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @PostMapping(""/users"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<UserDto> create(final @RequestBody @Valid CreateUserCommand command) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(userService.create(command));\r\n    }\r\n}\r\n\r\n"
0,1,misclassified_in_Test_8.csv.csv,"private <T> void positionEntity(Class<T> entityClass, Object... params) {\r\n    int x;\r\n    int y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = entityClass.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class).newInstance(x, y, params);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate void positionMagician() {\r\n    positionEntity(Magician.class, player, field, this, sizeX, sizeY);\r\n}\r\n\r\nprivate void positionGoblin() {\r\n    positionEntity(Goblin.class, player, field, this, sizeX, sizeY);\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Task implements Runnable {\r\n    private final String x;\r\n    private static final Map<String, Lock> locks = new HashMap<>();\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        synchronized (locks) {\r\n            if (!locks.containsKey(key)) {\r\n                locks.put(key, new ReentrantLock());\r\n            }\r\n            return locks.get(key);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock l = getLock(x);\r\n        l.lock();\r\n        try {\r\n            System.out.println(x);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException ex) {\r\n            Logger.getLogger(Task.class.getName()).log(Level.SEVERE, null, ex);\r\n        } finally {\r\n            l.unlock();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\r\n        messages.anyMessage().authenticated();\r\n    }\r\n}\r\n\r\n@Configuration\r\n@EnableWebSecurity(debug = true)\r\npublic class SecurityConfig {\r\n\r\n    @Autowired\r\n    private JwtFilter jwtFilter;\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n            .addFilterBefore(jwtFilter, BasicAuthenticationFilter.class)\r\n            .cors(AbstractHttpConfigurer::disable)\r\n            .csrf(csrf -> csrf.ignoringRequestMatchers(""/ws/**""))\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(""/authenticate"").permitAll()\r\n                .requestMatchers(""/createchatroom"").authenticated()\r\n                .requestMatchers(""/public/**"").permitAll()\r\n                .requestMatchers(""/private/**"").permitAll()\r\n                .requestMatchers(""/ws/**"").authenticated()\r\n                .requestMatchers(""/register"").permitAll()\r\n                .requestMatchers(""/csrf"").authenticated()\r\n                .requestMatchers(""/addEmployeeToFavorites"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name())\r\n                .requestMatchers(""/addChatRoomToFavorites"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name())\r\n                .requestMatchers(""/home"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name()))\r\n            .build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"(""/sides"")\r\npublic class SidesController {\r\n\r\n    @PostMapping(\r\n        value = ""/Request"",\r\n        consumes = MediaType.APPLICATION_XML_VALUE,\r\n        produces = MediaType.APPLICATION_XML_VALUE)\r\n    public Mono<ResponseModel> getSsi(@RequestBody Mono<RequestModel> requestModelMono) {\r\n        return requestModelMono.map(request -> {\r\n            ResponseModel response = new ResponseModel();\r\n            response.setMessage(""Processed request for: "" + request.getId());\r\n            return response;\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package br.inf.portalfiscal.mdfe.wsdl.mdferecepcaosinc;\r\n\r\nimport javax.xml.namespace.QName;\r\nimport javax.xml.ws.Service;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\n\r\npublic class MDFeRecepcaoSincClient {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            URL wsdlURL = new URL(""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx?wsdl"");\r\n            QName serviceName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSinc"");\r\n            Service service = Service.create(wsdlURL, serviceName);\r\n\r\n            QName portName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSincSoap12"");\r\n            MDFeRecepcaoSincSoap12 port = service.getPort(portName, MDFeRecepcaoSincSoap12.class);\r\n\r\n            ObjectFactory of = new ObjectFactory();\r\n            JAXBElement<String> jaxb = of.createMdfeDadosMsg(""<mdfeDadosMsg>...</mdfeDadosMsg>"");\r\n\r\n            MdfeRecepcaoResult result = port.mdfeRecepcao(jaxb.getValue());\r\n            System.out.println(result.getContent());\r\n\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.example.pdfgenerator;\r\n\r\nimport com.lowagie.text.DocumentException;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\n\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.io.*;\r\n\r\npublic class PdfGenerator {\r\n\r\n    public static void main(String[] args) throws IOException, DocumentException {\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""    <style>\n"" +\r\n                ""       @font-face {\n"" +\r\n                ""           font-family: 'Arial';\n"" +\r\n                ""           src: url('file:///C:/Windows/Fonts/arial.ttf');\n"" +\r\n                ""       }\n"" +\r\n                ""       body { font-family: 'Arial', sans-serif; }\n"" +\r\n                ""    </style>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>?????????????</h3>\n"" +\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        renderer.getFontResolver().addFont(""C:/Windows/Fonts/arial.ttf"", true);\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        outputStream.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\npublic class CoordinateController {\r\n\r\n    @PostMapping(""/hole/coordinate"")\r\n    @ResponseBody\r\n    public String saveCoordinate(@RequestBody Map<String, Object> params) {\r\n        Object coordinateObj = params.get(""coordinate"");\r\n        List<List<Integer>> coordinateList = (List<List<Integer>>) coordinateObj;\r\n        \r\n        int[][] coordinates = new int[coordinateList.size()][2];\r\n        for (int i = 0; i < coordinateList.size(); i++) {\r\n            coordinates[i][0] = coordinateList.get(i).get(0);\r\n            coordinates[i][1] = coordinateList.get(i).get(1);\r\n        }\r\n\r\n        for (int[] row : coordinates) {\r\n            System.out.println(Arrays.toString(row));\r\n        }\r\n\r\n        return ""success"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.Random;\r\n\r\npublic class CardShuffler {\r\n    public static void shuffleDeck(Card[] deck) {\r\n        Random random = new Random();\r\n        for (int i = deck.length - 1; i > 0; i--) {\r\n            int j = random.nextInt(i + 1);\r\n            Card temp = deck[i];\r\n            deck[i] = deck[j];\r\n            deck[j] = temp;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Card[] deck = new Card[52];\r\n        for (int i = 0; i < deck.length; i++) {\r\n            deck[i] = new Card(""Card "" + (i + 1));\r\n        }\r\n\r\n        shuffleDeck(deck);\r\n\r\n        for (Card card : deck) {\r\n            System.out.println(card.getName());\r\n        }\r\n    }\r\n}\r\n\r\nclass Card {\r\n    private String name;\r\n\r\n    public Card(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.junit.jupiter.api.extension.*;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\npublic class JUnit5Suite {\r\n    public static final JUnit5Server MY_SERVER = new JUnit5Server();\r\n    \r\n    @BeforeAll\r\n    public static void setup() {\r\n        MY_SERVER.beforeAll(null);\r\n    }\r\n\r\n    @AfterAll\r\n    public static void teardown() {\r\n        MY_SERVER.afterAll(null);\r\n    }\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n    @Override\r\n    public void beforeAll(ExtensionContext context) throws Exception {\r\n        System.out.println(""Starting server..."");\r\n    }\r\n\r\n    @Override\r\n    public void afterAll(ExtensionContext context) throws Exception {\r\n        System.out.println(""Stopping server..."");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n        .flatMap(analysis -> {\r\n            analysis.setResults(results);\r\n            return computeSCARepository.save(analysis);\r\n        })\r\n        .then();\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false);\r\n        marshaller.setMarshallerProperties(Collections.singletonMap(\r\n            Marshaller.JAXB_ENCODING, ""UTF-8""\r\n        ));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    byte[] encodedData = Base64.getEncoder().encode(documentData);\r\n    binaryData.setBlob(new DataHandler(new ByteArrayDataSource(encodedData, ""application/pdf"")));\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(\r\n        MyServiceProperties properties,\r\n        Jaxb2Marshaller marshaller\r\n    ) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Ov\r\n"
0,1,misclassified_in_Test_8.csv.csv,"btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        try {\r\n            value1 = Long.parseLong(txtfirst.getText().toString());\r\n            value2 = Long.parseLong(txtsecond.getText().toString());\r\n\r\n            if (value1 > value2) {\r\n                Toast.makeText(getApplicationContext(), ""Invalid range"", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            list.clear();\r\n            for (long i = value1; i <= value2; i++) {\r\n                list.add("""" + i);\r\n            }\r\n            arrayAdapter.notifyDataSetChanged();\r\n            li.setAdapter(arrayAdapter);\r\n\r\n        } catch (NumberFormatException e) {\r\n            Toast.makeText(getApplicationContext(), ""Invalid input"", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n});\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javax.lang.model.element.Element;\r\nimport javax.lang.model.element.PackageElement;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport com.sun.source.doctree.DocTree;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.SimpleDocTreeVisitor;\r\nimport java.util.List;\r\n\r\npublic class JavadocLinkProcessor {\r\n\r\n    private final Elements elementUtils;\r\n    private final DocTrees docTrees;\r\n\r\n    public JavadocLinkProcessor(Elements elementUtils, DocTrees docTrees) {\r\n        this.elementUtils = elementUtils;\r\n        this.docTrees = docTrees;\r\n    }\r\n\r\n    public void processLinks(Element element) {\r\n        var docCommentTree = docTrees.getDocCommentTree(element);\r\n        if (docCommentTree == null) return;\r\n\r\n        docCommentTree.accept(new SimpleDocTreeVisitor<Void, Void>() {\r\n            @Override\r\n            public Void visitLink(LinkTree node, Void unused) {\r\n                String reference = node.getReference().getSignature();\r\n                TypeElement typeElement = resolveFullyQualifiedName(reference, element);\r\n                if (typeElement != null) {\r\n                    System.out.println(""Fully qualified name: "" + typeElement.getQualifiedName());\r\n                }\r\n                return null;\r\n            }\r\n        }, null);\r\n    }\r\n\r\n    private TypeElement resolveFullyQualifiedName(String reference, Element context) {\r\n        if (reference.contains(""."")) {\r\n            return elementUtils.getTypeElement(reference);\r\n        }\r\n\r\n        PackageElement pkg = elementUtils.getPackageOf(context);\r\n        TypeElement withinPackage = elementUtils.getTypeElement(pkg.getQualifiedName() + ""."" + reference);\r\n        if (withinPackage != null) return withinPackage;\r\n\r\n        List<? extends Element> imports = context.getEnclosingElement().getEnclosedElements();\r\n        for (Element imp : imports) {\r\n            if (imp instanceof TypeElement && imp.getSimpleName().contentEquals(reference)) {\r\n                return (TypeElement) imp;\r\n            }\r\n        }\r\n        \r\n        return elementUtils.getTypeElement(""java.lang."" + reference);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"interface Show1 {\r\n    default void display() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (nameBinding != null) {\r\n                nameBinding.dispose();\r\n                nameBinding = null;\r\n            }\r\n            if (input.length() >= 2) {\r\n                ObservableList<String> sourceList = input.startsWith(""A"") ? names1 : names2;\r\n                nameBinding = TextFields.bindAutoCompletion(textField, sourceList);\r\n                nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\n\r\npublic class SignatureVerifier {\r\n\r\n    public static boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\n        String messageHash = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\n        byte[] messageHashBytes = Numeric.hexStringToByteArray(Numeric.toHexString(messageHash.getBytes()));\r\n\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) return false;\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) v += 27;\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v, \r\n                Arrays.copyOfRange(signatureBytes, 0, 32), \r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger publicKey;\r\n        try {\r\n            publicKey = Sign.signedMessageToKey(messageHashBytes, signatureData);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n\r\n        String recoveredWalletId = ""0x"" + Keys.getAddress(publicKey);\r\n        return recoveredWalletId.equalsIgnoreCase(publicWalletId);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String publicWalletId = ""0x123456789abcdef..."";\r\n        String nonce = ""random_nonce_value"";\r\n        String signature = ""0xabcdef123456..."";\r\n        \r\n        System.out.println(verifySignature(publicWalletId, nonce, signature));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.DoubleSummaryStatistics;\r\nimport java.util.List;\r\nimport java.util.function.ToDoubleFunction;\r\n\r\npublic class AggregationExample {\r\n\r\n    public enum AggregationType {\r\n        MIN(DoubleSummaryStatistics::getMin),\r\n        MAX(DoubleSummaryStatistics::getMax),\r\n        AVERAGE(DoubleSummaryStatistics::getAverage);\r\n\r\n        private final ToDoubleFunction<DoubleSummaryStatistics> function;\r\n\r\n        AggregationType(ToDoubleFunction<DoubleSummaryStatistics> function) {\r\n            this.function = function;\r\n        }\r\n\r\n        public double apply(DoubleSummaryStatistics stats) {\r\n            return function.applyAsDouble(stats);\r\n        }\r\n    }\r\n\r\n    private List<Double> provides;\r\n\r\n    public Float someFunction(AggregationType type) {\r\n        DoubleSummaryStatistics stats = provides.stream()\r\n                .mapToDouble(this::someFunc)\r\n                .summaryStatistics();\r\n        return (float) type.apply(stats);\r\n    }\r\n\r\n    private double someFunc(double value) {\r\n        return value;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {\r\n    }\r\n\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<? extends BaseEvent<C, P>, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class CoreModulesCheck {\r\n    public static void main(String[] args) {\r\n        Set<String> coreModules = getCoreModules();\r\n        Set<String> allModules = new HashSet<>();\r\n\r\n        ModuleFinder.ofSystem().findAll().stream()\r\n                .map(ModuleReference::descriptor)\r\n                .map(m -> m.name())\r\n                .forEach(allModules::add);\r\n\r\n        System.out.println(""Core Modules:"");\r\n        coreModules.forEach(System.out::println);\r\n\r\n        System.out.println(""\nNon-Core Modules:"");\r\n        allModules.stream()\r\n                .filter(m -> !coreModules.contains(m))\r\n                .forEach(System.out::println);\r\n    }\r\n\r\n    private static Set<String> getCoreModules() {\r\n        Set<String> core = new HashSet<>();\r\n        core.add(""java.base"");\r\n        core.add(""java.compiler"");\r\n        core.add(""java.datatransfer"");\r\n        core.add(""java.desktop"");\r\n        core.add(""java.instrument"");\r\n        core.add(""java.logging"");\r\n        core.add(""java.management"");\r\n        core.add(""java.management.rmi"");\r\n        core.add(""java.naming"");\r\n        core.add(""java.net.http"");\r\n        core.add(""java.prefs"");\r\n        core.add(""java.rmi"");\r\n        core.add(""java.scripting"");\r\n        core.add(""java.se"");\r\n        core.add(""java.security.jgss"");\r\n        core.add(""java.security.sasl"");\r\n        core.add(""java.smartcardio"");\r\n        core.add(""java.sql"");\r\n        core.add(""java.sql.rowset"");\r\n        core.add(""java.transaction.xa"");\r\n        core.add(""java.xml"");\r\n        core.add(""java.xml.crypto"");\r\n        return core;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMyyyy"")\r\n                .toFormatter(Locale.of(""es"", ""ES""));\r\n\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", formatter);\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.Cursor;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setCursor(Cursor.NONE); \r\n\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Cursor Test"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.List;\r\n\r\npublic class ExcelFormulaTransformer {\r\n    public static void main(String[] args) {\r\n        try {\r\n            FileInputStream fis = new FileInputStream(new File(""example.xlsx""));\r\n            Workbook workbook = WorkbookFactory.create(fis);\r\n            String formula = ""IF(A2=A3,A4,A5)"";\r\n            String transformedFormula = transformFormula(formula, ""A6"", ""C6"", workbook);\r\n            System.out.println(""Transformed Formula: "" + transformedFormula);\r\n        } catch (Exception e) {\r\n            System.out.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static String transformFormula(String formula, String originalAddress, String destinationAddress, Workbook workbook) {\r\n        Ptg[] tokens = FormulaParser.parse(formula, (FormulaRenderingWorkbook) workbook, 0, 0);\r\n        for (Ptg token : tokens) {\r\n            if (token instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) token;\r\n                int rowOffset = parseRow(destinationAddress) - parseRow(originalAddress);\r\n                int colOffset = parseColumn(destinationAddress) - parseColumn(originalAddress);\r\n                ref.setRow(ref.getRow() + rowOffset);\r\n                ref.setColumn(ref.getColumn() + colOffset);\r\n            }\r\n        }\r\n        return FormulaParser.toFormulaString((FormulaRenderingWorkbook) workbook, tokens);\r\n    }\r\n\r\n    private static int parseColumn(String cell) {\r\n        int col = 0;\r\n        for (char ch : cell.toCharArray()) {\r\n            if (Character.isLetter(ch)) {\r\n                col = col * 26 + (ch - 'A' + 1);\r\n            }\r\n        }\r\n        return col - 1;\r\n    }\r\n\r\n    private static int parseRow(String cell) {\r\n        String num = cell.replaceAll(""\\D+"", """");\r\n        return num.isEmpty() ? -1 : Integer.parseInt(num) - 1;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFileExample {\r\n    public static void main(String[] args) {\r\n        try {\r\n            RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"");\r\n            raf.write(""123456789"".getBytes());\r\n            raf.seek(0);\r\n            raf.write(""hello"".getBytes());\r\n            raf.close();\r\n        } catch (Exception e) {\r\n            System.out.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class CollectionController implements Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n\r\n        authorDirectorColumn.setCellValueFactory(cellData -> {\r\n            LibraryItem item = cellData.getValue();\r\n            if (item instanceof Book) {\r\n                return new SimpleStringProperty(((Book) item).getAuthor());\r\n            } else if (item instanceof Movie) {\r\n                return new SimpleStringProperty(((Movie) item).getDirector());\r\n            }\r\n            return new SimpleStringProperty("""");\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import static org.mockito.Mockito.*;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class TestDbConfig {\r\n\r\n    @Bean(name = ""testDataSource"")\r\n    public DataSource testDataSource() throws SQLException {\r\n        DataSource originalDataSource = mock(DataSource.class);\r\n        Connection mockConnection = mock(Connection.class);\r\n\r\n        when(originalDataSource.getConnection()).thenAnswer(invocation -> {\r\n            if (Math.random() > 0.7) { \r\n                throw new SQLException(""Simulated connection issue"");\r\n            }\r\n            return mockConnection;\r\n        });\r\n\r\n        return originalDataSource;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\npublic class PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price existingPrice;\r\n    private PriceRequest priceRequest;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.initMocks(this);\r\n\r\n        priceUuid = UUID.randomUUID();\r\n        existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n\r\n        priceRequest = new PriceRequest();\r\n        priceRequest.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(any())).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO result = priceService.update(priceUuid, priceRequest);\r\n\r\n        assertNotNull(result);\r\n        assertEquals(150.0, result.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"(Task.Status.class)\r\n@MappedJdbcTypes(JdbcType.INTEGER)\r\npublic class TaskStatusTypeHandler extends BaseTypeHandler<Task.Status> {\r\n\r\n    @Override\r\n    public void setNonNullParameter(PreparedStatement ps, int i, Task.Status parameter, JdbcType jdbcType) throws SQLException {\r\n        ps.setInt(i, parameter.getId());\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(ResultSet rs, String columnName) throws SQLException {\r\n        int statusId = rs.getInt(columnName);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\r\n        int statusId = rs.getInt(columnIndex);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\r\n        int statusId = cs.getInt(columnIndex);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.CLSID;\r\nimport taskbar_test.gen.IID;\r\nimport taskbar_test.gen.ITaskbarList3;\r\nimport taskbar_test.gen.ITaskbarList3Vtbl;\r\nimport taskbar_test.gen.ShObjIdl_core_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class FxWinTaskbar extends Application {\r\n\r\n    public static final String GUID_FORMAT = ""{%s}"";\r\n    public static final String CLSID_CONST = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String IID_ITASKBAR_LIST_3 = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        var button = new javafx.scene.control.Button(""Click Me"");\r\n        button.setOnAction(e -> handleClick());\r\n\r\n        var root = new javafx.scene.layout.StackPane(button);\r\n        var scene = new javafx.scene.Scene(root, 320, 180);\r\n\r\n        stage.setTitle(""Taskbar Progress"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    void handleClick() {\r\n        long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newCachedThreadPool().submit(() -> {\r\n            try (var arena = Arena.ofConfined()) {\r\n                var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n                var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n                var clsid = CLSID.allocate(arena);\r\n                var iidTaskbarList3 = IID.allocate(arena);\r\n                var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n                MemorySegment extraAllocation = arena.allocate(8); // Unnecessary allocation\r\n\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.err.println(""Failed to initialize COM: "" + hr);\r\n                    return;\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n                hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""IIDFromString failed: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.out.println(""CoCreateInstance failed: "" + hr);\r\n                    return;\r\n                }\r\n\r\n                var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n                var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n                MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n                MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n                MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""HrInit failed: "" + hr);\r\n                }\r\n\r\n                MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed: "" + hr);\r\n                }\r\n\r\n                for (int i = 0; i <= 100; i += 20) { // Possible off-by-one error\r\n                    System.out.println(""Progress: "" + i);\r\n                    MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                    Thread.sleep(550); // Slightly inefficient delay\r\n                }\r\n\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.out.println(""SetProgressState reset failed: "" + hr);\r\n                }\r\n\r\n            } catch (Throwable ex) {\r\n                ex.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import android.content.ContentResolver;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Objects;\r\n\r\npublic void saveFileToStorage(String fileName, InputStream inputStream) {\r\n    OutputStream outputStream = null;\r\n    try {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            ContentResolver contentResolver = requireContext().getContentResolver();\r\n            ContentValues contentValues = new ContentValues();\r\n            contentValues.put(""_display_name"", fileName);\r\n            contentValues.put(""relative_path"", Environment.DIRECTORY_DOCUMENTS);\r\n            Uri fileUri = contentResolver.insert(Uri.parse(""content://media/external_primary/document""), contentValues);\r\n            if (fileUri != null) {\r\n                outputStream = contentResolver.openOutputStream(fileUri);\r\n                byte[] buffer = new byte[8192];\r\n                int length;\r\n                while ((length = inputStream.read(buffer)) != -1) {\r\n                    outputStream.write(buffer, 0, length);\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""FileSave"", ""Error saving file: "" + fileName, e);\r\n    } finally {\r\n        try {\r\n            if (outputStream != null) outputStream.close();\r\n            inputStream.close();\r\n        } catch (IOException ignored) {}\r\n    }\r\n}\r\n\r\npublic void copyDatabaseFiles() {\r\n    try {\r\n        String[] files = requireContext().getAssets().list(""database/test"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                InputStream in = requireContext().getAssets().open(""database/test/"" + filename);\r\n                saveFileToStorage(filename, in);\r\n            }\r\n        } else {\r\n            Log.e(""FileCopy"", ""No files found"");\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""FileCopy"", ""Error copying database files"", e);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.awt.Graphics;\r\nimport java.awt.Image;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.JPanel;\r\n\r\npublic class ScaledBackgroundPanel extends JPanel {\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        BufferedImage image = ApplicationImages.getImage();\r\n        if (image != null) {\r\n            float factorWidth = (float) getWidth() / 1280;\r\n            float factorHeight = (float) getHeight() / 859;\r\n            int width, height, x = 0, y = 0;\r\n\r\n            if (factorWidth < factorHeight) {\r\n                width = (int) (1280 * factorWidth);\r\n                height = (int) (859 * factorWidth);\r\n                y = (getHeight() - height) / 2;\r\n            } else {\r\n                width = (int) (1280 * factorHeight);\r\n                height = (int) (859 * factorHeight);\r\n                x = (getWidth() - width) / 2;\r\n            }\r\n\r\n            Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n            g.drawImage(scaledImage, x, y, this);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.stream.IntStream;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\nimport java.util.concurrent.TimeUnit;\r\nimport static java.text.MessageFormat.format;\r\n\r\npublic class VirtualThreadTest {\r\n    public static void main(String[] args) {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<? extends Future<String>> futures;\r\n        \r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                .mapToObj(Task::new)\r\n                .map(executorService::submit)\r\n                .toList();\r\n        }\r\n\r\n        for (Future<String> future : futures) {\r\n            try {\r\n                future.get();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(format(""The total time of execution was: {0} ms"", stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n    }\r\n}\r\n\r\nclass Task implements java.util.concurrent.Callable<String> {\r\n    private final int taskId;\r\n\r\n    public Task(int taskId) {\r\n        this.taskId = taskId;\r\n    }\r\n\r\n    @Override\r\n    public String call() {\r\n        System.out.println(format(""Task: {0} started"", taskId));\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        String result = null;\r\n\r\n        try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(format(""Task: {0} connection established"", taskId));\r\n            var statement = connection.createStatement();\r\n            System.out.println(format(""Task: {0} executes SQL statement"", taskId));\r\n            ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n\r\n            while (resultSet.next()) {\r\n                result = resultSet.getString(""output"");\r\n            }\r\n\r\n            statement.close();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(format(""Task: {0} completed in {1} ms"", taskId, stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n        return result;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.adobe.panpipe;\r\n\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T> {\r\n    TaskResult<T> make();\r\n}\r\n\r\nclass TaskResult<T> {\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String> {\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer> {\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static <T, U extends TaskResult<T>> List<U> run(List<? extends ITask<T>> tasks) {\r\n        List<U> results = tasks\r\n                .stream()\r\n                .map(task -> (U) task.make())\r\n                .collect(Collectors.toList());\r\n\r\n        return results;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WindowsCommandRunner {\r\n\r\n    private static List<String> runWindowsCommandAsRuntime(String command) {\r\n        List<String> out = new ArrayList<>();\r\n\r\n        String[] comm = {\r\n                ""C:\\Windows\\System32\\cmd.exe"",\r\n                ""/S"",\r\n                ""/K"",\r\n                ""\"""" + command + ""\"""",\r\n                ""&"",\r\n                ""exit""\r\n        };\r\n\r\n        System.out.println(""COMMAND: "" + String.join("" "", comm));\r\n\r\n        try {\r\n            Process p = Runtime.getRuntime().exec(comm);\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n            out = reader.lines().collect(Collectors.toList());\r\n\r\n            int exitVal = p.waitFor();\r\n            System.out.println(""Exited with error code "" + exitVal);\r\n            \r\n            p.destroy();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<String> output = runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\n        if (output != null) {\r\n            output.forEach(System.out::println);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Iterator;\r\nimport java.util.stream.Stream;\r\n\r\npublic class EmployeeStreamWriter {\r\n\r\n    private final EmployeeRepository empRepo;\r\n    private final EntityManager entityManager;\r\n\r\n    public EmployeeStreamWriter(EmployeeRepository empRepo, EntityManager entityManager) {\r\n        this.empRepo = empRepo;\r\n        this.entityManager = entityManager;\r\n    }\r\n\r\n    public void writeEmployees(HttpServletResponse response) {\r\n        try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n            response.setHeader(""Content-Type"", ""application/json"");\r\n            PrintWriter respWriter = response.getWriter();\r\n            Iterator<Employee> iterator = dataStream.iterator();\r\n\r\n            respWriter.write(""["");\r\n            if (iterator.hasNext()) {\r\n                Employee first = iterator.next();\r\n                respWriter.write(jsonSerialize(first));\r\n                entityManager.detach(first);\r\n            }\r\n            while (iterator.hasNext()) {\r\n                Employee data = iterator.next();\r\n                respWriter.write("","");\r\n                respWriter.write(jsonSerialize(data));\r\n                entityManager.detach(data);\r\n            }\r\n            respWriter.write(""]"");\r\n            respWriter.flush();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private String jsonSerialize(Employee employee) throws JsonProcessingException {\r\n        return ""{}""; // placeholder for actual serialization logic\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import com.opencsv.CSVParser;\r\nimport com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        CSVParser parser = new CSVParserBuilder().withSeparator('\t').build();\r\n        try (CSVReader reader = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(parser)\r\n                .build()) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + (line.length > 1 ? line[1] : """"));\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""path-to-tsv-file"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Component\r\npublic class UtilFactory {\r\n\r\n    @Autowired\r\n    private ApplicationContext context;\r\n\r\n    public Util getUtil(String type) {\r\n        if (""two"".equalsIgnoreCase(type)) {\r\n            return context.getBean(UtilTwo.class);\r\n        }\r\n        return context.getBean(UtilOne.class);\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n\r\n    private volatile Util util;\r\n\r\n    public void updateUtil(String type) {\r\n        this.util = utilFactory.getUtil(type);\r\n    }\r\n\r\n    public void useUtil() {\r\n        if (util == null) {\r\n            util = utilFactory.getUtil(""one"");\r\n        }\r\n        util.getClient();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class CircularSearch {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) {\r\n                return true;\r\n            } else if (mat[row][col] > num) {\r\n                col--;\r\n            } else {\r\n                row++;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            { 10, 12, 15, 20 },\r\n            { 25, 30, 35, 40 },\r\n            { 50, 55, 60, 65 },\r\n            { 70, 75, 80, 85 }\r\n        };\r\n\r\n        System.out.println(search(mat, 22)); \r\n        System.out.println(search(mat, 15)); \r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {            \r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);         \r\n\r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            XWPFParagraph pageBreak = first.createParagraph();\r\n            pageBreak.setPageBreak(true);\r\n\r\n            for (XWPFParagraph p : src1Document.getParagraphs()) {\r\n                XWPFParagraph newPara = first.createParagraph();\r\n                newPara.getCTP().set(p.getCTP().copy());\r\n            }\r\n\r\n            for (XWPFTable tbl : src1Document.getTables()) {\r\n                first.createTable().getCTTbl().set(tbl.getCTTbl().copy());\r\n            }\r\n        }        \r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\n        WordMerge wm = new WordMerge(faos);\r\n\r\n        wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n        wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n\r\n        wm.doMerge();\r\n        wm.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.CredentialStoreException;\r\nimport org.wildfly.security.credential.store.CredentialStore.ProtectionParameter;\r\nimport org.wildfly.security.credential.store.WildFlyElytronCredentialStoreProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class MaskedCredentialStoreAccess {\r\n    public static void main(String[] args) throws Exception {\r\n        String maskedPasswordStr = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n\r\n        MaskedPasswordAlgorithmSpec spec = new MaskedPasswordAlgorithmSpec(""12345678"".toCharArray(), 123);\r\n        Password maskedPassword = ModularCrypt.decode(maskedPasswordStr).createPassword(new WildFlyElytronCredentialStoreProvider(), spec);\r\n        PasswordCredential passwordCredential = new PasswordCredential(maskedPassword);\r\n\r\n        ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(passwordCredential));\r\n\r\n        Provider provider = new WildFlyElytronCredentialStoreProvider();\r\n        Security.addProvider(provider);\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv," class MyCamelRouteBuilder extends RouteBuilder {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n    private static final String JOB_METHOD_NAME = ""xyz"";\r\n\r\n    private final MyJob myJob;\r\n\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        super();\r\n        this.myJob = myJob;\r\n    }\r\n\r\n    @Override\r\n    public void configure() {\r\n        fromF(""direct:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n\r\n        fromF(""master:some_name_1/some_name_2:scheduler:%s?delay=%s"", JOB_NAME, 1234)\r\n            .routeId(""JobTimer"")\r\n            .toF(""direct:%s"", JOB_NAME)\r\n            .end();\r\n    }\r\n}\r\n\r\n@Named\r\npublic class MyJob {\r\n    public MyJob() {}\r\n\r\n    public void xyz() {\r\n        System.out.println(""Job executed"");\r\n    }\r\n}\r\n\r\n@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(ProducerTemplate producerTemplate) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.sendBody(""direct:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\npublic class MyFragment extends Fragment {\r\n\r\n    private LinearLayout parentLayout;\r\n    private Button addProduct;\r\n\r\n    @Override\r\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        parentLayout = view.findViewById(R.id.ll_out);\r\n        addProduct = view.findViewById(R.id.btn_prd);\r\n\r\n        addProduct.setOnClickListener(v -> {\r\n            LinearLayout newProductLayout = new LinearLayout(getActivity());\r\n            newProductLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n\r\n            EditText productName = new EditText(getActivity());\r\n            productName.setHint(""Enter Product"");\r\n            productName.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            EditText productQty = new EditText(getActivity());\r\n            productQty.setHint(""Enter Quantity"");\r\n            productQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            EditText productPrice = new EditText(getActivity());\r\n            productPrice.setHint(""Prod Price"");\r\n            productPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            ImageView deleteButton = new ImageView(getActivity());\r\n            deleteButton.setImageResource(android.R.drawable.ic_delete);\r\n            deleteButton.setLayoutParams(new LinearLayout.LayoutParams(100, 100));\r\n            deleteButton.setOnClickListener(v1 -> parentLayout.removeView(newProductLayout));\r\n\r\n            newProductLayout.addView(productName);\r\n            newProductLayout.addView(productQty);\r\n            newProductLayout.addView(productPrice);\r\n            newProductLayout.addView(deleteButton);\r\n\r\n            parentLayout.addView(newProductLayout);\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport javax.crypto.Cipher;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\npublic class RSAEncryptDecrypt {\r\n\r\n    static {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n    }\r\n\r\n    public static PrivateKey loadEncryptedPrivateKey(String filePath, String password) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(new File(filePath)))) {\r\n            Object object = pemParser.readObject();\r\n            PEMDecryptorProvider decryptor = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());\r\n            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");\r\n            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMKeyPair keyPair = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(keyPair.getPrivateKeyInfo().getEncoded()));\r\n            } else if (object instanceof PEMKeyPair) {\r\n                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(((PEMKeyPair) object).getPrivateKeyInfo().getEncoded()));\r\n            }\r\n            throw new IllegalArgumentException(""Invalid key format"");\r\n        }\r\n    }\r\n\r\n    public static byte[] encrypt(byte[] data, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\r\n        return cipher.doFinal(data);\r\n    }\r\n\r\n    public static byte[] decrypt(byte[] encryptedData, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\r\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n        return cipher.doFinal(encryptedData);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            PrivateKey privateKey = loadEncryptedPrivateKey(""private_key.pem"", ""your-passphrase"");\r\n            String message = ""Hello, World!"";\r\n            byte[] encrypted = encrypt(message.getBytes(StandardCharsets.UTF_8), privateKey);\r\n            byte[] decrypted = decrypt(encrypted, privateKey);\r\n            System.out.println(""Decrypted message: "" + new String(decrypted, StandardCharsets.UTF_8));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.UnavailableException;\r\nimport javax.servlet.http.HttpServlet;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            log(""Backend connection failed: "" + e.getMessage());\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        throw new NullPointerException(""Simulating backend failure"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(""Stack Overflow occurred: "" + e);\r\n            f();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EmojiSupportApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        String emojiText = ""?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??"";\r\n        TextArea textArea = new TextArea(emojiText);\r\n\r\n        String fontUrl = getClass().getResource(""NotoColorEmoji-Regular.ttf"").toExternalForm();\r\n        Font font = Font.loadFont(fontUrl, 14);\r\n        if (font != null) {\r\n            textArea.setFont(font);\r\n        }\r\n\r\n        Scene scene = new Scene(textArea, 400, 300);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Emoji TextArea"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.Configuration;\r\nimport android.content.res.Resources;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context context;\r\n    private final List<PyqModel> pyqList;\r\n    private final int defaultBgColor;\r\n    private final int selectedBgColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context context, List<PyqModel> pyqList) {\r\n        if (context == null) {\r\n            throw new IllegalArgumentException(""Context cannot be null"");\r\n        }\r\n        this.context = context;\r\n        this.pyqList = pyqList;\r\n        this.selectedPositions = new HashSet<>();\r\n\r\n        Resources res = context.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBgColor = ContextCompat.getColor(context, R.color.defaultBackgroundDark);\r\n            selectedBgColor = ContextCompat.getColor(context, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBgColor = ContextCompat.getColor(context, R.color.defaultBackgroundLight);\r\n            selectedBgColor = ContextCompat.getColor(context, R.color.selectedBackgroundLight);\r\n        }\r\n\r\n        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String pos : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(pos));\r\n        }\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        View view = inflater.inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        final PyqModel item = pyqList.get(position);\r\n\r\n        holder.title.setText(item.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.topics.setText(item.getPyqTopics());\r\n\r\n        int adapterPos = holder.getAdapterPosition();\r\n        if (adapterPos == RecyclerView.NO_POSITION) {\r\n            return;\r\n        }\r\n\r\n        if (selectedPositions.contains(adapterPos)) {\r\n            holder.card.setCardBackgroundColor(selectedBgColor);\r\n        } else {\r\n            holder.card.setCardBackgroundColor(defaultBgColor);\r\n        }\r\n\r\n        holder.card.setOnClickListener(v -> {\r\n            if (selectedPositions.contains(adapterPos)) {\r\n                selectedPositions.remove(adapterPos);\r\n            } else {\r\n                selectedPositions.add(adapterPos);\r\n            }\r\n\r\n            SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) {\r\n                selectedItems.add(String.valueOf(pos));\r\n            }\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n            editor.apply();\r\n\r\n            notifyItemChanged(adapterPos);\r\n\r\n            Intent intent = new Intent(holder.card.getContext(), ViewPdf.class);\r\n            intent.putExtra(""pdfName"", item.getPdfName());\r\n            intent.putExtra(""pdfUrl"", item.getPdfUri());\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.card.getContext().startActivity(intent);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView card;\r\n        TextView title, serialNumber, topics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            card = itemView.findViewById(R.id.pyqCardView);\r\n            title = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            topics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport com.inventory.server.domain.Item;\r\nimport com.inventory.server.domain.Categorie;\r\nimport com.inventory.server.dto.CreateItemData;\r\nimport com.inventory.server.exception.ItemAlreadyCreatedException;\r\nimport com.inventory.server.repository.ItemRepository;\r\nimport com.inventory.server.service.ItemService;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.*;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.web.util.UriComponentsBuilder;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.Optional;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass ItemServiceTest {\r\n\r\n    @InjectMocks\r\n    ItemService itemService;\r\n\r\n    @Mock\r\n    ItemRepository itemRepository;\r\n\r\n    @Mock\r\n    CategorieRepository categorieRepository;\r\n\r\n    @Mock\r\n    UriComponentsBuilder uriBuilder;\r\n\r\n    MockItem input;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        input = new MockItem();\r\n        MockitoAnnotations.openMocks(this);\r\n    }\r\n\r\n    @Test\r\n    void testItemAlreadyExists() {\r\n        Item item = input.mockEntity();\r\n        CreateItemData data = input.mockDTO();\r\n\r\n        when(itemRepository.findByItemNameIgnoreCase(anyString())).thenReturn(Optional.ofNullable(item));\r\n\r\n        Exception exception = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n            itemService.createItem(data, uriBuilder);\r\n        });\r\n\r\n        assertEquals(""There is an item created with this name"", exception.getMessage());\r\n\r\n        verify(itemRepository, times(1)).findByItemNameIgnoreCase(any());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import android.text.Spannable;\r\nimport android.text.SpannableString;\r\nimport android.text.style.AlignmentSpan;\r\nimport android.widget.TextView;\r\nimport android.text.Layout;\r\n\r\npublic class TextAlignUtil {\r\n    public static void alignText(TextView textView) {\r\n        String leftText = ""Left"";\r\n        String rightText = ""Right"";\r\n        String space = ""    "";\r\n        \r\n        SpannableString finalString = new SpannableString(leftText + space + rightText);\r\n        finalString.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), \r\n                leftText.length(), leftText.length() + rightText.length(), \r\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n        \r\n        textView.setText(finalString);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class DinicCalculator<T> implements MaxAntichainCalculator<T> {\r\n\r\n    private final Map<String, Map<String, Integer>> network;\r\n    private List<String> nodes;\r\n    private Map<String, Integer> nodeIndexMap;\r\n    private int[] level;\r\n\r\n    public DinicCalculator() {\r\n        network = new HashMap<>();\r\n        nodes = new ArrayList<>();\r\n        nodes.add(""src"");\r\n        nodes.add(""sink"");\r\n        updateNodeIndices();\r\n    }\r\n\r\n    private void updateNodeIndices() {\r\n        nodeIndexMap = new HashMap<>();\r\n        for (int i = 0; i < nodes.size(); i++) {\r\n            nodeIndexMap.put(nodes.get(i), i);\r\n        }\r\n    }\r\n\r\n    private void bfs(String source) {\r\n        level = new int[nodes.size()];\r\n        Arrays.fill(level, -1);\r\n        level[nodeIndexMap.get(source)] = 0;\r\n\r\n        Queue<String> queue = new LinkedList<>();\r\n        queue.offer(source);\r\n\r\n        while (!queue.isEmpty()) {\r\n            String u = queue.poll();\r\n            for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n                String v = entry.getKey();\r\n                int capacity = entry.getValue();\r\n                if (capacity > 0 && level[nodeIndexMap.get(v)] == -1) {\r\n                    level[nodeIndexMap.get(v)] = level[nodeIndexMap.get(u)] + 1;\r\n                    queue.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int flow, String sink) {\r\n        if (u.equals(sink)) {\r\n            return flow;\r\n        }\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            if (capacity > 0 && level[nodeIndexMap.get(u)] < level[nodeIndexMap.get(v)]) {\r\n                int sent = dfs(v, Math.min(flow, capacity), sink);\r\n                if (sent > 0) {\r\n                    network.get(u).put(v, capacity - sent);\r\n                    network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                    return sent;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private void addEdge(String from, String to, int capacity) {\r\n        network.computeIfAbsent(from, k -> new HashMap<>()).put(to, capacity);\r\n        network.computeIfAbsent(to, k -> new HashMap<>()).put(from, 0);\r\n        if (!nodes.contains(from)) nodes.add(from);\r\n        if (!nodes.contains(to)) nodes.add(to);\r\n        updateNodeIndices();\r\n    }\r\n\r\n    private Set<String> reach(Map<T, Set<T>> graph, T t, Set<String> visited) {\r\n        Queue<T> queue = new LinkedList<>();\r\n        queue.add(t);\r\n        while (!queue.isEmpty()) {\r\n            T current = queue.poll();\r\n            String currentKey = ""A"" + current.toString();\r\n            visited.add(currentKey);\r\n            for (T neighbor : graph.get(current)) {\r\n                String neighborKey = ""B"" + neighbor.toString();\r\n                if (!visited.contains(neighborKey)) {\r\n                    queue.add(neighbor);\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return visited;\r\n    }\r\n\r\n    public int calculator(Map<T, Set<T>> graph) {\r\n        for (T t : graph.keySet()) {\r\n            addEdge(""src"", ""A"" + t.toString(), 1);\r\n            addEdge(""B"" + t.toString(), ""sink"", 1);\r\n            Set<String> visitedSubset = new HashSet<>();\r\n            for (String u : reach(graph, t, visitedSubset)) {\r\n                addEdge(""A"" + t.toString(), u, 1);\r\n            }\r\n        }\r\n        int maxFlow = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (level[nodeIndexMap.get(""sink"")] == -1) {\r\n                break;\r\n            }\r\n            int flow;\r\n            while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) {\r\n                maxFlow += flow;\r\n            }\r\n        }\r\n        return graph.size() - maxFlow;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null) {\r\n            vibrator.vibrate(500);\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        activityIntent.putExtra(""stop_music"", true);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder: "" + event + ""\n"" + ""Comments: "" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(pendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        if (getIntent().getBooleanExtra(""stop_music"", false)) {\r\n            AlarmReceiver.stopRingtone();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineEffect extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseColor(Color.DARKGRAY);\r\n        box.setMaterial(material);\r\n\r\n        Box outline = new Box(102, 102, 102);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setCullFace(CullFace.NONE);\r\n        outline.setVisible(false);\r\n\r\n        Group group = new Group(outline, box);\r\n\r\n        box.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\r\n            outline.setVisible(!outline.isVisible());\r\n            event.consume();\r\n        });\r\n\r\n        Scene scene = new Scene(group, 600, 400, true);\r\n        scene.setFill(Color.LIGHTGRAY);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""3D Outline Effect"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.util.Scanner;\r\n\r\nclass Board {\r\n    public String inputTake() {\r\n        Scanner scan = new Scanner(System.in);\r\n        String guess;\r\n\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n\r\n        if (!checkInput(guess)) {\r\n            return inputTake();\r\n        }\r\n\r\n        return guess;\r\n    }\r\n\r\n    public boolean checkInput(String input) {\r\n        boolean isGood = input.length() == 5 && input.matches(""[a-zA-Z]+"");\r\n\r\n        if (!isGood) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        }\r\n\r\n        return isGood;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Lazy;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    private final LanguageService languageService;\r\n\r\n    @Autowired\r\n    public LanguageController(@Lazy @Qualifier(""french"") LanguageService frenchService,\r\n                              @Lazy @Qualifier(""english"") LanguageService englishService) {\r\n        this.languageService = configuration.equals(""french"") ? frenchService : englishService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"(componentModel = ""spring"")\r\npublic interface AgentInfoMapper {\r\n\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CsvReader {\r\n    public static void main(String[] args) throws IOException {\r\n        FileReader filObj = null;\r\n        try {\r\n            filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        BufferedReader br = new BufferedReader(filObj);\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n        String line = null;\r\n        int ext = 0;\r\n        while ((line = br.readLine()) != null) {\r\n            if (ext == 0) {\r\n                headers = Arrays.asList(line.split("",""));\r\n            } else {\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                int index = 0;\r\n                for (String each : line.split("","")) {\r\n                    myRecord.put(headers.get(index), each);\r\n                    index++;\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            ext++;\r\n        }\r\n\r\n        for (HashMap<String, String> record : myTable) {\r\n            System.out.println(record);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n        \r\n        return chain.filter(exchange)\r\n                .doOnTerminate(() -> {\r\n                    long delta = System.nanoTime() - startTime;\r\n                    exchange.getResponse().getHeaders()\r\n                            .set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError, Extra\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n\r\ntry:\r\n    print(Model(**{'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit', 'n': 1}))\r\nexcept ValidationError as e:\r\n    print(e)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from sqlalchemy import Integer, String, create_engine\r\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker, mapped_column\r\n\r\nengine = create_engine(""sqlite:///:memory:"", echo=True)\r\nSession = sessionmaker(bind=engine)\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = 'users'\r\n    \r\n    id = mapped_column(Integer, primary_key=True, autoincrement=True)\r\n    name = mapped_column(String(50))\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nsession = Session()\r\nnew_user = User(id=1, name=""Alice"")\r\nsession.add(new_user)\r\nsession.commit()\r\n\r\nuser = session.query(User).filter_by(name=""Alice"").first()\r\nprint(user.id, user.name)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import openai\r\n\r\nclient = openai.OpenAI(api_key=""your-api-key"")\r\n\r\nfile = client.files.create(\r\n    file=open(""example.pdf"", ""rb""),\r\n    purpose=""assistants""\r\n)\r\n\r\nassistant = client.beta.assistants.create(\r\n    instructions=""You are a research assistant. Analyze the given document and extract key insights."",\r\n    model=""gpt-4-turbo"",\r\n    tools=[{""type"": ""retrieval""}],\r\n    file_ids=[file.id]\r\n)\r\n\r\nquery = ""Summarize the main points of the document.""\r\n\r\nthread = client.beta.threads.create()\r\n\r\nmessage = client.beta.threads.messages.create(\r\n    thread_id=thread.id,\r\n    role=""user"",\r\n    content=query\r\n)\r\n\r\nrun = client.beta.threads.runs.create(\r\n    thread_id=thread.id,\r\n    assistant_id=assistant.id\r\n)\r\n\r\nresponse = client.beta.threads.messages.list(thread_id=thread.id)\r\n\r\nprint(response.data[0].content)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import cv2 as cv\r\nimport numpy as np\r\n\r\nimage = cv.imread(""boston_cooking_a.jpg"", cv.IMREAD_GRAYSCALE)\r\nif image is None:\r\n    print(""Error loading image"")\r\n    exit()\r\n\r\nimage = cv.GaussianBlur(image, (5, 5), 0)\r\nthresh = cv.adaptiveThreshold(image, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, 51, 9)\r\n\r\nkernel = np.ones((2, 2), np.uint8)\r\nmorph = cv.morphologyEx(thresh, cv.MORPH_CLOSE, kernel, iterations=2)\r\n\r\nedges = cv.Canny(morph, 50, 150)\r\n\r\nlines = cv.HoughLinesP(edges, 1, np.pi / 180, 100, minLineLength=30, maxLineGap=5)\r\nresult = cv.cvtColor(image, cv.COLOR_GRAY2BGR)\r\n\r\nif lines is not None:\r\n    for line in lines:\r\n        x1, y1, x2, y2 = line[0]\r\n        cv.line(result, (x1, y1), (x2, y2), (0, 255, 0), 2)\r\n\r\ncv.imwrite(""baseline_result.jpg"", result)\r\ncv.imshow(""Result"", result)\r\ncv.waitKey(0)\r\ncv.destroyAllWindows()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from pydantic import BaseModel, validator\r\n\r\nclass Window(BaseModel):\r\n    size: tuple[int, int]\r\n\r\n    @validator(""size"", pre=True)\r\n    def parse_size(cls, value):\r\n        if isinstance(value, str):\r\n            parts = value.split(""x"")\r\n            if len(parts) != 2:\r\n                raise ValueError(""Invalid size format"")\r\n            return int(parts[0]), int(parts[1])\r\n        return value\r\n\r\nfields = {'size': '1920x1080'}\r\nwindow = Window(**fields)\r\nprint(window)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in seen:\r\n            continue\r\n        seen.add(log_hash)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'}\r\n]\r\n\r\nunique_logs = list(deduplicate(logs))\r\nprint(unique_logs)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import time\r\nfrom fastapi import FastAPI, Request\r\nfrom starlette.responses import Response\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware(""http"")\r\nasync def add_process_time_header(request: Request, call_next):\r\n    start_time = time.time()\r\n    \r\n    response = await call_next(request)\r\n    body = b""""\r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n    \r\n    response = Response(content=body, status_code=response.status_code, headers=dict(response.headers))\r\n    \r\n    process_time = time.time() - start_time\r\n    response.headers[""X-Process-Time""] = str(round(process_time, 4))\r\n    return response\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\n\r\nrng = lambda: np.random.randint(2, 20) // 2\r\n\r\nclass NRNG:\r\n    def __init__(self):\r\n        self.numbers = iter(np.arange(1, 10.5, 0.5))\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.numbers)\r\n        except StopIteration:\r\n            self.numbers = iter(np.arange(1, 10.5, 0.5))\r\n            return next(self.numbers)\r\n\r\nnrng = NRNG()\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import requests\r\n\r\nAPP_KEY = ""your_app_key""\r\nAPP_SECRET = ""your_app_secret""\r\nREFRESH_TOKEN = ""your_refresh_token""\r\n\r\ndef get_access_token():\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""grant_type"": ""refresh_token"",\r\n        ""refresh_token"": REFRESH_TOKEN\r\n    }\r\n    headers = {\r\n        ""Authorization"": f""Basic {APP_KEY}:{APP_SECRET}"",\r\n        ""Content-Type"": ""application/x-www-form-urlencoded""\r\n    }\r\n    \r\n    response = requests.post(url, data=data, headers=headers)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json().get(""access_token"")\r\n    else:\r\n        print(""Error:"", response.status_code, response.text)\r\n        return None\r\n\r\ntoken = get_access_token()\r\nprint(""Access Token:"", token)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""console"": ""integratedTerminal"",\r\n            ""justMyCode"": false,\r\n            ""env"": {\r\n                ""PYTHONUNBUFFERED"": ""1""\r\n            },\r\n            ""outputCapture"": ""std""\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from dataclasses import dataclass\r\nfrom typing import Callable, Dict, Any, Type\r\n\r\ndef mydecorator(cls: Type[Any]) -> Type[Any]:\r\n    def save(self) -> None:\r\n        print(f""Saving {self}"")\r\n\r\n    setattr(cls, ""save"", save)\r\n    setattr(cls, ""my_fields_dict"", {""a"": str})\r\n\r\n    cls.__annotations__[""save""] = Callable[[], None]\r\n    cls.__annotations__[""my_fields_dict""] = Dict[str, Any]\r\n\r\n    return cls\r\n\r\n@mydecorator\r\n@dataclass\r\nclass A:\r\n    a: str = """"\r\n\r\na = A()\r\na.save()\r\nprint(a.my_fields_dict)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  \r\n    [1, 0, 0, 1],  \r\n    [1, 1, 0, 0]   \r\n])\r\nb_eq = np.array([2, 1, 1])\r\nbounds = [(0, 1)] * 4\r\n\r\ndef check_fixed_values(num_vars):\r\n    guaranteed_zeros = set()\r\n    guaranteed_ones = set()\r\n\r\n    for i in range(num_vars):\r\n        c = np.zeros(num_vars)\r\n        c[i] = 1\r\n        \r\n        res_min = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n        res_max = linprog(-c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n        if res_min.success and res_max.success:\r\n            if res_min.x[i] >= 0.999:\r\n                guaranteed_ones.add(i)\r\n            elif res_max.x[i] <= 0.001:\r\n                guaranteed_zeros.add(i)\r\n\r\n    return guaranteed_zeros, guaranteed_ones\r\n\r\nzero_vars, one_vars = check_fixed_values(4)\r\nprint(""Guaranteed zero:"", zero_vars)\r\nprint(""Guaranteed one:"", one_vars)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\nfig = px.bar(df.to_dicts(), x=""names"", y=""random"")\r\nfig.show()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from dataclasses import dataclass\r\nfrom omegaconf import OmegaConf\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\n\r\nclass PydanticConfig(BaseModel):\r\n    value: int = Field(..., ge=0, le=10)\r\n\r\n\r\n@dataclass\r\nclass HydraConfig:\r\n    pydantic_cfg: PydanticConfig\r\n\r\n\r\ncfg_dict = {""pydantic_cfg"": {""value"": 5}}\r\n\r\ntry:\r\n    hydra_cfg = OmegaConf.structured(HydraConfig)\r\n    cfg = OmegaConf.merge(hydra_cfg, cfg_dict)\r\n    validated = PydanticConfig(**cfg.pydantic_cfg)\r\n    print(validated)\r\nexcept ValidationError as e:\r\n    print(""Validation failed:"", e)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"class Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return ""Squarish:"" + h.split(':')[1];\r\n    }\r\n}\r\n\r\nconst rect = new Rectangle(6, 4);\r\nrect.shoutArea(); //=> I AM A RECTANGLE AND MY AREA IS 24\r\n\r\nconst squa = new Square(5);\r\nsqua.shoutArea(); //=> I AM A SQUARE AND MY AREA IS 25\r\n\r\nconsole.log(squa.squaHello()); //=> Squarish: hello\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\nid = ['a','b','c','a','b','e','f','a','b','k']\r\nvalue = [12,14,3,13,16,7,4,6,10,18]\r\n\r\ndf = pd.DataFrame({'id':id, 'value':value})\r\n\r\ndf['duped'] = np.where(df['id'].duplicated(keep='last'), 0, 1)\r\ndf['value_duped'] = df['value'] * df['duped']\r\n\r\ndf['cumsum_of_value'] = df['value_duped'].cumsum()\r\ndf['desired_output'] = df.groupby('id')['value'].transform(lambda x: x.cumsum().where(x.notna(), 0))\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"pip uninstall elasticsearch\r\npip install elasticsearch==7.13.4\r\n\r\nimport elasticsearch.helpers\r\nfrom elasticsearch import Elasticsearch\r\n\r\nes_host = '<your_host>'\r\nes_port = '<your_port>'\r\nes_username = '<your_username>'\r\nes_password = '<your_password>'\r\nes_index = '<your_index>'\r\n\r\nes = Elasticsearch(\r\n    [{'host': str(es_host), 'port': str(es_port)}],\r\n    http_auth=(str(es_username), str(es_password)),\r\n    use_ssl=False, \r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_index)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import enum\r\nfrom typing import Annotated, Literal\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends, HTTPException\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower() if isinstance(value, str) else value\r\n        if value == ""ab"":\r\n            return cls.ab\r\n        elif value == ""cd"":\r\n            return cls.cd\r\n        raise ValueError(f""{value} is not a valid enum value"")\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n    self.model = model\r\n    self.discard_ratio = discard_ratio\r\n    for name, module in self.model.named_modules():\r\n        if attention_layer_name in name:\r\n            module.register_forward_hook(self.get_attention)\r\n            module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    self.attentions = []\r\n    self.attention_gradients = []\r\n\r\ndef get_attention(self, module, input, output):\r\n    self.attentions.append(output.cpu())\r\n\r\ndef get_attention_gradient(self, module, grad_input, grad_output):\r\n    self.attention_gradients.append(grad_input[0].cpu())\r\n\r\ndef __call__(self, input_tensor, category_index):\r\n    self.model.zero_grad()\r\n    output = self.model(input_tensor)\r\n    loss = ...\r\n    loss.backward()\r\n\r\n"
0,1,misclassified_in_Test_8.csv.csv,"{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: current file"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [""${input:directory}""],\r\n      ""cwd"": ""${workspaceFolder}/data"",\r\n      ""inputs"": [\r\n        {\r\n          ""id"": ""directory"",\r\n          ""type"": ""promptString"",\r\n          ""description"": ""Enter the data directory name"",\r\n          ""default"": ""example_directory""\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\n\r\ndata = {\r\n    'Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ntp_columns = df.filter(regex='TP').values.flatten()\r\nvr_columns = df.filter(regex='VReal').values.flatten()\r\ntv_columns = df.filter(regex='TiV').values.flatten()\r\n\r\nresult = pd.DataFrame({\r\n    'ID': [1, 2, 3],\r\n    'Price': tp_columns,\r\n    'Net': vr_columns,\r\n    'Range': tv_columns\r\n})\r\n\r\nprint(result)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom time import time\r\n\r\ndef numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {}\r\n    for i in range(num_arrays):  \r\n        arrays[i] = np.random.rand(array_size)\r\n\r\n    if do_cache:  \r\n        cache = {}\r\n\r\n    for _ in range(num_iter):  \r\n        i, j = np.random.randint(num_arrays, size=2)\r\n\r\n        if do_cache and (i, j) in cache:\r\n            a = cache[(i, j)]  \r\n        else:\r\n            a = arrays[i] + arrays[j]\r\n            if do_cache:\r\n                cache[(i, j)] = a\r\n\r\n%timeit numpy_comparison(do_cache=False, array_size=10000, num_arrays=100, num_iter=1000)\r\n%timeit numpy_comparison(do_cache=True, array_size=10000, num_arrays=100, num_iter=1000)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import asyncio\r\nimport time\r\nimport discord\r\nfrom discord.ext import commands\r\n\r\nclass MyCog(commands.Cog):\r\n    def __init__(self, bot):\r\n        self.bot = bot\r\n\r\n    @commands.Cog.listener(""on_message"")\r\n    async def on_message(self, message):\r\n        start = time.time()\r\n\r\n        if message.author.bot:\r\n            return\r\n\r\n        if message.type != discord.MessageType.default:\r\n            return\r\n\r\n        print(f""2 if checks done - {time.time() - start}"")\r\n\r\n        if isinstance(message.channel, discord.channel.DMChannel):\r\n            return await message.reply(f'Hey {message.author.name}!\nLeider bin ich der falsche Ansprechpartner, falls du Hilfe suchst.. <:pepe_hands:705896495601287320>\nBetrete den https://discord.gg/deutschland Bl4cklist-Discord und sende unserem Support-Bot <@671421220566204446> (`Bl4cklistÃÂÃÂ°ÃÂÃÂ¸ÃÂ¢ÃÂÃÂÃÂÃÂ¥Support#7717`) eine Private-Nachricht, damit sich unser Support-Team um dein Problem so schnell es geht kÃÂ¼mmern kann. <:pepe_love:759741232443949107>')\r\n\r\n        prefix_now = await get_prefix(message)\r\n        if message.content.startswith(str(prefix_now)):\r\n            try:\r\n                await message.reply(""ÃÂ» <a:alarm:769215249261789185> - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen."")\r\n            except discord.Forbidden:\r\n                pass\r\n            return\r\n\r\n        if self.bot.user in message.mentions:\r\n\r\n            response = choice([\r\n                ""Mit mir kann man die coolsten Gewinnspiele starten! <a:gift:843914342835421185>"",\r\n                'Wird Zeit jemanden den Tag zu versÃÂ¼ÃÂen! <:smile:774755282618286101>',\r\n                ""Wer nicht auf diesem Server ist, hat die Kontrolle ÃÂ¼ber sein Leben verloren! <a:lach_blue2:803693710490861608>"",\r\n                ""Wann startet endlich ein neues Gewinnspiel? <:whut:848347703217487912>"",\r\n                ""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lÃÂ¼gt! <:wyldekatze:842157727169773608>""\r\n            ])\r\n\r\n            try:\r\n                await message.reply(f""{response} (Mein PrÃÂ¤fix: `/`)"", mention_author=False)\r\n            except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n                pass\r\n            return\r\n\r\n        print(f""5 if checks done - {time.time() - start}"")\r\n\r\n        count = 1\r\n        mydb = await getConnection()\r\n        mycursor = await mydb.cursor()\r\n        await mycursor.execute(""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s"", (message.author.guild.id,))\r\n        in_database = await mycursor.fetchone()\r\n        if in_database:\r\n            if in_database[0] is not None:\r\n                role_list = in_database[0].split("" "")\r\n                for roleid in role_list:\r\n                    try:\r\n                        int(roleid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    role = message.author.guild.get_role(int(roleid))\r\n                    if role is None:\r\n                        continue\r\n\r\n                    if role in message.author.roles:\r\n                        await mycursor.close()\r\n                        mydb.close()\r\n                        return\r\n\r\n            if in_database[1] is not None:\r\n                role_list = in_database[1].split("" "")\r\n                for roleid in role_list:\r\n                    try:\r\n                        int(roleid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    role = message.author.guild.get_role(int(roleid))\r\n                    if role is None:\r\n                        continue\r\n\r\n                    if role in message.author.roles:\r\n                        count += 1\r\n\r\n        await mycursor.execute(""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s"", (message.author.guild.id,))\r\n        in_database1 = await mycursor.fetchone()\r\n        if in_database1:\r\n            if in_database1[0] is not None:\r\n                channel_list = in_database1[0].split("" "")\r\n                for channelid in channel_list:\r\n\r\n                    try:\r\n                        int(channelid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    if int(message.channel.id) == int(channelid):\r\n                        await mycursor.close()\r\n                        mydb.close()\r\n                        return\r\n\r\n        print(f""mysql checks done - {time.time() - start}"")\r\n\r\n        await mycursor.execute(""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s"",\r\n                               (message.author.guild.id, message.author.id))\r\n        in_database2 = await mycursor.fetchone()\r\n        if in_database2:\r\n            await mycursor.execute(\r\n                ""UPDATE guild_message_count SET user_id = %s, message_count = message_count + %s WHERE guild_id = %s AND user_id = %s"",\r\n                (message.author.id, count, message.author.guild.id, message.author.id))\r\n        else:\r\n            await mycursor.execute(\r\n                ""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)"",\r\n                (message.author.id, count, message.author.guild.id))\r\n\r\n        await mydb.commit()\r\n        await mycursor.close()\r\n        mydb.close()\r\n\r\n        print(f""task done - {time.time() - start}"")\r\n\r\n\r\nasync def main():\r\n    bot = commands.Bot(command_prefix=""!"")\r\n    bot.add_cog(MyCog(bot))\r\n\r\n    await bot.start('your_token')\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import os\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport genai\r\n\r\nmodel = genai.GenerativeModel('gemini-pro-vision')\r\n\r\nimage_dir = ""path_to_images""\r\nimages_to_process = [os.path.join(image_dir, image) for image in os.listdir(image_dir)][:107]\r\n\r\nprompt = """"""Carefully scan these images: if it has text, extract all the text and return it. If the image does not have text return '<000>'.""""""\r\n\r\nbatch_size = 60\r\nbatched_images = [images_to_process[i: i + batch_size] for i in range(0, len(images_to_process), batch_size)]\r\n\r\nfor batch in tqdm(batched_images):\r\n    inputs = [[prompt, Image.open(img)] for img in batch]\r\n    outputs = model.generate_content(inputs)\r\n    \r\n    for output in outputs:\r\n        print(output.text)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\n\r\ndef ijIndicesToSourceArray(i, j, rows, cols):\r\n    return (rows - j - 1, cols - i - 1)\r\n\r\narr = np.array([[ 1,  2,  4],\r\n                [ 3,  5,  7],\r\n                [ 6,  8, 10],\r\n                [ 9, 11, 13],\r\n                [12, 14, 15]])\r\n\r\nrows, cols = arr.shape\r\nnew_arr = np.zeros((rows, cols), dtype=arr.dtype)\r\n\r\nfor i in range(rows):\r\n    for j in range(cols):\r\n        ni, nj = ijIndicesToSourceArray(i, j, rows, cols)\r\n        new_arr[i, j] = arr[ni, nj]\r\n\r\nprint(new_arr)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom typing import Optional\r\nfrom starlette import status\r\n\r\napp = FastAPI()\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\nsession_store = {}\r\n\r\n@app.get('/', response_class=HTMLResponse, name='homepage')\r\nasync def get_main_data(request: Request, session_id: Optional[str] = None):\r\n    data = session_store.pop(session_id, {})\r\n    return templates.TemplateResponse('home.html', {'request': request, **data})\r\n\r\n@app.post('/', name='homepage_post')\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    session_id = str(hash(file))\r\n    session_store[session_id] = {'result': ""Processed Data""}\r\n    \r\n    return RedirectResponse(url=f""/?session_id={session_id}"", status_code=status.HTTP_303_SEE_OTHER)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\r\n\r\nx = df.x.to_numpy()\r\ny = df.y.to_numpy()\r\npoints = np.column_stack((x, y))\r\n\r\nvor = Voronoi(points)\r\n\r\nplt.figure(figsize=(8, 8))\r\nvoronoi_plot_2d(vor, show_vertices=False, line_width=1.2)\r\n\r\nfor i, region in enumerate(vor.regions):\r\n    if not -1 in region and len(region) > 0:\r\n        polygon = [vor.vertices[j] for j in region]\r\n        plt.fill(*zip(*polygon), color=df.color.iloc[i], alpha=0.5)\r\n\r\nplt.xlim([-40, 0])\r\nplt.ylim([-30, 10])\r\nplt.xlabel('Log pO2(g)')\r\nplt.ylabel('Log pSO2(g)')\r\nplt.show()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndef glimpse(df):\r\n    print(f""Rows: {df.shape[0]}"")\r\n    print(f""Columns: {df.shape[1]}\n"")\r\n    for col in df.columns:\r\n        dtype = df[col].dtype\r\n        sample_values = "", "".join(map(str, df[col].iloc[:5].values))\r\n        print(f""{col} <{dtype}> {sample_values}"")\r\n\r\ntest = pd.DataFrame({'column_one':['A', 'B', 'C', 'D'],\r\n                     'column_two':[1, 2, 3, 4],\r\n                     'column_three': np.random.randn(4)})\r\n\r\nglimpse(test)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ncols = ['value', 'value_other', 'value_other2']\r\n\r\ndf = df.with_columns(\r\n    pl.when(pl.all_horizontal(pl.col(""value"").is_null(), pl.col(""quantity"") == 0))\r\n    .then(0)\r\n    .otherwise(pl.all_horizontal(*[pl.col(c) for c in cols]))\r\n    .alias(cols)\r\n)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import os\r\nfrom fastapi import APIRouter, Depends, Security, HTTPException\r\n\r\ndef api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    env = os.getenv(""ENV"", ""production"")\r\n    if env == ""localhost"":\r\n        return\r\n    if api_key_header != API_KEY:\r\n        raise HTTPException(\r\n            status_code=401,\r\n            detail=""Invalid API Key"",\r\n        )\r\n\r\nrouter = APIRouter(\r\n    prefix=""/v2/test"",\r\n    tags=[""helloWorld""],\r\n    dependencies=[Depends(api_key) if os.getenv(""ENV"") != ""localhost"" else None],\r\n    responses={404: {""description"": ""Not found""}}\r\n)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pydantic\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        return int(v) if isinstance(v, str) else v\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema):\r\n        field_schema[""type""] = ""string""\r\n\r\n    def __str__(self):\r\n        return str(super())\r\n\r\nclass BaseModel(pydantic.BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: lambda v: str(v)}\r\n        alias_generator = lambda x: """".join(word.capitalize() if i else word for i, word in enumerate(x.split(""_"")))\r\n        populate_by_name = True\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom numpy.lib.stride_tricks import sliding_window_view\r\n\r\ndef largest_neighbor_direction(a):\r\n    L = a.shape[0]\r\n    swv = sliding_window_view(a, (3, 3))  \r\n    swv[:, :, 1, 1] = -np.inf\r\n    directions = swv.reshape(L-2, L-2, 9).argmax(axis=2).astype(np.uint8)\r\n    return directions\r\n\r\na = np.random.rand(10000, 10000).astype(np.float32)\r\ndirections = largest_neighbor_direction(a)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from typing import Optional, List\r\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n    \r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"")\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\nsqlite_url = ""sqlite:///database.db""\r\nengine = create_engine(sqlite_url)\r\n\r\nSQLModel.metadata.create_all(engine)\r\n\r\ndef create_nodes():\r\n    with Session(engine) as session:\r\n        root = Node(data=""Root"")\r\n        child1 = Node(data=""Child 1"", parent=root)\r\n        child2 = Node(data=""Child 2"", parent=root)\r\n\r\n        session.add(root)\r\n        session.add(child1)\r\n        session.add(child2)\r\n        session.commit()\r\n\r\ndef get_tree():\r\n    with Session(engine) as session:\r\n        statement = select(Node).where(Node.parent_id.is_(None))\r\n        root = session.exec(statement).first()\r\n        return root\r\n\r\ncreate_nodes()\r\ntree = get_tree()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from dataclasses import dataclass\r\nfrom typing import Type, TypeVar\r\n\r\nT = TypeVar(""T"")\r\n\r\ndef something_else(klass: Type[T]) -> Type[T]:\r\n    return klass\r\n\r\ndef my_dataclass(klass: Type[T]) -> Type[T]:\r\n    return something_else(dataclass(klass))\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")  # should work\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from fastapi import FastAPI, Depends\r\nfrom pymongo import MongoClient\r\nfrom motor.motor_asyncio import AsyncIOMotorClient\r\nfrom typing import Callable\r\n\r\napp = FastAPI()\r\n\r\ndef build_db(name: str) -> Callable[[], AsyncIOMotorClient]:\r\n    def get_db():\r\n        return AsyncIOMotorClient(""mongodb://localhost:27017"")[name]\r\n    return get_db\r\n\r\n@app.post(""/notification/feed"")\r\nasync def route_receive_notifications(db=Depends(build_db(""someDB""))):\r\n    return {""db_name"": db.name}\r\n\r\ndef mock_db():\r\n    return AsyncIOMotorClient(""mongodb://localhost:27017"")[""testDB""]\r\n\r\napp.dependency_overrides[build_db(""someDB"")] = lambda: mock_db()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n\r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n        process.communicate()\r\n\r\n        if not os.path.exists(outname):\r\n            return {""error"": ""File conversion failed""}\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=converted.jpg'})\r\n"
0,1,misclassified_in_Test_8.csv.csv,"class Point:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def __iter__(self):\r\n        return iter((self.x, self.y))\r\n    \r\n    def __getitem__(self, index):\r\n        return (self.x, self.y)[index]\r\n\r\n    def __repr__(self):\r\n        return f""Point({self.x}, {self.y})""\r\n\r\n    def __eq__(self, other):\r\n        if isinstance(other, tuple):\r\n            return (self.x, self.y) == other\r\n        return False\r\n\r\np = Point(4, 5)\r\nmy_x = p.x\r\nmy_tuple = tuple(p)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n\r\nz_range = np.arange(z_size)\r\nfor i in range(x_size):\r\n    y_coordinates[i] = np.argmin(np.abs(z_coordinates[i][:, None] - z_range), axis=0)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from itertools import combinations\r\nfrom functools import lru_cache\r\n\r\n@lru_cache(None)\r\ndef generate_groups(letters, k, n):\r\n    if k == 1:\r\n        return [[tuple(sorted(letters))]]\r\n    \r\n    all_groups = []\r\n    for group in combinations(letters, n):\r\n        remaining = tuple(sorted(set(letters) - set(group)))\r\n        sub_groups = generate_groups(remaining, k - 1, n)\r\n        for sg in sub_groups:\r\n            all_groups.append([tuple(sorted(group))] + sg)\r\n    \r\n    unique_combos = {tuple(sorted(g)) for g in all_groups}\r\n    return [list(g) for g in unique_combos]\r\n\r\nletters = tuple(""ABCDEFGHIJKL"")\r\nk, n = 4, 3\r\ncombinations = generate_groups(letters, k, n)\r\n\r\nprint(combinations[:5])\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\n\r\nCOL_VALUE = ""value""\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\n\r\nsum_lower = (\r\n    df.with_columns(pl.col(COL_VALUE).rank(""ordinal"").alias(""rank""))\r\n    .sort(""rank"")\r\n    .with_columns(pl.col(COL_VALUE).cumsum().shift(1).fill_null(0).alias(""sum_lower""))\r\n    .sort(COL_VALUE)\r\n    .select(""sum_lower"")\r\n)\r\n\r\nmax_other = (\r\n    df.select(pl.max(COL_VALUE).alias(""max_val""))\r\n    .join(df, how=""cross"")\r\n    .with_columns((pl.col(""max_val"") - (pl.col(""max_val"") == pl.col(COL_VALUE)) * pl.col(COL_VALUE)).alias(""max_other""))\r\n    .select(""max_other"")\r\n)\r\n\r\ndf = df.with_columns(sum_lower, max_other)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\nimport torch\r\n\r\nselected_model = ""distilbert-base-uncased-finetuned-sst-2-english""\r\ntokenizer = AutoTokenizer.from_pretrained(selected_model)\r\nmodel = AutoModelForSequenceClassification.from_pretrained(selected_model, num_labels=2)\r\n\r\nclassifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\n\r\ninputs = tokenizer(texts, padding=True, truncation=True, return_tensors=""pt"")\r\n\r\nwith torch.no_grad():\r\n    outputs = model(**inputs)\r\n    logits = outputs.logits\r\n\r\nprint(logits)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import geopandas as gpd\r\nimport pooch\r\n\r\nurl = ""https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip""\r\n\r\npath = pooch.retrieve(\r\n    url,\r\n    known_hash=None,\r\n    processor=pooch.Unzip(),\r\n)\r\n\r\nshp_file = [f for f in path if f.endswith("".shp"")][0]\r\n\r\nworld = gpd.read_file(shp_file)\r\n\r\nprint(world.head())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from fastapi import FastAPI\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\nsub_app = FastAPI()\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\nasync def sub_startup():\r\n    print(""sub startup"")\r\n\r\nasync def sub_shutdown():\r\n    print(""sub shutdown"")\r\n\r\nsub_app.router.on_startup.append(sub_startup)\r\nsub_app.router.on_shutdown.append(sub_shutdown)\r\n\r\napp.mount(""/sub"", sub_app)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from fastapi import APIRouter, Form, Response, HTTPException, Depends\r\nfrom sqlalchemy.orm import Session\r\nimport models\r\nfrom database import get_db\r\nfrom utils import verify_password, create_access_token\r\n\r\nrouter = APIRouter()\r\n\r\n@router.post(""/login"")\r\ndef user_login(response: Response, username: str = Form(), password: str = Form(), db: Session = Depends(get_db)):\r\n    user = db.query(models.User).filter(models.User.mobile_number == username).first()\r\n    if not user or not verify_password(password, user.password):\r\n        raise HTTPException(400, detail=""wrong phone number or password"")\r\n    \r\n    access_token = create_access_token(data={""sub"": user.mobile_number})\r\n    response.set_cookie(\r\n        key=""fakesession"", \r\n        value=""fake-cookie-session-value"", \r\n        httponly=True, \r\n        samesite=""None"", \r\n        secure=True\r\n    )\r\n    \r\n    return {""status"": ""success""}\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from pyspark.sql import SparkSession\r\nfrom pyspark.sql.window import Window\r\nfrom pyspark.sql.functions import sum\r\n\r\nspark = SparkSession.builder.appName(""window_example"").getOrCreate()\r\n\r\ndata = [(1, ""A"", 100), (2, ""A"", 200), (3, ""A"", 300), \r\n        (4, ""B"", 400), (5, ""B"", 500), (6, ""B"", 600)]\r\n\r\ndf = spark.createDataFrame(data, [""id"", ""group"", ""value""])\r\n\r\nwindow_spec1 = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n\r\ndf.withColumn(""cumulative_sum"", sum(""value"").over(window_spec1)).show()\r\n\r\nwindow_spec2 = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(-1, 1)\r\n\r\ndf.withColumn(""rolling_sum"", sum(""value"").over(window_spec2)).show()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import httpx\r\nimport asyncio\r\n\r\nurls = [\r\n    ""https://example.com"",\r\n    ""https://example.org"",\r\n    ""https://example.net"",\r\n]\r\n\r\nasync def fetch(client, url):\r\n    try:\r\n        response = await client.get(url)\r\n        return response.text\r\n    except Exception as e:\r\n        print(f""Error fetching {url}: {e}"")\r\n        return None\r\n\r\nasync def fetch_all(urls):\r\n    async with httpx.AsyncClient() as client:\r\n        tasks = [fetch(client, url) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\nresults = asyncio.run(fetch_all(urls))\r\nprint(results)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\n\r\napp = FastAPI()\r\n\r\nclient = pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb = client[""models""]\r\nmodel_collection = db[""example-model""]\r\n\r\ndef response_to_mongo(r: dict):\r\n    inserted_id = model_collection.insert_one(r).inserted_id\r\n    return inserted_id\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features: List[float]):\r\n\r\n    prediction = model.predict(\r\n        pd.DataFrame(\r\n            [features],\r\n            columns=model.feature_names_in_,\r\n        )\r\n    )\r\n\r\n    response = {""predictions"": prediction.tolist()}\r\n    response[""_id""] = response_to_mongo(response)\r\n    \r\n    return response\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from icu import Collator, Locale\r\n\r\ncollator_en = Collator.createInstance(Locale(""en_US.UTF-8""))\r\ncollator_fa = Collator.createInstance(Locale(""fa_IR.UTF-8""))\r\n\r\ndef sort_key(s):\r\n    is_ascii = all(ord(c) < 128 for c in s)\r\n    return (collator_en.getSortKey(s) if is_ascii else b"""", collator_fa.getSortKey(s))\r\n\r\nmylist.sort(key=sort_key)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nimport concurrent.futures\r\n\r\narr = np.random.randint(0, 2**64, int(3e8), dtype=np.uint64)\r\n\r\ndef parallel_sort(arr, num_parts=8):\r\n    chunk_size = len(arr) // num_parts\r\n    chunks = [arr[i * chunk_size: (i + 1) * chunk_size] for i in range(num_parts)]\r\n\r\n    with concurrent.futures.ProcessPoolExecutor() as executor:\r\n        sorted_chunks = list(executor.map(np.sort, chunks))\r\n\r\n    return np.concatenate(sorted_chunks)\r\n\r\nsorted_arr = parallel_sort(arr)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\nfrom io import StringIO\r\n\r\ntext = """"""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|\r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n""""""\r\n\r\ndf = pd.read_csv(StringIO(text), sep=""|"", skiprows=2, skipinitialspace=True).iloc[:, 1:-1]\r\n\r\ndf.columns = df.columns.str.strip()\r\ndf = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)\r\n"
0,1,misclassified_in_Test_8.csv.csv,from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):  \r\n    a: int\r\n\r\n@dataclass\r\nclass Outer:\r\n    hasa: HasA  \r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n
0,1,misclassified_in_Test_8.csv.csv,"from sklearn import datasets\r\nimport pandas pd\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\n\r\ndef mutate_drop(df, new_col_name, expr):\r\n    df[new_col_name] = expr(df)\r\n    return df.drop(columns=[col for col in df.columns if col not in [new_col_name] + ['species']], errors='ignore')\r\n\r\niris = mutate_drop(iris, 'new_col', lambda x: x['sepal length (cm)'] + x['petal length (cm)'] * x['petal width (cm)'])\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef example1(arr: NDArray[np.float64]):\r\n    return arr * 2\r\n\r\ndef example2(arr: np.ndarray[np.float32, np.dtype[np.int32]]): \r\n    return arr.astype(np.float64)\r\n\r\narr1 = np.array([1, 2, 3], dtype=np.float64)\r\narr2 = np.array([[1, 2], [3, 4]], dtype=np.float32)\r\n\r\nprint(example1(arr1))\r\nprint(example2(arr2))\r\n\r\nT = np.ndarray[float]\r\nprint(T)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef create_timeseries_df(num_rows):\r\n    date_rng = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    data = {\r\n        'date': np.random.choice(date_rng, num_rows),\r\n        'category': np.random.choice(['A', 'B', 'C', 'D'], num_rows),\r\n        'subcategory': np.random.choice(['X', 'Y', 'Z'], num_rows),\r\n        'value': np.random.rand(num_rows) * 100\r\n    }\r\n    df = pd.DataFrame(data)\r\n    df = df.sort_values('date')\r\n    df.set_index('date', inplace=True)\r\n    \r\n    return df\r\n\r\nnum_rows = 1000000\r\ndf = create_timeseries_df(num_rows)\r\n\r\ndf_pl = pl.from_pandas(df).sort(""date"")\r\n\r\ndf_pl = df_pl.group_by_dynamic(""date"", every=""1w"", closed=""right"").agg(\r\n    pl.col(""value"").sum().alias(""value_sum""),\r\n    pl.col(""value"").mean().alias(""value_mean""),\r\n    pl.col(""value"").max().alias(""value_max""),\r\n    pl.col(""value"").min().alias(""value_min"")\r\n)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import inspect\r\nimport ast\r\n\r\ndef fct1():\r\n    frame = inspect.currentframe().f_back\r\n    try:\r\n        source_lines, _ = inspect.getsourcelines(frame)\r\n        caller_line = source_lines[frame.f_lineno - 1].strip()\r\n        if ""="" in caller_line:\r\n            var_name = caller_line.split(""="")[0].strip()\r\n            return {""name"": var_name}\r\n    finally:\r\n        del frame\r\n\r\n    return None\r\n\r\na = fct1()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nF = TypeVar(""F"", bound=Callable[[int], int])\r\n\r\ndef remember(f: F) -> F:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory: Dict[int, int] = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n <= 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\nprint(fib(100))\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({\r\n    ""sub_id"": [1, 2, 3],\r\n    ""engagement"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n    ""total_duration"": [123, 456, 789]\r\n})\r\n\r\ndf = df.with_columns(pl.col(""engagement"").str.split("","")).explode(""engagement"")\r\n\r\ndf = df.with_columns(\r\n    (pl.col(""total_duration"") / df.groupby(""sub_id"").count().select(""engagement"")).alias(""adjusted_duration"")\r\n)\r\n\r\nfig = px.bar(df, x=""sub_id"", y=""adjusted_duration"", color=""engagement"")\r\nfig.show()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import torch\r\nfrom transformers import LlamaTokenizer, LlamaForCausalLM, LlamaConfig\r\n\r\nmodel_path = ""Meta-Llama-3.1-8B-Instruct""\r\ntokenizer_path = f""{model_path}/tokenizer.model""\r\n\r\ntokenizer = LlamaTokenizer.from_pretrained(model_path, legacy=True)\r\n\r\nmodel_config = LlamaConfig(\r\n    hidden_size=4096,\r\n    num_hidden_layers=32,\r\n    num_attention_heads=32,\r\n    intermediate_size=int(4096 * 1.3),  \r\n    vocab_size=128256,\r\n    use_scaled_rope=True\r\n)\r\n\r\nmodel = LlamaForCausalLM(model_config)\r\nmodel.load_state_dict(torch.load(f""{model_path}/consolidated.00.pth"", map_location=torch.device(""cpu"")))\r\n\r\nmodel.eval()\r\n\r\ninput_text = ""Hello, how are you?""\r\ninputs = tokenizer(input_text, return_tensors=""pt"")\r\noutputs = model.generate(inputs[""input_ids""])\r\n\r\ndecoded_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\r\nprint(decoded_output)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"arr = []\r\n\r\nfor i in range(1, 101):\r\n    if (three := (i % 3 == 0)) & (five := (i % 5 == 0)):\r\n        arr.append(""FizzBuzz"")\r\n    elif three:\r\n        arr.append(""Fizz"")\r\n    elif five:\r\n        arr.append(""Buzz"")\r\n    else:\r\n        arr.append(str(i))\r\n\r\nprint(arr)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\nimport time\r\n\r\nmodel = ""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nembeddings = HuggingFaceEmbeddings(model_name=model)\r\n\r\ndef main():\r\n    doc1 = Document(page_content=""The sky is blue."", metadata={""document_id"": ""10""})\r\n    doc2 = Document(page_content=""The forest is green"", metadata={""document_id"": ""62""})\r\n    docs = [doc1, doc2]\r\n\r\n    for doc in tqdm(docs, desc=""Processing docs""):\r\n        time.sleep(0.1)\r\n        doc.metadata['summary'] = 'hello'\r\n\r\n    pprint.pprint(docs)\r\n    db = FAISS.from_documents(docs, embeddings)\r\n    db.save_local(""faiss_index"")\r\n    new_db = FAISS.load_local(""faiss_index"", embeddings)\r\n\r\n    query = ""Which color is the sky?""\r\n    docs = new_db.similarity_search_with_score(query)\r\n    print('Retrieved docs:', docs)\r\n    print('Metadata of the most relevant document:', docs[1][0].metadata)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import LSTM, Dense\r\n\r\nx_data = [np.random.rand(np.random.randint(100, 200)) for _ in range(50)]\r\ny_data = np.random.rand(50).astype(np.float32)\r\n\r\nmax_len = max(len(seq) for seq in x_data)\r\nx_padded = np.array([np.pad(seq, (0, max_len - len(seq))) for seq in x_data])\r\n\r\nx_padded = np.expand_dims(x_padded, axis=-1)\r\n\r\nmodel = Sequential([\r\n    LSTM(64, return_sequences=False, input_shape=(max_len, 1)),\r\n    Dense(1, activation=""linear"")\r\n])\r\n\r\nmodel.compile(optimizer=""adam"", loss=""mse"")\r\nmodel.fit(x_padded, y_data, epochs=10, batch_size=8)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import machine\r\nimport utime\r\nimport sys\r\n\r\nusb = machine.UART(0, baudrate=115200)\r\n\r\ndef read_usb():\r\n    if usb.any():\r\n        return usb.read().decode('utf-8').strip()\r\n    return None\r\n\r\ndef write_usb(data):\r\n    usb.write(data + ""\n"")\r\n    utime.sleep(0.1)\r\n\r\nwhile True:\r\n    msg = read_usb()\r\n    if msg:\r\n        write_usb(""Received: "" + msg)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import DateType, IntegerType, StringType\r\n\r\nspark = SparkSession.builder.appName(""SchemaCast"").getOrCreate()\r\n\r\ndata = [(""2024-01-01"", ""1"", ""hello""), (""2024-02-01"", ""2"", ""world"")]\r\ndf2 = spark.createDataFrame(data, [""A"", ""B"", ""C""])\r\n\r\nschema = {\r\n    ""A"": DateType(),\r\n    ""B"": IntegerType(),\r\n    ""C"": StringType()\r\n}\r\n\r\nfor col, dtype in schema.items():\r\n    df2 = df2.withColumn(col, df2[col].cast(dtype))\r\n\r\ndf2.printSchema()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import streamlit as st\r\nfrom PIL import Image\r\n\r\ndef page_header():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    header = st.container()\r\n    with header:\r\n        logo = Image.open(""images/logo.png"")\r\n        st.image(logo, width=300)\r\n\r\n        ga_code = """"""\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n        """"""\r\n        st.markdown(ga_code, unsafe_allow_html=True)\r\n\r\ndef main():\r\n    page_header()\r\n    st.write(""Welcome to my Streamlit app!"")\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hi""\r\n    yield\r\n\r\napp = FastAPI(title=""Test"", lifespan=_lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app.router.lifespan = _lifespan_override\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(""/"")\r\n    assert response.text == ""Hi""\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\n\r\ndf = (\r\n    pl.DataFrame(\r\n        {\r\n            ""value"": values\r\n        }\r\n    )\r\n    .with_columns(\r\n        pl.col(""value"").ewm_mean(alpha=2/(9+1), adjust=False, min_periods=9).alias(""ema_9"")\r\n    )\r\n)\r\n\r\ndf\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\nd0.isoformat()\r\n\r\nd1 = d0 + dt.timedelta(hours=2)\r\nd1.isoformat()\r\n\r\nd2 = d0 + dt.timedelta(hours=3)\r\nd2.isoformat()\r\n\r\nd1u = d1.astimezone(dt.timezone.utc)\r\nd2u = d2.astimezone(dt.timezone.utc)\r\n\r\nd2 - d1\r\nd2u - d1u\r\n\r\nd3 = d0 + dt.timedelta(hours=4)\r\nd3.isoformat()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\nf = partial(bar, 3)\r\nassert str(signature(f)) == '(b)'\r\nassert f(6) == 0.5 == f(b=6)\r\n\r\ntry:\r\n    f(a=2, b=6)\r\nexcept TypeError as e:\r\n    print(e)\r\n\r\ntry:\r\n    f(c=2, b=6)\r\nexcept TypeError as e:\r\n    print(e)\r\n\r\nf = partial(bar, b=3)\r\nassert str(signature(f)) == '(a, *, b=3)'\r\nassert f(6) == 2.0 == f(6, b=3)\r\nassert f(6, b=1) == 6.0\r\n\r\nf = partial(bar, a=3)\r\nassert str(signature(f)) == '(*, a=3, b)'\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\n\r\nnp.random.seed(7)\r\nA = np.random.random(1000)\r\n\r\n%timeit np.sum(A)\r\n%timeit A.sum()\r\n\r\ndef check_sum_methods():\r\n    arr = np.random.random(1000)\r\n    \r\n    sum_1 = np.sum(arr)\r\n    sum_2 = arr.sum()\r\n    \r\n    assert np.isclose(sum_1, sum_2), ""Sums should be identical""\r\n\r\ncheck_sum_methods()\r\n\r\nfrom numpy.core.multiarray import array as array_constructor\r\n\r\ndef custom_np_sum(arr):\r\n    if not isinstance(arr, np.ndarray):\r\n        arr = array_constructor(arr, dtype=float)\r\n    \r\n    return arr.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0)\r\n\r\n%timeit custom_np_sum(A)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from typing import Union, Literal\r\nfrom pydantic import BaseModel, Field\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\nclass Foo(BaseModel):\r\n    type: Literal[""Foo""] = Field(""Foo"", alias=""_type"", exclude=True)\r\n    Name: str\r\n\r\nclass Bar(BaseModel):\r\n    type: Literal[""Bar""] = Field(""Bar"", alias=""_type"", exclude=True)\r\n    Name: str\r\n\r\nclass Demo(BaseModel):\r\n    example: Union[Foo, Bar] = Field(..., discriminator=""type"")\r\n\r\n@app.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    demo_instance = Demo(example=foo)\r\n    return demo_instance\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import base64\r\nimport hmac\r\nimport hashlib\r\n\r\ndef generate_auth_header(data_to_sign):\r\n    api_secret_hash = base64.b64decode(""Rbju7azu87qCTvZRWbtGqg=="")\r\n    api_secret = api_secret_hash.decode(""ascii"")\r\n    hash = hmac.new(api_secret.encode(), data_to_sign.encode(), hashlib.sha256).digest()\r\n    return base64.b64encode(hash).decode()\r\n\r\nprint(generate_auth_header(""abc""))\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef fit_polynomial(X, y, degree=2):\r\n    poly = PolynomialFeatures(degree=degree)\r\n    Xp = poly.fit_transform(X)\r\n    model = LinearRegression()\r\n    model.fit(Xp, y)\r\n    return model, poly\r\n\r\ndef compute_gradient_hessian(model, poly, X):\r\n    coefs = model.coef_\r\n    n_features = X.shape[1]\r\n    \r\n    gradient = coefs[1:n_features+1]\r\n    \r\n    hessian = np.zeros((n_features, n_features))\r\n    index = n_features + 1\r\n    for i in range(n_features):\r\n        for j in range(i, n_features):\r\n            hessian[i, j] = coefs[index]\r\n            hessian[j, i] = coefs[index]\r\n            index += 1\r\n            \r\n    return np.array(gradient), np.array(hessian)\r\n\r\nX = np.random.rand(10, 2)\r\ny = np.random.rand(10)\r\n\r\nmodel, poly = fit_polynomial(X, y, degree=2)\r\ngrad, hess = compute_gradient_hessian(model, poly, X)\r\nprint(""Gradient:"", grad)\r\nprint(""Hessian:"", hess)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import os\r\nfrom typing import Optional\r\nfrom pydantic import BaseSettings, Field\r\n\r\n\r\nclass SubSettings(BaseSettings):\r\n    sub_field: Optional[str] = Field(None, env='SUB_FIELD')\r\n\r\n    class Config:\r\n        env_file = 'local.env'\r\n\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str] = Field(None, env='FIELD_ONE')\r\n    field_two: Optional[int] = Field(None, env='FIELD_TWO')\r\n    sub_settings: SubSettings = SubSettings()\r\n\r\n    class Config:\r\n        env_file = 'local.env'\r\n\r\n\r\nsettings = Settings()\r\nprint(settings.dict())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from abc import ABC, abstractmethod\r\n\r\nclass FooBase(ABC):\r\n    foo: str\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = 42\r\n\r\n    @abstractmethod\r\n    def __init_subclass__(cls):\r\n        if not hasattr(cls, 'foo'):\r\n            raise TypeError(f""Class {cls.__name__} must define attribute 'foo'"")\r\n\r\nclass Foo(FooBase):\r\n    foo: str = ""hello""\r\n\r\n\r\nf = Foo()\r\nprint(f.foo, f.bar, f.baz)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import requests\r\nfrom fake_useragent import UserAgent\r\n\r\nua = UserAgent()\r\nheaders = {\r\n    'User-Agent': ua.random,\r\n    'Accept-Language': 'en-US,en;q=0.9',\r\n}\r\n\r\nsession = requests.Session()\r\nsession.headers.update(headers)\r\n\r\nurl = ""https://etherscan.io/tokens""\r\nresponse = session.get(url, timeout=15)\r\n\r\nif response.status_code == 200:\r\n    print(response.text[:500])\r\nelse:\r\n    print(""Failed to fetch page:"", response.status_code)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\n\r\ndata = {\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": [""a"", ""c"", ""x""],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ndf_melted = df.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""FIELD_VALUE"")\r\n\r\ndf_melted[""FIELD_NAME""] = df_melted[""FIELD_NAME""].str[-1]\r\n\r\ndf_melted[""FIELD_STR_VALUE""] = df_melted[""FIELD_VALUE""].apply(lambda x: x if isinstance(x, str) else """")\r\ndf_melted[""FIELD_NUM_VALUE""] = df_melted[""FIELD_VALUE""].apply(lambda x: x if isinstance(x, int) else None)\r\n\r\ndf_melted = df_melted.drop(columns=[""FIELD_VALUE""])\r\n\r\ndf_melted.insert(0, ""ID"", range(1, len(df_melted) + 2))  \r\n\r\nprint(df_melted)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import click\r\nimport boto3\r\nimport os\r\nfrom pathlib import Path\r\nfrom importlib_resources import files\r\n\r\ns3_client = boto3.client('s3')\r\n\r\n@click.command()\r\n@click.argument('bucket_name')\r\ndef upload_files(bucket_name):\r\n    base_path = Path(__file__).parent / ""../resources/artifacts""  \r\n    if not base_path.exists():\r\n        click.echo(""Resources folder not found, check installation."")\r\n        return\r\n\r\n    for file_path in base_path.iterdir():\r\n        if file_path.is_file():\r\n            s3_client.upload_file(str(file_path), bucket_name, file_path.name)\r\n            click.echo(f""Uploaded {file_path.name}"")\r\n\r\nif __name__ == ""__main__"":\r\n    upload_files()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\n    def __class_getitem__(cls, item):\r\n        return cls.__len__()\r\n\r\nBadBar.__len__ = classmethod(lambda cls: 9002)\r\n\r\nlen(GoodBar), len(GoodBar()), len(BadBar), len(BadBar())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import asyncio\r\nimport pytest\r\nimport random\r\nfrom faker import Faker\r\nfrom sqlalchemy.ext.asyncio import AsyncSession\r\nfrom app.models import User\r\nfrom app.database import async_session_maker\r\n\r\nfake = Faker()\r\n\r\nclass AsyncFactory:\r\n    async def create_user(self, session: AsyncSession):\r\n        user = User(\r\n            id=random.randint(1, 10000),\r\n            name=fake.name(),\r\n            email=fake.email(),\r\n        )\r\n        session.add(user)\r\n        await session.commit()\r\n        return user\r\n\r\n@pytest.fixture\r\nasync def async_session():\r\n    async with async_session_maker() as session:\r\n        yield session\r\n\r\n@pytest.fixture\r\nasync def user_fixture(async_session):\r\n    factory = AsyncFactory()\r\n    return await factory.create_user(async_session)\r\n\r\nasync def test_user_creation(user_fixture):\r\n    assert user_fixture.id is not None\r\n    assert ""@"" in user_fixture.email\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import tqdm\r\nimport time\r\n\r\n\r\ndef calc(n_digits, pos, total):\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    progress = tqdm(total=n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True)\r\n    \r\n    for k in range(n):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n        progress.update(1)\r\n    \r\n    progress.close()\r\n    \r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    \r\n    return pi\r\n\r\n\r\ndef parallel_with_joblib():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    results = Parallel(n_jobs=n_cores, prefer=""threads"")(delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame(data1)\r\ndf2 = pd.DataFrame(data2)\r\n\r\ndef find_closest_indices(df, target):\r\n    idx = (df['seconds'] - target).abs().argsort()[0]\r\n    low = max(0, idx - 2)\r\n    high = min(len(df), idx + 3)\r\n    return df.iloc[low:high]\r\n\r\nresults = pd.concat([find_closest_indices(df2, sec) for sec in df1['seconds']]).drop_duplicates().reset_index(drop=True)\r\nprint(results)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(0, 10),\r\n            ""b"": """".join(random.choices(string.digits, k=10))\r\n        }\r\n\r\n\r\nprint(ExampleData.example())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n\r\n        return result\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nprint(Tree.traverse_pre())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from flask import Flask, render_template, jsonify\r\nimport map_plotting_test as mpt\r\nimport threading\r\n\r\napp = Flask(__name__)\r\n\r\ndef create_map_task():\r\n    mpt.create_map()\r\n\r\n@app.route('/')\r\ndef render_the_map():\r\n    thread = threading.Thread(target=create_map_task)\r\n    thread.start()\r\n    return render_template(""loading.html"")\r\n\r\n@app.route('/map')\r\ndef render_the_actual_map():\r\n    return render_template(""map.html"")\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\nif __name__ == '__main__':\r\n    path_to_img = ""my image path""\r\n\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512), mode='reflect')\r\n\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {""shape"": image.shape, ""image"": image_byte.decode()}\r\n\r\n    response = requests.post('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef reference_implementation(encoded):\r\n    """"""This is the implementation that gives the desired result""""""\r\n    return base64.b64decode(encoded)\r\n\r\n\r\ndef implmementation1(encoded):\r\n    """"""Try to call the directly the underlying library""""""\r\n    return a2b_base64(encoded)\r\n\r\n\r\ndef threaded_impl(encoded, N):\r\n    """"""Try multi threading calling the underlying library""""""\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # lenght of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret = ret + result\r\n    return ret\r\n\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    """"""Try multi processing calling the underlying library""""""\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # lenght of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret = ret + result\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2; collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3; collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4; collect()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import pandas as pd\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\npage = requests.get('https://www.bmv.com.mx/es/mercados/capitales')\r\nsoup = BeautifulSoup(page.text, 'lxml')\r\n\r\nprint('Read html!')\r\n\r\n# get headers\r\nthead = soup.find(""thead"")\r\ntr = thead.find_all(""tr"")\r\n\r\nheaders = [t.get_text().strip().replace('\n', ',').split(',') for t in tr]\r\nheaders = headers[0] if headers else []\r\n\r\ndf = pd.DataFrame(columns=headers)\r\n\r\n# fetch rows into pandas dataframe\r\nrows = soup.find_all('tr', {""role"": ""row""})\r\n\r\nfor row in rows:\r\n    cells = row.findChildren('td')\r\n    row_data = []\r\n    for cell in cells:\r\n        value = cell.get_text(strip=True)\r\n        row_data.append(value)\r\n\r\n    if row_data:\r\n        df.loc[len(df)] = row_data\r\n\r\nprint(df.head())\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import hashlib\r\nimport sys\r\nfrom color import Color\r\n\r\ndef get_hash(algorithm):\r\n    filename = input(""Enter the file name: "")\r\n    hash_obj = hashlib.new(algorithm)\r\n    with open(filename, ""rb"") as f:\r\n        for byte_block in iter(lambda: f.read(4096), b""""):\r\n            hash_obj.update(byte_block)\r\n    print(f""{algorithm} value has been calculated"")\r\n    color_reset()\r\n\r\ndef verify_checksum(algorithm):\r\n    print(f""Verifying {algorithm} checksum..."")\r\n\r\ndef which_hash():\r\n    sha256_or_sha512 = input(""Which hash do you want to calculate: sha256 or sha512? \n"")\r\n    if sha256_or_sha512 in [""sha256"", ""sha512""]:\r\n        get_hash(sha256_or_sha512)\r\n        verify_checksum(sha256_or_sha512)\r\n    else:\r\n        print(""Type either sha256 or sha512. If you type anything else the program will close...like this."")\r\n        sys.exit()\r\n\r\nif __name__ == ""__main__"":\r\n    which_hash()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nsector_names = [""Technology"", ""Financials"", ""Health Care"", ""Consumer Discretionary"", ""Consumer Staples"", ""Industrials""]\r\n\r\ndf = df.with_columns(\r\n    pl.col(""sector_exposure"")\r\n    .str.split("";"", inclusive=True)\r\n    .arr.eval(pl.col().str.split(""=""), parallel=True)\r\n    .arr.eval(pl.struct([pl.element().arr.get(1).cast(pl.Float64).alias(name) for name in sector_names]), parallel=True)\r\n)\r\n\r\nprint(df)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j  # Changed to lowercase 'j' for complex numbers\r\n\r\nx = np.real(xx)\r\ny = np.real(yy)\r\n\r\nassert np.shares_memory(x, xx)\r\nassert np.shares_memory(y, yy)\r\n\r\ndot = timeit('np.dot(x, y)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x, y)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n\r\n# If you try .copy() here, it should make the performance differences go away.\r\nx_copy = np.real(xx).copy()\r\ny_copy = np.real(yy).copy()\r\n\r\ndot_copy = timeit('np.dot(x_copy, y_copy)', number=10, globals=globals())\r\nmatmul_copy = timeit('np.matmul(x_copy, y_copy)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul (with copy): ', matmul_copy)\r\nprint('time for np.dot (with copy): ', dot_copy)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import numpy as np\r\nimport cv2\r\nfrom PIL import Image\r\n\r\ndpi = 1000  # dots per inch\r\ndpmm = 0.03937 * dpi  # dots per mm\r\nwidthOfSampleMM = 50  # mm\r\nheightOfSampleMM = 50  # mm\r\npatternSizeMM = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nvariation = 0.75  # 1 is very bad, 0 is very good\r\n\r\n# conversions to pixels\r\nwidthOfSamplesPX = int(np.ceil(widthOfSampleMM * dpmm))  # get the width\r\nwidthOfSamplesPX = widthOfSamplesPX + 10 - widthOfSamplesPX % 10  # round up the width to nearest 10\r\nheightOfSamplePX = int(np.ceil(heightOfSampleMM * dpmm))  # get the height\r\nheightOfSamplePX = heightOfSamplePX + 10 - heightOfSamplePX % 10  # round up the height to nearest 10\r\npatternSizePX = patternSizeMM * dpmm  # this is the size of the pattern, so far I am going with circles\r\n\r\n# init an empty image\r\nim = 255 * np.ones((heightOfSamplePX, widthOfSamplesPX), dtype=np.uint8)\r\n\r\n# horizontal circle centers\r\nnumPoints = int(density * heightOfSamplePX / patternSizePX)  # get number of patterns possible\r\nif numPoints == 1:\r\n    horizontal = [heightOfSamplePX // 2]\r\nelse:\r\n    horizontal = [int(i * heightOfSamplePX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# vertical circle centers\r\nnumPoints = int(density * widthOfSamplesPX / patternSizePX)\r\nif numPoints == 1:\r\n    vertical = [widthOfSamplesPX // 2]\r\nelse:\r\n    vertical = [int(i * widthOfSamplesPX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\nfor i in vertical:\r\n    for j in horizontal:\r\n        # generate the noisy information\r\n        iWithNoise = i + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        jWithNoise = j + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        patternSizePXWithNoise = patternSizePX + patternSizePX * variation * (np.random.rand() - 0.5) / 2\r\n        cv2.circle(im, (int(iWithNoise), int(jWithNoise)), int(patternSizePXWithNoise // 2), 0, -1)  # add circle\r\n\r\n# Save the image in a high-resolution format using PIL\r\nim_pil = Image.fromarray(im)\r\nim_pil.save(""speckle_pattern.png"", dpi=(dpi, dpi))\r\n\r\n# If saving in TIFF format with high resolution:\r\nim_pil.save(""speckle_pattern.tiff"", dpi=(dpi, dpi))\r\n"
0,1,misclassified_in_Test_8.csv.csv,"import matplotlib.pyplot as plt\r\n\r\nwith open('notebook.txt', encoding='utf-8') as file:\r\n    contents = file.readlines()\r\n\r\nnewList = []\r\nfor content in contents:\r\n    newContent = content.replace('\n', '')\r\n    money = newContent.split(':')[-1]\r\n    newList.append(int(money))\r\n\r\nx = [1, 2, 3, 4, 5, 6]\r\ny = newList\r\nplt.plot(x, y, 'r')\r\nplt.xlabel('month')\r\nplt.ylabel('money')\r\nplt.legend()\r\nplt.show()\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from pydantic import root_validator\r\nfrom typing import Callable\r\n\r\ndef root_unique_validator(field_name: str) -> Callable:\r\n    def _unique_validator(cls, values):\r\n        root_values = values.get('__root__')\r\n        value_set = set()\r\n        for value in root_values:\r\n            if value.get(field_name) in value_set:\r\n                raise ValueError(f'Duplicate {field_name.capitalize()}')\r\n            else:\r\n                value_set.add(value.get(field_name))\r\n        return values\r\n    return _unique_validator\r\n\r\nclass CustomerRecordDF(BaseModel):\r\n\r\n    __root__: List[CustomerRecord]\r\n    \r\n    _validate_unique_name = root_unique_validator('name')\r\n    _validate_unique_address = root_unique_validator('address')\r\n\r\ndf_dict = df.to_dict(orient='records')\r\nCustomerRecordDF.parse_obj(df_dict)\r\n"
0,1,misclassified_in_Test_8.csv.csv,"from pydantic import BaseModel, ValidationError, validator\r\nfrom typing import List\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ntry:\r\n    salary = Salary(gross=""hello"", net=1000, tax=10)\r\n    employee = Employee(name=""Mattia"", age=""hello"", salary=salary)\r\nexcept ValidationError as e:\r\n    print(e.errors())\r\n"
0,1,misclassified_in_Test_5.csv.csv,static void doesNotWork(Object o) {\r\n    if (o == null) {\r\n        throw new Error();\r\n    } else if (!(o instanceof String s)) {\r\n        throw new Error();\r\n    }   \r\n    System.out.println(s); // error here\r\n}\r\n\r\njava\r\nstatic void works(Object o) {\r\n    if (o == null || !(o instanceof String s)) {\r\n        throw new Error();\r\n    }\r\n    System.out.println(s); // s is always defined here\r\n}\r\n\r\njava\r\nstatic void works(Object o) {\r\n    if (o == null) {\r\n        throw new Error();\r\n    } else {\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s); // s is now in scope\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_5.csv.csv,"List<...> results = executorService.submit(() -> \r\n         IntStream.rangeClosed(-from, to)\r\n                 .mapToObj(i -> ...)\r\n                 .map(... -> {\r\n                     try {\r\n                         service.setSomeThreadLocalString(...);\r\n                         MDC.put(..., ...);\r\n                         MDC.put(..., ...);\r\n                         return service.call(...);\r\n                     } finally {\r\n                         service.removeSomeThreadLocalString(...);\r\n                         MDC.remove(...);\r\n                         MDC.remove(...);\r\n                     }\r\n                 })\r\n                 .toList()\r\n     ).get();\r\n     \r\njava\r\n     ForkJoinPool pool = new ForkJoinPool(30);\r\n     List<...> results = pool.submit(() -> \r\n         IntStream.rangeClosed(-from, to)\r\n                 .parallel()\r\n                 .mapToObj(i -> ...)\r\n                 .map(... -> {\r\n                     try {\r\n                         service.setSomeThreadLocalString(...);\r\n                         MDC.put(..., ...);\r\n                         MDC.put(..., ...);\r\n                         return service.call(...);\r\n                     } finally {\r\n                         service.removeSomeThreadLocalString(...);\r\n                         MDC.remove(...);\r\n                         MDC.remove(...);\r\n                     }\r\n                 })\r\n                 .toList()\r\n     ).get();\r\n     "
0,1,misclassified_in_Test_5.csv.csv,"import com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport java.lang.foreign.*;\r\nimport java.lang.invoke.MethodHandle;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n    private static final int PropModeReplace = 0;\r\n    private static final int XA_CARDINAL = 6;\r\n    private MethodHandle XOpenDisplay, XCloseDisplay, XInternAtom, XChangeProperty, XFlush;\r\n    \r\n    @Override\r\n    public void init() throws Exception {\r\n        Linker linker = Linker.nativeLinker();\r\n        SymbolLookup lookup = Linker.systemLookup();\r\n        \r\n        XOpenDisplay = linker.downcallHandle(lookup.find(""XOpenDisplay"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));\r\n        XCloseDisplay = linker.downcallHandle(lookup.find(""XCloseDisplay"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));\r\n        XInternAtom = linker.downcallHandle(lookup.find(""XInternAtom"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n        XChangeProperty = linker.downcallHandle(lookup.find(""XChangeProperty"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n        XFlush = linker.downcallHandle(lookup.find(""XFlush"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Task"");\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(""Raw Handle: "" + rawHandle);\r\n            new Thread(createTask(rawHandle)).start();\r\n        });\r\n        VBox vbox = new VBox(10, startButton);\r\n        primaryStage.setScene(new Scene(vbox, 300, 200));\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Task<Void> createTask(long rawHandle) {\r\n        return new Task<>() {\r\n            @Override\r\n            protected Void call() {\r\n                try (Arena arena = Arena.ofConfined()) {\r\n                    MemorySegment display = (MemorySegment) XOpenDisplay.invokeExact((MemorySegment) null);\r\n                    if (display.equals(MemorySegment.NULL)) {\r\n                        System.err.println(""Failed to open display"");\r\n                        return null;\r\n                    }\r\n                    MemorySegment atomName = arena.allocateUtf8String(""_NET_WM_STATE_DEMANDS_ATTENTION"");\r\n                    int atom = (int) XInternAtom.invokeExact(display, atomName, 0);\r\n                    System.out.println(""Atom: "" + atom);\r\n\r\n                    for (int i = 0; i <= 100; i += 20) {\r\n                        Thread.sleep(500);\r\n                        System.out.println(""Progress: "" + i);\r\n                        MemorySegment progressData = arena.allocate(ValueLayout.JAVA_INT, i);\r\n                        XChangeProperty.invokeExact(display, (int) rawHandle, atom, XA_CARDINAL, 32, PropModeReplace, progressData, 1);\r\n                        XFlush.invokeExact(display);\r\n                    }\r\n                    XCloseDisplay.invokeExact(display);\r\n                } catch (Throwable ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import java.io.IOException;\r\n\r\npublic class MyClass {\r\n\r\n    static <E extends Exception> void something(int mode) throws E {\r\n        if (mode == 1) {\r\n            throw (E) new RuntimeException(""Unchecked exception"");\r\n        } else if (mode == 2) {\r\n            throw (E) new IOException(""Checked exception"");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // This compiles fine because RuntimeException is unchecked\r\n        MyClass.<RuntimeException>something(1);\r\n\r\n        try {\r\n            // Explicitly specifying a checked exception requires a try-catch\r\n            MyClass.<IOException>something(2);\r\n        } catch (IOException e) {\r\n            System.out.println(""Caught checked exception: "" + e.getMessage());\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TooltipAnchoringDemo extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label1 = new Label(""TEST1\nTEST1\nTEST1"");\r\n        label1.setStyle(""-fx-background-color: red; -fx-padding: 10;"");\r\n        Label label2 = new Label(""TEST2\nTEST2\nTEST2"");\r\n        label2.setStyle(""-fx-background-color: green; -fx-padding: 10;"");\r\n        Label label3 = new Label(""TEST3\nTEST3\nTEST3"");\r\n        label3.setStyle(""-fx-background-color: blue; -fx-padding: 10;"");\r\n\r\n        CustomTooltip.install(""TOOLTIP 1"", label1);\r\n        CustomTooltip.install(""TOOLTIP 2"", label2);\r\n        CustomTooltip.install(""TOOLTIP 3"", label3);\r\n\r\n        HBox root = new HBox(15, label1, label2, label3);\r\n        root.setPadding(new Insets(10));\r\n        root.setAlignment(Pos.TOP_LEFT);\r\n\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Tooltip Positioning Demo"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    // Custom tooltip positioning logic\r\n    static class CustomTooltip {\r\n        public static void install(String text, Label label) {\r\n            Tooltip tooltip = new Tooltip(text);\r\n            tooltip.setShowDelay(Duration.seconds(0.5));\r\n\r\n            label.setOnMouseEntered(e -> {\r\n                Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n\r\n                // Compute bottom-right position\r\n                double tooltipX = bounds.getMaxX();\r\n                double tooltipY = bounds.getMaxY();\r\n\r\n                tooltip.show(label, tooltipX, tooltipY);\r\n            });\r\n\r\n            label.setOnMouseExited(e -> tooltip.hide());\r\n\r\n            label.setTooltip(tooltip);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"package com.example.control;\r\n\r\nimport javafx.beans.property.BooleanProperty;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.PseudoClass;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class Switch extends Control {\r\n\r\n    public Switch() {\r\n        getStyleClass().add(DEFAULT_STYLE_CLASS);\r\n    }\r\n\r\n    public Switch(boolean selected) {\r\n        this();\r\n        setSelected(selected);\r\n    }\r\n\r\n    public void toggle() {\r\n        if (!isDisabled() && !selected.isBound()) {\r\n            setSelected(!isSelected());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SwitchSkin(this);\r\n    }\r\n\r\n    /* **************************************************************************\r\n     *                                                                          *\r\n     * Properties                                                               *\r\n     *                                                                          *\r\n     ****************************************************************************/\r\n\r\n    // -- selected property\r\n    private final BooleanProperty selected = new SimpleBooleanProperty(this, ""selected"") {\r\n        private boolean wasSelected;\r\n\r\n        @Override\r\n        protected void invalidated() {\r\n            boolean isSelected = get();\r\n            if (wasSelected != isSelected) {\r\n                pseudoClassStateChanged(SELECTED, isSelected);\r\n                fireEvent(new ActionEvent()); // Fire event when state changes\r\n                wasSelected = isSelected;\r\n            }\r\n        }\r\n    };\r\n\r\n    public final void setSelected(boolean selected) {\r\n        this.selected.set(selected);\r\n    }\r\n\r\n    public final boolean isSelected() {\r\n        return selected.get();\r\n    }\r\n\r\n    public final BooleanProperty selectedProperty() {\r\n        return selected;\r\n    }\r\n\r\n    // -- onAction property (Making Scene Builder recognize it)\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new SimpleObjectProperty<>(this, ""onAction"") {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n    };\r\n\r\n    public final void setOnAction(EventHandler<ActionEvent> onAction) {\r\n        this.onAction.set(onAction);\r\n    }\r\n\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onAction.get();\r\n    }\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n\r\n    /* **************************************************************************\r\n     *                                                                          *\r\n     * CSS                                                                      *\r\n     *                                                                          *\r\n     ****************************************************************************/\r\n\r\n    private static final String DEFAULT_STYLE_CLASS = ""switch"";\r\n    private static final PseudoClass SELECTED = PseudoClass.getPseudoClass(""selected"");\r\n}\r\n\r\njava\r\npublic class MainController {\r\n\r\n    @FXML\r\n    private Switch mySwitch;\r\n\r\n    @FXML\r\n    private void handleToggle(ActionEvent event) {\r\n        System.out.println(""Switch toggled! New state: "" + mySwitch.isSelected());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.stage.Stage;\r\n\r\npublic class ClickableLabelRegion_Demo extends Application {\r\n\r\n    private final static String CSS = ""data:text/css,"" +\r\n            """"""\r\n            .test-label {\r\n                -fx-background-color: blue;\r\n                -fx-border-color: red;\r\n                -fx-font-family: ""Harlow Solid Italic"";\r\n                -fx-font-size: 100;\r\n                -fx-padding: -40 20 0 20;\r\n            }\r\n            """""";\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        HBox root = new HBox();\r\n        root.setStyle(""-fx-background-color: black; -fx-padding:40px; -fx-spacing:50px;"");\r\n        root.getChildren().add(createTestLabel(""Placeholder\nText""));\r\n        Scene scene = new Scene(root, 800, 400);\r\n        scene.getStylesheets().add(CSS);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Clickable Label Region Demo"");\r\n        stage.show();\r\n    }\r\n\r\n    private StackPane createTestLabel(String text) {\r\n        Label testLabel = new Label(text);\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n        // Create a precise hitbox (adjusted to match visible region)\r\n        Rectangle hitbox = new Rectangle(220, 120); // Adjust size based on observation\r\n        hitbox.setFill(Color.TRANSPARENT); // Invisible overlay\r\n        hitbox.setMouseTransparent(false); // Ensure it captures events\r\n\r\n        hitbox.setOnMouseEntered(event -> doSomething());\r\n        hitbox.setOnMouseExited(event -> doSomethingElse());\r\n\r\n        return new StackPane(testLabel, hitbox);\r\n    }\r\n\r\n    private void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    private void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"package com.example.filter;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletRequestWrapper;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n@Component\r\npublic class JsonRequestHeaderFilter implements Filter {\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\r\n            throws IOException, ServletException {\r\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n\r\n        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(httpRequest) {\r\n            @Override\r\n            public Enumeration<String> getHeaders(String name) {\r\n                if (""Accept"".equalsIgnoreCase(name)) {\r\n                    Set<String> customHeaders = new HashSet<>();\r\n                    Enumeration<String> existingHeaders = super.getHeaders(name);\r\n\r\n                    while (existingHeaders.hasMoreElements()) {\r\n                        customHeaders.add(existingHeaders.nextElement());\r\n                    }\r\n\r\n                    // Force JSON response if not explicitly set\r\n                    customHeaders.add(""application/json"");\r\n\r\n                    return Collections.enumeration(customHeaders);\r\n                }\r\n                return super.getHeaders(name);\r\n            }\r\n\r\n            @Override\r\n            public String getHeader(String name) {\r\n                if (""Accept"".equalsIgnoreCase(name)) {\r\n                    return ""application/json"";\r\n                }\r\n                return super.getHeader(name);\r\n            }\r\n        };\r\n\r\n        chain.doFilter(requestWrapper, response);\r\n    }\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) {\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n\r\n    @Bean\r\n    public HttpMessageConverter<Object> customJackson2HttpMessageConverter() {\r\n        return new MappingJackson2HttpMessageConverter();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import org.springframework.context.annotation.Bean;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport static org.springframework.security.authorization.AuthorityAuthorizationManager.hasIpAddress;\r\n\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration {\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(authorizeRequests -> authorizeRequests\r\n                .requestMatchers(""/"").access(hasIpAddress(""127.0.0.1"")) // FIXED: Use method reference\r\n                .anyRequest().authenticated()\r\n            )\r\n            .formLogin(Customizer.withDefaults())\r\n            .httpBasic(Customizer.withDefaults());\r\n\r\n        return http.build();\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\r\nimport java.io.IOException;\r\nimport java.util.logging.Logger;\r\n\r\npublic class JwtAuthenticationFailureHandler implements AuthenticationFailureHandler {\r\n    private static final Logger LOGGER = Logger.getLogger(JwtAuthenticationFailureHandler.class.getName());\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) \r\n            throws IOException, ServletException {\r\n        LOGGER.warning(""JWT Authentication failed: "" + exception.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ""Invalid or expired token"");\r\n    }\r\n}\r\n\r\njava\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.web.AuthenticationEntryPoint;\r\nimport java.io.IOException;\r\nimport java.util.logging.Logger;\r\n\r\npublic class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n    private static final Logger LOGGER = Logger.getLogger(CustomAuthenticationEntryPoint.class.getName());\r\n\r\n    @Override\r\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) \r\n            throws IOException, ServletException {\r\n        LOGGER.warning(""Authentication is required: "" + authException.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ""Authentication is required"");\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration {\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http, AuthenticationManager authenticationManager) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(authorize -> authorize\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint()) // Handles missing tokens\r\n            )\r\n            .exceptionHandling(exceptions -> exceptions\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint()) // Additional logging\r\n            );\r\n\r\n        // Add custom failure handler to the default BearerTokenAuthenticationFilter\r\n        BearerTokenAuthenticationFilter bearerTokenFilter = new BearerTokenAuthenticationFilter(authenticationManager);\r\n        bearerTokenFilter.setAuthenticationFailureHandler(new JwtAuthenticationFailureHandler());\r\n\r\n        http.addFilterBefore(bearerTokenFilter, BearerTokenAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    public String week;\r\n    public String source;\r\n    public String destination;\r\n    public Integer qty;\r\n\r\n    Record(String week, String source, String destination, Integer qty) {\r\n        this.week = week;\r\n        this.source = source;\r\n        this.destination = destination;\r\n        this.qty = qty;\r\n    }\r\n}\r\n\r\nclass Result {\r\n    public String week;\r\n    public String source;\r\n    public String destination;\r\n    public double percentage;\r\n\r\n    Result(String week, String source, String destination, double percentage) {\r\n        this.week = week;\r\n        this.source = source;\r\n        this.destination = destination;\r\n        this.percentage = percentage;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return week + "" "" + source + "" "" + destination + "" "" + String.format(""%.2f%%"", percentage);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(""week1"", ""source1"", ""destination1"", 100),\r\n            new Record(""week1"", ""source1"", ""destination2"", 200),\r\n            new Record(""week1"", ""source2"", ""destination1"", 200),\r\n            new Record(""week1"", ""source2"", ""destination2"", 100),\r\n            new Record(""week2"", ""source1"", ""destination1"", 200),\r\n            new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        // Step 1: Compute total quantity per (week, source)\r\n        Map<String, Map<String, Integer>> totalQuantityMap = records.stream()\r\n            .collect(Collectors.groupingBy(\r\n                rec -> rec.week, \r\n                Collectors.groupingBy(\r\n                    rec -> rec.source, \r\n                    Collectors.summingInt(rec -> rec.qty)\r\n                )\r\n            ));\r\n\r\n        // Step 2: Compute percentage and map to results\r\n        List<Result> result = records.stream()\r\n            .map(rec -> {\r\n                int totalQty = totalQuantityMap.get(rec.week).get(rec.source);\r\n                double percentage = (rec.qty * 100.0) / totalQty;\r\n                return new Result(rec.week, rec.source, rec.destination, percentage);\r\n            })\r\n            .collect(Collectors.toList());\r\n\r\n        // Print result\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n\r\njava\r\n     double percentage = (rec.qty * 100.0) / totalQty;\r\n     \r\n\r\nweek1 source1 destination1 33.33%\r\nweek1 source1 destination2 66.67%\r\nweek1 source2 destination1 66.67%\r\nweek1 source2 destination2 33.33%\r\nweek2 source1 destination1 50.00%\r\nweek2 source1 destination2 50.00%\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import java.lang.foreign.*;\r\nimport java.util.Objects;\r\nimport java.util.function.Function;\r\n\r\npublic final class LargeArray<T> {\r\n    private final MemorySegment segment;\r\n    private final long length;\r\n    private final AddressLayout layout;\r\n    private final ElementDescriptor<T> descriptor;\r\n\r\n    public LargeArray(SegmentAllocator allocator, ElementDescriptor<T> descriptor, long length) {\r\n        this.segment = allocator.allocate(descriptor.layout(), length);\r\n        this.layout = ValueLayout.ADDRESS.withTargetLayout(descriptor.layout());\r\n        this.descriptor = descriptor;\r\n        this.length = length;\r\n    }\r\n\r\n    public AddressLayout layout() {\r\n        return layout;\r\n    }\r\n\r\n    public MemorySegment address() {\r\n        return segment;\r\n    }\r\n\r\n    public T get(long index) {\r\n        return descriptor.elementFrom(segment.getAtIndex(layout, index));\r\n    }\r\n\r\n    public void set(long index, T element) {\r\n        segment.setAtIndex(layout, index, descriptor.addressOf(element));\r\n    }\r\n\r\n    public long length() {\r\n        return length;\r\n    }\r\n}\r\n\r\njava\r\nimport java.lang.foreign.MemoryLayout;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.util.Objects;\r\nimport java.util.function.Function;\r\n\r\npublic interface ElementDescriptor<T> {\r\n\r\n    static <T> ElementDescriptor<T> of(\r\n        MemoryLayout layout,\r\n        Function<MemorySegment, T> toElement,\r\n        Function<T, MemorySegment> toAddress) {\r\n        \r\n        Objects.requireNonNull(layout);\r\n        Objects.requireNonNull(toElement);\r\n        Objects.requireNonNull(toAddress);\r\n        \r\n        return new ElementDescriptor<>() {\r\n            @Override\r\n            public MemoryLayout layout() {\r\n                return layout;\r\n            }\r\n\r\n            @Override\r\n            public T elementFrom(MemorySegment segment) {\r\n                return segment.equals(MemorySegment.NULL) ? null : toElement.apply(segment);\r\n            }\r\n\r\n            @Override\r\n            public MemorySegment addressOf(T element) {\r\n                return (element == null) ? MemorySegment.NULL : toAddress.apply(element);\r\n            }\r\n        };\r\n    }\r\n\r\n    MemoryLayout layout();\r\n    T elementFrom(MemorySegment segment);\r\n    MemorySegment addressOf(T element);\r\n}\r\n\r\njava\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.SegmentAllocator;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class LargeIntArray {\r\n    public static final ValueLayout.OfInt LAYOUT = ValueLayout.JAVA_INT_UNALIGNED;\r\n\r\n    private final MemorySegment segment;\r\n    private final long length;\r\n\r\n    public LargeIntArray(SegmentAllocator allocator, long length) {\r\n        this.segment = allocator.allocate(LAYOUT, length);\r\n        this.length = length;\r\n    }\r\n\r\n    public int get(long index) {\r\n        return segment.getAtIndex(LAYOUT, index);\r\n    }\r\n\r\n    public void set(long index, int element) {\r\n        segment.setAtIndex(LAYOUT, index, element);\r\n    }\r\n\r\n    public long length() {\r\n        return length;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Bullet {\r\n    private static final Map<BufferedImage, BufferedImage[]> cache = new HashMap<>();\r\n    private final BufferedImage[] preRotatedImages;\r\n    private int x, y;\r\n    private int angle;\r\n\r\n    public Bullet(BufferedImage originalImage, int startX, int startY, int startAngle) {\r\n        this.preRotatedImages = cache.computeIfAbsent(originalImage, Bullet::precomputeRotations);\r\n        this.x = startX;\r\n        this.y = startY;\r\n        this.angle = startAngle;\r\n    }\r\n\r\n    private static BufferedImage[] precomputeRotations(BufferedImage img) {\r\n        BufferedImage[] rotations = new BufferedImage[360];\r\n        for (int i = 0; i < 360; i++) {\r\n            rotations[i] = rotateImage(img, i);\r\n        }\r\n        return rotations;\r\n    }\r\n\r\n    private static BufferedImage rotateImage(BufferedImage img, int angle) {\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        int newW = (int) Math.ceil(Math.sqrt(w * w + h * h));\r\n        BufferedImage rotated = new BufferedImage(newW, newW, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.translate(newW / 2.0, newW / 2.0);\r\n        g2d.rotate(Math.toRadians(angle));\r\n        g2d.translate(-w / 2.0, -h / 2.0);\r\n        g2d.drawImage(img, 0, 0, null);\r\n        g2d.dispose();\r\n        return rotated;\r\n    }\r\n\r\n    public void setAngle(int newAngle) {\r\n        this.angle = (newAngle % 360 + 360) % 360;\r\n    }\r\n\r\n    public void render(Graphics g) {\r\n        g.drawImage(preRotatedImages[angle], x, y, null);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"private String Fullname;\r\n\r\njava\r\nprivate String fullname;\r\n\r\njava\r\n@Column(name = ""Fullname"")\r\npublic String getFullname() {\r\n    return fullname;\r\n}\r\n\r\njava\r\nsearch = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n\r\njava\r\npublic String getFullname() {\r\n    return Fullname;\r\n}\r\n\r\njava\r\npublic String getFullname() {\r\n    return fullname;\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"\r\nsrc/main/java/com/example/customcomponent/\r\n    ??? CustomComponent.java\r\n    ??? custom-component.fxml\r\nsrc/main/java/com/example/customcomponentdemo/\r\n    ??? Main.java\r\n    ??? MenuController.java\r\n    ??? menu.fxml\r\nsrc/main/resources/\r\n    ??? com/example/customcomponent/custom-component.fxml\r\n    ??? com/example/customcomponentdemo/menu.fxml\r\n\r\njava\r\npackage com.example.customcomponent;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class CustomComponent extends VBox {\r\n    \r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    \r\n    public CustomComponent() {\r\n        FXMLLoader loader = new FXMLLoader(\r\n                CustomComponent.class.getResource(""custom-component.fxml"")\r\n        );\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to load CustomComponent.fxml"", e);\r\n        }\r\n    }\r\n    \r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<VBox xmlns=""http://javafx.com/javafx/20""\r\n      xmlns:fx=""http://javafx.com/fxml/1""\r\n      fx:controller=""com.example.customcomponent.CustomComponent"">\r\n\r\n    <children>\r\n        <Button fx:id=""plusBtn"" text=""+"" />\r\n        <Label fx:id=""label"" text=""Label"" />\r\n        <Button fx:id=""minusBtn"" text=""-"" />\r\n    </children>\r\n</VBox>\r\n\r\njava\r\npackage com.example.customcomponentdemo;\r\n\r\nimport com.example.customcomponent.CustomComponent;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class MenuController {\r\n\r\n    @FXML private CustomComponent customComponent;\r\n\r\n    public void initialize() {\r\n        customComponent.newText(""Test"");\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import com.example.customcomponent.CustomComponent?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/20""\r\n           xmlns:fx=""http://javafx.com/fxml/1""\r\n           fx:controller=""com.example.customcomponentdemo.MenuController"">\r\n\r\n    <children>\r\n        <CustomComponent fx:id=""customComponent"" />\r\n    </children>\r\n\r\n</StackPane>\r\n\r\njava\r\npackage com.example.customcomponentdemo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(""menu.fxml""));\r\n        Scene scene = new Scene(fxmlLoader.load(), 400, 300);\r\n        stage.setTitle(""Custom Component Demo"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n\r\njava\r\nmodule com.example.customcomponentdemo {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n\r\n    opens com.example.customcomponent to javafx.fxml;\r\n    opens com.example.customcomponentdemo to javafx.fxml;\r\n\r\n    exports com.example.customcomponent;\r\n    exports com.example.customcomponentdemo;\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n\r\n        openBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\njava\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        Button algoButton = view.findViewById(R.id.algo_button);\r\n        Button courseButton = view.findViewById(R.id.course_button);\r\n\r\n        algoButton.setOnClickListener(v -> {\r\n            Toast.makeText(getActivity(), ""Algorithm Shared"", Toast.LENGTH_SHORT).show();\r\n            dismiss();\r\n        });\r\n\r\n        courseButton.setOnClickListener(v -> {\r\n            Toast.makeText(getActivity(), ""Course Shared"", Toast.LENGTH_SHORT).show();\r\n            dismiss();\r\n        });\r\n\r\n        // Set full height\r\n        View parent = (View) view.getParent();\r\n        if (parent != null) {\r\n            BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(parent);\r\n            behavior.setState(BottomSheetBehavior.STATE_EXPANDED); // Make it expanded\r\n            behavior.setPeekHeight(ViewGroup.LayoutParams.MATCH_PARENT); // Full height\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical""\r\n    android:padding=""16dp"">\r\n\r\n    <Button\r\n        android:id=""@+id/algo_button""\r\n        android:layout_width=""match_parent""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Share Algorithm"" />\r\n\r\n    <Button\r\n        android:id=""@+id/course_button""\r\n        android:layout_width=""match_parent""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Share Course""\r\n        android:layout_marginTop=""8dp""/>\r\n</LinearLayout>\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import javafx.animation.Transition;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.CssMetaData;\r\nimport javafx.css.SimpleStyleableObjectProperty;\r\nimport javafx.css.Styleable;\r\nimport javafx.css.StyleableObjectProperty;\r\nimport javafx.css.converter.PaintConverter;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class ExampleApp extends Application {\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n        private final SimpleObjectProperty<Transition> transition = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            transition.set(createTransition());\r\n            transition.get().play();\r\n\r\n            // Listeners to update animation when CSS color variables change\r\n            color1.addListener((obs, oldVal, newVal) -> restartAnimation());\r\n            color2.addListener((obs, oldVal, newVal) -> restartAnimation());\r\n\r\n            // Play animation only when added to the scene\r\n            sceneProperty().addListener((obs, oldScene, newScene) -> {\r\n                if (newScene != null) {\r\n                    transition.get().play();\r\n                } else {\r\n                    transition.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void restartAnimation() {\r\n            transition.get().stop();\r\n            transition.set(createTransition());\r\n            transition.get().play();\r\n        }\r\n\r\n        private Transition createTransition() {\r\n            return new Transition() {\r\n                {\r\n                    setCycleDuration(Duration.seconds(1));\r\n                    setCycleCount(INDEFINITE);\r\n                    setAutoReverse(false);\r\n                }\r\n\r\n                @Override\r\n                protected void interpolate(double frac) {\r\n                    // Interpolate color smoothly\r\n                    setFill(color1.get().interpolate(color2.get(), frac));\r\n                }\r\n            };\r\n        }\r\n\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n        );\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                ""-color1"", PaintConverter.getInstance(), Color.RED\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect node) {\r\n                    return !node.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableObjectProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                    return node.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n                ""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect node) {\r\n                    return !node.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableObjectProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                    return node.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"package com.example.app;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.text.ParsePosition;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class Main extends Application {\r\n\r\n    private static final double MIN = -20.0;\r\n    private static final double MAX = 20.0;\r\n    private static final double STEP = 0.25;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        var converter = new ConstrainedDoubleStringConverter(MIN, MAX, STEP);\r\n\r\n        var factory = new SpinnerValueFactory.DoubleSpinnerValueFactory(MIN, MAX, 0.0, STEP);\r\n        factory.setConverter(converter);\r\n\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            if (change.isContentChange()) {\r\n                String newText = change.getControlNewText();\r\n                if (!converter.isParsable(newText)) {\r\n                    return null;\r\n                }\r\n            }\r\n            return change;\r\n        };\r\n\r\n        var formatter = new TextFormatter<>(converter, 0.0, filter);\r\n        \r\n        var spinner = new Spinner<>(factory);\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        spinner.setEditable(true);\r\n\r\n        primaryStage.setScene(new Scene(new StackPane(spinner), 500, 300));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(Main.class, args);\r\n    }\r\n}\r\n\r\nclass ConstrainedDoubleStringConverter extends StringConverter<Double> {\r\n\r\n    private final DecimalFormat format = new DecimalFormat(""+0.00;-0.00"");\r\n    private final double min;\r\n    private final double max;\r\n    private final double step;\r\n\r\n    public ConstrainedDoubleStringConverter(double min, double max, double step) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n    }\r\n\r\n    @Override\r\n    public String toString(Double value) {\r\n        if (value == null) {\r\n            return ""+0.00"";\r\n        }\r\n        return format.format(value).replace(""."", "","");\r\n    }\r\n\r\n    @Override\r\n    public Double fromString(String value) {\r\n        if (value == null || value.isEmpty()) {\r\n            return 0.0;\r\n        }\r\n        value = value.replace("","", ""."");\r\n        ParsePosition pos = new ParsePosition(0);\r\n        Number num = format.parse(value, pos);\r\n        if (pos.getIndex() != value.length()) {\r\n            return null;\r\n        }\r\n        double parsed = num.doubleValue();\r\n        return Math.max(min, Math.min(max, Math.round(parsed / step) * step));\r\n    }\r\n\r\n    public boolean isParsable(String value) {\r\n        try {\r\n            fromString(value);\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"plaintext\r\n   Authorization: Bearer <access_token>\r\n   \r\njava\r\n   private void setCurrentUser(final String userID) {\r\n       try {\r\n           UserModel user = userService.getUserForUID(userID);\r\n           userService.setCurrentUser(user);\r\n           sessionService.setAttribute(ACTING_USER_UID, userID);\r\n           LOG.info(""Successfully set current user: "" + userID);\r\n       } catch (UnknownIdentifierException e) {\r\n           LOG.error(""User not found: "" + userID, e);\r\n           throw new AccessDeniedException(""Invalid user ID provided."");\r\n       }\r\n   }\r\n   \r\nsh\r\n   curl -X POST ""https://your-hybris-server/oauth/token"" \\r\n        -H ""Content-Type: application/x-www-form-urlencoded"" \\r\n        -d ""grant_type=password&client_id=trusted_client&client_secret=secret&username=test@test.com&password=yourpassword""\r\n   \r\nsh\r\n   curl -X GET ""https://your-hybris-server/your-endpoint"" \\r\n        -H ""Authorization: Bearer your_access_token""\r\n   "
0,1,misclassified_in_Test_5.csv.csv,"import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class ReactorApp {\r\n\r\n    record Person(String name) {}\r\n\r\n    public static Mono<String> functionReturningMono(Person person) {\r\n        return Mono.just(""Hello "" + person.name());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<Person> persons = List.of(\r\n                new Person(""John""),\r\n                new Person(""Mike""),\r\n                new Person(""Stacey"")\r\n        );\r\n\r\n        Map<String, String> result = Flux.fromIterable(persons)\r\n                .flatMap(person -> functionReturningMono(person)\r\n                        .map(response -> Map.entry(person.name(), response)))\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n\r\n        System.out.println(result);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import javax.net.ssl.SSLEngine;\r\nimport javax.net.ssl.X509ExtendedKeyManager;\r\nimport javax.net.ssl.X509KeyManager;\r\nimport java.net.Socket;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class AliasSpecificKeyManager extends X509ExtendedKeyManager {\r\n\r\n    private final X509KeyManager delegate;\r\n    private final String alias;\r\n\r\n    public AliasSpecificKeyManager(X509KeyManager delegate, String alias) {\r\n        this.delegate = delegate;\r\n        this.alias = alias;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        // If the configured alias is available, always return it\r\n        String[] aliases = getClientAliases(keyType[0], issuers);\r\n        if (aliases != null) {\r\n            for (String a : aliases) {\r\n                if (a.equals(alias)) {\r\n                    return alias;\r\n                }\r\n            }\r\n        }\r\n        // fallback to default selection\r\n        return delegate.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        String[] aliases = getClientAliases(keyType[0], issuers);\r\n        if (aliases != null) {\r\n            for (String a : aliases) {\r\n                if (a.equals(alias)) {\r\n                    return alias;\r\n                }\r\n            }\r\n        }\r\n        return delegate.chooseEngineClientAlias(keyType, issuers, engine);\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return delegate.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return delegate.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return delegate.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\njava\r\nimport javax.net.ssl.KeyManager;\r\nimport javax.net.ssl.KeyManagerFactory;\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport javax.net.ssl.TrustManagerFactory;\r\nimport java.io.FileInputStream;\r\nimport java.security.KeyStore;\r\nimport java.security.GeneralSecurityException;\r\nimport java.io.IOException;\r\n\r\npublic class RedisTlsUtil {\r\n\r\n    public static SSLSocketFactory createSslSocketFactory(\r\n            String userCertPath, String userCertPassword,\r\n            String caCertPath, String caCertPassword,\r\n            String desiredAlias) throws IOException, GeneralSecurityException {\r\n\r\n        // Load the keystore with the client certificate(s)\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream keyStoreStream = new FileInputStream(userCertPath)) {\r\n            keyStore.load(keyStoreStream, userCertPassword.toCharArray());\r\n        }\r\n\r\n        // Load the truststore with the CA certificate(s)\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream trustStoreStream = new FileInputStream(caCertPath)) {\r\n            trustStore.load(trustStoreStream, caCertPassword.toCharArray());\r\n        }\r\n\r\n        // Initialize TrustManagerFactory\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        // Initialize KeyManagerFactory\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n\r\n        // Wrap the X509KeyManager to enforce the desired alias\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new AliasSpecificKeyManager((X509KeyManager) keyManagers[i], desiredAlias);\r\n            }\r\n        }\r\n\r\n        // Create and initialize the SSLContext\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\njava\r\nimport redis.clients.jedis.DefaultJedisClientConfig;\r\nimport redis.clients.jedis.JedisPooled;\r\nimport redis.clients.jedis.JedisClientConfig;\r\nimport redis.clients.jedis.HostAndPort;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public void testWithTls() throws Exception {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        // Create SSLSocketFactory specifying the desired alias (e.g., \""my_cert\"") \r\n        SSLSocketFactory sslFactory = RedisTlsUtil.createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""my_cert""  // desired alias in the keystore\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true)\r\n                .sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        try (JedisPooled jedis = new JedisPooled(address, config)) {\r\n            jedis.set(""foo"", ""bar"");\r\n            System.out.println(jedis.get(""foo"")); // should print \""bar\""\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new RedisTlsTest().testWithTls();\n    }\n}\n""}\r\n\r\n\r\nBelow is a complete solution demonstrating how to use a custom `X509KeyManager` wrapper that always chooses a specified alias. This lets you control which client certificate is used from a keystore with multiple certificates when establishing a TLS connection (for example, with Redis).\r\n\r\n### **Step 1. Create a Custom KeyManager Wrapper**\r\n\r\nThis class wraps the default X509KeyManager and always returns the alias you want when the client certificate is needed.\r\n\r\n\r\n\r\n\r\n### **Step 2. Configure the SSLSocketFactory**\r\n\r\nIn your SSL configuration method, load your keystore and truststore, then wrap your default key managers with the custom `AliasSpecificKeyManager` so that your desired alias is always chosen.\r\n\r\n\r\n\r\n\r\n### **Step 3. Connect to Redis with Jedis Using the Custom SSLSocketFactory**\r\n\r\nNow, when configuring your Redis connection with Jedis, pass the custom SSLSocketFactory.\r\n\r\n\r\njava\r\nimport javax.net.ssl.SSLEngine;\r\nimport javax.net.ssl.X509ExtendedKeyManager;\r\nimport javax.net.ssl.X509KeyManager;\r\nimport java.net.Socket;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class AliasSpecificKeyManager extends X509ExtendedKeyManager {\r\n\r\n    private final X509KeyManager delegate;\r\n    private final String desiredAlias;\r\n\r\n    public AliasSpecificKeyManager(X509KeyManager delegate, String desiredAlias) {\r\n        this.delegate = delegate;\r\n        this.desiredAlias = desiredAlias;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        // If the desired alias exists among the available aliases, return it.\r\n        String[] availableAliases = getClientAliases(keyType[0], issuers);\r\n        if (availableAliases != null) {\r\n            for (String alias : availableAliases) {\r\n                if (alias.equals(desiredAlias)) {\r\n                    return desiredAlias;\r\n                }\r\n            }\r\n        }\r\n        // Fallback to the delegate if our alias isn't found.\r\n        return delegate.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        String[] availableAliases = getClientAliases(keyType[0], issuers);\r\n        if (availableAliases != null) {\r\n            for (String alias : availableAliases) {\r\n                if (alias.equals(desiredAlias)) {\r\n                    return desiredAlias;\r\n                }\r\n            }\r\n        }\r\n        return delegate.chooseEngineClientAlias(keyType, issuers, engine);\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return delegate.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return delegate.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return delegate.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\njava\r\nimport javax.net.ssl.KeyManager;\r\nimport javax.net.ssl.KeyManagerFactory;\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport javax.net.ssl.TrustManagerFactory;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.KeyStore;\r\nimport java.security.GeneralSecurityException;\r\n\r\npublic class RedisTlsUtil {\r\n\r\n    public static SSLSocketFactory createSslSocketFactory(\r\n            String userCertPath, String userCertPassword,\r\n            String caCertPath, String caCertPassword,\r\n            String desiredAlias) throws IOException, GeneralSecurityException {\r\n\r\n        // Load the keystore containing the client certificates\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream keyStoreStream = new FileInputStream(userCertPath)) {\r\n            keyStore.load(keyStoreStream, userCertPassword.toCharArray());\r\n        }\r\n\r\n        // Load the truststore containing the CA certificates\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream trustStoreStream = new FileInputStream(caCertPath)) {\r\n            trustStore.load(trustStoreStream, caCertPassword.toCharArray());\r\n        }\r\n\r\n        // Initialize TrustManagerFactory with the truststore\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        // Initialize KeyManagerFactory with the keystore\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n\r\n        // Wrap each X509KeyManager with our custom key manager to enforce the desired alias\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new AliasSpecificKeyManager((X509KeyManager) keyManagers[i], desiredAlias);\r\n            }\r\n        }\r\n\r\n        // Create and initialize the SSLContext with the custom KeyManagers and TrustManagers\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\njava\r\nimport redis.clients.jedis.DefaultJedisClientConfig;\r\nimport redis.clients.jedis.JedisClientConfig;\r\nimport redis.clients.jedis.JedisPooled;\r\nimport redis.clients.jedis.HostAndPort;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public void testWithTls() throws Exception {\r\n        // Define your Redis host and port (adjust as needed)\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        // Create an SSLSocketFactory using the keystore and truststore paths and passwords,\r\n        // and specify the alias (e.g., \""my_cert\"") you wish to use for the client certificate.\r\n        SSLSocketFactory sslFactory = RedisTlsUtil.createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""my_cert""  // The alias you wish to use from the keystore\n        );\r\n\r\n        // Configure Jedis to use TLS with the custom SSLSocketFactory\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\n                .ssl(true)\n                .sslSocketFactory(sslFactory)\n                .build();\r\n\r\n        try (JedisPooled jedis = new JedisPooled(address, config)) {\n            jedis.set(\""foo\"", \""bar\"");\n            System.out.println(\""Value from Redis: \"" + jedis.get(\""foo\""));\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new RedisTlsTest().testWithTls();\n    }\n}\n"
0,1,misclassified_in_Test_5.csv.csv,"import javax.swing.*;\r\nimport javax.swing.text.*;\r\n\r\npublic class TestTextArea {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JTextArea textArea = new JTextArea(20, 50);\r\n            JScrollPane scrollPane = new JScrollPane(textArea);\r\n\r\n            int spaceCount = 4;\r\n            ((PlainDocument) textArea.getDocument()).setDocumentFilter(new ChangeTabToSpacesFilter(spaceCount));\r\n\r\n            JFrame frame = new JFrame(""GUI"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(scrollPane);\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n    \r\n    private static class ChangeTabToSpacesFilter extends DocumentFilter {\r\n        private final String spaces;\r\n\r\n        public ChangeTabToSpacesFilter(int spaceCount) {\r\n            this.spaces = "" "".repeat(spaceCount);\r\n        }\r\n\r\n        @Override\r\n        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) \r\n                throws BadLocationException {\r\n            if (text.contains(""\t"")) {\r\n                text = text.replace(""\t"", spaces);\r\n            }\r\n            super.replace(fb, offset, length, text, attrs);\r\n        }\r\n\r\n        @Override\r\n        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) \r\n                throws BadLocationException {\r\n            if (string.contains(""\t"")) {\r\n                string = string.replace(""\t"", spaces);\r\n            }\r\n            super.insertString(fb, offset, string, attr);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\r\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\npublic class StringToDateDeserializer extends StdDeserializer<Date> {\r\n\r\n    private final StdDateFormat df = new StdDateFormat();\r\n\r\n    public StringToDateDeserializer() {\r\n        super(Date.class);\r\n    }\r\n\r\n    @Override\r\n    public Date deserialize(JsonParser jsonParser, DeserializationContext ctxt) throws IOException {\r\n        String dateStr = jsonParser.getText();\r\n        if (StringUtils.isEmpty(dateStr)) {\r\n            return null;\r\n        }\r\n        try {\r\n            return df.parse(dateStr);\r\n        } catch (ParseException e) {\r\n            throw new IOException(""Invalid date passed, ISO 8601 is expected"", e);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.MockitoJUnitRunner;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n\r\n    @Mock\r\n    private JsonParser jsonParser;\r\n\r\n    @Mock\r\n    private DeserializationContext deserializationContext;\r\n\r\n    @Before\r\n    public void setup() {\r\n        deserializer = new StringToDateDeserializer();\r\n    }\r\n\r\n    @Test\r\n    public void testValidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""2020-07-10T15:00:00.000Z"");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNotNull(result);\r\n        assertEquals(1594393200000L, result.getTime()); // Epoch time for 2020-07-10T15:00:00.000Z\r\n    }\r\n\r\n    @Test\r\n    public void testNullOrEmptyDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test(expected = IOException.class)\r\n    public void testInvalidDateFormat() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        deserializer.deserialize(jsonParser, deserializationContext);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import com.nimbusds.jose.jwk.JWK;\r\nimport com.nimbusds.jose.jwk.JWKSet;\r\nimport com.nimbusds.jose.jwk.OctetSequenceKey;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.aot.hint.RuntimeHints;\r\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;\r\nimport org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.util.Base64;\r\nimport java.util.List;\r\n\r\n@Slf4j\r\n@Configuration\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\n@ConfigurationProperties(prefix = ""security.jwt"")\r\npublic class SecurityConfig {\r\n\r\n    private String secret;\r\n    private final TokenService tokenService;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc();\r\n\r\n        http.exceptionHandling(exceptions -> exceptions.defaultAuthenticationEntryPointFor(\r\n                        new LoginUrlAuthenticationEntryPoint(""/login""),\r\n                        new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n                .oauth2ResourceServer(resourceServer -> resourceServer.jwt(jwt -> jwt.decoder(jwtDecoder())));\r\n\r\n        http.cors(cors -> cors.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(authz -> authz\r\n                        .requestMatchers(""/hello"").authenticated()\r\n                        .anyRequest().permitAll())\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.decoder(jwtDecoder())))\r\n                .formLogin();\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    AuthorizationServerSettings authorizationServerSettings() {\r\n        return AuthorizationServerSettings.builder().build();\r\n    }\r\n\r\n    @Bean\r\n    WebSecurityCustomizer webSecurityCustomizer() {\r\n        return web -> web.ignoring().requestMatchers(""/h2-console/**"");\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(secret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec).keyID(""customKey"").build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                log.error(""No keys found matching selection criteria!"");\r\n            } else {\r\n                log.info(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(secret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import javafx.application.Application;\r\nimport javafx.css.PseudoClass;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerDemo extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        PseudoClass disabledUp = PseudoClass.getPseudoClass(""disable-up"");\r\n        PseudoClass disabledDown = PseudoClass.getPseudoClass(""disable-down"");\r\n\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n\r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n\r\n        spinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\n            updateButtonState(spinnerMin, disabledUp, spinnerMin.getValue() == spinnerMax.getValue());\r\n            updateButtonState(spinnerMax, disabledDown, spinnerMin.getValue() == spinnerMax.getValue());\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\n            updateButtonState(spinnerMin, disabledUp, spinnerMin.getValue() == spinnerMax.getValue());\r\n            updateButtonState(spinnerMax, disabledDown, spinnerMin.getValue() == spinnerMax.getValue());\r\n        });\r\n\r\n        VBox root = new VBox(10, spinnerMin, spinnerMax);\r\n        root.setPadding(new Insets(20));\r\n        stage.setScene(new Scene(root, 300, 200));\r\n        stage.setTitle(""Spinner Min/Max Control"");\r\n        stage.show();\r\n    }\r\n\r\n    private void updateButtonState(Spinner<Integer> spinner, PseudoClass pseudoClass, boolean disable) {\r\n        spinner.lookup("".increment-arrow-button"").pseudoClassStateChanged(pseudoClass, disable);\r\n        spinner.lookup("".decrement-arrow-button"").pseudoClassStateChanged(pseudoClass, disable);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n\r\ncss\r\n.spinner .increment-arrow-button:disabled,\r\n.spinner .decrement-arrow-button:disabled {\r\n    -fx-opacity: 0.4;\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"public interface CharacterGenerator {\r\n    GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game);\r\n}\r\n\r\njava\r\nprivate static class MagicianGenerator implements CharacterGenerator {\r\n    @Override\r\n    public GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game) {\r\n        return new Magician(x, y, sizeX, sizeY, field, player, game);\r\n    }\r\n}\r\n\r\nprivate static class GoblinGenerator implements CharacterGenerator {\r\n    @Override\r\n    public GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game) {\r\n        return new Goblin(x, y, player, field, game, sizeX, sizeY);\r\n    }\r\n}\r\n\r\njava\r\nprivate void positionCharacter(CharacterGenerator generator) {\r\n    int x, y;\r\n    boolean characterCreated = false;\r\n\r\n    while (!characterCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            GameCharacter character = generator.createCharacter(x, y, sizeX, sizeY, field, player, this);\r\n            field.setFieldable(x, y, character);\r\n            characterCreated = true;\r\n        }\r\n    }\r\n}\r\n\r\njava\r\npositionCharacter(new MagicianGenerator());\r\npositionCharacter(new GoblinGenerator());\r\n"
0,1,misclassified_in_Test_5.csv.csv,"spring:\r\n  elasticsearch:\r\n    uris: https://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certificate: classpath:elasticsearch-ca.crt\r\n\r\njava\r\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\r\nimport co.elastic.clients.elasticsearch.ElasticsearchClient;\r\nimport co.elastic.clients.json.jackson.JacksonJsonpMapper;\r\nimport org.apache.http.auth.AuthScope;\r\nimport org.apache.http.auth.UsernamePasswordCredentials;\r\nimport org.apache.http.impl.client.BasicCredentialsProvider;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\r\nimport org.apache.http.impl.nio.reactor.IOReactorConfig;\r\nimport org.apache.http.ssl.SSLContextBuilder;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestClientBuilder;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.io.Resource;\r\nimport javax.net.ssl.SSLContext;\r\nimport java.io.InputStream;\r\nimport java.security.KeyStore;\r\nimport java.security.cert.Certificate;\r\nimport java.security.cert.CertificateFactory;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Value(""${spring.elasticsearch.uris}"")\r\n    private String elasticsearchUrl;\r\n\r\n    @Value(""${spring.elasticsearch.username}"")\r\n    private String username;\r\n\r\n    @Value(""${spring.elasticsearch.password}"")\r\n    private String password;\r\n\r\n    @Value(""${spring.elasticsearch.ssl.certificate}"")\r\n    private Resource certificatePath;\r\n\r\n    @Bean\r\n    public RestClient restClient() throws Exception {\r\n        // Load the certificate\r\n        CertificateFactory factory = CertificateFactory.getInstance(""X.509"");\r\n        try (InputStream is = certificatePath.getInputStream()) {\r\n            Certificate certificate = factory.generateCertificate(is);\r\n\r\n            KeyStore keyStore = KeyStore.getInstance(""pkcs12"");\r\n            keyStore.load(null, null);\r\n            keyStore.setCertificateEntry(""elasticsearch"", certificate);\r\n\r\n            SSLContext sslContext = SSLContextBuilder.create()\r\n                    .loadTrustMaterial(keyStore, null)\r\n                    .build();\r\n\r\n            BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n            credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\r\n\r\n            return RestClient.builder(org.apache.http.HttpHost.create(elasticsearchUrl))\r\n                    .setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder\r\n                            .setSSLContext(sslContext)\r\n                            .setDefaultCredentialsProvider(credentialsProvider)\r\n                            .setDefaultIOReactorConfig(IOReactorConfig.custom()\r\n                                    .setIoThreadCount(Runtime.getRuntime().availableProcessors())\r\n                                    .build()))\r\n                    .build();\r\n        }\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient elasticsearchClient(RestClient restClient) {\r\n        RestClientTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\n        return new ElasticsearchClient(transport);\r\n    }\r\n}\r\n\r\njava\r\n@Service\r\npublic class ElasticSearchService {\r\n    \r\n    private final ElasticsearchOperations elasticsearchOperations;\r\n\r\n    public ElasticSearchService(ElasticsearchOperations elasticsearchOperations) {\r\n        this.elasticsearchOperations = elasticsearchOperations;\r\n    }\r\n\r\n    public void search(String indexName) {\r\n        SearchHits<MyDocument> hits = elasticsearchOperations.search(\r\n                new NativeSearchQueryBuilder()\r\n                        .withQuery(QueryBuilders.matchAllQuery())\r\n                        .build(),\r\n                MyDocument.class\r\n        );\r\n\r\n        hits.forEach(hit -> System.out.println(hit.getContent()));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import java.io.*;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport com.lowagie.text.DocumentException;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport org.xml.sax.SAXException;\r\n\r\npublic class HtmlToPdfGenerator {\r\n\r\n    public static void main(String[] args) throws DocumentException, IOException, SAXException {\r\n        // HTML content with proper encoding and a reference to an embedded font\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""    <style>\n"" +\r\n                ""        @font-face {\n"" +\r\n                ""            font-family: 'DejaVuSans';\n"" +\r\n                ""            src: url('file:///C:/Windows/Fonts/DejaVuSans.ttf'); /* Adjust path if needed */\n"" +\r\n                ""        }\n"" +\r\n                ""        body { font-family: 'DejaVuSans', sans-serif; }\n"" +\r\n                ""    </style>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>??????, ???! (Hello, World!)</h3>\n"" +  // Cyrillic text\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        // Define output PDF path\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        // Initialize iTextRenderer\r\n        ITextRenderer renderer = new ITextRenderer();\r\n\r\n        // Load and embed the font\r\n        renderer.getFontResolver().addFont(""C:/Windows/Fonts/DejaVuSans.ttf"", true); // Change path if on Linux/Mac\r\n\r\n        // Set document and render\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n\r\n        // Close resources\r\n        outputStream.close();\r\n        System.out.println(""PDF successfully created at: "" + path);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import jakarta.activation.DataHandler;\r\nimport jakarta.activation.DataSource;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\n\r\n/**\r\n * A DataSource implementation that wraps a byte array to prevent automatic conversion to MTOM attachments.\r\n */\r\npublic class ByteArrayDataSource implements DataSource {\r\n    private final byte[] data;\r\n    private final String type;\r\n\r\n    public ByteArrayDataSource(byte[] data, String type) {\r\n        this.data = data;\r\n        this.type = type;\r\n    }\r\n\r\n    @Override\r\n    public InputStream getInputStream() {\r\n        return new ByteArrayInputStream(data);\r\n    }\r\n\r\n    @Override\r\n    public OutputStream getOutputStream() throws IOException {\r\n        throw new IOException(""Not supported"");\r\n    }\r\n\r\n    @Override\r\n    public String getContentType() {\r\n        return type;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return ""ByteArrayDataSource"";\r\n    }\r\n}\r\n\r\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.ws.client.core.WebServiceTemplate;\r\nimport org.springframework.ws.client.core.support.WebServiceGatewaySupport;\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    public void sendDocuments(MyRequest request) {\r\n        template.marshalSendAndReceive(request);\r\n    }\r\n}\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\r\n\r\n@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false); // Disable MTOM to force inline encoding\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nimport jakarta.xml.bind.annotation.*;\r\nimport jakarta.activation.DataHandler;\r\n\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = ""BinaryData"", propOrder = {""blob"", ""extension""})\r\npublic class BinaryData {\r\n    @XmlElement(required = true)\r\n    protected DataHandler blob;\r\n    @XmlElement(required = true)\r\n    protected String extension;\r\n\r\n    public DataHandler getBlob() {\r\n        return blob;\r\n    }\r\n\r\n    public void setBlob(DataHandler blob) {\r\n        this.blob = blob;\r\n    }\r\n\r\n    public String getExtension() {\r\n        return extension;\r\n    }\r\n\r\n    public void setExtension(String extension) {\r\n        this.extension = extension;\r\n    }\r\n}\r\n\r\nimport jakarta.activation.DataHandler;\r\n\r\npublic class BinaryDataBuilder {\r\n    public static BinaryData buildBinaryData(byte[] documentData) {\r\n        BinaryData binaryData = new BinaryData();\r\n        DataSource ds = new ByteArrayDataSource(documentData, ""application/octet-stream"");\r\n        DataHandler dataHandler = new DataHandler(ds);\r\n        binaryData.setBlob(dataHandler);\r\n        binaryData.setExtension(""pdf"");\r\n        return binaryData;\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import android.annotation.SuppressLint;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    EditText txtfirst, txtsecond;\r\n    Button btngenerate;\r\n    ListView li;\r\n    ArrayList<String> list;\r\n    ArrayAdapter<String> arrayAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        txtfirst = findViewById(R.id.txtfirst);\r\n        txtsecond = findViewById(R.id.txtsecond);\r\n        btngenerate = findViewById(R.id.btngenerate);\r\n        li = findViewById(R.id.listview);\r\n\r\n        list = new ArrayList<>();\r\n        arrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, list);\r\n        li.setAdapter(arrayAdapter);\r\n\r\n        btngenerate.setOnClickListener(new View.OnClickListener() {\r\n            @SuppressLint(""DefaultLocale"")\r\n            @Override\r\n            public void onClick(View view) {\r\n                try {\r\n                    long value1 = Long.parseLong(txtfirst.getText().toString().trim());\r\n                    long value2 = Long.parseLong(txtsecond.getText().toString().trim());\r\n\r\n                    if (String.valueOf(value1).length() > 11 || String.valueOf(value2).length() > 11) {\r\n                        Toast.makeText(MainActivity.this, ""Enter a valid 11-digit number!"", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n                    }\r\n\r\n                    if (value1 > value2) {\r\n                        Toast.makeText(MainActivity.this, ""Start value must be smaller than end value!"", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n                    }\r\n\r\n                    list.clear(); // Clear the previous list\r\n                    for (long i = value1; i <= value2; i++) {\r\n                        list.add(String.format(""%011d"", i)); // Ensures the number is always 11 digits\r\n                    }\r\n\r\n                    arrayAdapter.notifyDataSetChanged(); // Notify adapter to refresh ListView\r\n\r\n                } catch (NumberFormatException e) {\r\n                    Toast.makeText(MainActivity.this, ""Invalid input. Please enter numeric values!"", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"package tests;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.lang.instrument.ClassFileTransformer;\r\nimport java.lang.instrument.Instrumentation;\r\nimport java.lang.instrument.IllegalClassFormatException;\r\nimport java.security.ProtectionDomain;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\nimport javassist.ClassPool;\r\nimport javassist.CtClass;\r\nimport javassist.CtMethod;\r\n\r\npublic class MyInstrumentationAgent {\r\n    private static final Map<FileDescriptor, String> openFiles = new ConcurrentHashMap<>();\r\n\r\n    public static void premain(String agentArgs, Instrumentation inst) {\r\n        System.out.println(""Executing premain with args = '"" + agentArgs + ""'"");\r\n        inst.addTransformer(new MyClassTransformer(), true);\r\n    }\r\n\r\n    public static class MyClassTransformer implements ClassFileTransformer {\r\n        @Override\r\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\r\n                                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\r\n            try {\r\n                ClassPool pool = ClassPool.getDefault();\r\n                CtClass ctClass = pool.get(className.replace(""/"", "".""));\r\n\r\n                if (className.equals(""java/io/FileInputStream"")) {\r\n                    CtMethod initMethod = ctClass.getDeclaredConstructor(new CtClass[]{pool.get(""java.io.File"")});\r\n                    initMethod.insertAfter(""{"" +\r\n                            ""System.out.println(\""FileInputStream opened: \"" + $1.getAbsolutePath());"" +\r\n                            ""tests.MyInstrumentationAgent.trackOpenFile(this.getFD(), $1.getAbsolutePath());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                if (className.equals(""java/io/FileOutputStream"")) {\r\n                    CtMethod initMethod = ctClass.getDeclaredConstructor(new CtClass[]{pool.get(""java.io.File""), CtClass.booleanType});\r\n                    initMethod.insertAfter(""{"" +\r\n                            ""System.out.println(\""FileOutputStream opened: \"" + $1.getAbsolutePath());"" +\r\n                            ""tests.MyInstrumentationAgent.trackOpenFile(this.getFD(), $1.getAbsolutePath());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                if (className.equals(""java/io/FileInputStream"") || className.equals(""java/io/FileOutputStream"")) {\r\n                    CtMethod closeMethod = ctClass.getDeclaredMethod(""close"");\r\n                    closeMethod.insertBefore(""{"" +\r\n                            ""System.out.println(\""Closing file: \"" + tests.MyInstrumentationAgent.getFileName(this.getFD()));"" +\r\n                            ""tests.MyInstrumentationAgent.trackCloseFile(this.getFD());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                return ctClass.toBytecode();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            return classfileBuffer;\r\n        }\r\n    }\r\n\r\n    public static void trackOpenFile(FileDescriptor fd, String fileName) {\r\n        openFiles.put(fd, fileName);\r\n    }\r\n\r\n    public static void trackCloseFile(FileDescriptor fd) {\r\n        openFiles.remove(fd);\r\n    }\r\n\r\n    public static String getFileName(FileDescriptor fd) {\r\n        return openFiles.getOrDefault(fd, ""Unknown file"");\r\n    }\r\n}\r\n\r\nsh\r\n   javac -cp javassist.jar tests/MyInstrumentationAgent.java\r\n   jar cmf MANIFEST.MF myagent.jar tests/MyInstrumentationAgent.class\r\n   \r\nsh\r\n   JAVA_OPTS=""-javaagent:/path/to/myagent.jar""\r\n   "
0,1,misclassified_in_Test_5.csv.csv,"import com.sun.source.doctree.DocCommentTree;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.SimpleDocTreeVisitor;\r\nimport com.sun.source.util.Trees;\r\n\r\nimport javax.annotation.processing.AbstractProcessor;\r\nimport javax.annotation.processing.ProcessingEnvironment;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport javax.lang.model.util.Types;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\npublic class ExampleProcessor extends AbstractProcessor {\r\n\r\n    private DocTrees docTrees;\r\n    private Trees trees;\r\n    private Elements elementUtils;\r\n    private Types typeUtils;\r\n\r\n    @Override\r\n    public synchronized void init(final ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        docTrees = DocTrees.instance(processingEnv);\r\n        trees = Trees.instance(processingEnv);\r\n        elementUtils = processingEnv.getElementUtils();\r\n        typeUtils = processingEnv.getTypeUtils();\r\n    }\r\n\r\n    private void scanDocTree(Element element) {\r\n        Map<String, String> imports = collectElementImports(element);\r\n        ExampleContext context = new ExampleContext(imports, element);\r\n        DocCommentTree tree = docTrees.getDocCommentTree(element);\r\n        if (tree != null) {\r\n            ExampleDocTreeVisitor visitor = new ExampleDocTreeVisitor();\r\n            tree.accept(visitor, context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects all imported classes for the given element.\r\n     */\r\n    private Map<String, String> collectElementImports(Element element) {\r\n        Map<String, String> imports = new HashMap<>();\r\n\r\n        // Retrieve the package name\r\n        String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n\r\n        // Collect imported types\r\n        List<? extends Element> enclosedElements = element.getEnclosingElement().getEnclosedElements();\r\n        for (Element enclosedElement : enclosedElements) {\r\n            if (enclosedElement instanceof TypeElement) {\r\n                TypeElement typeElement = (TypeElement) enclosedElement;\r\n                String simpleName = typeElement.getSimpleName().toString();\r\n                String qualifiedName = typeElement.getQualifiedName().toString();\r\n                imports.put(simpleName, qualifiedName);\r\n            }\r\n        }\r\n\r\n        // Always map java.lang classes implicitly\r\n        imports.putAll(getJavaLangClasses());\r\n\r\n        // Add the element's own package classes\r\n        imports.put(packageName, packageName);\r\n\r\n        return imports;\r\n    }\r\n\r\n    /**\r\n     * Returns a map of java.lang classes for resolution.\r\n     */\r\n    private Map<String, String> getJavaLangClasses() {\r\n        Map<String, String> javaLangClasses = new HashMap<>();\r\n        javaLangClasses.put(""String"", ""java.lang.String"");\r\n        javaLangClasses.put(""Integer"", ""java.lang.Integer"");\r\n        javaLangClasses.put(""Double"", ""java.lang.Double"");\r\n        javaLangClasses.put(""Boolean"", ""java.lang.Boolean"");\r\n        javaLangClasses.put(""Object"", ""java.lang.Object"");\r\n        // Add more common java.lang classes if needed\r\n        return javaLangClasses;\r\n    }\r\n\r\n    private static final class ExampleDocTreeVisitor extends SimpleDocTreeVisitor<Void, ExampleContext> {\r\n        @Override\r\n        public Void visitLink(LinkTree linkTree, final ExampleContext context) {\r\n            String signature = linkTree.getReference().getSignature();\r\n            String fqcn = resolveFullyQualifiedName(signature, context);\r\n            System.out.println(""Resolved link: "" + signature + "" -> "" + fqcn);\r\n            return null;\r\n        }\r\n\r\n        private String resolveFullyQualifiedName(String signature, ExampleContext context) {\r\n            // If it's a fully qualified name already, return it\r\n            if (signature.contains(""."")) {\r\n                return signature;\r\n            }\r\n\r\n            // Try resolving from imports\r\n            String fqcn = context.imports.get(signature);\r\n            if (fqcn != null) {\r\n                return fqcn;\r\n            }\r\n\r\n            // Try resolving from the same package as the current element\r\n            String samePackageClass = context.packageName + ""."" + signature;\r\n            if (context.imports.containsKey(context.packageName)) {\r\n                return samePackageClass;\r\n            }\r\n\r\n            return ""UNKNOWN""; // Unable to resolve\r\n        }\r\n    }\r\n\r\n    private static class ExampleContext {\r\n        final Map<String, String> imports;\r\n        final String packageName;\r\n\r\n        ExampleContext(Map<String, String> imports, Element element) {\r\n            this.imports = imports;\r\n            this.packageName = element.getEnclosingElement().toString();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport org.neo4j.driver.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AutoCompleteExample extends Application {\r\n\r\n    private AutoCompletionBinding<String> clientBinding;\r\n    private static final Driver neo4jDriver = GraphDatabase.driver(""bolt://localhost:7687"", AuthTokens.basic(""neo4j"", ""password""));\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.textProperty().addListener((obs, oldText, newText) -> {\r\n            if (newText.length() < 2) {\r\n                if (clientBinding != null) {\r\n                    clientBinding.dispose();\r\n                    clientBinding = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Perform the database query asynchronously\r\n            Task<List<String>> queryTask = new Task<>() {\r\n                @Override\r\n                protected List<String> call() throws Exception {\r\n                    return getClientAutoComplete(newText);\r\n                }\r\n            };\r\n\r\n            queryTask.setOnSucceeded(event -> {\r\n                if (clientBinding != null) {\r\n                    clientBinding.dispose();\r\n                }\r\n                clientBinding = TextFields.bindAutoCompletion(textField, queryTask.getValue());\r\n                clientBinding.setOnAutoCompleted(e -> System.out.println(""Selected: "" + e.getCompletion()));\r\n            });\r\n\r\n            queryTask.setOnFailed(event -> {\r\n                Throwable error = queryTask.getException();\r\n                System.err.println(""Query failed: "" + error.getMessage());\r\n            });\r\n\r\n            new Thread(queryTask).start();\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private List<String> getClientAutoComplete(String input) {\r\n        List<String> resultClients = new ArrayList<>();\r\n        try (Session session = neo4jDriver.session()) {\r\n            Result result = session.run(\r\n                    ""MATCH (n:Client) WHERE toUpper(n.name) CONTAINS $input RETURN n.name AS name"",\r\n                    Values.parameters(""input"", input)\r\n            );\r\n            while (result.hasNext()) {\r\n                Record record = result.next();\r\n                resultClients.add(record.get(""name"").asString());\r\n            }\r\n        }\r\n        return resultClients;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"import java.util.*;\r\nimport java.util.function.BiPredicate;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        Map<String, Set<Long>> myMap = new HashMap<>();\r\n\r\n        myMap.put(""a"", Set.of(1L, 2L, 3L));\r\n        myMap.put(""b"", Set.of(4L, 5L));\r\n        myMap.put(""c"", Set.of(1L));\r\n        myMap.put(""d"", Set.of(2L, 3L));\r\n        myMap.put(""e"", Set.of(5L));\r\n        myMap.put(""f"", Set.of(6L));\r\n\r\n        findOverlappingEntries(myMap);\r\n    }\r\n\r\n    private static void findOverlappingEntries(Map<String, Set<Long>> myMap) {\r\n        List<List<String>> overlappingPairs = new ArrayList<>();\r\n\r\n        List<String> keys = new ArrayList<>(myMap.keySet());\r\n\r\n        BiPredicate<String, String> condition = (a, b) -> !a.equals(b) &&\r\n                myMap.get(a).size() >= myMap.get(b).size() &&\r\n                myMap.get(a).containsAll(myMap.get(b));\r\n\r\n        for (int i = 0; i < keys.size(); i++) {\r\n            for (int j = i + 1; j < keys.size(); j++) {\r\n                String key1 = keys.get(i);\r\n                String key2 = keys.get(j);\r\n\r\n                if (condition.test(key1, key2)) {\r\n                    overlappingPairs.add(List.of(key1, key2));\r\n                } else if (condition.test(key2, key1)) {\r\n                    overlappingPairs.add(List.of(key2, key1));\r\n                }\r\n            }\r\n        }\r\n\r\n        // Print the results\r\n        overlappingPairs.forEach(pair -> System.out.println(pair.get(0) + "" and "" + pair.get(1)));\r\n    }\r\n}\r\n\r\n\r\na and c\r\nb and e\r\na and d\r\n"
0,1,misclassified_in_Test_5.csv.csv,"MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n\r\njava\r\nMemorySegment functionSetProgressStatePtr = taskbarList3Vtbl.get(ValueLayout.ADDRESS, ITaskbarList3Vtbl.SetProgressState$offset());\r\n\r\njava\r\nlong rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n\r\njava\r\nhr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n\r\njava\r\nvar setProgressStateFn = Linker.nativeLinker().downcallHandle(\r\n    functionSetProgressStatePtr,\r\n    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT)\r\n);\r\nsetProgressStateFn.invokeExact(taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n\r\n        System.out.println(""Index | Time (ns)"");\r\n\r\n        for (int i = 0; i < 12; i++) {\r\n            long t1 = System.nanoTime();\r\n            collection.add(""a"");\r\n            long t2 = System.nanoTime();\r\n            System.out.println(""   "" + (i + 1) + ""   | "" + (t2 - t1));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nIndex | Time (ns)\r\n   1   | 6000\r\n   2   | 800\r\n   3   | 500\r\n   4   | 400\r\n   5   | 350\r\n   6   | 300\r\n   7   | 300\r\n   8   | 280\r\n   9   | 250\r\n  10   | 230\r\n  11   | 220\r\n  12   | 200\r\n\r\njava\r\n   ArrayList<String> collection = new ArrayList<>(12);\r\n   "
0,1,misclassified_in_Test_5.csv.csv,"public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f(int depth) {\r\n        System.out.println(i++);\r\n        System.out.println(String.format(""depth=%d"", ++depth));\r\n        try {\r\n            f(depth);\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(""Caught StackOverflowError at depth: "" + depth);\r\n            f(0); // Restart recursion from zero depth after catching the error\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f(0);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"    import javafx.application.Application;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class EmoApp extends Application {\r\n    private static final String CSS_DATA = ""data:text/css,"";\r\n\r\n    private static final String CSS = CSS_DATA + """"""\r\n        .root {\r\n           -fx-font-size: 16px;\r\n        }\r\n        .default {}\r\n        .noto-color-emoji {\r\n          -fx-font-family: ""Noto Color Emoji"";\r\n        }\r\n        .open-sans-emoji {\r\n          -fx-font-family: ""OpenSansEmoji"";\r\n        }\r\n        .segoe-emoji {\r\n          -fx-font-family: ""Segoe UI Emoji"";\r\n        }\r\n        .apple-color-emoji {\r\n          -fx-font-family: ""Apple Color Emoji"";\r\n        }\r\n        """""";\r\n\r\n    private static final String EMOJI_TEXT = """"""\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        """""";\r\n\r\n    private static final String NOTO_COLOR_EMOJI_CSS =\r\n            ""https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&display=swap"";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        VBox root = new VBox();\r\n        root.setPadding(new Insets(10));\r\n        root.setSpacing(10);\r\n\r\n        Label label = new Label(""Emoji Test"");\r\n        label.getStyleClass().add(""default"");\r\n\r\n        TextArea textArea = new TextArea(EMOJI_TEXT);\r\n        textArea.getStyleClass().add(""noto-color-emoji"");\r\n\r\n        root.getChildren().addAll(label, textArea);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        scene.getStylesheets().add(CSS);\r\n\r\n        primaryStage.setTitle(""Emoji Support Test"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
0,1,misclassified_in_Test_5.csv.csv,"package com.question.config;\r\n\r\npublic interface ConfigKeys {\r\n    String LANGUAGE = ""my.app.prefix.language"";\r\n}\r\n\r\njava\r\npackage com.question.service;\r\n\r\nimport com.question.config.ConfigKeys;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@ConditionalOnProperty(name = ConfigKeys.LANGUAGE, havingValue = ""english"")\r\npublic class EnglishLanguageServiceImpl implements LanguageService {\r\n\r\n    @Override\r\n    public String process(String name) {\r\n        return ""Welcome "" + name;\r\n    }\r\n}\r\n\r\njava\r\npackage com.question.service;\r\n\r\nimport com.question.config.ConfigKeys;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@ConditionalOnProperty(name = ConfigKeys.LANGUAGE, havingValue = ""french"")\r\npublic class FrenchLanguageServiceImpl implements LanguageService {\r\n\r\n    @Override\r\n    public String process(String name) {\r\n        return ""Bonjour "" + name;\r\n    }\r\n}\r\n\r\njava\r\npackage com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(LanguageService languageService) {\r\n        this.languageService = languageService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n\r\nproperties\r\nmy.app.prefix.language=english\r\n\r\nproperties\r\nmy.app.prefix.language=french\r\n\r\njava\r\npackage com.question;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class LanguageApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(LanguageApplication.class, args);\r\n    }\r\n}\r\n\r\n\r\n/test?name=John  ? ""Welcome John""\r\n\r\n\r\n/test?name=John  ? ""Bonjour John""\r\n"
0,1,misclassified_in_Test_5.csv.csv,"{\r\n       ""python.defaultInterpreterPath"": ""C:\\Python311\\python.exe"",\r\n       ""python.pythonPath"": ""C:\\Python311\\python.exe""\r\n   }\r\n   \r\n\r\n   which python   # On Mac/Linux\r\n   where python    # On Windows\r\n   \r\n\r\n   C:\Python311\python.exe -m pip install langchain\r\n   \r\njson\r\n   {\r\n       ""version"": ""0.2.0"",\r\n       ""configurations"": [\r\n           {\r\n               ""name"": ""Python: Current File"",\r\n               ""type"": ""python"",\r\n               ""request"": ""launch"",\r\n               ""program"": ""${file}"",\r\n               ""pythonPath"": ""C:\\Python311\\python.exe""\r\n           }\r\n       ]\r\n   }\r\n   \r\npython\r\nimport sys\r\nprint(""Python executable path:"", sys.executable)\r\nprint(""Python version:"", sys.version)\r\n"
0,1,misclassified_in_Test_5.csv.csv,"def get_spouse(name):\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            raise ValueError(""Unknown name"")\r\n\r\nspouse = get_spouse(""John"")\r\nprint(spouse)\r\n\r\npython\r\nspouse = {\r\n    ""John"": ""Jane"",\r\n    ""David"": ""Alice""\r\n}.get(name, ""Unknown"")\r\nprint(spouse)\r\n\r\npython\r\nspouse = (\r\n    ""Jane"" if name == ""John"" else\r\n    ""Alice"" if name == ""David"" else\r\n    ""Unknown""\r\n)\r\nprint(spouse)\r\n"
0,1,misclassified_in_Test_5.csv.csv,"from typing import Any\r\n\r\ntest_var: int\r\na: Any\r\n\r\nprint('hi')\r\n\r\npython\r\nfrom pprint import pprint\r\n\r\na: int = 1\r\n\r\npprint(globals())\r\n\r\n# Output:\r\n# {'__annotations__': {'a': <class 'int'>},\r\n#  'a': 1,\r\n#  ...}\r\n"
0,1,misclassified_in_Test_5.csv.csv,"cpp\r\n// File: wrapper.cpp\r\n\r\n#include ""x86-simd-sort/lib/x86simdsort.h"" // Ensure you have the SIMD sorting library available\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <forward_list>\r\n#include <mutex>\r\n#include <array>\r\n#include <omp.h>\r\n\r\ntemplate <typename T, size_t bucketMaxSize>\r\nstruct BucketList\r\n{\r\n    using Bucket = std::array<T, bucketMaxSize>;\r\n\r\n    std::forward_list<Bucket> buckets;\r\n    uint32_t bucketCount;\r\n    uint32_t lastBucketSize;\r\n\r\n    BucketList() : bucketCount(1), lastBucketSize(0)\r\n    {\r\n        buckets.emplace_front();\r\n    }\r\n\r\n    void push_back(const T& value)\r\n    {\r\n        if (lastBucketSize == bucketMaxSize)\r\n        {\r\n            buckets.emplace_front();\r\n            lastBucketSize = 0;\r\n            bucketCount++;\r\n        }\r\n\r\n        Bucket* lastBucket = &*buckets.begin();\r\n        (*lastBucket)[lastBucketSize] = value;\r\n        lastBucketSize++;\r\n    }\r\n\r\n    size_t size() const\r\n    {\r\n        return (size_t(bucketCount) - 1lu) * bucketMaxSize + lastBucketSize;\r\n    }\r\n\r\n    size_t bucketSize(size_t idx) const\r\n    {\r\n        return idx == 0 ? lastBucketSize : bucketMaxSize;\r\n    }\r\n};\r\n\r\nextern ""C"" void parallel_sort(int64_t* arr, size_t size)\r\n{\r\n    static const size_t bucketSize = 2048;\r\n    static const size_t radixBits = 11;\r\n    static const size_t bucketCount = 1 << radixBits;\r\n\r\n    struct alignas(64) Slice\r\n    {\r\n        int64_t* data = nullptr;\r\n        size_t size = 0;\r\n        size_t global_offset = 0;\r\n        size_t local_offset = 0;\r\n        std::mutex mutex;\r\n    };\r\n\r\n    std::array<Slice, bucketCount> slices;\r\n\r\n    #pragma omp parallel\r\n    {\r\n        std::array<BucketList<int64_t, bucketSize>, bucketCount> tlsBuckets;\r\n\r\n        // Bucket sorting step\r\n        #pragma omp for nowait\r\n        for (size_t i = 0; i < size; ++i)\r\n        {\r\n            constexpr uint64_t signBit = uint64_t(1) << uint64_t(63);\r\n            const uint64_t idx = (uint64_t(arr[i]) ^ signBit) >> (64 - radixBits);\r\n            tlsBuckets[idx].push_back(arr[i]);\r\n        }\r\n\r\n        // Gather results back into the global slices\r\n        #pragma omp critical\r\n        for (size_t i = 0; i < bucketCount; ++i)\r\n        {\r\n            slices[i].size += tlsBuckets[i].size();\r\n        }\r\n\r\n        // Sort each bucket independently in parallel using SIMD (if available)\r\n        #pragma omp for\r\n        for (size_t i = 0; i < bucketCount; ++i)\r\n        {\r\n            std::vector<int64_t> bucket_data;\r\n            for (auto& bucket : tlsBuckets[i].buckets)\r\n            {\r\n                bucket_data.insert(bucket_data.end(), bucket.begin(), bucket.end());\r\n            }\r\n\r\n            // Use SIMD for sorting within each bucket (you can use your SIMD sorting library here)\r\n            x86simdsort::simd_sort(bucket_data.begin(), bucket_data.end());\r\n\r\n            // Store the sorted results back into slices\r\n            std::lock_guard<std::mutex> lock(slices[i].mutex);\r\n            std::memcpy(arr + slices[i].global_offset, bucket_data.data(), bucket_data.size() * sizeof(int64_t));\r\n            slices[i].global_offset += bucket_data.size();\r\n        }\r\n    }\r\n}\r\n\r\npython\r\n# wrapper.pyx\r\nfrom libc.stdlib cimport malloc, free\r\ncdef extern from ""wrapper.cpp"":\r\n    void parallel_sort(int64_t* arr, size_t size)\r\n\r\ndef sort_array(np.ndarray arr):\r\n    # Ensure the array is of type int64\r\n    cdef int64_t* arr_ptr = <int64_t*>arr.data\r\n    size_t arr_size = arr.size\r\n    parallel_sort(arr_ptr, arr_size)\r\n\r\npython\r\n# main.py\r\nimport numpy as np\r\nfrom wrapper import sort_array\r\n\r\n# Create a large random uint64 array\r\narr = np.random.randint(0, 2**64, int(3e8), dtype='uint64')\r\n\r\n# Sort the array using the parallel sorting\r\nsort_array(arr)\r\n\r\n# Check the result\r\nprint(arr[:10])  # Print first 10 sorted values\r\n\r\npython\r\n# setup.py\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\nimport numpy as np\r\n\r\nsetup(\r\n    ext_modules=cythonize(""wrapper.pyx""),\r\n    include_dirs=[np.get_include()]\r\n)\r\n\r\nbash\r\npython setup.py build_ext --inplace\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import sqlalchemy as sa    \r\nfrom sqlalchemy.orm import mapped_column, Mapped, DeclarativeBase    \r\n\r\nclass Base(DeclarativeBase):    \r\n    pass    \r\n\r\nclass Test(Base):    \r\n    __tablename__ = 't75312537'    \r\n\r\n    id: Mapped[int] = mapped_column(sa.BigInteger, sa.Identity(), primary_key=True)\r\n\r\nsql\r\nCREATE TABLE t75312537 (\r\n    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY\r\n);\r\n"
0,1,misclassified_in_Test_5.csv.csv,"pip install pandas lxml\r\n   \r\npython\r\n   import pandas as pd\r\n\r\n   url = 'https://www.bmv.com.mx/es/mercados/capitales'\r\n   tables = pd.read_html(url)\r\n   \r\npython\r\n   first_table = tables[0]\r\n   \r\npython\r\n   tables = pd.read_html(url, match='Your Matching Text')\r\n   \r\npython\r\n   tables = pd.read_html(url, attrs={'class': 'table-class-name'})\r\n   \r\npython\r\n   print(first_table.head())\r\n   \r\npython\r\nimport pandas as pd\r\n\r\nurl = 'https://www.bmv.com.mx/es/mercados/capitales'\r\ntables = pd.read_html(url, match='Series Operadas del Mercado de Capitales')\r\n\r\nif tables:\r\n    series_table = tables[0]\r\n    print(series_table.head())\r\nelse:\r\n    print('No matching tables found.')\r\n"
0,1,misclassified_in_Test_5.csv.csv,"import numpy as np\r\nimport cv2\r\nimport svgwrite\r\nfrom PIL import Image\r\n\r\nMM_IN_INCH = 0.03937\r\n\r\ndef round_int_to_10s(value):\r\n    int_value = int(value)\r\n    return int_value + 10 - int_value % 10\r\n\r\ndef get_sizes_pixels(height_mm, width_mm, pattern_size_mm, dpi):\r\n    dpmm = MM_IN_INCH * dpi  # dots per mm\r\n    width_px = round_int_to_10s(np.ceil(width_mm * dpmm))\r\n    height_px = round_int_to_10s(np.ceil(height_mm * dpmm))\r\n    pattern_size_px = pattern_size_mm * dpmm\r\n    return height_px, width_px, pattern_size_px\r\n\r\ndef get_grid_positions(size, pattern_size, density):\r\n    count = int(density * size / pattern_size)  # get number of patterns possible\r\n    if count == 1:\r\n        return [size // 2]\r\n    return [int(i * size / (count + 1)) for i in range(1, count + 1)]\r\n\r\ndef get_spot_grid(height_px, width_px, pattern_size_px, density):\r\n    vertical = get_grid_positions(height_px, pattern_size_px, density)\r\n    horizontal = get_grid_positions(width_px, pattern_size_px, density)\r\n    return vertical, horizontal\r\n\r\ndef generate_spots(vertical, horizontal, pattern_size, density, variation):\r\n    spots = []\r\n    noise_halfspan = 2 * pattern_size / density\r\n    noise_min, noise_max = -noise_halfspan, noise_halfspan\r\n    for i in vertical:\r\n        for j in horizontal:\r\n            # generate noisy information\r\n            center = tuple(map(int, (j + variation * np.random.randint(noise_min, noise_max),\r\n                                      i + variation * np.random.randint(noise_min, noise_max))))\r\n            d = int(pattern_size + pattern_size * variation * (np.random.rand() - 0.5) / 2)\r\n            spots.append((center, d // 2))  # add circle params\r\n    return spots\r\n\r\ndef render_raster(height, width, spots):\r\n    im = 255 * np.ones((height, width), dtype=np.uint8)\r\n    for center, radius in spots:\r\n        cv2.circle(im, center, radius, 0, -1)  # add circle\r\n    return im\r\n\r\ndef render_svg(height, width, spots, filename):\r\n    dwg = svgwrite.Drawing(filename, profile='tiny', size=(width, height))\r\n    fill_color = svgwrite.utils.rgb(0, 0, 0)\r\n    for center, radius in spots:\r\n        dwg.add(dwg.circle(center, radius, fill=fill_color))  # add circle\r\n    dwg.save()\r\n\r\ndef save_image(im, filename, dpi):\r\n    img = Image.fromarray(im)\r\n    img.save(filename, dpi=(dpi, dpi))\r\n\r\n#  INPUTS  #\r\n############\r\ndpi = 1000  # dots per inch\r\nWidthOfSample_mm = 50  # mm\r\nHeightOfSample_mm = 50  # mm\r\nPatternSize_mm = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nVariation = 0.75  # 1 is very bad, 0 is very good\r\n############\r\n\r\nheight, width, pattern_size = get_sizes_pixels(HeightOfSample_mm, WidthOfSample_mm, PatternSize_mm, dpi)\r\nvertical, horizontal = get_spot_grid(height, width, pattern_size, density)\r\nspots = generate_spots(vertical, horizontal, pattern_size, density, Variation)\r\n\r\n# Generate Raster Image\r\nim = render_raster(height, width, spots)\r\nsave_image(im, ""speckle_pattern.png"", dpi)\r\nsave_image(im, ""speckle_pattern.tiff"", dpi)\r\n\r\n# Generate SVG\r\nrender_svg(height, width, spots, ""speckle_pattern.svg"")\r\n\r\nprint(""Files saved successfully: PNG, TIFF, and SVG."")"
0,1,misclassified_in_Test_2.csv.csv,class InstanceofFix {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"package test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        ((One) one).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.TracingContextUtils;\r\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\n\r\nimport java.util.Map;\r\n\r\npublic class OpenTelemetrySqsTrace {\r\n\r\n    private final Tracer tracer;\r\n\r\n    public OpenTelemetrySqsTrace(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void processSqsMessage(Map<String, String> messageAttributes) {\r\n        TextMapGetter<Map<String, String>> getter = new TextMapGetter<>() {\r\n            @Override\r\n            public Iterable<String> keys(Map<String, String> carrier) {\r\n                return carrier.keySet();\r\n            }\r\n\r\n            @Override\r\n            public String get(Map<String, String> carrier, String key) {\r\n                return carrier.get(key);\r\n            }\r\n        };\r\n\r\n        Context extractedContext = W3CTraceContextPropagator.getInstance().extract(Context.current(), messageAttributes, getter);\r\n        Span parentSpan = Span.fromContext(extractedContext);\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(""consumeMessage"")\r\n                .setParent(extractedContext)\r\n                .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // Process the message\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.*;\r\n\r\npublic class MountainSequence {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        List<Integer> uniqueSorted = new ArrayList<>(new TreeSet<>(list));\r\n        \r\n        int maxLen = 0;\r\n        \r\n        for (int peak = 1; peak < uniqueSorted.size() - 1; peak++) {\r\n            int peakValue = uniqueSorted.get(peak);\r\n\r\n            List<Integer> increasing = new ArrayList<>();\r\n            List<Integer> decreasing = new ArrayList<>();\r\n            List<Integer> increasingAgain = new ArrayList<>();\r\n\r\n            for (int num : list) {\r\n                if (num < peakValue) {\r\n                    if (decreasing.isEmpty()) {\r\n                        if (increasing.isEmpty() || num > increasing.get(increasing.size() - 1)) {\r\n                            increasing.add(num);\r\n                        }\r\n                    }\r\n                } else if (num == peakValue) {\r\n                    if (!increasing.isEmpty()) {\r\n                        decreasing.add(num);\r\n                    }\r\n                } else {\r\n                    if (!decreasing.isEmpty()) {\r\n                        if (increasingAgain.isEmpty() || num > increasingAgain.get(increasingAgain.size() - 1)) {\r\n                            increasingAgain.add(num);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!increasing.isEmpty() && !decreasing.isEmpty() && !increasingAgain.isEmpty()) {\r\n                maxLen = Math.max(maxLen, increasing.size() + decreasing.size() + increasingAgain.size());\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.Arrays;\r\n\r\n@Configuration\r\npublic class HiddenMethodFilterConfig {\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/*""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.slf4j.MDC;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class VirtualThreadsPerformanceTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        int from = 1, to = 100;\r\n        Service service = new Service();\r\n\r\n        ExecutorService forkJoinPool = new ForkJoinPool(30);\r\n        ExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n        List<String> forkJoinResult = executeWithExecutor(forkJoinPool, service, from, to);\r\n        List<String> virtualThreadResult = executeWithExecutor(virtualThreadExecutor, service, from, to);\r\n\r\n        forkJoinPool.shutdown();\r\n        virtualThreadExecutor.shutdown();\r\n\r\n        System.out.println(""ForkJoinPool Result Size: "" + forkJoinResult.size());\r\n        System.out.println(""Virtual Thread Result Size: "" + virtualThreadResult.size());\r\n    }\r\n\r\n    private static List<String> executeWithExecutor(ExecutorService executor, Service service, int from, int to) throws Exception {\r\n        return executor.submit(\r\n                () -> IntStream.rangeClosed(-from, to)\r\n                        .mapToObj(i -> String.valueOf(i))\r\n                        .parallel()\r\n                        .map(val -> {\r\n                            try {\r\n                                service.setSomeThreadLocalString(val);\r\n                                MDC.put(""key1"", ""value1"");\r\n                                MDC.put(""key2"", ""value2"");\r\n\r\n                                return service.call(val);\r\n                            } finally {\r\n                                service.removeSomeThreadLocalString();\r\n                                MDC.remove(""key1"");\r\n                                MDC.remove(""key2"");\r\n                            }\r\n                        })\r\n                        .toList()\r\n        ).get();\r\n    }\r\n\r\n    static class Service {\r\n        private final ThreadLocal<String> threadLocal = new ThreadLocal<>();\r\n\r\n        void setSomeThreadLocalString(String value) {\r\n            threadLocal.set(value);\r\n        }\r\n\r\n        void removeSomeThreadLocalString() {\r\n            threadLocal.remove();\r\n        }\r\n\r\n        String call(String input) {\r\n            return ""Processed: "" + input;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.Base64;\r\n\r\npublic class Utf8OkHttpClient {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient().newBuilder().build();\r\n\r\n        MediaType mediaType = MediaType.parse(""application/octet-stream"");\r\n        RequestBody body = RequestBody.create(mediaType, """");\r\n\r\n        String fileName = ""3$ MÃÂÃÂ¹ F'RANÃÂÃÂ§ÃÂÃÂ©_33902_Country_5_202105.csv"";\r\n        String encodedFileName = ""=?UTF-8?B?"" + Base64.getEncoder().encodeToString(fileName.getBytes(StandardCharsets.UTF_8)) + ""?="";\r\n        String contentDisposition = ""attachment; filename=\"""" + encodedFileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""xxxx"")\r\n                .method(""POST"", body)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", contentDisposition)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,public class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session.equals(MemorySegment.NULL)) return null;\r\n\r\n                        MemorySegment atomName = arena.allocateFrom(""NET_WM_XAPP_PROGRESS"");\r\n                        MemorySegment netWmXappProgress = Xlib_h.XInternAtom(x11Session, atomName, 0);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session,\r\n                                    MemorySegment.ofAddress(rawHandle).address(),\r\n                                    netWmXappProgress.address(),\r\n                                    Xlib_h.XA_CARDINAL(),\r\n                                    32,\r\n                                    Xlib_h.PropModeReplace(),\r\n                                    progressData,\r\n                                    1);\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.Map;\r\n\r\npublic class YamlLoader {\r\n\r\n    public static InterestingSetup loadInterestingSetup(String filePath) throws IOException {\r\n        Yaml yaml = new Yaml();\r\n        try (FileInputStream inputStream = new FileInputStream(filePath)) {\r\n            Map<String, Object> yamlConfig = yaml.load(inputStream);\r\n            Object interestingObject = yamlConfig.get(""interesting-setup"");\r\n            return convertToInterestingSetup(interestingObject);\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(""unchecked"")\r\n    private static InterestingSetup convertToInterestingSetup(Object object) {\r\n        if (object instanceof Map<?, ?> map) {\r\n            Yaml yaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            return yaml.load(yaml.dump(map));\r\n        }\r\n        throw new IllegalArgumentException(""Invalid YAML structure for InterestingSetup"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.parameters.RequestBody;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\npublic class ApiController {\r\n\r\n    @PostMapping(value = ""/example"", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @RequestBody(content = @Content(examples = @ExampleObject(value = ""{ \""key\"": \""value\"" }"")))\r\n    @ApiResponses({\r\n            @ApiResponse(responseCode = ""200"", content = @Content(examples = @ExampleObject(value = ""{ \""message\"": \""Success\"" }""), mediaType = MediaType.APPLICATION_JSON_VALUE)),\r\n            @ApiResponse(responseCode = ""400"", content = @Content(examples = @ExampleObject(value = ""{ \""error\"": \""Bad Request\"" }""), mediaType = MediaType.APPLICATION_JSON_VALUE))\r\n    })\r\n    public String exampleEndpoint(@RequestBody String request) {\r\n        return ""{ \""message\"": \""Success\"" }"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n\r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('\""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        StringBuilder escaped = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            escaped.append(ESCAPES.getOrDefault(c, String.valueOf(c)));\r\n        }\r\n        return escaped.toString();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;\r\nimport static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.security.test.context.support.WithMockUser;\r\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\n\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Autowired\r\n    private WebApplicationContext context;\r\n\r\n    @BeforeEach\r\n    void setup() {\r\n        mockMvc = MockMvcBuilders.webAppContextSetup(context)\r\n                .apply(springSecurity())\r\n                .build();\r\n    }\r\n\r\n    @Test\r\n    void whenGetActuatorEndpoint_thenShouldAllowAccess() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void whenPutWithoutToken_thenShouldReturnUnauthorized() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void whenPutWithValidScope_thenShouldAllowAccess() throws Exception {\r\n        mockMvc.perform(get(""/data"")\r\n                .with(jwt().jwt(jwt -> jwt.claim(""scope"", ""data:write""))))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    @WithMockUser\r\n    void whenAuthenticatedWithoutScope_thenShouldReturnForbidden() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isForbidden());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,import java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> dividends = new HashSet<>();\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        Future<?> future1 = executor.submit(() -> {\r\n            for (int i = 3; i <= n; i += 3) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        Future<?> future2 = executor.submit(() -> {\r\n            for (int i = 5; i <= n; i += 5) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        Future<?> future3 = executor.submit(() -> {\r\n            for (int i = 7; i <= n; i += 7) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        try {\r\n            future1.get();\r\n            future2.get();\r\n            future3.get();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        executor.shutdown();\r\n\r\n        int sum = 0;\r\n        for (int num : dividends) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));\r\n        System.out.println(fm.getSum(1000));\r\n        System.out.println(fm.getSum(76293));\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"import java.time.LocalDate;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class IsoWeek {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    public IsoWeek(int year, int week) {\r\n        this.year = year;\r\n        this.week = week;\r\n    }\r\n\r\n    public static IsoWeek parse(String isoWeek) {\r\n        String[] parts = isoWeek.split(""-W"");\r\n        return new IsoWeek(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));\r\n    }\r\n\r\n    public boolean isBefore(IsoWeek other) {\r\n        return this.year < other.year || (this.year == other.year && this.week < other.week);\r\n    }\r\n\r\n    public int weeksBetween(IsoWeek other) {\r\n        LocalDate startDate = getFirstDayOfWeek();\r\n        LocalDate endDate = other.getFirstDayOfWeek();\r\n        return (int) java.time.temporal.ChronoUnit.WEEKS.between(startDate, endDate);\r\n    }\r\n\r\n    private LocalDate getFirstDayOfWeek() {\r\n        return LocalDate.of(year, 1, 4)\r\n                .with(WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear(), week)\r\n                .with(WeekFields.of(Locale.getDefault()).dayOfWeek(), 1);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(""%d-W%02d"", year, week);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        IsoWeek weekA = IsoWeek.parse(""2012-W48"");\r\n        IsoWeek weekB = IsoWeek.parse(""2013-W03"");\r\n\r\n        System.out.println(""Week A: "" + weekA);\r\n        System.out.println(""Week B: "" + weekB);\r\n        System.out.println(""Is Week A before Week B? "" + weekA.isBefore(weekB));\r\n        System.out.println(""Weeks between Week A and Week B: "" + weekA.weeksBetween(weekB));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.Callable;\r\n\r\npublic class InferenceThrowsExample {\r\n    public static <T extends Exception> void throwAsUnchecked(Exception e) throws T {\r\n        throw (T) e;\r\n    }\r\n\r\n    public static <T extends Exception> void execute(Callable<Void> callable) throws T {\r\n        try {\r\n            callable.call();\r\n        } catch (Exception e) {\r\n            throwAsUnchecked(e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> {\r\n                throw new IllegalArgumentException(""Unchecked Exception"");\r\n            });\r\n        } catch (Exception e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n\r\n        try {\r\n            execute(() -> {\r\n                throw new Exception(""Checked Exception"");\r\n            });\r\n        } catch (Exception e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class EqualSplit {\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0) {\r\n            return false;\r\n        }\r\n        int totalSum = arraySum(arr, 0);\r\n        if (totalSum % 2 != 0) {\r\n            return false;\r\n        }\r\n        return equalSplit(arr, 0, 0, 0, arr.length / 2, totalSum / 2);\r\n    }\r\n\r\n    private static boolean equalSplit(int[] arr, int index, int sum, int count, int halfSize, int targetSum) {\r\n        if (count == halfSize) {\r\n            return sum == targetSum;\r\n        }\r\n        if (index == arr.length) {\r\n            return false;\r\n        }\r\n        return equalSplit(arr, index + 1, sum + arr[index], count + 1, halfSize, targetSum) ||\r\n               equalSplit(arr, index + 1, sum, count, halfSize, targetSum);\r\n    }\r\n\r\n    private static int arraySum(int[] arr, int index) {\r\n        return index == arr.length ? 0 : arr[index] + arraySum(arr, index + 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] arr1 = {1, 2, 3, 4, 5, 6};\r\n        int[] arr2 = {1, 1, 1, 1, 2, 2};\r\n        int[] arr3 = {1, 2, 3, 5, 5, 6};\r\n        System.out.println(equalSplit(arr1)); // false\r\n        System.out.println(equalSplit(arr2)); // true\r\n        System.out.println(equalSplit(arr3)); // true\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        label.setOnMouseEntered(event -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.setOnMouseExited(event -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SliderSwitch extends Control {\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n\r\n        @Override\r\n        public Object getBean() {\r\n            return SliderSwitch.this;\r\n        }\r\n\r\n        @Override\r\n        public String getName() {\r\n            return ""onAction"";\r\n        }\r\n    };\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n\r\n    public final void setOnAction(EventHandler<ActionEvent> value) {\r\n        onActionProperty().set(value);\r\n    }\r\n\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onActionProperty().get();\r\n    }\r\n\r\n    public SliderSwitch() {\r\n        setOnMouseClicked(event -> fireEvent(new ActionEvent(this, null)));\r\n    }\r\n\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SliderSwitchSkin(this);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\npublic class MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DuplicateCharacters {\r\n    public static void main(String[] args) {\r\n        findDuplicateCharacters(""Great"");\r\n    }\r\n\r\n    public static void findDuplicateCharacters(String input) {\r\n        char[] chars = input.toCharArray();\r\n        Map<Character, Integer> charCountMap = new HashMap<>();\r\n\r\n        for (char c : chars) {\r\n            if (c != ' ') {\r\n                charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\r\n            }\r\n        }\r\n\r\n        boolean hasDuplicates = false;\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n\r\n        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\r\n            if (entry.getValue() > 1) {\r\n                System.out.println(entry.getKey());\r\n                hasDuplicates = true;\r\n            }\r\n        }\r\n\r\n        if (!hasDuplicates) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\n    private Group circle;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private double rotationAngle = 0;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport io.micrometer.observation.annotation.Observed;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport io.micrometer.core.instrument.MeterRegistry;\r\nimport io.micrometer.core.instrument.Timer;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@SpringBootApplication\r\npublic class ObservabilityApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ObservabilityApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate(RestTemplateBuilder builder) {\r\n        return builder.build();\r\n    }\r\n}\r\n\r\n@RestController\r\npublic class TestController {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(TestController.class);\r\n    private final RestTemplate restTemplate;\r\n    private final MeterRegistry meterRegistry;\r\n\r\n    public TestController(RestTemplate restTemplate, MeterRegistry meterRegistry) {\r\n        this.restTemplate = restTemplate;\r\n        this.meterRegistry = meterRegistry;\r\n    }\r\n\r\n    @Observed(name = ""method1"", contextualName = ""method1"")\r\n    @GetMapping(value = ""/method1"")\r\n    public String method1(@RequestParam String input) {\r\n        log.info(""Inside the method1 with data = {}"", input);\r\n        Timer.Sample sample = Timer.start(meterRegistry);\r\n        String response = restTemplate.getForObject(""http://localhost:8090/method2"", String.class);\r\n        sample.stop(meterRegistry.timer(""method1.timer""));\r\n        return response;\r\n    }\r\n\r\n    @Observed(name = ""method2"", contextualName = ""method2"")\r\n    @GetMapping(value = ""/method2"")\r\n    public String method2() {\r\n        log.info(""Inside the method2"");\r\n        Timer.Sample sample = Timer.start(meterRegistry);\r\n        String response = ""Called method2 successfully"";\r\n        sample.stop(meterRegistry.timer(""method2.timer""));\r\n        return response;\r\n    }\r\n}\r\n\r\nxml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-actuator</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-aop</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-registry-datadog</artifactId>\r\n        <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-tracing-bridge-brave</artifactId>\r\n        <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-tracing</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n\r\nyaml\r\nspring:\r\n  application:\r\n    name: datadog-sample\r\n  sleuth:\r\n    sampler:\r\n      probability: 1.0\r\n\r\nserver:\r\n  port: 8090\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,metrics\r\n  metrics:\r\n    export:\r\n      datadog:\r\n        enabled: true\r\n        api-key: YOUR_DATADOG_API_KEY\r\n    distribution:\r\n      percentiles-histogram:\r\n        http:\r\n          server:\r\n            requests: true\r\n  tracing:\r\n    enabled: true\r\n    sampling:\r\n      probability: 1.0\r\n    propagation:\r\n      type: W3C\r\n\r\nlogging:\r\n  pattern:\r\n    console: .%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] - %msg%n\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n            var future = ts.fork(() -> ScopedValue.callWhere(NAME, ""haha"", () -> {\r\n                return NAME.get();\r\n            }));\r\n            ts.join();\r\n            System.out.println(future.resultNow());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.text.TextAlignment;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        Label testLabel = createTestLabel();\r\n        root.getChildren().add(testLabel);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(getClass().getResource(""/ExampleStylesheet.css"").toExternalForm());\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setLayoutX(200);\r\n        testLabel.setLayoutY(100);\r\n        testLabel.setOnMouseEntered(event -> doSomething());\r\n        testLabel.setOnMouseExited(event -> doSomethingElse());\r\n        testLabel.addEventFilter(MouseEvent.MOUSE_MOVED, event -> {\r\n            Bounds bounds = testLabel.getBoundsInParent();\r\n            if (event.getX() < bounds.getMinX() || event.getX() > bounds.getMaxX() ||\r\n                event.getY() < bounds.getMinY() || event.getY() > bounds.getMaxY()) {\r\n                event.consume();\r\n            }\r\n        });\r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = createGridPane();\r\n        GridPane gridPane2 = createGridPane();\r\n\r\n        Label label1 = new Label(""One two three"");\r\n        TextField textField1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n\r\n        Label label2 = new Label(""Four five six seven"");\r\n        TextField textField2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n\r\n        TitledPane titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        TitledPane titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        double maxLabelWidth = Math.max(label1.prefWidth(-1), label2.prefWidth(-1));\r\n\r\n        gridPane1.getColumnConstraints().get(0).setMinWidth(maxLabelWidth);\r\n        gridPane2.getColumnConstraints().get(0).setMinWidth(maxLabelWidth);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private GridPane createGridPane() {\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setHgap(20);\r\n        ColumnConstraints labelColumn = new ColumnConstraints();\r\n        ColumnConstraints controlColumn = new ColumnConstraints();\r\n        controlColumn.setPercentWidth(100);\r\n        gridPane.getColumnConstraints().addAll(labelColumn, controlColumn);\r\n        return gridPane;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Side;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ContextMenu;\r\nimport javafx.scene.control.Menu;\r\nimport javafx.scene.control.MenuBar;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.control.MenuButton;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UpwardMenuBar extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        MenuButton menuButton = new MenuButton(""File"");\r\n        menuButton.getItems().addAll(\r\n                new MenuItem(""New""),\r\n                new MenuItem(""Open""),\r\n                new MenuItem(""Save""),\r\n                new MenuItem(""Exit"")\r\n        );\r\n\r\n        menuButton.showingProperty().addListener((obs, wasShowing, isNowShowing) -> {\r\n            if (isNowShowing) {\r\n                ContextMenu contextMenu = menuButton.getContextMenu();\r\n                if (contextMenu != null) {\r\n                    contextMenu.setAnchorLocation(javafx.stage.PopupWindow.AnchorLocation.WINDOW_TOP_RIGHT);\r\n                    contextMenu.show(menuButton, Side.TOP, 0, -menuButton.getHeight());\r\n                }\r\n            }\r\n        });\r\n\r\n        MenuBar menuBar = new MenuBar();\r\n        menuBar.getMenus().add(new Menu(""Edit""));\r\n        menuBar.getMenus().add(new Menu(""View""));\r\n\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuButton);\r\n        root.setTop(menuBar);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Upward Opening Menu"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initializeGrid();\r\n    }\r\n\r\n    private void initializeGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setPrefSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public WebMvcConfigurer contentNegotiationStrategy() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n                configurer.defaultContentType(MediaType.APPLICATION_JSON);\r\n            }\r\n        };\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.context.annotation.Bean;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.util.matcher.RequestMatcher;\r\nimport org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\n\r\n@Bean\r\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    RequestMatcher localIpMatcher = request -> ""127.0.0.1"".equals(request.getRemoteAddr());\r\n\r\n    http\r\n        .csrf(csrf -> csrf.disable())\r\n        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n        .authorizeHttpRequests(auth -> auth\r\n            .requestMatchers(""/"").access(new WebExpressionAuthorizationManager(""hasIpAddress('127.0.0.1')""))\r\n            .anyRequest().denyAll()\r\n        );\r\n\r\n    return http.build();\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\n\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class JdkBenchmarks {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    @Fork(value = 1, warmups = 2)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int[] localArray = testState.values;\r\n        int length = localArray.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(localArray[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    @Fork(value = 1, warmups = 2)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        int[] localArray = testState.values;\r\n        for (int value : localArray) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Thread)\r\n    public static class TestState {\r\n        public int[] values;\r\n\r\n        @Setup(Level.Iteration)\r\n        public void setupArray() {\r\n            int count = 1000;\r\n            values = new int[count];\r\n            for (int i = 0; i < count; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class NestedPerf {\r\n    @State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\n\r\n    private static final double EARTH_RADIUS = 150;\r\n\r\n    private MeshView createTexturedSphere(double radius, int divisions) {\r\n        TriangleMesh mesh = new TriangleMesh();\r\n\r\n        for (int y = 0; y <= divisions; y++) {\r\n            double v = (double) y / divisions;\r\n            double latitude = Math.PI * (v - 0.5);\r\n            double sinLat = Math.sin(latitude);\r\n            double cosLat = Math.cos(latitude);\r\n\r\n            for (int x = 0; x <= divisions; x++) {\r\n                double u = (double) x / divisions;\r\n                double longitude = 2 * Math.PI * u;\r\n                float xPos = (float) (radius * cosLat * Math.cos(longitude));\r\n                float yPos = (float) (radius * sinLat);\r\n                float zPos = (float) (radius * cosLat * Math.sin(longitude));\r\n\r\n                mesh.getPoints().addAll(xPos, yPos, zPos);\r\n                mesh.getTexCoords().addAll((float) u, (float) v);\r\n            }\r\n        }\r\n\r\n        for (int y = 0; y < divisions; y++) {\r\n            for (int x = 0; x < divisions; x++) {\r\n                int p0 = y * (divisions + 1) + x;\r\n                int p1 = p0 + 1;\r\n                int p2 = p0 + divisions + 1;\r\n                int p3 = p2 + 1;\r\n\r\n                mesh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n                mesh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n            }\r\n        }\r\n\r\n        MeshView meshView = new MeshView(mesh);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\n        meshView.setMaterial(material);\r\n        return meshView;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        MeshView earthSphere = createTexturedSphere(EARTH_RADIUS, 64);\r\n        earthSphere.setRotationAxis(Rotate.Y_AXIS);\r\n        earthSphere.setRotate(90);\r\n\r\n        Group root = new Group(earthSphere);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setTitle(""Textured Earth Sphere"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class Test {\r\n    public static void go(Short n) { System.out.println(""Short""); }\r\n    public static void go(int n) { System.out.println(""int""); }\r\n\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go((Short) x);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Configuration\r\npublic class StreamProcessorConfig {\r\n\r\n    @Bean\r\n    public Map<String, Function<KStream<String, InputType>, KStream<String, OutputType>>> tenantProcessors(\r\n            @Value(""${tenants}"") List<String> tenants) {\r\n        return tenants.stream().collect(Collectors.toMap(\r\n                tenant -> tenant + ""Processor"",\r\n                tenant -> inputTypeStream -> inputTypeStream.map((String k, InputType v) ->\r\n                        KeyValue.pair(k, OutputType.createFrom(v)))\r\n        ));\r\n    }\r\n}\r\n\r\nyaml\r\ntenants: A,B,C\r\n\r\nspring.cloud.function.definition: AProcessor;BProcessor;CProcessor\r\n\r\nspring.cloud.stream.kafka.streams.binder.functions.AProcessor.applicationId: ${spring.application.name}-AProcessor\r\nspring.cloud.stream.kafka.streams.binder.functions.BProcessor.applicationId: ${spring.application.name}-BProcessor\r\nspring.cloud.stream.kafka.streams.binder.functions.CProcessor.applicationId: ${spring.application.name}-CProcessor\r\n\r\nspring.cloud.stream.bindings.AProcessor-in-0.destination: A-input\r\nspring.cloud.stream.bindings.AProcessor-out-0.destination: A-output\r\n\r\nspring.cloud.stream.bindings.BProcessor-in-0.destination: B-input\r\nspring.cloud.stream.bindings.BProcessor-out-0.destination: B-output\r\n\r\nspring.cloud.stream.bindings.CProcessor-in-0.destination: C-input\r\nspring.cloud.stream.bindings.CProcessor-out-0.destination: C-output\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        StackPane root = new StackPane();\r\n\r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        Rectangle background = new Rectangle(500, 500, Color.RED);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        root.getChildren().addAll(background, testButton);\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class QRWithText {\r\n    public static void generateQRWithText(String qrData, String userName, String eventName, String filePath) {\r\n        try {\r\n            int qrSize = 500;\r\n            int textHeight = 50;\r\n            String charset = ""UTF-8"";\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, qrSize, qrSize, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            int imageWidth = qrImage.getWidth();\r\n            int imageHeight = qrImage.getHeight() + textHeight;\r\n\r\n            BufferedImage combinedImage = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g2d = combinedImage.createGraphics();\r\n\r\n            g2d.setColor(Color.WHITE);\r\n            g2d.fillRect(0, 0, imageWidth, imageHeight);\r\n            g2d.drawImage(qrImage, 0, 0, null);\r\n\r\n            g2d.setColor(Color.BLACK);\r\n            g2d.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n\r\n            FontMetrics fm = g2d.getFontMetrics();\r\n            int userNameWidth = fm.stringWidth(userName);\r\n            int eventNameWidth = fm.stringWidth(eventName);\r\n\r\n            g2d.drawString(userName, (imageWidth - userNameWidth) / 2, qrSize + 20);\r\n            g2d.drawString(eventName, (imageWidth - eventNameWidth) / 2, qrSize + 40);\r\n\r\n            g2d.dispose();\r\n            ImageIO.write(combinedImage, ""png"", new File(filePath));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        generateQRWithText(""https://example.com"", ""John Doe"", ""Tech Conference"", ""C:\\Users\\Nirmalw\\Desktop\\QR_with_text.png"");\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,import lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.event.EventListener;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Service;\r\nimport java.io.IOException;\r\nimport java.nio.file.*;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class DirectoryWatcherService {\r\n\r\n    private final WatchService watchService;\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try {\r\n                WatchKey key = watchService.take();\r\n                for (WatchEvent<?> event : key.pollEvents()) {\r\n                    // actions on created files\r\n                }\r\n                key.reset();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n                break;\r\n            } catch (Exception e) {\r\n                handleFailure(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleFailure(Exception e) {\r\n        try {\r\n            Thread.sleep(5000);\r\n            startWatching();\r\n        } catch (InterruptedException ex) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,import com.google.gson.Gson;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport org.bson.Document;\r\nimport java.util.List;\r\n\r\npublic class ParallelStreamProcessor {\r\n\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static List<InsertOneModel<Document>> processPuzzles(List<Object> puzzles) {\r\n        return puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .toList();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class MapToJsonConverter {\r\n\r\n    public static String convertMapToJsonWithCamelCase(Map<String, Object> fields) throws JsonProcessingException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Map<String, Object> transformedMap = fields.entrySet().stream()\r\n                .collect(Collectors.toMap(\r\n                        entry -> toCamelCase(entry.getKey()),\r\n                        Map.Entry::getValue\r\n                ));\r\n        return mapper.writeValueAsString(transformedMap);\r\n    }\r\n\r\n    private static String toCamelCase(String underscore) {\r\n        String[] parts = underscore.split(""_"");\r\n        if (parts.length == 0) return underscore;\r\n        StringBuilder camelCase = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCase.append(Character.toUpperCase(parts[i].charAt(0))).append(parts[i].substring(1));\r\n        }\r\n        return camelCase.toString();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class StrictFpExample {\r\n    public static void main(String[] args) {\r\n        nonStrictFpCalculation();\r\n        strictFpCalculation();\r\n    }\r\n\r\n    static void nonStrictFpCalculation() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Non-strictfp result: "" + c);\r\n    }\r\n\r\n    static strictfp void strictFpCalculation() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Strictfp result: "" + c);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteOrder;\r\n\r\npublic class LargeLongArray {\r\n    private static final long LONG_SIZE = Long.BYTES;\r\n    private final MemorySegment segment;\r\n    private final VarHandle handle;\r\n    private final long size;\r\n\r\n    public LargeLongArray(long size) {\r\n        if (size <= 0) throw new IllegalArgumentException(""Size must be positive"");\r\n        this.size = size;\r\n        this.segment = MemorySegment.allocateNative(size * LONG_SIZE, MemorySession.global());\r\n        this.handle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n        handle.set(segment, index * LONG_SIZE, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n        return (long) handle.get(segment, index * LONG_SIZE);\r\n    }\r\n\r\n    public long size() {\r\n        return size;\r\n    }\r\n\r\n    public void copyTo(LargeLongArray destination, long srcIndex, long destIndex, long length) {\r\n        if (srcIndex < 0 || destIndex < 0 || length < 0 || \r\n            srcIndex + length > this.size || destIndex + length > destination.size) {\r\n            throw new IndexOutOfBoundsException(""Invalid copy range"");\r\n        }\r\n        MemorySegment.copy(this.segment, srcIndex * LONG_SIZE, destination.segment, destIndex * LONG_SIZE, length * LONG_SIZE);\r\n    }\r\n\r\n    public void fill(long value) {\r\n        for (long i = 0; i < size; i++) {\r\n            set(i, value);\r\n        }\r\n    }\r\n\r\n    public void free() {\r\n        segment.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.awt.*;\r\nimport java.awt.geom.AffineTransform;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class BulletRenderer {\r\n    private final Map<Double, BufferedImage> rotationCache = new HashMap<>();\r\n\r\n    public BufferedImage rotateImage(BufferedImage img, double angle) {\r\n        if (rotationCache.containsKey(angle)) {\r\n            return rotationCache.get(angle);\r\n        }\r\n\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n\r\n        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n\r\n        AffineTransform at = new AffineTransform();\r\n        at.rotate(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n        g2d.drawImage(img, at, null);\r\n        g2d.dispose();\r\n\r\n        rotationCache.put(angle, rotated);\r\n        return rotated;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.graalvm.polyglot.*;\r\n\r\npublic class GraalJSScript {\r\n    public static void main(String[] args) {\r\n        try (Context context = Context.create()) {\r\n            context.eval(""js"", ""console.log('Hello, GraalVM!');"");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setOnShowing(e -> {\r\n            comboBox.lookup("".combo-box-popup"").getStyleClass().add(""yellowed"");\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package GUI.QLKH;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport DTO.QLKH_DTO;\r\nimport java.util.List;\r\nimport utils.HibernateUtil;\r\n\r\npublic class QLKH {\r\n    private static SessionFactory factory;\r\n    Session session = null;\r\n\r\n    public static void main(String[] args) {\r\n        factory = HibernateUtil.getSessionFactory();\r\n        QLKH Customer = new QLKH();\r\n        System.out.println(""search customers:"");\r\n        Customer.search();\r\n    }\r\n\r\n    public void search() {\r\n        String temp = ""John%"";\r\n        session = factory.openSession();\r\n        session.beginTransaction();\r\n        List<QLKH_DTO> search;\r\n        search = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n        session.getTransaction().commit();\r\n        for (QLKH_DTO customer : search) {\r\n            System.out.print(""Password: "" + customer.getPassword());\r\n            System.out.print(""Fullname: "" + customer.getFullname());\r\n            System.out.println(""Address: "" + customer.getAddress());\r\n            System.out.println(""City: "" + customer.getCity());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package app.controllers;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport java.io.IOException;\r\nimport app.components.Custom;\r\n\r\npublic class Menu {\r\n\r\n    @FXML\r\n    private VBox ccContainer;\r\n\r\n    private Custom cc;\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(""/app/components/Custom.fxml""));\r\n            cc = loader.load();\r\n            ccContainer.getChildren().add(cc);\r\n            cc.newText(""Test"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import static org.mockito.Mockito.*;\r\nimport static org.assertj.core.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.PageRequest;\r\n\r\nimport java.util.List;\r\n\r\nclass ReportServiceTest {\r\n\r\n    @Test\r\n    void get_report_page() {\r\n        ReportPageRequest reportPageRequest = prepare_request();\r\n        prepare_reportPage(context, 9999L, pageable);\r\n\r\n        when(reportConverter.toReportSpecification(user, reportPageRequest)).thenReturn(reportSpecification);\r\n        when(PageRequest.of(1, 100)).thenReturn(pageRequest);\r\n        when(reportRepository.findAll(reportSpecification, pageRequest)).thenReturn(reportPage);\r\n        when(reportConverter.toReportPageResponse(context)).thenReturn(reportPageResponses);\r\n\r\n        try (MockedConstruction<PageImpl> pageMockedConstruction = Mockito.mockConstruction(PageImpl.class,\r\n                (mock, context) -> {\r\n                    when(mock.getTotalElements()).thenReturn(123456L);\r\n                    when(mock.getTotalPages()).thenReturn(1);\r\n                    when(mock.getContent()).thenReturn(reportPageResponses);\r\n                })) {\r\n\r\n            Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n\r\n            assertThat(actual.getTotalElements()).isEqualTo(123456L);\r\n            assertThat(actual.getTotalPages()).isEqualTo(1);\r\n            assertThat(actual.getContent()).isEqualTo(reportPageResponses);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            BorderPane root = new BorderPane();\r\n            Scene scene = new Scene(root, 400, 400);\r\n\r\n            StackPane stack = new StackPane();\r\n            Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n\r\n            stack.setLayoutX(200);\r\n            stack.setLayoutY(200);\r\n            text.setFont(Font.font(16));\r\n            stack.getChildren().add(text);\r\n            root.getChildren().add(stack);\r\n\r\n            Color color1 = Color.RED;\r\n            Color color2 = Color.BLUE;\r\n\r\n            Timeline timeline = new Timeline(\r\n                    new KeyFrame(Duration.ZERO, e -> text.setFill(color1)),\r\n                    new KeyFrame(Duration.seconds(2), e -> text.setFill(color2))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(true);\r\n            timeline.play();\r\n\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Objects;\r\n\r\npublic class OAuth2Client {\r\n    private static final String TOKEN_URL = ""https://your-auth-server.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String SCOPE = ""your-scope"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n    private static final String API_URL = ""https://api.example.com/protected/resource"";\r\n\r\n    private final OkHttpClient client = new OkHttpClient();\r\n\r\n    public String getAccessToken() throws IOException {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(""grant_type"", GRANT_TYPE)\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .add(""scope"", SCOPE)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(body)\r\n                .header(""Content-Type"", ""application/x-www-form-urlencoded"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            return Objects.requireNonNull(response.body()).string();\r\n        }\r\n    }\r\n\r\n    public String callProtectedApi(String accessToken) throws IOException {\r\n        Request request = new Request.Builder()\r\n                .url(API_URL)\r\n                .header(""Authorization"", ""Bearer "" + accessToken)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            return Objects.requireNonNull(response.body()).string();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            OAuth2Client client = new OAuth2Client();\r\n            String tokenResponse = client.getAccessToken();\r\n            System.out.println(""Access Token Response: "" + tokenResponse);\r\n\r\n            String accessToken = extractAccessToken(tokenResponse);\r\n            String apiResponse = client.callProtectedApi(accessToken);\r\n            System.out.println(""API Response: "" + apiResponse);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String extractAccessToken(String tokenResponse) {\r\n        return tokenResponse.split(""\""access_token\"":\"""")[1].split(""\"""")[0];\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MapEmbedder extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        webView.getEngine().load(""file:///"" + System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n\r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignmentExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n\r\n            Set<String> fieldNames = new HashSet<>();\r\n            classDeclaration.findAll(FieldDeclaration.class).forEach(field -> \r\n                field.getVariables().forEach(var -> fieldNames.add(var.getNameAsString()))\r\n            );\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                methodDeclaration.findAll(NameExpr.class).forEach(nameExpr -> {\r\n                    if (fieldNames.contains(nameExpr.getNameAsString())) {\r\n                        readFields.add(nameExpr.getNameAsString());\r\n                    }\r\n                });\r\n\r\n                methodDeclaration.findAll(AssignmentExpr.class).forEach(assignExpr -> {\r\n                    if (assignExpr.getTarget().isNameExpr()) {\r\n                        String fieldName = assignExpr.getTarget().asNameExpr().getNameAsString();\r\n                        if (fieldNames.contains(fieldName)) {\r\n                            writeFields.add(fieldName);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                methodDeclaration.findAll(UnaryExpr.class).forEach(unaryExpr -> {\r\n                    if (unaryExpr.getExpression().isNameExpr()) {\r\n                        String fieldName = unaryExpr.getExpression().asNameExpr().getNameAsString();\r\n                        if (fieldNames.contains(fieldName)) {\r\n                            writeFields.add(fieldName);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                System.out.println(""    Read Fields: "" + readFields);\r\n                System.out.println(""    Write Fields: "" + writeFields);\r\n            });\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@interface Annotation {\r\n    Class<?> className() default Void.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n    \r\n    @Annotation(className = String.class)\r\n    private String explicitlyAnnotated;\r\n\r\n    public static void main(String[] args) {\r\n        extractAndPrintClassName(Main.class);\r\n    }\r\n\r\n    public static void extractAndPrintClassName(Class<?> clazz) {\r\n        for (Field field : clazz.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> defaultClass = annotation.className() == Void.class ? field.getType() : annotation.className();\r\n                System.out.println(""Field: "" + field.getName() + "" -> Class: "" + defaultClass.getSimpleName());\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Types;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.element.VariableElement;\r\nimport javax.annotation.processing.ProcessingEnvironment;\r\n\r\npublic class SwitchTypeResolver {\r\n\r\n    private final Trees trees;\r\n    private final Types types;\r\n\r\n    public SwitchTypeResolver(ProcessingEnvironment processingEnv) {\r\n        this.trees = Trees.instance(processingEnv);\r\n        this.types = processingEnv.getTypeUtils();\r\n    }\r\n\r\n    public TypeMirror getSwitchExpressionType(MethodTree methodTree) {\r\n        BlockTree blockTree = methodTree.getBody();\r\n\r\n        for (StatementTree statementTree : blockTree.getStatements()) {\r\n            if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                SwitchTree switchTree = (SwitchTree) statementTree;\r\n                ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n\r\n                Element element = trees.getElement(trees.getPath(trees.getCompilationUnit(methodTree), switchTreeExpression));\r\n                if (element instanceof VariableElement || element instanceof TypeElement) {\r\n                    return element.asType();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\n\r\n@Component\r\npublic class FxmlLoaderFactory {\r\n\r\n    private final ApplicationContext applicationContext;\r\n\r\n    public FxmlLoaderFactory(ApplicationContext applicationContext) {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n\r\n    public VBox loadFxml(String fxmlPath) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));\r\n            loader.setControllerFactory(clazz -> applicationContext.getAutowireCapableBeanFactory().createBean(clazz));\r\n            return loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to load FXML: "" + fxmlPath, e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.ScatterChart;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport java.util.List;\r\n\r\npublic class SmoothedScatterChart extends Application {\r\n\r\n    private List<Double> r = List.of(1.0, 2.0, 3.0, 4.0, 5.0);\r\n    private List<Double> nodes = List.of(0.0, 45.0, 90.0, 135.0, 180.0);\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        primaryStage.setTitle(""Smoothed Scatter Chart"");\r\n\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series = new XYChart.Series<>();\r\n\r\n        for (int i = 0; i < r.size(); i++) {\r\n            series.getData().add(new XYChart.Data<>(\r\n                r.get(i) * Math.cos(Math.toRadians(nodes.get(i))),\r\n                r.get(i) * Math.sin(Math.toRadians(nodes.get(i)))\r\n            ));\r\n        }\r\n\r\n        scatterChart.getData().add(series);\r\n\r\n        primaryStage.setScene(new Scene(scatterChart, 800, 600));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        view.post(() -> {\r\n            View parent = (View) view.getParent();\r\n            BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(parent);\r\n            behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n            behavior.setPeekHeight(parent.getHeight());\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(""BUSINESS""))\r\n        .min(Comparator.comparing(CustomObject::url))\r\n        .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND""))\r\n        .let(firstBusiness -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS"") && object.objectStatus().equals(""ACTIVE""))\r\n            .min(Comparator.comparing(CustomObject::url))\r\n            .orElse(firstBusiness))\r\n        .let(firstActive -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS"") && object.objectStatus().equals(""ACTIVE"") && object.locale().equals(""en-US""))\r\n            .min(Comparator.comparing(CustomObject::url))\r\n            .orElse(firstActive))\r\n        .getUrl();\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"static class AnimatedRect extends Rectangle {\r\n    private final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n    public AnimatedRect(double width, double height) {\r\n        super(width, height);\r\n        setFill(color1.get());\r\n\r\n        ChangeListener<Paint> updateTimeline = (obs, o, v) -> {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        };\r\n\r\n        color1.addListener(updateTimeline);\r\n        color2.addListener(updateTimeline);\r\n\r\n        sceneProperty().addListener((obs, o, n) -> {\r\n            if (timeline.get() != null) {\r\n                if (n != null) {\r\n                    timeline.get().play();\r\n                } else {\r\n                    timeline.get().stop();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private Timeline createTimeline() {\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), LINEAR)),\r\n            new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), LINEAR))\r\n        );\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.setAutoReverse(false);\r\n        return timeline;\r\n    }\r\n\r\n    final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n        StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n    );\r\n\r\n    final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n        StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n    );\r\n\r\n    static class StyleableProperties {\r\n        private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n            ""-color1"", PaintConverter.getInstance(), Color.RED\r\n        ) {\r\n            @Override\r\n            public boolean isSettable(AnimatedRect c) {\r\n                return !c.color1.isBound();\r\n            }\r\n\r\n            @Override\r\n            public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                return c.color1;\r\n            }\r\n        };\r\n\r\n        private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n            ""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n        ) {\r\n            @Override\r\n            public boolean isSettable(AnimatedRect c) {\r\n                return !c.color2.isBound();\r\n            }\r\n\r\n            @Override\r\n            public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                return c.color2;\r\n            }\r\n        };\r\n\r\n        private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n        static {\r\n            List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n            styleables.add(COLOR1);\r\n            styleables.add(COLOR2);\r\n            STYLEABLES = Collections.unmodifiableList(styleables);\r\n        }\r\n    }\r\n\r\n    public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n        return StyleableProperties.STYLEABLES;\r\n    }\r\n\r\n    @Override\r\n    public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n        return getClassCssMetaData();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@GetMapping(path = ""/file"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName,\r\n        @RequestParam String bucketName, @RequestParam String projectName) {\r\n    try {\r\n        Storage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\n        Blob blob = storage.get(bucketName, fileName);\r\n        if (blob == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n\r\n        InputStream inputStream = Channels.newInputStream(blob.reader());\r\n        String contentType = blob.getContentType() != null ? blob.getContentType() : MediaType.APPLICATION_OCTET_STREAM_VALUE;\r\n\r\n        return ResponseEntity.ok()\r\n                .contentType(MediaType.parseMediaType(contentType))\r\n                .header(HttpHeaders.CONTENT_DISPOSITION, ""attachment; filename=\"""" + fileName + ""\"""")\r\n                .body(new InputStreamResource(inputStream));\r\n\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@ExtendWith(SpringExtension.class)\r\n@DataJpaTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    private MyEntityRepository repo;\r\n\r\n    @Spy\r\n    private MyEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        doReturn(expected).when(entityListener).doThis();\r\n\r\n        MyEntity e = new MyEntity();\r\n        MyEntity stored = repo.save(e);\r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n\r\n    @TestConfiguration\r\n    static class TestConfig {\r\n        @Bean\r\n        public MyEntityListener myEntityListener() {\r\n            return spy(new MyEntityListener());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.bytedeco.ffmpeg.avcodec.AVCodec;\r\nimport org.bytedeco.ffmpeg.avcodec.AVCodecContext;\r\nimport org.bytedeco.ffmpeg.avcodec.AVPacket;\r\nimport org.bytedeco.ffmpeg.avutil.AVFrame;\r\nimport org.bytedeco.ffmpeg.global.avcodec;\r\nimport org.bytedeco.ffmpeg.global.avutil;\r\nimport org.bytedeco.ffmpeg.global.swscale;\r\nimport org.bytedeco.ffmpeg.swscale.SwsContext;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class H264Decoder {\r\n    private AVCodecContext codecContext;\r\n    private AVPacket packet;\r\n    private AVFrame frame;\r\n    private SwsContext swsCtx;\r\n\r\n    public H264Decoder() {\r\n        AVCodec codec = avcodec.avcodec_find_decoder(avcodec.AV_CODEC_ID_H264);\r\n        codecContext = avcodec.avcodec_alloc_context3(codec);\r\n        avcodec.avcodec_open2(codecContext, codec, (AVCodecContext) null);\r\n\r\n        packet = avcodec.av_packet_alloc();\r\n        frame = avutil.av_frame_alloc();\r\n    }\r\n\r\n    public byte[] decodeH264(byte[] h264Bytes) {\r\n        packet.size(h264Bytes.length);\r\n        packet.data(avutil.av_malloc(h264Bytes.length));\r\n        packet.data().put(h264Bytes);\r\n\r\n        if (avcodec.avcodec_send_packet(codecContext, packet) < 0) {\r\n            return null;\r\n        }\r\n\r\n        if (avcodec.avcodec_receive_frame(codecContext, frame) == 0) {\r\n            int width = codecContext.width();\r\n            int height = codecContext.height();\r\n\r\n            byte[] rawData = new byte[width * height * 3];\r\n            frame.data(0).get(rawData);\r\n\r\n            return rawData;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public Map.Entry<Boolean, List<Integer>> hasMdat(byte[] byteArray) {\r\n        for (int i = 0; i < byteArray.length - 3; i++) {\r\n            if (byteArray[i] == 'm' && byteArray[i + 1] == 'd' &&\r\n                byteArray[i + 2] == 'a' && byteArray[i + 3] == 't') {\r\n                return Map.entry(true, Arrays.asList(i, i + 1, i + 2, i + 3));\r\n            }\r\n        }\r\n        return Map.entry(false, List.of(0));\r\n    }\r\n\r\n    public void processStream(byte[] bytes) {\r\n        Map.Entry<Boolean, List<Integer>> mdatLocation = hasMdat(bytes);\r\n        if (mdatLocation.getKey()) {\r\n            byte[] h264Data = Arrays.copyOfRange(bytes, mdatLocation.getValue().get(3) + 1, bytes.length);\r\n            byte[] decodedFrame = decodeH264(h264Data);\r\n            if (decodedFrame != null) {\r\n                // Send decodedFrame to client via SSE or WebSocket\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<dependency>\r\n    <groupId>org.bytedeco</groupId>\r\n    <artifactId>javacv-platform</artifactId>\r\n    <version>1.5.9</version>\r\n</dependency>\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n    public static List<int[]> findPattern(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        List<int[]> result = new ArrayList<>();\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matches(T, P, i, j)) {\r\n                    result.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static boolean matches(int[][] T, int[][] P, int startX, int startY) {\r\n        int u = P.length, v = P[0].length;\r\n        for (int i = 0; i < u; i++) {\r\n            for (int j = 0; j < v; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[startX + i][startY + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n                {2, 3, 4, 3, 6},\r\n                {4, 1, 5, 7, 8},\r\n                {9, 1, 2, 3, 1},\r\n                {2, 4, 5, 1, 5},\r\n                {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n                {2, 3, 0},\r\n                {0, 1, 5},\r\n                {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> positions = findPattern(T, P);\r\n        for (int[] pos : positions) {\r\n            System.out.println(""("" + pos[0] + "", "" + pos[1] + "")"");\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private DatabaseReference reference;\r\n    private List<SCard> itemList;\r\n    private SCardAdapter adapter;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n        reference = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\n        itemList = new ArrayList<>();\r\n        adapter = new SCardAdapter(itemList);\r\n        recyclerView.setAdapter(adapter);\r\n        fetchAll();\r\n        return v;\r\n    }\r\n\r\n    private void fetchAll() {\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                itemList.clear();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard item = company.getValue(SCard.class);\r\n                        if (item != null) {\r\n                            itemList.add(item);\r\n                        }\r\n                    }\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {}\r\n        });\r\n    }\r\n}\r\n\r\npublic class SCardAdapter extends RecyclerView.Adapter<SCardAdapter.ViewHolder> {\r\n    private List<SCard> itemList;\r\n\r\n    public SCardAdapter(List<SCard> itemList) {\r\n        this.itemList = itemList;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        SCard item = itemList.get(position);\r\n        holder.setName(item.getsName());\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return itemList.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String name) {\r\n            sname.setText(name);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.util.StringUtils;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class RestrictedLocaleResolver implements LocaleResolver {\r\n    private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(Locale.ENGLISH, new Locale(""hi""));\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String localeParam = request.getParameter(""locale"");\r\n        if (StringUtils.hasText(localeParam)) {\r\n            Locale requestedLocale = Locale.forLanguageTag(localeParam);\r\n            if (ALLOWED_LOCALES.contains(requestedLocale)) {\r\n                return requestedLocale;\r\n            } else {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + localeParam);\r\n            }\r\n        }\r\n        return Locale.ENGLISH;\r\n    }\r\n\r\n    @Override\r\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\r\n        if (!ALLOWED_LOCALES.contains(locale)) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Modifier;\r\n\r\npublic class ReflectionUtil {\r\n    public static Object createParentInstance() {\r\n        try {\r\n            Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n            constructor.setAccessible(true);\r\n            removeFinalModifier(constructor);\r\n            return constructor.newInstance();\r\n        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\r\n            throw new RuntimeException(""Failed to create Parent instance"", e);\r\n        }\r\n    }\r\n\r\n    private static void removeFinalModifier(Constructor<?> constructor) {\r\n        try {\r\n            Field modifiersField = Constructor.class.getDeclaredField(""modifiers"");\r\n            modifiersField.setAccessible(true);\r\n            modifiersField.setInt(constructor, constructor.getModifiers() & ~Modifier.PRIVATE);\r\n        } catch (NoSuchFieldException | IllegalAccessException ignored) {\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.security.KeyFactory;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyUtil {\r\n    public static PrivateKey getPrivateKeyFromString(String privateKey) {\r\n        try {\r\n            byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n            return keyFactory.generatePrivate(keySpec);\r\n        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\r\n            throw new RuntimeException(""Failed to convert String to PrivateKey"", e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport com.google.protobuf.TextFormat;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorProto;\r\n\r\npublic class ProtoParser {\r\n    public static FileDescriptorProto parseProtoFile(String filePath) {\r\n        try {\r\n            Path path = Paths.get(filePath);\r\n            String protoContent = new String(Files.readAllBytes(path));\r\n            FileDescriptorProto.Builder builder = FileDescriptorProto.newBuilder();\r\n            TextFormat.getParser().merge(protoContent, builder);\r\n            return builder.build();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to parse proto file"", e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Execution timed out"");\r\n        }\r\n        int result = counter.get().get();\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout, TimeUnit unit) throws TimeoutException {\r\n        long startTime = System.nanoTime();\r\n        long timeoutNanos = unit.toNanos(timeout);\r\n        while (loop-- >= 0) {\r\n            if (System.nanoTime() - startTime > timeoutNanos) {\r\n                throw new TimeoutException(""Function execution timed out"");\r\n            }\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import io.opentelemetry.api.common.Attributes;\r\nimport io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.Scope;\r\n\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class ETLStepProcessor {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(""etl-pipeline"");\r\n\r\n    public void execute(DataPackage obj, String stepName) {\r\n        String traceId = generateTraceId(obj.getUniqueId());\r\n        String spanId = generateSpanId(stepName);\r\n        \r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceId,\r\n                spanId,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span span = tracer.spanBuilder(stepName)\r\n                .setParent(Context.current().with(Span.wrap(spanContext)))\r\n                .setAttribute(""data.package.id"", obj.getUniqueId())\r\n                .setAttribute(""etl.step"", stepName)\r\n                .startSpan();\r\n\r\n        try (Scope scope = span.makeCurrent()) {\r\n            CompletableFuture.runAsync(() -> processStep(obj, stepName))\r\n                    .whenComplete((result, exception) -> {\r\n                        if (exception != null) {\r\n                            span.recordException(exception);\r\n                        }\r\n                        span.end();\r\n                    });\r\n        }\r\n    }\r\n\r\n    private void processStep(DataPackage obj, String stepName) {\r\n        // Simulate step processing\r\n    }\r\n\r\n    private String generateTraceId(String uniqueId) {\r\n        byte[] uniqueIdBytes = uniqueId.getBytes(StandardCharsets.UTF_8);\r\n        ByteBuffer buffer = ByteBuffer.allocate(16);\r\n        if (uniqueIdBytes.length < 16) {\r\n            buffer.put(new byte[16 - uniqueIdBytes.length]);\r\n        }\r\n        buffer.put(uniqueIdBytes, 0, Math.min(uniqueIdBytes.length, 16));\r\n        return TraceId.fromBytes(buffer.array());\r\n    }\r\n\r\n    private String generateSpanId(String stepName) {\r\n        byte[] stepNameBytes = stepName.getBytes(StandardCharsets.UTF_8);\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        if (stepNameBytes.length < 8) {\r\n            buffer.put(new byte[8 - stepNameBytes.length]);\r\n        }\r\n        buffer.put(stepNameBytes, 0, Math.min(stepNameBytes.length, 8));\r\n        return SpanId.fromBytes(buffer.array());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.*;\r\n\r\nclass LRUCache {\r\n    private static class Node {\r\n        int key, value;\r\n        Node prev, next;\r\n        Node(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map;\r\n    private final Node head, tail;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        this.map = new HashMap<>(capacity);\r\n        this.head = new Node(0, 0);\r\n        this.tail = new Node(0, 0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (!map.containsKey(key)) {\r\n            return -1;\r\n        }\r\n        Node node = map.get(key);\r\n        remove(node);\r\n        insertToFront(node);\r\n        return node.value;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            remove(map.get(key));\r\n        }\r\n        if (map.size() >= capacity) {\r\n            remove(tail.prev);\r\n        }\r\n        insertToFront(new Node(key, value));\r\n    }\r\n\r\n    private void remove(Node node) {\r\n        map.remove(node.key);\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    private void insertToFront(Node node) {\r\n        map.put(node.key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JRException;\r\nimport net.sf.jasperreports.engine.JasperCompileManager;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.export.JRPdfExporter;\r\nimport net.sf.jasperreports.export.SimpleExporterInput;\r\nimport net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;\r\nimport net.sf.jasperreports.export.SimplePdfExporterConfiguration;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class S3ImageToPdf {\r\n    private static final String BUCKET_NAME = ""your-bucket-name"";\r\n    private static final String IMAGE_KEY = ""path/to/your-image.jpg"";\r\n    private static final String JASPER_TEMPLATE = ""your-report-template.jrxml"";\r\n    private static final String OUTPUT_PDF = ""output.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException, JRException {\r\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\r\n        S3Object s3Object = s3Client.getObject(BUCKET_NAME, IMAGE_KEY);\r\n        InputStream inputStream = s3Object.getObjectContent();\r\n        \r\n        BufferedImage image = ImageIO.read(inputStream);\r\n        File tempFile = File.createTempFile(""temp-image"", "".jpg"");\r\n        ImageIO.write(image, ""jpg"", tempFile);\r\n\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(JASPER_TEMPLATE);\r\n        Map<String, Object> parameters = new HashMap<>();\r\n        parameters.put(""IMAGE_PATH"", tempFile.getAbsolutePath());\r\n\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new net.sf.jasperreports.engine.JREmptyDataSource());\r\n\r\n        JRPdfExporter exporter = new JRPdfExporter();\r\n        exporter.setExporterInput(new SimpleExporterInput(jasperPrint));\r\n        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(OUTPUT_PDF));\r\n        exporter.setConfiguration(new SimplePdfExporterConfiguration());\r\n        exporter.exportReport();\r\n\r\n        tempFile.delete();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.awt.*;  \r\nimport java.awt.event.*;\r\nimport javax.swing.*;  \r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        image = new ImageIcon(""Basic_red_dot.png"").getImage().getScaledInstance(75, 75, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, 75, 75);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) x = Math.max(x - MOVE_AMOUNT, 0);\r\n        if (rightPressed) x = Math.min(x + MOVE_AMOUNT, getWidth() - 75);\r\n        if (upPressed) y = Math.max(y - MOVE_AMOUNT, 0);\r\n        if (downPressed) y = Math.min(y + MOVE_AMOUNT, getHeight() - 75);\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n\r\n    public BlueDot() {\r\n        setOpaque(false);\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        image = new ImageIcon(""Basic_blue_dot.png"").getImage().getScaledInstance(10, 10, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, 10, 10);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getParent().getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Image Display"");\r\n            frame.setSize(500, 500);\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setLayout(null);\r\n\r\n            Surface surface = new Surface();\r\n            surface.setBounds(0, 0, 500, 500);\r\n            frame.add(surface);\r\n\r\n            BlueDot blueDot = new BlueDot();\r\n            blueDot.setBounds(0, 0, 500, 500);\r\n            frame.add(blueDot);\r\n\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n            surface.requestFocusInWindow();\r\n\r\n            Timer collisionTimer = new Timer(10, e -> {\r\n                if (surface.getRedDotBounds().intersects(blueDot.getBlueDotBounds())) {\r\n                    System.out.println(""Collision!!!!"");\r\n                }\r\n            });\r\n            collisionTimer.start();\r\n        });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                (currentValue >> 32) & 0xFFFF, \r\n                (currentValue >> 16) & 0xFFF, \r\n                currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        BigDecimal min = new BigDecimal(""-20.00"");\r\n        BigDecimal max = new BigDecimal(""20.00"");\r\n        BigDecimal step = new BigDecimal(""0.25"");\r\n\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            private final SimpleObjectProperty<BigDecimal> value = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n            private final DecimalFormat format = new DecimalFormat(""+0.00;-0.00"");\r\n\r\n            {\r\n                value.addListener((obs, oldValue, newValue) -> {\r\n                    if (newValue.compareTo(min) < 0) {\r\n                        setValue(min);\r\n                    } else if (newValue.compareTo(max) > 0) {\r\n                        setValue(max);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void decrement(int steps) {\r\n                setValue(getValue().subtract(step.multiply(BigDecimal.valueOf(steps))));\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                setValue(getValue().add(step.multiply(BigDecimal.valueOf(steps))));\r\n            }\r\n\r\n            @Override\r\n            public void setValue(BigDecimal newValue) {\r\n                if (newValue.compareTo(min) < 0) newValue = min;\r\n                if (newValue.compareTo(max) > 0) newValue = max;\r\n                value.set(newValue.setScale(2, BigDecimal.ROUND_HALF_UP));\r\n            }\r\n\r\n            @Override\r\n            public BigDecimal getValue() {\r\n                return value.get();\r\n            }\r\n\r\n            @Override\r\n            public StringConverter<BigDecimal> getConverter() {\r\n                return new StringConverter<>() {\r\n                    @Override\r\n                    public String toString(BigDecimal object) {\r\n                        return object == null ? ""+0.00"" : format.format(object);\r\n                    }\r\n\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            return new BigDecimal(format.parse(string).toString());\r\n                        } catch (ParseException e) {\r\n                            return BigDecimal.ZERO;\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        Pattern pattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> pattern.matcher(change.getControlNewText()).matches() ? change : null;\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(valueFactory.getConverter(), BigDecimal.ZERO, filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        spinner.getEditor().textProperty().addListener((obs, oldText, newText) -> {\r\n            try {\r\n                BigDecimal value = new BigDecimal(newText.replace("","", "".""));\r\n                if (value.compareTo(min) < 0) spinner.getValueFactory().setValue(min);\r\n                if (value.compareTo(max) > 0) spinner.getValueFactory().setValue(max);\r\n            } catch (NumberFormatException ignored) {\r\n            }\r\n        });\r\n\r\n        StackPane root = new StackPane(spinner);\r\n        primaryStage.setScene(new Scene(root, 300, 200));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@GetMapping(value = ""/test"")\r\n@ResponseBody\r\n@ApiBaseSiteIdAndUserIdParam\r\n@Secured({ ""ROLE_CUSTOMERGROUP"", ""ROLE_TRUSTED_CLIENT"", ""ROLE_CUSTOMERMANAGERGROUP"" })\r\npublic TestListWsDTO getTest(@RequestParam(required = false, defaultValue = DEFAULT_FIELD_SET) final String fields) {\r\n    if (userFacade.isAnonymousUser()) {\r\n        throw new AccessDeniedException(""Anonymous user is not allowed"");\r\n    }\r\n\r\n    CustomerModel currentUser = userService.getCurrentUser();\r\n    if (currentUser == null || userService.isAnonymousUser(currentUser)) {\r\n        throw new AccessDeniedException(""User session is not authenticated"");\r\n    }\r\n\r\n    customerFacade.loginSuccess();\r\n    return testConverter.convert(customerFacade.getCurrentCustomer());\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.stage.Stage;\r\n\r\npublic class StageUserDataListener {\r\n    private final ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>();\r\n\r\n    public StageUserDataListener(Stage stage) {\r\n        userDataProperty.addListener((observable, oldValue, newValue) -> \r\n            System.out.println(""New userData: "" + newValue)\r\n        );\r\n\r\n        stage.userDataProperty().addListener((observable, oldValue, newValue) -> \r\n            userDataProperty.set(newValue)\r\n        );\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Stage stage = new Stage();\r\n        StageUserDataListener listener = new StageUserDataListener(stage);\r\n\r\n        stage.setUserData(2);\r\n        stage.setUserData(3);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.locationtech.jts.geom.Coordinate;\r\nimport org.locationtech.jts.geom.Geometry;\r\nimport org.locationtech.jts.geom.GeometryFactory;\r\nimport org.locationtech.jts.geom.Polygon;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Struct;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.sql.DataSource;\r\nimport oracle.jdbc.OracleConnection;\r\nimport oracle.jdbc.OraclePreparedStatement;\r\nimport oracle.jdbc.OracleResultSet;\r\nimport oracle.jdbc.internal.OracleStruct;\r\n\r\n@Component\r\npublic class SdoGeometryConverter {\r\n\r\n    private final DataSource dataSource;\r\n    private static final GeometryFactory geometryFactory = new GeometryFactory();\r\n\r\n    public SdoGeometryConverter(DataSource dataSource) {\r\n        this.dataSource = dataSource;\r\n    }\r\n\r\n    public void savePolygon(Long id, Polygon polygon) throws SQLException {\r\n        try (Connection connection = dataSource.getConnection()) {\r\n            OracleConnection oracleConnection = connection.unwrap(OracleConnection.class);\r\n            Struct sdoGeometry = createSdoGeometry(oracleConnection, polygon);\r\n            String sql = ""UPDATE my_table SET shape = ? WHERE id = ?"";\r\n            try (OraclePreparedStatement statement = (OraclePreparedStatement) oracleConnection.prepareStatement(sql)) {\r\n                statement.setObject(1, sdoGeometry);\r\n                statement.setLong(2, id);\r\n                statement.executeUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    public Polygon retrievePolygon(Long id) throws SQLException {\r\n        try (Connection connection = dataSource.getConnection()) {\r\n            OracleConnection oracleConnection = connection.unwrap(OracleConnection.class);\r\n            String sql = ""SELECT shape FROM my_table WHERE id = ?"";\r\n            try (OraclePreparedStatement statement = (OraclePreparedStatement) oracleConnection.prepareStatement(sql)) {\r\n                statement.setLong(1, id);\r\n                try (OracleResultSet resultSet = (OracleResultSet) statement.executeQuery()) {\r\n                    if (resultSet.next()) {\r\n                        Struct struct = (Struct) resultSet.getObject(1);\r\n                        return convertSdoGeometryToPolygon(struct);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Struct createSdoGeometry(OracleConnection connection, Polygon polygon) throws SQLException {\r\n        int srid = 4326;\r\n        Object[] sdoPoint = null;\r\n        Object[] sdoElemInfo = new Object[]{1, 1003, 1};\r\n        double[] ordinates = new double[polygon.getCoordinates().length * 2];\r\n        for (int i = 0; i < polygon.getCoordinates().length; i++) {\r\n            ordinates[2 * i] = polygon.getCoordinates()[i].x;\r\n            ordinates[2 * i + 1] = polygon.getCoordinates()[i].y;\r\n        }\r\n        Object[] sdoOrdinates = new Object[ordinates.length];\r\n        for (int i = 0; i < ordinates.length; i++) {\r\n            sdoOrdinates[i] = ordinates[i];\r\n        }\r\n        return connection.createStruct(""MDSYS.SDO_GEOMETRY"", new Object[]{2003, srid, sdoPoint, sdoElemInfo, sdoOrdinates});\r\n    }\r\n\r\n    private Polygon convertSdoGeometryToPolygon(Struct struct) throws SQLException {\r\n        Object[] attributes = struct.getAttributes();\r\n        Object[] elemInfoArray = (Object[]) ((Struct) attributes[3]).getAttributes();\r\n        double[] ordinatesArray = (double[]) ((Struct) attributes[4]).getAttributes();\r\n        List<Coordinate> coordinates = new ArrayList<>();\r\n        for (int i = 0; i < ordinatesArray.length; i += 2) {\r\n            coordinates.add(new Coordinate(ordinatesArray[i], ordinatesArray[i + 1]));\r\n        }\r\n        return geometryFactory.createPolygon(coordinates.toArray(new Coordinate[0]));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ReactiveMapTransformer {\r\n\r\n    public static <T> Map<String, String> transformToMap(List<T> list) {\r\n        return Flux.fromIterable(list)\r\n                .flatMap(item -> functionReturningMonoOfC(item)\r\n                        .map(C::url)\r\n                        .map(url -> Map.entry(item.getName(), url)))\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n    }\r\n\r\n    private static <T> Mono<C> functionReturningMonoOfC(T item) {\r\n        // Implementation not provided\r\n        return Mono.empty();\r\n    }\r\n\r\n    private static class C {\r\n        public String url() {\r\n            // Implementation not provided\r\n            return """";\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.net.Socket;\r\nimport java.security.GeneralSecurityException;\r\nimport java.security.KeyStore;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\nimport java.util.Arrays;\r\nimport java.util.Enumeration;\r\n\r\npublic class RedisSSLConfig {\r\n\r\n    public void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""my_cert""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo""));\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String alias)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new CustomX509KeyManager((X509KeyManager) keyManagers[i], alias);\r\n            }\r\n        }\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n\r\n    private static class CustomX509KeyManager implements X509KeyManager {\r\n        private final X509KeyManager originalKeyManager;\r\n        private final String alias;\r\n\r\n        public CustomX509KeyManager(X509KeyManager keyManager, String alias) {\r\n            this.originalKeyManager = keyManager;\r\n            this.alias = alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n            return alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n            return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n        }\r\n\r\n        @Override\r\n        public X509Certificate[] getCertificateChain(String alias) {\r\n            return originalKeyManager.getCertificateChain(alias);\r\n        }\r\n\r\n        @Override\r\n        public PrivateKey getPrivateKey(String alias) {\r\n            return originalKeyManager.getPrivateKey(alias);\r\n        }\r\n\r\n        @Override\r\n        public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n            return originalKeyManager.getClientAliases(keyType, issuers);\r\n        }\r\n\r\n        @Override\r\n        public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n            return originalKeyManager.getServerAliases(keyType, issuers);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class LineNumberInstrumentation extends MethodVisitor {\r\n\r\n    private final String classAndMethodName;\r\n\r\n    public LineNumberInstrumentation(MethodVisitor mv, String classAndMethodName) {\r\n        super(Opcodes.ASM9, mv);\r\n        this.classAndMethodName = classAndMethodName;\r\n    }\r\n\r\n    private void instrument() {\r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getName"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitLdcInsn(""_"" + classAndMethodName + ""_"");\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_2);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\n        super.visitLineNumber(line, start);\r\n        instrument();\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.function.Supplier;\r\n\r\npublic class Task implements Callable<Boolean> {\r\n    private final ReportClient client;\r\n\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public Boolean call() {\r\n        final var uuid = client.createDocument(documentId);\r\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n        CompletableFuture<GetStatusResponse> statusFuture = new CompletableFuture<>();\r\n\r\n        Runnable statusCheck = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                GetStatusResponse status = client.getStatus(uuid);\r\n                if (!Status.PENDING.equals(status.status())) {\r\n                    statusFuture.complete(status);\r\n                } else {\r\n                    scheduler.schedule(this, 10, TimeUnit.SECONDS);\r\n                }\r\n            }\r\n        };\r\n        scheduler.schedule(statusCheck, 0, TimeUnit.SECONDS);\r\n        GetStatusResponse finalStatus = statusFuture.join();\r\n        scheduler.shutdown();\r\n        final var document = client.getReport(uuid);\r\n        return Boolean.TRUE;\r\n    }\r\n\r\n    public static void executeTasks(ReportClient client) throws InterruptedException {\r\n        ExecutorService executor = Executors.newCachedThreadPool();\r\n        List<Callable<Boolean>> tasks = new ArrayList<>();\r\n        for (int i = 0; i < 100; i++) {\r\n            tasks.add(new Task(client));\r\n        }\r\n        executor.invokeAll(tasks);\r\n        executor.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport javax.swing.text.DefaultEditorKit;\r\n\r\npublic class TabToSpacesTextArea {\r\n    public static JTextArea createTextAreaWithSpacesTab() {\r\n        JTextArea textArea = new JTextArea();\r\n        Action tabAction = new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                textArea.replaceSelection(""    "");\r\n            }\r\n        };\r\n        textArea.getInputMap().put(KeyStroke.getKeyStroke(""TAB""), ""insert-spaces"");\r\n        textArea.getActionMap().put(""insert-spaces"", tabAction);\r\n        return textArea;\r\n    }\r\n\r\n    public static void createAndShowGUI() {\r\n        JFrame frame = new JFrame(""JTextArea Tab to Spaces"");\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        JTextArea textArea = createTextAreaWithSpacesTab();\r\n        frame.add(new JScrollPane(textArea));\r\n        frame.setSize(400, 300);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(TabToSpacesTextArea::createAndShowGUI);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@SupportedAnnotationTypes(""com.company.generator.GenerateAnnotation"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class GenerateAnnotationProcessor extends AbstractProcessor {\r\n\r\n    private final Set<String> generatedAnnotations = new HashSet<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getElementsAnnotatedWith(GenerateAnnotation.class)) {\r\n            if (element.getKind() == ElementKind.ENUM) {\r\n                String enumName = element.getSimpleName().toString();\r\n                String annotationName = enumName + ""Annotation"";\r\n                generateAnnotation(enumName, annotationName);\r\n                generatedAnnotations.add(""com.company.generated."" + annotationName);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void generateAnnotation(String enumName, String annotationName) {\r\n        String annotationCode = ""package com.company.generated;\n"" +\r\n                ""import java.lang.annotation.ElementType;\n"" +\r\n                ""import java.lang.annotation.Retention;\n"" +\r\n                ""import java.lang.annotation.RetentionPolicy;\n"" +\r\n                ""import java.lang.annotation.Target;\n"" +\r\n                ""@Retention(RetentionPolicy.RUNTIME)\n"" +\r\n                ""@Target(ElementType.TYPE)\n"" +\r\n                ""public @interface "" + annotationName + "" {\n"" +\r\n                ""    "" + enumName + "" value();\n"" +\r\n                ""}"";\r\n        writeToFile(""com.company.generated."" + annotationName, annotationCode);\r\n    }\r\n\r\n    private void writeToFile(String className, String content) {\r\n        try {\r\n            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);\r\n            try (Writer writer = sourceFile.openWriter()) {\r\n                writer.write(content);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class SecondPassProcessor extends AbstractProcessor {\r\n\r\n    private final Set<String> discoveredAnnotations = new HashSet<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) {\r\n            return false;\r\n        }\r\n        \r\n        for (Element element : roundEnv.getElementsAnnotatedWith(EnumAnnotation.class)) {\r\n            discoveredAnnotations.add(element.toString());\r\n        }\r\n\r\n        for (String annotation : discoveredAnnotations) {\r\n            try {\r\n                TypeElement annotationElement = processingEnv.getElementUtils().getTypeElement(annotation);\r\n                if (annotationElement != null) {\r\n                    for (Element element : roundEnv.getElementsAnnotatedWith(annotationElement)) {\r\n                        generateCodeForElement(element, annotation);\r\n                    }\r\n                }\r\n            } catch (Exception ignored) {\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void generateCodeForElement(Element element, String annotation) {\r\n        String className = element.getSimpleName() + ""Generated"";\r\n        String classContent = ""package com.company.generated;\n"" +\r\n                ""public class "" + className + "" {\n"" +\r\n                ""    public static void process() {\n"" +\r\n                ""        System.out.println(\""Processing "" + annotation + "" for "" + element.getSimpleName() + ""\"");\n"" +\r\n                ""    }\n"" +\r\n                ""}"";\r\n\r\n        writeToFile(""com.company.generated."" + className, classContent);\r\n    }\r\n\r\n    private void writeToFile(String className, String content) {\r\n        try {\r\n            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);\r\n            try (Writer writer = sourceFile.openWriter()) {\r\n                writer.write(content);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public String[] getTransactionsList() throws JsonProcessingException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        return mapper.writeValueAsString(transactionsList).split(""\n"");\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n    \r\n    public static void transactionsReceived(String jsonString) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n    private JsonParser jsonParser;\r\n    private DeserializationContext deserializationContext;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        deserializer = new StringToDateDeserializer();\r\n        jsonParser = mock(JsonParser.class);\r\n        deserializationContext = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException, ParseException {\r\n        String validDate = ""2024-03-17T12:00:00Z"";\r\n        when(jsonParser.getText()).thenReturn(validDate);\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, deserializationContext));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\nimport org.openqa.selenium.chrome.ChromeOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\n\r\nimport java.util.logging.Level;\r\n\r\npublic class JavaScriptErrorLogger {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.chrome.driver"", ""path_to_driver/chromedriver"");\r\n\r\n        ChromeOptions options = new ChromeOptions();\r\n        options.setCapability(""goog:loggingPrefs"", java.util.Map.of(LogType.BROWSER, Level.ALL));\r\n\r\n        WebDriver driver = new ChromeDriver(options);\r\n        driver.get(""https://www.example.com"");\r\n\r\n        LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : logEntries) {\r\n            System.out.println(""JS Error: "" + entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n            .algorithm(JWSAlgorithm.HS256)\r\n            .keyID(""customKey"")\r\n            .build();\r\n    JWKSet jwkSet = new JWKSet(octetKey);\r\n    JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(jwkSet);\r\n    return new NimbusJwtEncoder(jwkSource);\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    \r\n    @Value(""Adventure of War"")\r\n    private String name;\r\n\r\n    @Value(""A place for War"")\r\n    private String motive;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getMotive() {\r\n        return motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails healthUser = User.withUsername(specialUser.getId())\r\n                .password(passwordEncoder().encode(specialUser.getPassword()))\r\n                .roles(""SPECIALROLE"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(healthUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http, InMemoryUserDetailsManager inMemoryUserDetailsService) throws Exception {\r\n        http\r\n            .securityMatcher(""/very-special-path/**"")\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .userDetailsService(inMemoryUserDetailsService);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain filterChain(HttpSecurity http, UserDetailsService customUserDetailsService) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .userDetailsService(customUserDetailsService);\r\n        return http.build();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.security.MessageDigest;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String keyFilePath = ""/home/debashishd/Downloads/s_key"";\r\n        String inputText = ""Hello this is Roxane"";\r\n\r\n        byte[] keyBytes = deriveKeyFromFile(keyFilePath);\r\n        SecretKey secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        IvParameterSpec ivSpec = new IvParameterSpec(new byte[16]);\r\n\r\n        String encrypted = encrypt(inputText, secretKey, ivSpec);\r\n        System.out.println(""Encrypted value: "" + encrypted);\r\n\r\n        String decrypted = decrypt(encrypted, secretKey, ivSpec);\r\n        System.out.println(""Decrypted value: "" + decrypted);\r\n    }\r\n\r\n    private static byte[] deriveKeyFromFile(String filePath) throws Exception {\r\n        byte[] keyFileBytes = Files.readAllBytes(Path.of(filePath));\r\n        MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");\r\n        return sha256.digest(keyFileBytes);\r\n    }\r\n\r\n    private static String encrypt(String data, SecretKey key, IvParameterSpec iv) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\r\n        byte[] encryptedBytes = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n\r\n    private static String decrypt(String encryptedData, SecretKey key, IvParameterSpec iv) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\r\n        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));\r\n        return new String(decryptedBytes, StandardCharsets.UTF_8);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerRestrictionApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n\r\n        disableButtons(spinnerMin, spinnerMax);\r\n\r\n        spinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\n            disableButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\n            disableButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        HBox root = new HBox(10, spinnerMin, spinnerMax);\r\n        primaryStage.setScene(new Scene(root, 300, 100));\r\n        primaryStage.setTitle(""Spinner Restriction"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void disableButtons(Spinner<Integer> spinnerMin, Spinner<Integer> spinnerMax) {\r\n        boolean minAtMax = spinnerMin.getValue().equals(spinnerMax.getValue());\r\n        boolean maxAtMin = spinnerMax.getValue().equals(spinnerMin.getValue());\r\n\r\n        spinnerMin.lookup("".increment-arrow-button"").setDisable(minAtMax);\r\n        spinnerMax.lookup("".decrement-arrow-button"").setDisable(maxAtMin);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class TestThymeleafUTF8 {\r\n    public static void main(String[] args) {\r\n        try {\r\n            TemplateEngine templateEngine = new TemplateEngine();\r\n            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n            resolver.setCharacterEncoding(""UTF-8"");\r\n            resolver.setTemplateMode(TemplateMode.XML);\r\n            templateEngine.setTemplateResolver(resolver);\r\n            Context ct = new Context();\r\n            ct.setVariable(""TEST_AR"", ""???? ???? ?? ??? ????"");\r\n            ct.setVariable(""TEST_HE"", ""??????"");\r\n            ct.setVariable(""TEST_CN"", ""????"");\r\n            ct.setVariable(""currentDate"", LocalDateTime.now().toString());\r\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8));\r\n            templateEngine.process(""test_template.xml"", ct, out);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    \r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(ParDo.of(new DoFn<KV<String, String>, Void>() {\r\n        @ProcessElement\r\n        public void processElement(ProcessContext c) {\r\n            transaction.sadd(c.element().getKey(), c.element().getValue());\r\n            batchCount++;\r\n            if (batchCount >= 1000) {\r\n                transaction.exec();\r\n                transaction.multi();\r\n                batchCount = 0;\r\n            }\r\n        }\r\n    }));\r\n\r\n    outputData.apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n            .withConnectionConfiguration(CustomRedisConfigurations\r\n                    .create(REDIS_HOST, port)\r\n                    .withTimeout(100)\r\n                    .withAuth(""credentials"")\r\n                    .enableSSL()));\r\n\r\n    pipeline.run();\r\n\r\n    verify(transaction, atLeastOnce()).exec();\r\n    verify(transaction, atLeastOnce()).multi();\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public void DevelopmentTypeEvent() {\r\n    LanguageProgramming.getSelectionModel().clearSelection();\r\n    LanguageProgramming.setValue(null);\r\n    LanguageProgramming.setItems(FXCollections.observableArrayList());\r\n\r\n    if (DevelopmentType.getValue().equals(""Back-end"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n    } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n    }\r\n\r\n    LanguageProgramming.setPromptText(""Select a language programming"");\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n    public void onReceive(Context context, Intent intent) {\r\n        String action = intent.getAction();\r\n        if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n            synchronized (this) {\r\n                UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                if (device != null) {\r\n                    usbDevice = device;\r\n                    PendingIntent permissionIntent = PendingIntent.getBroadcast(\r\n                            context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n                    UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                    usbManager.requestPermission(device, permissionIntent);\r\n                }\r\n            }\r\n        } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n            if (connection != null) {\r\n                connection.releaseInterface(usbDeviceInterface);\r\n                connection.close();\r\n            }\r\n            connection = null;\r\n            usbDevice = null;\r\n            endpointIn = null;\r\n            endpointOut = null;\r\n        } else if (ACTION_USB_PERMISSION.equals(action)) {\r\n            UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (device != null && intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                connection = usbManager.openDevice(device);\r\n                if (connection != null) {\r\n                    usbDeviceInterface = device.getInterface(0);\r\n                    connection.claimInterface(usbDeviceInterface, true);\r\n                    endpointIn = usbDeviceInterface.getEndpoint(0);\r\n                    endpointOut = usbDeviceInterface.getEndpoint(1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class Interceptor implements ServerInterceptor {\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n\r\nsh\r\n./start-connect-server.sh \\r\n    --packages org.apache.spark:spark-connect_2.12:3.4.1 \\r\n    --jars Interceptor.jar \\r\n    --conf ""spark.driver.extraClassPath=Interceptor.jar"" \\r\n    --conf ""spark.executor.extraClassPath=Interceptor.jar"" \\r\n    --conf spark.connect.grpc.interceptor.classes=interceptorserver.Interceptor\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.Random;\r\nimport java.lang.reflect.Constructor;\r\n\r\npublic class Game {\r\n    private Random random = new Random();\r\n    private int sizeX;\r\n    private int sizeY;\r\n    private Field field;\r\n    private Player player;\r\n\r\n    public <T extends Fieldable> void positionEntity(Class<T> clazz) {\r\n        int x, y;\r\n        boolean entityCreated = false;\r\n        while (!entityCreated) {\r\n            x = random.nextInt(sizeX);\r\n            y = random.nextInt(sizeY);\r\n            if (field.getFieldable(x, y) instanceof Empty) {\r\n                try {\r\n                    Constructor<T> constructor = clazz.getConstructor(\r\n                            int.class, int.class, int.class, int.class, \r\n                            Field.class, Player.class, Game.class\r\n                    );\r\n                    T entity = constructor.newInstance(x, y, sizeX, sizeY, field, player, this);\r\n                    field.setFieldable(x, y, entity);\r\n                    entityCreated = true;\r\n                } catch (Exception e) {\r\n                    throw new RuntimeException(""Failed to create entity: "" + clazz.getSimpleName(), e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import co.elastic.clients.elasticsearch.ElasticsearchClient;\r\nimport co.elastic.clients.transport.endpoints.BooleanResponse;\r\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\r\nimport co.elastic.clients.json.jackson.JacksonJsonpMapper;\r\nimport jakarta.annotation.PreDestroy;\r\nimport org.apache.http.auth.AuthScope;\r\nimport org.apache.http.auth.UsernamePasswordCredentials;\r\nimport org.apache.http.impl.client.BasicCredentialsProvider;\r\nimport org.apache.http.ssl.SSLContexts;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\r\nimport org.apache.http.nio.conn.ssl.SSLIOSessionStrategy;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestClientBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.client.elc.ElasticsearchConfiguration;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchOperations;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\n\r\nimport javax.net.ssl.SSLContext;\r\nimport java.io.File;\r\nimport java.nio.file.Files;\r\nimport java.security.KeyStore;\r\nimport java.util.Collections;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig extends ElasticsearchConfiguration {\r\n\r\n    @Override\r\n    public RestClientBuilderCustomizer restClientBuilderCustomizer() {\r\n        return builder -> {\r\n            try {\r\n                KeyStore truststore = KeyStore.getInstance(""pkcs12"");\r\n                try (var is = Files.newInputStream(new File(""path/to/certificate.p12"").toPath())) {\r\n                    truststore.load(is, ""password"".toCharArray());\r\n                }\r\n\r\n                SSLContext sslContext = SSLContexts.custom()\r\n                        .loadTrustMaterial(truststore, null)\r\n                        .build();\r\n\r\n                SSLIOSessionStrategy sessionStrategy = new SSLIOSessionStrategy(sslContext);\r\n\r\n                BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n                credentialsProvider.setCredentials(AuthScope.ANY, \r\n                        new UsernamePasswordCredentials(""elastic"", ""password""));\r\n\r\n                builder.setHttpClientConfigCallback(httpClientBuilder ->\r\n                        httpClientBuilder\r\n                                .setSSLStrategy(sessionStrategy)\r\n                                .setDefaultCredentialsProvider(credentialsProvider)\r\n                );\r\n\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(""Failed to configure Elasticsearch SSL"", e);\r\n            }\r\n        };\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient elasticsearchClient(RestClient restClient) {\r\n        RestClientTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\n        return new ElasticsearchClient(transport);\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchOperations elasticsearchOperations(ElasticsearchClient client) {\r\n        return new ElasticsearchTemplate(client);\r\n    }\r\n\r\n    @PreDestroy\r\n    public void closeClient() {\r\n        try {\r\n            getClient().shutdown();\r\n        } catch (Exception ignored) {\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\npublic class TaskManager {\r\n    private final ExecutorService executor;\r\n    private final ConcurrentHashMap<String, Lock> lockMap;\r\n\r\n    public TaskManager(int concurrencyLevel) {\r\n        this.executor = Executors.newFixedThreadPool(concurrencyLevel);\r\n        this.lockMap = new ConcurrentHashMap<>();\r\n    }\r\n\r\n    public void submitTask(String value) {\r\n        executor.submit(() -> {\r\n            Lock lock = lockMap.computeIfAbsent(value, k -> new ReentrantLock());\r\n            if (lock.tryLock()) {\r\n                try {\r\n                    System.out.println(value);\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ex) {\r\n                    Thread.currentThread().interrupt();\r\n                } finally {\r\n                    lock.unlock();\r\n                    lockMap.remove(value, lock);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void shutdown() {\r\n        executor.shutdown();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        TaskManager manager = new TaskManager(5);\r\n        manager.submitTask(""hi"");\r\n        manager.submitTask(""h"");\r\n        manager.submitTask(""u"");\r\n        manager.submitTask(""y"");\r\n        manager.submitTask(""hi"");\r\n        manager.submitTask(""p"");\r\n        manager.submitTask(""o"");\r\n        manager.submitTask(""bb"");\r\n        manager.shutdown();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,@Configuration\r\n@EnableWebSocketSecurity\r\npublic class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\r\n        messages.anyMessage().permitAll();\r\n    }\r\n\r\n    @Override\r\n    protected boolean isCsrfTokenRequired() {\r\n        return false;\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"@Configuration\r\npublic class WebFluxConfig implements WebFluxConfigurer {\r\n\r\n    @Override\r\n    public void configureHttpMessageReaders(List<HttpMessageReader<?>> readers) {\r\n        readers.add(0, new Jaxb2XmlDecoder());\r\n    }\r\n\r\n    @Override\r\n    public void configureHttpMessageWriters(List<HttpMessageWriter<?>> writers) {\r\n        writers.add(0, new Jaxb2XmlEncoder());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.xml.namespace.QName;\r\nimport javax.xml.ws.BindingProvider;\r\nimport javax.xml.ws.Service;\r\nimport java.net.URL;\r\nimport java.util.Map;\r\n\r\npublic class MDFeClient {\r\n    public static String sendRequest(String xmlData) throws Exception {\r\n        URL wsdlURL = new URL(""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx?wsdl"");\r\n        QName serviceName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSinc"");\r\n        QName portName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSincSoap12"");\r\n\r\n        Service service = Service.create(wsdlURL, serviceName);\r\n        MDFeRecepcaoSincSoap12 port = service.getPort(portName, MDFeRecepcaoSincSoap12.class);\r\n\r\n        Map<String, Object> requestContext = ((BindingProvider) port).getRequestContext();\r\n        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx"");\r\n        requestContext.put(""com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump"", true);\r\n\r\n        MdfeRecepcaoResult response = port.mdfeRecepcao(xmlData);\r\n        return response != null ? response.getContent().toString() : ""No Response"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.lowagie.text.pdf.BaseFont;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\n\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class PdfGenerator {\r\n    public static void generatePdfFromHtml(String htmlString) throws Exception {\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        String fontPath = ""fonts/arialuni.ttf"";\r\n        renderer.getFontResolver().addFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n\r\n        String htmlWithStyle = ""<!DOCTYPE html>"" +\r\n                ""<html lang=\""ru\"">"" +\r\n                ""<head>"" +\r\n                ""    <meta charset=\""UTF-8\""/>"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>"" +\r\n                ""    <style> body { font-family: Arial, sans-serif; } </style>"" +\r\n                ""</head>"" +\r\n                ""<body>"" +\r\n                ""    <h3>?????????????</h3>"" +\r\n                ""</body>"" +\r\n                ""</html>"";\r\n\r\n        renderer.setDocumentFromString(htmlWithStyle);\r\n        renderer.layout();\r\n        renderer.createPDF(byteArrayOutputStream);\r\n        byteArrayOutputStream.writeTo(outputStream);\r\n        outputStream.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class CoordinateConverter {\r\n    public static int[][] convertToIntArray(Map<String, Object> params) {\r\n        List<List<Integer>> coordinateList = (List<List<Integer>>) params.get(""coordinate"");\r\n        return coordinateList.stream()\r\n                .map(list -> list.stream().mapToInt(Integer::intValue).toArray())\r\n                .toArray(int[][]::new);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,import java.util.Random;\r\n\r\npublic class CardShuffler {\r\n    public static void shuffleDeck(Card[] deck) {\r\n        Random random = new Random();\r\n        for (int i = deck.length - 1; i > 0; i--) {\r\n            int j = random.nextInt(i + 1);\r\n            Card temp = deck[i];\r\n            deck[i] = deck[j];\r\n            deck[j] = temp;\r\n        }\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"@PatchMapping(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .flatMap(analysis -> {\r\n                analysis.setResults(results);\r\n                return computeSCARepository.save(analysis);\r\n            })\r\n            .then();\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false);\r\n        marshaller.setMarshallerProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, true));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    String base64Encoded = Base64.getEncoder().encodeToString(documentData);\r\n    binaryData.setBlob(new DataHandler(new ByteArrayDataSource(base64Encoded, ""text/plain"")));\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\n@Log4j2\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Override\r\n    public void sendDocuments(MyRequest request) {\r\n        try {\r\n            template.marshalSendAndReceive(request);\r\n        } catch (Exception e) {\r\n            log.error(e, e.getCause());\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        try {\r\n            value1 = Long.parseLong(txtfirst.getText().toString());\r\n            value2 = Long.parseLong(txtsecond.getText().toString());\r\n            list.clear();\r\n            for (long i = value1; i <= value2; i++) {\r\n                list.add(String.valueOf(i));\r\n            }\r\n            arrayAdapter.notifyDataSetChanged();\r\n        } catch (NumberFormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n});\r\n
0,1,misclassified_in_Test_2.csv.csv,"#!/bin/bash\r\n\r\nfunction find_java_fd() {\r\n    local file_path=""$1""\r\n    local pid=$(jps -l | grep ""org.apache.catalina.startup.Bootstrap"" | awk '{print $1}')\r\n    \r\n    if [[ -z ""$pid"" ]]; then\r\n        echo ""Tomcat process not found.""\r\n        return 1\r\n    fi\r\n\r\n    local fd_list=$(ls -l /proc/$pid/fd 2>/dev/null | grep ""$file_path"")\r\n\r\n    if [[ -z ""$fd_list"" ]]; then\r\n        echo ""No open file descriptor found for $file_path in Tomcat process.""\r\n        return 2\r\n    fi\r\n\r\n    echo ""Open file descriptor(s) for $file_path in Tomcat process $pid:""\r\n    echo ""$fd_list""\r\n}\r\n\r\nfind_java_fd ""/path/to/your/temp/file""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.StreamResult;\r\nimport javax.xml.transform.stream.StreamSource;\r\nimport java.io.StringReader;\r\nimport java.io.StringWriter;\r\n\r\npublic class XmlTransformer {\r\n    public static String transformXml(String xmlInput) throws TransformerException {\r\n        String xslContent = """"""\r\n                <?xml version=""1.0"" encoding=""UTF-8""?>\r\n                <xsl:stylesheet version=""2.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\r\n                    <xsl:output method=""xml"" encoding=""utf-8"" indent=""no""/>\r\n                    <xsl:template match=""node()|@*"">\r\n                        <xsl:copy>\r\n                            <xsl:apply-templates select=""node()|@*""/>\r\n                        </xsl:copy>\r\n                    </xsl:template>\r\n                    <xsl:template match=""text()"">\r\n                        <xsl:variable name=""value"" select=""normalize-space(.)""/>\r\n                        <xsl:choose>\r\n                            <xsl:when test=""matches($value, '^-?\\d+$')"">Integer</xsl:when>\r\n                            <xsl:when test=""matches($value, '^(true|false)$', 'i')"">Boolean</xsl:when>\r\n                            <xsl:otherwise>String</xsl:otherwise>\r\n                        </xsl:choose>\r\n                    </xsl:template>\r\n                </xsl:stylesheet>\r\n                """""";\r\n\r\n        TransformerFactory factory = TransformerFactory.newInstance();\r\n        Transformer transformer = factory.newTransformer(new StreamSource(new StringReader(xslContent)));\r\n\r\n        StringWriter writer = new StringWriter();\r\n        transformer.transform(new StreamSource(new StringReader(xmlInput)), new StreamResult(writer));\r\n\r\n        return writer.toString();\r\n    }\r\n\r\n    public static void main(String[] args) throws TransformerException {\r\n        String xmlInput = """"""\r\n                <SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"">\r\n                    <SOAP-ENV:Body>\r\n                        <return>\r\n                            <ICD10Flag>hello</ICD10Flag>\r\n                            <status>123</status>\r\n                        </return>\r\n                    </SOAP-ENV:Body>\r\n                </SOAP-ENV:Envelope>\r\n                """""";\r\n\r\n        System.out.println(transformXml(xmlInput));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\n\r\npublic class DocCommentProcessor {\r\n\r\n    private final Elements elementUtils;\r\n    private final DocTrees docTrees;\r\n\r\n    public DocCommentProcessor(Elements elementUtils, DocTrees docTrees) {\r\n        this.elementUtils = elementUtils;\r\n        this.docTrees = docTrees;\r\n    }\r\n\r\n    public String getFullyQualifiedName(Element element, LinkTree linkTree) {\r\n        String signature = linkTree.getReference().getSignature();\r\n        TypeElement typeElement = elementUtils.getTypeElement(signature);\r\n        \r\n        if (typeElement != null) {\r\n            return typeElement.getQualifiedName().toString();\r\n        }\r\n\r\n        String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n        TypeElement localType = elementUtils.getTypeElement(packageName + ""."" + signature);\r\n\r\n        if (localType != null) {\r\n            return localType.getQualifiedName().toString();\r\n        }\r\n\r\n        return signature;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"interface Show1 {\r\n    default void display() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n    private AutoCompletionBinding<String> nameBinding;\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert"");\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam"");\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (nameBinding != null) nameBinding.dispose();\r\n            if (input.length() == 2) {\r\n                if (input.startsWith(""A"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                }\r\n                nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExcelExporter {\r\n    public static void exportXls() {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             Workbook wb = new HSSFWorkbook()) {\r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        exportXls();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.ReactiveTransactionManager;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.transaction.reactive.TransactionalOperator;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Service\r\npublic class ChatService {\r\n\r\n    private final ChatRepository chatRepository;\r\n    private final TransactionalOperator transactionalOperator;\r\n\r\n    public ChatService(ChatRepository chatRepository, ReactiveTransactionManager transactionManager) {\r\n        this.chatRepository = chatRepository;\r\n        this.transactionalOperator = TransactionalOperator.create(transactionManager);\r\n    }\r\n\r\n    public Mono<Chat> createChat(Chat chat) {\r\n        return chatRepository.save(chat)\r\n                .flatMap(c -> Mono.error(new RuntimeException()))\r\n                .as(transactionalOperator::transactional);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MetamaskVerificationService {\r\n    public boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\n        String message = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\n        byte[] messageHash = org.web3j.crypto.Hash.sha3(message.getBytes(StandardCharsets.UTF_8));\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n\r\n        if (signatureBytes.length != 65) {\r\n            return false;\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v,\r\n                Arrays.copyOfRange(signatureBytes, 0, 32),\r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger recoveredKey = Sign.signedMessageToKey(messageHash, signatureData);\r\n        String recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\n\r\n        return recoveredAddress.equalsIgnoreCase(publicWalletId);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum AggregationType {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVERAGE(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, java.util.OptionalDouble> operation;\r\n\r\n    AggregationType(Function<DoubleStream, java.util.OptionalDouble> operation) {\r\n        this.operation = operation;\r\n    }\r\n\r\n    public java.util.OptionalDouble apply(DoubleStream stream) {\r\n        return operation.apply(stream);\r\n    }\r\n}\r\n\r\npublic class AggregationService {\r\n    public Float someFunction(AggregationType e) {\r\n        return (float) e.apply(provides.stream().mapToDouble(this::someFunc)).orElse(-1);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<E, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class CoreNonCoreModules {\r\n    public static void main(String[] args) {\r\n        Set<String> bootModules = getBootModules();\r\n        Set<String> platformModules = getPlatformModules();\r\n\r\n        System.out.println(""Core (Boot) Modules:"");\r\n        bootModules.forEach(System.out::println);\r\n\r\n        System.out.println(""\nNon-Core (Platform) Modules:"");\r\n        platformModules.forEach(System.out::println);\r\n    }\r\n\r\n    private static Set<String> getBootModules() {\r\n        Set<String> bootModules = new HashSet<>();\r\n        for (Module module : ModuleLayer.boot().modules()) {\r\n            if (isBootClassLoader(module)) {\r\n                bootModules.add(module.getName());\r\n            }\r\n        }\r\n        return bootModules;\r\n    }\r\n\r\n    private static Set<String> getPlatformModules() {\r\n        Set<String> platformModules = new HashSet<>();\r\n        for (ModuleReference ref : ModuleFinder.ofSystem().findAll()) {\r\n            String moduleName = ref.descriptor().name();\r\n            if (!getBootModules().contains(moduleName)) {\r\n                platformModules.add(moduleName);\r\n            }\r\n        }\r\n        return platformModules;\r\n    }\r\n\r\n    private static boolean isBootClassLoader(Module module) {\r\n        try {\r\n            Class<?> moduleInfoClass = Class.forName(module.getName() + "".module-info"");\r\n            return moduleInfoClass.getClassLoader() == null;\r\n        } catch (ClassNotFoundException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.time.format.TextStyle;\r\nimport java.time.temporal.ChronoField;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(""Hello world! "" + parseSpanishDate(""24ENE1982""));\r\n    }\r\n\r\n    private static LocalDate parseSpanishDate(String dateString) {\r\n        Map<String, String> monthAbbreviations = new HashMap<>();\r\n        for (int i = 1; i <= 12; i++) {\r\n            String month = LocalDate.of(2000, i, 1)\r\n                    .getMonth()\r\n                    .getDisplayName(TextStyle.SHORT, new Locale(""es"", ""ES""))\r\n                    .toUpperCase();\r\n            monthAbbreviations.put(month, String.format(""%02d"", i));\r\n        }\r\n\r\n        for (Map.Entry<String, String> entry : monthAbbreviations.entrySet()) {\r\n            if (dateString.contains(entry.getKey())) {\r\n                dateString = dateString.replace(entry.getKey(), entry.getValue());\r\n                break;\r\n            }\r\n        }\r\n\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .appendPattern(""ddMMyyyy"")\r\n                .toFormatter(Locale.ROOT);\r\n\r\n        return LocalDate.parse(dateString, formatter);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport org.apache.poi.ss.util.CellReference;\r\n\r\npublic class ExcelFormulaTranslator {\r\n\r\n    public static String translateFormula(String formula, String originalAddress, String destinationAddress) {\r\n        try (Workbook workbook = new XSSFWorkbook()) {\r\n            FormulaRenderingWorkbook renderingWorkbook = (FormulaRenderingWorkbook) workbook;\r\n            Ptg[] tokens = FormulaParser.parse(formula, renderingWorkbook, FormulaParser.FormulaType.CELL, 0);\r\n\r\n            CellReference originalRef = new CellReference(originalAddress);\r\n            CellReference destinationRef = new CellReference(destinationAddress);\r\n            int rowOffset = destinationRef.getRow() - originalRef.getRow();\r\n            int colOffset = destinationRef.getCol() - originalRef.getCol();\r\n\r\n            for (int i = 0; i < tokens.length; i++) {\r\n                if (tokens[i] instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                    org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) tokens[i];\r\n                    if (!ref.isRowRelative() && !ref.isColRelative()) continue;\r\n                    int newRow = ref.getRow() + (ref.isRowRelative() ? rowOffset : 0);\r\n                    int newCol = ref.getColumn() + (ref.isColRelative() ? colOffset : 0);\r\n                    ref.setRow(newRow);\r\n                    ref.setColumn(newCol);\r\n                }\r\n            }\r\n            return FormulaParser.toFormulaString(renderingWorkbook, tokens);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        System.out.println(translateFormula(""=A2+B2"", ""C2"", ""C3""));\r\n        System.out.println(translateFormula(""=A2+B2"", ""C2"", ""D2""));\r\n        System.out.println(translateFormula(""=A2+$B$2"", ""C2"", ""D10""));\r\n        System.out.println(translateFormula(""=SheetA2!A2+B2"", ""C2"", ""C3""));\r\n        System.out.println(translateFormula(""=IF(A2=A3,A4,A5)"", ""A6"", ""C6""));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.io.RandomAccessFile;\r\n\r\npublic class FileOverwrite {\r\n    public static void overwriteFile(String filePath, String content, long position) {\r\n        try (RandomAccessFile raf = new RandomAccessFile(filePath, ""rw"")) {\r\n            raf.seek(position);\r\n            raf.write(content.getBytes());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        overwriteFile(""test.txt"", ""123456789"", 0);\r\n        overwriteFile(""test.txt"", ""hello"", 0);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.zaxxer.hikari.HikariDataSource;\r\nimport org.mockito.Mockito;\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.util.Random;\r\n\r\npublic class DataSourceMocker {\r\n    public static DataSource createUnstableDataSource(DataSource realDataSource) {\r\n        HikariDataSource hikariDataSource = (HikariDataSource) realDataSource;\r\n        HikariDataSource spyDataSource = Mockito.spy(hikariDataSource);\r\n\r\n        Mockito.doAnswer(invocation -> {\r\n            if (new Random().nextInt(10) < 3) {\r\n                throw new SQLException(""Simulated connection failure"");\r\n            }\r\n            return invocation.callRealMethod();\r\n        }).when(spyDataSource).getConnection();\r\n\r\n        return spyDataSource;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\npublic class PriceServiceTest {\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price existingPrice;\r\n    private PriceRequest priceRequest;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        priceUuid = UUID.randomUUID();\r\n        existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n\r\n        priceRequest = new PriceRequest();\r\n        priceRequest.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO updatedPriceDTO = priceService.update(priceUuid, priceRequest);\r\n\r\n        assertNotNull(updatedPriceDTO);\r\n        assertEquals(priceRequest.getPriceAmount(), updatedPriceDTO.getPriceAmount());\r\n        verify(priceRepository).findByUuid(priceUuid);\r\n        verify(priceRepository).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@EnableMongoRepositories(\r\n    basePackages = ""com.repository.mongo"",\r\n    repositoryImplementationPostfix = ""MongoImpl""\r\n)\r\n@EnableRedisRepositories(\r\n    basePackages = ""com.repository.redis"",\r\n    repositoryImplementationPostfix = ""RedisImpl""\r\n)\r\n@SpringBootApplication\r\npublic class StoreApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"void updateTaskbarProgress(long rawHandle) {\r\n    Executors.newSingleThreadExecutor().submit(() -> {\r\n        try (var arena = Arena.ofConfined()) {\r\n            var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n            var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n            var clsid = CLSID.allocate(arena);\r\n            var iidTaskbarList3 = IID.allocate(arena);\r\n            var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n            MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n\r\n            int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CoInitialize failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CLSIDFromString failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""IIDFromString failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CoCreateInstance failed with error code: "" + hr);\r\n            }\r\n\r\n            var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n            var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n            MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n            MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n            MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n            hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""HrInit failed with error code: "" + hr);\r\n            }\r\n\r\n            MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n            hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NORMAL());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n            }\r\n\r\n            for (int i = 0; i <= 100; i += 20) {\r\n                System.out.println(""Progress: "" + i);\r\n                MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressValue failed with error code: "" + hr);\r\n                }\r\n                Thread.sleep(500);\r\n            }\r\n\r\n            hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""SetProgressState reset failed with error code: "" + hr);\r\n            }\r\n\r\n        } catch (Throwable ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            ShObjIdl_core_h.CoUninitialize();\r\n        }\r\n    });\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public void copyDatabaseFromAssets(String assetFolder, String outputFolder) {\r\n    Executors.newSingleThreadExecutor().execute(() -> {\r\n        Context myContext = requireContext();\r\n        AssetManager assetManager = myContext.getAssets();\r\n        File databasesFolder = new File(myContext.getExternalFilesDir(null).getParent(), outputFolder);\r\n        if (!databasesFolder.exists() && !databasesFolder.mkdirs()) {\r\n            Log.e(""DatabaseCopy"", ""Failed to create database folder."");\r\n            return;\r\n        }\r\n        try {\r\n            String[] files = assetManager.list(assetFolder);\r\n            if (files != null) {\r\n                for (String filename : files) {\r\n                    File outFile = new File(databasesFolder, filename);\r\n                    if (!outFile.exists()) {\r\n                        try (InputStream in = assetManager.open(assetFolder + ""/"" + filename);\r\n                             OutputStream out = new FileOutputStream(outFile)) {\r\n                            byte[] buffer = new byte[4096];\r\n                            int bytesRead;\r\n                            while ((bytesRead = in.read(buffer)) != -1) {\r\n                                out.write(buffer, 0, bytesRead);\r\n                            }\r\n                            out.flush();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Log.e(""DatabaseCopy"", ""No files found in assets folder: "" + assetFolder);\r\n            }\r\n        } catch (IOException e) {\r\n            Log.e(""DatabaseCopy"", ""Error copying database files"", e);\r\n        }\r\n    });\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.ArrayList;\r\n\r\npublic class PerformanceTest {\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10; i++) {\r\n            measureAddPerformance();\r\n        }\r\n    }\r\n\r\n    private static void measureAddPerformance() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.*;\r\n\r\npublic class ScalableBackgroundPanel extends JPanel {\r\n    private BufferedImage backgroundImage;\r\n\r\n    public ScalableBackgroundPanel(BufferedImage image) {\r\n        this.backgroundImage = image;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        if (backgroundImage != null) {\r\n            Graphics2D g2d = (Graphics2D) g.create();\r\n            int panelWidth = getWidth();\r\n            int panelHeight = getHeight();\r\n            int imageWidth = backgroundImage.getWidth();\r\n            int imageHeight = backgroundImage.getHeight();\r\n\r\n            double scaleX = (double) panelWidth / imageWidth;\r\n            double scaleY = (double) panelHeight / imageHeight;\r\n            double scale = Math.max(scaleX, scaleY);\r\n\r\n            int newWidth = (int) (imageWidth * scale);\r\n            int newHeight = (int) (imageHeight * scale);\r\n            int x = (panelWidth - newWidth) / 2;\r\n            int y = (panelHeight - newHeight) / 2;\r\n\r\n            g2d.drawImage(backgroundImage, x, y, newWidth, newHeight, this);\r\n            g2d.dispose();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\n\r\npublic class VirtualThreadDatabaseTest {\r\n    public static void main(String[] args) {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<Future<String>> futures;\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(i -> CompletableFuture.supplyAsync(() -> executeTask(i), executorService))\r\n                    .toList();\r\n        }\r\n        futures.forEach(f -> {\r\n            try {\r\n                f.get();\r\n            } catch (InterruptedException | ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        stopWatch.stop();\r\n        System.out.println(""Total execution time: "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n    }\r\n\r\n    private static String executeTask(int taskId) {\r\n        System.out.println(""Task: "" + taskId + "" started"");\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        String result = null;\r\n        try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(""Task: "" + taskId + "" connection established"");\r\n            try (var statement = connection.createStatement()) {\r\n                System.out.println(""Task: "" + taskId + "" executes SQL statement"");\r\n                try (ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"")) {\r\n                    if (resultSet.next()) {\r\n                        result = resultSet.getString(""output"");\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(""Task: "" + taskId + "" completed in "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n        return result;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    try {\r\n        Process p = Runtime.getRuntime().exec(comm);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        p.waitFor();\r\n        p.destroy();\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n\r\n    return out;\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"private void writeJsonStream(HttpServletResponse response, Stream<Employee> dataStream) {\r\n    try {\r\n        response.setHeader(""content-type"", ""application/json"");\r\n        PrintWriter respWriter = response.getWriter();\r\n        respWriter.write(""["");\r\n        Iterator<Employee> iterator = dataStream.iterator();\r\n        if (iterator.hasNext()) {\r\n            Employee data = iterator.next();\r\n            respWriter.write(jsonSerialize(data));\r\n            entityManager.detach(data);\r\n        }\r\n        while (iterator.hasNext()) {\r\n            Employee data = iterator.next();\r\n            respWriter.write("","");\r\n            respWriter.write(jsonSerialize(data));\r\n            entityManager.detach(data);\r\n        }\r\n        respWriter.write(""]"");\r\n        respWriter.flush();\r\n    } catch (IOException e) {\r\n        log(e);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.opencsv.CSVParser;\r\nimport com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        CSVParser parser = new CSVParserBuilder().withSeparator('\t').build();\r\n        try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(parser)\r\n                .build()) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""path-to-tsv-file"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Map;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic interface Util {\r\n    void getClient();\r\n}\r\n\r\n@Service\r\npublic class UtilOne implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilOne client"");\r\n    }\r\n}\r\n\r\n@Service\r\npublic class UtilTwo implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilTwo client"");\r\n    }\r\n}\r\n\r\n@Component\r\npublic class UtilFactory {\r\n    private final Map<String, Util> utilMap;\r\n    private final AtomicReference<Util> activeUtil = new AtomicReference<>();\r\n\r\n    @Autowired\r\n    public UtilFactory(Map<String, Util> utilMap) {\r\n        this.utilMap = utilMap;\r\n        this.activeUtil.set(utilMap.get(""utilOne""));\r\n    }\r\n\r\n    public Util getActiveUtil() {\r\n        return activeUtil.get();\r\n    }\r\n\r\n    public void switchUtil(String utilKey) {\r\n        if (utilMap.containsKey(utilKey)) {\r\n            activeUtil.set(utilMap.get(utilKey));\r\n        }\r\n    }\r\n}\r\n\r\n@Component\r\npublic class DemoService {\r\n    private final UtilFactory utilFactory;\r\n\r\n    @Autowired\r\n    public DemoService(UtilFactory utilFactory) {\r\n        this.utilFactory = utilFactory;\r\n    }\r\n\r\n    public void useUtil() {\r\n        utilFactory.getActiveUtil().getClient();\r\n    }\r\n\r\n    public void updateUtil(String utilKey) {\r\n        utilFactory.switchUtil(utilKey);\r\n    }\r\n}\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n    @Bean(""utilOne"")\r\n    public Util utilOne() {\r\n        return new UtilOne();\r\n    }\r\n\r\n    @Bean(""utilTwo"")\r\n    public Util utilTwo() {\r\n        return new UtilTwo();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class CircularMatrixSearch {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) {\r\n                return true;\r\n            } else if (mat[row][col] < num) {\r\n                row++;\r\n            } else {\r\n                col--;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            {10, 20, 30, 40},\r\n            {15, 25, 35, 45},\r\n            {27, 29, 37, 48},\r\n            {32, 33, 39, 50}\r\n        };\r\n\r\n        System.out.println(search(mat, 22)); // true\r\n        System.out.println(search(mat, 23)); // false\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.*;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        this.inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument srcDocument = new XWPFDocument(srcPackage);\r\n\r\n        if (inputs.size() == 1) {\r\n            first = srcDocument;\r\n        } else {\r\n            addPageBreak(first);\r\n            appendDocument(first, srcDocument);\r\n        }\r\n    }\r\n\r\n    private void addPageBreak(XWPFDocument document) {\r\n        XWPFParagraph pageBreak = document.createParagraph();\r\n        pageBreak.setPageBreak(true);\r\n    }\r\n\r\n    private void appendDocument(XWPFDocument target, XWPFDocument source) throws Exception {\r\n        for (IBodyElement elem : source.getBodyElements()) {\r\n            if (elem instanceof XWPFParagraph) {\r\n                XWPFParagraph p = (XWPFParagraph) elem;\r\n                XWPFParagraph newPara = target.createParagraph();\r\n                newPara.getCTP().set(p.getCTP().copy());\r\n            } else if (elem instanceof XWPFTable) {\r\n                XWPFTable table = (XWPFTable) elem;\r\n                XWPFTable newTable = target.createTable();\r\n                newTable.getCTTbl().set(table.getCTTbl().copy());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\n        WordMerge wm = new WordMerge(faos);\r\n        wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n        wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n        wm.doMerge();\r\n        wm.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.WildFlyElytronCredentialStore;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.spec.MaskedPasswordSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.provider.WildFlyElytronPasswordProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreUtil {\r\n\r\n    public static CredentialStore getCredentialStore() throws Exception {\r\n        String maskedPasswordString = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        MaskedPassword maskedPassword = (MaskedPassword) ModularCrypt.decode(maskedPasswordString);\r\n        MaskedPasswordSpec maskedPasswordSpec = maskedPassword.getPasswordSpec();\r\n        Password storePassword = MaskedPassword.createRaw(MaskedPassword.ALGORITHM_MASKED, maskedPasswordSpec);\r\n\r\n        CredentialStore.ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                () -> new PasswordCredential(storePassword));\r\n\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(WildFlyElytronCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        \r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        \r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n\r\n        return credentialStore;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"# application.yml (default properties)\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  config:\r\n    import: optional:classpath:.env[.properties]\r\n\r\n---\r\n# application-dev.yml (for dev profile)\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: dev\r\n    import: optional:classpath:.env-dev[.properties]\r\n\r\n---\r\n# application-prod.yml (for prod profile)\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: prod\r\n    import: optional:classpath:.env-prod[.properties]\r\n\r\nbash\r\n# .env (default environment variables)\r\nDB_NAME=default_db\r\nDB_USERNAME=default_user\r\nDB_PASSWORD=default_password\r\n\r\n# .env-dev (for dev profile)\r\nDB_NAME=dev_db\r\nDB_USERNAME=dev_user\r\nDB_PASSWORD=dev_password\r\n\r\n# .env-prod (for prod profile)\r\nDB_NAME=prod_db\r\nDB_USERNAME=prod_user\r\nDB_PASSWORD=prod_password\r\n\r\nbash\r\n# Maven run command with environment variables\r\nmvn spring-boot:run \\r\n  -Dspring-boot.run.profiles=dev \\r\n  -Dspring-boot.run.jvmArguments=""-Xdebug"" \\r\n  -Dspring-boot.run.arguments=""DB_NAME=employee_db DB_USERNAME=postgres DB_PASSWORD=******""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(ProducerTemplate producerTemplate) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.asyncRequestBody(""direct:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public void addNewProductRow(LinearLayout parentLayout, Context context) {\r\n    LinearLayout newProductRow = new LinearLayout(context);\r\n    newProductRow.setOrientation(LinearLayout.HORIZONTAL);\r\n    newProductRow.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.MATCH_PARENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n    ));\r\n\r\n    AutoCompleteTextView productName = new AutoCompleteTextView(context);\r\n    productName.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productName.setHint(""Enter Product"");\r\n\r\n    EditText productQty = new EditText(context);\r\n    productQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productQty.setHint(""Enter Quantity"");\r\n    productQty.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\n    EditText productPrice = new EditText(context);\r\n    productPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productPrice.setHint(""Prod Price"");\r\n    productPrice.setFocusable(false);\r\n\r\n    EditText productSpecs = new EditText(context);\r\n    productSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productSpecs.setHint(""Prod Specs"");\r\n    productSpecs.setFocusable(false);\r\n\r\n    Button removeButton = new Button(context);\r\n    removeButton.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n    ));\r\n    removeButton.setText(""X"");\r\n    removeButton.setOnClickListener(v -> parentLayout.removeView(newProductRow));\r\n\r\n    newProductRow.addView(productName);\r\n    newProductRow.addView(productQty);\r\n    newProductRow.addView(productPrice);\r\n    newProductRow.addView(productSpecs);\r\n    newProductRow.addView(removeButton);\r\n\r\n    parentLayout.addView(newProductRow);\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyLoader {\r\n\r\n    static {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n    }\r\n\r\n    public static PrivateKey loadEncryptedPrivateKey(String privateKeyPath, String passphrase) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(privateKeyPath))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMDecryptorProvider decryptor = new JcePEMDecryptorProviderBuilder().build(passphrase.toCharArray());\r\n                PEMKeyPair keyPair = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n                return new JcaPEMKeyConverter().getPrivateKey(keyPair.getPrivateKeyInfo());\r\n            } else if (object instanceof PEMKeyPair) {\r\n                return new JcaPEMKeyConverter().getPrivateKey(((PEMKeyPair) object).getPrivateKeyInfo());\r\n            } else {\r\n                throw new IllegalArgumentException(""Invalid private key format"");\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            PrivateKey privateKey = loadEncryptedPrivateKey(""path/to/private_key.pem"", ""your_passphrase"");\r\n            System.out.println(""Private Key: "" + Base64.getEncoder().encodeToString(privateKey.getEncoded()));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.UnavailableException;\r\nimport javax.servlet.annotation.WebListener;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpSessionEvent;\r\nimport javax.servlet.http.HttpSessionListener;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        throw new NullPointerException(""Backend connection failed"");\r\n    }\r\n}\r\n\r\n@WebListener\r\nclass DeploymentValidator implements HttpSessionListener {\r\n    @Override\r\n    public void sessionCreated(HttpSessionEvent se) {\r\n        if (!isBackendAvailable()) {\r\n            throw new RuntimeException(""Deployment Aborted: Backend Server Unreachable"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void sessionDestroyed(HttpSessionEvent se) {}\r\n\r\n    private boolean isBackendAvailable() {\r\n        try {\r\n            new MainServlet().connectToBackendServer();\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            f();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n
0,1,misclassified_in_Test_2.csv.csv,"public class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        if (mCtx == null) {\r\n            throw new IllegalArgumentException(""Context cannot be null"");\r\n        }\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundDark);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundLight);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundLight);\r\n        }\r\n\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        final PyqModel temp = pyqModelList.get(position);\r\n        holder.textView.setText(temp.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(temp.getPyqTopics());\r\n\r\n        int adapterPosition = holder.getAdapterPosition();\r\n        if (adapterPosition == RecyclerView.NO_POSITION) {\r\n            return;\r\n        }\r\n\r\n        holder.cardView.setCardBackgroundColor(selectedPositions.contains(adapterPosition) ? selectedBackgroundColor : defaultBackgroundColor);\r\n\r\n        holder.cardView.setOnClickListener(v -> {\r\n            boolean isSelected = selectedPositions.contains(adapterPosition);\r\n            if (isSelected) {\r\n                selectedPositions.remove(adapterPosition);\r\n            } else {\r\n                selectedPositions.add(adapterPosition);\r\n            }\r\n\r\n            SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) {\r\n                selectedItems.add(String.valueOf(pos));\r\n            }\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n            editor.apply();\r\n\r\n            notifyItemChanged(adapterPosition);\r\n\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(""pdfName"", temp.getPdfName());\r\n            i.putExtra(""pdfUrl"", temp.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Test\r\nvoid testCase() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    Mockito.doReturn(Optional.of(item)).when(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(""There is an item created with this name"", ex.getMessage());\r\n\r\n    Mockito.verify(itemRepository, times(1)).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.style.TabStopSpan;\r\nimport android.widget.TextView;\r\n\r\npublic void setAlignedText(TextView textView, String leftText, String rightText) {\r\n    int tabStop = textView.getWidth() - textView.getPaddingLeft() - textView.getPaddingRight();\r\n    SpannableString spannableString = new SpannableString(leftText + ""\t"" + rightText);\r\n    spannableString.setSpan(new TabStopSpan.Standard(tabStop), leftText.length() + 1, leftText.length() + 2, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n    textView.setText(spannableString);\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import com.opencsv.CSVWriter;\r\nimport java.io.StringWriter;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter();\r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR,\r\n                 CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n        \r\n        String[] header = {""TestInput"", ""ExpectedOutput"", ""TestOutput"", ""ErrorMessage""};\r\n        writer.writeNext(header);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput() != null && !testCase.getTestOutput().isEmpty()) {\r\n                for (Map<String, Object> testOutput : testCase.getTestOutput()) {\r\n                    writer.writeNext(new String[]{\r\n                            testInput,\r\n                            expectedOutput,\r\n                            testOutput.toString(),\r\n                            errorMessage\r\n                    });\r\n                }\r\n            } else {\r\n                writer.writeNext(new String[]{\r\n                        testInput,\r\n                        expectedOutput,\r\n                        ""No Output"",\r\n                        errorMessage\r\n                });\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class OptimizedDinicCalculator<T> implements MaxAntichainCalculator<T> {\r\n\r\n    private final Map<String, Map<String, Integer>> network = new HashMap<>();\r\n    private final Map<String, Integer> nodeIndex = new HashMap<>();\r\n    private final List<String> nodes = new ArrayList<>();\r\n    private int[] level;\r\n\r\n    public OptimizedDinicCalculator() {\r\n        addNode(""src"");\r\n        addNode(""sink"");\r\n    }\r\n\r\n    private void addNode(String node) {\r\n        if (!nodeIndex.containsKey(node)) {\r\n            nodeIndex.put(node, nodes.size());\r\n            nodes.add(node);\r\n            network.put(node, new HashMap<>());\r\n        }\r\n    }\r\n\r\n    private void addEdge(String from, String to, int capacity) {\r\n        addNode(from);\r\n        addNode(to);\r\n        network.get(from).put(to, capacity);\r\n        network.get(to).put(from, 0);\r\n    }\r\n\r\n    private void bfs(String source) {\r\n        level = new int[nodes.size()];\r\n        Arrays.fill(level, -1);\r\n        level[nodeIndex.get(source)] = 0;\r\n\r\n        Queue<String> queue = new LinkedList<>();\r\n        queue.offer(source);\r\n\r\n        while (!queue.isEmpty()) {\r\n            String u = queue.poll();\r\n            int uIndex = nodeIndex.get(u);\r\n            for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n                String v = entry.getKey();\r\n                int capacity = entry.getValue();\r\n                if (capacity > 0 && level[nodeIndex.get(v)] == -1) {\r\n                    level[nodeIndex.get(v)] = level[uIndex] + 1;\r\n                    queue.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int flow, String sink) {\r\n        if (u.equals(sink)) {\r\n            return flow;\r\n        }\r\n        int uIndex = nodeIndex.get(u);\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int vIndex = nodeIndex.get(v);\r\n            if (capacity > 0 && level[uIndex] < level[vIndex]) {\r\n                int sent = dfs(v, Math.min(flow, capacity), sink);\r\n                if (sent > 0) {\r\n                    network.get(u).put(v, capacity - sent);\r\n                    network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                    return sent;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private Set<String> reach(Map<T, Set<T>> graph, T t, Set<String> visited) {\r\n        Queue<T> queue = new LinkedList<>();\r\n        queue.add(t);\r\n        while (!queue.isEmpty()) {\r\n            T current = queue.poll();\r\n            String currentKey = ""A"" + current.toString();\r\n            visited.add(currentKey);\r\n            for (T neighbor : graph.get(current)) {\r\n                String neighborKey = ""B"" + neighbor.toString();\r\n                if (!visited.contains(neighborKey)) {\r\n                    queue.add(neighbor);\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return visited;\r\n    }\r\n\r\n    public int calculator(Map<T, Set<T>> graph) {\r\n        for (T t : graph.keySet()) {\r\n            addEdge(""src"", ""A"" + t, 1);\r\n            addEdge(""B"" + t, ""sink"", 1);\r\n            Set<String> visitedSubset = new HashSet<>();\r\n            for (String u : reach(graph, t, visitedSubset)) {\r\n                addEdge(""A"" + t, u, 1);\r\n            }\r\n        }\r\n\r\n        int maxFlow = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (level[nodeIndex.get(""sink"")] == -1) break;\r\n            int flow;\r\n            while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) {\r\n                maxFlow += flow;\r\n            }\r\n        }\r\n        return graph.size() - maxFlow;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n\r\n        Intent stopIntent = new Intent(context, AlarmStopReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        String text = ""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment;\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                .addAction(R.drawable.ic_stop, ""Stop"", stopPendingIntent);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static class AlarmStopReceiver extends BroadcastReceiver {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            if (ringtone != null && ringtone.isPlaying()) {\r\n                ringtone.stop();\r\n            }\r\n        }\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.Scanner;\r\n\r\npublic class SearchNumber {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int[] array = new int[10];\r\n        array[0] = 6;\r\n        array[1] = 2;\r\n        array[2] = 8;\r\n        array[3] = 1;\r\n        array[4] = 3;\r\n        array[5] = 0;\r\n        array[6] = 9;\r\n        array[7] = 7;\r\n\r\n        System.out.print(""Search for? "");\r\n        int searching = in.nextInt();\r\n\r\n        boolean found = false;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + "" is at index "" + i + ""."");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            System.out.println(searching + "" was not found."");\r\n        }\r\n\r\n        in.close();\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Path;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CustomLineChart extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.setName(""Series 1"");\r\n        series1.getData().add(new XYChart.Data<>(1, 5));\r\n        series1.getData().add(new XYChart.Data<>(2, 7));\r\n        series1.getData().add(new XYChart.Data<>(3, 6));\r\n\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.setName(""Series 2"");\r\n        series2.getData().add(new XYChart.Data<>(1, 3));\r\n        series2.getData().add(new XYChart.Data<>(2, 8));\r\n        series2.getData().add(new XYChart.Data<>(3, 5));\r\n\r\n        lineChart.getData().addAll(series1, series2);\r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n\r\n        Map<String, String> colorMap = new HashMap<>();\r\n        colorMap.put(""Series 1"", ""red"");\r\n        colorMap.put(""Series 2"", ""blue"");\r\n\r\n        lineChart.getData().forEach(series -> {\r\n            String color = colorMap.getOrDefault(series.getName(), ""black"");\r\n            series.getNode().lookup("".chart-series-line"").setStyle(""-fx-stroke: "" + color + "";"");\r\n            for (XYChart.Data<Number, Number> data : series.getData()) {\r\n                data.getNode().setStyle(""-fx-background-color: "" + color + "", white;"");\r\n            }\r\n        });\r\n\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Custom Line Chart"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineEffect3D extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial(Color.BLUE);\r\n        box.setMaterial(material);\r\n\r\n        MeshView outline = createOutline(box);\r\n        outline.setVisible(false);\r\n\r\n        box.setOnMouseClicked(event -> outline.setVisible(!outline.isVisible()));\r\n\r\n        Group root = new Group(box, outline);\r\n        Scene scene = new Scene(root, 600, 400, true);\r\n        scene.setFill(Color.BLACK);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""JavaFX 3D Outline Effect"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private MeshView createOutline(Box box) {\r\n        float w = (float) box.getWidth() / 2;\r\n        float h = (float) box.getHeight() / 2;\r\n        float d = (float) box.getDepth() / 2;\r\n\r\n        float[] points = {\r\n                -w, -h, -d,   w, -h, -d,   w,  h, -d,  -w,  h, -d,\r\n                -w, -h,  d,   w, -h,  d,   w,  h,  d,  -w,  h,  d\r\n        };\r\n\r\n        int[] faces = {\r\n                0, 0, 1, 0, 2, 0,  2, 0, 3, 0, 0, 0,\r\n                4, 0, 5, 0, 6, 0,  6, 0, 7, 0, 4, 0,\r\n                0, 0, 4, 0, 7, 0,  7, 0, 3, 0, 0, 0,\r\n                1, 0, 5, 0, 6, 0,  6, 0, 2, 0, 1, 0,\r\n                0, 0, 1, 0, 5, 0,  5, 0, 4, 0, 0, 0,\r\n                3, 0, 2, 0, 6, 0,  6, 0, 7, 0, 3, 0\r\n        };\r\n\r\n        TriangleMesh mesh = new TriangleMesh();\r\n        mesh.getPoints().setAll(points);\r\n        mesh.getFaces().setAll(faces);\r\n\r\n        MeshView outline = new MeshView(mesh);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setCullFace(CullFace.NONE);\r\n        return outline;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import java.util.Scanner;\r\n\r\npublic class Board {\r\n    private Scanner scan = new Scanner(System.in);\r\n\r\n    public String inputTake() {\r\n        String guess;\r\n        while (true) {\r\n            System.out.println(""choose a word, pick carefully: "");\r\n            guess = scan.next();\r\n            if (checkInput(guess)) {\r\n                return guess;\r\n            }\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        }\r\n    }\r\n\r\n    private boolean checkInput(String input) {\r\n        return input.length() == 5 && input.matches(""[a-zA-Z]+"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"package com.question.config;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Primary;\r\n\r\n@Configuration\r\npublic class LanguageConfig {\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    private final LanguageService frenchLanguageService;\r\n    private final LanguageService englishLanguageService;\r\n\r\n    public LanguageConfig(LanguageService frenchLanguageService, LanguageService englishLanguageService) {\r\n        this.frenchLanguageService = frenchLanguageService;\r\n        this.englishLanguageService = englishLanguageService;\r\n    }\r\n\r\n    @Bean\r\n    @Primary\r\n    public LanguageService languageService() {\r\n        return ""french"".equalsIgnoreCase(configuration) ? frenchLanguageService : englishLanguageService;\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"@Mapper\r\npublic interface WealthProdAccountInfoMapper {\r\n\r\n    WealthProdAccountInfoMapper INSTANCE = Mappers.getMapper(WealthProdAccountInfoMapper.class);\r\n\r\n    @Mapping(target = ""."", source = ""wealthProdAccountInfoDTO"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"public static void main(String[] args) throws IOException {\r\n    FileReader filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n    String line;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<>();\r\n            int index = 0;\r\n            for (String each : line.split("","")) {\r\n                myRecord.put(headers.get(index), each);\r\n                index++;\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n    br.close();\r\n    System.out.println(""My Table: "" + myTable);\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import org.springframework.http.server.reactive.ServerHttpResponse;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long requestTime = System.nanoTime();\r\n        return chain.filter(exchange)\r\n                .doFinally(signalType -> {\r\n                    long deltaTime = System.nanoTime() - requestTime;\r\n                    ServerHttpResponse response = exchange.getResponse();\r\n                    response.beforeCommit(() -> {\r\n                        response.getHeaders().add(""server-timing"", Long.toString(deltaTime));\r\n                        return Mono.empty();\r\n                    });\r\n                });\r\n    }\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError, Extra\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n\r\ntry:\r\n    print(Model(**{'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit', 'n': 1}))\r\nexcept ValidationError as e:\r\n    print(e)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from sqlalchemy import Integer, String, ForeignKey\r\nfrom sqlalchemy.orm import DeclarativeBase, mapped_column, Mapped\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = ""user""\r\n\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    name: Mapped[str] = mapped_column(String, nullable=False)\r\n    email: Mapped[str] = mapped_column(String, unique=True, nullable=False)\r\n\r\nclass Address(Base):\r\n    __tablename__ = ""address""\r\n\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    user_id: Mapped[int] = mapped_column(ForeignKey(""user.id""))\r\n    street: Mapped[str] = mapped_column(String, nullable=False)\r\n    city: Mapped[str] = mapped_column(String, nullable=False)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"def demonstrate_format_behavior():\r\n    results = {}\r\n    try:\r\n        results[""index""] = '{x[1]}'.format(x=""asd"")\r\n    except Exception as e:\r\n        results[""index""] = str(e)\r\n    \r\n    try:\r\n        results[""slice""] = '{x[1:3]}'.format(x=""asd"")\r\n    except Exception as e:\r\n        results[""slice""] = str(e)\r\n    \r\n    return results\r\n\r\nprint(demonstrate_format_behavior())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI, Request, Response\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"")\r\ndef read_root():\r\n    return {""Hello"": ""World""}\r\n\r\n@app.post(""/input"")\r\ndef input_request(request: Request):\r\n    body = request.body()\r\n    body = body.decode(""utf-8"") if isinstance(body, bytes) else body\r\n    return Response(content=body, media_type=""application/xml"")\r\n\r\n@app.post(""/input_sync"")\r\ndef input_request_sync(request: Request):\r\n    body = request.stream().read()\r\n    return Response(content=body, media_type=""application/xml"")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"def explain_src_folder_usage():\r\n    return """"""\r\nThe 'src/' layout in Python packaging is used to prevent certain issues related to import resolution when developing a package. The main reasons include:\r\n\r\n1. **Avoiding Accidental Imports from the Local Directory**:\r\n   - Without the 'src/' layout, running tests or scripts from the project root might import the package from the local directory instead of the installed version, leading to inconsistencies.\r\n\r\n2. **Encouraging Explicit Package Installation**:\r\n   - With 'src/', the package must be installed (e.g., via `pip install -e .`) before it can be imported, ensuring that all dependencies are properly managed.\r\n\r\n3. **Reducing Conflicts with Other Modules**:\r\n   - If the package is directly in the root directory, it might shadow standard library modules or third-party dependencies.\r\n\r\nWhile it is possible to place the package directly in the root directory, the 'src/' structure is recommended for better isolation, consistency, and avoiding common import issues in larger projects.\r\n""""""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    already_seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in already_seen:\r\n            continue\r\n        already_seen.add(log_hash)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'}\r\n]\r\n\r\nunique_logs = list(deduplicate(logs))\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from starlette.requests import Request\r\nfrom starlette.responses import Response\r\nimport time\r\n\r\n@app.middleware(""http"")\r\nasync def add_process_time_header(request: Request, call_next):\r\n    start_time = time.time()\r\n\r\n    response = await call_next(request)\r\n    body = b""""\r\n    \r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n\r\n    process_time = time.time() - start_time\r\n    response = Response(content=body, status_code=response.status_code, headers=dict(response.headers), media_type=response.media_type)\r\n    response.headers[""X-Process-Time""] = str(process_time)\r\n\r\n    return response\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\n\r\nclass NonRandomNumberGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.iterator = iter(self.sequence)\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.iterator)\r\n        except StopIteration:\r\n            self.iterator = iter(self.sequence)\r\n            return next(self.iterator)\r\n\r\nrng = lambda: np.random.randint(2, 20) // 2\r\nnrng = NonRandomNumberGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    return ""Database Session""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe_fixture():\r\n    return {""data"": [1, 2, 3]}\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe_fixture):\r\n    assert my_dataframe_fixture[""data""] == [1, 2, 3]\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    assert db_session == ""Database Session""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import requests\r\n\r\ndef get_dropbox_refresh_token(app_key, app_secret, auth_code):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""code"": auth_code,\r\n        ""grant_type"": ""authorization_code"",\r\n        ""client_id"": app_key,\r\n        ""client_secret"": app_secret,\r\n        ""redirect_uri"": ""https://your_redirect_uri""\r\n    }\r\n    response = requests.post(url, data=data)\r\n    return response.json()\r\n\r\ndef get_dropbox_access_token(app_key, app_secret, refresh_token):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""refresh_token"": refresh_token,\r\n        ""grant_type"": ""refresh_token"",\r\n        ""client_id"": app_key,\r\n        ""client_secret"": app_secret\r\n    }\r\n    response = requests.post(url, data=data)\r\n    return response.json()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from sqlalchemy.future import select\r\n\r\nasync def fetch_payments(session):\r\n    query = (\r\n        select(\r\n            models.Payment.organization_id,\r\n            models.Payment.id,\r\n            models.Payment.payment_type,\r\n        )\r\n        .where(models.Payment.is_cleared.is_(True))\r\n        .limit(10)\r\n    )\r\n    result = await session.execute(query)\r\n    return result.fetchall()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(""This line is executed"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(""CancelledError caught inside __aexit__"")\r\n            return True\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guaranteed_values(A_eq, b_eq, num_vars):\r\n    guaranteed_zeros = set(range(num_vars))\r\n    guaranteed_ones = set(range(num_vars))\r\n\r\n    for i in range(num_vars):\r\n        c = np.zeros(num_vars)\r\n        c[i] = 1\r\n\r\n        res_min = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_vars, method='highs-ipm')\r\n        res_max = linprog(-c, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_vars, method='highs-ipm')\r\n\r\n        if res_min.success and res_max.success:\r\n            if np.isclose(res_min.x[i], 1) and np.isclose(res_max.x[i], 1):\r\n                guaranteed_ones.add(i)\r\n            elif np.isclose(res_min.x[i], 0) and np.isclose(res_max.x[i], 0):\r\n                guaranteed_zeros.add(i)\r\n\r\n    return sorted(guaranteed_zeros), sorted(guaranteed_ones)\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  # x1 + x2 + x3 = 2\r\n    [1, 0, 0, 1],  # x1 + x4 = 1\r\n    [1, 1, 0, 0]   # x1 + x2 = 1\r\n])\r\nb_eq = np.array([2, 1, 1])\r\nnum_vars = 4\r\n\r\nzeros, ones = find_guaranteed_values(A_eq, b_eq, num_vars)\r\nprint(""Guaranteed Zeros:"", zeros)\r\nprint(""Guaranteed Ones:"", ones)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndef plot_polars_with_plotly():\r\n    df = pl.DataFrame(\r\n        {\r\n            ""nrs"": [1, 2, 3, None, 5],\r\n            ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n            ""random"": np.random.rand(5),\r\n            ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n        }\r\n    )\r\n\r\n    fig = px.bar(df.to_dicts(), x='names', y='random')\r\n    fig.show()\r\n\r\nplot_polars_with_plotly()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from dataclasses import dataclass\r\nfrom hydra.core.config_store import ConfigStore\r\nfrom pydantic import BaseModel, validator\r\n\r\nclass PydanticValidator(BaseModel):\r\n    param: int\r\n\r\n    @validator(""param"")\r\n    def check_positive(cls, v):\r\n        if v <= 0:\r\n            raise ValueError(""param must be positive"")\r\n        return v\r\n\r\n@dataclass\r\nclass Config:\r\n    param: int\r\n\r\n    def __post_init__(self):\r\n        validated = PydanticValidator(param=self.param)\r\n        self.param = validated.param\r\n\r\ncs = ConfigStore.instance()\r\ncs.store(name=""config"", node=Config)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"def get_spouse(name: str) -> str:\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            return ""Unknown""\r\n\r\nspouse = get_spouse(""John"")\r\nprint(spouse)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"def get_yolov8_imgsz_behavior():\r\n    return {\r\n        ""description"": ""YOLOv8 resizes images while maintaining aspect ratio using padding (letterboxing)."",\r\n        ""training"": {\r\n            ""imgsz"": ""Defines the target size (width and height) for training images."",\r\n            ""effect"": ""Images are resized to fit within the specified size while preserving aspect ratio using padding.""\r\n        },\r\n        ""inference"": {\r\n            ""imgsz"": ""Defines the target size for input images during inference."",\r\n            ""effect"": ""Images are resized using letterboxing, maintaining aspect ratio and ensuring detections align with original image dimensions.""\r\n        }\r\n    }\r\n\r\nprint(get_yolov8_imgsz_behavior())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from llama_cpp import Llama\r\n\r\ndef run_gguf_inference(model_path: str, prompt: str, max_tokens: int = 256, temperature: float = 0.7, n_threads: int = 4) -> str:\r\n    llm = Llama(model_path=model_path, n_threads=n_threads)\r\n    response = llm(\r\n        prompt,\r\n        max_tokens=max_tokens,\r\n        temperature=temperature,\r\n        echo=True\r\n    )\r\n    return response[""choices""][0][""text""]\r\n\r\nif __name__ == '__main__':\r\n    model_file = ""path/to/your/model.gguf""\r\n    user_prompt = ""Explain the theory of relativity.""\r\n    result = run_gguf_inference(model_file, user_prompt)\r\n    print(result)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"javascript\r\nclass Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return ""Squarish:"" + h.split(':')[1];\r\n    }\r\n}\r\n\r\nconst rect = new Rectangle(6, 4);\r\nrect.shoutArea();\r\n\r\nconst squa = new Square(5);\r\nsqua.shoutArea();\r\n\r\nconsole.log(squa.squaHello());\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndef fill_missing_values(df):\r\n    for col in df.columns:\r\n        if col + '_a' in df.columns:\r\n            df[col] = df[col].fillna(df[col + '_a'])\r\n    return df\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\ndf = fill_missing_values(df)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from elasticsearch import Elasticsearch\r\n\r\ndef connect_elasticsearch(es_host, es_port, es_username, es_password, es_index):\r\n    es = Elasticsearch(\r\n        hosts=[f""http://{es_host}:{es_port}""],\r\n        basic_auth=(es_username, es_password),\r\n        verify_certs=False\r\n    )\r\n    \r\n    es.indices.refresh(index=es_index)\r\n    return es\r\n\r\nes_host = ""<>""\r\nes_port = ""<>""\r\nes_username = ""<>""\r\nes_password = ""<>""\r\nes_index = ""<>""\r\n\r\nes = connect_elasticsearch(es_host, es_port, es_username, es_password, es_index)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        if isinstance(value, str):\r\n            value = value.lower()\r\n            for member in cls:\r\n                if member.value == value:\r\n                    return member\r\n        return None\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\n\r\n\r\nclass HookedModel:\r\n    def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n        self.model = model\r\n        self.discard_ratio = discard_ratio\r\n        self.attentions = []\r\n        self.attention_gradients = []\r\n\r\n        for name, module in self.model.named_modules():\r\n            if attention_layer_name in name:\r\n                module.register_forward_hook(self.get_attention)\r\n                module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    def get_attention(self, module, input, output):\r\n        self.attentions.append(output.detach().cpu())\r\n\r\n    def get_attention_gradient(self, module, grad_input, grad_output):\r\n        self.attention_gradients.append(grad_input[0].detach().cpu())\r\n\r\n    def __call__(self, input_tensor, target_class):\r\n        self.model.zero_grad()\r\n        output = self.model(input_tensor)\r\n        loss = output[:, target_class].sum()\r\n        loss.backward()\r\n        return output\r\n\r\n\r\nclass SimpleModel(nn.Module):\r\n    def __init__(self):\r\n        super(SimpleModel, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=3)\r\n        self.relu = nn.ReLU()\r\n        self.fc1 = nn.Linear(100, 10)\r\n\r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self.relu(x)\r\n        x = x.view(x.size(0), -1)\r\n        x = self.fc1(x)\r\n        return x\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    model = SimpleModel()\r\n    hook = HookedModel(model, attention_layer_name=""conv1"")\r\n    \r\n    input_tensor = torch.randn(1, 1, 10, 10)\r\n    output = hook(input_tensor, target_class=1)\r\n\r\n    print(""Forward Hooks Captured Outputs:"", hook.attentions)\r\n    print(""Backward Hooks Captured Gradients:"", hook.attention_gradients)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""cwd"": ""C:/path/to/your/base/directory"",\r\n            ""args"": [\r\n                ""${input:dataDir}""\r\n            ]\r\n        }\r\n    ],\r\n    ""inputs"": [\r\n        {\r\n            ""id"": ""dataDir"",\r\n            ""type"": ""promptString"",\r\n            ""description"": ""Enter the relative path to the data directory"",\r\n            ""default"": ""default_directory""\r\n        }\r\n    ]\r\n}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import bpy\r\n\r\ndef convert_triangles_to_quads(input_path, output_path):\r\n    bpy.ops.wm.read_factory_settings(use_empty=True)\r\n    \r\n    bpy.ops.import_scene.obj(filepath=input_path, use_smooth_groups=False, use_image_search=False)\r\n    \r\n    obj = bpy.context.selected_objects[0]\r\n    bpy.context.view_layer.objects.active = obj\r\n    \r\n    bpy.ops.object.mode_set(mode='EDIT')\r\n    bpy.ops.mesh.select_all(action='SELECT')\r\n    bpy.ops.mesh.tris_convert_to_quads(beauty=True)\r\n    bpy.ops.object.mode_set(mode='OBJECT')\r\n    \r\n    bpy.ops.export_scene.obj(filepath=output_path)\r\n\r\nconvert_triangles_to_quads('mushroom-shelve-1-merged.obj', 'quad_mesh.obj')\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\nfrom langchain.callbacks.base import CallbackManager, StdOutCallbackHandler\r\n\r\ncallback_manager = CallbackManager([StdOutCallbackHandler()])\r\n\r\nprompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\nmodel = ChatOpenAI(callback_manager=callback_manager)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\nchain.invoke({""topic"": ""ice cream""})\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from transformers import AutoImageProcessor, AutoModelForSemanticSegmentation\r\n\r\ndef load_segmentation_model():\r\n    id2label = {0: ""background"", 1: ""target""}\r\n    label2id = {""background"": 0, ""target"": 1}\r\n    \r\n    image_processor = AutoImageProcessor.from_pretrained(""Carve/u2net-universal"")\r\n    model = AutoModelForSemanticSegmentation.from_pretrained(\r\n        ""Carve/u2net-universal"",\r\n        id2label=id2label,\r\n        label2id=label2id\r\n    )\r\n    \r\n    return image_processor, model\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\n\r\ndef replace_values(df: pl.DataFrame) -> pl.DataFrame:\r\n    return df.with_columns(\r\n        pl.when(pl.col(""A"").is_in([""foo"", ""spam""]))\r\n        .then(pl.lit(""XX""))\r\n        .otherwise(pl.col(""L""))\r\n        .alias(""L""),\r\n        pl.when(pl.col(""A"").is_in([""foo"", ""spam""]))\r\n        .then(pl.lit(""XX""))\r\n        .otherwise(pl.col(""G""))\r\n        .alias(""G"")\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""A"": [""foo"", ""ham"", ""spam"", ""egg""],\r\n        ""L"": [""A54"", ""A12"", ""B84"", ""C12""],\r\n        ""G"": [""X34"", ""C84"", ""G96"", ""L6""],\r\n    }\r\n)\r\n\r\ndf = replace_values(df)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nfrom time import time\r\n\r\ndef optimized_numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {i: np.random.rand(array_size) for i in range(num_arrays)}\r\n    \r\n    if do_cache:\r\n        cache = {}\r\n\r\n    for _ in range(num_iter):\r\n        i, j = np.random.randint(num_arrays, size=2)\r\n\r\n        if do_cache:\r\n            key = (i, j) if i < j else (j, i)\r\n            if key in cache:\r\n                a = cache[key]\r\n            else:\r\n                a = np.add(arrays[i], arrays[j], dtype=np.float64)\r\n                cache[key] = a\r\n        else:\r\n            a = np.add(arrays[i], arrays[j], dtype=np.float64)\r\n\r\n    return arrays\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\n\r\ndef count_star_combinations(inp):\r\n    pivot_df = inp.pivot_table(index=['month', 'item'], columns='star', aggfunc='size', fill_value=0)\r\n    pivot_df.columns = [f'star_{col}_cnt' for col in pivot_df.columns]\r\n    return pivot_df.reset_index()\r\n\r\ninp = pd.DataFrame({'month':[1,1,1,1,1,2,2,2], \r\n                    'item':[10,10,10,10,20,20,20,20], \r\n                    'star':[1,2,1,3,3,2,2,3]})\r\n\r\nresult = count_star_combinations(inp)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import discord\r\nimport asyncio\r\nimport time\r\nfrom discord.ext import commands\r\nfrom random import choice\r\n\r\nclass MyCog(commands.Cog):\r\n    def __init__(self, client):\r\n        self.client = client\r\n\r\n    @commands.Cog.listener(""on_message"")\r\n    async def on_message(self, message):\r\n        start = time.time()\r\n\r\n        if message.author.bot:\r\n            return\r\n        if message.type != discord.MessageType.default:\r\n            return\r\n        print(f""2 if checks done - {time.time() - start}"")\r\n\r\n        if isinstance(message.channel, discord.channel.DMChannel):\r\n            return await message.reply(\r\n                f'Hey {message.author.name}!\nLeider bin ich der falsche Ansprechpartner, falls du Hilfe suchst.. '\r\n                f'\nBetrete den https://discord.gg/deutschland Bl4cklist-Discord und sende unserem Support-Bot '\r\n                f'`Bl4cklist` eine Private-Nachricht, damit sich unser Support-Team um dein Problem so schnell '\r\n                f'es geht kÃÂÃÂ¼mmern kann.')\r\n\r\n        prefix_now = await get_prefix(message)\r\n        if message.content.startswith(str(prefix_now)):\r\n            try:\r\n                await message.reply(\r\n                    ""ÃÂÃÂ - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung ""\r\n                    ""zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen."")\r\n            except discord.Forbidden:\r\n                pass\r\n            return\r\n\r\n        if self.client.user in message.mentions:\r\n            response = choice([\r\n                ""Mit mir kann man die coolsten Gewinnspiele starten!"",\r\n                'Wird Zeit jemanden den Tag zu versÃÂÃÂ¼ÃÂÃÂen!',\r\n                ""Wer nicht auf diesem Server ist, hat die Kontrolle ÃÂÃÂ¼ber sein Leben verloren!"",\r\n                ""Wann startet endlich ein neues Gewinnspiel?"",\r\n                ""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lÃÂÃÂ¼gt!""\r\n            ])\r\n            try:\r\n                await message.reply(f""{response} (Mein PrÃÂÃÂ¤fix: `/`)"", mention_author=False)\r\n            except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n                pass\r\n            return\r\n\r\n        print(f""5 if checks done - {time.time() - start}"")\r\n\r\n        count = 1\r\n        mydb = await getConnection()\r\n        mycursor = await mydb.cursor()\r\n\r\n        await mycursor.execute(""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s"",\r\n                               (message.author.guild.id,))\r\n        in_database = await mycursor.fetchone()\r\n\r\n        if in_database:\r\n            if in_database[0]:\r\n                role_list = in_database[0].split("" "")\r\n                for roleid in role_list:\r\n                    if roleid.isdigit():\r\n                        role = message.author.guild.get_role(int(roleid))\r\n                        if role and role in message.author.roles:\r\n                            await mycursor.close()\r\n                            mydb.close()\r\n                            return\r\n\r\n            if in_database[1]:\r\n                role_list = in_database[1].split("" "")\r\n                for roleid in role_list:\r\n                    if roleid.isdigit():\r\n                        role = message.author.guild.get_role(int(roleid))\r\n                        if role and role in message.author.roles:\r\n                            count += 1\r\n\r\n        await mycursor.execute(""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s"",\r\n                               (message.author.guild.id,))\r\n        in_database1 = await mycursor.fetchone()\r\n        if in_database1 and in_database1[0]:\r\n            channel_list = in_database1[0].split("" "")\r\n            if str(message.channel.id) in channel_list:\r\n                await mycursor.close()\r\n                mydb.close()\r\n                return\r\n\r\n        print(f""mysql checks done - {time.time() - start}"")\r\n\r\n        await mycursor.execute(""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s"",\r\n                               (message.author.guild.id, message.author.id))\r\n        in_database2 = await mycursor.fetchone()\r\n\r\n        if in_database2:\r\n            await mycursor.execute(\r\n                ""UPDATE guild_message_count SET message_count = message_count + %s WHERE guild_id = %s AND user_id = %s"",\r\n                (count, message.author.guild.id, message.author.id))\r\n        else:\r\n            await mycursor.execute(\r\n                ""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)"",\r\n                (message.author.id, count, message.author.guild.id))\r\n\r\n        await mydb.commit()\r\n        await mycursor.close()\r\n        mydb.close()\r\n\r\n        print(f""task done - {time.time() - start}"")\r\n\r\ndef run_bot():\r\n    intents = discord.Intents.default()\r\n    intents.messages = True\r\n    client = commands.Bot(command_prefix=""/"", intents=intents)\r\n\r\n    @client.event\r\n    async def on_ready():\r\n        print(f""Logged in as {client.user}"")\r\n\r\n    client.add_cog(MyCog(client))\r\n    \r\n    asyncio.run(client.start('YOUR_TOKEN'))\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom starlette.middleware.sessions import SessionMiddleware\r\nfrom typing import Optional\r\n\r\napp = FastAPI()\r\napp.add_middleware(SessionMiddleware, secret_key=""your_secret_key"")\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\n@app.get(""/"", response_class=HTMLResponse, name=""homepage"")\r\nasync def get_main_data(request: Request):\r\n    msg = request.session.pop(""msg"", None)\r\n    result = request.session.pop(""result"", None)\r\n    return templates.TemplateResponse(""home.html"", {""request"": request, ""msg"": msg, ""result"": result})\r\n\r\n@app.post(""/"", name=""homepage_post"")\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    if condition:\r\n        request.session[""result""] = str(trans)\r\n    else:\r\n        request.session[""msg""] = str(err)\r\n    return RedirectResponse(url=request.url_for(""homepage""), status_code=303)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import os\r\nfrom fastapi import Depends, Security, HTTPException\r\n\r\nAPI_KEY = ""your_secret_api_key""\r\napi_key_header_auth = ""X-API-Key""\r\n\r\nasync def api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    if os.getenv(""ENV"", ""development"") == ""production"":\r\n        if api_key_header != API_KEY:\r\n            raise HTTPException(\r\n                status_code=401,\r\n                detail=""Invalid API Key"",\r\n            )\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from pydantic import BaseModel\r\nfrom typing import Any\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: Any):\r\n        return cls(int(v))\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\n\r\nclass CustomBaseModel(BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: lambda v: str(v)}\r\n        allow_population_by_field_name = True\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from typing import Optional, List\r\nfrom sqlmodel import SQLModel, Field, Relationship, Session, create_engine, select\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n\r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": ""Node.id""})\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef create_and_insert_nodes():\r\n    engine = create_engine(""sqlite:///:memory:"")\r\n    SQLModel.metadata.create_all(engine)\r\n\r\n    with Session(engine) as session:\r\n        root = Node(data=""Root"")\r\n        child1 = Node(data=""Child 1"", parent=root)\r\n        child2 = Node(data=""Child 2"", parent=root)\r\n        grandchild = Node(data=""Grandchild"", parent=child1)\r\n\r\n        session.add(root)\r\n        session.commit()\r\n\r\n        stmt = select(Node).where(Node.parent_id == None)\r\n        root_node = session.exec(stmt).first()\r\n        return root_node\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from dataclasses import dataclass\r\nfrom typing import TypeVar, Callable\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(klass: T) -> T:\r\n    return klass\r\n\r\ndef my_dataclass(klass: T) -> T:\r\n    return something_else(dataclass(klass))\r\n\r\n@dataclass\r\nclass TestA:\r\n    a: int\r\n    b: str\r\n\r\nTestA(0, """")\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\nimport numpy as np\r\n\r\ndef transform_dataframe(df):\r\n    df['C'] = df.groupby(['A', 'B']).cumcount() + 1\r\n    result = df.pivot_table(index=['A', 'B'], columns='C', values='C', aggfunc='first')\r\n    result.columns = [f'C{i}' for i in result.columns]\r\n    result.reset_index(inplace=True)\r\n    return result\r\n\r\ndf = pd.DataFrame({\r\n    'A': ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'e', 'e', 'e', 'e'],\r\n    'B': ['b', 'b', 'b', 'd', 'd', 'd', 'd', 'd', 'b', 'b', 'b', 'b'],\r\n    'C': [1, 2, 3, 7, 8, 5, 6, 3, 4, 3, 2, 1]\r\n})\r\n\r\ntransformed_df = transform_dataframe(df)\r\nprint(transformed_df)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n        \r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n"
0,1,misclassified_in_Test_2.csv.csv,"class Point:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        self._tuple = (x, y)\r\n\r\n    @property\r\n    def tuple(self):\r\n        return self._tuple\r\n\r\n    def __repr__(self):\r\n        return f""Point({self.x}, {self.y})""\r\n\r\n    def __str__(self):\r\n        return f""({self.x}, {self.y})""\r\n\r\n    def __getattr__(self, name):\r\n        if name == 'tuple':\r\n            return self._tuple\r\n        raise AttributeError(f""'{type(self).__name__}' object has no attribute '{name}'"")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nfrom numba import njit\r\n\r\n@njit(parallel=True)\r\ndef find_closest_y(z_coordinates, z_size):\r\n    x_size, y_size = z_coordinates.shape\r\n    y_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for i in range(z_size):\r\n        for x in range(x_size):\r\n            closest_y = np.argmin(np.abs(z_coordinates[x] - i))\r\n            y_coordinates[x, i] = closest_y\r\n    return y_coordinates\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = find_closest_y(z_coordinates, z_size)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from ultralytics import YOLO\r\n\r\ndef get_class_data():\r\n    model = YOLO(""yolov8n.pt"")\r\n    results = model.predict(source=""0"")\r\n    class_data = []\r\n    for result in results:\r\n        for obj in result.pred[0]:\r\n            class_data.append(result.names[int(obj[5])])\r\n    return class_data\r\n\r\nclass_data = get_class_data()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import itertools\r\n\r\ndef generate_combinations(letters, k, n):\r\n    all_combinations = set()\r\n    \r\n    for groups in itertools.combinations(itertools.combinations(letters, n), k):\r\n        sorted_groups = tuple(sorted(''.join(group) for group in groups))\r\n        all_combinations.add(sorted_groups)\r\n    \r\n    return [list(group) for group in all_combinations]\r\n\r\nletters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L']\r\nresult = generate_combinations(letters, 4, 3)\r\nprint(result)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\n\r\ndef compute_columns(df):\r\n    max_value = df[COL_VALUE].max()\r\n\r\n    sum_lower = df.select(pl.col(COL_VALUE)).to_series().apply(\r\n        lambda x: df.filter(pl.col(COL_VALUE) < x).select(pl.sum(COL_VALUE)).to_numpy()[0]\r\n    )\r\n\r\n    max_other = df[COL_VALUE].apply(\r\n        lambda x: max_value if x != max_value else df.filter(pl.col(COL_VALUE) != x).select(pl.col(COL_VALUE)).max()\r\n    )\r\n\r\n    return df.with_columns(\r\n        pl.Series(""sum_lower"", sum_lower),\r\n        pl.Series(""max_other"", max_other),\r\n    )\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\ndf = compute_columns(df)\r\nprint(df)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\n\r\ndef get_logits_from_pipeline(texts):\r\n    selected_model = ""distilbert-base-uncased-finetuned-sst-2-english""\r\n    tokenizer = AutoTokenizer.from_pretrained(selected_model)\r\n    model = AutoModelForSequenceClassification.from_pretrained(selected_model, num_labels=2)\r\n\r\n    classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_tensors=""pt"")\r\n\r\n    results = []\r\n    for text in texts:\r\n        tokenized = tokenizer(text, return_tensors=""pt"")\r\n        with torch.no_grad():\r\n            outputs = model(**tokenized)\r\n        logits = outputs.logits\r\n        results.append(logits.squeeze().tolist())\r\n\r\n    return results\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\nlogits = get_logits_from_pipeline(texts)\r\nprint(logits)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI\r\n\r\n# --- main app ---\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\n# --- sub app ---\r\n\r\nsub_app = FastAPI(lifespan=lambda app: (\r\n    print(""sub startup""),\r\n    yield,\r\n    print(""sub shutdown""),\r\n))\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\napp.mount(""/sub"", sub_app)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import asyncio\r\nimport httpx\r\n\r\nasync def fetch_url(url: str, client: httpx.AsyncClient) -> str:\r\n    response = await client.get(url)\r\n    return response.text\r\n\r\nasync def fetch_all_urls(urls: list[str]) -> list[str]:\r\n    async with httpx.AsyncClient() as client:\r\n        tasks = [fetch_url(url, client) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\ndef fetch_multiple_urls(urls: list[str]) -> list[str]:\r\n    result = asyncio.run(fetch_all_urls(urls))\r\n    return result\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nfrom bson import ObjectId\r\n\r\napp = FastAPI()\r\n\r\nclient = pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb = client[""models""]\r\nmodel_collection = db[""example-model""]\r\n\r\ndef response_to_mongo(r: dict):\r\n    r[""_id""] = str(ObjectId())\r\n    model_collection.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features: List[float]):\r\n    prediction = model.predict(\r\n        pd.DataFrame(\r\n            [features],\r\n            columns=model.feature_names_in_,\r\n        )\r\n    )\r\n    response = {""predictions"": prediction.tolist()}\r\n    response_to_mongo(response)\r\n    return response\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nfrom pathlib import Path\r\n\r\ndef load_and_concat_jsons(json_paths):\r\n    def process_json(json_path):\r\n        df = pl.read_json(json_path)\r\n        return df.with_columns(\r\n            pl.col(""date"").str.to_date(),\r\n            pl.col(""fillingDate"").str.to_date(),\r\n            pl.col(""acceptedDate"").str.to_date()\r\n        )\r\n\r\n    dfs = [process_json(path) for path in json_paths]\r\n    return pl.concat(dfs).sort(""date"")\r\n\r\njson_files = [\r\n    ""../AAPL/single_statements/1985-09-30-quarterly_balance.json"",\r\n    ""../AAPL/single_statements/1986-09-30-quarterly_balance.json""\r\n]\r\n\r\nresult_df = load_and_concat_jsons(json_files)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\ndef create_shared_hover_plot(A_error, B_error, title='Price over time', err='Price'):\r\n    fig = make_subplots(rows=2, cols=1,\r\n                        vertical_spacing=0.05,\r\n                        shared_xaxes=True,\r\n                        subplot_titles=(title, """"))\r\n\r\n    # A\r\n    fig.add_trace(go.Scatter(x=A_error['CloseDate'], \r\n                             y=A_error[err], \r\n                             line_color='green',\r\n                             marker_color='green',\r\n                             mode='lines+markers',\r\n                             showlegend=True,\r\n                             name=""A"",\r\n                             hoverinfo='x+y',\r\n                             stackgroup='one'),\r\n                  row=1, col=1)\r\n\r\n    # B\r\n    fig.add_trace(go.Scatter(x=B_error['CloseDate'], \r\n                             y=B_error[err], \r\n                             line_color='blue',\r\n                             mode='lines+markers',\r\n                             showlegend=True,\r\n                             name=""B"",\r\n                             hoverinfo='x+y',\r\n                             stackgroup='one'),\r\n                  row=2, col=1)\r\n\r\n    fig.update_yaxes(tickprefix='$')\r\n    fig.add_hline(y=0, line_width=3, line_dash=""dash"", line_color=""black"")\r\n\r\n    fig.update_layout(hovermode=""x unified"", legend_traceorder=""normal"")\r\n\r\n    return fig\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from icu import Collator, Locale\r\n\r\ndef create_multi_locale_sorter(primary_locale=""en_US.UTF-8"", secondary_locale=""fa_IR.UTF-8""):\r\n    collator1 = Collator.createInstance(Locale(primary_locale))\r\n    collator2 = Collator.createInstance(Locale(secondary_locale))\r\n\r\n    def sort_key(s):\r\n        primary_key = collator1.getSortKey(s)\r\n        secondary_key = collator2.getSortKey(s) if not s.isascii() else b""""\r\n        return primary_key, secondary_key\r\n\r\n    return sort_key\r\n"
0,1,misclassified_in_Test_2.csv.csv,"torch.onnx.export(model, img, 'detr.onnx', opset_version=16)\r\n\r\nbash\r\npip install onnx-simplifier\r\n\r\npython\r\nimport onnx\r\nfrom onnxsim import simplify\r\n\r\nonnx_model = onnx.load(""detr.onnx"")\r\nmodel_simp, check = simplify(onnx_model)\r\nassert check, ""Simplified ONNX model could not be validated""\r\nonnx.save(model_simp, ""detr_simplified.onnx"")\r\n\r\npython\r\nimport onnxruntime\r\nonnx_model = onnx.load(""detr.onnx"")\r\nfor node in onnx_model.graph.node:\r\n    print(node.op_type)\r\n\r\npython\r\nimport onnxruntime as ort\r\nsess = ort.InferenceSession(""detr.onnx"")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\nfrom sklearn import datasets\r\n\r\ndef mutate_keep_unused(df, new_col_name, expr):\r\n    temp_df = df.copy()\r\n    temp_df[new_col_name] = expr(temp_df)\r\n    used_columns = list(expr.__code__.co_names)\r\n    existing_columns = set(df.columns)\r\n    drop_columns = [col for col in used_columns if col in existing_columns]\r\n    return temp_df.drop(columns=drop_columns)\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\n\r\nresult = mutate_keep_unused(\r\n    iris, \r\n    ""new_col"", \r\n    lambda x: x['sepal length (cm)'] + x['petal length (cm)'] * x['petal width (cm)']\r\n)\r\n\r\nprint(result.head())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from typing import Any, TypeVar\r\nimport numpy as np\r\nimport numpy.typing as npt\r\n\r\nT = TypeVar(""T"", bound=np.generic)\r\n\r\ndef explain_ndarray_annotations(\r\n    arr: npt.NDArray[T]\r\n) -> tuple[str, str, str]:\r\n    dtype_info = f""Dtype: {arr.dtype} (Type: {type(arr.dtype)})""\r\n    shape_info = f""Shape: {arr.shape}""\r\n    annotation_info = (\r\n        ""Annotations:\n""\r\n        "" - np.ndarray[Any, np.dtype[Any]]: Generic array, dtype unspecified.\n""\r\n        "" - np.ndarray[Any, np.dtype[T]]: Generic array, dtype restricted.\n""\r\n        "" - np.ndarray[T]: Short form for dtype-only specification.""\r\n    )\r\n    return dtype_info, shape_info, annotation_info\r\n\r\narr_example = np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float64)\r\nresult = explain_ndarray_annotations(arr_example)\r\nprint(""\n"".join(result))\r\n"
0,1,misclassified_in_Test_2.csv.csv,"#!/bin/bash\r\n\r\nset -e\r\n\r\ninstall_dependencies() {\r\n    sudo yum groupinstall -y ""Development Tools""\r\n    sudo yum install -y gcc gcc-c++ make zlib-devel bzip2 bzip2-devel readline-devel \\r\n        sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel\r\n}\r\n\r\ndownload_python_source() {\r\n    local version=""3.11.0""\r\n    local src_dir=""/usr/src""\r\n\r\n    cd ""$src_dir""\r\n    sudo curl -O ""https://www.python.org/ftp/python/$version/Python-$version.tgz""\r\n    sudo tar xvf ""Python-$version.tgz""\r\n}\r\n\r\ncompile_and_install_python() {\r\n    local version=""3.11.0""\r\n    local src_dir=""/usr/src/Python-$version""\r\n\r\n    cd ""$src_dir""\r\n    sudo ./configure --enable-optimizations --with-openssl=/usr/local/ssl\r\n    sudo make -j$(nproc)\r\n    sudo make altinstall\r\n}\r\n\r\nverify_ssl_module() {\r\n    python3.11 -c ""import ssl; print(ssl.OPENSSL_VERSION)""\r\n}\r\n\r\nfix_pip_ssl_issue() {\r\n    sudo python3.11 -m ensurepip\r\n    sudo python3.11 -m pip install --upgrade pip setuptools wheel\r\n}\r\n\r\nmain() {\r\n    install_dependencies\r\n    download_python_source\r\n    compile_and_install_python\r\n    verify_ssl_module\r\n    fix_pip_ssl_issue\r\n}\r\n\r\nmain\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef transform_with_polars(df):\r\n    df_pl = pl.from_pandas(df)\r\n    df_pl = df_pl.group_by_dynamic(\r\n        ""date"", every=""1w"", closed=""right"", by=[""category"", ""subcategory""]\r\n    ).agg(\r\n        pl.col(""value"").sum().alias(""value_sum""),\r\n        pl.col(""value"").mean().alias(""value_mean""),\r\n        pl.col(""value"").max().alias(""value_max""),\r\n        pl.col(""value"").min().alias(""value_min"")\r\n    )\r\n    return df_pl\r\n"
0,1,misclassified_in_Test_2.csv.csv,"stages:\r\n- stage: Build\r\n  jobs:\r\n  - job: InstallAndTest\r\n    pool:\r\n      vmImage: 'ubuntu-latest'\r\n    steps:\r\n    - script: |\r\n        curl -sSL https://install.python-poetry.org | python3 -\r\n        echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n      displayName: 'Install Poetry'\r\n\r\n    - script: |\r\n        poetry install --no-root\r\n      displayName: 'Install Dependencies'\r\n\r\n    - script: |\r\n        poetry run flake8 src\r\n      displayName: 'Linter'\r\n\r\n    - script: |\r\n        poetry add pytest-azurepipelines\r\n        poetry run pytest src\r\n      displayName: 'Tests'\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from typing import Callable, TypeVar, Dict, Protocol\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=int)\r\n\r\nclass MemoizedFunction(Protocol):\r\n    memory: Dict[int, int]\r\n    def __call__(self, n: int) -> int: ...\r\n\r\ndef remember(f: Callable[[int], int]) -> MemoizedFunction:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport plotly.express as px\r\n\r\ndef plot_corrected_total_duration():\r\n    df = pl.DataFrame({\r\n        ""sub_id"": [1, 2, 3],\r\n        ""engagement"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n        ""total_duration"": [123, 456, 789]\r\n    })\r\n\r\n    df = df.with_columns(pl.col(""engagement"").str.split("","")).explode(""engagement"")\r\n\r\n    df = df.with_columns(pl.col(""total_duration"") / df.groupby(""sub_id"").count().select(pl.col(""engagement"")).alias(""engagement_count""))\r\n\r\n    fig = px.bar(df, x=""sub_id"", y=""total_duration"", color=""engagement"")\r\n    fig.show()\r\n\r\nplot_corrected_total_duration()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import torch\r\nfrom transformers import LlamaForCausalLM, LlamaTokenizer, LlamaConfig\r\n\r\ndef load_llama_model(model_path):\r\n    tokenizer = LlamaTokenizer.from_pretrained(model_path)\r\n    \r\n    config = LlamaConfig(\r\n        hidden_size=4096,\r\n        num_hidden_layers=32,\r\n        num_attention_heads=32,\r\n        intermediate_size=int(4096 * 1.3),\r\n        vocab_size=128256,\r\n        use_scaled_rope=True\r\n    )\r\n\r\n    model = LlamaForCausalLM(config=config)\r\n    model.load_state_dict(torch.load(f""{model_path}/consolidated.00.pth"", map_location=torch.device(""cpu"")))\r\n    model.eval()\r\n\r\n    return model, tokenizer\r\n\r\ndef generate_text(model, tokenizer, input_text):\r\n    inputs = tokenizer(input_text, return_tensors=""pt"")\r\n    outputs = model.generate(inputs[""input_ids""])\r\n    return tokenizer.decode(outputs[0], skip_special_tokens=True)\r\n\r\n# Example usage:\r\n# model_path = ""Meta-Llama-3.1-8B-Instruct""\r\n# model, tokenizer = load_llama_model(model_path)\r\n# result = generate_text(model, tokenizer, ""Hello, how are you?"")\r\n# print(result)\r\n"
0,1,misclassified_in_Test_2.csv.csv,2.7] ÃÂÃÂÃÂÃÂ¢ÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂ  [0.49
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl

df = pl.DataFrame(
    {
        ""Group"": [""Group1"", ""Group2"", ""Group3""],
        ""Weight"": [100.0, 200.0, 300.0],
        ""Vals"": [[0.5, 0.5, 0.8], [0.5, 0.5, 0.8], [0.7, 0.9]]
    }
)

df = df.with_columns(
    pl.col(""Vals"").list.eval(pl.element().map(lambda x: x * pl.col(""Weight""))).alias(""Weighted"")
)

print(df)


shape: (3, 4)
?????????????????????????????????????????????????????????
? Group  ? Weight ? Vals            ? Weighted         ?
? ---    ? ---    ? ---             ? ---             ?
? str    ? f64    ? list[f64]       ? list[f64]       ?
?????????????????????????????????????????????????????????
? Group1 ? 100.0  ? [0.5, 0.5, 0.8] ? [50.0, 50.0, 80.0] ?
? Group2 ? 200.0  ? [0.5, 0.5, 0.8] ? [100.0, 100.0, 160.0] ?
? Group3 ? 300.0  ? [0.7, 0.9]      ? [210.0, 270.0] ?
?????????????????????????????????????????????????????????"
0,1,misclassified_in_Test_2.csv.csv,"import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hi""\r\n    yield\r\n\r\ndef create_app(lifespan):\r\n    app = FastAPI(title=""Test"", lifespan=lifespan)\r\n\r\n    @app.get(""/"")\r\n    async def root():\r\n        return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n    return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app = create_app(_lifespan_override)\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(""/"")\r\n    assert response.text == ""Hi""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\n\r\ndef calculate_ema_polars(values, span):\r\n    df = pl.DataFrame({""value"": values}).with_columns(\r\n        pl.col(""value"").ewm_mean(span=span, adjust=False, min_periods=span).alias(""ema_9"")\r\n    )\r\n    return df\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\ndf_result = calculate_ema_polars(values, span=9)\r\nprint(df_result)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef handle_dst_shift():\r\n    d0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\n    \r\n    d1 = d0 + dt.timedelta(hours=2)\r\n    d2 = d0 + dt.timedelta(hours=3)\r\n    d3 = d0 + dt.timedelta(hours=4)\r\n\r\n    d1u = d1.astimezone(dt.timezone.utc)\r\n    d2u = d2.astimezone(dt.timezone.utc)\r\n\r\n    return {\r\n        ""d0"": d0.isoformat(),\r\n        ""d1"": d1.isoformat(),\r\n        ""d2"": d2.isoformat(),\r\n        ""d3"": d3.isoformat(),\r\n        ""d1_utc"": d1u.isoformat(),\r\n        ""d2_utc"": d2u.isoformat(),\r\n        ""delta_d2_d1"": d2 - d1,\r\n        ""delta_d2u_d1u"": d2u - d1u\r\n    }\r\n\r\nprint(handle_dst_shift())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from functools import partial\r\nfrom inspect import signature\r\n\r\ndef analyze_partial_behavior():\r\n    def bar(a, b):\r\n        return a / b\r\n\r\n    results = {}\r\n\r\n    f1 = partial(bar, 3)\r\n    results[""f1_signature""] = str(signature(f1))\r\n    results[""f1_result""] = f1(6)\r\n\r\n    try:\r\n        f1(a=2, b=6)\r\n    except TypeError as e:\r\n        results[""f1_a_error""] = str(e)\r\n\r\n    try:\r\n        f1(c=2, b=6)\r\n    except TypeError as e:\r\n        results[""f1_c_error""] = str(e)\r\n\r\n    f2 = partial(bar, b=3)\r\n    results[""f2_signature""] = str(signature(f2))\r\n    results[""f2_result_default""] = f2(6)\r\n    results[""f2_result_override""] = f2(6, b=1)\r\n\r\n    f3 = partial(bar, a=3)\r\n    results[""f3_signature""] = str(signature(f3))\r\n\r\n    return results\r\n\r\nprint(analyze_partial_behavior())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nimport inspect\r\n\r\ndef analyze_numpy_sum():\r\n    A = np.random.random(1000)\r\n    \r\n    np_sum_source = inspect.getsource(np.sum)\r\n    array_sum_source = inspect.getsource(A.sum)\r\n    \r\n    np_sum_dis = None\r\n    array_sum_dis = None\r\n    \r\n    try:\r\n        import dis\r\n        np_sum_dis = dis.Bytecode(np.sum).dis()\r\n        array_sum_dis = dis.Bytecode(A.sum).dis()\r\n    except:\r\n        pass\r\n    \r\n    return {\r\n        ""np_sum_source"": np_sum_source,\r\n        ""array_sum_source"": array_sum_source,\r\n        ""np_sum_dis"": np_sum_dis,\r\n        ""array_sum_dis"": array_sum_dis\r\n    }\r\n\r\nanalyze_numpy_sum()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\nimport json\r\n\r\ndef analyze_json_parsing():\r\n    data_records = [\r\n        {""device"": ""rtr1"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        {""device"": ""rtr2"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        {""device"": ""rtr3"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n    ]\r\n\r\n    data_index = {\r\n        ""rtr1"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        ""rtr2"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        ""rtr3"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n    }\r\n\r\n    df1 = pd.read_json(json.dumps(data_records))\r\n    df2 = pd.read_json(json.dumps(data_index))\r\n    df3 = pd.read_json(json.dumps(data_index), orient=""index"")\r\n\r\n    return df1, df2, df3\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from abc import ABC, abstractmethod\r\n\r\nclass FooBase(ABC):\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = ""baz""\r\n\r\n    @property\r\n    @abstractmethod\r\n    def foo(self) -> str:\r\n        pass\r\n\r\n\r\nclass Foo(FooBase):\r\n    @property\r\n    def foo(self) -> str:\r\n        return ""hello""\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy.typing as npt\r\nimport numpy as np\r\nfrom typing import Any, Union, Sequence\r\n\r\nArrayLike = Union[npt.NDArray[Any], Sequence[Any]]\r\n\r\ndef f(a: ArrayLike) -> int:\r\n    return len(a)  # type: ignore[arg-type]\r\n\r\ndef g(a: ArrayLike) -> Any:\r\n    return a[0]  # type: ignore[index]\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import requests\r\nfrom bs4 import BeautifulSoup\r\nimport cloudscraper\r\n\r\ndef scrape_etherscan_tokens():\r\n    scraper = cloudscraper.create_scraper()  \r\n    url = ""https://etherscan.io/tokens""\r\n    \r\n    response = scraper.get(url)\r\n    if response.status_code != 200:\r\n        raise Exception(f""Failed to fetch page, status code: {response.status_code}"")\r\n\r\n    soup = BeautifulSoup(response.text, ""html.parser"")\r\n    \r\n    tokens = []\r\n    for row in soup.select(""table tbody tr""):\r\n        columns = row.find_all(""td"")\r\n        if len(columns) >= 2:\r\n            token_name = columns[0].get_text(strip=True)\r\n            token_link = columns[0].find(""a"")[""href""] if columns[0].find(""a"") else None\r\n            tokens.append({""name"": token_name, ""link"": f""https://etherscan.io{token_link}"" if token_link else None})\r\n\r\n    return tokens\r\n\r\ntokens_data = scrape_etherscan_tokens()\r\nprint(tokens_data)\r\n"
0,1,misclassified_in_Test_2.csv.csv,class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\nBadBar.__class__.__len__ = lambda cls: cls.__len__()\r\n\r\nprint(len(BadBar))  # 9002\r\nprint(len(BadBar()))  # 9002\r\n
0,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\n\r\ndef remove_duplicate_pairs(df):\r\n    df[""_pair""] = df.apply(lambda row: tuple(sorted([row[""person1""], row[""person2""]])), axis=1)\r\n    finaldf = df.drop_duplicates(subset=[""_pair"", ""messages""]).drop(columns=[""_pair""])\r\n    return finaldf\r\n\r\ndf = pd.DataFrame({\r\n    """": [0,1,2,3,4,5,6],\r\n    ""person1"": [""ryan"", ""delta"", ""delta"", ""delta"",""bravo"",""alpha"",""ryan""], \r\n    ""person2"": [""delta"", ""ryan"", ""alpha"", ""bravo"",""delta"",""ryan"",""alpha""], \r\n    ""messages"": [1, 1, 2, 3,3,9,9]\r\n})\r\n\r\nfinaldf = remove_duplicate_pairs(df)\r\nprint(finaldf)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\ndef efficient_sparse_dataframe(N, C):\r\n    pls = [pl.DataFrame({""index"": np.linspace(i, N*3-i, num=N, dtype=np.int32), f""A{i}"": np.arange(N, dtype=np.float32)}) for i in range(C)]\r\n    return functools.reduce(lambda a, b: a.join(b, on='index', how='outer'), pls).sort(by='index')\r\n\r\nN, C = 300000, 20\r\nF = efficient_sparse_dataframe(N, C)\r\nprint(F)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from airflow.sensors.sql import SqlSensor\r\nimport pendulum\r\nfrom airflow.decorators import task, dag\r\n\r\n@dag(\r\n    dag_id=""database_monitor"",\r\n    schedule_interval='*/10 * * * *',\r\n    start_date=pendulum.datetime(2023, 7, 16, 21, 0, tz=""UTC""),\r\n    catchup=False,\r\n)\r\ndef Pipeline():\r\n    \r\n    check_db_alive = SqlSensor(\r\n        task_id=""check_db_alive"",\r\n        conn_id=""evergreen"",\r\n        sql=""SELECT pg_is_in_recovery()"",\r\n        success=lambda x: x[0] == False,\r\n        poke_interval=60,\r\n        mode=""reschedule"",\r\n    )\r\n\r\n    @task()\r\n    def alert_of_db_inrecovery():\r\n        import requests\r\n\r\n        data = {\r\n            ""@key"": ""kkll"",\r\n            ""@version"": ""alertapi-0.1"",\r\n            ""@type"": ""ALERT"",\r\n            ""object"": ""Testobject"",\r\n            ""severity"": ""MINOR"",\r\n            ""text"": ""Former primary instance is in recovery""\r\n        }\r\n        requests.post('https://httpevents.systems/api/sendAlert', verify=False, json=data)\r\n\r\n    check_db_alive >> alert_of_db_inrecovery()\r\n\r\ndag = Pipeline()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import tqdm\r\nimport multiprocessing\r\n\r\ndef calc(n_digits, pos, total, lock):\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = max(n, 1)\r\n\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    with tqdm(total=n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True) as pbar:\r\n        for k in range(n):\r\n            t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n            deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n            pi += Decimal(t) / Decimal(deno)\r\n            with lock:\r\n                pbar.update(1)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    lock = multiprocessing.Manager().Lock()\r\n\r\n    Parallel(n_jobs=n_cores)(\r\n        delayed(calc)(n, pos, len(tasks), lock) for pos, n in enumerate(tasks)\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import pydantic\r\nimport random\r\nimport string\r\nfrom typing import Any\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(1, 100),\r\n            ""b"": """".join(random.choices(string.digits, k=10))\r\n        }\r\n\r\nprint(ExampleData.example())\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from flask import Flask, render_template, Response\r\nimport threading\r\nimport time\r\nimport map_plotting_test as mpt\r\n\r\napp = Flask(__name__)\r\n\r\ndef generate_loading():\r\n    yield ""<html><head><meta http-equiv='refresh' content='5'></head><body>""\r\n    yield ""<h1>Loading map...</h1>""\r\n    yield ""</body></html>""\r\n\r\n@app.route('/')\r\ndef render_loading():\r\n    threading.Thread(target=create_map_background).start()\r\n    return Response(generate_loading(), content_type='text/html')\r\n\r\ndef create_map_background():\r\n    mpt.create_map()\r\n    time.sleep(1)  \r\n\r\n@app.route('/map')\r\ndef render_the_map():\r\n    return render_template(""map.html"")\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from http.server import SimpleHTTPRequestHandler, HTTPServer\r\nimport argparse\r\n\r\ndef run_server(address: str, port: int, directory: str):\r\n    handler_class = lambda *args, **kwargs: SimpleHTTPRequestHandler(*args, directory=directory, **kwargs)\r\n    server = HTTPServer((address, port), handler_class)\r\n    server.serve_forever()\r\n\r\nif __name__ == ""__main__"":\r\n    parser = argparse.ArgumentParser(description=""Simple HTTP Server"")\r\n    parser.add_argument(""--bind"", default=""0.0.0.0"", help=""Address to bind the server to"")\r\n    parser.add_argument(""--port"", type=int, default=8000, help=""Port to run the server on"")\r\n    parser.add_argument(""--directory"", default=""."", help=""Directory to serve files from"")\r\n    args = parser.parse_args()\r\n    \r\n    run_server(args.bind, args.port, args.directory)\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\ndef send_image(path_to_img: str, url: str):\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512), anti_aliasing=True)\r\n    image_byte = base64.b64encode(image.astype(np.float32).tobytes()).decode()\r\n    data = {""shape"": image.shape, ""image"": image_byte}\r\n    response = requests.post(url, json=data)\r\n    return response.json()\r\n\r\nimport json\r\nimport base64\r\nimport uvicorn\r\nimport numpy as np\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass ImageData(BaseModel):\r\n    shape: tuple\r\n    image: str\r\n\r\n@app.post(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: ImageData):\r\n    image_shape = tuple(data.shape)\r\n    image_array = np.frombuffer(base64.b64decode(data.image), dtype=np.float32).reshape(image_shape)\r\n    return {""success"": True, ""shape"": image_array.shape}\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(app, port=8000, host=""127.0.0.1"")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\n\r\ndef unpack_sector_exposure(df):\r\n    return df.with_columns(\r\n        pl.col(""sector_exposure"")\r\n        .str.split("";"")\r\n        .list.eval(pl.element().str.split(""=""))\r\n        .list.to_struct()\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nprint(unpack_sector_exposure(df))\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport duckdb\r\nimport sqlalchemy\r\n\r\ndef write_polars_to_duckdb(df, db_path, table_name):\r\n    engine = sqlalchemy.create_engine(f""duckdb:///{db_path}"")\r\n    df.write_database(table_name=table_name, connection=engine, engine=""sqlalchemy"")\r\n\r\npldf = pl.DataFrame({'mynum': [1,2,3,4]})\r\nwrite_polars_to_duckdb(pldf, ""scratch.db"", ""test_table"")\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from sqlalchemy import Table, Column, TIMESTAMP, text, MetaData\r\n\r\ndef create_users_table(metadata):\r\n    return Table(\r\n        ""users"",\r\n        metadata,\r\n        Column(\r\n            ""datemodified"",\r\n            TIMESTAMP,\r\n            server_default=text(""CURRENT_TIMESTAMP""),\r\n            server_onupdate=text(""CURRENT_TIMESTAMP""),\r\n        ),\r\n    )\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nfrom timeit import timeit\r\n\r\ndef benchmark_matmul_vs_dot():\r\n    N = 1300\r\n    xx = np.random.randn(N, N) + 1j\r\n    yy = np.random.randn(N, N) + 1j\r\n\r\n    x = np.real(xx).copy()\r\n    y = np.real(yy).copy()\r\n\r\n    dot_time = timeit('np.dot(x, y)', number=10, globals=globals())\r\n    matmul_time = timeit('np.matmul(x, y)', number=10, globals=globals())\r\n\r\n    print('time for np.matmul: ', matmul_time)\r\n    print('time for np.dot: ', dot_time)\r\n\r\nbenchmark_matmul_vs_dot()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import psycopg2\r\nfrom unittest.mock import MagicMock, patch\r\n\r\nclass MockPostgresqlApi:\r\n    def __init__(self):\r\n        self.cursor = MagicMock()\r\n        self.db = MagicMock()\r\n        self.db.cursor.return_value = self.cursor\r\n\r\n    def add_event(self, *, event):\r\n        self.cursor.execute(""INSERT INTO history (event) VALUES (%s);"", (event,))\r\n\r\n    def events(self):\r\n        self.cursor.execute(""SELECT * FROM event;"")\r\n        return self.cursor.fetchall()\r\n\r\n    def close(self):\r\n        self.cursor.close()\r\n        self.db.close()\r\n\r\n@patch(""db.PostgresqlApi"", new_callable=lambda: MockPostgresqlApi)\r\ndef test_read_currencies(mock_db):\r\n    from fastapi.testclient import TestClient\r\n    from main import app\r\n\r\n    client = TestClient(app)\r\n    response = client.get(""/currencies"", auth=(""test_user"", ""test_pass""))\r\n    assert response.status_code == 200\r\n    assert response.json() == {""get events"": ""ok""}\r\n"
0,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nfrom datetime import datetime\r\nimport pytz\r\n\r\ndef convert_timezone_dynamic():\r\n    df = pl.DataFrame({\r\n        ""time"": [datetime(2023, 4, 3, 2), datetime(2023, 4, 4, 3), datetime(2023, 4, 5, 4)],\r\n        ""tzone"": [""Asia/Tokyo"", ""America/Chicago"", ""Europe/Paris""]\r\n    }).with_columns(pl.col(""time"").dt.replace_time_zone(""UTC""))\r\n\r\n    df = df.with_columns(\r\n        pl.struct([""time"", ""tzone""]).apply(\r\n            lambda x: x[""time""].convert_time_zone(x[""tzone""]).hour\r\n        ).alias(""local_hour"")\r\n    )\r\n\r\n    return df\r\n\r\nconvert_timezone_dynamic()\r\n"
0,1,misclassified_in_Test_2.csv.csv,"from pydantic import BaseModel, ValidationError, field_validator\r\nfrom typing import List\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ndef validate_instance(model_class, data):\r\n    errors = []\r\n    try:\r\n        model_class(**data)\r\n    except ValidationError as e:\r\n        errors.extend(e.errors())\r\n\r\n    return errors\r\n\r\nsalary_data = {""gross"": ""hello"", ""net"": 1000, ""tax"": 10}\r\nemployee_data = {""name"": ""Mattia"", ""age"": ""hello"", ""salary"": salary_data}\r\n\r\nerrors = validate_instance(Employee, employee_data)\r\nprint(errors)\r\n"
1,1,misclassified_in_Test_2.csv.csv,"import org.bouncycastle.asn1.ASN1Encodable;\r\nimport org.bouncycastle.asn1.ASN1EncodableVector;\r\nimport org.bouncycastle.asn1.ASN1Integer;\r\nimport org.bouncycastle.asn1.ASN1Primitive;\r\nimport org.bouncycastle.asn1.ASN1Sequence;\r\nimport org.bouncycastle.asn1.ASN1Set;\r\nimport org.bouncycastle.asn1.DEROctetString;\r\nimport org.bouncycastle.asn1.DERSequence;\r\nimport org.bouncycastle.asn1.DERTaggedObject;\r\nimport org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\r\nimport org.bouncycastle.asn1.x509.AlgorithmIdentifier;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.util.BigIntegers;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.spec.ECGenParameterSpec;\r\nimport java.util.Base64;\r\n\r\npublic class TestApplication {\r\n\r\n    private static final String CURVE = ""secp384r1""; // P-384 curve\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            // Add BouncyCastle Provider\r\n            Security.addProvider(new BouncyCastleProvider());\r\n\r\n            // Generate EC key pair\r\n            ECGenParameterSpec parameterSpec = new ECGenParameterSpec(CURVE);\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"", ""BC"");\r\n            keyPairGenerator.initialize(parameterSpec, new SecureRandom());\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n\r\n            // Encode with Safari-compatible ASN.1 structure.\r\n            byte[] keyPairBytes = encodeKeyPair(keyPair);\r\n\r\n            // Extract and print key pair\r\n            String privateKeyPem = convertToPem(keyPairBytes);\r\n            System.out.println(""Private Key in PEM format:\n"" + privateKeyPem);\r\n\r\n            // Save the key pair in binary format to a file (optional)\r\n            String privateKeyFilePath = ""private_key.bin"";\r\n            saveKeyToBinaryFile(keyPairBytes, privateKeyFilePath);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Convert a KeyPair into ASN.1 encoded PrivateKeyInfo compatible with Safari.\r\n    private static byte[] encodeKeyPair(KeyPair keyPair) throws IOException {\r\n        PrivateKeyInfo originalKeyInfo = PrivateKeyInfo.getInstance(keyPair.getPrivate().getEncoded());\r\n\r\n        ASN1Sequence oldPrivateKeySequence = DERSequence\r\n                .getInstance(originalKeyInfo.getPrivateKey().getOctets());\r\n        DERSequence newPrivateKeySequence = new DERSequence(new ASN1Encodable[] {\r\n                // Version (1).\r\n                oldPrivateKeySequence.getObjectAt(0),\r\n\r\n                // Private key bytes.\r\n                oldPrivateKeySequence.getObjectAt(1),\r\n\r\n                // Public key algorithm. Accepted by Firefox but not Safari, so must be skipped.\r\n                // oldPrivateKeySequence.getObjectAt(2),\r\n\r\n                // Public key bytes, tagged [1].\r\n                oldPrivateKeySequence.getObjectAt(3),\r\n        });\r\n\r\n        // Re-create PrivateKeyInfo with only the structures we want.\r\n        ASN1EncodableVector v = new ASN1EncodableVector();\r\n\r\n        // Version fixed to zero.\r\n        v.add(new ASN1Integer(BigIntegers.ZERO));\r\n        v.add(originalKeyInfo.getPrivateKeyAlgorithm());\r\n        v.add(new DEROctetString(newPrivateKeySequence));\r\n\r\n        return new DERSequence(v).getEncoded();\r\n    }\r\n\r\n    // Convert private key to PEM format\r\n    private static String convertToPem(byte[] privateKey) {\r\n        String base64Key = Base64.getEncoder().encodeToString(privateKey);\r\n        return ""-----BEGIN PRIVATE KEY-----\n"" +\r\n                base64Key +\r\n                ""\n-----END PRIVATE KEY-----"";\r\n    }\r\n\r\n    // Save the private key in binary format\r\n    private static void saveKeyToBinaryFile(byte[] privateKey, String filePath) {\r\n        try (FileOutputStream fos = new FileOutputStream(filePath)) {\r\n            fos.write(privateKey);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\r\n            .oidc(Customizer.withDefaults());\r\n        http\r\n            .exceptionHandling((exceptions) -> exceptions\r\n                .defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""),\r\n                    new MediaTypeRequestMatcher(MediaType.TEXT_HTML)\r\n                )\r\n            )\r\n            .oauth2ResourceServer((oauth2) -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain adminSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        http\r\n            .securityMatcher(""/admin/**"")\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .requestMatchers(HttpMethod.GET).hasAuthority(""SCOPE_admin:read"")\r\n                .anyRequest().hasAuthority(""SCOPE_admin:write"")\r\n            )\r\n            .oauth2ResourceServer((oauth2) -> oauth2.jwt(Customizer.withDefaults()));\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(3)\r\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        http\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .anyRequest().authenticated()\r\n            )\r\n            .formLogin(Customizer.withDefaults);\r\n\r\n        return http.build();\r\n    }\r\n\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"public class Container {\r\n  private InterestingSetup interestingSetup;\r\n\r\n  public InterestingSetup getInterestingSetup() {\r\n    return interestingSetup;\r\n  }\r\n\r\n  public void setInterestingSetup(InterestingSetup interestingSetup) {\r\n    this.interestingSetup = interestingSetup;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""Container{"" +\r\n        ""interestingSetup="" + interestingSetup +\r\n        '}';\r\n  }\r\n}\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class InterestingSetup {\r\n  private int port;\r\n  private boolean validation;\r\n  private List<Map<String, String>> parts;\r\n\r\n  public int getPort() {\r\n    return port;\r\n  }\r\n\r\n  public void setPort(int port) {\r\n    this.port = port;\r\n  }\r\n\r\n  public boolean isValidation() {\r\n    return validation;\r\n  }\r\n\r\n  public void setValidation(boolean validation) {\r\n    this.validation = validation;\r\n  }\r\n\r\n  public List<Map<String, String>> getParts() {\r\n    return parts;\r\n  }\r\n\r\n  public void setParts(List<Map<String, String>> parts) {\r\n    this.parts = parts;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""InterestingSetup{"" +\r\n        ""port="" + port +\r\n        "", validation="" + validation +\r\n        "", parts="" + parts +\r\n        '}';\r\n  }\r\n}\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport org.yaml.snakeyaml.TypeDescription;\r\nimport org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\nimport org.yaml.snakeyaml.representer.Representer;\r\n\r\npublic class Main {\r\n  public static void main(String... args) throws UnsupportedEncodingException {\r\n    String yamlString =\r\n        ""# this is the part I don't care about\n"" +\r\n        ""config:\n"" +\r\n        ""  key-1: val-1\n"" +\r\n        ""other-config:\n"" +\r\n        ""  lang: en\n"" +\r\n        ""  year: 1906\n"" +\r\n        ""# below is the only part I care about\n"" +\r\n        ""interesting-setup:\n"" +\r\n        ""  port: 1234\n"" +\r\n        ""  validation: false\n"" +\r\n        ""  parts:\n"" +\r\n        ""    - on-start: backup\n"" +\r\n        ""      on-stop: say-goodbye"";\r\n\r\n    // Skip unknown properties\r\n    Representer representer = new Representer();\r\n    representer.getPropertyUtils().setSkipMissingProperties(true);\r\n\r\n    // Define the target object type\r\n    Constructor constructor = new Constructor(Container.class);\r\n    TypeDescription containerTypeDescription = new TypeDescription(Container.class);\r\n\r\n    // Define how the interesting-setup property should be processed\r\n    containerTypeDescription.substituteProperty(""interesting-setup"", InterestingSetup.class,\r\n        ""getInterestingSetup"", ""setInterestingSetup"");\r\n    constructor.addTypeDescription(containerTypeDescription);\r\n\r\n    // Finally, parse the YAML\r\n    Yaml yaml = new Yaml(constructor, representer);\r\n    InputStream inputStream = new ByteArrayInputStream(yamlString.getBytes(StandardCharsets.UTF_8));;\r\n    Container container = yaml.load(inputStream);\r\n    System.out.println(container.getInterestingSetup());\r\n  }\r\n}\r\n\r\nObjectMapper mapper = new ObjectMapper(new YAMLFactory());\r\n// As the helper object Container doesn't contain all the properties\r\n// it is necessary to indicate that fact to the library to avoid\r\n// errors\r\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\nContainer container = mapper.readValue(yamlString, Container.class);\r\nSystem.out.println(container.getInterestingSetup());\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\n\r\n// Instead of mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n// you can annotate the class with @JsonIgnoreProperties(ignoreUnknown = true)\r\n// to avoid errors related to unknown properties\r\npublic class Container {\r\n\r\n  @JsonProperty(""interesting-setup"")\r\n  private InterestingSetup interestingSetup;\r\n\r\n  public InterestingSetup getInterestingSetup() {\r\n    return interestingSetup;\r\n  }\r\n\r\n  public void setInterestingSetup(InterestingSetup interestingSetup) {\r\n    this.interestingSetup = interestingSetup;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""Container{"" +\r\n        ""interestingSetup="" + interestingSetup +\r\n        '}';\r\n  }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\r\n\r\n@SpringBootTest(webEnvironment = WebEnvironment.MOCK)\r\n@AutoConfigureMockMvc\r\nclass ApplicationIntegrationTest {\r\n\r\n    @Autowired\r\n    MockMvc api;\r\n\r\n    @Test\r\n    void givenUserIsAnonymous_whenGetLiveness_thenOk() throws Exception {\r\n        api.perform(get(""/data/actuator/health/liveness""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsAnonymous_whenGetMachin_thenUnauthorized() throws Exception {\r\n        api.perform(get(""/data/machin""))\r\n            .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsGrantedWithDataWrite_whenGetMachin_thenOk() throws Exception {\r\n        api.perform(get(""/data/machin"")\r\n                .with(jwt().jwt(jwt -> jwt.authorities(List.of(new SimpleGrantedAuthority(""SCOPE_data:write""))))))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsAuthenticatedButNotGrantedWithDataWrite_whenGetMachin_thenForbidden() throws Exception {\r\n        api.perform(get(""/data/machin"")\r\n                .with(jwt().jwt(jwt -> jwt.authorities(List.of(new SimpleGrantedAuthority(""SCOPE_openid""))))))\r\n            .andExpect(status().isForbidden());\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"/**\r\n * Builds a common first column constraints for the provided gridPanes.\r\n * @param gridPanes\r\n */\r\nprivate static void buildFirstColumnConstraint(GridPane... gridPanes) {\r\n    /* Column constraint key. */\r\n    final String COLUMN_INDEX_CONSTRAINT = ""gridpane-column"";\r\n\r\n    /* Checks if the node is a first column node or not. */\r\n    Predicate<Node> isFirstColumn = node ->{\r\n        Integer constraint = (Integer) node.getProperties().get(COLUMN_INDEX_CONSTRAINT);\r\n        return constraint != null && constraint == 0;\r\n    };\r\n\r\n    /* Keep track of the max width. */\r\n    DoubleProperty maxWidth = new SimpleDoubleProperty();\r\n    ChangeListener<Number> widthListener = (obs, old, val) -> {\r\n        if (val.doubleValue() > maxWidth.get()) {\r\n            maxWidth.set(val.doubleValue());\r\n        }\r\n    };\r\n\r\n    // Bind the minWidth to the calculated width\r\n    final ColumnConstraints constraint = new ColumnConstraints();\r\n    constraint.minWidthProperty().bind(maxWidth);\r\n\r\n    // Go through each gridPane and set the first constraint\r\n    Stream.of(gridPanes).forEach(gridPane -> {\r\n        gridPane.getColumnConstraints().add(0,constraint);\r\n\r\n        // Filter for all first column children and add the widthListener to them\r\n        gridPane.getChildren().stream().filter(isFirstColumn)\r\n                .map(node -> (Region) node)\r\n                .forEach(region -> region.widthProperty().addListener(widthListener));\r\n    });\r\n}\r\n\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.Region;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.util.function.Predicate;\r\nimport java.util.stream.Stream;\r\n\r\npublic class GridPane_Demo extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n\r\n\r\n        GridPane gridPane1 = buildGrid(""One"", ""One Two"");\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        GridPane gridPane2 = buildGrid(""One Two Three"", ""One Two Three Four"");\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        buildFirstColumnConstraint(gridPane1, gridPane2);\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 220);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private GridPane buildGrid(String label1, String label2) {\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setHgap(20);\r\n        gridPane.setVgap(5);\r\n        gridPane.addRow(0, new Label(label1), new TextField());\r\n        gridPane.addRow(1, new Label(label2), new TextField());\r\n        return gridPane;\r\n    }\r\n\r\n    /**\r\n     * Builds a common first column constraints for the provided gridPanes.\r\n     *\r\n     * @param gridPanes\r\n     */\r\n    private static void buildFirstColumnConstraint(GridPane... gridPanes) {\r\n        /* Column constraint key. */\r\n        final String COLUMN_INDEX_CONSTRAINT = ""gridpane-column"";\r\n\r\n        /* Checks if the node is a first column node or not. */\r\n        Predicate<Node> isFirstColumn = node -> {\r\n            Integer constraint = (Integer) node.getProperties().get(COLUMN_INDEX_CONSTRAINT);\r\n            return constraint != null && constraint == 0;\r\n        };\r\n\r\n        /* Keep track of the max width. */\r\n        DoubleProperty maxWidth = new SimpleDoubleProperty();\r\n        ChangeListener<Number> widthListener = (obs, old, val) -> {\r\n            if (val.doubleValue() > maxWidth.get()) {\r\n                maxWidth.set(val.doubleValue());\r\n            }\r\n        };\r\n\r\n        // Bind the minWidth to the calculated width\r\n        final ColumnConstraints constraint = new ColumnConstraints();\r\n        constraint.minWidthProperty().bind(maxWidth);\r\n\r\n        // Go through each gridPane and set the first constraint\r\n        Stream.of(gridPanes).forEach(gridPane -> {\r\n            gridPane.getColumnConstraints().add(0, constraint);\r\n\r\n            // Filter for all first column children and add the widthListener to them\r\n            gridPane.getChildren().stream().filter(isFirstColumn)\r\n                    .map(node -> (Region) node)\r\n                    .forEach(region -> region.widthProperty().addListener(widthListener));\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .authorizeHttpRequests((authorize) -> authorize\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer((oauth2) -> oauth2\r\n            .jwt(Customizer.withDefaults())\r\n            .authenticationEntryPoint((request, response, exception) -> {\r\n                System.out.println(""Authentication failed"");\r\n                BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                delegate.commence(request, response, exception);\r\n            })\r\n        )\r\n        .exceptionHandling((exceptions) -> exceptions\r\n            .authenticationEntryPoint((request, response, exception) -> {\r\n                System.out.println(""Authentication is required"");\r\n                BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                delegate.commence(request, response, exception);\r\n            })\r\n        );\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .oauth2ResourceServer((oauth2) -> oauth2\r\n            .jwt(Customizer.withDefaults())\r\n            .withObjectPostProcessor(new ObjectPostProcessor<BearerTokenAuthenticationFilter>() {\r\n                @Override\r\n                public <O extends BearerTokenAuthenticationFilter> O postProcess(O filter) {\r\n                    filter.setAuthenticationFailureHandler((request, response, exception) -> {\r\n                        System.out.println(""Authentication failed (and is being handled in a custom way)"");\r\n                        BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                        delegate.commence(request, response, exception);\r\n                    });\r\n                    return filter;\r\n                }\r\n            })\r\n        );\r\n\r\n    return http.build();\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Fork(3)\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@State(Scope.Benchmark)\r\npublic class JdkBenchmarks {\r\n\r\n    public int[] values;\r\n\r\n    @Setup\r\n    public void setupArray() {\r\n        int count = 1000;\r\n        values = new int[count];\r\n        for(int i = 0; i < count; i++) {\r\n            values[i] = i;\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void indexed(Blackhole bh) {\r\n        for(int i = 0; i < values.length; i++) {\r\n            bh.consume(values[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void indexed_cached(Blackhole bh) {\r\n        int[] vs = values;\r\n        int length = vs.length;\r\n        for(int i = 0; i < length; i++) {\r\n            bh.consume(vs[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void enhanced(Blackhole bh) {\r\n        for (int value : values) {\r\n            bh.consume(value);\r\n        }\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import java.time.Duration;\r\nimport java.util.concurrent.ForkJoinPool;\r\n\r\npublic class SleepManagedBlocker implements ForkJoinPool.ManagedBlocker {\r\n\r\n  private final Duration sleepDuration;\r\n  private boolean slept; // Does this need to be volatile?\r\n\r\n  public SleepManagedBlocker(Duration slepDuration) {\r\n    this.sleepDuration = slepDuration;\r\n  }\r\n\r\n  @Override\r\n  public boolean block() throws InterruptedException {\r\n    if (!slept) {\r\n      slept = true;\r\n      Thread.sleep(sleepDuration);\r\n    }\r\n    return slept;\r\n  }\r\n\r\n  @Override\r\n  public boolean isReleasable() {\r\n    return slept;\r\n  }\r\n}\r\n\r\nimport java.time.Duration;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\nimport org.openjdk.jmh.annotations.Benchmark;\r\nimport org.openjdk.jmh.annotations.BenchmarkMode;\r\nimport org.openjdk.jmh.annotations.Fork;\r\nimport org.openjdk.jmh.annotations.Measurement;\r\nimport org.openjdk.jmh.annotations.Mode;\r\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\r\nimport org.openjdk.jmh.annotations.Param;\r\nimport org.openjdk.jmh.annotations.Scope;\r\nimport org.openjdk.jmh.annotations.State;\r\nimport org.openjdk.jmh.annotations.Warmup;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\n\r\n@Fork(value = 1, jvmArgsAppend = {""-Djava.util.concurrent.ForkJoinPool.common.maximumSpares=1024""})\r\n@Warmup(iterations = 5)\r\n@Measurement(iterations = 5)\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(TimeUnit.SECONDS)\r\npublic class FJPBenchmarks {\r\n\r\n  @Benchmark\r\n  public void runTest(TestState state, Blackhole bh) {\r\n    state.executeOuterLoop(bh);\r\n  }\r\n\r\n  @State(Scope.Benchmark)\r\n  public static class TestState {\r\n\r\n    private static final Duration SLEEP_DURATION = Duration.ofMillis(5);\r\n    private static final int OUTER_LOOP_COUNT = 32;\r\n    private static final int INNER_LOOP_COUNT = 32;\r\n\r\n    @Param({""sequential"", ""parallel""})\r\n    private String sequentialMode;\r\n\r\n    @Param({""common"", ""separate""})\r\n    private String poolMode;\r\n\r\n    @Param({""raw"", ""managed""})\r\n    private String sleepMode;\r\n\r\n    void executeOuterLoop(Blackhole bh) {\r\n      IntStream.range(0, OUTER_LOOP_COUNT)\r\n          .unordered()\r\n          .parallel()\r\n          .forEach(i -> {\r\n            executeInnerLoop(createInnerLoop());\r\n            bh.consume(i);\r\n          });\r\n    }\r\n\r\n    IntStream createInnerLoop() {\r\n      var stream = IntStream.range(0, INNER_LOOP_COUNT).unordered();\r\n      return switch (sequentialMode) {\r\n        case ""sequential"" -> stream.sequential();\r\n        case ""parallel"" -> stream.parallel();\r\n        default -> throw new IllegalStateException(""bad sequentialMode: "" + sequentialMode);\r\n      };\r\n    }\r\n\r\n    void executeInnerLoop(IntStream loop) {\r\n      var sleeper = getSleeper();\r\n      switch (poolMode) {\r\n        case ""common"" -> loop.forEach(_ -> sleeper.sleepUnchecked());\r\n        case ""separate"" -> {\r\n          try (var pool = new ForkJoinPool()) {\r\n            loop.forEach(_ -> pool.submit(sleeper::sleepUnchecked).join());\r\n          }\r\n        }\r\n        default -> throw new IllegalStateException(""bad poolMode: "" + poolMode);\r\n      }\r\n    }\r\n\r\n    Sleeper getSleeper() {\r\n      return switch (sleepMode) {\r\n        case ""raw"" -> () -> Thread.sleep(SLEEP_DURATION);\r\n        case ""managed"" -> () -> ForkJoinPool.managedBlock(new SleepManagedBlocker());\r\n        default -> throw new IllegalStateException(""bad sleepMode: "" + sleepMode);\r\n      };\r\n    }\r\n\r\n    @FunctionalInterface\r\n    interface Sleeper {\r\n  \r\n      void sleep() throws InterruptedException;\r\n\r\n      default Void sleepUnchecked() {\r\n        try {\r\n          sleep();\r\n        } catch (InterruptedException ex) {\r\n          throw new RuntimeException(ex);\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    static class SleepManagedBlocker implements ForkJoinPool.ManagedBlocker {\r\n\r\n      private boolean slept;\r\n\r\n      @Override\r\n      public boolean block() throws InterruptedException {\r\n        if (!slept) {\r\n          slept = true;\r\n          Thread.sleep(SLEEP_DURATION);\r\n        }\r\n        return true;\r\n      }\r\n\r\n      @Override\r\n      public boolean isReleasable() {\r\n        return slept;\r\n      }\r\n    }\r\n  }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import com.spire.barcode.BarCodeGenerator;\r\nimport com.spire.barcode.BarCodeType;\r\nimport com.spire.barcode.BarcodeSettings;\r\nimport com.spire.barcode.QRCodeECL;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class GenerateQRCode {\r\n    public static void main(String []args) throws IOException {\r\n        //Instantiate a BarcodeSettings object\r\n        BarcodeSettings settings = new BarcodeSettings();\r\n        //Set barcode type\r\n        settings.setType(BarCodeType.QR_Code);\r\n        //Set barcode data\r\n        String data = ""https://stackoverflow.com/"";\r\n        settings.setData(data);\r\n        //Set barcode module width\r\n        settings.setX(2);\r\n        //Set error correction level\r\n        settings.setQRCodeECL(QRCodeECL.M);\r\n\r\n        //Set top text\r\n        settings.setTopText(""User Name"");\r\n        //Set bottom text\r\n        settings.setBottomText(""Event Name"");\r\n\r\n        //Set text visibility\r\n        settings.setShowText(false);\r\n        settings.setShowTopText(true);\r\n        settings.setShowBottomText(true);\r\n\r\n        //Set border visibility\r\n        settings.hasBorder(false);\r\n\r\n        //Instantiate a BarCodeGenerator object based on the specific settings\r\n        BarCodeGenerator barCodeGenerator = new BarCodeGenerator(settings);\r\n        //Generate QR code image\r\n        BufferedImage bufferedImage = barCodeGenerator.generateImage();\r\n        //save the image to a .png file\r\n        ImageIO.write(bufferedImage,""png"",new File(""QR_Code.png""));\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"// Precompute rotated images\r\nBufferedImage[] preRotatedImages = new BufferedImage[360];\r\nfor (int i = 0; i < 360; i++) {\r\n    preRotatedImages[i] = rotateImage(originalImage, i);\r\n}\r\n\r\n// Rotate function\r\nprivate BufferedImage rotateImage(BufferedImage img, int angle) {\r\n    int w = img.getWidth();\r\n    int h = img.getHeight();\r\n    int newW = (int) Math.ceil(Math.sqrt(w * w + h * h));\r\n    BufferedImage rotated = new BufferedImage(newW, newW, BufferedImage.TYPE_INT_ARGB);\r\n    Graphics2D g2d = rotated.createGraphics();\r\n    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n    g2d.rotate(Math.toRadians(angle), newW / 2, newW / 2);\r\n    g2d.drawImage(img, (newW - w) / 2, (newW - h) / 2, null);\r\n    g2d.dispose();\r\n    return rotated;\r\n}\r\n\r\n// During gameplay, fetch pre-rotated images\r\npublic void render(Graphics g, int angle, int x, int y) {\r\n    g.drawImage(preRotatedImages[angle % 360], x, y, null);\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"package com.example;\r\n\r\nimport org.graalvm.polyglot.Context;\r\nimport org.graalvm.polyglot.Value;\r\n\r\npublic class JsTest {\r\n\r\n  public static void main(String[] args) throws Exception {\r\n  \r\n    try (Context context = Context.newBuilder(""js"")\r\n            .allowAllAccess(true)\r\n            .build()) {\r\n        // Evaluate JavaScript code\r\n        String jsCode = ""console.log('Hello, GraalVM!');"";\r\n        context.eval(""js"", jsCode);\r\n    } catch (Exception e) {\r\n        throw new Exception(""Script execution failed: "" + e.getMessage());\r\n    }\r\n    \r\n  }\r\n  \r\n}\r\n\r\npackage com.example;\r\n\r\nimport org.graalvm.polyglot.Context;\r\nimport org.graalvm.polyglot.Value;\r\n\r\npublic class JsTest3 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        try (Context context = Context.newBuilder(""js"")\r\n                .option(""engine.WarnInterpreterOnly"", ""false"")\r\n                .allowAllAccess(true)\r\n                .build()) {\r\n\r\n            Value result = context.eval(""js"", ""2 + 2"");\r\n            System.out.println(""Result: "" + result.asInt());\r\n\r\n            // Call JavaScript Function\r\n            context.eval(""js"", ""function greet(name) { return 'Hello, ' + name; }"");\r\n            Value greetFunction = context.getBindings(""js"").getMember(""greet"");\r\n            System.out.println(""Greeting: "" + greetFunction.execute(""World"").asString());\r\n\r\n\r\n            // Evaluate JavaScript code\r\n            String jsCode = ""print('HI');"";\r\n            context.eval(""js"", jsCode);\r\n\r\n        } catch (Exception e) {\r\n            throw new Exception(""Script execution failed: "" + e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\npackage com.example;\r\n\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\n\r\npublic class JsTest {\r\n    public static void main(String[] args) throws ScriptException {\r\n        try {\r\n            //ScriptEngine engine = new ScriptEngineManager().getEngineByName(""nashorn"");\r\n            //ScriptEngine engine  =new ScriptEngineManager().getEngineByName(""JavaScript"");\r\n            ScriptEngineManager manager = new ScriptEngineManager();\r\n            ScriptEngine engine  = manager.getEngineByName(""JavaScript"");\r\n\r\n            if (engine == null) {\r\n                System.out.println(""Nashorn script engine not available."");\r\n                return;\r\n            }\r\n\r\n            engine.eval(""print('HI');"");\r\n            engine.eval(""print('Hello, Nashorn!');"");\r\n            engine.eval(""var x = 10 + 20; print('x = ' + x);"");\r\n\r\n        } catch (ScriptException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"// Method to process the sentence\r\nstatic public String processSentence(String sentence) {\r\n    if (!isValidSentence(sentence)) {\r\n        return sentence + "" is an invalid sentence"";\r\n    }\r\n\r\n    String[] words = sentence.trim().split(""\\s+""); // Split by whitespace\r\n\r\n    if (words.length <= 2) {\r\n        return ""Invalid Length"";\r\n    }\r\n\r\n    //Swap all words\r\n    String[] reverseWords = new String[words.length];\r\n    for(int i = words.length - 1; i >= 0; i--)\r\n    {\r\n        reverseWords[(reverseWords.length - 1) - i] = words[i];\r\n    }\r\n\r\n    // Reverse middle words\r\n    for (int i = 1; i < words.length - 1; i++) {\r\n        reverseWords[i] = new StringBuilder(reverseWords[i]).reverse().toString();\r\n    }\r\n\r\n    return String.join("" "", reverseWords); // Join words with a space\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Table(name = ""customers"", catalog = ""market"")\r\n\r\npublic class QLKH_DTO implements java.io.Serializable {\r\n    \r\n    @Id\r\n    @GeneratedValue(strategy =GenerationType.IDENTITY) \r\n    @Column(name = ""CustomerID"")\r\n    private Integer CustomerID;\r\n   \r\n    @Column(name = ""Password"")\r\n    private String Password;\r\n    \r\n    @Column(name = ""Fullname"")\r\n    private String Fullname; \r\n    \r\n    @Column(name = ""Address"")\r\n    private String Address;\r\n    \r\n    @Column(name = ""City"")\r\n    private String City;\r\n    \r\n    public QLKH_DTO(){}\r\n     \r\n    public QLKH_DTO(String Password,String Fullname, String Address, String City) {\r\n        this.Password = Password;\r\n        this.Fullname = Fullname;\r\n        this.Address = Address;\r\n        this.City = City;\r\n    }\r\n     \r\n \r\n    public Integer getCustomerID() {\r\n        return this.CustomerID;\r\n    }\r\n\r\n    public void setCustomerID(Integer CustomerID) {\r\n        this.CustomerID = CustomerID;\r\n    }\r\n    \r\n    public String getPassword() {\r\n        return this.Password;\r\n    }\r\n\r\n    public void setPassword(String Password) {\r\n        this.Password = Password;\r\n    }\r\n   \r\n    public String getFullname() {\r\n        return this.Fullname;\r\n    }\r\n\r\n    public void setFullname(String Fullname) {\r\n        this.Fullname = Fullname;\r\n    }\r\n    \r\n    public String getAddress() {\r\n        return this.Address;\r\n    }\r\n\r\n    public void setAddress(String Address) {\r\n        this.Address = Address;\r\n    }\r\n   \r\n    public String getCity() {\r\n        return this.City;\r\n    }\r\n\r\n    public void setCity(String City) {\r\n        this.City = City;\r\n    } \r\n}"
1,1,misclassified_in_Test_2.csv.csv,"private static void postCall() throws IOException {\r\n\r\n    // Create a new HTTP client        \r\n    OkHttpClient client = new OkHttpClient()\r\n            .newBuilder()           \r\n            .build();\r\n\r\n    // Create the request body\r\n    MediaType mediaType = MediaType.parse(""application/x-www-form-urlencoded"");\r\n    RequestBody body = RequestBody.Companion.create(""password=yourPassword&grant_type=password&client_id=yoirClientId&username=yourUserName"",mediaType);\r\n    \r\n    // Build the request object, with method, headers\r\n    Request request = new Request.Builder()\r\n            .url(""https://your-address-to-get-the-token/openid-connect/token"")\r\n            .method(""POST"", body)               \r\n            .build();\r\n            \r\n    // Perform the request, this potentially throws an IOException\r\n    Response response = client.newCall(request).execute();\r\n    // Read the body of the response into a hashmap\r\n    Map<String, Object> responseMap = new ObjectMapper().readValue(response.body().byteStream(), HashMap.class);\r\n    // Read the value of the ""access_token"" key from the hashmap\r\n    String accessToken = (String) responseMap.get(""access_token"");\r\n    //System.out.println(responseMap.toString());\r\n    // Return the access_token value\r\n    System.out.println(""accessToken "" + accessToken);\r\n\r\n     request = new Request.Builder()\r\n            .url(""https://your-endpoint-rest-call"")\r\n            .method(""GET"", null)\r\n            .addHeader(""Authorization"", ""Bearer "" + accessToken)\r\n            .build();\r\n\r\n     response = client.newCall(request).execute();\r\n     System.out.println(""Response"" + response.body().string());\r\n\r\n\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.Expression;\r\nimport com.github.javaparser.ast.expr.MethodCallExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class TestUtil {\r\n\r\n    public static void listFieldAccess() throws FileNotFoundException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n            List<String> fields = new ArrayList<>();\r\n\r\n            // Find all field names\r\n            classDeclaration.findAll(FieldDeclaration.class).forEach(fieldDeclaration -> {\r\n                fieldDeclaration.getVariables().forEach(variable -> {\r\n                    fields.add(variable.getNameAsString());\r\n                });\r\n            });\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                methodDeclaration.findAll(Expression.class).forEach(expression -> {\r\n                    // Process only specific types of expressions\r\n                    if (expression instanceof MethodCallExpr || expression instanceof AssignExpr ||\r\n                            expression instanceof UnaryExpr) {\r\n                        // Check if any of the expression fields match the class level fields\r\n                        List<String> matchedFields = fields.stream().filter(field -> {\r\n                            return expression.getChildNodes().stream().anyMatch((node) -> node.toString().contains(field));\r\n                        }).collect(Collectors.toList());\r\n                        System.out.println(""Field access: "" + matchedFields);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import org.springframework.context.MessageSource;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.support.ReloadableResourceBundleMessageSource;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\r\n\r\nimport java.util.Locale;\r\n\r\n@Configuration\r\npublic class ApplicationConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public MessageSource messageSource() {\r\n        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();\r\n        messageSource.setBasenames(""classpath:/i18n/messages"");\r\n        messageSource.setDefaultEncoding(""UTF-8"");\r\n        return messageSource;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\r\n        localeChangeInterceptor.setParamName(""lang"");\r\n        return localeChangeInterceptor;\r\n    }\r\n\r\n    @Bean(name = ""localeResolver"")\r\n    public SessionLocaleResolver sessionLocaleResolver() {\r\n        SessionLocaleResolver localeResolver = new SessionLocaleResolver();\r\n        localeResolver.setDefaultLocale(new Locale(""en""));\r\n        return localeResolver;\r\n    }\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(localeChangeInterceptor());\r\n    } \r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import java.nio.ByteBuffer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.Base64;\r\nimport org.bouncycastle.crypto.Signer;\r\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\r\nimport org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;\r\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\r\nimport org.bouncycastle.util.encoders.Hex;\r\n\r\n// Base64, hex decode\r\nString keyHexBase64 =""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\nbyte[] key = Hex.decode(new String(Base64.getDecoder().decode(keyHexBase64), StandardCharsets.UTF_8));\r\n\r\n// Separate secret and public key\r\nByteBuffer keyBuffer = ByteBuffer.wrap(key);\r\nbyte[] secretKey = new byte[32];\r\nkeyBuffer.get(secretKey);\r\nbyte[] publicKey = new byte[keyBuffer.remaining()];\r\nkeyBuffer.get(publicKey);\r\n\r\n// Signing\r\nbyte[] message = ""The quick brown fox jumps over the lazy dog"".getBytes(StandardCharsets.UTF_8);\r\nEd25519PrivateKeyParameters secretKeyParameters = new Ed25519PrivateKeyParameters(secretKey, 0);\r\nSigner signer = new Ed25519Signer();\r\nsigner.init(true, secretKeyParameters);\r\nsigner.update(message, 0, message.length);\r\nbyte[] signature = signer.generateSignature();\r\nSystem.out.println(""Signature (hex): "" + Hex.toHexString(signature));\r\n\r\n// Verification\r\nEd25519PublicKeyParameters publicKeyParameters = new Ed25519PublicKeyParameters(publicKey, 0);\r\nSigner verifier = new Ed25519Signer();\r\nverifier.init(false, publicKeyParameters);\r\nverifier.update(message, 0, message.length);\r\nboolean verified = verifier.verifySignature(signature); // Signature (hex): 2aa31bb14799a00ac1129bdd6773a8481f0fd7e829d59f6fccc81021bf21e397dc5d17362d342615a5500598542586cad8891f984bdb90ec0c80b48eb638df07\r\nSystem.out.println(""Verification: "" + verified); // Verification: true"
1,1,misclassified_in_Test_2.csv.csv,"import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Scope;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class EtlStep {\r\n    private final Tracer tracer;\r\n\r\n    public EtlStep(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj, int step) {\r\n        // Retrieve the current span context if available\r\n        SpanContext parentContext = Span.fromContext(Context.current()).getSpanContext();\r\n\r\n        Span span = tracer.spanBuilder(""Step"" + step)\r\n            .setParent(Context.current().with(Span.wrap(parentContext)))\r\n            .startSpan();\r\n\r\n        try (Scope scope = span.makeCurrent()) {\r\n            CompletableFuture.runAsync(() -> {\r\n                // Your code here\r\n            }).whenComplete((unused, exception) -> {\r\n                if (exception != null) {\r\n                    span.recordException(exception);\r\n                }\r\n                span.end();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nclass DataPackage {\r\n    private final String uniqueId;\r\n\r\n    public DataPackage(String uniqueId) {\r\n        this.uniqueId = uniqueId;\r\n    }\r\n\r\n    public String getUniqueId() {\r\n        return uniqueId;\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        // Increment the counter\r\n        long currentValue = COUNTER.getAndIncrement();\r\n\r\n        // Use bit manipulation and formatting to generate the desired output\r\n        long part1 = (currentValue >> 28) & 0xFFFF;  // First 4 hex digits\r\n        long part2 = (currentValue >> 16) & 0xFFF;   // Next 3 hex digits\r\n        long part3 = currentValue & 0xFFFF;          // Last 4 hex digits\r\n\r\n        return String.format(""%04X-7%03X-%04X"", part1, part2, part3);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Slf4j\r\n@Configuration\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n@Value(""${jwt.key}"")\r\nprivate String jwtKey;\r\n\r\nprivate final TokenService tokenService;\r\n\r\n@Bean\r\nSecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                           CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n    OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n    http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n    http.exceptionHandling((exceptions) -> exceptions.defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n            .oauth2ResourceServer((resourceServer) -> resourceServer.jwt(jwtSpec -> {\r\n                jwtSpec.decoder(jwtDecoder());\r\n            }));\r\n\r\n    http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n    return http.build();\r\n\r\n}\r\n\r\n@Bean\r\nSecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n            .authorizeHttpRequests(authz -> authz\r\n                    .requestMatchers(""/hello"").authenticated()\r\n                    .anyRequest().permitAll())\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                    .jwt(jwt -> jwt.decoder(jwtDecoder())))\r\n            .formLogin(Customizer.withDefaults());\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\nAuthorizationServerSettings authorizationServerSettings() {\r\n    return AuthorizationServerSettings.builder().build();\r\n}\r\n\r\n@Bean\r\nWebSecurityCustomizer webSecurityCustomizer() {\r\n    return (web) -> web.ignoring().requestMatchers(new AntPathRequestMatcher(""/h2-console/**""));\r\n}\r\n\r\n@Bean\r\nPasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\nOAuth2TokenCustomizer<JwtEncodingContext> jwtCustomizer() {\r\n    return tokenService.jwtCustomizer();\r\n}\r\n\r\n@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    return tokenService.jwtEncoder();\r\n}\r\n\r\n@Bean\r\npublic JwtDecoder jwtDecoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtKey);\r\n    SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    return NimbusJwtDecoder.withSecretKey(keySpec).build();\r\n}\r\n}\r\n\r\n@Service\r\npublic class TokenService {\r\n\r\n@Value(""${jwt.key}"")\r\nprivate String jwtKey;\r\n\r\npublic OAuth2TokenCustomizer<JwtEncodingContext> jwtCustomizer() {\r\n    return context -> {\r\n        if (OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())) {\r\n            context.getJwsHeader().algorithm(MacAlgorithm.HS256);\r\n            Date expirationDate = \r\nDate.from(Instant.now().plus(Duration.ofHours(5)));\r\n            Date issueDate = Date.from(Instant.now());\r\n            context.getClaims().claims(claims -> {\r\n                claims.put(""exp"", expirationDate);\r\n                claims.put(""iat"", issueDate);\r\n                claims.put(""custom"", ""custom"");\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\npublic JwtEncoder jwtEncoder() {\r\n    return parameters -> {\r\n        byte[] secretKeyBytes = Base64.getDecoder().decode(jwtKey);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyBytes, ""HmacSHA256"");\r\n\r\n        try {\r\n            MACSigner signer = new MACSigner(secretKeySpec);\r\n\r\n            JWTClaimsSet.Builder claimsSetBuilder = new JWTClaimsSet.Builder();\r\n            parameters.getClaims().getClaims().forEach((key, value) ->\r\n                    claimsSetBuilder.claim(key, value instanceof Instant ? Date.from((Instant) value) : value)\r\n            );\r\n            JWTClaimsSet claimsSet = claimsSetBuilder.build();\r\n\r\n            JWSHeader header = new JWSHeader(JWSAlgorithm.HS256);\r\n\r\n            SignedJWT signedJWT = new SignedJWT(header, claimsSet);\r\n            signedJWT.sign(signer);\r\n\r\n            return Jwt.withTokenValue(signedJWT.serialize())\r\n                    .header(""alg"", header.getAlgorithm().getName())\r\n                    .subject(claimsSet.getSubject())\r\n                    .issuer(claimsSet.getIssuer())\r\n                    .claims(claims -> claims.putAll(claimsSet.getClaims()))\r\n                    .issuedAt(claimsSet.getIssueTime().toInstant())\r\n                    .expiresAt(claimsSet.getExpirationTime().toInstant())\r\n                    .build();\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(""Error while signing the JWT"", e);\r\n        }\r\n    };\r\n}\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.SecureRandom;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.crypto.engines.AESEngine;\r\nimport org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;\r\nimport org.bouncycastle.crypto.io.CipherOutputStream;\r\nimport org.bouncycastle.crypto.modes.CBCBlockCipher;\r\nimport org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\r\nimport org.bouncycastle.crypto.params.ParametersWithIV;\r\n\r\n...\r\n\r\nString inputPath = ""..."";\r\nString outputPath = ""..."";\r\nString passwordStr = ""..."";\r\n\r\n// Generate random 8 bytes salt\r\nSecureRandom random = new SecureRandom();\r\nbyte salt[] = new byte[8];\r\nrandom.nextBytes(salt);\r\n\r\n// Derive 32 bytes key (AES_256) and 16 bytes IV\r\nbyte[] password = passwordStr.getBytes(StandardCharsets.UTF_8);\r\nOpenSSLPBEParametersGenerator pbeGenerator = new OpenSSLPBEParametersGenerator(new MD5Digest()); // SHA256 as of v1.1.0 (if in OpenSSL the default digest is applied)\r\npbeGenerator.init(password, salt);\r\nParametersWithIV parameters = (ParametersWithIV) pbeGenerator.generateDerivedParameters(256, 128); // keySize, ivSize in bits\r\n\r\n// Encrypt with AES-256, CBC using streams\r\ntry (FileOutputStream fos = new FileOutputStream(outputPath)) {\r\n\r\n    // Apply OpenSSL format\r\n    fos.write(""Salted__"".getBytes(StandardCharsets.UTF_8));\r\n    fos.write(salt);\r\n\r\n    // Encrypt chunkwise (for large data)\r\n    PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESEngine()));\r\n    cipher.init(true, parameters);\r\n    try (FileInputStream fis = new FileInputStream(inputPath);\r\n         CipherOutputStream cos = new CipherOutputStream(fos, cipher)) {\r\n        int bytesRead = -1;\r\n        byte[] buffer = new byte[64 * 1024 * 1024]; // chunksize, e.g. 64 MiB\r\n        while ((bytesRead = fis.read(buffer)) != -1) {\r\n            cos.write(buffer, 0, bytesRead);\r\n        }    \r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"public User signin(UserLoginDTO loginDetails, HttpServletResponse response) {\r\n    try {\r\n        // Get the wallet ID and signed message from the body stored in the DTO\r\n        String publicWalletId = loginDetails.getPublicWalletId();\r\n        String message = loginDetails.getMessage();\r\n\r\n        // Find the nonce from the DB that was used to sign this message\r\n        User user = userRepository.findByPublicWalletId(publicWalletId);\r\n        String nonce = user.getNonce();\r\n\r\n        // Generate the HASH of the Nonce\r\n        byte[] nonceHash = Hash.sha3(nonce.getBytes()) // org.web3j.crypto.Hash\r\n\r\n        // Generate the Signature Data\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(message); // org.web3j.utils.Numeric\r\n        \r\n        byte v = (byte) ((signatureBytes[64] < 27) ? (signatureBytes[64] + 27) : signatureBytes[64]);\r\n        byte[] r = Arrays.copyOfRange(signatureBytes, 0, 32);\r\n        byte[] s = Arrays.copyOfRange(signatureBytes, 32, 64);\r\n        \r\n        SignatureData signatureData = new SignatureData(v, r, s); // org.web3j.crypto.Sign.SignatureData\r\n\r\n        // Generate the 4 possible Public Keys\r\n        List<String> recoveredKeys = new ArrayList<>();\r\n        for(int i = 0; i < 4; i++) {\r\n            BigInteger r = new BigInteger(1, signatureData.getR());\r\n            BigInteger s = new BigInteger(1, signatureData.getS());\r\n            ECDSASignature ecdsaSignature = new ECDSASignature(r, s);\r\n            BigInteger recoveredKey = Sign.recoverFromSignature((byte)i, ecdsaSignature, nonceHash);\r\n            if(recoveredKey != null) {\r\n                recoveredKeys.add(""0x"" + Keys.getAddressFromKey(recoveredKey)); // org.web3j.crypto.Keys\r\n            }\r\n        }\r\n\r\n        // Check if one of the generated Keys match the public wallet ID.\r\n        for(String recoveredKey : recoveredKeys) {\r\n            if(recoveredKey.equalsIgnoreCase(publicWalletId)) { \r\n                // Add Code here to create the JWT and add that to your HttpServletResponse. Not shown here.\r\n                return user;\r\n            }\r\n        }\r\n        throw new CustomException(""Message Sign Invalid"", HttpStatus.UNAUTHORIZED);\r\n    }\r\n    catch (Exception ex) {\r\n         // Custom Error Handling.\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\n\r\nimport java.io.IOException;\r\n\r\n@RestController\r\n@RequestMapping(""/sse"")\r\npublic class SseController {\r\n\r\n    @GetMapping(""/events"")\r\n    public SseEmitter handleSse() {\r\n        SseEmitter emitter = new SseEmitter();\r\n\r\n        // Asynchronous processing to send events\r\n        new Thread(() -> {\r\n            try {\r\n                for (int i = 0; i < 10; i++) {\r\n                    // Send events every 1 second\r\n                    emitter.send(SseEmitter.event().name(""message"").data(""Event "" + i));\r\n\r\n                    Thread.sleep(1000);\r\n                }\r\n                // Signal the end of the event stream\r\n                emitter.complete();\r\n            } catch (IOException | InterruptedException e) {\r\n                emitter.completeWithError(e);\r\n            }\r\n        }).start();\r\n\r\n        return emitter;\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"public class ShakyDataSource implements DataSource {\r\n    private final DataSource ds;\r\n    private AtomicLong getConnectionCallsCount = new AtomicLong(1);\r\n    \r\n    public ShakyDataSource(final DataSource ds) {\r\n        this.ds = ds;\r\n    }\r\n    \r\n    @Override\r\n    public Connection getConnection() throws SQLException {\r\n        final long newGetConnectionCallCount = getConnectionCallsCount.incrementAndGet();\r\n        \r\n        if ((newGetConnectionCallCount % 2) == 0) {\r\n            throw new SQLException(""Simulated connection failure"");\r\n        }\r\n        else {\r\n            return ds.getConnection();\r\n        }\r\n    }\r\n    \r\n    // All other methods of DataSource call corresponding methods of ds\r\n}\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport javax.sql.DataSource;\r\n\r\n[...]\r\n\r\n@Configuration\r\n@EnableConfigurationProperties\r\npublic class DbConfigClass {\r\n\r\n    [...]\r\n\r\n    @Bean(name = ""myDataSource"")\r\n    @ConfigurationProperties(prefix = ""com.mycompany.somedatabase"")\r\n    public DataSource dsSomeDataSource() {\r\n        if (SIMULATE_SHAKY_CONNECTION) {\r\n            LOGGER.error(""Don't do this in production!"");\r\n            return new ShakyDataSource(DataSourceBuilder.create().build());\r\n        }\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n    \r\n    [...]\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\ninterface ITask<T, R extends TaskResult<T>>{\r\n    R make();\r\n}\r\n\r\nclass TaskResult<T>{\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make(){\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make(){\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main <T>{\r\n\r\n    public static <T, R extends TaskResult<T>> List<R> run(List<ITask<T, R>> tasks){\r\n\r\n        List<R> results =  tasks\r\n                .stream()\r\n                .map(ITask::make)\r\n                .collect(Collectors.toList());\r\n\r\n        return results;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"private void loadHighlightedPositions() {\r\n    SharedPreferences sharedPreferences = getSharedPreferences(""MyPrefs"", MODE_PRIVATE);\r\n    String positionsString = sharedPreferences.getString(""highlightedPositions"", """");\r\n    if (!positionsString.isEmpty()) {\r\n        String[] positionsArray = positionsString.split("","");\r\n        for (String position : positionsArray) {\r\n            highlightedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n}\r\n\r\nprivate void saveHighlightedPositions() {\r\n    SharedPreferences sharedPreferences = getSharedPreferences(""MyPrefs"", MODE_PRIVATE);\r\n    SharedPreferences.Editor editor = sharedPreferences.edit();\r\n    StringBuilder positionsString = new StringBuilder();\r\n    for (int position : highlightedPositions) {\r\n        positionsString.append(position).append("","");\r\n    }\r\n    if (positionsString.length() > 0) {\r\n        positionsString.deleteCharAt(positionsString.length() - 1); // Remove the trailing comma\r\n    }\r\n    editor.putString(""highlightedPositions"", positionsString.toString());\r\n    editor.apply();\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"public class UsernamePasswordAuthFilter extends AbstractAuthenticationProcessingFilter {\r\n    \r\n  private final String END_POINT = ""/api/login"";\r\n  private static final ObjectMapper MAPPER = new ObjectMapper();\r\n\r\n  UsernamePasswordAuthFilter() {\r\n    super(END_POINT); \r\n  }\r\n\r\n  @Override\r\n  public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\r\n            throws AuthenticationException, IOException, ServletException;\r\n\r\n    CredentialsDto credentialsDto = MAPPER.readValue(request.getInputStream(), CredentialsDto.class);\r\n    String username = credentialsDto.getUsername();\r\n    String password = credentialsDto.getPassword();\r\n    \r\n    UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\r\n                password);\r\n    // Allow subclasses to set the ""details"" property\r\n    setDetails(request, authRequest);\r\n    return this.getAuthenticationManager().authenticate(authRequest);\r\n  }\r\n}\r\n\r\npublic class UsernamePasswordAuthFilter extends AbstractAuthenticationProcessingFilter {\r\n    \r\n  private final String END_POINT = ""/api/login"";\r\n  private static final ObjectMapper MAPPER = new ObjectMapper();\r\n\r\n  UsernamePasswordAuthFilter() {\r\n    super(END_POINT); \r\n  }\r\n\r\n  @Override\r\n  public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\r\n            throws AuthenticationException, IOException, ServletException;\r\n\r\n    CredentialsDto credentialsDto = MAPPER.readValue(request.getInputStream(), CredentialsDto.class);   \r\n    // Allow subclasses to set the ""details"" property\r\n    setDetails(request, credentialsDto);\r\n    return this.getAuthenticationManager().authenticate(credentialsDto);\r\n  }\r\n}\r\n\r\n@Component\r\n@AllArgsConstructor\r\npublic class CustomAuthenticationProvider implements AuthenticationProvider {\r\n\r\n    private final AuthenticationService authenticationService;\r\n    \r\n    @Override\r\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {       \r\n        UserDto userDto = null;\r\n        if(authentication instanceof CredentialsDto) {\r\n          userDto = authenticationService.authenticate((CredentialsDto) authentication);\r\n                \r\n        }\r\n        \r\n        if(userDto==null)return null;       \r\n        return new UsernamePasswordAuthenticationToken(userDto.getUsername(), \r\n                null,\r\n                List.of(new SimpleGrantedAuthority(userDto.getRole())\r\n        )); \r\n    }\r\n\r\n    @Override\r\n    public boolean supports(Class<?> authentication) {    \r\n        return CredentialsDto.class.isAssignableFrom(authentication);\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"@Service\r\n@RequiredArgsConstructor\r\npublic class UserDetailsServiceImpl implements UserDetailsService {\r\n\r\n    private final UserTenantRepository userTenantRepository;\r\n\r\n    @Override\r\n    @Transactional\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n\r\n        // Getting subdomain from request attributes\r\n        HttpServletRequest request =\r\n                ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes()))\r\n                        .getRequest();\r\n\r\n        String serverName = request.getServerName();\r\n        String subdomain = serverName.substring(0, serverName.indexOf("".""));\r\n        UserTenant userTenant = userTenantRepository.findByUserAndSubdomain(username, subdomain)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\r\n                        ""UserTenant Not Found with username: "" + username + "" and "" + subdomain));\r\n\r\n        // Getting Rules from the UserTenant\r\n        List<GrantedAuthority> authorities = userTenant.getRoles().stream()\r\n                .map(role -> new SimpleGrantedAuthority(role.getName().name()))\r\n                .collect(Collectors.toList());\r\n\r\n        return new UserDetailsImpl(\r\n                userTenant.getUser().getId(),\r\n                userTenant.getUser().getUsername(),\r\n                userTenant.getUser().getPassword(),\r\n                authorities\r\n        );\r\n    }\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"import dis\r\n\r\nIn [24]: dis.dis(""'time'=='time'"")\r\n  1           0 LOAD_CONST               0 ('time')  # <-- same object (0)\r\n              2 LOAD_CONST               0 ('time')  # <-- same object (0)\r\n              4 COMPARE_OP               2 (==)\r\n              6 RETURN_VALUE\r\n\r\nIn [25]: dis.dis(""'time'=='1234'"")\r\n  1           0 LOAD_CONST               0 ('time')  # <-- different object (0)\r\n              2 LOAD_CONST               1 ('1234')  # <-- different object (1)\r\n              4 COMPARE_OP               2 (==)\r\n              6 RETURN_VALUE\r\n\r\nIn [26]: timeit.timeit(""x='time'; y='time'; x==y"", number=1000000)\r\nOut[26]: 0.0745926329982467\r\n\r\nIn [27]: timeit.timeit(""x='time'; y='1234'; x==y"", number=1000000)\r\nOut[27]: 0.10328884399496019\r\n\r\nint\r\n_PyUnicode_Equal(PyObject *str1, PyObject *str2)\r\n{\r\n    assert(PyUnicode_CheckExact(str1));\r\n    assert(PyUnicode_CheckExact(str2));\r\n    if (str1 == str2) {                  // <-- Here\r\n        return 1;\r\n    }\r\n    if (PyUnicode_READY(str1) || PyUnicode_READY(str2)) {\r\n        return -1;\r\n    }\r\n    return unicode_compare_eq(str1, str2);\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"from typing import Annotated, Literal, TypeVar\r\nimport numpy as np\r\nimport numpy.typing as npt\r\n\r\n\r\nDType = TypeVar(""DType"", bound=np.generic)\r\n\r\nArray4 = Annotated[npt.NDArray[DType], Literal[4]]\r\nArray3x3 = Annotated[npt.NDArray[DType], Literal[3, 3]]\r\nArrayNxNx3 = Annotated[npt.NDArray[DType], Literal[""N"", ""N"", 3]]\r\n\r\nimport numpy as np\r\nfrom my_types import Array4\r\n\r\n\r\ndef foo(arr: Array4[np.int32]):\r\n    assert arr.shape == (4,)\r\n\r\ndef assert_match(arr, array_type):\r\n    hinted_shape = array_type.__metadata__[0].__args__\r\n    hinted_dtype_type = array_type.__args__[0].__args__[1]\r\n    hinted_dtype = hinted_dtype_type.__args__[0]\r\n    assert np.issubdtype(arr.dtype, hinted_dtype), ""DType does not match""\r\n    assert arr.shape == hinted_shape, ""Shape does not match""\r\n\r\n\r\nassert_match(some_array, Array4[np.int32])\r\n\r\nfrom nptyping import NDArray, Shape, Int32\r\n\r\n\r\ndef foo(arr: NDArray[Shape[""4""], Int32]):\r\n    assert isinstance(arr, NDArray[Shape[""4""], Int32])\r\n\r\nfrom beartype import beartype\r\nfrom beartype.vale import Is\r\nfrom typing import Annotated\r\nimport numpy as np\r\n\r\n\r\nInt32Array4 = Annotated[np.ndarray, Is[lambda array:\r\n    array.shape == (4,) and np.issubdtype(array.dtype, np.int32)]]\r\nInt32Array3x3 = Annotated[np.ndarray, Is[lambda array:\r\n    array.shape == (3,3) and np.issubdtype(array.dtype, np.int32)]]\r\n\r\nimport numpy as np\r\nfrom beartype import beartype\r\nfrom my_types import Int32Array4 \r\n\r\n\r\n@beartype\r\ndef foo(arr: Int32Array4):\r\n    ...  # Runtime type checked by beartype.\r\n\r\nfrom nptyping import NDArray, Shape, Int32\r\nfrom beartype import beartype\r\n\r\n\r\n@beartype\r\ndef foo(arr: NDArray[Shape[""4""], Int32]):\r\n    ...  # Runtime type checked by beartype."
1,1,misclassified_in_Test_2.csv.csv,"from starlette.concurrency import iterate_in_threadpool\r\n\r\n@app.middleware(""http"")\r\nasync def some_middleware(request: Request, call_next):\r\n    response = await call_next(request)\r\n    response_body = [chunk async for chunk in response.body_iterator]\r\n    response.body_iterator = iterate_in_threadpool(iter(response_body))\r\n    print(f""response_body={response_body[0].decode()}"")\r\n    return response\r\n\r\n@app.middleware(""http"")\r\nasync def some_middleware(request: Request, call_next):\r\n    response = await call_next(request)\r\n    chunks = []\r\n    async for chunk in response.body_iterator:\r\n        chunks.append(chunk)\r\n    response_body = b''.join(chunks)\r\n    print(f""response_body={response_body.decode()}"")\r\n    return Response(content=response_body, status_code=response.status_code, \r\n        headers=dict(response.headers), media_type=response.media_type)"
1,1,misclassified_in_Test_2.csv.csv,def nrng_gen():\r\n    yield from range(10)\r\n\r\nnrng = nrng_gen()\r\n\r\nnrng_func = lambda: next(nrng)\r\n\r\nfor i in range(10):\r\n    print(nrng_func())\r\n\r\nclass NRNG:\r\n    def __init__(self):\r\n        self.numbers = range(10)\r\n        self.state = -1\r\n    def __call__(self):\r\n        self.state += 1\r\n        return self.numbers[self.state]\r\n        \r\nnrng = NRNG()\r\n\r\n\r\nfor i in range(10):\r\n    print(nrng())
1,1,misclassified_in_Test_2.csv.csv,"query = select(Payment)\r\n\r\nresults = sess.execute(query).all()\r\nprint(results)  # [(Payment(id=1),), (Payment(id=2),)]\r\nprint(type(results[0]))  # <class 'sqlalchemy.engine.row.Row'>\r\n\r\nresults = sess.scalars(query).all()\r\nprint(results)  # [Payment(id=1), Payment(id=2)]\r\nprint(type(results[0]))  # <class '__main__.Payment'>\r\n\r\nquery = select(\r\n    Payment.id,\r\n    Payment.organization_id,\r\n    Payment.payment_type,\r\n)\r\n\r\nresults = sess.scalars(query).all()\r\nprint(results)  # [1, 2]\r\n\r\nresults = sess.execute(query).all()\r\nprint(results)  # [(1, 123, None), (2, 234, None)]"
1,1,misclassified_in_Test_2.csv.csv,"res = [r1.result(), r2.result()]\r\n\r\nres = await asyncio.gather(r1, r2)\r\n\r\nclass GatheringTaskGroup(asyncio.TaskGroup):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.__tasks = []\r\n\r\n    def create_task(self, coro, *, name=None, context=None):\r\n        task = super().create_task(coro, name=name, context=context)\r\n        self.__tasks.append(task)\r\n        return task\r\n\r\n    def results(self):\r\n        return [task.result() for task in self.__tasks]\r\n\r\nasync def foo(): return 1\r\nasync def bar(): return 2\r\nasync with GatheringTaskGroup() as tg:\r\n    task1 = tg.create_task(foo())\r\n    task2 = tg.create_task(bar())\r\nprint(tg.results())"
1,1,misclassified_in_Test_2.csv.csv,"{\r\n    ""name"": ""Python: Current File (Integrated Terminal)"",\r\n    ""type"": ""python"",\r\n    ""request"": ""launch"",\r\n    ""program"": ""${file}"",\r\n    ""console"": ""integratedTerminal"",\r\n    ""purpose"": [""debug-test""], \r\n    ""redirectOutput"": true,\r\n    ""env"": {""PYTHONPATH"": ""${workspaceRoot}""}\r\n}\r\n\r\ndef test_disabling_capturing(capsys):\r\n    print('this output is captured')\r\n    with capsys.disabled():\r\n        print('output not captured, going directly to sys.stdout')\r\n    print('this output is also captured')"
1,1,misclassified_in_Test_2.csv.csv,"from sqlmodel import SQLModel, Field\r\n\r\nfrom .user import User\r\n\r\nclass Item(SQLModel):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\nUser.update_forward_refs(Item=Item)\r\n\r\nfrom fastapi import FastAPI\r\n\r\nfrom .user import User\r\nfrom . import item\r\n\r\napi = FastAPI()\r\n\r\n@api.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n\r\nfrom .item import Item"
1,1,misclassified_in_Test_2.csv.csv,"import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\npx.bar(df, x=list(df[""names""]), y=list(df[""random""]))\r\n\r\nimport polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({""a"":[1,2,3,4,5], ""b"":[1,4,9,16,25]})\r\n\r\npx.line(x=df[""a""], y=df[""b""])"
1,1,misclassified_in_Test_2.csv.csv,"Name: langchain\r\nVersion: 0.0.220\r\nSummary: Building applications with LLMs through composability\r\nHome-page: https://www.github.com/hwchase17/langchain\r\nAuthor: \r\nAuthor-email: \r\nLicense: MIT\r\nLocation: /home/anaconda3/lib/python3.9/site-packages\r\nRequires: aiohttp, async-timeout, dataclasses-json, langchainplus-sdk, numexpr, numpy, openapi-schema-pydantic, pydantic, PyYAML, requests, SQLAlchemy, tenacity\r\nRequired-by: jupyter_ai, jupyter_ai_magics\r\n\r\npython3.10 -m pip install langchain\r\n\r\npython3.10 -m pip show langchain\r\n\r\nName: langchain\r\nVersion: 0.0.264\r\nSummary: Building applications with LLMs through composability\r\nHome-page: https://www.github.com/hwchase17/langchain\r\nAuthor: \r\nAuthor-email: \r\nLicense: MIT\r\nLocation: /home/.local/lib/python3.10/site-packages\r\nRequires: aiohttp, async-timeout, dataclasses-json, langsmith, numexpr, numpy, openapi-schema-pydantic, pydantic, PyYAML, requests, SQLAlchemy, tenacity\r\nRequired-by:"
1,1,misclassified_in_Test_2.csv.csv,"es = Elasticsearch(\r\n    [\r\n        {'host': 'localhost', 'port': '9200', ""scheme"": ""https""}\r\n    ],\r\n        basic_auth=('elastic', '<password>')\r\n)\r\n\r\nes = Elasticsearch(\r\n    [\r\n        {\r\n            'host':str(es_host),\r\n            'port':str(es_port),\r\n            'scheme': ""https""\r\n        }\r\n    ], \r\n    http_auth=(str(es_username), str(es_password))\r\n)"
1,1,misclassified_in_Test_2.csv.csv,"{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: Current File with arguments"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [\r\n        ""--dir"",\r\n        ""/some/fixed/dir/${input:enterDir}""\r\n      ]\r\n    }\r\n  ],\r\n  ""inputs"": [\r\n    {\r\n      ""id"": ""enterDir"",\r\n      ""type"": ""promptString"",\r\n      ""description"": ""Subdirectory to process"",\r\n      ""default"": ""data-0034""\r\n    }\r\n  ]\r\n}\r\n\r\n{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: Current File with arguments"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [\r\n        ""--dir"",\r\n        ""${input:pickDir}""\r\n      ]\r\n    }\r\n  ],\r\n  ""inputs"": [\r\n    {\r\n      ""id"": ""pickDir"",\r\n      ""type"": ""command"",\r\n      ""command"": ""extension.commandvariable.file.pickFile"",\r\n      ""args"": {\r\n        ""include"": ""**/*"",\r\n        ""display"": ""fileName"",\r\n        ""description"": ""Subdirectory to process"",\r\n        ""showDirs"": true,\r\n        ""fromFolder"": { ""fixed"": ""/some/fixed/dir"" }\r\n      }\r\n    }\r\n  ]\r\n}"
1,1,misclassified_in_Test_2.csv.csv,"def convert_tris_to_quads(obj_path, export_folder):\r\n    try:\r\n        filename = os.path.basename(obj_path).split('.')[0]\r\n        logging.info(f""Importing {obj_path}"")\r\n\r\n        bpy.ops.object.select_all(action='DESELECT')\r\n        bpy.ops.object.select_by_type(type='MESH')\r\n        bpy.ops.object.delete()\r\n    \r\n        bpy.ops.import_scene.obj(filepath=obj_path)\r\n        print(""current objects in the scene: "", [obj for obj in bpy.context.scene.objects])\r\n        for obj in bpy.context.selected_objects:\r\n            bpy.context.view_layer.objects.active = obj\r\n            \r\n        logging.info(""Converting mesh"")\r\n        bpy.ops.object.mode_set(mode='EDIT')\r\n        bpy.ops.mesh.select_all(action='SELECT')\r\n        bpy.ops.mesh.tris_convert_to_quads()\r\n        bpy.ops.object.mode_set(mode='OBJECT')\r\n\r\n        # Export to OBJ\r\n        obj_export_path = export_folder + filename + '_quad.obj'\r\n        logging.info(f""Exporting OBJ to {obj_export_path}"")\r\n        bpy.ops.export_scene.obj(filepath=obj_export_path, use_selection=True)\r\n\r\n        # Export to STL\r\n        stl_export_path = export_folder + filename + '_quad.stl'\r\n        logging.info(f""Exporting STL to {stl_export_path}"")\r\n        bpy.ops.export_mesh.stl(filepath=stl_export_path, use_selection=True)\r\n\r\n    except Exception as e:\r\n        logging.error(f""Error processing {obj_path}: {e}"")\r\n        return False"
1,1,misclassified_in_Test_2.csv.csv,"import re\r\nfrom io import StringIO\r\nfrom itertools import batched\r\n\r\nfile = StringIO('''a\t  b c\td _ e\r\na   b c\td _ e\r\n   a   b c\td _ e\r\na   b_c\td _ e\t\r\nabcd''')\r\n\r\nfor line in file:\r\n    print(list(batched(re.split(r""([\s_]+)"", line.rstrip('\r\n')) + [''], 2)))\r\n\r\n[('a', '\t  '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('a', '   '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('', '   '), ('a', '   '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('a', '   '), ('b', '_'), ('c', '\t'), ('d', ' _ '), ('e', '\t'), ('', '')]\r\n[('abcd', '')]"
1,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass Item(BaseModel):\r\n    process_id: int\r\n\r\n\r\n@app.post(""/do_something"")\r\nasync def do_something(item: Item):\r\n    return item\r\n\r\ndef test_do_something():\r\n    response = client.post(""/do_something"", json={""process_id"": 16})\r\n    return response.json()\r\n\r\n@app.post(""/do_something"")\r\nasync def do_something(process_id: int):\r\n    return {""process_id"": process_id}\r\n\r\ndef test_do_something():\r\n    response = client.post(""/do_something"", params={""process_id"": 16})\r\n    return response.json()\r\n\r\n@app.post(""/do_something"")\r\ndef do_something(process_id: int = Body(..., embed=True)):\r\n    return process_id"
1,1,misclassified_in_Test_2.csv.csv,"def mirror(a):\r\n    m, n = a.shape\r\n    if m == n:\r\n        return a.T.copy()\r\n    if m > n:\r\n        return mirror(a.T).T\r\n\r\n    # Shear\r\n    v = a.flatten()\r\n    w = v[:-m].reshape((m, n-1))\r\n    \r\n    # Flip the parallelogram\r\n    w[:, m-1:] = w[::-1, m-1:]\r\n\r\n    # Flip the triangles\r\n    t = np.vstack((w[:, :m-1].reshape((m-1, m)), v[-m:]))\r\n    t = t.T\r\n    w[:, :m-1] = t[:-1].reshape((m, m-1))\r\n\r\n    # Write flipped parts back and unshear\r\n    v[:-m] = w.ravel()\r\n    v[-m:] = t[-1]\r\n    return v.reshape((m, n))"
1,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI, Request, status\r\nfrom fastapi.responses import RedirectResponse, HTMLResponse\r\nfrom typing import Optional\r\nimport urllib\r\n\r\napp = FastAPI()\r\n\r\nclass CustomURLProcessor:\r\n    def __init__(self):  \r\n        self.path = """" \r\n        self.request = None\r\n\r\n    def url_for(self, request: Request, name: str, **params: str):\r\n        self.path = request.url_for(name, **params)\r\n        self.request = request\r\n        return self\r\n    \r\n    def include_query_params(self, **params: str):\r\n        parsed = list(urllib.parse.urlparse(self.path))\r\n        parsed[4] = urllib.parse.urlencode(params)\r\n        return urllib.parse.urlunparse(parsed)\r\n        \r\n\r\n@app.get('/', response_class=HTMLResponse)\r\ndef event_msg(request: Request, msg: Optional[str] = None):\r\n    if msg:\r\n        html_content = """"""\r\n        <html>\r\n           <head>\r\n              <script>\r\n                 window.history.pushState('', '', ""/"");\r\n              </script>\r\n           </head>\r\n           <body>\r\n              <h1>"""""" + msg + """"""</h1>\r\n           </body>\r\n        </html>\r\n        """"""\r\n        return HTMLResponse(content=html_content, status_code=200)\r\n    else:\r\n        html_content = """"""\r\n        <html>\r\n           <body>\r\n              <h1>Create an event</h1>\r\n              <form method=""POST"" action=""/"">\r\n                 <input type=""submit"" value=""Create Event"">\r\n              </form>\r\n           </body>\r\n        </html>\r\n        """"""\r\n        return HTMLResponse(content=html_content, status_code=200)\r\n\r\n@app.post('/')\r\ndef event_create(request: Request):\r\n    redirect_url = CustomURLProcessor().url_for(request, 'event_msg').include_query_params(msg=""Succesfully created!"")\r\n    return RedirectResponse(redirect_url, status_code=status.HTTP_303_SEE_OTHER)\r\n\r\nfrom starlette.datastructures import URL\r\n\r\nredirect_url = URL(request.url_for('event_msg')).include_query_params(msg=""Succesfully created!"")\r\n\r\nredirect_url = request.url_for('event_msg').include_query_params(msg=""Succesfully created!"")"
1,1,misclassified_in_Test_2.csv.csv,"def glimpse(df):\r\n    print(f""Rows: {df.shape[0]}"")\r\n    print(f""Columns: {df.shape[1]}"")\r\n    for col in df.columns:\r\n        print(f""$ {col} <{df[col].dtype}> {df[col].head().values}"")\r\n\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(\r\n    {""column_one"": [""A"", ""B"", ""C"", ""D""], ""column_two"": [1, 2, 3, 4]}\r\n)\r\n\r\nglimpse(df)\r\n\r\n# Output\r\nRows: 4\r\nColumns: 2\r\n$ column_one <object> ['A' 'B' 'C' 'D']\r\n$ column_two <int64> [1 2 3 4]"
1,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI, Request, Depends, HTTPException\r\nfrom starlette.status import HTTP_403_FORBIDDEN\r\nfrom fastapi.security.api_key import APIKeyHeader\r\nfrom fastapi import Security\r\nfrom typing import Optional\r\n\r\nAPI_KEY = 'some-api-key'\r\nAPI_KEY_NAME = 'X-API-KEY'\r\nsafe_clients = ['127.0.0.1']\r\n\r\n\r\nclass MyAPIKeyHeader(APIKeyHeader):\r\n    async def __call__(self, request: Request) -> Optional[str]:\r\n        if request.client.host in safe_clients:\r\n            api_key = API_KEY\r\n        else:\r\n            api_key = request.headers.get(self.model.name)\r\n            if not api_key:\r\n                if self.auto_error:\r\n                    raise HTTPException(\r\n                        status_code=HTTP_403_FORBIDDEN, detail='Not authenticated'\r\n                    )\r\n                else:\r\n                    return None\r\n\r\n        return api_key\r\n\r\n\r\napi_key_header_auth = MyAPIKeyHeader(name=API_KEY_NAME)\r\n\r\n\r\nasync def check_api_key(request: Request, api_key: str = Security(api_key_header_auth)):\r\n    if api_key != API_KEY:\r\n        raise HTTPException(status_code=401, detail='Invalid API Key')\r\n\r\n \r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.get('/')\r\ndef main(request: Request):\r\n    return request.client.host\r\n\r\nfrom fastapi import FastAPI, Request, Security, Depends, HTTPException\r\nfrom fastapi.security.api_key import APIKeyHeader\r\n\r\n\r\n# List of valid API keys\r\nAPI_KEYS = [\r\n    'z77xQYZWROmI4fY4',\r\n    'FXhO4i3bLA1WIsvR'\r\n]\r\nAPI_KEY_NAME = 'X-API-KEY'\r\nsafe_clients = ['127.0.0.1']\r\napi_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)\r\n\r\n\r\nasync def check_api_key(request: Request, api_key: str = Security(api_key_header)):\r\n    if api_key not in API_KEYS and request.client.host not in safe_clients:\r\n        raise HTTPException(status_code=401, detail='Invalid or missing API Key')\r\n\r\n \r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.get('/')\r\ndef main(request: Request):\r\n    return request.client.host\r\n\r\nfrom fastapi import Response\r\n\r\n# ... rest of the code is the same as above\r\n\r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.middleware(""http"")\r\nasync def remove_auth_btn(request: Request, call_next):\r\n    response = await call_next(request)\r\n    if request.url.path == '/openapi.json' and request.client.host in safe_clients:\r\n        response_body = [section async for section in response.body_iterator]\r\n        resp_str = response_body[0].decode()  # convert ""response_body"" bytes into string\r\n        resp_dict = json.loads(resp_str)  # convert ""resp_str"" into dict\r\n        del resp_dict['components']['securitySchemes']  # remove securitySchemes\r\n        resp_str = json.dumps(resp_dict)  # convert ""resp_dict"" back to str\r\n        return Response(content=resp_str, status_code=response.status_code, media_type=response.media_type)\r\n    \r\n    return response"
1,1,misclassified_in_Test_2.csv.csv,"class CustomDate:\r\n    POTENTIAL_FORMATS = []\r\n\r\n    @classmethod\r\n    def validate(cls, field_value, info):\r\n        if type(field_value) is date:\r\n            return field_value\r\n        return to_date(info.field_name, field_value, cls.POTENTIAL_FORMATS, return_str=False)\r\n\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(cls, source, handler) -> core_schema.CoreSchema:\r\n        return core_schema.with_info_before_validator_function(\r\n            cls.validate, handler(date), field_name=handler.field_name\r\n        )\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import Annotated, List, Any, Callable\r\n\r\n\r\nfrom pydantic import ValidationError, BaseModel, Field, BeforeValidator, field_validator, GetCoreSchemaHandler\r\nfrom pydantic_core import core_schema, CoreSchema\r\n\r\n\r\ndef fn(v: str, info: core_schema.ValidationInfo, *args, **kwargs) -> str:\r\n    try:\r\n        print(f'Validating {info.field_name}')\r\n        return info.data['use_this']\r\n    except AttributeError as err:\r\n        return 'No data'\r\n\r\n\r\nclass AsFieldB4Method(str):\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(\r\n        cls, source_type: Any, handler: GetCoreSchemaHandler, *args, **kwargs\r\n    ) -> CoreSchema:\r\n        return core_schema.field_before_validator_function(fn, 'not_the_real_field_name', core_schema.str_schema())\r\n\r\n\r\nclass MyModel(BaseModel):\r\n    use_this: str\r\n    core_schema_field_b4_method: AsFieldB4Method  # Partially works"
1,1,misclassified_in_Test_2.csv.csv,"--ignore-requires-python    Ignore the Requires-Python information.\r\n\r\nfrom setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""foobar"",\r\n    version=""1.0"",\r\n    packages=find_packages(),\r\n    python_requires=""<3.7""\r\n)\r\n\r\n$ pip install .\r\nProcessing /home/vvvvv/75726452\r\nERROR: Package 'foobar' requires a different Python: 3.7.11 not in '<3.7'\r\n\r\n$ pip install . --ignore-requires-python\r\nProcessing /home/vvvvv/75726452\r\nInstalling collected packages: foobar\r\n    Running setup.py install for foobar ... done\r\nSuccessfully installed foobar-1.0"
1,1,misclassified_in_Test_2.csv.csv,"from collections import namedtuple\r\n\r\nPoint = namedtuple(""Point"", [""x"", ""y""])\r\n\r\np = Point(4, 5)\r\n\r\nx = p.x\r\ny = p.y\r\n\r\nxy = p  # xy = tuple(p) not necessary since namedtuple is already a tuple\r\n\r\nfrom dataclasses import dataclass, astuple\r\n\r\n@dataclass\r\nclass Point:\r\n    x: int\r\n    y: int\r\n    \r\np = Point(4, 5)\r\n\r\nx = p.x\r\ny = p.y\r\n\r\nxy = astuple(p)"
1,1,misclassified_in_Test_2.csv.csv,"O(x_size * (y_size + z_size))\r\n\r\nimport numba as nb\r\nimport numpy as np\r\n\r\n# Fill the missing values in the value-array if there is not enough values (e.g. pretty large z_size)\r\n# (untested)\r\n@nb.njit('(float64[::1], uint16[::1], int64)')\r\ndef fill_missing_values(all_val, all_pos, z_size):\r\n    i = 0\r\n    while i < z_size:\r\n        # If there is a missing value\r\n        if all_pos[i] == 0xFFFF:\r\n            j = i\r\n            while j < z_size and all_pos[j] == 0xFFFF:\r\n                j += 1\r\n            if i == 0:\r\n                # Fill the hole based on 1 value (lower bound)\r\n                assert j+1 < z_size and all_pos[j] == 0xFFFF and all_pos[j] != 0xFFFF\r\n                for i2 in range(i, j):\r\n                    all_val[i2] = all_val[j+1]\r\n                    all_pos[i2] = all_pos[j+1]\r\n            elif j == z_size:\r\n                # Fill the hole based on 1 value (upper bound)\r\n                assert i-1 >= 0 and all_pos[i-1] != 0xFFFF and all_pos[i] == 0xFFFF\r\n                for i2 in range(i, j):\r\n                    all_val[i2] = all_val[i-1]\r\n                    all_pos[i2] = all_pos[i-1]\r\n            else:\r\n                assert i-1 >= 0 and j < z_size and all_pos[i-1] != 0xFFFF and all_pos[j] != 0xFFFF\r\n                lower_val = all_val[i-1]\r\n                lower_pos = all_pos[i-1]\r\n                upper_val = all_val[j]\r\n                upper_pos = all_pos[j]\r\n                # Fill the hole based on 2 values\r\n                for i2 in range(i, j):\r\n                    if np.abs(lower_val - i2) < np.abs(upper_val - i2):\r\n                        all_val[i2] = lower_val\r\n                        all_pos[i2] = lower_pos\r\n                    else:\r\n                        all_val[i2] = upper_val\r\n                        all_pos[i2] = upper_pos\r\n            i = j\r\n        i += 1\r\n\r\n# Correct values in very pathological cases where z_size is big so there are not enough \r\n# values added to the value-array causing some values of the value-array to be incorrect.\r\n# The number of `while` iteration should be always <= 3 in practice\r\n@nb.njit('(float64[::1], uint16[::1], int64)')\r\ndef correct_values(all_val, all_pos, z_size):\r\n    while True:\r\n        stop = True\r\n        for i in range(0, z_size-1):\r\n            current = np.abs(all_val[i] - i)\r\n            if np.abs(all_val[i+1] - i) < current:\r\n                all_val[i] = all_val[i+1]\r\n                all_pos[i] = all_pos[i+1]\r\n                stop = False\r\n        for i in range(1, z_size):\r\n            current = np.abs(all_val[i] - i)\r\n            if np.abs(all_val[i-1] - i) < current:\r\n                all_val[i] = all_val[i-1]\r\n                all_pos[i] = all_pos[i-1]\r\n                stop = False\r\n        if stop:\r\n            break\r\n\r\n@nb.njit('(float64[:,::1], int64)', parallel=True)\r\ndef compute_fastest(z_coordinates, z_size):\r\n    x_size, y_size = z_coordinates.shape\r\n    assert y_size >= 2 and z_size >= 2\r\n    y_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for x in nb.prange(x_size):\r\n        all_pos = np.full(z_size, 0xFFFF, dtype=np.uint16)\r\n        all_val = np.full(z_size, np.inf, dtype=np.float64)\r\n        for y in range(0, y_size):\r\n            val = z_coordinates[x, y]\r\n            #assert not np.isnan(val)\r\n            if val < 0: # Lower bound\r\n                i = 0\r\n                if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                    all_val[i] = val\r\n                    all_pos[i] = y\r\n            elif val >= z_size: # Upper bound\r\n                i = z_size - 1\r\n                if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                    all_val[i] = val\r\n                    all_pos[i] = y\r\n            else: # Inside the array of values\r\n                offset = np.int32(val)\r\n                for i in range(max(offset-1, 0), min(offset+2, z_size)):\r\n                    if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                        all_val[i] = val\r\n                        all_pos[i] = y\r\n        fill_missing_values(all_val, all_pos, z_size)\r\n        correct_values(all_val, all_pos, z_size)\r\n        for i in range(0, z_size):\r\n            y_coordinates[x, i] = all_pos[i]\r\n    return y_coordinates\r\n\r\nNaive fully vectorized code in the question:   113000 ms  (slow due to swapping)\r\nNaive loop in the question:                      8460 ms\r\nZLi's implementation:                            1964 ms\r\nNaive Numba parallel code with loops:             402 ms\r\nPaulS' implementation:                            262 ms\r\nThis Numba code:                                   12 ms  <----------"
1,1,misclassified_in_Test_2.csv.csv,"from transformers import AutoTokenizer, AutoModelForSequenceClassification\r\n\r\ntokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\r\nmodel = AutoModelForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\r\n\r\n\r\ntext = ['hello this is a test',\r\n 'that transforms a list of sentences',\r\n 'into a list of list of sentences',\r\n 'in order to emulate, in this case, two batches of the same lenght',\r\n 'to be tokenized by the hf tokenizer for the defined model']\r\n\r\nclassifier(text, batch_size=2, truncation=""only_first"")\r\n\r\n[{'label': 'NEGATIVE', 'score': 0.9379090666770935},\r\n {'label': 'POSITIVE', 'score': 0.9990271329879761},\r\n {'label': 'NEGATIVE', 'score': 0.9726701378822327},\r\n {'label': 'NEGATIVE', 'score': 0.9965035915374756},\r\n {'label': 'NEGATIVE', 'score': 0.9913086891174316}]\r\n\r\nclassifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer)\r\ntype(classifier)\r\n\r\nfrom transformers import TextClassificationPipeline\r\n\r\nclass MarioThePlumber(TextClassificationPipeline):\r\n    def postprocess(self, model_outputs):\r\n        best_class = model_outputs[""logits""]\r\n        return best_class\r\n\r\npipe = MarioThePlumber(model=model, tokenizer=tokenizer)\r\n\r\npipe(text, batch_size=2, truncation=""only_first"")\r\n\r\n[tensor([[ 1.5094, -1.2056]]),\r\n tensor([[-3.4114,  3.5229]]),\r\n tensor([[ 1.8835, -1.6886]]),\r\n tensor([[ 3.0780, -2.5745]]),\r\n tensor([[ 2.5383, -2.1984]])]"
1,1,misclassified_in_Test_2.csv.csv,"from contextlib import asynccontextmanager\r\n\r\n...\r\n\r\nmain_app_lifespan = app.router.lifespan_context\r\n\r\n@asynccontextmanager\r\nasync def lifespan_wrapper(app):\r\n    print(""sub startup"")\r\n    async with main_app_lifespan(app) as maybe_state:\r\n        yield maybe_state\r\n    print(""sub shutdown"")\r\n\r\napp.router.lifespan_context = lifespan_wrapper\r\n\r\nINFO:     Waiting for application startup.\r\nsub startup\r\nstartup\r\nINFO:     Application startup complete.\r\n...\r\nINFO:     Shutting down\r\nINFO:     Waiting for application shutdown.\r\nshutdown\r\nsub shutdown\r\nINFO:     Application shutdown complete."
1,1,misclassified_in_Test_2.csv.csv,"# my_app.modules.box.schemas.py\r\nfrom pydantic import BaseModel\r\nfrom my_app.modules.toy.schemas import ToyResponse\r\n\r\nclass BoxResponse(BaseModel):\r\n    id: int\r\n    toys: list[""ToyResponse""] # Type check not required here since this is the parent class\r\n\r\n# my_app.modules.toy.schemas.py\r\nfrom typing import TYPE_CHECKING\r\nfrom pydantic import BaseModel\r\n\r\nif TYPE_CHECKING:\r\n    from my_app.modules.box.schemas import BoxResponse\r\n\r\nclass ToyResponse(BaseModel):\r\n    id: int\r\n    if TYPE_CHECKING:\r\n        box: ""BoxResponse""\r\n    else:\r\n        box"
1,1,misclassified_in_Test_2.csv.csv,"import re\r\nimport pandas as pd\r\n\r\ntext = """"""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|  \r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n""""""\r\n\r\npattern = r""\| ([\w\s]+) \| ([\w\s]+) \| ([\w\s]+) \|""\r\n\r\n# Use the findall function to extract all rows that match the pattern\r\nmatches = re.findall(pattern, text)\r\n\r\n# Extract the header and data rows\r\nheader = matches[0]\r\ndata = matches[1:]\r\n\r\n# Create a pandas DataFrame using the extracted header and data rows\r\ndf = pd.DataFrame(data, columns=header)\r\n\r\n# Optionally, convert numerical columns to appropriate types\r\ndf['Some Number'] = df['Some Number'].astype(int)\r\n\r\nprint(df)"
1,1,misclassified_in_Test_2.csv.csv,"from fastapi import FastAPI, Request\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.get('/{_:path}')\r\nasync def pred_image(request: Request):\r\n    url = request.url.path[1:] if not request.url.query else request.url.path[1:] + ""?"" + request.url.query\r\n    return {'url': url}\r\n\r\n@app.get('/{full_path:path}')\r\nasync def pred_image(full_path: str, request: Request):\r\n    url = full_path if not request.url.query else full_path + ""?"" + request.url.query\r\n    return {'url': url}\r\n\r\n@app.get('/{_:path}')\r\nasync def pred_image(request: Request):\r\n    url = request.url._url.split('/', 3)[-1]\r\n    return {'url': url}\r\n\r\nimport requests\r\nfrom urllib.parse import quote \r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\npath_param = 'https://www.google.com/search?q=my+query'\r\nurl = base_url + quote(path_param, safe='')\r\nr = requests.get(url)\r\nprint(r.json())\r\n\r\nfrom urllib.parse import unquote \r\n\r\n@app.get('/{path}')\r\nasync def pred_image(path: str):\r\n    return {'url': unquote(unquote(path))}\r\n\r\nimport requests\r\nfrom urllib.parse import quote \r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\npath_param = 'https://www.google.com/search?q=my+query'\r\nurl = base_url + quote(quote(path_param, safe=''), safe='')\r\nr = requests.get(url)\r\nprint(r.json())\r\n\r\n@app.get('/')\r\nasync def pred_image(url: str):\r\n    return {'url': url}\r\n\r\nimport requests\r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\nparams = {'url': 'https://www.google.com/search?q=my+query'}\r\nr = requests.get(base_url, params=params)\r\nprint(r.json())\r\n\r\n405 ""Method Not Allowed"
1,1,misclassified_in_Test_2.csv.csv,"def func(b: HasHasA) -> None:\r\n    b.hasa.a += 100 - 100\r\n\r\n@dataclass\r\nclass Inner:\r\n    a: bool\r\n\r\no = Outer(Inner(bool(0)))\r\nfunc(o)\r\nif o.hasa.a is False:\r\n    print(""Oh no! This is still False!"")\r\nelse:\r\n    print(""This is true now!"")\r\n\r\nclass HasHasA(Protocol):\r\n    @property\r\n    def hasa(self) -> HasA:\r\n        ..."
1,1,misclassified_in_Test_2.csv.csv,"from itertools import chain\r\n\r\ndef f(*args):\r\n    res = list(chain.from_iterable([[item] for item in l] for l in args[0]))\r\n    for arg in args[1:]:\r\n        aux = []\r\n        for i, sublist in enumerate(arg):\r\n            aux += [res[i] + [opt] for opt in sublist]\r\n        res = aux\r\n    return res\r\n\r\ndef check(*args):\r\n    size = sum(len(l) for l in args[0])\r\n    for arg in args[1:]:\r\n        if len(arg) != size:\r\n            return False\r\n        size = sum(len(l) for l in arg)\r\n    return True"
1,1,misclassified_in_Test_2.csv.csv,"import pandas as pd\r\ndata = ['221011141200', '221011031200', '221011191200', '221011131600']\r\n\r\ndf = pd.DataFrame(data, columns=['dttime'])\r\ndf['dttime'] = pd.to_datetime(df['dttime'], format='%y%m%d%H%M%S')\r\n\r\n# Before sorting\r\nprint(df)\r\n\r\n# After sorting\r\ndf = df.sort_values(by='dttime')\r\nprint(df)\r\n\r\ndttime\r\n0 2022-10-11 14:12:00\r\n1 2022-10-11 03:12:00\r\n2 2022-10-11 19:12:00\r\n3 2022-10-11 13:16:00\r\n\r\n               dttime\r\n1 2022-10-11 03:12:00\r\n3 2022-10-11 13:16:00\r\n0 2022-10-11 14:12:00\r\n2 2022-10-11 19:12:00"
1,1,misclassified_in_Test_2.csv.csv,"def _int_to_enum(value, enum_klass):\r\n    """"""Convert a numeric value to an IntEnum member.\r\n    If it's not a known member, return the numeric value itself.\r\n    """"""\r\n    try:\r\n        return enum_klass(value)\r\n    except ValueError:\r\n        return value\r\n\r\nfrom signal import _int_to_enum as rcall\r\nfrom functools import reduce, partial\r\n\r\ndef increment(x):\r\n    return x + 1\r\n\r\ndef double(x):\r\n    return x * 2\r\n\r\ndouble_and_increment = partial(reduce, rcall, [double, increment])\r\nprint(double_and_increment(1))"
1,1,misclassified_in_Test_2.csv.csv,"def utcnow(cls):\r\n    ""Construct a UTC datetime from time.time().""\r\n    t = _time.time()\r\n    return cls.utcfromtimestamp(t)\r\n\r\nimport time\r\nfrom itertools import repeat\r\n\r\ndef function():\r\n    n = 10_000_000\r\n    reps = repeat(1, n)\r\n    now = time.time\r\n    first = now()\r\n    for _ in reps:\r\n        second = now()\r\n        assert first <= second, f""{first=} {second=} i={n - sum(reps)}""\r\n        first = second\r\nfunction()"
1,1,misclassified_in_Test_2.csv.csv,"import numpy as np\r\nimport tensorflow as tf\r\n\r\n# add additional dimension for lstm layer\r\nx_train = np.asarray(train_set[""x data""].values))[..., None] \r\ny_train = np.asarray(train_set[""y data""]).astype(np.float32)\r\n\r\nmodel = tf.keras.Sequential()\r\nmodel.add(tf.keras.layers.LSTM(units=32))\r\nmodel.add(tf.keras.layers.Dense(units=1))\r\nmodel.compile(loss=""mean_squared_error"", optimizer=""adam"", metrics=""mse"")\r\nmodel.fit(x=x_train,y=y_train,epochs=10)\r\n\r\nx_train = tf.ragged.constant(train_set[""x data""].values[..., None]) # add additional dimension for lstm layer\r\ny_train = np.asarray(train_set[""y data""]).astype(np.float32)\r\n\r\nmodel = tf.keras.Sequential()\r\nmodel.add(tf.keras.layers.Input(shape=[None, x_train.bounding_shape()[-1]], batch_size=2, dtype=tf.float32, ragged=True))\r\nmodel.add(tf.keras.layers.LSTM(units=32))\r\nmodel.add(tf.keras.layers.Dense(units=1))\r\nmodel.compile(loss=""mean_squared_error"", optimizer=""adam"", metrics=""mse"")\r\nmodel.fit(x=x_train,y=y_train,epochs=10)\r\n\r\nx_train = tf.ragged.constant([np.array(list(v))[..., None] for v in train_set[""x data""].values]) # add additional dimension for lstm layer"
1,1,misclassified_in_Test_2.csv.csv,"from pyiceberg.catalog import load_catalog\r\nfrom pyiceberg.table import Table\r\nfrom pyiceberg.schema import Schema\r\nfrom pyiceberg.types import DoubleType, StringType, TimestampType, NestedField\r\nfrom pyiceberg.partitioning import PartitionSpec, PartitionField\r\nfrom pyiceberg.transforms import YearTransform, MonthTransform, DayTransform\r\nfrom pyiceberg.table.sorting import SortOrder, SortField\r\nfrom pyiceberg.transforms import IdentityTransform\r\n\r\ndef create_iceberg_table():\r\n    # Specify the Glue Catalog database name and URI\r\n    glue_database_name = ""iceberg_catalog""\r\n    glue_catalog_uri = ""s3://ua-weather-data/catalog""  # Replace with your Glue Catalog URI\r\n\r\n    # Instantiate glue catalog\r\n    catalog = load_catalog(""glue"", **{""type"": ""glue""})\r\n    #catalog = load_catalog(catalog_impl=""org.apache.iceberg.aws.glue.GlueCatalog"", name=glue_database_name, uri=glue_catalog_uri)\r\n\r\n    # Define the Iceberg schema\r\n    schema = Schema(\r\n        NestedField(field_id=1, name=""cloudCover"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=2, name=""dayOfWeek"", field_type=StringType(), required=False),\r\n        NestedField(field_id=3, name=""dayOrNight"", field_type=StringType(), required=False),\r\n        NestedField(field_id=4, name=""expirationTimeUtc"", field_type=TimestampType(), required=False),\r\n        NestedField(field_id=5, name=""iconCode"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=6, name=""iconCodeExtend"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=7, name=""precipChance"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=8, name=""precipType"", field_type=StringType(), required=False),\r\n        NestedField(field_id=9, name=""pressureMeanSeaLevel"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=10, name=""qpf"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=11, name=""qpfSnow"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=12, name=""relativeHumidity"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=13, name=""temperature"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=14, name=""temperatureFeelsLike"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=15, name=""temperatureHeatIndex"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=16, name=""temperatureWindChill"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=17, name=""uvDescription"", field_type=StringType(), required=False),\r\n        NestedField(field_id=18, name=""uvIndex"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=19, name=""validTimeLocal"", field_type=TimestampType(), required=True),\r\n        NestedField(field_id=20, name=""validTimeUtc"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=21, name=""visibility"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=22, name=""windDirection"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=23, name=""windDirectionCardinal"", field_type=StringType(), required=False),\r\n        NestedField(field_id=24, name=""windGust"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=25, name=""windSpeed"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=26, name=""wxPhraseLong"", field_type=StringType(), required=False),\r\n        NestedField(field_id=27, name=""wxPhraseShort"", field_type=StringType(), required=False),\r\n        NestedField(field_id=28, name=""wxSeverity"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=29, name=""data_origin"", field_type=StringType(), required=True)\r\n    )\r\n\r\n    # Define the partitioning specification with year, month, and day\r\n    partition_spec = PartitionSpec(\r\n        PartitionField(field_id=19, source_id=19, transform=YearTransform(), name=""validTimeLocal_year""),\r\n        PartitionField(field_id=19, source_id=19, transform=MonthTransform(), name=""validTimeLocal_month""),\r\n        PartitionField(field_id=19, source_id=19, transform=DayTransform(), name=""validTimeLocal_day"")\r\n    )\r\n\r\n    # Define the sorting order using validTimeUtc field\r\n    sort_order = SortOrder(SortField(source_id=20, transform=IdentityTransform()))\r\n\r\n    # Create the Iceberg table using the Iceberg catalog\r\n    table_name = ""iceberg_catalog.hourly_forecasts""\r\n    catalog.create_table(\r\n        identifier=table_name,\r\n        location=""s3://ua-weather-data/catalog"",\r\n        schema=schema,\r\n        partition_spec=partition_spec,\r\n        sort_order=sort_order\r\n    )\r\n\r\n    print(""Iceberg table created using AWS Glue Catalog."")\r\n\r\nif __name__ == ""__main__"":\r\n    create_iceberg_table()"
1,1,misclassified_in_Test_2.csv.csv,"from typing import get_type_hints\r\n\r\n\r\ndef func():\r\n    class A:\r\n        some_b: ""B""\r\n\r\n    class B:\r\n        pass\r\n\r\n    print(get_type_hints(A, localns=locals()))\r\n\r\n\r\nfunc()\r\n\r\nfrom __future__ import annotations\r\nfrom typing import get_type_hints\r\n\r\n\r\ndef func():\r\n    class A:\r\n        some_b: B\r\n\r\n    class B:\r\n        pass\r\n\r\n    print(get_type_hints(A, localns=locals()))"
1,1,misclassified_in_Test_2.csv.csv,"from bs4 import BeautifulSoup\r\nimport shutil\r\nimport pathlib\r\nimport logging\r\nimport streamlit as st\r\n\r\n\r\ndef add_analytics_tag():\r\n    # replace G-XXXXXXXXXX to your web app's ID\r\n    \r\n    analytics_js = """"""\r\n    <!-- Global site tag (gtag.js) - Google Analytics -->\r\n    <script async src=""https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX""></script>\r\n    <script>\r\n        window.dataLayer = window.dataLayer || [];\r\n        function gtag(){dataLayer.push(arguments);}\r\n        gtag('js', new Date());\r\n        gtag('config', 'G-XXXXXXXXXX');\r\n    </script>\r\n    <div id=""G-XXXXXXXXXX""></div>\r\n    """"""\r\n    analytics_id = ""G-XXXXXXXXXX""\r\n\r\n    \r\n    # Identify html path of streamlit\r\n    index_path = pathlib.Path(st.__file__).parent / ""static"" / ""index.html""\r\n    logging.info(f'editing {index_path}')\r\n    soup = BeautifulSoup(index_path.read_text(), features=""html.parser"")\r\n    if not soup.find(id=analytics_id): # if id not found within html file\r\n        bck_index = index_path.with_suffix('.bck')\r\n        if bck_index.exists():\r\n            shutil.copy(bck_index, index_path)  # backup recovery\r\n        else:\r\n            shutil.copy(index_path, bck_index)  # save backup\r\n        html = str(soup)\r\n        new_html = html.replace('<head>', '<head>\n' + analytics_js) \r\n        index_path.write_text(new_html) # insert analytics tag at top of head"
1,1,misclassified_in_Test_2.csv.csv,"yum install epel-release\r\nyum install R\r\nyum install libxml2-devel\r\nyum install openssl-devel\r\nyum install libcurl-devel\r\nyum install libXcomposite libXcursor libXi libXtst libXrandr alsa-lib mesa-libEGL libXdamage mesa-libGL libXScrnSaver\r\n\r\nyum install conda\r\nconda clean -a     # Clean cache and remove old packages, if you already have conda installed\r\n# Install all the packages together and let conda handle versioning. It is important to give a Python version while setting up the environment. Since Tensorflow supports python 3.9.0, I have used this version \r\nconda create -y -n ""tf"" python=3.9.0 ipython tensorflow keras r-essentials r-reticulate r-tensorflow\r\nconda activate tf\r\n\r\niptables -A INPUT -p tcp --dport 7878 -j ACCEPT\r\n/sbin/service iptables save\r\n\r\n/usr/lib/rstudio-server/bin/rserver \\r\n   --server-daemonize=0 \\r\n   --www-port 7878 \\r\n   --rsession-which-r=$(which R) \\r\n   --rsession-ld-library-path=$CONDA_PREFIX/lib\r\n\r\ninstall.packages(""reticulate"")\r\ninstall.packages(""tensorflow"")\r\nlibrary(reticulate)\r\nlibrary(tensorflow)\r\nts <- reticulate::import(""tensorflow"")"
1,1,misclassified_in_Test_2.csv.csv,"lasts = ['x', 'y', 'z']\r\nfirsts = ['a', 'b', 'c']\r\n\r\nfrom itertools import product\r\nfor last, first in product(lasts, firsts):\r\n    print (last, first)\r\n\r\nx a\r\nx b\r\nx c\r\ny a\r\ny b\r\ny c\r\nz a\r\nz b\r\nz c\r\n\r\niPairs=( (l,f) for l in lasts for f in firsts)\r\nfor last, first in iPairs:\r\n    print (last, first)\r\n\r\niPairs = zip( (l for l in lasts for _ in firsts),\r\n              (f for _ in lasts for f in firsts) )"
1,1,misclassified_in_Test_2.csv.csv,"from typing import Optional\r\nfrom pydantic import BaseModel, BaseSettings\r\n\r\n\r\nclass SubSettings(BaseModel):\r\n     # ^ Note that this inherits from BaseModel, not BaseSettings\r\n    sub_field: Optional[str]\r\n\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str]\r\n    field_two: Optional[int]\r\n    sub_settings: SubSettings\r\n\r\n    class Config:\r\n        env_nested_delimiter = '__'\r\n\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel, BaseSettings, Field\r\n\r\nclass SubSettings(BaseSettings):\r\n    sub_field: Optional[str]\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str]\r\n    field_two: Optional[int]\r\n    sub_settings: SubSettings\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs['sub_settings'] = SubSettings(_env_file=kwargs['_env_file'])\r\n        super().__init__(*args, **kwargs)\r\n\r\n\r\nsettings = Settings(_env_file='local.env')"
1,1,misclassified_in_Test_2.csv.csv,"class FooBase(ABC):\r\n    @property\r\n    @classmethod\r\n    @abstractmethod\r\n    def foo(cls) -> str:\r\n        ...\r\n\r\nclass Foo(FooBase):\r\n    foo = ""hi""\r\n\r\ndef go(f: FooBase) -> str:\r\n    return f.foo\r\n\r\nclass Foo(FooBase):\r\n    ...\r\n\r\nFoo()  # error: Cannot instantiate abstract class ""Foo"" with abstract attribute ""foo""\r\n\r\n@final\r\nclass Foo(FooBase):  # error: Final class __main__.Foo has abstract attributes ""foo""\r\n   ..."
1,1,misclassified_in_Test_2.csv.csv,"import sys, os\r\nsys.path.append(os.path.expanduser('~/path/to/parent'))\r\nfrom module_of_interest import *  # NOQA\r\n\r\nimport ubelt as ub\r\nfpath = ub.Path('/home/username/path/to/parent/module_of_interest.py')\r\nmodpath, modname = ub.split_modpath(fpath, check=False)\r\nmodpath = ub.Path(modpath).shrinkuser()  # abstract home directory\r\n\r\n+ my_project\r\n    + mypymod\r\n        + __init__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + submod2.py\r\n\r\nimport mypymod\r\nimport mypymod.submod1\r\nimport mypymod.subpkg\r\nimport mypymod.subpkg.submod2\r\n\r\nfrom setuptools import setup, find_packages\r\nsetup(\r\n    name='mypymod',\r\n    version='0.1.0',\r\n    packages=find_packages(include=['mypymod', 'mypymod.*']),\r\n    install_requires=[],\r\n)\r\n\r\n+ my_project\r\n    + setup.py\r\n    + mypymod\r\n        + __init__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + submod2.py\r\n\r\npip install -e <path-to-repo-root>\r\n\r\npip install -e .\r\n\r\n+ my_project\r\n    + setup.py\r\n    + mypymod\r\n        + __init__.py\r\n        + __main__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + __main__.py\r\n            + submod2.py\r\n\r\nfrom mypymod import submod1"
1,1,misclassified_in_Test_2.csv.csv,"Union[\r\n    _SupportsArray[dtype[Any]],\r\n    _NestedSequence[_SupportsArray[dtype[Any]]],\r\n    bool,\r\n    int,\r\n    float,\r\n    complex,\r\n    str,\r\n    bytes,\r\n    _NestedSequence[Union[bool, int, float, complex, str, bytes]]\r\n]\r\n\r\nimport numpy.typing as npt\r\n\r\n...\r\n\r\ndef f(a: npt.ArrayLike) -> int:\r\n    return len(a)\r\n\r\n...\r\n\r\ndef g(a: npt.ArrayLike) -> Any:\r\n    return a[0]\r\n\r\nfrom typing import Any, Protocol, TypeVar\r\n\r\nimport numpy as np\r\n\r\nT = TypeVar(""T"", covariant=True)\r\n\r\n\r\nclass SequenceLike(Protocol[T]):\r\n    def __len__(self) -> int: ...\r\n    def __getitem__(self, item: int) -> T: ...\r\n\r\n\r\ndef f(a: SequenceLike[Any]) -> int:\r\n    return len(a)\r\n\r\n\r\ndef g(a: SequenceLike[T]) -> T:\r\n    return a[0]\r\n\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))"
1,1,misclassified_in_Test_2.csv.csv,"project\r\nÃ¢ÂÂ   file001.py\r\nÃ¢ÂÂ   file002.py\r\nÃ¢ÂÂ   function_app.py\r\nÃ¢ÂÂ   README.md\r\nÃ¢ÂÂ   host.json\r\nÃ¢ÂÂ   local.settings.json\r\n\r\nimport azure.function as func\r\nimport json\r\n    \r\nbp01 = func.Blueprint()\r\n@bp01.route(route=""route01"")\r\ndef method01(req:func.HttpRequest) -> func.HttpRequest:\r\n    return func.HttpResponse (\r\n        json.dumps({\r\n        'version': 1\r\n        })\r\n    )\r\n\r\nimport azure.function as func\r\nimport json\r\n    \r\nbp02 = func.Blueprint()\r\n@bp02.route(route=""route02"")\r\ndef method02(req:func.HttpRequest) -> func.HttpRequest:\r\n    return func.HttpResponse (\r\n        json.dumps({\r\n        'version': 2\r\n        })\r\n    )\r\n\r\nimport azure.functions as func \r\nfrom file001.py import bp01\r\nfrom file002.py import bp02\r\n\r\napp = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS) \r\n\r\napp.register_functions(bp01)\r\napp.register_functions(bp01)"
1,1,misclassified_in_Test_2.csv.csv,"import toml\r\nfrom typing import Literal\r\n\r\ndef bump_version(file_path: str, part: Literal[""major"", ""minor"", ""patch""] = ""patch"") -> None:\r\n    with open(file_path, ""r"") as f:\r\n        pyproject = toml.load(f)\r\n\r\n    version = pyproject[""tool""][""poetry""][""version""]\r\n    major, minor, patch = map(int, version.split("".""))\r\n\r\n    if part == ""major"":\r\n        major += 1\r\n        minor = 0\r\n        patch = 0\r\n    elif part == ""minor"":\r\n        minor += 1\r\n        patch = 0\r\n    elif part == ""patch"":\r\n        patch += 1\r\n    else:\r\n        raise ValueError(""Invalid part value. Choose 'major', 'minor', or 'patch'."")\r\n\r\n    pyproject[""tool""][""poetry""][""version""] = f""{major}.{minor}.{patch}""\r\n\r\n    with open(file_path, ""w"") as f:\r\n        toml.dump(pyproject, f)\r\n\r\n    print(f""Version bumped to {major}.{minor}.{patch}"")"
1,1,misclassified_in_Test_2.csv.csv,"(B * R)/(B + R)\r\n\r\nalpha * B + (1 - alpha) * R\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndata = [\r\n    [""A"", ""C"", 2],\r\n    [""A"", ""D"", 10],\r\n    [""A"", ""F"", 100],\r\n    [""A"", ""F"", 101],\r\n    [""A"", ""F"", 102],\r\n    [""A"", ""G"", 1],\r\n    [""B"", ""C"", 1],\r\n    [""B"", ""C"", 2],\r\n    [""B"", ""D"", 10],\r\n    [""B"", ""F"", 100],\r\n    [""B"", ""F"", 101],\r\n    [""B"", ""F"", 102],\r\n    [""B"", ""G"", 1],\r\n    [""B"", ""G"", 2],\r\n    [""B"", ""G"", 3],\r\n    [""B"", ""G"", 4],\r\n    [""B"", ""G"", 5],\r\n    [""B"", ""G"", 6],\r\n    [""B"", ""G"", 7],\r\n    [""B"", ""G"", 8]\r\n]\r\n\r\ndef weight(days_ago: int, epilson: float=0.005) -> float:\r\n    return np.exp(-1 * days_ago * epilson)\r\n\r\ndef weighted_balanceness(array: np.ndarray, weights: np.ndarray):\r\n    classes = np.unique(array)\r\n    cnt = np.array([weights[array == c].sum() for c in classes])\r\n    m = len(classes)\r\n    n = weights.sum()\r\n\r\n    H = -(cnt / n * np.log(cnt / n)).sum() \r\n    return H / np.log(m)\r\n\r\n\r\ndf = pd.DataFrame(data=data, columns=[""player"", ""opponent"", ""days_ago""])\r\ndf[""effective_count""] = weight(df[""days_ago""])\r\n\r\nscores = []\r\nfor opponent in df[""opponent""].unique():\r\n    df_o = df.loc[df[""opponent""] == opponent]\r\n    player = np.where(df_o[""player""].values == ""A"", 0, 1)\r\n    balanceness = weighted_balanceness(array=player, weights=df_o[""effective_count""])\r\n\r\n    recency = df_o[""effective_count""].mean()\r\n    scores.append([opponent, balanceness, recency])\r\n\r\n\r\ndf_out = pd.DataFrame(scores, columns=[""opponent"", ""balanceness"", ""recency""])\r\ndf_out[""br""] = df_out[""balanceness""] * df_out[""recency""]\r\ndf_out[""mean_br""] = 0.5 * df_out[""balanceness""] + 0.5 * df_out[""recency""]\r\ndf_out[""harmonic_mean_br""] = df_out[""balanceness""] * df_out[""recency""] / ( (df_out[""balanceness""] + df_out[""recency""]))\r\n\r\nprint(df_out)\r\n\r\nopponent  balanceness   recency        br   mean_br  harmonic_mean_br\r\n0        C     0.917739  0.991704  0.910125  0.954721          0.476644\r\n1        D     1.000000  0.951229  0.951229  0.975615          0.487503\r\n2        F     1.000000  0.603511  0.603511  0.801755          0.376368\r\n3        G     0.508437  0.979726  0.498129  0.744082          0.334728"
1,1,misclassified_in_Test_2.csv.csv,"pip install Faker\r\npip install pydantic\r\n\r\nimport uuid\r\nfrom datetime import date, datetime, timedelta\r\nfrom typing import List, Union\r\nfrom pydantic import BaseModel, UUID4\r\nfrom faker import Faker\r\n\r\n# your pydantic model\r\nclass Person(BaseModel):\r\n    id: UUID4\r\n    name: str\r\n    hobbies: List[str]\r\n    age: Union[float, int]\r\n    birthday: Union[datetime, date]\r\n\r\nclass PersonFactory:\r\n    @classmethod\r\n    def generate_id(cls):\r\n        return str(uuid.uuid4())\r\n\r\n    @classmethod\r\n    def generate_name(cls):\r\n        # Implement your own logic to generate realistic names\r\n        return Faker().name()\r\n\r\n    @classmethod\r\n    def generate_hobbies(cls):\r\n        # Implement your own logic to generate hobbies\r\n        return Faker().words(nb=1)\r\n\r\n    @classmethod\r\n    def generate_age(cls):\r\n        # Implement your own logic to generate realistic ages\r\n        return Faker().random_int(1940, 2023)\r\n        \r\n    \r\n    @classmethod\r\n    def generate_birthday(cls):\r\n        # Implement your own logic to generate realistic birthdays\r\n        return Faker().date_of_birth(tzinfo=None, minimum_age=18, maximum_age=80)\r\n\r\n    @classmethod\r\n    def build(cls):\r\n        id = cls.generate_id()\r\n        name = cls.generate_name()\r\n        hobbies = cls.generate_hobbies()\r\n        birthday = cls.generate_birthday()\r\n        age = datetime.now().year - birthday.year\r\n        \r\n        return Person(id=id, name=name, hobbies=hobbies, age=age, birthday=birthday)\r\n\r\nresult = PersonFactory.build()\r\nprint(result)\r\n\r\nid=UUID('4b7ffc04-48a1-4f4d-8c5b-d3167717dd69')\r\nname='Katherine Brown'\r\nhobbies=['stay']\r\nage=30\r\nbirthday=datetime.date(1993, 2, 17)"
1,1,misclassified_in_Test_2.csv.csv,"@app.post(""/upload"")\r\ndef upload(file: UploadFile = File(...)):\r\n    try:\r\n        contents = file.file.read()\r\n        with open(file.filename, 'wb') as f:\r\n            f.write(contents)\r\n    except Exception:\r\n        return {""message"": ""There was an error uploading the file""}\r\n    finally:\r\n        file.file.close()\r\n        \r\n    return {""message"": f""Successfuly uploaded {file.filename}""}\r\n\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8000/upload'\r\nfile = {'file': open('images/1.png', 'rb')}\r\nresp = requests.post(url=url, files=file) \r\nprint(resp.json())\r\n\r\nimport base64\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8000/upload'\r\nwith open(""photo.png"", ""rb"") as image_file:\r\n    encoded_string = base64.b64encode(image_file.read())\r\n    \r\npayload ={""filename"": ""photo.png"", ""filedata"": encoded_string}\r\nresp = requests.post(url=url, data=payload)\r\n\r\n@app.post(""/upload"")\r\ndef upload(filename: str = Form(...), filedata: str = Form(...)):\r\n    image_as_bytes = str.encode(filedata)  # convert string to bytes\r\n    img_recovered = base64.b64decode(image_as_bytes)  # decode base64string\r\n    try:\r\n        with open(""uploaded_"" + filename, ""wb"") as f:\r\n            f.write(img_recovered)\r\n    except Exception:\r\n        return {""message"": ""There was an error uploading the file""}\r\n        \r\n    return {""message"": f""Successfuly uploaded {filename}""}"
1,1,misclassified_in_Test_2.csv.csv,"ret = ret + result\r\n\r\n#define PY_SSIZE_T_CLEAN // Required for large bytes objects on 64-bit machines\r\n#include <Python.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <assert.h>\r\n#include <omp.h>\r\n\r\nint base64_table[256];\r\n\r\n// Generate a conversion table for sake of performance\r\nstatic inline void init_table()\r\n{\r\n    static const unsigned char base64_chars[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";\r\n\r\n    for (int i = 0; i < 64; ++i)\r\n        base64_table[i] = -1;\r\n\r\n    for (int i = 0; i < 64; ++i)\r\n        base64_table[base64_chars[i]] = i;\r\n\r\n    base64_table['='] = 0;\r\n}\r\n\r\nstatic inline int decode_char(unsigned char c)\r\n{\r\n    return base64_table[c];\r\n}\r\n\r\n// Assume the input is correctly formatted\r\nstatic PyObject* decode(PyObject* self, PyObject* args)\r\n{\r\n    PyObject* input_obj;\r\n\r\n    // Extract the input parameter and check its type\r\n    if(!PyArg_ParseTuple(args, ""O!"", &PyBytes_Type, &input_obj))\r\n        return NULL;\r\n\r\n    char* input = PyBytes_AS_STRING(input_obj);\r\n    Py_ssize_t input_length = PyBytes_GET_SIZE(input_obj);\r\n    assert(input_length % 4 == 0);\r\n\r\n    int padding = 0;\r\n    padding += input_length >= 1 && input[input_length - 1] == '=';\r\n    padding += input_length >= 2 && input[input_length - 2] == '=';\r\n\r\n    // Assume there is enough memory\r\n    Py_ssize_t output_length = (input_length / 4) * 3 - padding;\r\n    PyObject* output_obj = PyBytes_FromStringAndSize(NULL, output_length);\r\n    assert(output_obj != NULL);\r\n    char* output = PyBytes_AS_STRING(output_obj);\r\n    assert(output != NULL);\r\n\r\n    #pragma omp parallel for schedule(guided) if(input_length >= 8*1024*1024)\r\n    for(Py_ssize_t k = 0; k < input_length / 4; ++k)\r\n    {\r\n        const Py_ssize_t i = k * 4;\r\n        const Py_ssize_t j = k * 3;\r\n\r\n        const int a = decode_char(input[i]);\r\n        const int b = decode_char(input[i + 1]);\r\n        const int c = decode_char(input[i + 2]);\r\n        const int d = decode_char(input[i + 3]);\r\n        assert(a > 0 && b > 0 && c > 0 && d > 0);\r\n\r\n        const int merged = (a << 18) + (b << 12) + (c << 6) + d;\r\n\r\n        if(j < output_length) output[j]     = (merged >> 16) & 0xFF;\r\n        if(j < output_length) output[j + 1] = (merged >> 8) & 0xFF;\r\n        if(j < output_length) output[j + 2] = merged & 0xFF;\r\n    }\r\n\r\n    return output_obj;\r\n}\r\n\r\nstatic PyMethodDef MyMethods[] = \r\n{\r\n    {""decode"", decode, METH_VARARGS, ""Parallel base64 decoding function.""},\r\n    {NULL, NULL, 0, NULL}\r\n};\r\n\r\nstatic struct PyModuleDef parallel_base64 = \r\n{\r\n    PyModuleDef_HEAD_INIT,\r\n    ""parallel_base64"",\r\n    NULL,\r\n    -1,\r\n    MyMethods\r\n};\r\n\r\nPyMODINIT_FUNC PyInit_parallel_base64(void) \r\n{\r\n    init_table();\r\n    return PyModule_Create(&parallel_base64);\r\n}\r\n\r\nfrom setuptools import setup, Extension\r\n\r\nmodule = Extension(\r\n    'parallel_base64', \r\n    sources=['base64.c'],\r\n    extra_compile_args=['-fopenmp'],\r\n    extra_link_args=['-fopenmp']\r\n)\r\n\r\nsetup(\r\n    name='parallel_base64',\r\n    version='1.0',\r\n    description='A parallel base64 module written in C',\r\n    ext_modules=[module],\r\n)\r\n\r\npython setup.py build_ext --inplace\r\n\r\ndecoding time = 3.6366550829989137\r\n\r\nimplmementation1\r\nVerify result Ok\r\ndecoding time = 3.5178445390010893\r\n\r\nthreaded_impl\r\nVerify result Ok\r\ndecoding time = 9.623698087001685\r\n\r\nmutiproc_impl\r\nVerify result Ok\r\ndecoding time = 13.102449985999556\r\n\r\nc_module_impl\r\nVerify result Ok\r\ndecoding time = 0.29033970499949646"
1,1,misclassified_in_Test_2.csv.csv,"def local_double(x: pl.Expr) -> pl.Expr:\r\n  return(2*x)\r\n\r\ndef binomial_elements(x: dict) -> float:\r\n    return np.random.binomial(n=x['daily_n'], p=x['prob'], size=x['size'])\r\n\r\n\r\ndf_sim.with_columns(\r\n  pl.struct([""daily_n"", ""prob"", ""size""])\r\n  .map_elements(binomial_elements)\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndef binomial_batches(x: pl.Series) -> np.array:\r\n    return np.random.binomial(n=x.struct['daily_n'], p=x.struct['prob'])\r\n\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(binomial_batches)\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(lambda x: np.random.binomial(n=x.struct['daily_n'], p=x.struct['prob']))\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(lambda x: (\r\n      np.random.binomial(\r\n          n=x.struct['daily_n'], \r\n          p=x.struct['prob'], \r\n          size=(3,x.shape[0])\r\n          ).transpose()\r\n      )\r\n  )\r\n  .alias('events')\r\n  )\r\n\r\nshape: (4, 4)\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ\r\nÃ¢ÂÂ daily_n Ã¢ÂÂ prob Ã¢ÂÂ size Ã¢ÂÂ events             Ã¢ÂÂ\r\nÃ¢ÂÂ ---     Ã¢ÂÂ ---  Ã¢ÂÂ ---  Ã¢ÂÂ ---                Ã¢ÂÂ\r\nÃ¢ÂÂ i64     Ã¢ÂÂ f64  Ã¢ÂÂ i32  Ã¢ÂÂ list[i64]          Ã¢ÂÂ\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¡\r\nÃ¢ÂÂ 1000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [491, 493, 482]    Ã¢ÂÂ\r\nÃ¢ÂÂ 2000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [1032, 966, 972]   Ã¢ÂÂ\r\nÃ¢ÂÂ 3000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [1528, 1504, 1483] Ã¢ÂÂ\r\nÃ¢ÂÂ 4000    Ã¢ÂÂ 0.6  Ã¢ÂÂ 1    Ã¢ÂÂ [2401, 2422, 2367] Ã¢ÂÂ\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ"
1,1,misclassified_in_Test_2.csv.csv,"import seaborn as sns\r\nfrom statannotations.Annotator import Annotator\r\n%matplotlib inline\r\n\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\nargs = dict(x=""sex"", y=""total_bill"", data=tips, hue=""smoker"", hue_order=[""Yes"",""No""], order=['Male', 'Female'])\r\n\r\ng = sns.catplot(edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize = 0.1, height=4, aspect=.7,alpha=0.5, kind=""bar"", ci = ""sd"", row=""time"", **args)\r\ng.map(sns.stripplot, args[""x""], args[""y""], args[""hue""], hue_order=args[""hue_order""], order=args[""order""], palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nfor ax_n in g.axes:\r\n    for ax in ax_n:\r\n        annot = Annotator(ax, pairs, **args)\r\n        annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\n        annot.apply_test().annotate()"
1,1,misclassified_in_Test_2.csv.csv,"customdata': array([[0.0, '-0.3490658516205964,-0.7648749219440846', 0],\r\n                         [0.0, '-0.3490658516205964,-0.6802309514438665', 0],\r\n                         [0.0, '-0.3490658516205964,-0.5955869809436484', 0],\r\n                         ...,\r\n                         [0.0, '0.8482300176421051,0.8010385323099501', 0],\r\n                         [0.0, '0.8482300176421051,0.8856825028101681', 0],\r\n                         [0.0, '0.8482300176421051,0.9703264733103861', 0]], dtype=object),\r\n    'geojson': {'features': [{'geometry': {'coordinates': [[[-20.00000007,\r\n                                                           -41.31174966478728],\r\n                                                           [-18.6000000672,\r\n                                                           -40.70179509236059],\r\n                                                           [-18.6000000672,\r\n                                                           -39.464994178287064],\r\n                                                           [-20.00000007,\r\n                                                           -38.838189880150665],\r\n                                                           [-21.4000000728,\r\n                                                           -39.464994178287064],\r\n                                                           [-21.4000000728,\r\n                                                           -40.70179509236059],\r\n                                                           [-20.00000007,\r\n                                                           -41.31174966478728]]],\r\n                                           'type': 'Polygon'},\r\n                              'id': '-0.3490658516205964,-0.7648749219440846',\r\n                              'type': 'Feature'},\r\n                             {'geometry': {'coordinates': [[[-20.00000007,\r\n                                                           -37.56790013078226],\r\n                                                           [-18.6000000672,\r\n                                                           -36.924474103794715],\r\n                                                           [-18.6000000672,\r\n                                                           -35.62123099996148],\r\n                                                           [-20.00000007,\r\n                                                           -34.96149172026768],\r\n                                                           [-21.4000000728,\r\n                                                           -35.62123099996148],\r\n                                                           [-21.4000000728,\r\n                                                           -36.924474103794715],\r\n                                                           [-20.00000007,\r\n                                                           -37.56790013078226]]],\r\n                                           'type': 'Polygon'},\r\n                              'id': '-0.3490658516205964,-0.6802309514438665',\r\n                              'type': 'Feature'},\r\n                             {'geometry': {'coordinates\r\n...\r\n\r\nfig.data[0]['geojson']['features'] = new_geojson\r\nfig.data[0]['customdata'] = hexbins_in_afr['customdata']\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nfrom geopandas.tools import sjoin\r\nfrom shapely.geometry import Polygon\r\nimport json\r\n\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\ngdf_poly = gdf_poly.drop('name', axis = 1)\r\n\r\nAfr_gdf_area = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop = True)\r\n\r\nfig = ff.create_hexbin_mapbox(data_frame=data,\r\n                       lat=""LAT"", \r\n                       lon=""LON"",\r\n                       nx_hexagon=25,\r\n                       opacity=0.4,\r\n                       labels={""color"": ""Point Count""},\r\n                       mapbox_style='carto-positron',\r\n                       zoom = 1\r\n                       )\r\n\r\ngdf = gpd.GeoDataFrame({\r\n    'customdata': fig.data[0]['customdata'].tolist(),\r\n    'id':[item['id'] for item in fig.data[0]['geojson']['features']],\r\n    'geometry':[Polygon(item['geometry']['coordinates'][0]) for item in fig.data[0]['geojson']['features']]\r\n})\r\ngdf.set_crs(epsg=4326, inplace=True)\r\n\r\nhexbins_in_afr = sjoin(gdf, Afr_gdf_area, how='inner')\r\n\r\ndef get_coordinates(polygon):\r\n    return [[list(i) for i in polygon.exterior.coords]]\r\n\r\nhexbins_in_afr['coordinates'] = hexbins_in_afr['geometry'].apply(lambda x: get_coordinates(x))\r\n\r\n## create a new geojson that matches the structure of fig.data[0]['geojson']['features']\r\nnew_geojson = [{\r\n    'type': 'Feature', \r\n    'id': id, \r\n    'geometry': {\r\n        'type': 'Polygon', \r\n        'coordinates': coordinate\r\n    }\r\n} for id, coordinate in zip(hexbins_in_afr['id'],hexbins_in_afr['coordinates'])]\r\n\r\nfig.data[0]['geojson']['features'] = new_geojson\r\nfig.data[0]['customdata'] = hexbins_in_afr['customdata']\r\n\r\nfig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n                ""below"": ""traces"",\r\n                ""type"": ""fill"",\r\n                ""color"": ""orange"",\r\n                ""opacity"" : 0.1,\r\n                ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })   \r\n\r\nfig.show()"
