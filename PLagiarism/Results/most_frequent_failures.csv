Label,Failed Sets Count,Failed Sets,Code Snippet
0,9,"misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv",
0,2,"misclassified_in_Test_6.csv.csv, misclassified_in_Test_6.csv.csv","pl.Series(\""sector_exposure\"", [\r\n        \""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069\"", \r\n        \""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400\""\r\n    ])\r\n    pl.col(\""sector_exposure\"")\r\n    .str.split(\"";\"")\r\n    .list.explode()\r\n    .str.split(\""=\"")\r\n    .arr.to_struct(n_field_strategy=\""max_width\"")\r\n    .unnest()\r\n    .group_by(df.select(pl.int_range(0, df.height)).to_series())\r\n    .agg([\r\n        pl.col(\""field_0\""),\r\n        pl.col(\""field_1\"").cast(pl.Float64)\r\n    ])\r\n    .map_elements(lambda x: dict(zip(x[0], x[1])))\r\n    .struct.rename_fields([\r\n        k for row in df[\""sector_exposure\""].str.split(\"";\"").to_list()\r\n        for k in [v.split(\""=\"")[0] for v in row]\r\n    ])\r\n    .alias(\""sector_struct\"")"
0,2,"misclassified_in_Test_9.csv.csv, misclassified_in_Test_9.csv.csv","public String transform(List<CustomObject> list) {\r\n    return list.stream()\r\n        .filter(o -> o.objectType().equals(""BUSINESS""))\r\n        .filter(o -> o.objectStatus().equals(""ACTIVE""))\r\n        .filter(o -> o.locale().equals(""en-US""))\r\n        .findFirst()\r\n        .orElseGet(() -> list.stream()\r\n            .filter(o -> o.objectType().equals(""BUSINESS""))\r\n            .sorted(Comparator.comparing(CustomObject::url))\r\n            .findFirst()\r\n            .get())\r\n        .getUrl();\r\n}\r\n"
0,2,"misclassified_in_Test_9.csv.csv, misclassified_in_Test_8.csv.csv","import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""A"": [""foo"", ""ham"", ""spam"", ""egg""],\r\n        ""L"": [""A54"", ""A12"", ""B84"", ""C12""],\r\n        ""G"": [""X34"", ""C84"", ""G96"", ""L6""],\r\n    }\r\n)\r\n\r\ndf = df.with_columns(\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""L""))\r\n    .alias(""L""),\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""G""))\r\n    .alias(""G"")\r\n)\r\n\r\nprint(df)\r\n"
0,2,"misclassified_in_Test_9.csv.csv, misclassified_in_Test_2.csv.csv",from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):\r\n    a: int\r\n\r\n@dataclass\r\nclass Outer:\r\n    hasa: HasA\r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n
0,2,"misclassified_in_Test_8.csv.csv, misclassified_in_Test_8.csv.csv","import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class JSONConverter {\r\n    public static void main(String[] args) {\r\n        Map<String, Integer> fields = new HashMap<>();\r\n        fields.put(""test_first"", 1);\r\n        fields.put(""test_second"", 2);\r\n        \r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Map<String, Integer> transformedMap = new HashMap<>();\r\n        \r\n        for (Map.Entry<String, Integer> entry : fields.entrySet()) {\r\n            String key = toCamelCase(entry.getKey());\r\n            transformedMap.put(key, entry.getValue());\r\n        }\r\n        \r\n        try {\r\n            String json = mapper.writeValueAsString(transformedMap);\r\n            System.out.println(json);\r\n        } catch (JsonProcessingException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String toCamelCase(String str) {\r\n        String[] parts = str.split(""_"");\r\n        StringBuilder camelCaseString = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCaseString.append(parts[i].substring(0, 1).toUpperCase()).append(parts[i].substring(1));\r\n        }\r\n        return camelCaseString.toString();\r\n    }\r\n}\r\n"
0,2,"misclassified_in_Test_8.csv.csv, misclassified_in_Test_2.csv.csv","import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n    \r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n        \r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        \r\n        System.out.println(result);\r\n        \r\n        sc.close();\r\n    }\r\n}\r\n"
0,2,"misclassified_in_Test_8.csv.csv, misclassified_in_Test_8.csv.csv","public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null) {\r\n            vibrator.vibrate(500);\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        activityIntent.putExtra(""stop_music"", true);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder: "" + event + ""\n"" + ""Comments: "" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(pendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n"
0,2,"misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv",ÃÂÃÂÃÂÃÂ¢ÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂ  [1.5
0,2,"misclassified_in_Test_2.csv.csv, misclassified_in_Test_2.csv.csv","import polars as pl\r\nimport numpy as np\r\n\r\ndef horizontal_median(df: pl.DataFrame) -> pl.DataFrame:\r\n    return df.with_columns(\r\n        pl.struct(df.select(pl.col(pl.Int64))).map_elements(\r\n            lambda row: float(np.nanmedian([v for v in row.values() if v is not None]))\r\n        ).alias(""Horizontal Median"")\r\n    )\r\n\r\ndf = pl.DataFrame({\r\n    ""ABC"": [""foo"", ""bar"", ""foo""],\r\n    ""A"": [1, 2, 3],\r\n    ""B"": [2, 1, None],\r\n    ""C"": [1, 2, 3]\r\n})\r\n\r\nprint(horizontal_median(df))\r\n"
0,1,misclassified_in_Test_6.csv.csv,"// Using WebClient with .block()\r\nWebClient client = WebClient.create();\r\nString result = client.get()\r\n    .uri(\""https://example.com\"")\r\n    .retrieve()\r\n    .bodyToMono(String.class)\r\n    .block();\r\n\r\n// Using RestTemplate (classic blocking)\r\nRestTemplate restTemplate = new RestTemplate();\r\nString result = restTemplate.getForObject(\""https://example.com\"", String.class);\r\n\r\n// Summary in plain logic\r\n// WebClient with .block() uses more memory and threads than RestTemplate in a blocking app\r\n// RestTemplate is simpler and cheaper for blocking apps\r\n// If you are not planning to go full reactive, prefer RestTemplate"
0,1,misclassified_in_Test_6.csv.csv,"// Does not compile\r\nclass Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }   \r\n        System.out.println(s); // error: cannot find symbol\r\n    }\r\n}\r\n\r\n// Compiles and works\r\nclass InstanceofFixed {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\n// Why the first one fails:\r\n// Pattern variables like `String s` are only in scope if the compiler can be sure they are initialized\r\n// In `else if (!(o instanceof String s))`, the scope of `s` does not extend beyond that block\r\n// So `s` is not visible after that block ends\r\n\r\n// This is not a bug in javac, it is the intended behavior according to the Java Language Specification\r\n\r\n// You do not need to report this\r\n// But to understand more, you can check the JLS section on pattern matching:\r\n// https://docs.oracle.com/javase/specs/jls/se17/html/jls-14.html#jls-14.11.1"
0,1,misclassified_in_Test_6.csv.csv,"package test.one;\r\n\r\npublic abstract class One {\r\n    protected abstract void whatever();\r\n\r\n    public void run() {\r\n        whatever();\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Three {\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        };\r\n        one.whatever(); // error\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n    public static void main(String[] args) {\r\n        new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        }.whatever(); // works\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"// MyCorsConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\n@Configuration\r\npublic class MyCorsConfig {\r\n\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.addAllowedOrigin(\""http://localhost:3000\"");\r\n        config.addAllowedMethod(\""*\"");\r\n        config.addAllowedHeader(\""*\"");\r\n        config.setAllowCredentials(true);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n\r\n        return new CorsFilter(source);\r\n    }\r\n}\r\n\r\n// SecurityConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .cors(Customizer.withDefaults())\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/calciatore/list\"").permitAll()\r\n                .anyRequest().authenticated()\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.context.Context;\r\n\r\npublic class Service2 {\r\n\r\n    public void processMessage(String traceIdFromSqs) {\r\n        Tracer tracer = GlobalOpenTelemetry.getTracer(\""example\"");\r\n\r\n        SpanContext remoteSpanContext = SpanContext.createFromRemoteParent(\r\n            traceIdFromSqs,\r\n            \""0000000000000001\"",\r\n            TraceFlags.getSampled(),\r\n            TraceState.getDefault()\r\n        );\r\n\r\n        Context remoteContext = Context.root().with(Span.wrap(remoteSpanContext));\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(\""consumeMessage\"")\r\n            .setParent(remoteContext)\r\n            .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // do something\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import java.util.*;\r\n\r\npublic class Main {\r\n    public static int solve(List<Integer> nums) {\r\n        int n = nums.size();\r\n        int[] inc = new int[n];\r\n        int[] dec = new int[n];\r\n        int[] inc2 = new int[n];\r\n\r\n        Arrays.fill(inc, 1);\r\n        Arrays.fill(dec, 1);\r\n        Arrays.fill(inc2, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) < nums.get(i)) {\r\n                    inc[i] = Math.max(inc[i], inc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    inc2[i] = Math.max(inc2[i], inc2[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    dec[i] = Math.max(dec[i], dec[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLen = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                int left = inc[i];\r\n                int middle = dec[j] - (i == j ? 1 : 0);\r\n                int right = inc2[j] - 1;\r\n                maxLen = Math.max(maxLen, left + middle + right);\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(solve(List.of(1, 100)));\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"ExecutorService forkJoinExecutor = new ForkJoinPool(30);\r\nExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\nList<String> result1 = forkJoinExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nList<String> result2 = virtualThreadExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nString callExternalSystem(int i) {\r\n    try {\r\n        Thread.sleep(10);\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n    return \""response \"" + i;\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import okhttp3.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        String fileName = \""3$ Mù F'RANçé_33902_Country_5_202105.csv\"";\r\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8)\r\n                .replace(\""+\"", \""%20\"");\r\n\r\n        String contentDisposition = \""attachment; filename*=UTF-8''\"" + encodedFileName;\r\n\r\n        File file = new File(\""your_file_path_here\"");\r\n        byte[] data = java.nio.file.Files.readAllBytes(file.toPath());\r\n\r\n        RequestBody body = RequestBody.create(data, MediaType.parse(\""application/octet-stream\""));\r\n\r\n        Request request = new Request.Builder()\r\n                .url(\""https://your_url_here\"")\r\n                .addHeader(\""Content-Type\"", \""application/octet-stream\"")\r\n                .addHeader(\""Content-Disposition\"", contentDisposition)\r\n                .addHeader(\""Authorization\"", \""Bearer your_token_here\"")\r\n                .post(body)\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n        System.out.println(response.code());\r\n        System.out.println(response.body().string());\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,// File: Parent.java\r\npackage example;\r\n\r\npublic abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\n// File: Child.java\r\npackage example;\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {\r\n    }\r\n}\r\n\r\n// File: Main.java\r\npackage another;\r\n\r\nimport example.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}
0,1,misclassified_in_Test_6.csv.csv,"import java.lang.foreign.*;\r\nimport java.lang.invoke.*;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\ntry (var arena = Arena.ofConfined()) {\r\n  SymbolLookup libc = Linker.nativeLinker().defaultLookup();\r\n  MethodHandle XOpenDisplay = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XOpenDisplay\"").get(), FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));\r\n  MethodHandle XInternAtom = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XInternAtom\"").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n  MethodHandle XChangeProperty = // already generated by jextract\r\n      Xlib_h.XChangeProperty;\r\n  MethodHandle XFlush = Xlib_h.XFlush;\r\n\r\n  MemorySegment display = (MemorySegment) XOpenDisplay.invoke(MemorySegment.NULL);\r\n  int screen = 0; // default screen\r\n\r\n  MemorySegment atomName = arena.allocateUtf8String(\""_NET_WM_XAPP_PROGRESS\"");\r\n  int atom = (int) XInternAtom.invoke(display, atomName, 0);\r\n\r\n  long window = rawHandle; // from JavaFX\r\n\r\n  for (int i = 0; i <= 100; i += 20) {\r\n      MemorySegment value = arena.allocate(ValueLayout.JAVA_LONG, i);\r\n      XChangeProperty.invoke(display, window, atom,\r\n              /* type = CARDINAL */ 6, /* format = 32 */ 32,\r\n              /* mode replace */ 0, value, 1);\r\n      XFlush.invoke(display);\r\n      Thread.sleep(500);\r\n  }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Yaml yaml = new Yaml();\r\n        try (InputStream input = new FileInputStream(\""config.yaml\"")) {\r\n            Map<String, Object> all = yaml.load(input);\r\n            Map<String, Object> part = (Map<String, Object>) all.get(\""interesting-setup\"");\r\n\r\n            Yaml customYaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            String serialized = new Yaml().dump(part);\r\n            InterestingSetup setup = customYaml.load(serialized);\r\n\r\n            System.out.println(setup.port);\r\n            System.out.println(setup.validation);\r\n            System.out.println(setup.parts);\r\n        }\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public class EscapeXML {\r\n\r\n    private static final String[] ESCAPES;\r\n\r\n    static {\r\n        int size = '>' + 1;\r\n        ESCAPES = new String[size];\r\n        ESCAPES['<'] = \""&lt;\"";\r\n        ESCAPES['>'] = \""&gt;\"";\r\n        ESCAPES['&'] = \""&amp;\"";\r\n        ESCAPES['\\''] = \""&#039;\"";\r\n        ESCAPES['\""'] = \""&#034;\"";\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (c < ESCAPES.length && ESCAPES[c] != null) {\r\n                result.append(ESCAPES[c]);\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXMLMap {\r\n\r\n    private static final Map<Character, String> ESCAPE_MAP = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPE_MAP.put('<', \""&lt;\"");\r\n        ESCAPE_MAP.put('>', \""&gt;\"");\r\n        ESCAPE_MAP.put('&', \""&amp;\"");\r\n        ESCAPE_MAP.put('\\'', \""&#039;\"");\r\n        ESCAPE_MAP.put('\""', \""&#034;\"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (ESCAPE_MAP.containsKey(c)) {\r\n                result.append(ESCAPE_MAP.get(c));\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) throws InterruptedException, ExecutionException {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        Set<Integer> resultSet = ConcurrentHashMap.newKeySet();\r\n\r\n        Callable<Void> task3 = () -> {\r\n            for (int i = 3; i <= n; i += 3) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task5 = () -> {\r\n            for (int i = 5; i <= n; i += 5) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task7 = () -> {\r\n            for (int i = 7; i <= n; i += 7) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        List<Callable<Void>> tasks = Arrays.asList(task3, task5, task7);\r\n        executor.invokeAll(tasks);\r\n        executor.shutdown();\r\n\r\n        int sum = 0;\r\n        for (int num : resultSet) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));     // Output: 40\r\n        System.out.println(fm.getSum(1000));   // Output: 272066\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String content = \""\""\""\r\n            {\r\n                \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\""\r\n            }\r\n            \""\""\"";\r\n        Aggregate aggregate = mapper.readValue(content, Aggregate.class);\r\n        System.out.println(mapper.writeValueAsString(aggregate));\r\n    }\r\n}\r\n\r\nrecord AggregateId(@JsonValue UUID id) {\r\n    @JsonCreator\r\n    public AggregateId(UUID id) {\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Aggregate {\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(\""aggregateId\"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        String weekA = \""2012-W48\"";\r\n        String weekB = \""2013-W03\"";\r\n        DateTimeFormatter weekFormatter = new DateTimeFormatterBuilder()\r\n                .appendPattern(\""uuuu-'W'ww\"")\r\n                .parseDefaulting(WeekFields.ISO.dayOfWeek(), 1)\r\n                .toFormatter(Locale.US);\r\n        LocalDate dateA = LocalDate.parse(weekA, weekFormatter);\r\n        LocalDate dateB = LocalDate.parse(weekB, weekFormatter);\r\n        boolean isBefore = dateA.isBefore(dateB);\r\n        long weeksBetween = ChronoUnit.WEEKS.between(dateA, dateB);\r\n        System.out.println(\""isBefore: \"" + isBefore);\r\n        System.out.println(\""weeksBetween: \"" + weeksBetween);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public DemoSecurityProblem() {\r\n        if (true) {\r\n            throw new RuntimeException(\""Construction failed!\"");\r\n        }\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Dangerous method executed!\"");\r\n    }\r\n    static MaliciousSubClass saved;\r\n    @Override\r\n    protected void finalize() {\r\n        saved = this;\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        try {\r\n            new MaliciousSubClass();\r\n        } catch (Exception ignored) {\r\n        }\r\n        System.gc();\r\n        Thread.sleep(1000);\r\n        if (MaliciousSubClass.saved != null) {\r\n            MaliciousSubClass.saved.doSomething();\r\n        } else {\r\n            System.out.println(\""No object was saved.\"");\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,class Demo<T extends Exception> {\r\n    void doSomething() throws T {\r\n        // some logic\r\n    }\r\n}\r\n\r\nclass Example {\r\n    <T extends Exception> void call(Demo<T> demo) throws T {\r\n        demo.doSomething();\r\n    }\r\n\r\n    void test() {\r\n        Demo<RuntimeException> demo = new Demo<>();\r\n        call(demo);\r\n    }\r\n}
0,1,misclassified_in_Test_6.csv.csv,"public class EqualSplit {\r\n\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0)\r\n            return false;\r\n        return helper(arr, 0, 0, 0, 0);\r\n    }\r\n\r\n    private static boolean helper(int[] arr, int index, int sum1, int count1, int sum2) {\r\n        if (index == arr.length) {\r\n            return count1 == arr.length / 2 && sum1 == sum2;\r\n        }\r\n\r\n        boolean putInGroup1 = false;\r\n        if (count1 < arr.length / 2) {\r\n            putInGroup1 = helper(arr, index + 1, sum1 + arr[index], count1 + 1, sum2);\r\n        }\r\n\r\n        boolean putInGroup2 = helper(arr, index + 1, sum1, count1, sum2 + arr[index]);\r\n\r\n        return putInGroup1 || putInGroup2;\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(\""TEST\\nTEST\\nTEST\"");\r\n        label.setStyle(\""-fx-background-color: green;\"");\r\n\r\n        Tooltip tooltip = new Tooltip(\""TOOLTIP\"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            tooltip.show(label, bounds.getMaxX(), bounds.getMaxY());\r\n        });\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_EXITED, e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}"
0,1,misclassified_in_Test_6.csv.csv,"public SliderSwitch() {\r\n        getStyleClass().add(\""slider-switch\"");\r\n    }\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n        @Override\r\n        public Object getBean() {\r\n            return SliderSwitch.this;\r\n        }\r\n        @Override\r\n        public String getName() {\r\n            return \""onAction\"";\r\n        }\r\n    };\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n    public final void setOnAction(EventHandler<ActionEvent> value) {\r\n        onActionProperty().set(value);\r\n    }\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onActionProperty().get();\r\n    }\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SliderSwitchSkin(this);\r\n    }\r\n    public SliderSwitchSkin(SliderSwitch control) {\r\n        super(control);\r\n        control.setOnMouseClicked(e -> {\r\n            control.fireEvent(new ActionEvent());\r\n        });\r\n    }\r\n    SliderSwitch source = (SliderSwitch) event.getSource();\r\n    System.out.println(\""Switch toggled: \"" + source);"
0,1,misclassified_in_Test_6.csv.csv,"@ParameterizedTest\r\n    @MethodSource(\""hashMapProvider\"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(\""1\"");\r\n        assertNotNull(obj1);\r\n    }\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(\""1\"", \""Obj1\"");\r\n        map.put(\""2\"", \""Obj2\"");\r\n        return Stream.of(map);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            \""2023-10-05T15:14:29.123456789Z\"",\r\n            \""2023-10-05T15:14:29.12345678Z\"",\r\n            \""2023-10-05T15:14:29.1234567Z\"",\r\n            \""2023-10-05T15:14:29.123456Z\"",\r\n            \""2023-10-05T15:14:29.12345Z\"",\r\n            \""2023-10-05T15:14:29.1234Z\"",\r\n            \""2023-10-05T15:14:29.123Z\"",\r\n            \""2023-10-05T15:14:29.12Z\"",\r\n            \""2023-10-05T15:14:29.1Z\"",\r\n            \""2023-10-05T15:14:29Z\""\r\n        };\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n            .appendPattern(\""yyyy-MM-dd'T'HH:mm:ss\"")\r\n            .optionalStart()\r\n            .appendFraction(ChronoField.NANO_OF_SECOND, 1, 9, true)\r\n            .optionalEnd()\r\n            .appendLiteral('Z')\r\n            .toFormatter();\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp.replace(\""Z\"", \""\""), formatter);\r\n                System.out.println(\""Parsed date: \"" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(\""Failed to parse: \"" + timestamp + \"" - \"" + e.getMessage());\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {  \r\n        String string1 = \""Great\"";  \r\n        int count;  \r\n        boolean hasDuplicate = false;\r\n        char string[] = string1.toCharArray();  \r\n        System.out.println(\""Duplicate characters in a given string:\"");  \r\n        for(int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for(int j = i + 1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicate = true;  \r\n            }  \r\n        }\r\n        if(!hasDuplicate) {  \r\n            System.out.println(\""no duplicates\"");  \r\n        }  \r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private Group circle;\r\n    private Button rotate;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private int angle = 0;\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n        rotate = new Button(\""Rotate Right\"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(\""-fx-background-color: GRAY\"");\r\n        Scene scene = new Scene(pane, 500, 400);\r\n        primaryStage.setTitle(\""Four-Color Wheel\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public void processButtonPress(ActionEvent event) {\r\n        angle += 90;\r\n        circle.setRotate(angle);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"return builder.build(); // auto-configured by Spring Boot + micrometer tracing\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n        \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    export:\r\n      datadog:\r\n        enabled: true\r\n        api-key: YOUR_DD_API_KEY\r\n    propagation:\r\n      type: W3C\r\n    sampling:\r\n      probability: 1.0\r\n    return builder.build();\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n      \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    log.info(\""in method2\"");\r\n    return \""ok\"";"
0,1,misclassified_in_Test_6.csv.csv,"private boolean wireframe = false;\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        box.setMaterial(new PhongMaterial(Color.BLUE));\r\n        box.setDrawMode(DrawMode.FILL);\r\n        box.setTranslateX(250);\r\n        box.setTranslateY(250);\r\n        box.setTranslateZ(400);\r\n        box.getTransforms().add(new Rotate(30, Rotate.X_AXIS));\r\n        box.getTransforms().add(new Rotate(30, Rotate.Y_AXIS));\r\n        Button toggleButton = new Button(\""Toggle Draw Mode\"");\r\n        toggleButton.setOnAction(e -> {\r\n            if (wireframe) {\r\n                box.setDrawMode(DrawMode.FILL);\r\n            } else {\r\n                box.setDrawMode(DrawMode.LINE);\r\n            }\r\n            wireframe = !wireframe;\r\n        });\r\n        VBox controls = new VBox(toggleButton);\r\n        controls.setAlignment(Pos.TOP_CENTER);\r\n        controls.setSpacing(10);\r\n        Group root = new Group(box);\r\n        SubScene subScene = new SubScene(root, 500, 500, true, SceneAntialiasing.BALANCED);\r\n        subScene.setFill(Color.LIGHTGRAY);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-1000);\r\n        subScene.setCamera(camera);\r\n        VBox layout = new VBox(controls, subScene);\r\n        Scene scene = new Scene(layout, 500, 550);\r\n        primaryStage.setTitle(\""Draw Mode Toggle\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n    public static void main(String[] args) throws InterruptedException {\r\n        try (var ts = new StructuredTaskScope<Void>()) {\r\n            ts.fork(() -> {\r\n                ScopedValue.runWhere(NAME, \""haha\"", () -> {\r\n                    System.out.println(\""Scoped value: \"" + NAME.get());\r\n                    return null;\r\n                });\r\n                return null;\r\n            });\r\n            ts.join();\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(\""-fx-background-color: black;\"");\r\n        Label testLabel = createTestLabel();\r\n        root.getChildren().add(testLabel);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(\""styles.css\"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(\""Placeholder\\nText\"");\r\n        testLabel.setLayoutX(100);\r\n        testLabel.setLayoutY(100);\r\n        testLabel.getStyleClass().add(\""test-label\"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.addEventFilter(MouseEvent.MOUSE_MOVED, e -> {\r\n            Bounds bounds = testLabel.getLayoutBounds();\r\n            if (e.getX() >= 0 && e.getY() >= 0 &&\r\n                e.getX() <= bounds.getWidth() &&\r\n                e.getY() <= bounds.getHeight()) {\r\n                doSomething();\r\n            } else {\r\n                doSomethingElse();\r\n            }\r\n        });\r\n        return testLabel;\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Inside label.\"");\r\n    }\r\n    public void doSomethingElse() {\r\n        System.out.println(\""Outside label.\"");\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    -fx-background-color: blue;\r\n    -fx-border-color: red;\r\n    -fx-font-family: \""Harlow Solid Italic\"";\r\n    -fx-font-size: 100;\r\n    -fx-padding: -40 20 0 20;"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        Label label1 = new Label(\""One two three\"");\r\n        TextField field1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(field1, 1, 0);\r\n        gridPane1.setHgap(20);\r\n        ColumnConstraints col1A = new ColumnConstraints();\r\n        ColumnConstraints col1B = new ColumnConstraints();\r\n        col1B.setHgrow(Priority.ALWAYS);\r\n        gridPane1.getColumnConstraints().addAll(col1A, col1B);\r\n        TitledPane titledPane1 = new TitledPane(\""Top\"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        GridPane gridPane2 = new GridPane();\r\n        Label label2 = new Label(\""Four five six seven\"");\r\n        TextField field2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(field2, 1, 0);\r\n        gridPane2.setHgap(20);\r\n        ColumnConstraints col2A = new ColumnConstraints();\r\n        ColumnConstraints col2B = new ColumnConstraints();\r\n        col2B.setHgrow(Priority.ALWAYS);\r\n        gridPane2.getColumnConstraints().addAll(col2A, col2B);\r\n        TitledPane titledPane2 = new TitledPane(\""Bottom\"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n        col1A.prefWidthProperty().bind(Bindings.createDoubleBinding(\r\n            () -> Math.max(label1.prefWidth(-1), label2.prefWidth(-1)),\r\n            label1.widthProperty(), label2.widthProperty()\r\n        ));\r\n        col2A.prefWidthProperty().bind(col1A.prefWidthProperty());\r\n        VBox root = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Override\r\n    public void start(Stage stage) {\r\n        Button menuButton = new Button(\""Menu\"");\r\n        ContextMenu contextMenu = new ContextMenu();\r\n        MenuItem item1 = new MenuItem(\""Option 1\"");\r\n        MenuItem item2 = new MenuItem(\""Option 2\"");\r\n        contextMenu.getItems().addAll(item1, item2);\r\n        menuButton.setOnAction(e -> {\r\n            Bounds bounds = menuButton.localToScreen(menuButton.getBoundsInLocal());\r\n            double x = bounds.getMinX();\r\n            double y = bounds.getMinY() - contextMenu.getHeight();\r\n            contextMenu.show(menuButton, x, y);\r\n        });\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuButton);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static String resourcesPath = \""C:\\\\Users\\\\java\\\\Desktop\\\\TestWaterMark\\\\\"";\r\n    public static String FILE_NAME = resourcesPath + \""test.pdf\"";\r\n    public static void main(String[] args) throws IOException {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n        String watermarkText = \""??? ??????\"";\r\n        String fontPath = resourcesPath + \""myCustomFont.ttf\"";\r\n        Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 16);\r\n        BaseFont baseFont = arabicFont.getBaseFont();\r\n        PdfReader reader = new PdfReader(byteArray);\r\n        PdfStamper stamper = new PdfStamper(reader, baos);\r\n        int numberOfPages = reader.getNumberOfPages();\r\n        for (int i = 1; i <= numberOfPages; i++) {\r\n            Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n            PdfContentByte overContent = stamper.getOverContent(i);\r\n            PdfGState state = new PdfGState();\r\n            state.setFillOpacity(0.3f);\r\n            overContent.saveState();\r\n            overContent.setGState(state);\r\n            float textWidth = baseFont.getWidthPoint(watermarkText, 13);\r\n            float height = baseFont.getAscentPoint(watermarkText, 13) - baseFont.getDescentPoint(watermarkText, 13);\r\n            for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n                for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n                    overContent.beginText();\r\n                    overContent.setFontAndSize(baseFont, 13);\r\n                    overContent.showTextAligned(Element.ALIGN_CENTER, watermarkText, x, y, 45f);\r\n                    overContent.endText();\r\n                }\r\n            }\r\n            overContent.restoreState();\r\n        }\r\n        stamper.close();\r\n        reader.close();\r\n        byteArray = baos.toByteArray();\r\n        File outputFile = new File(resourcesPath + \""output.pdf\"");\r\n        if (outputFile.exists()) outputFile.delete();\r\n        Files.write(outputFile.toPath(), byteArray);\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        this.buildGrid();\r\n    }\r\n    private void buildGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private RSAKey rsaKey;\r\n    private final DefaultUserDetailsService defaultUserDetailsService;\r\n    public SecurityConfig(DefaultUserDetailsService defaultUserDetailsService) {\r\n        this.defaultUserDetailsService = defaultUserDetailsService;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .cors(Customizer.withDefaults())\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\""/auth/**\"").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .userDetailsService(defaultUserDetailsService)\r\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter())))\r\n                .build();\r\n    }\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n    @Bean\r\n    public PasswordEncoder getPasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    @Bean\r\n    public JWKSource<SecurityContext> jwkSource() {\r\n        rsaKey = generateRsa();\r\n        JWKSet jwkSet = new JWKSet(rsaKey);\r\n        return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\r\n    }\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        return NimbusJwtDecoder.withPublicKey(rsaKey.toRSAPublicKey()).build();\r\n    }\r\n    @Bean\r\n    JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwks) {\r\n        return new NimbusJwtEncoder(jwks);\r\n    }\r\n    @Bean\r\n    CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowedOrigins(List.of(\""http://localhost:4200\""));\r\n        config.setAllowedMethods(List.of(\""GET\"", \""POST\"", \""DELETE\""));\r\n        config.setAllowedHeaders(List.of(\""Authorization\"", \""Content-Type\""));\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n        return source;\r\n    }\r\n    private RSAKey generateRsa() {\r\n        try {\r\n            KeyPairGenerator generator = KeyPairGenerator.getInstance(\""RSA\"");\r\n            generator.initialize(2048);\r\n            KeyPair keyPair = generator.generateKeyPair();\r\n            return new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())\r\n                    .privateKey((RSAPrivateKey) keyPair.getPrivate())\r\n                    .keyID(UUID.randomUUID().toString())\r\n                    .build();\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n    private JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n        JwtGrantedAuthoritiesConverter authoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n        authoritiesConverter.setAuthorityPrefix(\""ROLE_\"");\r\n        authoritiesConverter.setAuthoritiesClaimName(\""scope\"");\r\n        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\n        converter.setJwtGrantedAuthoritiesConverter(authoritiesConverter);\r\n        return converter;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final PDFDocument pdfDocument;\r\n    private final PSConverter converter;\r\n    public PDFProcessor(PDFDocument pdfDocument, PSConverter converter) {\r\n        this.pdfDocument = pdfDocument;\r\n        this.converter = converter;\r\n    }\r\n    public byte[] process(byte[] input) throws IOException {\r\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\r\n        pdfDocument.load(inputStream);\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        converter.convert(pdfDocument, outputStream);\r\n        return outputStream.toByteArray();\r\n    }\r\n    @Mock\r\n    PDFDocument pdfDocument;\r\n    @Mock\r\n    PSConverter converter;\r\n    @InjectMocks\r\n    PDFProcessor processor;\r\n    @Test\r\n    void testProcess() throws IOException {\r\n        byte[] content = \""test\"".getBytes();\r\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\r\n        doNothing().when(pdfDocument).load(any(ByteArrayInputStream.class));\r\n        doAnswer(invocation -> {\r\n            ByteArrayOutputStream os = invocation.getArgument(1);\r\n            os.write(content);\r\n            return null;\r\n        }).when(converter).convert(any(), any(ByteArrayOutputStream.class));\r\n        byte[] result = processor.process(\""input\"".getBytes());\r\n        assertArrayEquals(content, result);\r\n    }\r\n    public void load(ByteArrayInputStream inputStream) {}\r\n    public void convert(PDFDocument document, ByteArrayOutputStream outputStream) {}"
0,1,misclassified_in_Test_6.csv.csv,"@Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/\"").access(new WebExpressionAuthorizationManager(\""hasIpAddress('127.0.0.1')\""))\r\n                .anyRequest().authenticated()\r\n            )\r\n            .httpBasic(Customizer.withDefaults());\r\n        return http.build();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private final AuthenticationManager authenticationManager;\r\n    public SecurityConfig(AuthenticationManager authenticationManager) {\r\n        this.authenticationManager = authenticationManager;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        BearerTokenAuthenticationFilter bearerFilter = new BearerTokenAuthenticationFilter(authenticationManager);\r\n        bearerFilter.setAuthenticationFailureHandler(new JwtAuthenticationFailureHandler());\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n            )\r\n            .exceptionHandling(exceptions -> exceptions\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint())\r\n            )\r\n            .addFilterBefore(bearerFilter, BearerTokenAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n    public static class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n        @Override\r\n        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }\r\n    public static class JwtAuthenticationFailureHandler implements AuthenticationFailureHandler {\r\n        @Override\r\n        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"public static void main(String[] args) {\r\n        List<String> products = List.of(\r\n            \""NIVEA BODY LOTION EXPRESS HYDRATION 200 ML HYPERmart\"",\r\n            \""HYPERMART WINTER CREAM\"",\r\n            \""SKIN HYDRATION BALM\""\r\n        );\r\n        String query = \""HYDRATION LOTION\"";\r\n        List<String> results = searchProducts(products, query);\r\n        results.forEach(System.out::println);\r\n    }\r\n    static List<String> searchProducts(List<String> products, String query) {\r\n        String[] tokens = query.toLowerCase().split(\""\\\\s+\"");\r\n        Map<String, Integer> scored = new LinkedHashMap<>();\r\n        for (String product : products) {\r\n            String pl = product.toLowerCase();\r\n            int score = 0;\r\n            for (String word : tokens) {\r\n                if (pl.contains(word))  score++;\r\n            }\r\n            if (score > 0) scored.put(product, score);\r\n        }\r\n        List<Map.Entry<String,Integer>> list = new ArrayList<>(scored.entrySet());\r\n        list.sort((a,b) -> b.getValue().compareTo(a.getValue()));\r\n        List<String> out = new ArrayList<>();\r\n        for (var e : list) out.add(e.getKey());\r\n        return out;\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int[] values = testState.values;\r\n        int length = values.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(values[i]);\r\n        }\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        for (int value : testState.values) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n    @State(Scope.Thread)\r\n    public static class TestState {\r\n        int[] values;\r\n        @Setup(Level.Iteration)\r\n        public void setup() {\r\n            values = new int[1000];\r\n            for (int i = 0; i < values.length; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"@State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }"
0,1,misclassified_in_Test_6.csv.csv,"private static final int DIVISIONS = 64;\r\n    private static final float RADIUS = 200;\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TriangleMesh mesh = createTexturedSphere(RADIUS, DIVISIONS);\r\n        MeshView earth = new MeshView(mesh);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(\""/images/earth2.jpg\"")));\r\n        earth.setMaterial(material);\r\n        Group root = new Group(earth);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setFill(Color.BLACK);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-600);\r\n        scene.setCamera(camera);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Textured Earth Sphere\"");\r\n        primaryStage.show();\r\n    }\r\n    private TriangleMesh createTexturedSphere(float radius, int divisions) {\r\n        TriangleMesh mesh = new TriangleMesh();\r\n        int div = divisions;\r\n        int pointCount = (div + 1) * (div + 1);\r\n        float[] points = new float[pointCount * 3];\r\n        float[] texCoords = new float[pointCount * 2];\r\n        int[] faces = new int[div * div * 6 * 2];\r\n        int idx = 0, tidx = 0;\r\n        for (int y = 0; y <= div; y++) {\r\n            double phi = Math.PI * y / div;\r\n            for (int x = 0; x <= div; x++) {\r\n                double theta = 2 * Math.PI * x / div;\r\n                float px = (float) (radius * Math.sin(phi) * Math.cos(theta));\r\n                float py = (float) (radius * Math.cos(phi));\r\n                float pz = (float) (radius * Math.sin(phi) * Math.sin(theta));\r\n                points[idx++] = px;\r\n                points[idx++] = py;\r\n                points[idx++] = pz;\r\n                texCoords[tidx++] = (float) x / div;\r\n                texCoords[tidx++] = (float) y / div;\r\n            }\r\n        }\r\n        int fidx = 0;\r\n        for (int y = 0; y < div; y++) {\r\n            for (int x = 0; x < div; x++) {\r\n                int p00 = y * (div + 1) + x;\r\n                int p01 = p00 + 1;\r\n                int p10 = p00 + div + 1;\r\n                int p11 = p10 + 1;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p10; faces[fidx++] = p10;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p01; faces[fidx++] = p01;\r\n            }\r\n        }\r\n        mesh.getPoints().setAll(points);\r\n        mesh.getTexCoords().setAll(texCoords);\r\n        mesh.getFaces().setAll(faces);\r\n        return mesh;\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }"
