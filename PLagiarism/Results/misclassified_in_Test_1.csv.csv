Code,label,predicted_label
"[""import org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@RestController\r\npublic class MyController {\r\n\r\n    private final RestTemplate restTemplate;\r\n\r\n    public MyController(RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n\r\n    @GetMapping(""/data"")\r\n    public String getData() {\r\n        String url = ""https://example.com/data"";\r\n        return restTemplate.getForObject(url, String.class);\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate() {\r\n        return new RestTemplate();\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\n\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass MyControllerTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    void testGetData() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isOk());\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanBuilder;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.context.Context;\r\n\r\npublic class SqsTracePropagation {\r\n\r\n    private final Tracer tracer;\r\n\r\n    public SqsTracePropagation(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void consumeMessage(String traceId) {\r\n        SpanContext spanContext = SpanContext.create(\r\n                traceId,\r\n                Span.current().getSpanContext().getSpanId(),\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Context remoteContext = Context.current().with(Span.wrap(spanContext));\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(""consumeMessage"")\r\n                .setParent(remoteContext)\r\n                .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // Do processing here\r\n            System.out.println(""Processing message..."");\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nclass SqsTracePropagationTest {\r\n\r\n    private final Tracer tracer = GlobalOpenTelemetry.getTracer(""test-tracer"");\r\n\r\n    @Test\r\n    void testConsumeMessage() {\r\n        String traceId = ""0af7651916cd43dd8448eb211c80319c""; // Example trace ID\r\n        SqsTracePropagation sqsTracePropagation = new SqsTracePropagation(tracer);\r\n        sqsTracePropagation.consumeMessage(traceId);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class Solution {\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        int[] inc = new int[n];\r\n        int[] dec = new int[n];\r\n        \r\n        Arrays.fill(inc, 1);\r\n        Arrays.fill(dec, 1);\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            if (list.get(i) > list.get(i - 1)) {\r\n                inc[i] = inc[i - 1] + 1;\r\n            }\r\n        }\r\n\r\n        for (int i = n - 2; i >= 0; i--) {\r\n            if (list.get(i) > list.get(i + 1)) {\r\n                dec[i] = dec[i + 1] + 1;\r\n            }\r\n        }\r\n\r\n        int result = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                if (j > i && list.get(j) >= list.get(j - 1)) break;\r\n                int left = (i > 0) ? inc[i - 1] : 0;\r\n                int mid = j - i + 1;\r\n                int right = (j < n - 1) ? dec[j + 1] : 0;\r\n                result = Math.max(result, left + mid + right);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        File file = new File(""path/to/file.csv"");\r\n        byte[] data = Files.readAllBytes(file.toPath());\r\n\r\n        RequestBody requestBody = RequestBody.create(data, MediaType.parse(""application/octet-stream""));\r\n\r\n        String fileName = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String contentDisposition = ""attachment; filename=\"""" + fileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://your-url-here"")\r\n                .post(requestBody)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", new String(contentDisposition.getBytes(), ""ISO-8859-1""))\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            System.out.println(response.code());\r\n            System.out.println(response.body().string());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {}\r\n}\r\n\r\nimport anotherpackage.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self(); // No access violation\r\n        System.out.println(innerChild);\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n""]",0,1
"[""package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    private static final String NET_WM_NAME = ""_NET_WM_NAME"";\r\n    private static final String NET_WM_STATE = ""_NET_WM_STATE"";\r\n    private static final String NET_WM_XAPP_PROGRESS = ""_NET_WM_XAPP_PROGRESS"";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session == null) throw new RuntimeException(""Failed to open X11 display"");\r\n\r\n                        MemorySegment atomNetWmState = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_STATE), 0);\r\n                        MemorySegment atomNetWmName = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_NAME), 0);\r\n                        MemorySegment atomNetWmProgress = Xlib_h.XInternAtom(x11Session, arena.allocateFrom(NET_WM_XAPP_PROGRESS), 0);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(\r\n                                x11Session,\r\n                                MemorySegment.ofAddress(rawHandle).address(),\r\n                                atomNetWmProgress.address(),\r\n                                6,\r\n                                32,\r\n                                0,\r\n                                progressData,\r\n                                1\r\n                            );\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Yaml yaml = new Yaml();\r\n        try (InputStream inputStream = new FileInputStream(""config.yaml"")) {\r\n            Map<String, Object> yamlConfig = yaml.load(inputStream);\r\n            Map<String, Object> interestingMap = (Map<String, Object>) yamlConfig.get(""interesting-setup"");\r\n\r\n            Yaml customYaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            InterestingSetup finalObject = customYaml.loadAs(yaml.dump(interestingMap), InterestingSetup.class);\r\n\r\n            System.out.println(finalObject);\r\n        }\r\n    }\r\n}\r\n\r\nclass InterestingSetup {\r\n    private int port;\r\n    private boolean validation;\r\n    private List<Map<String, String>> parts;\r\n\r\n    public int getPort() {\r\n        return port;\r\n    }\r\n\r\n    public void setPort(int port) {\r\n        this.port = port;\r\n    }\r\n\r\n    public boolean isValidation() {\r\n        return validation;\r\n    }\r\n\r\n    public void setValidation(boolean validation) {\r\n        this.validation = validation;\r\n    }\r\n\r\n    public List<Map<String, String>> getParts() {\r\n        return parts;\r\n    }\r\n\r\n    public void setParts(List<Map<String, String>> parts) {\r\n        this.parts = parts;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""InterestingSetup{"" +\r\n                ""port="" + port +\r\n                "", validation="" + validation +\r\n                "", parts="" + parts +\r\n                '}';\r\n    }\r\n}\r\n\r\nyaml\r\nconfig:\r\n  key-1: val-1\r\nother-config:\r\n  lang: en\r\n  year: 1906\r\ninteresting-setup:\r\n  port: 1234\r\n  validation: false\r\n  parts:\r\n    - on-start: backup\r\n      on-stop: say-goodbye\r\n""]",0,1
"[""// For Response Body:\r\n@ApiResponse(responseCode = ""200"", \r\n    content = @Content(\r\n        examples = @ExampleObject(\r\n            name = ""SUCCESS RESPONSE"", \r\n            value = ""{\""key\"": \""value\""}""\r\n        ), \r\n        mediaType = MediaType.APPLICATION_JSON_VALUE\r\n    )\r\n)\r\n\r\n// For Request Body:\r\n@io.swagger.v3.oas.annotations.parameters.RequestBody(\r\n    content = @Content(\r\n        examples = @ExampleObject(\r\n            name = ""REQUEST BODY"", \r\n            value = ""{\""key\"": \""value\""}""\r\n        )\r\n    )\r\n)\r\n""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n\r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) return null;\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            String escape = ESCAPES.get(c);\r\n            if (escape != null) {\r\n                sb.append(escape);\r\n            } else {\r\n                sb.append(c);\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(escape(""<div class='test'>&\""</div>"")); // Output: &lt;div class=&#039;test&#039;&gt;&amp;&#034;&lt;/div&gt;\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;\r\nimport org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\n\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.get;\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.put;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\n@SpringBootTest\r\nclass SecurityConfigTest {\r\n\r\n    @InjectMocks\r\n    private SecurityConfig securityConfig;\r\n\r\n    @Mock\r\n    private WebApplicationContext context;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @Value(""${auth0.audience}"")\r\n    private String audience;\r\n\r\n    @Value(""${spring.security.oauth2.resourceserver.jwt.issuer-uri}"")\r\n    private String issuer;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        mockMvc = MockMvcBuilders\r\n                .webAppContextSetup(context)\r\n                .apply(SecurityMockMvcConfigurers.springSecurity())\r\n                .build();\r\n    }\r\n\r\n    @Test\r\n    void testGetActuatorEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void testPutDataEndpointWithValidScope() throws Exception {\r\n        mockMvc.perform(put(""/data/123"")\r\n                        .with(SecurityMockMvcRequestPostProcessors.jwt()\r\n                                .authorities(new SimpleGrantedAuthority(""SCOPE_data:write""))))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void testPutDataEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(put(""/data/123""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void testGetDataEndpointWithoutAuth() throws Exception {\r\n        mockMvc.perform(get(""/data/123""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> set = ConcurrentHashMap.newKeySet();\r\n\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        executor.submit(() -> {\r\n            for (int i = 3; i <= n; i += 3) set.add(i);\r\n        });\r\n        executor.submit(() -> {\r\n            for (int i = 5; i <= n; i += 5) set.add(i);\r\n        });\r\n        executor.submit(() -> {\r\n            for (int i = 7; i <= n; i += 7) set.add(i);\r\n        });\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n\r\n        return set.stream().mapToInt(Integer::intValue).sum();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));      // Output: 40\r\n        System.out.println(fm.getSum(1000));    // Output: 272066\r\n        System.out.println(fm.getSum(76293));   // Output: 1365433807\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n\r\nimport java.io.IOException;\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n        String content = """"""\r\n                {\r\n                   ""aggregateId"": ""3f61aede-83dd-4049-a6ff-337887b6b807""\r\n                }\r\n                """""";\r\n\r\n        Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n        System.out.println(objectMapper.writeValueAsString(aggregate));\r\n    }\r\n\r\n    public record AggregateId(UUID id) {\r\n\r\n        @JsonCreator\r\n        public AggregateId(String id) {\r\n            this(UUID.fromString(id));\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return id.toString();\r\n        }\r\n    }\r\n\r\n    public static class Aggregate {\r\n\r\n        @JsonSerialize(using = AggregateIdSerializer.class)\r\n        @JsonDeserialize(using = AggregateIdDeserializer.class)\r\n        public final AggregateId aggregateId;\r\n\r\n        @JsonCreator\r\n        public Aggregate(\r\n                @JsonProperty(""aggregateId"") AggregateId aggregateId\r\n        ) {\r\n            this.aggregateId = aggregateId;\r\n        }\r\n    }\r\n}\r\n\r\nimport com.fasterxml.jackson.core.JsonGenerator;\r\nimport com.fasterxml.jackson.databind.JsonSerializer;\r\nimport com.fasterxml.jackson.databind.SerializerProvider;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class AggregateIdSerializer extends JsonSerializer<Main.AggregateId> {\r\n\r\n    @Override\r\n    public void serialize(Main.AggregateId value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\r\n        gen.writeString(value.toString());\r\n    }\r\n}\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.JsonDeserializer;\r\n\r\nimport java.io.IOException;\r\nimport java.util.UUID;\r\n\r\npublic class AggregateIdDeserializer extends JsonDeserializer<Main.AggregateId> {\r\n\r\n    @Override\r\n    public Main.AggregateId deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\r\n        return new Main.AggregateId(p.getValueAsString());\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.temporal.ChronoUnit;\r\nimport java.time.Year;\r\nimport java.time.YearWeek;\r\n\r\npublic class WeekOperations {\r\n    public static void main(String[] args) {\r\n        YearWeek weekA = YearWeek.of(2012, 48);\r\n        YearWeek weekB = YearWeek.of(2013, 3);\r\n\r\n        System.out.println(weekA.isBefore(weekB)); // true\r\n        System.out.println(ChronoUnit.WEEKS.between(weekA.atDay(1), weekB.atDay(1))); // 6\r\n    }\r\n}\r\n\r\nclass YearWeek implements Comparable<YearWeek> {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    private YearWeek(int year, int week) {\r\n        this.year = year;\r\n        this.week = week;\r\n    }\r\n\r\n    public static YearWeek of(int year, int week) {\r\n        if (week < 1 || week > Year.of(year).length() / 7 + (Year.of(year).length() % 7 > 0 ? 1 : 0)) {\r\n            throw new IllegalArgumentException(""Invalid week: "" + week + "" for year: "" + year);\r\n        }\r\n        return new YearWeek(year, week);\r\n    }\r\n\r\n    public boolean isBefore(YearWeek other) {\r\n        return this.compareTo(other) < 0;\r\n    }\r\n\r\n    public boolean isAfter(YearWeek other) {\r\n        return this.compareTo(other) > 0;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(YearWeek other) {\r\n        if (this.year != other.year) {\r\n            return Integer.compare(this.year, other.year);\r\n        }\r\n        return Integer.compare(this.week, other.week);\r\n    }\r\n\r\n    public java.time.LocalDate atDay(int dayOfWeek) {\r\n        return java.time.LocalDate.ofYearDay(year, 1)\r\n                .with(java.time.temporal.WeekFields.ISO.weekOfYear(), week)\r\n                .with(java.time.temporal.WeekFields.ISO.dayOfWeek(), dayOfWeek);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(""%d-W%02d"", year, week);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        label.setOnMouseEntered(e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.setOnMouseExited(e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\nclass MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"", // 9 digits\r\n            ""2023-10-05T15:14:29.12345678Z"",  // 8 digits\r\n            ""2023-10-05T15:14:29.1234567Z"",   // 7 digits\r\n            ""2023-10-05T15:14:29.123456Z"",    // 6 digits\r\n            ""2023-10-05T15:14:29.12345Z"",     // 5 digits\r\n            ""2023-10-05T15:14:29.1234Z"",      // 4 digits\r\n            ""2023-10-05T15:14:29.123Z"",       // 3 digits\r\n            ""2023-10-05T15:14:29.12Z"",        // 2 digits\r\n            ""2023-10-05T15:14:29.1Z"",         // 1 digit\r\n            ""2023-10-05T15:14:29Z""            // no fractional seconds\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]['Z']"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp.replace(""Z"", """"), formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        char[] string = string1.toCharArray();  \r\n        boolean hasDuplicate = false;\r\n\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n        for (int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for (int j = i + 1; j < string.length; j++) {  \r\n                if (string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if (count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicate = true;\r\n            }  \r\n        }  \r\n        if (!hasDuplicate) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }  \r\n}\r\n\r\n\r\n   Duplicate characters in a given string:\r\n   r\r\n   e\r\n   t\r\n   s\r\n   i\r\n   \r\n\r\n   Duplicate characters in a given string:\r\n   no duplicates\r\n   \r\n\r\n   Duplicate characters in a given string:\r\n   a\r\n   r\r\n   g\r\n   m\r\n   ""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private Group circle;\r\n    private double rotationAngle = 0;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        blueArc = createArc(0, Color.BLUE);\r\n        greenArc = createArc(90, Color.GREEN);\r\n        yellowArc = createArc(180, Color.YELLOW);\r\n        redArc = createArc(270, Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 500, 500);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Arc createArc(double startAngle, Color color) {\r\n        Arc arc = new Arc(250, 250, 150, 150, startAngle, 90);\r\n        arc.setType(ArcType.ROUND);\r\n        arc.setStroke(color);\r\n        arc.setFill(color);\r\n        return arc;\r\n    }\r\n\r\n    private void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.canvas.Canvas;\r\nimport javafx.scene.canvas.GraphicsContext;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.stage.Stage;\r\n\r\npublic class DynamicDrawMode extends Application {\r\n\r\n    private boolean drawMode = true; // true = line, false = rectangle\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Canvas canvas = new Canvas(800, 600);\r\n        GraphicsContext gc = canvas.getGraphicsContext2D();\r\n\r\n        canvas.setOnMouseDragged(e -> {\r\n            gc.setFill(Color.LIGHTBLUE);\r\n            gc.setStroke(Color.BLACK);\r\n            gc.setLineWidth(2);\r\n\r\n            if (drawMode) {\r\n                gc.strokeLine(e.getX(), e.getY(), e.getX() + 1, e.getY() + 1);\r\n            } else {\r\n                gc.fillRect(e.getX(), e.getY(), 20, 20);\r\n            }\r\n        });\r\n\r\n        canvas.setOnKeyPressed(e -> {\r\n            if (e.getCode() == KeyCode.SPACE) {\r\n                drawMode = !drawMode;\r\n            }\r\n        });\r\n\r\n        StackPane root = new StackPane(canvas);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        canvas.requestFocus();\r\n\r\n        stage.setTitle(""Dynamic Draw Mode"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""void main() throws InterruptedException {\r\n    final var NAME = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope<>()) {\r\n        ScopedValue.where(NAME, ""haha"", () -> {\r\n            ts.fork(() -> {\r\n                return ScopedValue.where(NAME, ""haha"", () -> null);\r\n            });\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n\r\njava\r\npublic class PlaygroundTest {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        new Playground().main();\r\n        System.out.println(""Test passed."");\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        Label label = createTestLabel();\r\n        root.getChildren().add(label);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(getClass().getResource(""/ExampleStylesheet.css"").toExternalForm());\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n        testLabel.setOnMouseEntered(event -> doSomething());\r\n        testLabel.setOnMouseExited(event -> doSomethingElse());\r\n\r\n        testLabel.setMouseTransparent(true);\r\n        testLabel.setOnMouseMoved(this::handleMouseMove);\r\n\r\n        return testLabel;\r\n    }\r\n\r\n    private void handleMouseMove(MouseEvent event) {\r\n        Label label = (Label) event.getSource();\r\n        double x = event.getX();\r\n        double y = event.getY();\r\n        double width = label.getWidth();\r\n        double height = label.getHeight();\r\n\r\n        if (x >= 0 && x <= width && y >= 0 && y <= height) {\r\n            label.setMouseTransparent(false);\r\n        } else {\r\n            label.setMouseTransparent(true);\r\n        }\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.test-label {\r\n    -fx-background-color: blue;\r\n    -fx-border-color: red;\r\n    -fx-font-family: ""Harlow Solid Italic"";\r\n    -fx-font-size: 100;\r\n    -fx-padding: -40 20 0 20;\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Menu;\r\nimport javafx.scene.control.MenuBar;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Popup;\r\n\r\npublic class MenuOpenUpwards extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        MenuBar menuBar = new MenuBar();\r\n        Menu menu = new Menu(""Options"");\r\n        MenuItem item1 = new MenuItem(""Option 1"");\r\n        MenuItem item2 = new MenuItem(""Option 2"");\r\n        menu.getItems().addAll(item1, item2);\r\n        menuBar.getMenus().add(menu);\r\n\r\n        menu.setOnShowing(e -> {\r\n            Popup popup = new Popup();\r\n            popup.getContent().add(menu.getItems().get(0).getParentPopup().getSkin().getNode());\r\n            popup.show(menuBar, menuBar.localToScreen(0, 0).getX(), menuBar.localToScreen(0, 0).getY() - popup.getHeight());\r\n        });\r\n\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuBar);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Menu Open Upwards"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initializeGrid();\r\n    }\r\n\r\n    private void initializeGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class MainViewController implements Initializable {\r\n\r\n    @FXML\r\n    private MenuItem mnuItemNew;\r\n\r\n    @FXML\r\n    private ScrollPane scpGrid;\r\n\r\n    @FXML\r\n    public void onMnuItemNewAction() {\r\n        int cols = 10;\r\n        int rows = 10;\r\n        int horizontalGap = 1;\r\n        int verticalGap = 1;\r\n        int fieldHorizontalSize = 40;\r\n        int fieldVerticalSize = 40;\r\n        var newGrid = new Grid(cols, rows, horizontalGap, verticalGap, fieldHorizontalSize, fieldVerticalSize);\r\n        newGrid.setAlignment(Pos.CENTER);\r\n        scpGrid.setContent(newGrid);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\n\r\nimport static org.mockito.ArgumentMatchers.any;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass YourTest {\r\n\r\n    private PDFDocument pdfDocument;\r\n    private PSConverter converter;\r\n    private byte[] content = ""test content"".getBytes();\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        try (MockedConstruction<PDFDocument> pdfMock = Mockito.mockConstruction(PDFDocument.class, (mock, context) -> {\r\n            doNothing().when(mock).load(any(ByteArrayInputStream.class));\r\n        });\r\n             MockedConstruction<PSConverter> converterMock = Mockito.mockConstruction(PSConverter.class, (mock, context) -> {\r\n                 doAnswer(invocation -> {\r\n                     ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n                     outputStream.write(content);\r\n                     return outputStream;\r\n                 }).when(mock).convert(any(), any(ByteArrayOutputStream.class));\r\n             })) {\r\n\r\n            pdfDocument = pdfMock.constructed().get(0);\r\n            converter = converterMock.constructed().get(0);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testConversion() {\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        converter.convert(new Object(), outputStream);\r\n        assert new String(outputStream.toByteArray()).equals(new String(content));\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.mongodb.core.MongoTemplate;\r\nimport org.springframework.data.mongodb.core.aggregation.Aggregation;\r\nimport org.springframework.data.mongodb.core.aggregation.AggregationOperation;\r\nimport org.springframework.data.mongodb.core.aggregation.UnionWithOperation;\r\nimport org.springframework.data.mongodb.core.query.Criteria;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class ProductService {\r\n\r\n    private final MongoTemplate mongoTemplate;\r\n\r\n    public ProductService(MongoTemplate mongoTemplate) {\r\n        this.mongoTemplate = mongoTemplate;\r\n    }\r\n\r\n    public List<Product> searchProducts(String searchText, List<Integer> companyNos, List<String> statuses, int page, int size) {\r\n        Pageable pageable = PageRequest.of(page, size);\r\n\r\n        Criteria baseCriteria = Criteria.where(""companyNo"").in(companyNos)\r\n                .and(""status"").in(statuses);\r\n\r\n        Criteria productNameCriteria = Criteria.where(""productName"").regex(searchText, ""i"");\r\n        Criteria subCategoryCriteria = Criteria.where(""subCategoryName"").regex(searchText, ""i"");\r\n        Criteria categoryCriteria = Criteria.where(""categoryName"").regex(searchText, ""i"");\r\n        Criteria brandCriteria = Criteria.where(""brandName"").regex(searchText, ""i"");\r\n\r\n        AggregationOperation matchProductName = Aggregation.match(new Criteria().andOperator(baseCriteria, productNameCriteria));\r\n        AggregationOperation matchSubCategory = Aggregation.match(new Criteria().andOperator(baseCriteria, subCategoryCriteria));\r\n        AggregationOperation matchCategory = Aggregation.match(new Criteria().andOperator(baseCriteria, categoryCriteria));\r\n        AggregationOperation matchBrand = Aggregation.match(new Criteria().andOperator(baseCriteria, brandCriteria));\r\n\r\n        UnionWithOperation unionWithSubCategory = UnionWithOperation.unionWith(""product"").pipeline(matchSubCategory);\r\n        UnionWithOperation unionWithCategory = UnionWithOperation.unionWith(""product"").pipeline(matchCategory);\r\n        UnionWithOperation unionWithBrand = UnionWithOperation.unionWith(""product"").pipeline(matchBrand);\r\n\r\n        Aggregation aggregation = Aggregation.newAggregation(\r\n                matchProductName,\r\n                unionWithSubCategory,\r\n                unionWithCategory,\r\n                unionWithBrand,\r\n                Aggregation.skip(pageable.getOffset()),\r\n                Aggregation.limit(pageable.getPageSize())\r\n        );\r\n\r\n        return mongoTemplate.aggregate(aggregation, ""product"", Product.class).getMappedResults();\r\n    }\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@RunWith(SpringRunner.class)\r\npublic class ProductServiceTest {\r\n\r\n    @Autowired\r\n    private ProductService productService;\r\n\r\n    @Test\r\n    public void testSearchProducts() {\r\n        String searchText = ""HYPER"";\r\n        List<Integer> companyNos = List.of(10000009);\r\n        List<String> statuses = List.of(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"");\r\n        int page = 0;\r\n        int size = 10;\r\n\r\n        List<Product> products = productService.searchProducts(searchText, companyNos, statuses, page, size);\r\n\r\n        assertFalse(products.isEmpty());\r\n        products.forEach(product -> System.out.println(product.getProductName()));\r\n    }\r\n}\r\n\r\nshell\r\ndb.product.createIndex({ productName: ""text"", subCategoryName: ""text"", categoryName: ""text"", brandName: ""text"" })\r\n""]",0,1
"[""public static final String PATH_TO_STYLESHEET = App.class.getResourceAsStream(""/style/style.css"") != null ?\r\n        ""/style/style.css"" : ""Resource not found"";\r\npublic static final String PATH_TO_IMG = App.class.getResourceAsStream(""/img/example.png"") != null ?\r\n        ""/img/example.png"" : ""Resource not found"";\r\npublic static final String PATH_TO_SOUNDS = App.class.getResourceAsStream(""/sound/example.wav"") != null ?\r\n        ""/sound/example.wav"" : ""Resource not found"";\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class ResourceTest {\r\n\r\n    @Test\r\n    void testStylesheetPath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_STYLESHEET);\r\n    }\r\n\r\n    @Test\r\n    void testImagePath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_IMG);\r\n    }\r\n\r\n    @Test\r\n    void testSoundPath() {\r\n        assertNotEquals(""Resource not found"", App.PATH_TO_SOUNDS);\r\n    }\r\n}\r\n\r\nxml\r\n<plugin>\r\n    <groupId>org.openjfx</groupId>\r\n    <artifactId>javafx-maven-plugin</artifactId>\r\n    <version>${javafx.maven.plugin.version}</version>\r\n    <configuration>\r\n        <release>${maven.compiler.release}</release>\r\n        <jlinkImageName>App</jlinkImageName>\r\n        <launcher>launcher</launcher>\r\n        <mainClass>com.test.App</mainClass>\r\n        <stripDebug>false</stripDebug>\r\n        <noHeaderFiles>true</noHeaderFiles>\r\n        <noManPages>true</noManPages>\r\n        <addModules>javafx.controls,javafx.fxml,javafx.media</addModules>\r\n    </configuration>\r\n</plugin>\r\n\r\nsh\r\nmvn clean javafx:jlink\r\n""]",0,1
"[""import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane background = new Pane();\r\n        background.setStyle(""-fx-background-color: red;"");\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n        \r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        StackPane root = new StackPane(background, testButton);\r\n        \r\n        Scene scene = new Scene(root, 500, 500);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Graphics2D;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8""; \r\n            String userName = ""User: John Doe"";\r\n            String eventName = ""Event: Tech Conference"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            int width = qrImage.getWidth();\r\n            int height = qrImage.getHeight() + 60;\r\n            BufferedImage combined = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, width, height);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 18));\r\n            g.drawString(userName, 10, height - 40);\r\n            g.drawString(eventName, 10, height - 10);\r\n\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, ""png"", new File(filePath));\r\n            System.out.println(""QR Code created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Inject\r\n@JMSConnectionFactory(""java:/jms/remoteCF"")\r\nprivate JMSContext context;\r\n\r\n@Resource(lookup = ""java:/queue/testQueue"")\r\nprivate Queue queue;\r\n\r\n@Override\r\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n    resp.setContentType(""text/html"");\r\n    PrintWriter out = resp.getWriter();\r\n    try {\r\n        for (int i = 0; i < 5; i++) {\r\n            String text = ""This is message "" + (i + 1);\r\n            context.createProducer().send(queue, text);\r\n            out.write(""Message Sent ("" + i + ""): "" + text + ""<br>"");\r\n        }\r\n    } finally {\r\n        out.close();\r\n    }\r\n}\r\n\r\n// Consumer\r\n@MessageDriven(activationConfig = {\r\n    @ActivationConfigProperty(propertyName = ""destinationLookup"", propertyValue = ""java:/queue/testQueue""),\r\n    @ActivationConfigProperty(propertyName = ""destinationType"", propertyValue = ""javax.jms.Queue"")\r\n})\r\npublic class MyMessageConsumer implements MessageListener {\r\n\r\n    @Override\r\n    public void onMessage(Message message) {\r\n        try {\r\n            if (message instanceof TextMessage) {\r\n                System.out.println(""Received: "" + ((TextMessage) message).getText());\r\n            }\r\n        } catch (JMSException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nbash\r\ncurl http://localhost:8080/your-app/your-endpoint\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    private String sourceNode;\r\n    private String destinationNode;\r\n    private String weekIndex;\r\n    private int quantity;\r\n\r\n    public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n        this.weekIndex = weekIndex;\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNode = destinationNode;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public String getWeekIndex() {\r\n        return weekIndex;\r\n    }\r\n\r\n    public String getSourceNode() {\r\n        return sourceNode;\r\n    }\r\n\r\n    public String getDestinationNode() {\r\n        return destinationNode;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(""week1"", ""source1"", ""destination1"", 100),\r\n            new Record(""week1"", ""source1"", ""destination2"", 200),\r\n            new Record(""week1"", ""source2"", ""destination1"", 200),\r\n            new Record(""week1"", ""source2"", ""destination2"", 100),\r\n            new Record(""week2"", ""source1"", ""destination1"", 200),\r\n            new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        List<String> result = records.stream()\r\n            .collect(Collectors.groupingBy(\r\n                r -> r.getWeekIndex() + ""|"" + r.getSourceNode(),\r\n                Collectors.summingInt(Record::getQuantity)\r\n            ))\r\n            .entrySet().stream()\r\n            .flatMap(entry -> {\r\n                String[] keys = entry.getKey().split(""\\|"");\r\n                String week = keys[0];\r\n                String source = keys[1];\r\n                int total = entry.getValue();\r\n\r\n                return records.stream()\r\n                    .filter(r -> r.getWeekIndex().equals(week) && r.getSourceNode().equals(source))\r\n                    .map(r -> String.format(\r\n                        ""%s  %s  %s  %.2f%%"",\r\n                        r.getWeekIndex(),\r\n                        r.getSourceNode(),\r\n                        r.getDestinationNode(),\r\n                        (r.getQuantity() * 100.0) / total\r\n                    ));\r\n            })\r\n            .collect(Collectors.toList());\r\n\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n""]",0,1
"[""import com.google.gson.Gson;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ParallelStreamExample {\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(new Puzzle(""Puzzle1""), new Puzzle(""Puzzle2""), new Puzzle(""Puzzle3""));\r\n\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n                .map(gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        bulkWrites.forEach(System.out::println);\r\n    }\r\n\r\n    static class Puzzle {\r\n        String name;\r\n\r\n        Puzzle(String name) {\r\n            this.name = name;\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.bson.Document;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass ParallelStreamExampleTest {\r\n\r\n    @Test\r\n    void testParallelStream() {\r\n        List<ParallelStreamExample.Puzzle> puzzles = List.of(\r\n                new ParallelStreamExample.Puzzle(""Puzzle1""),\r\n                new ParallelStreamExample.Puzzle(""Puzzle2""),\r\n                new ParallelStreamExample.Puzzle(""Puzzle3"")\r\n        );\r\n\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n                .map(ParallelStreamExample.gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .toList();\r\n\r\n        assertEquals(3, bulkWrites.size());\r\n        assertEquals(""Puzzle1"", bulkWrites.get(0).getDocument().getString(""name""));\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class LongArray {\r\n    private final MemorySegment segment;\r\n    private static final ValueLayout.OfLong LAYOUT = ValueLayout.JAVA_LONG;\r\n\r\n    public LongArray(long size) {\r\n        if (size < 0) throw new IllegalArgumentException(""Size must be non-negative"");\r\n        this.segment = Arena.global().allocate(size * LAYOUT.byteSize());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        segment.set(LAYOUT, index * LAYOUT.byteSize(), value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        return segment.get(LAYOUT, index * LAYOUT.byteSize());\r\n    }\r\n\r\n    public void close() {\r\n        segment.scope().close();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LongArray array = new LongArray(10);\r\n\r\n        for (long i = 0; i < 10; i++) {\r\n            array.set(i, i * 2);\r\n        }\r\n\r\n        for (long i = 0; i < 10; i++) {\r\n            System.out.println(""Value at index "" + i + "" = "" + array.get(i));\r\n        }\r\n\r\n        array.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.ArrayList;\r\n\r\npublic class BulletGame extends JPanel {\r\n    private final ArrayList<Bullet> bullets = new ArrayList<>();\r\n    private final BufferedImage bulletImage;\r\n\r\n    public BulletGame() {\r\n        bulletImage = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = bulletImage.createGraphics();\r\n        g2d.setColor(Color.RED);\r\n        g2d.fillOval(0, 0, 16, 16);\r\n        g2d.dispose();\r\n\r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(100 + i % 800, 100 + i % 600, i * 0.1, bulletImage));\r\n        }\r\n\r\n        Timer timer = new Timer(16, e -> {\r\n            for (Bullet bullet : bullets) {\r\n                bullet.update();\r\n            }\r\n            repaint();\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        for (Bullet bullet : bullets) {\r\n            bullet.draw(g2d);\r\n        }\r\n    }\r\n\r\n    private static class Bullet {\r\n        int x, y;\r\n        double angle;\r\n        BufferedImage img;\r\n\r\n        Bullet(int x, int y, double angle, BufferedImage originalImg) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.angle = angle;\r\n            this.img = originalImg;\r\n        }\r\n\r\n        void update() {\r\n            angle += 2;\r\n        }\r\n\r\n        void draw(Graphics2D g) {\r\n            int w = img.getWidth();\r\n            int h = img.getHeight();\r\n            g.rotate(Math.toRadians(angle), x + w / 2, y + h / 2);\r\n            g.drawImage(img, x, y, null);\r\n            g.rotate(-Math.toRadians(angle), x + w / 2, y + h / 2);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(""Touhou-esque Bullet Game"");\r\n        BulletGame game = new BulletGame();\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(800, 600);\r\n        frame.add(game);\r\n        frame.setVisible(true);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n\r\n        System.out.println(result);\r\n        sc.close();\r\n    }\r\n}\r\n\r\n/*\r\nTest Cases:\r\nInput 1:\r\nEnter the sentence\r\nDo you wear your mask\r\nOutput:\r\nmask ruoy raew uoy Do\r\n\r\nInput 2:\r\nEnter the sentence\r\nCard reader\r\nOutput:\r\nInvalid Length\r\n\r\nInput 3:\r\nEnter the sentence\r\nRefer @ friend\r\nOutput:\r\nRefer @ friend is an invalid sentence\r\n*/\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setOnShowing(e -> {\r\n            comboBox.lookup("".combo-box-popup"").getStyleClass().add(""yellowed-popup"");\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(getClass().getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup .list-view .list-cell {\r\n    -fx-background-color: yellow;\r\n}\r\n""]",0,1
"[""package app.components;\r\n\r\nimport java.io.IOException;\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\npublic class Custom extends VBox {\r\n\r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n\r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import app.components.Custom?>\r\n\r\n<Custom alignment=""CENTER"" xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-"" />\r\n   </children>\r\n</Custom>\r\n\r\njava\r\npackage app.controllers;\r\n\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class Menu {\r\n\r\n    @FXML private Custom cc;\r\n\r\n    public void initialize() {\r\n        cc.newText(""Test"");\r\n    }\r\n}\r\n\r\njava\r\npackage app;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        StackPane root = FXMLLoader.load(getClass().getResource(""views/fxml/Menu.fxml""));\r\n        Scene scene = new Scene(root, 400, 400);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.layout.StackPane?>\r\n<?import app.components.Custom?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""app.controllers.Menu"">\r\n    <children>\r\n        <Custom fx:id=""cc"" />\r\n    </children>\r\n</StackPane>\r\n""]",0,1
"[""package application;\r\n\r\nimport javafx.animation.Interpolator;\r\nimport javafx.animation.Transition;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n\r\n        StackPane stack = new StackPane();\r\n        Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        text.setFont(Font.font(16));\r\n        stack.getChildren().add(text);\r\n\r\n        Color color1 = Color.RED;\r\n        Color color2 = Color.BLUE;\r\n\r\n        Transition transition = new Transition() {\r\n            {\r\n                setCycleDuration(Duration.seconds(2));\r\n                setInterpolator(Interpolator.EASE_BOTH);\r\n                setCycleCount(INDEFINITE);\r\n                setAutoReverse(true);\r\n            }\r\n\r\n            @Override\r\n            protected void interpolate(double frac) {\r\n                double r = color1.getRed() + (color2.getRed() - color1.getRed()) * frac;\r\n                double g = color1.getGreen() + (color2.getGreen() - color1.getGreen()) * frac;\r\n                double b = color1.getBlue() + (color2.getBlue() - color1.getBlue()) * frac;\r\n                text.setFill(new Color(r, g, b, 1.0));\r\n            }\r\n        };\r\n\r\n        transition.play();\r\n\r\n        root.setCenter(stack);\r\n        Scene scene = new Scene(root, 400, 400);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2OkHttpExample {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String RESOURCE_URL = ""https://example.com/api/resource"";\r\n\r\n    private static String getAccessToken() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        RequestBody formBody = new FormBody.Builder()\r\n                .add(""grant_type"", ""client_credentials"")\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(formBody)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            String responseBody = response.body().string();\r\n            return new org.json.JSONObject(responseBody).getString(""access_token"");\r\n        }\r\n    }\r\n\r\n    private static void callApi(String accessToken) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(RESOURCE_URL)\r\n                .addHeader(""Authorization"", ""Bearer "" + accessToken)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            System.out.println(response.body().string());\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            String accessToken = getAccessToken();\r\n            callApi(accessToken);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.squareup.okhttp3</groupId>\r\n        <artifactId>okhttp</artifactId>\r\n        <version>4.12.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.json</groupId>\r\n        <artifactId>json</artifactId>\r\n        <version>20240303</version>\r\n    </dependency>\r\n</dependencies>\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\npublic class GoogleMapsEmbed extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        webView.getEngine().load(""file:///"" + System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n\r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setTitle(""Google Maps Test"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\nhtml\r\n<!DOCTYPE html>\r\n<html lang=""en"">\r\n<head>\r\n  <meta charset=""UTF-8"">\r\n  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">\r\n  <title>Google Maps Test</title>\r\n  <style>\r\n    #map {\r\n      height: 600px;\r\n      width: 100%;\r\n    }\r\n  </style>\r\n</head>\r\n<body>\r\n  <div id=""map""></div>\r\n  <script>\r\n    function initMap() {\r\n      window.map = new google.maps.Map(document.getElementById(""map""), {\r\n        zoom: 15,\r\n        center: { lat: 32.99069195330653, lng: -106.97436738069189 },\r\n        mapTypeId: ""terrain"",\r\n      });\r\n    }\r\n  </script>\r\n  <script async defer \r\n    src=""https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"">\r\n  </script>\r\n</body>\r\n</html>\r\n""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignmentExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n            Set<String> fields = new HashSet<>();\r\n            classDeclaration.getFields().forEach(f -> f.getVariables().forEach(v -> fields.add(v.getNameAsString())));\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                Set<String> readAccess = new HashSet<>();\r\n                Set<String> writeAccess = new HashSet<>();\r\n\r\n                methodDeclaration.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        if (fields.contains(n.getNameAsString())) {\r\n                            readAccess.add(n.getNameAsString());\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(AssignmentExpr n, Void arg) {\r\n                        if (n.getTarget().isNameExpr()) {\r\n                            String target = n.getTarget().asNameExpr().getNameAsString();\r\n                            if (fields.contains(target)) {\r\n                                writeAccess.add(target);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        if (n.getExpression().isNameExpr()) {\r\n                            String target = n.getExpression().asNameExpr().getNameAsString();\r\n                            if (fields.contains(target)) {\r\n                                writeAccess.add(target);\r\n                            }\r\n                        }\r\n                        super.visit(n, arg);\r\n                    }\r\n                }, null);\r\n\r\n                if (!readAccess.isEmpty()) {\r\n                    System.out.println(""    Read Access:"");\r\n                    readAccess.forEach(field -> System.out.println(""      "" + field));\r\n                }\r\n                if (!writeAccess.isEmpty()) {\r\n                    System.out.println(""    Write Access:"");\r\n                    writeAccess.forEach(field -> System.out.println(""      "" + field));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\njava\r\npublic class Example {\r\n\r\n    private int field1;\r\n    private String field2;\r\n\r\n    public void method1() {\r\n        field1 = 10;\r\n        field1++;\r\n        System.out.println(field2);\r\n    }\r\n\r\n    public void method2() {\r\n        field2 = ""Hello"";\r\n        String x = field2;\r\n    }\r\n}\r\n\r\n\r\nClass: Example\r\n  Method: method1\r\n    Read Access:\r\n      field2\r\n    Write Access:\r\n      field1\r\n  Method: method2\r\n    Read Access:\r\n      field2\r\n    Write Access:\r\n      field2\r\n""]",0,1
"[""import java.lang.annotation.*;\r\nimport java.lang.reflect.*;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\npublic @interface Annotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = YetAnotherClass.class)\r\n    private AnotherClass anotherAnnotatedAttribute;\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> value = annotation.className() == Object.class ? field.getType() : annotation.className();\r\n                System.out.printf(""Field: %s, Annotated class: %s%n"", field.getName(), value.getName());\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass AnotherClass {}\r\nclass YetAnotherClass {}\r\n""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.source.util.*;\r\n\r\nimport javax.annotation.processing.*;\r\nimport javax.lang.model.element.*;\r\nimport javax.lang.model.type.*;\r\nimport javax.lang.model.util.*;\r\nimport java.util.*;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\r\npublic class SwitchTypeAnalyzer extends AbstractProcessor {\r\n\r\n    private Trees trees;\r\n    \r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) return false;\r\n        \r\n        trees = Trees.instance(processingEnv);\r\n        \r\n        for (Element element : roundEnv.getRootElements()) {\r\n            if (element instanceof ExecutableElement) {\r\n                ExecutableElement method = (ExecutableElement) element;\r\n                MethodTree methodTree = (MethodTree) trees.getTree(method);\r\n                BlockTree blockTree = methodTree.getBody();\r\n                \r\n                for (StatementTree statementTree : blockTree.getStatements()) {\r\n                    if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                        SwitchTree switchTree = (SwitchTree) statementTree;\r\n                        ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                        TypeMirror type = trees.getTypeMirror(new TreePath(new TreePath(blockTree), switchTreeExpression));\r\n                        System.out.println(""Type of switchTreeExpression: "" + type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        // Test case code, this is just for illustrative purposes\r\n        // Add your Java file containing a switch statement to analyze its type\r\n    }\r\n}\r\n""]",0,1
"[""public void createScatterChart() {\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series series1 = new XYChart.Series();\r\n\r\n    for (int i = 0; i < this.r.size(); i++) {\r\n        series1.getData().add(new XYChart.Data(this.r.get(i) * Math.cos(Math.toRadians(this.nodes.get(i))),\r\n                                               this.r.get(i) * Math.sin(Math.toRadians(this.nodes.get(i)))));\r\n    }\r\n\r\n    scatterChart.getData().add(series1);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(scatterChart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n""]",0,1
"[""// MainActivity.java\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button OpenBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n\r\n        OpenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// BottomSheetDialog.java\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable\r\n    ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.bottom_sheet_layout,\r\n                container, false);\r\n        \r\n        // Set height to match parent\r\n        ViewGroup.LayoutParams params = v.getLayoutParams();\r\n        params.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        v.setLayoutParams(params);\r\n        \r\n        return v;\r\n    }\r\n}\r\n\r\nxml\r\n<!-- bottom_sheet_layout.xml -->\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical"">\r\n    \r\n    <!-- Add your views here -->\r\n    <Button\r\n        android:id=""@+id/some_button""\r\n        android:layout_width=""wrap_content""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Click Me"" />\r\n</LinearLayout>\r\n\r\nxml\r\n<!-- activity_main.xml -->\r\n<Button\r\n    android:id=""@+id/open_bottom_sheet""\r\n    android:layout_width=""wrap_content""\r\n    android:layout_height=""wrap_content""\r\n    android:text=""Open Bottom Sheet""\r\n    android:layout_centerInParent=""true"" />\r\n\r\njava\r\n// Test case\r\nimport androidx.test.core.app.ActivityScenario;\r\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\r\n\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(AndroidJUnit4.class)\r\npublic class MainActivityTest {\r\n\r\n    @Test\r\n    public void testBottomSheetOpens() {\r\n        ActivityScenario.launch(MainActivity.class);\r\n\r\n        // Add your UI interactions and verifications here\r\n    }\r\n}\r\n""]",0,1
"[""public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(""BUSINESS""))\r\n        .filter(object -> object.objectStatus().equals(""ACTIVE""))\r\n        .filter(object -> object.locale().equals(""en-US""))\r\n        .sorted(Comparator.comparing(CustomObject::url))\r\n        .map(CustomObject::getUrl)\r\n        .findFirst()\r\n        .orElseGet(() -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS""))\r\n            .sorted(Comparator.comparing(CustomObject::url))\r\n            .map(CustomObject::getUrl)\r\n            .findFirst()\r\n            .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND"")));\r\n}\r\n\r\njava\r\n@Test\r\nvoid testTransform() {\r\n    List<CustomObject> list = Arrays.asList(\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""en-US"", ""http://url1""),\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""en-US"", ""http://url2""),\r\n        new CustomObject(""BUSINESS"", ""INACTIVE"", ""en-US"", ""http://url3""),\r\n        new CustomObject(""BUSINESS"", ""ACTIVE"", ""fr-FR"", ""http://url4"")\r\n    );\r\n    \r\n    String result = new YourClass().transform(list);\r\n    assertEquals(""http://url2"", result);\r\n    \r\n    List<CustomObject> emptyList = Collections.emptyList();\r\n    assertThrows(RuntimeException.class, () -> new YourClass().transform(emptyList));\r\n}\r\n""]",0,1
"[""public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        private final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(StyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.GREEN);\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(StyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.ORANGE);\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> restartTimeline());\r\n            color2.addListener((obs, o, v) -> restartTimeline());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) {\r\n                    if (timeline.get() != null) {\r\n                        timeline.get().play();\r\n                    }\r\n                } else {\r\n                    if (timeline.get() != null) {\r\n                        timeline.get().stop();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private void restartTimeline() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        private Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), Interpolator.LINEAR)),\r\n                new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), Interpolator.LINEAR))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n\r\n            return timeline;\r\n        }\r\n\r\n        static class StyleableProperties {\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(""-color1"", PaintConverter.getInstance(), Color.GREEN) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(""-color2"", PaintConverter.getInstance(), Color.ORANGE) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n\r\n    public static List<int[]> findPattern(int[][] T, int[][] P) {\r\n        List<int[]> result = new ArrayList<>();\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                boolean match = true;\r\n                for (int x = 0; x < u; x++) {\r\n                    for (int y = 0; y < v; y++) {\r\n                        if (P[x][y] != 0 && P[x][y] != T[i + x][j + y]) {\r\n                            match = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!match) break;\r\n                }\r\n                if (match) {\r\n                    result.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n        \r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> result = findPattern(T, P);\r\n        for (int[] position : result) {\r\n            System.out.println(""("" + position[0] + "","" + position[1] + "")"");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nInput:\r\nT = [\r\n    {2, 3, 4, 3, 6},\r\n    {4, 1, 5, 7, 8},\r\n    {9, 1, 2, 3, 1},\r\n    {2, 4, 5, 1, 5},\r\n    {3, 1, 9, 0, 2}\r\n]\r\nP = [\r\n    {2, 3, 0},\r\n    {0, 1, 5},\r\n    {9, 0, 2}\r\n]\r\n\r\nOutput:\r\n(0, 0)\r\n(2, 2)\r\n""]",0,1
"[""// HomeFragment.java\r\n\r\npublic class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private Query query;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> adapter;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext());\r\n        recyclerView.setLayoutManager(linearLayoutManager);\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        setQueryByOrder(""technology"", ""totalInvestors"");\r\n        fetchResult(query);\r\n\r\n        return v;\r\n    }\r\n\r\n    protected void setQueryByOrder(String choice, String order) {\r\n        query = FirebaseDatabase.getInstance()\r\n                .getReference()\r\n                .child(""Category_wise"").child(choice).orderByChild(order);\r\n    }\r\n\r\n    protected void fetchResult(Query query) {\r\n        FirebaseRecyclerOptions<SCard> options =\r\n                new FirebaseRecyclerOptions.Builder<SCard>()\r\n                        .setQuery(query, new SnapshotParser<SCard>() {\r\n                            @NonNull\r\n                            @Override\r\n                            public SCard parseSnapshot(@NonNull DataSnapshot snapshot) {\r\n                                return new SCard(\r\n                                        Objects.requireNonNull(snapshot.child(""companyName"").getValue()).toString(),\r\n                                        // Add other fields if necessary\r\n                                );\r\n                            }\r\n                        })\r\n                        .build();\r\n        adapter = new SCardAdapter<>(options);\r\n        adapter.startListening();\r\n        recyclerView.setAdapter(adapter);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        adapter.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        adapter.stopListening();\r\n    }\r\n}\r\n\r\n// SCardAdapter.java\r\n\r\npublic class SCardAdapter<M extends SCard, V extends SCardAdapter.ViewHolder> extends FirebaseRecyclerAdapter<SCard, V> {\r\n\r\n    FirebaseRecyclerOptions<SCard> options;\r\n\r\n    public SCardAdapter(@Nullable FirebaseRecyclerOptions<SCard> options) {\r\n        super(options);\r\n        this.options = options;\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(V holder, final int position, SCard model) {\r\n        holder.setName(model.getsName());\r\n        // Bind other fields if necessary\r\n    }\r\n\r\n    @Override\r\n    public V onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.startup_search_card, parent, false);\r\n        return (V) new ViewHolder(view);\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.i18n.LocaleContextHolder;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class CustomLocaleResolver extends CookieLocaleResolver {\r\n\r\n    private static final List<String> ALLOWED_LOCALES = Arrays.asList(""en"", ""hi"");\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String locale = request.getParameter(""locale"");\r\n        if (locale != null && !ALLOWED_LOCALES.contains(locale)) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n        }\r\n        return super.resolveLocale(request);\r\n    }\r\n\r\n    @Override\r\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\r\n        if (locale != null && !ALLOWED_LOCALES.contains(locale.getLanguage())) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale.getLanguage());\r\n        }\r\n        super.setLocale(request, response, locale);\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.mock.web.MockHttpServletRequest;\r\nimport org.springframework.mock.web.MockHttpServletResponse;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class CustomLocaleResolverTest {\r\n\r\n    private final CustomLocaleResolver localeResolver = new CustomLocaleResolver();\r\n\r\n    @Test\r\n    public void testValidLocale() {\r\n        MockHttpServletRequest request = new MockHttpServletRequest();\r\n        request.addParameter(""locale"", ""en"");\r\n        MockHttpServletResponse response = new MockHttpServletResponse();\r\n\r\n        localeResolver.resolveLocale(request);\r\n\r\n        assertEquals(""en"", response.getHeader(""Content-Language""));\r\n    }\r\n\r\n    @Test\r\n    public void testInvalidLocale() {\r\n        MockHttpServletRequest request = new MockHttpServletRequest();\r\n        request.addParameter(""locale"", ""fr"");\r\n        MockHttpServletResponse response = new MockHttpServletResponse();\r\n\r\n        assertThrows(IllegalArgumentException.class, () -> localeResolver.resolveLocale(request));\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\npublic class Parent {\r\n    private Parent() {\r\n    }\r\n\r\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parent = constructor.newInstance();\r\n        System.out.println(""Parent object created: "" + parent);\r\n    }\r\n}\r\n""]",0,1
"[""import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU="";\r\n\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""Ed25519"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n\r\n        System.out.println(""Private Key: "" + pkey);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\nclass LRUCache {\r\n    private int capacity;\r\n    private Map<Integer, Integer> cache;\r\n    private DoublyLinkedListNode head, tail;\r\n    \r\n    class DoublyLinkedListNode {\r\n        int key, value;\r\n        DoublyLinkedListNode prev, next;\r\n        DoublyLinkedListNode(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        cache = new HashMap<>();\r\n        head = new DoublyLinkedListNode(0, 0);\r\n        tail = new DoublyLinkedListNode(0, 0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n    \r\n    public int get(int key) {\r\n        if (cache.containsKey(key)) {\r\n            DoublyLinkedListNode node = cache.get(key);\r\n            remove(node);\r\n            insertAtFront(node);\r\n            return node.value;\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        if (cache.containsKey(key)) {\r\n            DoublyLinkedListNode node = cache.get(key);\r\n            node.value = value;\r\n            remove(node);\r\n            insertAtFront(node);\r\n        } else {\r\n            if (cache.size() == capacity) {\r\n                DoublyLinkedListNode last = tail.prev;\r\n                remove(last);\r\n                cache.remove(last.key);\r\n            }\r\n            DoublyLinkedListNode newNode = new DoublyLinkedListNode(key, value);\r\n            cache.put(key, newNode);\r\n            insertAtFront(newNode);\r\n        }\r\n    }\r\n\r\n    private void remove(DoublyLinkedListNode node) {\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    private void insertAtFront(DoublyLinkedListNode node) {\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        LRUCache lru = new LRUCache(2);\r\n        lru.put(1, 1);\r\n        lru.put(2, 2);\r\n        System.out.println(lru.get(1)); // returns 1\r\n        lru.put(3, 3); // evicts key 2\r\n        System.out.println(lru.get(2)); // returns -1 (not found)\r\n        lru.put(4, 4); // evicts key 1\r\n        System.out.println(lru.get(1)); // returns -1 (not found)\r\n        System.out.println(lru.get(3)); // returns 3\r\n        System.out.println(lru.get(4)); // returns 4\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 75; \r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        drawImage(g);\r\n    }\r\n\r\n    private void drawImage(Graphics g) {\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) {\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if (rightPressed) {\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if (upPressed) {\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if (downPressed) {\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n\r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 20; \r\n        int newHeight = 20; \r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(500, 500);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n\r\n                frame.setLayout(null);\r\n\r\n                surface.setBounds(0, 0, 500, 500);\r\n                frame.add(surface);\r\n\r\n                blueDot.setBounds((int) (Math.random() * 450), 0, 500, 500);\r\n                frame.add(blueDot);\r\n\r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n\r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n\r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n\r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                             (currentValue >> 32) & 0xFFFF, \r\n                             (currentValue >> 16) & 0xFFF, \r\n                             currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n0000-7000-0001\r\n0000-7000-0002\r\n0000-7000-0003\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.util.regex.Pattern;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class TestPane extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = createSpinner();\r\n\r\n        VBox root = new VBox(10, new Text(""Spinner""), spinner);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Spinner<Double> createSpinner() {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        spinner.setEditable(true);\r\n\r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.0, 20.0, 0.0, 0.25);\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        // Custom TextFormatter for spinner editor\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            Pattern validText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n            if (validText.matcher(newText).matches()) {\r\n                if (newText.length() > 0 && !newText.startsWith(""+"") && !newText.startsWith(""-"")) {\r\n                    c.setText(""+"" + newText);\r\n                }\r\n                return c;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        return spinner;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""Map<String, String> result = Flux.fromIterable(list)\r\n        .collectMap(a -> a.getName(),\r\n                b -> functionReturningMonoOfC(b)\r\n                        .map(C::url)\r\n                        .block())\r\n        .block();\r\n\r\njava\r\n@Test\r\nvoid testCollectMap() {\r\n    List<A> list = Arrays.asList(new A(""name1""), new A(""name2""));\r\n    Map<String, String> result = Flux.fromIterable(list)\r\n            .collectMap(a -> a.getName(),\r\n                    b -> Mono.just(new C(""url_"" + b.getName()))\r\n                            .map(C::url)\r\n                            .block())\r\n            .block();\r\n\r\n    assertEquals(2, result.size());\r\n    assertEquals(""url_name1"", result.get(""name1""));\r\n    assertEquals(""url_name2"", result.get(""name2""));\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class SecurityConfig {\r\n\r\n    private final UserDetailsService userDetailsService;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final String jwtSecret;\r\n    private final long accessTokenExpiredInDays;\r\n    private final long refreshTokenExpiredInDays;\r\n\r\n    public SecurityConfig(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder, \r\n                          String jwtSecret, long accessTokenExpiredInDays, long refreshTokenExpiredInDays) {\r\n        this.userDetailsService = userDetailsService;\r\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\r\n        this.jwtSecret = jwtSecret;\r\n        this.accessTokenExpiredInDays = accessTokenExpiredInDays;\r\n        this.refreshTokenExpiredInDays = refreshTokenExpiredInDays;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        CustomAuthenticationFilter customAuthenticationFilter = new CustomAuthenticationFilter(authenticationManager(http), \r\n            accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n        customAuthenticationFilter.setFilterProcessesUrl(""/api/login"");\r\n\r\n        http.csrf().disable()\r\n            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n            .and()\r\n            .authorizeRequests()\r\n                .antMatchers(""/error"").permitAll()\r\n                .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n                .anyRequest().authenticated()\r\n            .and()\r\n            .addFilter(customAuthenticationFilter)\r\n            .addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n                   .userDetailsService(userDetailsService)\r\n                   .passwordEncoder(bCryptPasswordEncoder)\r\n                   .and()\r\n                   .build();\r\n    }\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void testLoginEndpointAccessible() throws Exception {\r\n        mockMvc.perform(post(""/api/login"")\r\n                .contentType(MediaType.APPLICATION_JSON)\r\n                .content(""{\""username\"": \""testuser\"", \""password\"": \""password\""}""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testSecuredEndpoint() throws Exception {\r\n        mockMvc.perform(get(""/api/secure"")\r\n                .header(""Authorization"", ""Bearer valid_jwt_token""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testUnauthorizedAccess() throws Exception {\r\n        mockMvc.perform(get(""/api/secure""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n""]",0,1
"[""import javax.net.ssl.*;\r\nimport java.io.*;\r\nimport java.security.*;\r\nimport java.security.cert.CertificateException;\r\nimport java.security.cert.X509Certificate;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport redis.clients.jedis.*;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        testWithTls();\r\n    }\r\n\r\n    public static void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo"")); // prints bar\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\nbash\r\n   redis-server --tls-port 6379 --port 0 --tls-cert-file /tls/redis.crt --tls-key-file /tls/redis.key --tls-ca-cert-file /tls/ca.crt --loglevel warning\r\n   ""]",0,1
"[""import org.objectweb.asm.*;\r\n\r\npublic class MethodInstrumenter extends MethodVisitor {\r\n    public MethodInstrumenter(MethodVisitor mv) {\r\n        super(Opcodes.ASM9, mv);\r\n    }\r\n\r\n    private void instrument() {\r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_1);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n        instrument();\r\n    }\r\n}\r\n\r\npublic class ClassVisitorExample extends ClassVisitor {\r\n    public ClassVisitorExample(ClassVisitor cv) {\r\n        super(Opcodes.ASM9, cv);\r\n    }\r\n\r\n    @Override\r\n    public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {\r\n        MethodVisitor mv = cv.visitMethod(access, name, descriptor, signature, exceptions);\r\n        return new MethodInstrumenter(mv);\r\n    }\r\n}\r\n\r\npublic class Test {\r\n    public static void main(String[] args) {\r\n        add(1, 2);\r\n    }\r\n\r\n    public static int add(int a, int b) {\r\n        int sum = a + b;\r\n        return sum;\r\n    }\r\n}\r\n""]",0,1
"[""public class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private List<String> transactionsList;\r\n\r\n    public List<String> getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(List<String> transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public int getTotalCount() {\r\n        return totalCount;\r\n    }\r\n\r\n    public void setTotalCount(int totalCount) {\r\n        this.totalCount = totalCount;\r\n    }\r\n\r\n    public int getResponseCode() {\r\n        return responseCode;\r\n    }\r\n\r\n    public void setResponseCode(int responseCode) {\r\n        this.responseCode = responseCode;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{\n"" +\r\n                ""\""payLoad\"": [\n"" +\r\n                ""    {\n"" +\r\n                ""      \""id\"": 1,\n"" +\r\n                ""      \""userName\"": null,\n"" +\r\n                ""      \""arName\"": \""A1\"",\n"" +\r\n                ""      \""areas\"": []\n"" +\r\n                ""    },\n"" +\r\n                ""    {\n"" +\r\n                ""      \""id\"": 2,\n"" +\r\n                ""      \""userName\"": \""alpha2\"",\n"" +\r\n                ""      \""arName\"": \""A2\"",\n"" +\r\n                ""      \""areas\"": []\n"" +\r\n                ""    }\n"" +\r\n                ""  ],\n"" +\r\n                ""\""count\"": 2,\n"" +\r\n                ""\""respCode\"": 200\n"" +\r\n                ""}"";\r\n\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n\r\n        System.out.println(responseRcvd.getTransactionsList());\r\n    }\r\n}\r\n\r\njava\r\n{\r\n    ""payLoad"": [\r\n        {\r\n            ""id"": 1,\r\n            ""userName"": null,\r\n            ""arName"": ""A1"",\r\n            ""areas"": []\r\n        },\r\n        {\r\n            ""id"": 2,\r\n            ""userName"": ""alpha2"",\r\n            ""arName"": ""A2"",\r\n            ""areas"": []\r\n        }\r\n    ],\r\n    ""count"": 2,\r\n    ""respCode"": 200\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn(""2025-03-15T00:00:00Z"");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, mock(DeserializationContext.class));\r\n\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyString() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, mock(DeserializationContext.class));\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser jsonParser = mock(JsonParser.class);\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, mock(DeserializationContext.class)));\r\n    }\r\n}\r\n""]",0,1
"[""import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\n\r\npublic class MainExample {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        options.setLogLevel(org.openqa.selenium.logging.LogLevel.ALL);\r\n\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(""https://www.google.com"");\r\n\r\n        LogEntries entries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : entries) {\r\n            System.out.println(entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Value(""${security.jwt.secret}"")\r\n    private String jwtSecret;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n        http.exceptionHandling((exceptions) -> exceptions.defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n            .oauth2ResourceServer((resourceServer) -> resourceServer.jwt(Customizer.withDefaults()));\r\n\r\n        http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(\r\n                    authorize -> authorize.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n            .formLogin(formLogin -> formLogin.loginPage(""/login"").permitAll())\r\n            .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\n        http.csrf(csrf -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n                .keyID(""customKey"")\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                System.out.println(""No keys found matching selection criteria!"");\r\n            } else {\r\n                System.out.println(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n    }\r\n}\r\n\r\nproperties\r\nsecurity.jwt.secret=r26BoWWyTQMp/8rkD3RnRKsbHkRsmQWjTvJTfmhrQxU=\r\n\r\njava\r\n@Test\r\npublic void testJwtEncoding() {\r\n    JwtEncoder encoder = jwtEncoder();\r\n    JwtDecoder decoder = jwtDecoder();\r\n\r\n    // Create a simple JWT\r\n    Map<String, Object> claims = new HashMap<>();\r\n    claims.put(""sub"", ""user"");\r\n\r\n    Jwt jwt = encoder.encode(JwtEncoderParameters.from(claims).build());\r\n\r\n    // Decode it back\r\n    Jwt decodedJwt = decoder.decode(jwt.getTokenValue());\r\n\r\n    assertNotNull(decodedJwt);\r\n    assertEquals(""user"", decodedJwt.getClaim(""sub""));\r\n}\r\n""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    String name;\r\n    String motive;\r\n\r\n    @Value(""Adventure of War"")\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    @Value(""A place for War"")\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        ApplicationContext IOC = new AnnotationConfigApplicationContext(""gd.rf.anuragsaini.stereotype"");\r\n        Company c1 = IOC.getBean(Company.class);\r\n        System.out.println(c1);\r\n    }\r\n}\r\n\r\nxml\r\n<!-- config.xml -->\r\n<context:component-scan base-package=""gd.rf.anuragsaini.stereotype""/>\r\n\r\nbash\r\nSetting Company Name\r\nSetting Company Motive\r\nCompany{name='Adventure of War', motive='A place for War'}\r\n""]",0,1
"[""import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Base64;\r\nimport org.apache.commons.codec.binary.Hex;\r\n\r\npublic class AESFileEncryption {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Path keyPath = Paths.get(""/home/debashishd/Downloads/s_key"");\r\n        byte[] keyBytes = Files.readAllBytes(keyPath);\r\n        \r\n        String testMessage = ""Hello this is Roxane"";\r\n        \r\n        // AES Encryption\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(new byte[16]));\r\n        \r\n        String encryptedValue = Base64.getEncoder().encodeToString(cipher.doFinal(testMessage.getBytes()));\r\n        System.out.println(""Encrypted value: "" + encryptedValue);\r\n        \r\n        // AES Decryption\r\n        Cipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(new byte[16]));\r\n        \r\n        String decryptedValue = new String(decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue)));\r\n        System.out.println(""Decrypted value: "" + decryptedValue);\r\n    }\r\n}\r\n\r\njava\r\nEncrypted value: jvggHDPa58+/zQ+HyGUEk/ypndXbatE+b+hBBqiinABOIwxJ7FXqnDb5j813fPwwm/D6d2Y2uh+k4qD77QMqOg==\r\nDecrypted value: Hello this is Roxane\r\n""]",0,1
"[""@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    // outputData will be written to Redis (memorystore)\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n              .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                  .withConnectionConfiguration(CustomRedisConfigurations\r\n                          .create(REDIS_HOST, port)\r\n                          .withTimeout(100)\r\n                          .withAuth(""credentials"")\r\n                          .enableSSL()));\r\n    pipeline.run();\r\n}\r\n""]",0,1
"[""// Controller.java\r\npackage com.example.demo;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.ComboBox;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Test implements Initializable {\r\n    @FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(""Back-end"", ""Front-end"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(""Java"", ""PHP"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(""HTML"", ""CSS"", ""Javascript"");\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n        DevelopmentType.setValue(""Back-end"");\r\n        DevelopmentTypeEvent();\r\n    }\r\n\r\n    public void DevelopmentTypeEvent() {\r\n        if (DevelopmentType.getValue().equals(""Back-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n            LanguageProgramming.getSelectionModel().clearSelection();\r\n        } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n            LanguageProgramming.getSelectionModel().clearSelection();\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<!-- test.fxml -->\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.ComboBox?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n\r\n<AnchorPane prefHeight=""400.0"" prefWidth=""600.0"" xmlns=""http://javafx.com/javafx/20.0.1"" xmlns:fx=""http://javafx.com/fxml/1"" fx:controller=""com.example.demo.Test"">\r\n   <children>\r\n      <ComboBox fx:id=""DevelopmentType"" layoutX=""75.0"" layoutY=""62.0"" onAction=""#DevelopmentTypeEvent"" prefHeight=""26.0"" prefWidth=""218.0"" promptText=""Select a development type"" />\r\n      <ComboBox fx:id=""LanguageProgramming"" layoutX=""75.0"" layoutY=""98.0"" prefHeight=""26.0"" prefWidth=""217.0"" promptText=""Select a language programming"" />\r\n   </children>\r\n</AnchorPane>\r\n\r\njava\r\n// Test case - Main.java\r\npackage com.example.demo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            Parent root = FXMLLoader.load(this.getClass().getResource(""test.fxml""));\r\n            Scene scene = new Scene(root);\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""// CustomResponseBodyAdvice.java\r\n@RestControllerAdvice\r\npublic class CustomResponseBodyAdvice implements ResponseBodyAdvice<Object> {\r\n    @Override\r\n    public boolean supports(final @NotNull MethodParameter returnType,\r\n                            final @NotNull Class<? extends HttpMessageConverter<?>> converterType) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Object beforeBodyWrite(final Object body,\r\n                                  final @NotNull MethodParameter returnType,\r\n                                  final @NotNull MediaType selectedContentType,\r\n                                  final @NotNull Class<? extends HttpMessageConverter<?>> selectedConverterType,\r\n                                  final @NotNull ServerHttpRequest request,\r\n                                  final @NotNull ServerHttpResponse response) {\r\n        if (body instanceof ResponseEnvelope || body instanceof Resource) {\r\n            return body;\r\n        }\r\n        if (body instanceof final ResponseEntity<?> responseEntity) {\r\n            response.setStatusCode(responseEntity.getStatusCode());\r\n        }\r\n        return ResponseEnvelope.builder().success(true).result(body).build();\r\n    }\r\n}\r\n\r\n// UserController.java\r\n@RestController\r\npublic class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    public UserController(final UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @PostMapping(""/users"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<UserDto> create(final @RequestBody @Valid CreateUserCommand command) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(userService.create(command));\r\n    }\r\n}\r\n\r\n// ResponseEnvelope.java\r\n@Data\r\n@Builder\r\npublic class ResponseEnvelope<T> {\r\n    private boolean success;\r\n    private T result;\r\n}\r\n\r\n// Springdoc OpenAPI configuration\r\n@Configuration\r\npublic class SpringDocConfig {\r\n    @Bean\r\n    public OpenAPI customOpenAPI() {\r\n        return new OpenAPI()\r\n                .components(new Components()\r\n                        .addResponses(""ResponseEnvelope"", new ApiResponse().content(new Content()\r\n                                .addMediaType(""application/json"", new MediaType()\r\n                                        .schema(new Schema().$ref(""#/components/schemas/ResponseEnvelope"")))));\r\n    }\r\n}\r\n\r\n// TestController.java (for testing purposes)\r\n@Test\r\npublic void testCreateUser() throws Exception {\r\n    CreateUserCommand command = new CreateUserCommand(""johndoe"");\r\n    UserDto userDto = new UserDto(""johndoe"");\r\n\r\n    given(userService.create(any())).willReturn(userDto);\r\n\r\n    mockMvc.perform(post(""/users"")\r\n            .contentType(MediaType.APPLICATION_JSON)\r\n            .content(""{\""username\"":\""johndoe\""}""))\r\n            .andExpect(status().isCreated())\r\n            .andExpect(jsonPath(""$.success"").value(true))\r\n            .andExpect(jsonPath(""$.result.username"").value(""johndoe""));\r\n}\r\n""]",0,1
"[""package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class Interceptor implements ServerInterceptor {\r\n\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n\r\njava\r\npackage interceptorserver;\r\n\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.*;\r\n\r\npublic class InterceptorTest {\r\n    @Test\r\n    public void testInterceptorIsServerInterceptor() {\r\n        Interceptor interceptor = new Interceptor();\r\n        assertTrue(interceptor instanceof io.grpc.ServerInterceptor);\r\n    }\r\n}\r\n\r\nbash\r\n./start-connect-server.sh \\r\n    --packages org.apache.spark:spark-connect_2.12:3.4.1 \\r\n    --jars Interceptor.jar \\r\n    --conf spark.connect.grpc.interceptor.classes=interceptorserver.Interceptor\r\n""]",0,1
"[""private <T> void positionEntity(Class<T> clazz, Object... params) {\r\n    int x, y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = clazz.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class)\r\n                        .newInstance(x, y, params[0], params[1], sizeX, sizeY);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\npublic void positionMagician() {\r\n    positionEntity(Magician.class, player, field);\r\n}\r\n\r\npublic void positionGoblin() {\r\n    positionEntity(Goblin.class, player, field);\r\n}\r\n\r\njava\r\n@Test\r\npublic void testPositionEntity() {\r\n    positionEntity(Magician.class, player, field);\r\n    assertTrue(field.getFieldable(magicianX, magicianY) instanceof Magician);\r\n\r\n    positionEntity(Goblin.class, player, field);\r\n    assertTrue(field.getFieldable(goblinX, goblinY) instanceof Goblin);\r\n}\r\n""]",0,1
"[""spring:\r\n  elasticsearch:\r\n    uris: \r\n      - https://localhost:9700\r\n    username: elastic\r\n    password: 123\r\n    ssl:\r\n      enabled: true\r\n      key-store: classpath:your-keystore.jks\r\n      key-store-password: your-keystore-password\r\n      trust-store: classpath:your-truststore.jks\r\n      trust-store-password: your-truststore-password\r\n\r\njava\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\nimport org.elasticsearch.client.RequestOptions;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestHighLevelClient;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\nimport org.springframework.data.elasticsearch.core.query.Query;\r\n\r\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.conn.ssl.SSLContextBuilder;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Bean\r\n    public RestHighLevelClient client() throws Exception {\r\n        PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager();\r\n        CloseableHttpClient httpClient = HttpClients.custom()\r\n                .setSSLContext(SSLContextBuilder.create().loadTrustMaterial(new File(""your-truststore.jks""), ""your-truststore-password"".toCharArray()))\r\n                .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)\r\n                .setConnectionManager(poolingHttpClientConnectionManager)\r\n                .build();\r\n        return new RestHighLevelClient(\r\n                RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n                        .setHttpClientConfigCallback(httpClientConfig -> httpClient)\r\n        );\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchTemplate elasticsearchTemplate() throws Exception {\r\n        return new ElasticsearchTemplate(client());\r\n    }\r\n}\r\n\r\njava\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\nimport org.springframework.data.elasticsearch.core.query.Query;\r\nimport org.springframework.data.elasticsearch.core.query.QueryBuilder;\r\n\r\n@SpringBootTest\r\npublic class ElasticsearchConfigTest {\r\n\r\n    @Autowired\r\n    private ElasticsearchTemplate elasticsearchTemplate;\r\n\r\n    @Test\r\n    void testElasticsearchConnection() {\r\n        Query query = new QueryBuilder().build();\r\n        elasticsearchTemplate.queryForList(""test_index"", query, Object.class);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\nimport java.util.*;\r\n\r\npublic class Task implements Runnable {\r\n    private static final Map<String, Lock> lockMap = new ConcurrentHashMap<>();\r\n    private final String x;\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        return lockMap.computeIfAbsent(key, k -> new ReentrantLock());\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock l = getLock(x);\r\n        try {\r\n            l.lock();\r\n            System.out.println(x);\r\n\r\n            try {\r\n                Thread.sleep(5000);\r\n            } catch (InterruptedException ex) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n\r\n        } finally {\r\n            l.unlock();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n\r\n        executor.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.xml.bind.JAXBElement;\r\nimport javax.xml.ws.BindingProvider;\r\nimport javax.xml.ws.WebServiceFeature;\r\nimport javax.xml.ws.soap.MTOMFeature;\r\nimport javax.xml.ws.soap.SOAPBinding;\r\n\r\npublic class MdfeClient {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectFactory of = new ObjectFactory();\r\n        String soapBody = ""<soap:Envelope xmlns:soap=\""http://www.w3.org/2003/05/soap-envelope\"" xmlns:mdf=\""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc\"">"" +\r\n                ""<soap:Header/>"" +\r\n                ""<soap:Body>"" +\r\n                ""<mdf:mdfeDadosMsg>"" +\r\n                ""<![CDATA[<your_soap_body_here>]]>"" +\r\n                ""</mdf:mdfeDadosMsg>"" +\r\n                ""</soap:Body>"" +\r\n                ""</soap:Envelope>"";\r\n        \r\n        JAXBElement<String> jaxb = of.createMdfeDadosMsg(soapBody);\r\n\r\n        MDFeRecepcaoSinc recepcao = new MDFeRecepcaoSinc();\r\n        MDFeRecepcaoSincSoap12 soap = recepcao.getMDFeRecepcaoSincSoap12(new MTOMFeature(true));\r\n\r\n        // Set up the digital certificate and SSL context here (as per your certificate settings)\r\n        BindingProvider bindingProvider = (BindingProvider) soap;\r\n        bindingProvider.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ""https://mdfe.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx"");\r\n\r\n        MDFeRecepcaoResult result = soap.mdfeRecepcao(jaxb.getValue());\r\n\r\n        System.out.println(result.getRetMDFe());  // Adjust this if needed to print out specific parts\r\n    }\r\n}\r\n\r\njava\r\npublic class MdfeClientTest {\r\n\r\n    @Test\r\n    public void testMdfeRecepcao() throws Exception {\r\n        MdfeClient client = new MdfeClient();\r\n        client.main(null);  // You can further verify the output\r\n    }\r\n}\r\n""]",0,1
"[""import org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class PdfGenerator {\r\n    public static void main(String[] args) throws Exception {\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>?????? ???</h3>\n"" +\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        String path = ""A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        renderer.setDocumentFromString(htmlString);\r\n        \r\n        // Set the font for Cyrillic support\r\n        renderer.getFontResolver().addFont(""path/to/your/font.ttf"", true);\r\n        \r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        byteArrayOutputStream.writeTo(outputStream);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Random;\r\n\r\nclass Card {\r\n    String value;\r\n    String suit;\r\n\r\n    Card(String value, String suit) {\r\n        this.value = value;\r\n        this.suit = suit;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return value + "" of "" + suit;\r\n    }\r\n}\r\n\r\npublic class CardShuffle {\r\n    public static void main(String[] args) {\r\n        Card[] unshuffledDeck = new Card[]{\r\n            new Card(""2"", ""Hearts""),\r\n            new Card(""3"", ""Hearts""),\r\n            new Card(""4"", ""Hearts""),\r\n            new Card(""5"", ""Hearts""),\r\n            new Card(""6"", ""Hearts"")\r\n        };\r\n\r\n        Card[] shuffledDeck = shuffleDeck(unshuffledDeck);\r\n\r\n        for (Card card : shuffledDeck) {\r\n            System.out.println(card);\r\n        }\r\n    }\r\n\r\n    public static Card[] shuffleDeck(Card[] unshuffledDeck) {\r\n        Random shuffleRandom = new Random();\r\n        Card[] shuffledDeck = new Card[unshuffledDeck.length];\r\n        boolean[] picked = new boolean[unshuffledDeck.length];\r\n\r\n        for (int i = 0; i < unshuffledDeck.length; i++) {\r\n            int j;\r\n            do {\r\n                j = shuffleRandom.nextInt(unshuffledDeck.length);\r\n            } while (picked[j]);\r\n            shuffledDeck[i] = unshuffledDeck[j];\r\n            picked[j] = true;\r\n        }\r\n\r\n        return shuffledDeck;\r\n    }\r\n}\r\n""]",0,1
"[""@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\npublic class JUnit5Suite {\r\n\r\n  @RegisterExtension\r\n  public static JUnit5Server MY_SERVER = new JUnit5Server();\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n  private static boolean initialized = false;\r\n\r\n  @Override\r\n  public void beforeAll(ExtensionContext context) throws Exception {\r\n    if (!initialized) {\r\n      // start the server\r\n      MY_SERVER.publish();\r\n      initialized = true;\r\n    }\r\n  }\r\n\r\n  @Override\r\n  public void afterAll(ExtensionContext context) throws Exception {\r\n    // stop the server\r\n  }\r\n}\r\n\r\npublic class FirstTest {\r\n  @Test\r\n  void test1() {\r\n    assertTrue(true);\r\n  }\r\n}\r\n\r\npublic class SecondTest {\r\n  @Test\r\n  void test2() {\r\n    assertTrue(true);\r\n  }\r\n}\r\n""]",0,1
"[""public Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .doOnNext(analysis -> analysis.setResults(results))\r\n            .flatMap(computeSCARepository::save)\r\n            .then();\r\n}\r\n\r\n@PatchMapping(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\n// Test Case\r\n@Test\r\npublic void testUpdateAnalysisWithResults() {\r\n    String uuid = ""test-uuid"";\r\n    String results = ""new-results"";\r\n\r\n    Analysis analysis = new Analysis();\r\n    analysis.setUuid(uuid);\r\n\r\n    when(computeSCARepository.save(any(Analysis.class))).thenReturn(Mono.just(analysis));\r\n    when(computeSCAService.findByUUID(uuid)).thenReturn(Mono.just(analysis));\r\n\r\n    StepVerifier.create(computeSCAService.updateAnalysisWithResults(uuid, results))\r\n            .verifyComplete();\r\n\r\n    verify(computeSCARepository).save(any(Analysis.class));\r\n    assertEquals(""new-results"", analysis.getResults());\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(true); \r\n        marshaller.setMarshallerProperties(Map.of(\r\n            ""com.sun.xml.bind.xmlHeaders"", ""<soapenv:Envelope xmlns:soapenv=\""http://schemas.xmlsoap.org/soap/envelope/\"" xmlns:urn=\""http://my.company.com/xsd/portals/v4_0\""><soapenv:Header/><soapenv:Body>"",\r\n            ""com.sun.xml.bind.v2.runtime.MarshallerImpl.PRETTY_PRINT"", ""true""\r\n        ));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\njava\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    DataHandler dataHandler = new DataHandler(documentData, ""application/pdf"");\r\n    binaryData.setBlob(dataHandler);\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\njava\r\n@Component\r\n@Log4j2\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Override\r\n    public void sendDocuments(MyRequest request) {\r\n        try {\r\n            template.marshalSendAndReceive(request);\r\n        } catch (Exception e) {\r\n            log.error(e, e.getCause());\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\npublic class MyRequestTest {\r\n\r\n    @Test\r\n    public void testSendDocuments() {\r\n        byte[] documentData = ""VeryLongDataBlobInHere"".getBytes(StandardCharsets.UTF_8);\r\n        BinaryData binaryData = buildBinaryData(documentData);\r\n\r\n        MyRequest request = new MyRequest();\r\n        request.setDocumentList(Collections.singletonList(new DocumentList(binaryData)));\r\n\r\n        MyServiceProperties properties = new MyServiceProperties();\r\n        properties.setTargetUrl(""http://localhost:8080/soap"");\r\n\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(true);\r\n\r\n        MySoapClient client = new MySoapClient(properties, marshaller);\r\n        client.sendDocuments(request);\r\n    }\r\n}\r\n""]",0,1
"[""btnGenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        value1 = Long.parseLong(txtFirst.getText().toString());\r\n        value2 = Long.parseLong(txtSecond.getText().toString());\r\n        for (long i = value1; i <= value2; i++) {\r\n            list.add(String.valueOf(i));\r\n            li.setAdapter(arrayAdapter);\r\n        }\r\n    }\r\n});\r\n""]",0,1
"[""import org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class ExcelExport {\r\n    public static void main(String[] args) {\r\n        exportXls();\r\n    }\r\n\r\n    private static void exportXls() {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             Workbook wb = new HSSFWorkbook()) {\r\n            \r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class EthereumSignatureVerifier {\r\n    public static boolean verifySignature(String publicAddress, String message, String signature) {\r\n        byte[] messageHash = Sign.getEthereumMessageHash(message.getBytes(StandardCharsets.UTF_8));\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) {\r\n            return false;\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v,\r\n                Arrays.copyOfRange(signatureBytes, 0, 32),\r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        for (int i = 0; i < 2; i++) {\r\n            BigInteger recoveredKey = Sign.signedMessageHashToKey(messageHash, signatureData);\r\n            String recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\n            if (recoveredAddress.equalsIgnoreCase(publicAddress)) {\r\n                return true;\r\n            }\r\n            signatureData = new Sign.SignatureData(\r\n                    (byte) (signatureData.getV() ^ 1),\r\n                    signatureData.getR(),\r\n                    signatureData.getS()\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String publicAddress = ""0xYourPublicWalletAddress"";\r\n        String message = ""random_nonce_here"";\r\n        String signature = ""0xSignedMessageFromMetamask"";\r\n\r\n        boolean isValid = verifySignature(publicAddress, message, signature);\r\n        System.out.println(""Signature valid: "" + isValid);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.List;\r\nimport java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic class AggregationExample {\r\n    public enum AggregationType {\r\n        MIN(DoubleStream::min),\r\n        MAX(DoubleStream::max),\r\n        AVERAGE(DoubleStream::average);\r\n\r\n        private final Function<DoubleStream, java.util.OptionalDouble> aggregator;\r\n\r\n        AggregationType(Function<DoubleStream, java.util.OptionalDouble> aggregator) {\r\n            this.aggregator = aggregator;\r\n        }\r\n\r\n        public java.util.OptionalDouble apply(DoubleStream stream) {\r\n            return aggregator.apply(stream);\r\n        }\r\n    }\r\n\r\n    private final List<Double> provides = List.of(1.0, 2.0, 3.0, 4.0, 5.0);\r\n\r\n    public Float someFunction(AggregationType e) {\r\n        return (float) e.apply(provides.stream().mapToDouble(Double::doubleValue)).orElse(-1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        AggregationExample example = new AggregationExample();\r\n        System.out.println(""Min: "" + example.someFunction(AggregationType.MIN));\r\n        System.out.println(""Max: "" + example.someFunction(AggregationType.MAX));\r\n        System.out.println(""Average: "" + example.someFunction(AggregationType.AVERAGE));\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<E, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CoreNonCoreModules {\r\n    public static void main(String[] args) {\r\n        Map<String, String> moduleClassLoaders = new HashMap<>();\r\n\r\n        ModuleFinder.ofSystem().findAll().forEach(moduleReference -> {\r\n            String moduleName = moduleReference.descriptor().name();\r\n            try {\r\n                Class<?> cls = Class.forName(moduleName + "".module-info"");\r\n                ClassLoader cl = cls.getClassLoader();\r\n                moduleClassLoaders.put(moduleName, cl == null ? ""BootLoader"" : cl.getClass().getSimpleName());\r\n            } catch (ClassNotFoundException ignored) {\r\n                moduleClassLoaders.put(moduleName, ""Unknown"");\r\n            }\r\n        });\r\n\r\n        moduleClassLoaders.forEach((module, classLoader) ->\r\n            System.out.println(module + "" -> "" + classLoader)\r\n        );\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMyyyy"")\r\n                .toFormatter(Locale.forLanguageTag(""es""));\r\n\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", formatter);\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.Cursor;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setCursor(Cursor.NONE);\r\n\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""TextArea Cursor Test"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.Arrays;\r\n\r\npublic class ExcelFormulaTranslator {\r\n    public static String translateFormula(String formula, String originalAddress, String destinationAddress) throws Exception {\r\n        try (XSSFWorkbook wb = (XSSFWorkbook) WorkbookFactory.create(true)) {\r\n            Ptg[] ptgs = FormulaParser.parse(formula, (FormulaRenderingWorkbook) wb, 0, 0);\r\n            for (Ptg ptg : ptgs) {\r\n                if (ptg instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                    ((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).setRow(((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).getRow() + getRowOffset(originalAddress, destinationAddress));\r\n                    ((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).setColumn(((org.apache.poi.ss.formula.ptg.RefPtgBase) ptg).getColumn() + getColumnOffset(originalAddress, destinationAddress));\r\n                }\r\n            }\r\n            return FormulaParser.toFormulaString((FormulaRenderingWorkbook) wb, ptgs);\r\n        }\r\n    }\r\n\r\n    private static int getRowOffset(String original, String destination) {\r\n        return Integer.parseInt(destination.replaceAll(""[A-Z]"", """")) - Integer.parseInt(original.replaceAll(""[A-Z]"", """"));\r\n    }\r\n\r\n    private static int getColumnOffset(String original, String destination) {\r\n        return columnToIndex(destination.replaceAll(""[0-9]"", """")) - columnToIndex(original.replaceAll(""[0-9]"", """"));\r\n    }\r\n\r\n    private static int columnToIndex(String column) {\r\n        int index = 0;\r\n        for (char c : column.toCharArray()) {\r\n            index = index * 26 + (c - 'A' + 1);\r\n        }\r\n        return index - 1;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String[][] testCases = {\r\n                {""=(A2+B2)"", ""C2"", ""C3"", ""=(A3+B3)""},\r\n                {""=(A2+B2)"", ""C2"", ""D2"", ""=(B2+C2)""},\r\n                {""=(A2+$B$2)"", ""C2"", ""D10"", ""=(B10+$B$2)""},\r\n                {""=(SheetA2!A2+B2)"", ""C2"", ""C3"", ""=(SheetA2!A3+B3)""},\r\n                {""=IF(A2=A3,A4,A5)"", ""A6"", ""C6"", ""=IF(C2=C3,C4,C5)""}\r\n        };\r\n\r\n        for (String[] testCase : testCases) {\r\n            String translatedFormula = translateFormula(testCase[0], testCase[1], testCase[2]);\r\n            System.out.println(""Input: "" + testCase[0] + "" | Expected: "" + testCase[3] + "" | Output: "" + translatedFormula);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFile {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            raf.write(""123456789"".getBytes());\r\n        }\r\n        try (RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            raf.seek(0);\r\n            raf.write(""hello"".getBytes());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.beans.property.SimpleStringProperty;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.util.Callback;\r\nimport java.net.URL;\r\nimport java.time.LocalDate;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class CollectionController implements javafx.fxml.Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n\r\n        authorDirectorColumn.setCellValueFactory(new Callback<TableColumn.CellDataFeatures<LibraryItem, String>, ObservableValue<String>>() {\r\n            @Override\r\n            public ObservableValue<String> call(TableColumn.CellDataFeatures<LibraryItem, String> param) {\r\n                LibraryItem item = param.getValue();\r\n                if (item instanceof Book) {\r\n                    return new SimpleStringProperty(((Book) item).getAuthor());\r\n                } else if (item instanceof Movie) {\r\n                    return new SimpleStringProperty(((Movie) item).getDirector());\r\n                }\r\n                return new SimpleStringProperty("""");\r\n            }\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\npublic class DataSourceFailureTest {\r\n    private DataSource dataSource;\r\n    private AtomicInteger counter;\r\n\r\n    @BeforeEach\r\n    public void setup() throws SQLException {\r\n        dataSource = mock(DataSource.class);\r\n        counter = new AtomicInteger(0);\r\n\r\n        when(dataSource.getConnection()).thenAnswer(invocation -> {\r\n            if (counter.incrementAndGet() % 3 == 0) { \r\n                throw new SQLException(""Simulated transient connection failure"");\r\n            }\r\n            Connection connection = mock(Connection.class);\r\n            when(connection.isValid(anyInt())).thenReturn(true);\r\n            return connection;\r\n        });\r\n    }\r\n\r\n    @Test\r\n    public void testConnectionRetries() {\r\n        for (int i = 0; i < 10; i++) {\r\n            try {\r\n                Connection connection = dataSource.getConnection();\r\n                System.out.println(""Connection successful"");\r\n            } catch (SQLException e) {\r\n                System.err.println(""Connection failed: "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\npublic class PriceServiceTest {\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price price;\r\n    private PriceRequest request;\r\n\r\n    @BeforeEach\r\n    public void setup() {\r\n        MockitoAnnotations.openMocks(this);\r\n        priceUuid = UUID.randomUUID();\r\n        price = new Price();\r\n        price.setUuid(priceUuid);\r\n        price.setPriceAmount(100.0);\r\n\r\n        request = new PriceRequest();\r\n        request.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    public void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(price));\r\n        when(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO updatedDto = priceService.update(priceUuid, request);\r\n\r\n        assertNotNull(updatedDto);\r\n        assertEquals(150.0, updatedDto.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(price);\r\n    }\r\n}\r\n""]",0,1
"[""@SpringBootApplication\r\n@EnableMongoRepositories(basePackages = ""com.repository.mongo"", repositoryImplementationPostfix = ""MongoImpl"")\r\n@EnableRedisRepositories(basePackages = ""com.repository.redis"", repositoryImplementationPostfix = ""RedisImpl"")\r\npublic class StoreApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n\r\njava\r\npackage com.repository.mongo;\r\npublic interface PersistencyRepository extends MongoRepository<Store, String> {}\r\n\r\njava\r\npackage com.repository.redis;\r\npublic interface CacheRepository extends CrudRepository<Store, String> {}\r\n""]",0,1
"[""var taskbarList3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\nhr = ITaskbarList.QueryInterface.invoke(taskbarListVtbl, iidTaskbarList3, taskbarList3PtrToPtr);\r\nif (hr != ShObjIdl_core_h.S_OK()) {\r\n    throw new RuntimeException(""QueryInterface for ITaskbarList3 failed with error code: "" + hr);\r\n}\r\nvar taskbar3Ptr = taskbarList3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\nvar taskbarList3Instance = ITaskbarList3.reinterpret(taskbar3Ptr, arena, _ -> {});\r\n""]",0,1
"[""public void copyDatabaseFromAssets() {\r\n    Context context = requireContext();\r\n    AssetManager assetManager = context.getAssets();\r\n    \r\n    File databasesFolder = new File(context.getDataDir(), ""databases"");\r\n    if (!databasesFolder.exists()) {\r\n        databasesFolder.mkdirs();\r\n    }\r\n\r\n    try {\r\n        String[] files = assetManager.list(""database/test"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                File outFile = new File(databasesFolder, filename);\r\n                if (!outFile.exists()) {\r\n                    try (InputStream in = assetManager.open(""database/test/"" + filename);\r\n                         OutputStream out = new FileOutputStream(outFile)) {\r\n                        byte[] buffer = new byte[1024];\r\n                        int read;\r\n                        while ((read = in.read(buffer)) != -1) {\r\n                            out.write(buffer, 0, read);\r\n                        }\r\n                        out.flush();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""DatabaseCopy"", ""Failed to copy database file"", e);\r\n    }\r\n}\r\n\r\n// Test case\r\npublic void testDatabaseCopy() {\r\n    copyDatabaseFromAssets();\r\n    File dbFile = new File(requireContext().getDataDir(), ""databases/test.db"");\r\n    if (dbFile.exists()) {\r\n        Log.i(""Test"", ""Database copied successfully"");\r\n    } else {\r\n        Log.e(""Test"", ""Database copy failed"");\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10; i++) {\r\n            measurePerformance();\r\n        }\r\n    }\r\n\r\n    private static void measurePerformance() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\n\r\npublic class ScaledBackgroundPanel extends JPanel {\r\n    private final BufferedImage image;\r\n\r\n    public ScaledBackgroundPanel(BufferedImage image) {\r\n        this.image = image;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        if (image != null) {\r\n            int panelWidth = getWidth();\r\n            int panelHeight = getHeight();\r\n\r\n            double imgAspect = (double) image.getWidth() / image.getHeight();\r\n            double panelAspect = (double) panelWidth / panelHeight;\r\n\r\n            int drawWidth, drawHeight, x, y;\r\n\r\n            if (panelAspect > imgAspect) {\r\n                drawHeight = panelHeight;\r\n                drawWidth = (int) (drawHeight * imgAspect);\r\n                x = (panelWidth - drawWidth) / 2;\r\n                y = 0;\r\n            } else {\r\n                drawWidth = panelWidth;\r\n                drawHeight = (int) (drawWidth / imgAspect);\r\n                x = 0;\r\n                y = (panelHeight - drawHeight) / 2;\r\n            }\r\n\r\n            g.drawImage(image, x, y, drawWidth, drawHeight, this);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Scaled Background Test"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setSize(800, 600);\r\n\r\n            BufferedImage dummyImage = new BufferedImage(1280, 859, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g2d = dummyImage.createGraphics();\r\n            g2d.setColor(Color.BLUE);\r\n            g2d.fillRect(0, 0, 1280, 859);\r\n            g2d.dispose();\r\n\r\n            frame.setContentPane(new ScaledBackgroundPanel(dummyImage));\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.stream.IntStream;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\n\r\npublic class VirtualThreadDemo {\r\n\r\n    static class Task implements java.util.concurrent.Callable<String> {\r\n        private final int taskId;\r\n\r\n        Task(int taskId) {\r\n            this.taskId = taskId;\r\n        }\r\n\r\n        @Override\r\n        public String call() {\r\n            System.out.println(""Task: "" + taskId + "" started"");\r\n            StopWatch stopWatch = StopWatch.createStarted();\r\n            String result = null;\r\n            try (Connection connection = DriverManager.getConnection(\r\n                    ""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n                System.out.println(""Task: "" + taskId + "" connection established"");\r\n                var statement = connection.createStatement();\r\n                System.out.println(""Task: "" + taskId + "" executes SQL statement"");\r\n                ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n                while (resultSet.next()) {\r\n                    result = resultSet.getString(""output"");\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n            stopWatch.stop();\r\n            System.out.println(""Task: "" + taskId + "" completed in "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            List<Future<String>> futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(Task::new)\r\n                    .map(executorService::submit)\r\n                    .toList();\r\n\r\n            for (Future<String> future : futures) {\r\n                future.get();\r\n            }\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(""The total time of execution was: "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n    }\r\n}\r\n\r\nsql\r\nDELIMITER //\r\nCREATE FUNCTION hello_world()\r\nRETURNS VARCHAR(255)\r\nDETERMINISTIC\r\nBEGIN\r\n    RETURN 'Hello, World!';\r\nEND //\r\nDELIMITER ;\r\n""]",0,1
"[""import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T, R extends TaskResult<T>> {\r\n    R make();\r\n}\r\n\r\nclass TaskResult<T> {\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make(){\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make(){\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(V::make)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n\r\n        alphaResults.forEach(result -> System.out.println(""Alpha result: "" + result.value));\r\n        betaResults.forEach(result -> System.out.println(""Beta result: "" + result.value));\r\n    }\r\n}\r\n""]",0,1
"[""private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n\r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n\r\n        int exitVal = p.waitFor();\r\n        System.out.println(""Exited with error code "" + exitVal);\r\n\r\n        p.destroy();\r\n\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    List<String> output = runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\n    if (output != null) {\r\n        output.forEach(System.out::println);\r\n    }\r\n}\r\n""]",0,1
"[""try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(""[""); // array begin\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write("","");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    \r\n    respWriter.write(""]""); // array end\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n""]",0,1
"[""import com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\n                Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n                .build()) {\r\n\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""/data.tsv"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public interface Util {\r\n    void getClient();\r\n}\r\n\r\n@Service(""utilOne"")\r\npublic class UtilOne implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilOne client"");\r\n    }\r\n}\r\n\r\n@Service(""utilTwo"")\r\npublic class UtilTwo implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilTwo client"");\r\n    }\r\n}\r\n\r\n@Component\r\npublic class UtilProvider {\r\n\r\n    @Autowired\r\n    private ApplicationContext context;\r\n\r\n    private Util currentUtil;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        switchUtil(""utilOne""); // default implementation\r\n    }\r\n\r\n    public void switchUtil(String beanName) {\r\n        this.currentUtil = context.getBean(beanName, Util.class);\r\n    }\r\n\r\n    public Util getUtil() {\r\n        return currentUtil;\r\n    }\r\n}\r\n\r\n@Component\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilProvider utilProvider;\r\n\r\n    public void useClient() {\r\n        utilProvider.getUtil().getClient();\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/switch"")\r\npublic class SwitchController {\r\n\r\n    @Autowired\r\n    private UtilProvider utilProvider;\r\n\r\n    @PostMapping(""/{beanName}"")\r\n    public void switchUtil(@PathVariable String beanName) {\r\n        utilProvider.switchUtil(beanName);\r\n    }\r\n}\r\n""]",0,1
"[""public class CircularSearch {\r\n\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) return true;\r\n            if (mat[row][col] > num) col--;\r\n            else row++;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            {10, 20, 30, 40},\r\n            {15, 25, 35, 45},\r\n            {27, 29, 37, 48},\r\n            {32, 33, 39, 50}\r\n        };\r\n        System.out.println(search(mat, 22)); // true\r\n        System.out.println(search(mat, 23)); // false\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\r\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\r\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {            \r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);         \r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            addPageBreak();\r\n            for (XWPFParagraph para : src1Document.getParagraphs()) {\r\n                first.createParagraph().getCTP().set(para.getCTP());\r\n            }\r\n        }        \r\n    }\r\n\r\n    private void addPageBreak() {\r\n        XWPFParagraph paragraph = first.createParagraph();\r\n        XWPFRun run = paragraph.createRun();\r\n        run.addBreak(org.apache.poi.xwpf.usermodel.BreakType.PAGE);\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);                \r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        try (FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"")) {\r\n            WordMerge wm = new WordMerge(faos);\r\n            wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n            wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n            wm.doMerge();\r\n            wm.close();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.PasswordFactory;\r\nimport org.wildfly.security.password.WildFlyElytronPasswordProvider;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordSpec;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        String maskedPassword = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        String[] parts = maskedPassword.substring(5).split("";"");\r\n        byte[] initialKeyMaterial = parts[0].getBytes();\r\n        byte[] salt = parts[1].getBytes();\r\n        int iterationCount = Integer.parseInt(parts[2]);\r\n\r\n        MaskedPasswordSpec maskedPasswordSpec = new MaskedPasswordSpec(initialKeyMaterial, salt, iterationCount);\r\n        PasswordFactory passwordFactory = PasswordFactory.getInstance(MaskedPassword.ALGORITHM_MASKED);\r\n        Password storePassword = passwordFactory.generatePassword(maskedPasswordSpec);\r\n\r\n        CredentialStore.ProtectionParameter protectionParameter =\r\n                new CredentialStore.CredentialSourceProtectionParameter(\r\n                        () -> new PasswordCredential(storePassword));\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"");\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }\r\n}\r\n""]",0,1
"[""mvn spring-boot:run -Dspring-boot.run.jvmArguments=""-Xdebug --spring.config.additional-location=file:.env"" -Dspring-boot.run.profiles=dev\r\n\r\nxml\r\n<dependency>\r\n    <groupId>io.github.cdimascio</groupId>\r\n    <artifactId>dotenv-java</artifactId>\r\n    <version>2.2.0</version>\r\n</dependency>\r\n\r\njava\r\nimport io.github.cdimascio.dotenv.Dotenv;\r\n\r\npublic static void main(String[] args) {\r\n    Dotenv dotenv = Dotenv.load();\r\n    System.setProperty(""DB_NAME"", dotenv.get(""DB_NAME""));\r\n    System.setProperty(""DB_USERNAME"", dotenv.get(""DB_USERNAME""));\r\n    System.setProperty(""DB_PASSWORD"", dotenv.get(""DB_PASSWORD""));\r\n    SpringApplication.run(Application.class, args);\r\n}\r\n""]",0,1
"[""@Named\r\npublic class MyCamelRouteBuilder extends RouteBuilder {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n    private static final String JOB_METHOD_NAME = ""xyz"";\r\n\r\n    private final MyJob myJob;\r\n\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        super();\r\n        this.myJob = myJob;\r\n    }\r\n\r\n    @Override\r\n    public void configure() {\r\n        fromF(""direct:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n\r\n        fromF(""master:some_name_1/some_name_2:scheduler:%s?delay=%s"", JOB_NAME, 1234)\r\n            .routeId(""JobTimer"")\r\n            .toF(""seda:%s"", JOB_NAME)\r\n            .end();\r\n\r\n        fromF(""seda:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME + ""-seda"")\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n    }\r\n}\r\n\r\n@Named\r\npublic class MyJob {\r\n\r\n    public MyJob() {}\r\n\r\n    public void xyz() {\r\n        System.out.println(""Job executed"");\r\n    }\r\n}\r\n\r\n@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(\r\n            ProducerTemplate producerTemplate\r\n    ) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.requestBody(""seda:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n""]",0,1
"[""public class MyFragment extends Fragment {\r\n\r\n    private LinearLayout parentLayout;\r\n    private Button addProduct;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View root = inflater.inflate(R.layout.fragment_layout, container, false);\r\n\r\n        parentLayout = root.findViewById(R.id.ll_out);\r\n        addProduct = root.findViewById(R.id.btn_prd);\r\n\r\n        addProduct.setOnClickListener(v -> addNewProduct());\r\n\r\n        return root;\r\n    }\r\n\r\n    private void addNewProduct() {\r\n        LinearLayout productLayout = (LinearLayout) getLayoutInflater().inflate(R.layout.product_row, parentLayout, false);\r\n\r\n        AutoCompleteTextView tvProduct = productLayout.findViewById(R.id.tv_product);\r\n        EditText prodQty = productLayout.findViewById(R.id.prod_qty);\r\n        EditText prodPrice = productLayout.findViewById(R.id.prod_price);\r\n        EditText prodSpecs = productLayout.findViewById(R.id.prod_specs);\r\n        Button deleteButton = new Button(getContext());\r\n        deleteButton.setText(""X"");\r\n        deleteButton.setOnClickListener(v -> parentLayout.removeView(productLayout));\r\n\r\n        productLayout.addView(deleteButton);\r\n        parentLayout.addView(productLayout);\r\n    }\r\n}\r\n\r\nxml\r\n<LinearLayout\r\n    xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""wrap_content""\r\n    android:orientation=""horizontal""\r\n    android:padding=""5dp"">\r\n\r\n    <AutoCompleteTextView\r\n        android:id=""@+id/tv_product""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Enter Product"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_qty""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Enter Quantity""\r\n        android:inputType=""number"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_price""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Prod Price""\r\n        android:inputType=""none"" />\r\n\r\n    <EditText\r\n        android:id=""@+id/prod_specs""\r\n        android:layout_width=""0dp""\r\n        android:layout_height=""wrap_content""\r\n        android:layout_weight=""1""\r\n        android:hint=""Prod Specs""\r\n        android:inputType=""none"" />\r\n</LinearLayout>\r\n""]",0,1
"[""import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\nimport javax.crypto.Cipher;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\nimport org.bouncycastle.operator.OperatorCreationException;\r\n\r\npublic class RSACrypto {\r\n\r\n    private static PrivateKey loadEncryptedPrivateKey(String path, String passphrase) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(new File(path)))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            JcePEMDecryptorProviderBuilder decryptorProvider = new JcePEMDecryptorProviderBuilder();\r\n            PEMKeyPair keyPair = ((PEMKeyPair) object).decryptKeyPair(decryptorProvider.build(passphrase.toCharArray()));\r\n            \r\n            return new JcaPEMKeyConverter().getKeyPair(keyPair).getPrivate();\r\n        }\r\n    }\r\n\r\n    private static String encrypt(String plainText, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\r\n        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n\r\n    private static String decrypt(String encryptedText, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA"");\r\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));\r\n        return new String(decryptedBytes, StandardCharsets.UTF_8);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String passphrase = ""your-passphrase"";\r\n        String privateKeyPath = ""path-to-your-private-key.pem"";\r\n        PrivateKey privateKey = loadEncryptedPrivateKey(privateKeyPath, passphrase);\r\n\r\n        String originalMessage = ""Hello, World!"";\r\n        String encrypted = encrypt(originalMessage, privateKey);\r\n        System.out.println(""Encrypted: "" + encrypted);\r\n\r\n        String decrypted = decrypt(encrypted, privateKey);\r\n        System.out.println(""Decrypted: "" + decrypted);\r\n    }\r\n}\r\n\r\nxml\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcprov-jdk15on</artifactId>\r\n    <version>1.70</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcpkix-jdk15on</artifactId>\r\n    <version>1.70</version>\r\n</dependency>\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.net.MalformedURLException;\r\n\r\npublic class EmojiApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws MalformedURLException {\r\n        String emojiFontPath = new File(""/path/to/NotoColorEmoji-Regular.ttf"").toURI().toURL().toExternalForm();\r\n        Font emojiFont = Font.loadFont(emojiFontPath, 18);\r\n        \r\n        TextArea ta = new TextArea(""?? ?? ?? ?? ?? ??"");\r\n        ta.setFont(emojiFont);\r\n\r\n        Scene scene = new Scene(ta, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Emoji Test"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.setProperty(""prism.text"", ""t2k"");\r\n        System.setProperty(""prism.lcdtext"", ""false"");\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""@Test\r\nvoid testCase() throws ItemAlreadyCreatedException {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(data.itemName())).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    String expectedMessage = ""There is an item created with this name"";\r\n    String actualMessage = ex.getMessage();\r\n\r\n    assertEquals(expectedMessage, actualMessage);\r\n    verify(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n""]",0,1
"[""public String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, \r\n                 CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        String[] header = {""TestInput"", ""ExpectedOutput"", ""TestOutput"", ""ErrorMessage""};\r\n        writer.writeNext(header);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput() != null && !testCase.getTestOutput().isEmpty()) {\r\n                for (Map<String, Object> output : testCase.getTestOutput()) {\r\n                    String testOutput = output.toString();\r\n                    String[] row = {testInput, expectedOutput, testOutput, errorMessage};\r\n                    writer.writeNext(row);\r\n                }\r\n            } else {\r\n                String[] row = {testInput, expectedOutput, """", errorMessage};\r\n                writer.writeNext(row);\r\n            }\r\n        }\r\n\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""private void bfs(String source) {\r\n    level = new int[nodes.size()];\r\n    Arrays.fill(level, -1);\r\n    int sourceIndex = nodes.indexOf(source);\r\n    level[sourceIndex] = 0;\r\n\r\n    Queue<Integer> queue = new LinkedList<>();\r\n    queue.offer(sourceIndex);\r\n\r\n    while (!queue.isEmpty()) {\r\n        int u = queue.poll();\r\n        String uNode = nodes.get(u);\r\n        for (Map.Entry<String, Integer> entry : network.get(uNode).entrySet()) {\r\n            String vNode = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int v = nodes.indexOf(vNode);\r\n            if (capacity > 0 && level[v] == -1) {\r\n                level[v] = level[u] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate int dfs(int u, int flow, int sinkIndex) {\r\n    if (u == sinkIndex) {\r\n        return flow;\r\n    }\r\n\r\n    String uNode = nodes.get(u);\r\n    for (Map.Entry<String, Integer> entry : network.get(uNode).entrySet()) {\r\n        String vNode = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        int v = nodes.indexOf(vNode);\r\n\r\n        if (capacity > 0 && level[u] < level[v]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sinkIndex);\r\n            if (sent > 0) {\r\n                network.get(uNode).put(vNode, capacity - sent);\r\n                network.get(vNode).put(uNode, network.get(vNode).getOrDefault(uNode, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\npublic int calculator(Map<T, Set<T>> graph) {\r\n    nodes = new ArrayList<>();\r\n    nodes.add(""src"");\r\n    nodes.add(""sink"");\r\n    network.clear();\r\n\r\n    for (T t : graph.keySet()) {\r\n        String tKey = ""A"" + t.toString();\r\n        addEdge(""src"", tKey, 1);\r\n        addEdge(""B"" + t, ""sink"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(tKey, u, 1);\r\n        }\r\n    }\r\n\r\n    int maxFlow = 0;\r\n    int sourceIndex = nodes.indexOf(""src"");\r\n    int sinkIndex = nodes.indexOf(""sink"");\r\n\r\n    while (true) {\r\n        bfs(""src"");\r\n        if (level[sinkIndex] == -1) {\r\n            break;\r\n        }\r\n\r\n        int flow;\r\n        while ((flow = dfs(sourceIndex, Integer.MAX_VALUE, sinkIndex)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n\r\n    return graph.size() - maxFlow;\r\n}\r\n""]",0,1
"[""import android.app.Notification;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.Ringtone;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.Handler;\r\nimport android.os.VibrationEffect;\r\nimport android.os.Vibrator;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\n\r\npublic class AlarmReceiver extends BroadcastReceiver {\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Intent stopIntent = new Intent(context, StopReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\n\r\npublic class StopReceiver extends BroadcastReceiver {\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        AlarmReceiver.stopRingtone();\r\n    }\r\n}\r\n\r\nxml\r\n<receiver android:name="".AlarmReceiver"" />\r\n<receiver android:name="".StopReceiver"" />\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        int[] array = {6, 2, 8, 1, 3, 0, 9, 7};\r\n        Scanner in = new Scanner(System.in);\r\n\r\n        System.out.print(""Search for? "");\r\n        int searching = in.nextInt();\r\n        boolean found = false;\r\n\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + "" is at index "" + i + ""."");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            System.out.println(searching + "" was not found."");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nSearch for? 1\r\n\r\n\r\n1 is at index 3.\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\n\r\npublic class LineChartExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.getData().add(new XYChart.Data<>(1, 5));\r\n        series1.getData().add(new XYChart.Data<>(2, 7));\r\n        series1.getData().add(new XYChart.Data<>(3, 6));\r\n        lineChart.getData().add(series1);\r\n\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.getData().add(new XYChart.Data<>(1, 3));\r\n        series2.getData().add(new XYChart.Data<>(2, 6));\r\n        series2.getData().add(new XYChart.Data<>(3, 8));\r\n        lineChart.getData().add(series2);\r\n\r\n        series1.getNode().setStyle(""-fx-stroke: red;"");\r\n        series2.getNode().setStyle(""-fx-stroke: blue;"");\r\n\r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public String generateJwtToken(Authentication authentication, String subdomain) {\r\n    UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(""tenant"", subdomain)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n}\r\n\r\npublic String getTenantFromJwtToken(String token) {\r\n    return Jwts.parser()\r\n            .setSigningKey(jwtSecret)\r\n            .parseClaimsJws(token)\r\n            .getBody()\r\n            .get(""tenant"", String.class);\r\n}\r\n\r\njava\r\npublic JwtResponse authenticateUser(String subdomain, LoginRequest loginRequest) {\r\n    Authentication authentication = authenticationManager.authenticate(\r\n            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\r\n    \r\n    SecurityContextHolder.getContext().setAuthentication(authentication);\r\n    String jwt = jwtUtils.generateJwtToken(authentication, subdomain);\r\n\r\n    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\r\n    List<String> roles = userDetails.getAuthorities().stream()\r\n            .map(GrantedAuthority::getAuthority)\r\n            .collect(Collectors.toList());\r\n\r\n    return new JwtResponse(jwt, userDetails.getId(), userDetails.getUsername(), roles);\r\n}\r\n\r\njava\r\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\r\n        throws ServletException, IOException {\r\n    try {\r\n        String jwt = parseJwt(request);\r\n        if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\r\n            String username = jwtUtils.getUserNameFromJwtToken(jwt);\r\n            String tenant = jwtUtils.getTenantFromJwtToken(jwt);\r\n\r\n            String serverName = request.getServerName();\r\n            String subdomain = serverName.substring(0, serverName.indexOf("".""));\r\n\r\n            if (!tenant.equals(subdomain)) {\r\n                throw new IllegalArgumentException(""Tenant mismatch"");\r\n            }\r\n\r\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\r\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\r\n                    userDetails, null, userDetails.getAuthorities());\r\n            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    filterChain.doFilter(request, response);\r\n}\r\n\r\njava\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\nclass AuthControllerTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    void testAuthenticateUser() throws Exception {\r\n        String subdomain = ""example"";\r\n        String username = ""testuser"";\r\n        String password = ""password"";\r\n\r\n        LoginRequest loginRequest = new LoginRequest(username, password);\r\n\r\n        mockMvc.perform(post(""/auth/signin"")\r\n                        .requestAttr(""subdomain"", subdomain)\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(new ObjectMapper().writeValueAsString(loginRequest)))\r\n                .andExpect(status().isOk())\r\n                .andExpect(jsonPath(""$.accessToken"").exists());\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass Board {\r\n    private Scanner scan = new Scanner(System.in);\r\n\r\n    public String inputTake() {\r\n        String guess;\r\n        do {\r\n            System.out.println(""choose a word, pick carefully: "");\r\n            guess = scan.next();\r\n        } while (!checkInput(guess));\r\n        return guess;\r\n    }\r\n\r\n    private boolean checkInput(String input) {\r\n        if (input.length() != 5 || !input.matches(""[a-zA-Z]+"")) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n\r\n\r\nchoose a word, pick carefully:  \r\nhello  \r\nYour guess: hello  \r\n\r\nchoose a word, pick carefully:  \r\nhe12o  \r\nmake sure your guess consists of 5 english letters, try again.  \r\nchoose a word, pick carefully:  \r\nworld  \r\nYour guess: world  \r\n""]",0,1
"[""package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Lazy;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService frenchLanguageService;\r\n    private final LanguageService englishLanguageService;\r\n\r\n    private LanguageService languageService;\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    public LanguageController(@Qualifier(""french"") @Lazy LanguageService frenchLanguageService,\r\n                              @Qualifier(""english"") @Lazy LanguageService englishLanguageService) {\r\n        this.frenchLanguageService = frenchLanguageService;\r\n        this.englishLanguageService = englishLanguageService;\r\n    }\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        if (""french"".equalsIgnoreCase(configuration)) {\r\n            this.languageService = frenchLanguageService;\r\n        } else if (""english"".equalsIgnoreCase(configuration)) {\r\n            this.languageService = englishLanguageService;\r\n        }\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n\r\n\r\nconfiguration=french\r\n\r\n\r\ncurl 'http://localhost:8080/test?name=John'\r\nBonjour John\r\n\r\n\r\ncurl 'http://localhost:8080/test?name=John'\r\nWelcome John\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CsvReader {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        FileReader fileReader = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n        BufferedReader br = new BufferedReader(fileReader);\r\n\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n        String line;\r\n        int ext = 0;\r\n\r\n        while ((line = br.readLine()) != null) {\r\n            if (ext == 0) {\r\n                headers = Arrays.asList(line.split("",""));\r\n            } else {\r\n                String[] values = line.split("","");\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                for (int i = 0; i < headers.size(); i++) {\r\n                    myRecord.put(headers.get(i), values[i]);\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            ext++;\r\n        }\r\n\r\n        br.close();\r\n\r\n        // Print table for verification\r\n        for (HashMap<String, String> record : myTable) {\r\n            System.out.println(record);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nTransactionNumber,TransactionType,Amount,TransactionDate,TransactionRemarks\r\n123456,Credit,4000,07/10/2021,Salary Credited\r\n123333,Debit,7000,05/10/2021,Fuel\r\n123446,Credit,3000,01/10/2021,Refund\r\n\r\n\r\n{TransactionNumber=123456, TransactionType=Credit, Amount=4000, TransactionDate=07/10/2021, TransactionRemarks=Salary Credited}\r\n{TransactionNumber=123333, TransactionType=Debit, Amount=7000, TransactionDate=05/10/2021, TransactionRemarks=Fuel}\r\n{TransactionNumber=123446, TransactionType=Credit, Amount=3000, TransactionDate=01/10/2021, TransactionRemarks=Refund}\r\n""]",0,1
"[""import org.springframework.http.server.reactive.ServerHttpResponse;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long requestTime = System.nanoTime();\r\n\r\n        return chain.filter(exchange)\r\n                .doOnSuccess(unused -> addTimingHeader(exchange.getResponse(), ""server-timing-success"", requestTime))\r\n                .doOnError(error -> addTimingHeader(exchange.getResponse(), ""server-timing-error"", requestTime))\r\n                .doFinally(signal -> addTimingHeader(exchange.getResponse(), ""server-timing-finally"", requestTime));\r\n    }\r\n\r\n    private void addTimingHeader(ServerHttpResponse response, String header, long requestTime) {\r\n        long deltaTime = System.nanoTime() - requestTime;\r\n        response.getHeaders().add(header, Long.toString(deltaTime));\r\n    }\r\n}\r\n""]",0,1
"[""I have a python script that reads in data from a csv file\r\nThe code runs fine, but everytime it runs I get this Deprecation message:\r\nDeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\r\n\r\nthe warning stems from this piece of code:\r\nfprice = df.groupby(['StartDate', 'Commodity', 'DealType']).apply(lambda group: -(group['MTMValue'].sum() - (group['FixedPriceStrike'] * group['Quantity']).sum()) / group['Quantity'].sum()).reset_index(name='FloatPrice')\r\n\r\nto my understanding, I am performing the apply function on my groupings,but then I am disregarding the groupings and not using them anymore to be apart of my dataframe. I am confused about the directions to silence the warning\r\nhere is some sample data that this code uses:\r\nTradeID  TradeDate  Commodity  StartDate   ExpiryDate FixedPrice Quantity MTMValue\r\n-------- ---------- ---------  ---------   ---------- ---------- -------- ---------\r\n aaa   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00 \r\n bbb   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00 \r\n ccc   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00  \r\n\r\nand here is the expected output from this data:\r\nTradeID  TradeDate  Commodity  StartDate   ExpiryDate FixedPrice Quantity MTMValue  FloatPrice\r\n-------- ---------- ---------  ---------   ---------- ---------- -------- --------- ----------\r\n aaa   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0\r\n bbb   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0\r\n ccc   01/01/2024   (com1,com2) 01/01/2024  01/01/2024    10        10      100.00      0 \r\n\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right.""]",0,1
"[""from sqlalchemy.orm import DeclarativeBase, mapped_column\r\nfrom sqlalchemy import Integer, String\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = 'user'\r\n    id = mapped_column(Integer, primary_key=True)\r\n    name = mapped_column(String)\r\n\r\npython\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.orm import Session\r\n\r\nengine = create_engine(""sqlite:///:memory:"")\r\nBase.metadata.create_all(engine)\r\n\r\nwith Session(engine) as session:\r\n    user = User(id=1, name='Alice')\r\n    session.add(user)\r\n    session.commit()\r\n\r\n    result = session.query(User).filter_by(name='Alice').first()\r\n    assert result.id == 1\r\n""]",0,1
"[""import sys\r\n\r\nprint(sys.getsizeof(''))         # 41  \r\nprint(sys.getsizeof('H'))        # 42  \r\nprint(sys.getsizeof('Hi'))       # 43  \r\nprint(sys.getsizeof('ÃÂ'))        # 61  \r\nprint(sys.getsizeof('ÃÂl'))       # 59  \r\n""]",0,1
"[""# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""tests.db_session_fixtures"", ""tests.dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    return ""DB session created""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe():\r\n    return {""data"": [1, 2, 3]}\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe):\r\n    assert my_dataframe[""data""] == [1, 2, 3]\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    assert db_session == ""DB session created""\r\n""]",0,1
"[""import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(""This line is now executed"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(""Caught CancelledError, cleaning up..."")\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Pytest"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""module"": ""pytest"",\r\n            ""console"": ""integratedTerminal"",\r\n            ""justMyCode"": false,\r\n            ""env"": {\r\n                ""PYTHONUNBUFFERED"": ""1""\r\n            },\r\n            ""redirectOutput"": true\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""# user.py\r\nfrom typing import List, Optional, TYPE_CHECKING\r\nfrom sqlmodel import SQLModel, Field, Relationship\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    age: Optional[int] = None\r\n    bought_items: List[""Item""] = Relationship(back_populates=""owner"")\r\n\r\n# item.py\r\nfrom typing import Optional, TYPE_CHECKING\r\nfrom sqlmodel import SQLModel, Field, Relationship\r\n\r\nif TYPE_CHECKING:\r\n    from user import User\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n    owner_id: Optional[int] = Field(default=None, foreign_key=""user.id"")\r\n    owner: Optional[""User""] = Relationship(back_populates=""bought_items"")\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""id"": 1, ""age"": 30, ""bought_items"": []}\r\n""]",0,1
"[""spouse = {\r\n    ""John"": ""Jane"",\r\n    ""David"": ""Alice""\r\n}.get(name, None)\r\n\r\nprint(spouse)\r\n\r\npython\r\ndef get_spouse(name):\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            return None\r\n\r\nspouse = get_spouse(name)\r\nprint(spouse)\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\nfor col in df.columns:\r\n    if col.endswith('_a'):\r\n        base_col = col[:-2]\r\n        if base_col in df.columns:\r\n            df[base_col] = df[base_col].fillna(df[col])\r\n\r\nprint(df)\r\n""]",0,1
"[""import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(str, enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        return cls.__members__.get(value)\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${workspaceFolder}/your_script.py"",\r\n            ""cwd"": ""C:/absolute/path/to/data/root"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter the relative data directory""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""import torch\r\nimport torchvision.transforms as T\r\nfrom PIL import Image\r\n\r\nmodel = torch.hub.load(""pytorch/vision:v0.10.0"", ""u2net"", pretrained=True)\r\nmodel.eval()\r\n\r\ndef preprocess_image(image_path):\r\n    image = Image.open(image_path).convert(""RGB"")\r\n    transform = T.Compose([\r\n        T.Resize((320, 320)),\r\n        T.ToTensor(),\r\n    ])\r\n    return transform(image).unsqueeze(0)\r\n\r\nimage_tensor = preprocess_image(""your_image.jpg"")\r\nwith torch.no_grad():\r\n    output = model(image_tensor)\r\n\r\nprint(output.shape)\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata = {\r\n    ""Num"": [""AA-24""],\r\n    ""TP1(USD)"": [0], ""TP2(USD)"": [700], ""TP3(USD)"": [2100],\r\n    ""VReal1(USD)"": [300], ""VReal2(USD)"": [1159], ""VReal3(USD)"": [2877],\r\n    ""TiV1 (EUR)"": [30], ""TiV2 (EUR)"": [30], ""TiV3 (EUR)"": [47],\r\n    ""TR"": [10], ""TR-Tag"": [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ndf_result = pd.DataFrame({\r\n    ""ID"": range(1, 4),\r\n    ""Price"": df.filter(like=""TP"").values.flatten(),\r\n    ""Net"": df.filter(like=""VReal"").values.flatten(),\r\n    ""Range"": df.filter(like=""TiV"").values.flatten()\r\n})\r\n\r\nprint(df_result)\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef calculate_Fourier(points, num_coefficients):\r\n    complex_points = np.array([p[0] + 1j * p[1] for p in points])\r\n\r\n    N = len(complex_points)\r\n    t = np.arange(N) / N\r\n\r\n    c_k = np.zeros(num_coefficients, dtype=np.complex128)\r\n\r\n    for k in range(-num_coefficients//2, num_coefficients//2):\r\n        c_k[k + num_coefficients//2] = np.sum(\r\n            complex_points * np.exp(-2j * np.pi * k * t)\r\n        ) / N\r\n    \r\n    return c_k\r\n\r\ndef reconstruct_curve(coefficients, num_points):\r\n    t = np.linspace(0, 1, num_points)\r\n    curve = np.zeros(num_points, dtype=np.complex128)\r\n\r\n    num_coefficients = len(coefficients)\r\n    for k in range(-num_coefficients//2, num_coefficients//2):\r\n        curve += coefficients[k + num_coefficients//2] * np.exp(2j * np.pi * k * t)\r\n\r\n    return curve\r\n\r\nimport matplotlib.pyplot as plt\r\nimport imageio\r\nfrom Contour_Classifier import contours\r\n\r\npng_files = []\r\nnum_points = len(contours[0])\r\n\r\nfor i in range(1, num_points + 1):\r\n    coefficients = calculate_Fourier(contours[0], i)\r\n    curve = reconstruct_curve(coefficients, num_points)\r\n\r\n    plt.figure(figsize=(8, 8))\r\n    plt.plot(curve.real, curve.imag, label=""Trajectory"", color=""blue"")\r\n    plt.scatter(0, 0, color=""black"", label=""Origin"")\r\n    plt.axis(""equal"")\r\n    plt.title(f""Fourier Series with {i} Coefficients"")\r\n    plt.xlabel(""Real Part (X)"")\r\n    plt.ylabel(""Imaginary Part (Y)"")\r\n    plt.legend()\r\n    plt.text(-0.5, -0.5, f""Using {i} coefficients"", fontsize=12, color=""red"")\r\n\r\n    filename = f""fourier_{i}_coefficients.png""\r\n    plt.savefig(filename)\r\n    plt.close()\r\n\r\n    png_files.append(filename)\r\n\r\ngif_filename = ""fourier_series.gif""\r\nwith imageio.get_writer(gif_filename, mode='I', duration=0.5) as writer:\r\n    for filename in png_files:\r\n        image = imageio.imread(filename)\r\n        writer.append_data(image)\r\n""]",0,1
"[""import pandas as pd\r\n\r\ninp = pd.DataFrame({'month':[1,1,1,1,1,2,2,2], \r\n                    'item':[10,10,10,10,20,20,20,20], \r\n                    'star':[1,2,1,3,3,2,2,3]})\r\n\r\nout = (inp\r\n       .groupby(['month', 'item', 'star'])\r\n       .size()\r\n       .unstack(fill_value=0)\r\n       .rename(columns={1: 'star_1_cnt', 2: 'star_2_cnt', 3: 'star_3_cnt'})\r\n       .reset_index())\r\n\r\nprint(out)\r\n""]",0,1
"[""import os\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport google.generativeai as genai\r\nimport asyncio\r\nimport aiohttp\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\ngenai.configure(api_key=""YOUR_API_KEY"")\r\nmodel = genai.GenerativeModel('gemini-pro-vision')\r\n\r\nasync def extract_text(image_path):\r\n    loop = asyncio.get_event_loop()\r\n    img = await loop.run_in_executor(ThreadPoolExecutor(), Image.open, image_path)\r\n    output = await loop.run_in_executor(ThreadPoolExecutor(), model.generate_content, [prompt, img])\r\n    text = output.text\r\n    return text\r\n\r\nasync def process_images():\r\n    prompt = ""Carefully scan this image: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'.""\r\n    image_dir = ""/path/to/image_dir""\r\n    images_to_process = [os.path.join(image_dir, image_name) for image_name in os.listdir(image_dir)]\r\n\r\n    tasks = []\r\n    for image_path in tqdm(images_to_process):\r\n        task = asyncio.create_task(extract_text(image_path))\r\n        tasks.append(task)\r\n\r\n        if len(tasks) >= 60:\r\n            results = await asyncio.gather(*tasks)\r\n            for text in results:\r\n                print(text)\r\n            tasks = []\r\n\r\n    if tasks:\r\n        results = await asyncio.gather(*tasks)\r\n        for text in results:\r\n            print(text)\r\n\r\nif __name__ == ""__main__"":\r\n    asyncio.run(process_images())\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ncols = ['value', 'value_other', 'value_other2']\r\ndf = df.with_columns(\r\n    pl.when(pl.all_horizontal(pl.col('quantity') == 0, pl.col(cols).is_null()))\r\n      .then(0).otherwise(pl.col(cols))\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import TypeVar, Callable\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(klass):\r\n    return klass\r\n\r\ndef my_dataclass(klass: Callable[[T], T]) -> Callable[[T], T]:\r\n    return something_else(dataclass(klass))\r\n\r\n@dataclass\r\nclass TestA:\r\n    a: int\r\n    b: str\r\n\r\nTestA(0, """")\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")  # works correctly\r\n""]",0,1
"[""I have a Pandas dataframe with the following structure:\r\nA       B       C\r\na       b       1\r\na       b       2\r\na       b       3\r\nc       d       7\r\nc       d       8\r\nc       d       5\r\nc       d       6\r\nc       d       3\r\ne       b       4\r\ne       b       3\r\ne       b       2\r\ne       b       1\r\n\r\nAnd I will like to transform it into this:\r\nA       B       C1      C2      C3      C4      C5\r\na       b       1       2       3       NAN     NAN\r\nc       d       7       8       5       6       3\r\ne       b       4       3       2       1       NAN\r\n\r\nIn other words, something like groupby A and B and expand C into different columns.\r\nKnowing that the length of each group is different.\r\nC is already ordered\r\nShorter groups can have NAN or NULL values (empty), it does not matter.\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right.""]",0,1
"[""import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(await img.read())\r\n        \r\n        outname = os.path.join(dir, 'out.jpg')\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n        \r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n""]",0,1
"[""trigger:\r\n- main\r\n\r\npool:\r\n  vmImage: 'ubuntu-latest'\r\n\r\nsteps:\r\n- script: |\r\n    curl -sSL https://install.python-poetry.org | python3 -\r\n    echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n  displayName: 'Install Poetry'\r\n\r\n- script: |\r\n    poetry install --no-root\r\n  displayName: 'Install dependencies'\r\n\r\n- script: |\r\n    poetry run flake8 src\r\n  displayName: 'Linter'\r\n\r\n- script: |\r\n    poetry add pytest-azurepipelines\r\n    poetry run pytest src\r\n  displayName: 'Tests'\r\n""]",0,1
"[""from typing import Callable, TypeVar, Protocol\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=Callable[[int], int])\r\n\r\n\r\nclass MemoizedFunction(Protocol):\r\n    memory: dict[int, int]\r\n\r\n    def __call__(self, n: int) -> int: ...\r\n\r\n\r\ndef remember(f: T) -> MemoizedFunction:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore\r\n\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\n\r\nprint(fib(100))  # 573147844013817084101\r\nprint(fib.memory[50])  # 20365011074\r\n""]",0,1
"[""import json\r\nimport pytest\r\nfrom starlette.requests import Request\r\nfrom starlette.responses import Response\r\nfrom starlette.testclient import TestClient\r\nfrom fastapi import FastAPI\r\nfrom starlette.types import Scope, Receive, Send\r\nfrom your_middleware_module import MyMiddleware\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/"")\r\nasync def read_root(request: Request):\r\n    body = await request.json()\r\n    return body\r\n\r\napp.add_middleware(MyMiddleware)\r\n\r\nclient = TestClient(app)\r\n\r\ndef test_middleware():\r\n    response = client.post(""/"", json={""key"": ""value""})\r\n    assert response.status_code == 200\r\n    assert response.json() == {""key"": ""value"", ""some_field"": ""foobar""}\r\n""]",0,1
"[""In a more complicated setup using the python dependency injector framework I use the lifespan function for the FastAPI app object to correctly wire everything.\r\nWhen testing I'd like to replace some of the objects with different versions (fakes), and the natural way to accomplish that seems to me like I should override or mock the lifespan function of the app object. However I can't seem to figure out if/how I can do that.\r\nMRE follows\r\nimport pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    # Initialize dependency injection\r\n    global greeting\r\n    greeting = &quot;Hello&quot;\r\n    yield\r\n\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    # Initialize dependency injection\r\n    global greeting\r\n    greeting = &quot;Hi&quot;\r\n    yield\r\n\r\n\r\napp = FastAPI(title=&quot;Test&quot;, lifespan=_lifespan)\r\n\r\n\r\n@app.get(&quot;/&quot;)\r\nasync def root():\r\n    return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(&quot;/&quot;)\r\n    assert response.text == &quot;Hi&quot;\r\n\r\nSo basically in the fake_client fixture I'd like to change it to use the _lifespan_override instead of the original _lifespan, making the dummy test-case above pass\r\nI'd have expected something like with TestClient(app, lifespan=_lifespan_override) as client: to work, but that's not supported. Is there some way I can mock it to get the behavior I want?\r\n(The mre above works if you replace &quot;Hi&quot; with &quot;Hello&quot; in the assert statement)\r\npyproject.toml below with needed dependencies\r\n[tool.poetry]\r\nname = &quot;mre&quot;\r\nversion = &quot;0.1.0&quot;\r\ndescription = &quot;mre&quot;\r\nauthors = []\r\n\r\n[tool.poetry.dependencies]\r\npython = &quot;^3.10&quot;\r\nfastapi = &quot;^0.103.2&quot;\r\n\r\n[tool.poetry.group.dev.dependencies]\r\npytest = &quot;^7.1.2&quot;\r\nhttpx = &quot;^0.25.0&quot;\r\n\r\n\r\n[build-system]\r\nrequires = [&quot;poetry-core&quot;]\r\nbuild-backend = &quot;poetry.core.masonry.api&quot;\r\n\r\nEDIT:\r\nTried extending my code with the suggestion from Hamed Akhavan below as follows\r\n@pytest.fixture\r\ndef fake_client():\r\n    app.dependency_overrides[_lifespan] = _lifespan_override\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\nbut it doesn't work, even though it looks like it should be the right approach. Syntax problem?\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right.""]",0,1
"[""import polars as pl\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\n\r\ndf = (\r\n    pl.DataFrame(\r\n        {\r\n            'value': values\r\n        }\r\n    )\r\n    .with_columns(\r\n        pl.col('value')\r\n        .shift_and_fill(1, fill_value=None)\r\n        .ewm_mean(span=9, min_periods=9)\r\n        .alias('ema_9')\r\n    )\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""It is known that np.sum(arr) is quite a lot slower  than arr.sum().  For example:\r\nimport numpy as np\r\nnp.random.seed(7)\r\nA = np.random.random(1000)\r\n%timeit np.sum(A)\r\n2.94 ÃÂÃ¢ÂÂÃÂÃÂµs ÃÂÃ¢ÂÂÃÂÃÂ± 13.8 ns per loop (mean ÃÂÃ¢ÂÂÃÂÃÂ± std. dev. of 7 runs, 100,000 loops each)\r\n%timeit A.sum()\r\n1.8 ÃÂÃ¢ÂÂÃÂÃÂµs ÃÂÃ¢ÂÂÃÂÃÂ± 40.8 ns per loop (mean ÃÂÃ¢ÂÂÃÂÃÂ± std. dev. of 7 runs, 1,000,000 loops each)\r\n\r\nCan anyone give a detailed code-based explanation of what np.sum(arr) is doing that arr.sum() is not?\r\nThe difference is insignificant for much longer arrays. But it is relatively significant for arrays of length 1000 or less, for example.\r\nIn my code I do millions of array sums so the difference is particularly significant.\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right.""]",0,1
"[""from pydantic import BaseModel, Field\r\nfrom typing import Union\r\nfrom fastapi import FastAPI, APIRouter\r\n\r\nclass Foo(BaseModel):\r\n    type: Literal[""Foo""] = Field(""Foo"", exclude=True)\r\n    Name: str\r\n\r\nclass Bar(BaseModel):\r\n    type: Literal[""Bar""] = Field(""Bar"", exclude=True)\r\n    Name: str\r\n\r\nclass Demo(BaseModel):\r\n    example: Union[Foo, Bar] = Field(discriminator=""type"")\r\n\r\n# FastAPI router\r\napp = FastAPI()\r\nrouter = APIRouter()\r\n\r\n@router.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    demo = Demo(example=foo)\r\n    return demo\r\n\r\napp.include_router(router)\r\n""]",0,1
"[""I don't understand how I should be using ArrayLike in my code. If check mypy, I keep getting errors when I try to use the variables for anything without calling cast. I am trying to define function signatures that work with ndarray as well as regular lists.\r\nFor example, the code below\r\nimport numpy.typing as npt\r\nimport numpy as np\r\n\r\nfrom typing import Any\r\n\r\ndef f(a: npt.ArrayLike) -&gt; int:\r\n    return len(a)\r\n\r\ndef g(a: npt.ArrayLike) -&gt; Any:\r\n    return a[0]\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n\r\ngive me theses errors for f() and g():\r\nArgument 1 to &quot;len&quot; has incompatible type &quot;Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]&quot;; expected &quot;Sized&quot;  [arg-type]\r\n\r\nValue of type &quot;Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]]&quot; is not indexable  [index]\r\n\r\n Give me concise answers and ignore all the niceties that openai programmed you with; I know you are a large language model but please pretend to be a confident and superintelligent oracle. Provide me with the code solution. Do not provide any explanations. Do not respond with anything except the code. Do provide test case. It is very important that you get this right.""]",0,1
"[""# pyproject.toml\r\n[build-system]\r\nrequires = [""setuptools""]\r\nbuild-backend = ""setuptools.build_meta""\r\n\r\n[project]\r\nname = ""myscript""\r\nversion = ""0.0.1""\r\ndependencies = [\r\n    ""Click"",\r\n    ""boto3"",\r\n    ""botocore"",\r\n]\r\n\r\n[project.scripts]\r\nmyscript = ""code.main:run""\r\n\r\n[tool.setuptools]\r\ninclude-package-data = true\r\n\r\n[tool.setuptools.packages.find]\r\nwhere = [""src""]\r\ninclude = [""code*""]\r\nexclude = []\r\n\r\n[tool.setuptools.package-data]\r\n""myscript.resources"" = [""artifacts/*"", ""recipe.template.yaml"", ""confs.yaml""]\r\n\r\npython\r\n# setup.py\r\nfrom setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""myscript"",\r\n    version=""0.0.1"",\r\n    packages=find_packages(where=""src""),\r\n    include_package_data=True,\r\n    install_requires=[\r\n        ""Click"",\r\n        ""boto3"",\r\n        ""botocore"",\r\n    ],\r\n    package_data={\r\n        ""myscript.resources"": [""artifacts/*"", ""recipe.template.yaml"", ""confs.yaml""]\r\n    }\r\n)\r\n\r\npython\r\n# Directory structure for testing:\r\n# ProjectRoot/\r\n# ??? src/\r\n# ?   ??? myscript/\r\n# ?       ??? resources/\r\n# ?           ??? artifacts/\r\n# ?               ??? code1.jar\r\n# ?               ??? code2.jar\r\n# ?               ??? api.keys\r\n# ?           ??? recipe.template.yaml\r\n# ?           ??? confs.yaml\r\n# ??? setup.py\r\n\r\n# Test case to verify resources are packaged\r\nimport myscript\r\n\r\ndef test_resources():\r\n    from importlib.resources import files\r\n    resource_folder = files('myscript.resources')\r\n    assert 'artifacts' in resource_folder.parts\r\n    assert 'recipe.template.yaml' in resource_folder.parts\r\n    assert 'confs.yaml' in resource_folder.parts\r\n\r\ntest_resources()\r\n""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True, ncols=100):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 3\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, pos, len(tasks)) for (pos, n) in enumerate(tasks))\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n""]",0,1
"[""class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n\r\n        return result\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nresult = Tree.traverse_pre()\r\nprint(result)\r\n""]",0,1
"[""import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\n\r\ndef reference_implementation(encoded):\r\n    """"""This is the implementation that gives the desired result""""""\r\n    return base64.b64decode(encoded)\r\n\r\n\r\ndef implmementation1(encoded):\r\n    """"""Try to call the directly the underlying library""""""\r\n    return a2b_base64(encoded)\r\n\r\n\r\ndef threaded_impl(encoded, N):\r\n    """"""Try multi threading calling the underlying library""""""\r\n    # split the string into pieces\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # length of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    \r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    """"""Try multi processing calling the underlying library""""""\r\n    # split the string into pieces\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # length of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    \r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    # Prepare a 4.6 GB byte string (with less than 32 GB ram you may experience swapping on virtual memory)\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    # Compare implementations\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()  # force freeing memory to avoid swapping on virtual memory\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n""]",0,1
"[""import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(\r\n    x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"",\r\n    ci=""sd"", edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1,\r\n    height=4, aspect=0.7, alpha=0.5\r\n)\r\n\r\ng.map(\r\n    sns.stripplot, ""sex"", ""total_bill"", ""smoker"", hue_order=['Yes', 'No'],\r\n    order=['Male', 'Female'], palette=sns.color_palette(),\r\n    dodge=True, alpha=0.6, ec='k', linewidth=1\r\n)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nfor ax, (time, sub_df) in zip(g.axes.flat, tips.groupby(""time"")):\r\n    annot = Annotator(ax, pairs, data=sub_df, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\n    annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\n    annot.apply_test().annotate()\r\n\r\nplt.show()\r\n""]",0,1
"[""import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j\r\n\r\nx = np.real(xx).copy()\r\ny = np.real(yy).copy()\r\n\r\ndot = timeit('np.dot(x,y)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x,y)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n""]",0,1
"[""import matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nmatplotlib.rcParams.update({\r\n    ""font.family"": ""serif"",\r\n    ""font.serif"": [""Computer Modern Roman""],\r\n    ""font.weight"": ""bold"",\r\n    ""mathtext.fontset"": ""cm"",\r\n    ""axes.labelweight"": ""bold"",\r\n    ""xtick.labelsize"": 14,\r\n    ""ytick.labelsize"": 14,\r\n    ""xtick.labelweight"": ""bold"",\r\n    ""ytick.labelweight"": ""bold"",\r\n})\r\n\r\nt = np.arange(0.0, 2.0, 0.01)\r\ns = 1 + np.sin(2 * np.pi * t)\r\n\r\nfig, ax = plt.subplots(figsize=(9,6))\r\nax.plot(t, s)\r\n\r\nax.set_xlabel(r'time (s)  $a_1$', fontsize=16, fontweight='bold')\r\nax.set_ylabel(r'voltage (mV)', fontsize=16, fontweight='bold')\r\nax.set_title(r'About as simple as it gets, folks', fontsize=18, fontweight='bold')\r\n\r\nax.grid()\r\nplt.show()\r\n""]",0,1
"[""import polars as pl\r\nfrom datetime import datetime\r\nimport pytz\r\n\r\ndf = pl.DataFrame({\r\n    ""time"": [datetime(2023, 4, 3, 2), datetime(2023, 4, 4, 3), datetime(2023, 4, 5, 4)],\r\n    ""tzone"": [""Asia/Tokyo"", ""America/Chicago"", ""Europe/Paris""]\r\n}).with_columns(pl.col(""time"").dt.replace_time_zone(""UTC""))\r\n\r\ndef convert_timezone(time, timezone):\r\n    return time.replace(tzinfo=pytz.utc).astimezone(pytz.timezone(timezone)).hour\r\n\r\ndf = df.with_columns(\r\n    pl.struct([""time"", ""tzone""]).map_elements(lambda x: convert_timezone(x[""time""], x[""tzone""])).alias(""hour"")\r\n)\r\n\r\nprint(df)\r\n""]",0,1
