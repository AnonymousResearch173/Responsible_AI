Code,label,predicted_label
"[""import org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\npublic class Clt {\r\n    private final RestTemplate rt = new RestTemplate();\r\n\r\n    public String req(String url) {\r\n        ResponseEntity<String> rs = rt.getForEntity(url, String.class);\r\n        return rs.getBody();\r\n    }\r\n}\r\n""]",0,1
"[""class Ins {\r\n    static void chk(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n""]",0,1
"[""package test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        one.run();\r\n    }\r\n}\r\n""]",0,1
"[""import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport java.security.*;\r\nimport java.security.spec.ECGenParameterSpec;\r\nimport java.util.Base64;\r\n\r\npublic class GenKey {\r\n    private static final String CUR = ""secp384r1"";\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Security.addProvider(new BouncyCastleProvider());\r\n            ECGenParameterSpec par = new ECGenParameterSpec(CUR);\r\n            KeyPairGenerator gen = KeyPairGenerator.getInstance(""EC"", ""BC"");\r\n            gen.initialize(par, new SecureRandom());\r\n            KeyPair kp = gen.generateKeyPair();\r\n            String pri = toPem(kp.getPrivate());\r\n            System.out.println(pri);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String toPem(PrivateKey key) {\r\n        String b64 = Base64.getEncoder().encodeToString(key.getEncoded());\r\n        return ""-----BEGIN PRIVATE KEY-----\n"" + b64 + ""\n-----END PRIVATE KEY-----"";\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.*;\r\n\r\npublic class MsgTrc {\r\n\r\n    private final Tracer trc;\r\n\r\n    public MsgTrc(Tracer trc) {\r\n        this.trc = trc;\r\n    }\r\n\r\n    public void procMsg(String tid) {\r\n        SpanContext ctx = SpanContext.createFromRemoteParent(\r\n            tid, ""0000000000000000"", TraceFlags.getSampled(), TraceState.getDefault()\r\n        );\r\n        Context c = Context.current().with(Span.wrap(ctx));\r\n\r\n        try (Scope s = c.makeCurrent()) {\r\n            Span sp = trc.spanBuilder(""consumeMsg"").setParent(c).startSpan();\r\n            sp.end();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class ZigZag {\r\n    public static int sol(List<Integer> lst) {\r\n        List<Integer> up = new ArrayList<>();\r\n        List<Integer> dn = new ArrayList<>();\r\n        List<Integer> up2 = new ArrayList<>();\r\n\r\n        TreeSet<Integer> set = new TreeSet<>(lst);\r\n        for (int x : set) up.add(x);\r\n\r\n        for (int i = up.size() - 1; i >= 0; i--) dn.add(up.get(i));\r\n\r\n        for (int x : set) {\r\n            if (x > dn.get(dn.size() - 1)) up2.add(x);\r\n        }\r\n\r\n        return up.size() + dn.size() + up2.size() - 2;\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        System.out.println(sol(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(sol(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(sol(List.of(1, 100)));\r\n        System.out.println(sol(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class AppCfg {\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hdnMet() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> fil = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        fil.setUrlPatterns(List.of(""/*""));\r\n        return fil;\r\n    }\r\n}\r\n""]",0,1
"[""import org.slf4j.MDC;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class RunTest {\r\n    private static final ExecutorService fJ = new ForkJoinPool(30);\r\n    private static final ExecutorService vT = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        int from = 1, to = 100;\r\n        Svc svc = new Svc();\r\n\r\n        System.out.println(""ForkJoin: "" + run(fJ, svc, from, to));\r\n        System.out.println(""Virtual: "" + run(vT, svc, from, to));\r\n\r\n        fJ.shutdown();\r\n        vT.shutdown();\r\n    }\r\n\r\n    static long run(ExecutorService exe, Svc svc, int from, int to) throws Exception {\r\n        long st = System.nanoTime();\r\n        exe.submit(() -> IntStream.rangeClosed(-from, to)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        svc.set(""key-"" + i);\r\n                        MDC.put(""key1"", ""val1"");\r\n                        MDC.put(""key2"", ""val2"");\r\n                        return svc.call(i);\r\n                    } finally {\r\n                        svc.rm();\r\n                        MDC.clear();\r\n                    }\r\n                })\r\n                .toList()).get();\r\n        return (System.nanoTime() - st) / 1_000_000;\r\n    }\r\n}\r\n\r\nclass Svc {\r\n    private static final ThreadLocal<String> tl = new ThreadLocal<>();\r\n\r\n    void set(String v) { tl.set(v); }\r\n    void rm() { tl.remove(); }\r\n\r\n    int call(int i) {\r\n        try { Thread.sleep(10); } catch (Exception e) { }\r\n        return i * 2;\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        OkHttpClient cli = new OkHttpClient();\r\n        MediaType typ = MediaType.parse(""application/octet-stream"");\r\n        RequestBody bod = RequestBody.create(typ, new byte[0]);\r\n        String fN = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String cD = ""attachment; filename*=UTF-8''"" + java.net.URLEncoder.encode(fN, ""UTF-8"");\r\n\r\n        Request req = new Request.Builder()\r\n                .url(""xxxx"")\r\n                .method(""POST"", bod)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", cD)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response res = cli.newCall(req).execute();\r\n        System.out.println(res.code());\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class Par {\r\n    protected abstract static class InPar {\r\n        public InPar get() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Chi extends Par {\r\n    public static class InChi extends InPar {}\r\n}\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        var obj = new Chi.InChi().get();\r\n        System.out.println(((Object) obj).getClass().getName());\r\n    }\r\n}\r\n""]",0,1
"[""package tskbar;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport tskbar.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        Button btn = new Button(""Start Task"");\r\n\r\n        btn.setOnAction(e -> {\r\n            long win = Window.getWindows().getFirst().getRawHandle();\r\n            Task<Void> tsk = new Task<>() {\r\n                @Override\r\n                protected Void call() {\r\n                    try (var ar = Arena.ofConfined()) {\r\n                        var prop = ar.allocateFrom(""_NET_WM_STATE"");\r\n                        var prog = ar.allocateFrom(""_NET_WM_STATE_DEMANDS_ATTENTION"");\r\n\r\n                        MemorySegment dsp = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        MemorySegment winSeg = MemorySegment.ofAddress(win);\r\n                        Xlib_h.XChangeProperty(dsp, winSeg.address(), prop.address(), 4, 32, 0, prog, 1);\r\n                        Xlib_h.XFlush(dsp);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment data = ar.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(dsp, winSeg.address(), prop.address(), 4, 32, 0, data, 1);\r\n                            Xlib_h.XFlush(dsp);\r\n                        }\r\n\r\n                        Xlib_h.XCloseDisplay(dsp);\r\n                    } catch (Throwable x) {\r\n                        x.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(tsk).start();\r\n        });\r\n\r\n        VBox box = new VBox(10, btn);\r\n        Scene scn = new Scene(box, 300, 200);\r\n        stg.setScene(scn);\r\n        stg.setTitle(""Taskbar Progress"");\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import jakarta.mail.internet.InternetAddress;\r\nimport jakarta.mail.internet.MimeMessage;\r\nimport jakarta.mail.Message;\r\nimport jakarta.mail.MessagingException;\r\nimport org.springframework.mail.javamail.JavaMailSender;\r\nimport org.springframework.mail.javamail.MimeMessagePreparator;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n""]",0,1
"[""({\r\n    @ApiResponse(responseCode = ""200"", content = @Content(\r\n        examples = @ExampleObject(name = ""Success"", value = ""JsonResponse...""),\r\n        mediaType = MediaType.APPLICATION_JSON_VALUE)),\r\n    @ApiResponse(responseCode = ""400"", description = ""BAD REQUEST"", content = @Content(schema = @Schema(hidden = true)))\r\n})\r\n\r\n@io.swagger.v3.oas.annotations.parameters.RequestBody(\r\n    content = @Content(examples = @ExampleObject(name = ""Req"", value = ""JsonRequestBody...""))\r\n)\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class Esc {\r\n    private static final Map<Character, String> map = new HashMap<>();\r\n\r\n    static {\r\n        map.put('<', ""&lt;"");\r\n        map.put('>', ""&gt;"");\r\n        map.put('&', ""&amp;"");\r\n        map.put('\'', ""&#039;"");\r\n        map.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String esc(String inp) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : inp.toCharArray()) {\r\n            sb.append(map.getOrDefault(c, String.valueOf(c)));\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\nclass MltSum {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> res = ConcurrentHashMap.newKeySet();\r\n        ExecutorService ex = Executors.newFixedThreadPool(3);\r\n\r\n        ex.execute(() -> addMul(n, 3, res));\r\n        ex.execute(() -> addMul(n, 5, res));\r\n        ex.execute(() -> addMul(n, 7, res));\r\n\r\n        ex.shutdown();\r\n        try { ex.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS); } \r\n        catch (InterruptedException e) {}\r\n\r\n        return res.stream().mapToInt(Integer::intValue).sum();\r\n    }\r\n\r\n    private void addMul(int n, int d, Set<Integer> res) {\r\n        for (int i = d; i <= n; i += d) res.add(i);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MltSum obj = new MltSum();\r\n        System.out.println(obj.getSum(10));\r\n        System.out.println(obj.getSum(1000));\r\n        System.out.println(obj.getSum(76293));\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n\r\nimport java.util.UUID;\r\n\r\npublic record AggId(@JsonValue UUID id) {}\r\n\r\npublic class Agg {\r\n\r\n    public final AggId aggId;\r\n\r\n    @JsonCreator\r\n    public Agg(@JsonProperty(""aggregateId"") AggId aggId) {\r\n        this.aggId = aggId;\r\n    }\r\n}\r\n\r\nclass Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper objMap = new ObjectMapper();\r\n        String str = ""{ \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\"" }"";\r\n        Agg agg = objMap.readValue(str, Agg.class);\r\n        System.out.println(objMap.writeValueAsString(agg));\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.extension.BeforeAllCallback;\r\nimport org.junit.jupiter.api.extension.ExtensionContext;\r\nimport org.mockito.MockedStatic;\r\nimport org.mockito.Mockito;\r\n\r\npublic class MockUtilExt implements BeforeAllCallback, ExtensionContext.Store.CloseableResource {\r\n\r\n    private static MockedStatic<UtilCls> mock;\r\n\r\n    @Override\r\n    public void beforeAll(ExtensionContext ctx) {\r\n        if (mock == null) {\r\n            mock = Mockito.mockStatic(UtilCls.class);\r\n            mock.when(UtilCls::genId).thenReturn(""mock-id"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        if (mock != null) {\r\n            mock.close();\r\n            mock = null;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.*;\r\nimport java.time.format.*;\r\nimport java.time.temporal.*;\r\n\r\npublic record Wk(int yr, int wk) implements Comparable<Wk> {\r\n\r\n    private static final DateTimeFormatter fmt = DateTimeFormatter.ofPattern(""YYYY-'W'ww"");\r\n\r\n    public static Wk of(String str) {\r\n        TemporalAccessor t = fmt.parse(str);\r\n        return new Wk(t.get(ChronoField.YEAR), t.get(ChronoField.ALIGNED_WEEK_OF_YEAR));\r\n    }\r\n\r\n    public boolean isBfr(Wk o) {\r\n        return this.compareTo(o) < 0;\r\n    }\r\n\r\n    public int wksBtw(Wk o) {\r\n        return Period.between(LocalDate.ofYearDay(yr, 1).with(WeekFields.ISO.weekOfYear(), wk),\r\n                LocalDate.ofYearDay(o.yr, 1).with(WeekFields.ISO.weekOfYear(), o.wk)).getDays() / 7;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Wk o) {\r\n        return yr != o.yr ? Integer.compare(yr, o.yr) : Integer.compare(wk, o.wk);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return fmt.format(LocalDate.ofYearDay(yr, 1).with(WeekFields.ISO.weekOfYear(), wk));\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\n\r\nclass ExHnd<T extends Throwable> {\r\n    void thrw(T ex) throws T {\r\n        throw ex;\r\n    }\r\n}\r\n\r\npublic class InfTst {\r\n    public static void main(String[] args) {\r\n        ExHnd<RuntimeException> exHnd = new ExHnd<>();\r\n        try {\r\n            exHnd.thrw(new IllegalArgumentException());\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n\r\n        ExHnd<ExecutionException> chkExHnd = new ExHnd<>();\r\n        try {\r\n            chkExHnd.thrw(new ExecutionException(""Err"", null));\r\n        } catch (ExecutionException e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class EqDiv {\r\n    public static boolean chk(int[] arr) {\r\n        if (arr.length % 2 != 0) return false;\r\n        return chk(arr, 0, 0, 0, 0);\r\n    }\r\n\r\n    private static boolean chk(int[] arr, int idx, int s1, int c1, int c2) {\r\n        if (idx == arr.length) return c1 == c2 && s1 * 2 == sum(arr, 0);\r\n        return chk(arr, idx + 1, s1 + arr[idx], c1 + 1, c2) ||\r\n               chk(arr, idx + 1, s1, c1, c2 + 1);\r\n    }\r\n\r\n    private static int sum(int[] arr, int idx) {\r\n        return idx == arr.length ? 0 : arr[idx] + sum(arr, idx + 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(chk(new int[]{1, 5, 11, 5}));\r\n        System.out.println(chk(new int[]{1, 2, 3, 5}));\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TipFix extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        Label lbl = new Label(""TEST\nTEST\nTEST"");\r\n        lbl.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tip = new Tooltip(""TOOLTIP"");\r\n        tip.setShowDelay(Duration.seconds(0.5));\r\n        lbl.setTooltip(tip);\r\n\r\n        lbl.setOnMouseEntered(e -> {\r\n            Bounds b = lbl.localToScreen(lbl.getBoundsInLocal());\r\n            tip.show(lbl, b.getMaxX(), b.getMaxY());\r\n        });\r\n\r\n        lbl.setOnMouseExited(e -> tip.hide());\r\n\r\n        stg.setScene(new Scene(new AnchorPane(lbl)));\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SwiBtn extends Control {\r\n    private final ObjectProperty<EventHandler<ActionEvent>> act = new ObjectPropertyBase<>() {\r\n        @Override protected void invalidated() { setEventHandler(ActionEvent.ACTION, get()); }\r\n        @Override public Object getBean() { return SwiBtn.this; }\r\n        @Override public String getName() { return ""onAction""; }\r\n    };\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() { return act; }\r\n    public final void setOnAction(EventHandler<ActionEvent> val) { act.set(val); }\r\n    public final EventHandler<ActionEvent> getOnAction() { return act.get(); }\r\n\r\n    public SwiBtn() { setSkin(new SwiBtnSkin(this)); }\r\n    \r\n    @Override protected Skin<?> createDefaultSkin() { return new SwiBtnSkin(this); }\r\n\r\n    public void fire() { fireEvent(new ActionEvent()); }\r\n}\r\n""]",0,1
"[""import static org.junit.jupiter.api.Assertions.*;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.stream.Stream;\r\n\r\nclass MyTest {\r\n    @ParameterizedTest\r\n    @MethodSource(""mapSrc"")\r\n    void chk(Map<String, Object> arg) {\r\n        assertNotNull(arg);\r\n        assertNotNull(arg.get(""1""));\r\n    }\r\n\r\n    static Stream<Map<String, Object>> mapSrc() {\r\n        Map<String, Object> mp = new HashMap<>();\r\n        mp.put(""1"", ""Obj1"");\r\n        mp.put(""2"", ""Obj2"");\r\n        return Stream.of(mp);\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\nclass DTF {\r\n    public static void main(String[] args) {\r\n        String[] ts = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter fmt = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String t : ts) {\r\n            try {\r\n                LocalDateTime dt = LocalDateTime.parse(t, fmt);\r\n                System.out.println(""OK: "" + dt);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""FAIL: "" + t);\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class Dup {\r\n    public static void main(String[] a) {\r\n        String s = ""Great"";\r\n        int c;\r\n        char[] ch = s.toCharArray();\r\n        boolean f = false;\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n        for (int i = 0; i < ch.length; i++) {\r\n            c = 1;\r\n            for (int j = i + 1; j < ch.length; j++) {\r\n                if (ch[i] == ch[j] && ch[i] != ' ') {\r\n                    c++;\r\n                    ch[j] = '0';\r\n                }\r\n            }\r\n            if (c > 1 && ch[i] != '0') {\r\n                System.out.println(ch[i]);\r\n                f = true;\r\n            }\r\n        }\r\n        if (!f) System.out.println(""no duplicates"");\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class Rot extends Application {\r\n    private Group grp;\r\n    private int ang = 0;\r\n\r\n    public void start(Stage stg) {\r\n        Arc b = new Arc(100, 100, 80, 80, 0, 90);\r\n        b.setType(ArcType.ROUND);\r\n        b.setFill(Color.BLUE);\r\n        \r\n        Arc g = new Arc(100, 100, 80, 80, 90, 90);\r\n        g.setType(ArcType.ROUND);\r\n        g.setFill(Color.GREEN);\r\n        \r\n        Arc y = new Arc(100, 100, 80, 80, 180, 90);\r\n        y.setType(ArcType.ROUND);\r\n        y.setFill(Color.YELLOW);\r\n        \r\n        Arc r = new Arc(100, 100, 80, 80, 270, 90);\r\n        r.setType(ArcType.ROUND);\r\n        r.setFill(Color.RED);\r\n        \r\n        grp = new Group(b, g, y, r);\r\n        \r\n        Button rot = new Button(""Rotate"");\r\n        rot.setOnAction(this::clk);\r\n        \r\n        FlowPane p = new FlowPane(grp, rot);\r\n        p.setAlignment(Pos.CENTER);\r\n        p.setHgap(20);\r\n        \r\n        stg.setScene(new Scene(p, 250, 250));\r\n        stg.setTitle(""Wheel"");\r\n        stg.show();\r\n    }\r\n\r\n    public void clk(ActionEvent e) {\r\n        ang += 90;\r\n        grp.setRotate(ang);\r\n    }\r\n\r\n    public stat\r\n""]",0,1
"[""import org.springframework.web.bind.annotation.*;\r\nimport org.springframework.http.*;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport java.net.http.*;\r\nimport java.net.*;\r\n\r\n@RestController\r\n@Slf4j\r\npublic class Ctl {\r\n    @GetMapping(""/m1"")\r\n    public ResponseEntity<String> m1(@RequestParam String in) throws Exception {\r\n        log.info(""In m1 with {}"", in);\r\n        HttpRequest req = HttpRequest.newBuilder().uri(URI.create(""http://localhost:8090/m2"")).build();\r\n        HttpResponse<String> res = HttpClient.newHttpClient().send(req, HttpResponse.BodyHandlers.ofString());\r\n        return ResponseEntity.ok(res.body());\r\n    }\r\n\r\n    @GetMapping(""/m2"")\r\n    public ResponseEntity<String> m2() {\r\n        log.info(""In m2"");\r\n        return ResponseEntity.ok(""OK"");\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.paint.*;\r\nimport javafx.scene.shape.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.stage.*;\r\n\r\npublic class Drw3D extends Application {\r\n    private MeshView msh;\r\n    private PhongMaterial mat1 = new PhongMaterial(Color.RED);\r\n    private PhongMaterial mat2 = new PhongMaterial(Color.BLUE);\r\n\r\n    public void start(Stage stg) {\r\n        msh = new MeshView(new Sphere(50).getMesh());\r\n        msh.setMaterial(mat1);\r\n\r\n        Button btn = new Button(""Tog"");\r\n        btn.setOnAction(e -> msh.setMaterial(msh.getMaterial() == mat1 ? mat2 : mat1));\r\n\r\n        Group grp = new Group(msh);\r\n        Scene scn = new Scene(new Group(grp, btn), 400, 400, true);\r\n        scn.setFill(Color.GRAY);\r\n        scn.setCamera(new PerspectiveCamera());\r\n\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.lang.ScopedValue;\r\n\r\nvoid main() throws InterruptedException {\r\n    final var nm = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope<>()) {\r\n        ScopedValue.where(nm, ""haha"", () -> {\r\n            ts.fork(() -> ScopedValue.where(nm, ""haha"", () -> null));\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.input.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        var root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(mkLbl());\r\n        var scn = new Scene(root);\r\n        scn.getStylesheets().add(""/ExampleStylesheet.css"");\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label mkLbl() {\r\n        var lbl = new Label(""Placeholder\nText"");\r\n        lbl.getStyleClass().add(""test-label"");\r\n        lbl.setTextAlignment(javafx.scene.text.TextAlignment.CENTER);\r\n        lbl.setOnMouseEntered(e -> inLbl(e, lbl));\r\n        lbl.setOnMouseExited(e -> outLbl(e, lbl));\r\n        return lbl;\r\n    }\r\n\r\n    public void inLbl(MouseEvent e, Label lbl) {\r\n        var bnd = lbl.getBoundsInParent();\r\n        if (bnd.contains(e.getX(), e.getY())) {\r\n            System.out.println(""Inside label."");\r\n        }\r\n    }\r\n\r\n    public void outLbl(MouseEvent e, Label lbl) {\r\n        var bnd = lbl.getBoundsInParent();\r\n        if (!bnd.contains(e.getX(), e.getY())) {\r\n            System.out.println(""Outside label."");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        var col = new ColumnConstraints();\r\n        col.setMinWidth(Region.USE_PREF_SIZE);\r\n        col.setHgrow(Priority.ALWAYS);\r\n\r\n        var g1 = mkGp(""One two three"", col);\r\n        var g2 = mkGp(""Four five six seven"", col);\r\n\r\n        var t1 = new TitledPane(""Top"", g1);\r\n        var t2 = new TitledPane(""Bottom"", g2);\r\n        t1.setCollapsible(false);\r\n        t2.setCollapsible(false);\r\n\r\n        var scn = new Scene(new VBox(t1, t2), 400, 200);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public GridPane mkGp(String txt, ColumnConstraints col) {\r\n        var gp = new GridPane();\r\n        var lbl = new Label(txt);\r\n        var fld = new TextField();\r\n        gp.add\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Popup;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UpMenu extends Application {\r\n    @Override\r\n    public void start(Stage stg) {\r\n        MenuBar bar = new MenuBar();\r\n        Menu itm = new Menu(""Opt"");\r\n        MenuItem sub = new MenuItem(""Sel"");\r\n        itm.getItems().add(sub);\r\n        bar.getMenus().add(itm);\r\n\r\n        Popup pop = new Popup();\r\n        VBox box = new VBox(sub);\r\n        box.setStyle(""-fx-background-color: white; -fx-border-color: black;"");\r\n        pop.getContent().add(box);\r\n\r\n        itm.setOnShowing(e -> {\r\n            pop.show(bar, bar.getLayoutX(), bar.getLayoutY() - box.getHeight());\r\n        });\r\n\r\n        itm.setOnHidden(e -> pop.hide());\r\n\r\n        VBox root = new VBox();\r\n        root.getChildren().add(bar);\r\n        root.setStyle(""-fx-background-color: gray;"");\r\n        root.setTranslateY(300);\r\n\r\n        Scene scn = new Scene(root, 400, 400);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import com.itextpdf.text.*;\r\nimport com.itextpdf.text.pdf.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\n\r\nclass PdfMark {\r\n    private static final String DIR = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    private static final String SRC = DIR + ""test.pdf"";\r\n    private static final String OUT = DIR + ""output.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException, DocumentException {\r\n        ByteArrayOutputStream buf = new ByteArrayOutputStream();\r\n        byte[] raw = Files.readAllBytes(Paths.get(SRC));\r\n        String txt = ""???"";\r\n        String fntPath = DIR + ""myCustomFont.ttf"";\r\n        Font fnt = FontFactory.getFont(fntPath, BaseFont.IDENTITY_H, 16);\r\n        BaseFont bf = fnt.getBaseFont();\r\n        PdfReader rdr = new PdfReader(raw);\r\n        PdfStamper stp = new PdfStamper(rdr, buf);\r\n        int pg = rdr.getNumberOfPages();\r\n\r\n        for (int i = 1; i <= pg; i++) {\r\n            Rectangle sz = rdr.getPageSizeWithRotation(i);\r\n            PdfContentByte lay = stp.getOverContent(i);\r\n            PdfGState gs = new PdfGState();\r\n            gs.setFillOpacity(0.3f);\r\n            lay.saveState();\r\n            lay.setGState(gs);\r\n            lay.beginText();\r\n            lay.setFontAndSize(bf, 16);\r\n            for (float x = 70f; x < sz.getWidth(); x += 150) {\r\n                for (float y = 90; y < sz.getHeight(); y += 150) {\r\n                    lay.showTextAlignedKerned(Element.ALIGN_CENTER, txt, x, y, 45f);\r\n                }\r\n            }\r\n            lay.endText();\r\n            lay.restoreState();\r\n        }\r\n\r\n        stp.close();\r\n        rdr.close();\r\n        Files.write(Paths.get(OUT), buf.toByteArray());\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.*;\r\nimport org.springframework.boot.autoconfigure.*;\r\nimport org.springframework.security.config.annotation.web.builders.*;\r\nimport org.springframework.security.core.context.*;\r\nimport org.springframework.security.web.*;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@SpringBootApplication\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(App.class, args);\r\n    }\r\n}\r\n\r\n@RestController\r\nclass Ctl {\r\n    @GetMapping(""/user"")\r\n    public String usr() {\r\n        return SecurityContextHolder.getContext().getAuthentication().getName();\r\n    }\r\n}\r\n\r\n@Configuration\r\nclass SecCfg {\r\n    @Bean\r\n    public SecurityFilterChain flt(HttpSecurity sec) throws Exception {\r\n        return sec.authorizeHttpRequests(r -> r.anyRequest().authenticated())\r\n                  .oauth2Login().and().build();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Gd extends GridPane {\r\n    public Gd(int c, int r, int hg, int vg, int fh, int fv) {\r\n        setHgap(hg);\r\n        setVgap(vg);\r\n        for (int y = 0; y < r; y++) {\r\n            for (int x = 0; x < c; x++) {\r\n                var f = new TextField();\r\n                f.setMinSize(fh, fv);\r\n                f.setMaxSize(fh, fv);\r\n                add(f, x, y);\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.*;\r\nimport org.springframework.http.*;\r\nimport org.springframework.web.servlet.config.annotation.*;\r\n\r\n@Configuration\r\npublic class WebCfg implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer cfg) {\r\n        cfg.defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.*;\r\nimport org.junit.jupiter.api.extension.*;\r\nimport org.mockito.*;\r\nimport org.mockito.junit.jupiter.*;\r\n\r\nimport java.io.*;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass PdfTest {\r\n    \r\n    @Mock\r\n    PDFDocument doc;\r\n    \r\n    @Mock\r\n    PSConverter cnv;\r\n    \r\n    @InjectMocks\r\n    PdfSvc svc;\r\n    \r\n    @Test\r\n    void tst() throws Exception {\r\n        try (MockedConstruction<PDFDocument> mockDoc = mockConstruction(PDFDocument.class,\r\n                (m, ctx) -> doNothing().when(m).load(any(ByteArrayInputStream.class)));\r\n             MockedConstruction<PSConverter> mockCnv = mockConstruction(PSConverter.class,\r\n                (m, ctx) -> doAnswer(i -> {\r\n                    ByteArrayOutputStream out = i.getArgument(1);\r\n                    out.write(new byte[]{1, 2, 3});\r\n                    return out;\r\n                }).when(m).convert(any(), any(ByteArrayOutputStream.class)))) {\r\n\r\n            PDFDocument d = new PDFDocument();\r\n            PSConverter c = new PSConverter();\r\n            d.load(new ByteArrayInputStream(new byte[0]));\r\n            ByteArrayOutputStream o = new ByteArrayOutputStream();\r\n            c.convert(d, o);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.*;\r\nimport org.springframework.security.config.annotation.web.builders.*;\r\nimport org.springframework.security.config.annotation.web.configuration.*;\r\nimport org.springframework.security.config.http.*;\r\nimport org.springframework.security.web.*;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecCfg {\r\n\r\n    @Bean\r\n    SecurityFilterChain web(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf().disable()\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(""/"").access((ctx, req) -> \r\n                    ctx.getAuthentication() != null && req.getRemoteAddr().equals(""127.0.0.1""))\r\n                .anyRequest().denyAll()\r\n            )\r\n            .sessionManagement(ses -> ses.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\r\n        return http.build();\r\n    }\r\n}\r\n""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.*;\r\nimport org.openjdk.jmh.runner.options.*;\r\n\r\nimport java.util.concurrent.*;\r\n\r\npublic class JdkBmk {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void idx(Blk blk, Tst tst) {\r\n        int len = tst.arr.length;\r\n        for (int i = 0; i < len; i++) {\r\n            blk.use(tst.arr[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void enh(Blk blk, Tst tst) {\r\n        for (int v : tst.arr) {\r\n            blk.use(v);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Thread)\r\n    public static class Tst {\r\n        public int[] arr;\r\n\r\n        @Setup(Level.Iteration)\r\n        public void set() {\r\n            int cnt = 1000;\r\n            arr = new int[cnt];\r\n            for (int i = 0; i < cnt; i++) {\r\n                arr[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class Blk {\r\n        public void use(int v) {}\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Opts opt = new OptsBld()\r\n                .include(JdkBmk.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(10)\r\n                .build();\r\n\r\n        new Rnr(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.*;\r\nimport org.openjdk.jmh.runner.options.*;\r\n\r\nimport java.util.*;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.*;\r\n\r\npublic class NstPrf {\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class Stt {\r\n        public static final List<Integer> out = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> inn = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void run(Runnable tsk) {\r\n        ForkJoinPool pl = new ForkJoinPool();\r\n        try {\r\n            pl.submit(tsk).join();\r\n        } finally {\r\n            pl.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void inPar() {\r\n        Stt.inn.parallelStream().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void inSeq() {\r\n        Stt.inn.stream().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tNew(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            run(NstPrf::inPar);\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tComSeq(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            inSeq();\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    public void tComPar(Blk blk) {\r\n        Stt.out.parallelStream().forEach(i -> {\r\n            inPar();\r\n            blk.use(i);\r\n        });\r\n    }\r\n\r\n    public static class Blk {\r\n        public void use(int v) {}\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Opts opt = new OptsBld()\r\n                .include(NstPrf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(10)\r\n                .build();\r\n\r\n        new Rnr(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EqtSp extends Application {\r\n\r\n    private static final int SZ = 128;\r\n    private static final float R = 200;\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        MeshView sph = mkSph();\r\n        Group grp = new Group(sph);\r\n        Scene scn = new Scene(grp, 800, 600, true);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    private MeshView mkSph() {\r\n        TriangleMesh msh = new TriangleMesh();\r\n        for (int y = 0; y <= SZ; y++) {\r\n            float v = (float) y / SZ;\r\n            double lat = Math.PI * (v - 0.5);\r\n            for (int x = 0; x <= SZ; x++) {\r\n                float u = (float) x / SZ;\r\n                double lon = 2 * Math.PI * u;\r\n                float xPos = (float) (R * Math.cos(lat) * Math.cos(lon));\r\n                float yPos = (float) (R * Math.sin(lat));\r\n                float zPos = (float) (R * Math.cos(lat) * Math.sin(lon));\r\n                msh.getPoints().addAll(xPos, yPos, zPos);\r\n                msh.getTexCoords().addAll(u, v);\r\n            }\r\n        }\r\n        for (int y = 0; y < SZ; y++) {\r\n            for (int x = 0; x < SZ; x++) {\r\n                int p0 = y * (SZ + 1) + x;\r\n                int p1 = p0 + 1;\r\n                int p2 = p0 + SZ + 1;\r\n                int p3 = p2 + 1;\r\n                msh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n                msh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n            }\r\n        }\r\n        MeshView vw = new MeshView(msh);\r\n        PhongMaterial mat = new PhongMaterial();\r\n        mat.setDiffuseMap(new Image(EqtSp.class.getResourceAsStream(""/images/earth2.jpg"")));\r\n        vw.setMaterial(mat);\r\n        return vw;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public class Tst {\r\n    public static void go(Short n) { System.out.println(""Short""); }\r\n    public static void go(int n) { System.out.println(""int""); }\r\n\r\n    public static void main(String[] args) {\r\n        Short x = 11;\r\n        go(x);\r\n    }\r\n}\r\n""]",0,1
"["" class StrmCfg {\r\n\r\n    @Bean\r\n    public Function<KStream<String, Inp>, Map<String, KStream<String, Outp>>> myfn() {\r\n        return inp -> {\r\n            Map<String, KStream<String, Outp>> out = new HashMap<>();\r\n            List<String> tnts = List.of(""A"", ""B"");\r\n            for (String tnt : tnts) {\r\n                KStream<String, Inp> flt = inp.filter((k, v) -> k.startsWith(tnt));\r\n                out.put(tnt, flt.map((k, v) -> KeyValue.pair(k, Outp.mk(v))));\r\n            }\r\n            return out;\r\n        };\r\n    }\r\n}\r\n""]",0,1
"["" Conf {\r\n    @Bean\r\n    fun sem(): Semaphore = Semaphore(50)\r\n}\r\n\r\n@Component\r\n@Aspect\r\nclass Lim(@Autowired private val sem: Semaphore) {\r\n\r\n    @Around(""@annotation(LimReq)"")\r\n    fun ctrl(pjp: ProceedingJoinPoint): Any {\r\n        sem.acquire()\r\n        return try {\r\n            pjp.proceed()\r\n        } finally {\r\n            sem.release()\r\n        }\r\n    }\r\n}\r\n\r\n@Target(AnnotationTarget.FUNCTION)\r\n@Retention(AnnotationRetention.RUNTIME)\r\nannotation class LimReq\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\nclass Ctl(@Autowired private val srv: Srv) {\r\n\r\n    @GetMapping(""/data"")\r\n    @LimReq\r\n    fun get(): String = srv.fetch()\r\n}\r\n\r\n@Service\r\nclass Srv {\r\n    fun fetch(): String {\r\n        Thread.sleep(500)\r\n        return ""ok""\r\n    }\r\n}\r\n""]",0,1
"[""public class App {\r\n    public static final String CSS = App.class.getResource(""/style/"").toExternalForm();\r\n    public static final String IMG = App.class.getResource(""/img/"").toExternalForm();\r\n    public static final String SND = App.class.getResource(""/sound/"").toExternalForm();\r\n}\r\n""]",0,1
"[""import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stg) throws Exception {\r\n        StackPane stk = new StackPane();\r\n        Pane pnl = new Pane();\r\n        Button btn = new Button(""Test"");\r\n\r\n        pnl.setStyle(""-fx-background-color: red;"");\r\n        btn.setStyle(""-fx-background-color: green;"");\r\n        \r\n        stk.getChildren().addAll(pnl, btn);\r\n\r\n        FadeTransition trn = new FadeTransition(Duration.millis(5000), pnl);\r\n        trn.setFromValue(1.0);\r\n        trn.setToValue(0.0);\r\n        trn.setCycleCount(Timeline.INDEFINITE);\r\n        trn.setAutoReverse(true);\r\n        trn.play();\r\n\r\n        Scene scn = new Scene(stk, 500, 500);\r\n\r\n        stg.setMinWidth(500);\r\n        stg.setMinHeight(500);\r\n        stg.setTitle(""Test"");\r\n        stg.setResizable(false);\r\n        stg.setScene(scn);\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class QRGen {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String txt = ""User: John\nEvent: TechConf"";\r\n            String qrTxt = ""https://example.com"";\r\n            String fPath = ""qr_code.png"";\r\n            int w = 500, h = 500;\r\n            Map<EncodeHintType, Object> opt = new HashMap<>();\r\n            opt.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n            BitMatrix mat = new MultiFormatWriter().encode(qrTxt, BarcodeFormat.QR_CODE, w, h, opt);\r\n            BufferedImage qrImg = MatrixToImageWriter.toBufferedImage(mat);\r\n            BufferedImage outImg = new BufferedImage(w, h + 50, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = outImg.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, w, h + 50);\r\n            g.drawImage(qrImg, 0, 0, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            FontMetrics fm = g.getFontMetrics();\r\n            int x\r\n""]",0,1
"[""import java.io.IOException;\r\nimport java.nio.file.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.event.EventListener;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class DirMon {\r\n    private final WatchService ws;\r\n    private final ExecutorService ex = Executors.newSingleThreadExecutor();\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void run() {\r\n        ex.submit(() -> {\r\n            while (!Thread.currentThread().isInterrupted()) {\r\n                try {\r\n                    WatchKey k = ws.take();\r\n                    for (WatchEvent<?> e : k.pollEvents()) {\r\n                        // actions on files\r\n                    }\r\n                    k.reset();\r\n                } catch (Exception e) {\r\n                    run();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import jakarta.annotation.Resource;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.jms.*;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class MsgSrv extends HttpServlet {\r\n    @Inject\r\n    @JMSConnectionFactory(""java:/jms/remoteCF"")\r\n    private JMSContext ctx;\r\n\r\n    @Resource(lookup = ""java:/queue/testQueue"")\r\n    private Queue q;\r\n\r\n    private static final int CNT = 5;\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\r\n        res.setContentType(""text/html"");\r\n        try (PrintWriter out = res.getWriter()) {\r\n            out.write(""<p>Sending msgs to <em>"" + q + ""</em></p>"");\r\n            out.write(""<h2>Msgs sent and rec:</h2>"");\r\n            for (int i = 0; i < CNT; i++) {\r\n                String txt = ""Msg "" + (i + 1);\r\n                ctx.createProducer().send(q, txt);\r\n                out.write(""Sent ("" + i + ""): "" + txt + ""<br/>"");\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.stream.*;\r\n\r\nclass Rec {\r\n    String wk, src, dst;\r\n    int qty;\r\n\r\n    Rec(String wk, String src, String dst, int qty) {\r\n        this.wk = wk;\r\n        this.src = src;\r\n        this.dst = dst;\r\n        this.qty = qty;\r\n    }\r\n}\r\n\r\npublic class Calc {\r\n    public static void main(String[] args) {\r\n        List<Rec> recs = Arrays.asList(\r\n            new Rec(""week1"", ""source1"", ""destination1"", 100),\r\n            new Rec(""week1"", ""source1"", ""destination2"", 200),\r\n            new Rec(""week1"", ""source2"", ""destination1"", 200),\r\n            new Rec(""week1"", ""source2"", ""destination2"", 100),\r\n            new Rec(""week2"", ""source1"", ""destination1"", 200),\r\n            new Rec(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        recs.stream()\r\n            .collect(Collectors.groupingBy(r -> r.wk + r.src, \r\n                Collectors.collectingAndThen(\r\n                    Collectors.toList(), lst -> {\r\n                        int ttl = lst.stream().mapToInt(r -> r.qty).sum();\r\n                        return lst.stream()\r\n                            .map(r -> String.format(""%s  %s  %s   %.2f%%"", r.wk, r.src, r.dst, (r.qty * 100.0) / ttl))\r\n                            .collect(Collectors.toList());\r\n                    }\r\n                )\r\n            ))\r\n            .values()\r\n        \r\n""]",0,1
"["" class SecCfg {\r\n\r\n    @Bean\r\n    public static PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain sec(HttpSecurity http, JwtTokenProvider jwt) throws Exception {\r\n        http.cors().and()\r\n            .authorizeRequests()\r\n            .antMatchers(""/resources/**"", ""/error"", ""/api/user/**"").permitAll()\r\n            .antMatchers(""/api/admin/**"").hasRole(""ADMIN"")\r\n            .anyRequest().authenticated()\r\n            .and()\r\n            .logout().permitAll()\r\n            .logoutRequestMatcher(new AntPathRequestMatcher(""/api/user/logout"", ""POST""))\r\n            .and()\r\n            .formLogin().loginPage(""/api/user/login"").and()\r\n            .httpBasic().and()\r\n            .csrf().disable()\r\n            .addFilter(new JWTAuthorizationFilter(http.getSharedObject(AuthenticationManager.class), jwt));\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager auth(HttpSecurity http, PasswordEncoder enc, DataSource src) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n            .jdbcAuthentication()\r\n            .dataSource(src)\r\n            .passwordEncoder(enc)\r\n            .usersByUsernameQuery(""select username, password, enabled from usr01 where username=?"")\r\n            .authoritiesByUsernameQuery(""select username, role from usr01 where username=?"")\r\n            .and()\r\n            .build();\r\n    }\r\n\r\n    @Bean\r\n    public WebMvcConfigurer cors() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry reg) {\r\n                reg.addMapping(""/**"").allowedOrigins(""*"").allowedMethods(""\r\n""]",0,1
"[""public class FpTest {\r\n    public static void main(String[] args) {\r\n        run();\r\n        runStrict();\r\n    }\r\n\r\n    static void run() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Norm: "" + c);\r\n    }\r\n\r\n    strictfp static void runStrict() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Strict: "" + c);\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\n\r\npublic class LArr {\r\n    private static final long SIZ = Long.BYTES;\r\n    private final MemorySegment seg;\r\n    private final VarHandle vh;\r\n\r\n    public LArr(long len) {\r\n        seg = MemorySegment.allocateNative(len * SIZ, MemorySession.global());\r\n        vh = MemorySegment.varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\r\n    }\r\n\r\n    public void set(long idx, long val) {\r\n        vh.set(seg, idx * SIZ, val);\r\n    }\r\n\r\n    public long get(long idx) {\r\n        return (long) vh.get(seg, idx * SIZ);\r\n    }\r\n\r\n    public void free() {\r\n        seg.session().close();\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.*;\r\nimport java.util.*;\r\nimport javax.swing.*;\r\n\r\nclass Bul {\r\n    double x, y, d;\r\n    BufferedImage img;\r\n    static Map<Double, BufferedImage> rotCache = new HashMap<>();\r\n\r\n    Bul(double x, double y, double d, BufferedImage img) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.d = d;\r\n        this.img = rot(d, img);\r\n    }\r\n\r\n    BufferedImage rot(double d, BufferedImage img) {\r\n        return rotCache.computeIfAbsent(d, k -> {\r\n            int w = img.getWidth(), h = img.getHeight();\r\n            BufferedImage out = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g = out.createGraphics();\r\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n            g.rotate(Math.toRadians(k), w / 2.0, h / 2.0);\r\n            g.drawImage(img, 0, 0, null);\r\n            g.dispose();\r\n            return out;\r\n        });\r\n    }\r\n}\r\n\r\nclass Pan extends JPanel {\r\n    List<Bul> bls = new ArrayList<>();\r\n    BufferedImage img;\r\n\r\n    Pan(BufferedImage img) {\r\n        this.img = img;\r\n        for (int i = 0; i < 10000; i++) bls.add(new Bul(Math.random() * 800, Math.random() * 600, Math.random() * 360, img));\r\n        new Timer(16, e -> repaint()).start();\r\n    }\r\n\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        for (Bul b : bls) g.drawImage(b.img, (int) b.x, (int) b.y, null);\r\n    }\r\n}\r\n\r\npublic class Gam {\r\n    public static void main(String[] a) throws Exception {\r\n        BufferedImage img = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g = img.createGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(0, 0, 16, 16);\r\n        g.dispose();\r\n        JFrame f = new JFrame();\r\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        f.setSize(800, 600);\r\n        f.add(new Pan(img));\r\n        f.setVisible(true);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\nclass SenPro {\r\n    public boolean chk(String s) {\r\n        return s.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String pro(String s) {\r\n        if (!chk(s)) return s + "" is an invalid sentence"";\r\n\r\n        String[] w = s.trim().split(""\\s+"");\r\n        if (w.length <= 2) return ""Invalid Length"";\r\n\r\n        String t = w[0];\r\n        w[0] = w[w.length - 1];\r\n        w[w.length - 1] = t;\r\n\r\n        for (int i = 1; i < w.length - 1; i++) {\r\n            w[i] = new StringBuilder(w[i]).reverse().toString();\r\n        }\r\n        return String.join("" "", w);\r\n    }\r\n}\r\n\r\npublic class UI {\r\n    public static void main(String[] a) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(""Enter the sentence"");\r\n        String s = sc.nextLine();\r\n        System.out.println(new SenPro().pro(s));\r\n        sc.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.*;\r\nimport javafx.scene.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.*;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage p) {\r\n        ComboBox<String> cb = new ComboBox<>();\r\n        cb.getItems().addAll(""One"", ""Two"", ""Three"");\r\n        cb.getStyleClass().add(""yel"");\r\n        cb.setOnShowing(e -> cb.lookup("".list-view"").getStyleClass().add(""yel""));\r\n\r\n        VBox v = new VBox(cb);\r\n        Scene s = new Scene(v, 400, 300);\r\n        s.getStylesheets().add(App.class.getResource(""test.css"").toExternalForm());\r\n        p.setScene(s);\r\n        p.show();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n""]",0,1
"[""package utils;\r\n\r\nimport org.hibernate.*;\r\nimport org.hibernate.boot.*;\r\nimport org.hibernate.boot.registry.*;\r\n\r\npublic class HibUtil {\r\n    private static final SessionFactory fac = build();\r\n\r\n    public static SessionFactory build() {\r\n        try {\r\n            ServiceRegistry reg = new StandardServiceRegistryBuilder()\r\n                .configure()\r\n                .build();\r\n            Metadata meta = new MetadataSources(reg)\r\n                .getMetadataBuilder().build();\r\n            return meta.getSessionFactoryBuilder().build();\r\n        } catch (Throwable ex) {\r\n            throw new ExceptionInInitializerError(ex);\r\n        }\r\n    }\r\n\r\n    public static SessionFactory get() {\r\n        return fac;\r\n    }\r\n}\r\n""]",0,1
"[""(MockitoExtension.class)\r\nclass TestCls {\r\n    @Mock Repo repo;\r\n    @Mock Cvt cvt;\r\n    @InjectMocks Svc svc;\r\n    @Mock User usr;\r\n    @Mock Ctx ctx;\r\n    @Mock Req req;\r\n    @Mock Spc spc;\r\n    @Mock Pg pg;\r\n    @Mock Res res;\r\n    @Mock Pageable pgbl;\r\n    @Mock Page<Res> pgr;\r\n    @MockConstruction(PageImpl.class) MockedConstruction<PageImpl<Res>> pgMock;\r\n\r\n    @Test\r\n    void get_pg() {\r\n        when(cvt.toSpc(usr, req)).thenReturn(spc);\r\n        when(PageRequest.of(1, 100)).thenReturn(pgbl);\r\n        when(repo.findAll(spc, pgbl)).thenReturn(pgr);\r\n        when(cvt.toRes(ctx)).thenReturn(res);\r\n        \r\n        pgMock = Mockito.mockConstruction(PageImpl.class, \r\n            (m, c) -> {\r\n                when(m.getTotalElements()).thenReturn(123456L);\r\n                when(m.getTotalPages()).thenReturn(1);\r\n                when(m.getContent()).thenReturn(List.of(res));\r\n            });\r\n\r\n        Page<Res> act = svc.getPg(usr, req);\r\n\r\n        Assertions.assertThat(act.getTotalElements()).isEqualTo(123456L);\r\n        Assertions.assertThat(act.getTotalPages()).isEqualTo(1);\r\n        Assertions.assertThat(act.getContent()).isEqualTo(List.of(res));\r\n    }\r\n}\r\n""]",0,1
"[""package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.util.Duration;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage ps) {\r\n        BorderPane root = new BorderPane();\r\n        Scene sc = new Scene(root, 400, 400);\r\n        StackPane sp = new StackPane();\r\n        \r\n        Text txt = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        \r\n        Color c1 = Color.RED;\r\n        Color c2 = Color.BLUE;\r\n        \r\n        Timeline tl = new Timeline(\r\n            new KeyFrame(Duration.seconds(0), e -> txt.setFill(c1)),\r\n            new KeyFrame(Duration.seconds(2), e -> txt.setFill(c2))\r\n        );\r\n        \r\n        tl.setCycleCount(Timeline.INDEFINITE);\r\n        tl.setAutoReverse(true);\r\n        tl.play();\r\n        \r\n        sp.getChildren().add(txt);\r\n        root.getChildren().add(sp);\r\n        \r\n        ps.setScene(sc);\r\n        ps.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.env.Environment;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@Configuration\r\npublic class Config {\r\n    \r\n    private final Environment env;\r\n\r\n    public Config(Environment env) {\r\n        this.env = env;\r\n    }\r\n\r\n    public Map<String, String> getProperties() {\r\n        Map<String, String> properties = new HashMap<>();\r\n        \r\n        for (String key : env.getProperty(""root"").split("","")) {\r\n            properties.put(key, env.getProperty(""root."" + key));\r\n        }\r\n\r\n        return properties;\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Example {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = ""YOUR_ACCESS_TOKEN""; // OAuth2 token\r\n\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://api.example.com/endpoint"")\r\n                .header(""Authorization"", ""Bearer "" + token)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                System.out.println(response.body().string());\r\n            } else {\r\n                System.out.println(""Request failed: "" + response.code());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n        String mapHtml = """";\r\n\r\n        try {\r\n            File myObj = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n            Scanner myReader = new Scanner(myObj);\r\n            while (myReader.hasNextLine()) {\r\n                mapHtml += myReader.nextLine();\r\n                mapHtml += ""\n"";\r\n            }\r\n            myReader.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        webEngine.loadContent(mapHtml);\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show()\r\n""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.FieldAccessExpr;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        File src = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(src);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(cls -> {\r\n            System.out.println(""Class: "" + cls.getNameAsString());\r\n\r\n            cls.findAll(MethodDeclaration.class).forEach(mthd -> {\r\n                System.out.println(""  Method: "" + mthd.getNameAsString());\r\n\r\n                mthd.findAll(FieldAccessExpr.class).forEach(fld -> {\r\n                    String fieldName = fld.getNameAsString();\r\n                    if (fieldName != null && !fieldName.isEmpty()) {\r\n                        System.out.println(""    Fi\r\n""]",0,1
"[""import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\npublic @interface MyAnnotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\npublic class AnotherClass {}\r\n\r\npublic class YetAnotherClass {}\r\n\r\npublic class Main {\r\n\r\n    @MyAnnotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    public static void main(String[] args) throws NoSuchFieldException {\r\n        Main main = new Main();\r\n        Field field = main.getClass().getDeclaredField(""annotatedAttribute"");\r\n        MyAnnotation annotation = field.getAnnotation(MyAnnotation.class);\r\n        Class<?> className = annotation.className();\r\n        System.out.println(className);  // Prints: class AnotherClass\r\n    }\r\n}\r\n""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Elements;\r\n\r\npublic class SwitchTypeFinder {\r\n\r\n    private Trees trees;\r\n    private Elements elements;\r\n\r\n    public SwitchTypeFinder(Trees trees, Elements elements) {\r\n        this.trees = trees;\r\n        this.elements = elements;\r\n    }\r\n\r\n    public TypeMirror getSwitchExpressionType(MethodTree methodTree) {\r\n        BlockTree blockTree = methodTree.getBody();\r\n\r\n        for (StatementTree statementTree : blockTree.getStatements()) {\r\n            if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                SwitchTree switchTree = (SwitchTree) statementTree;\r\n                ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                return trees.getTypeMirror(new TreePath(trees.getPath(methodTree), switchTreeExpression));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n""]",0,1
"[""// LocalizationConfiguration.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\r\n\r\n@Configuration\r\npublic class LocalizationConfiguration implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public LocaleResolver localeResolver() {\r\n        SessionLocaleResolver localeResolver = new SessionLocaleResolver();\r\n        localeResolver.setDefaultLocale(java.util.Locale.ENGLISH);\r\n        return localeResolver;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\r\n        localeChangeInterceptor.setParamName(""lang"");\r\n        return localeChangeInterceptor;\r\n    }\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry interceptorRegistry) {\r\n        interceptorRegistry.addInterceptor(localeChangeInterceptor());\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class ListPopulator {\r\n\r\n    private final ApplicationContext context;\r\n\r\n    @Autowired\r\n    public ListPopulator(ApplicationContext context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public void populateList(VBox contentArea, String pathToFxml) {\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(pathToFxml));\r\n            fxmlLoader.setControllerFactory(context::getBean);\r\n            VBox listItem = fxmlLoader.load();\r\n            contentArea.getChildren().add(listItem);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n""]",0,1
"[""public void createChart() {\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final XYChart<Number, Number> chart = new XYChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series series = new XYChart.Series();\r\n\r\n    for (int i = 0; i < r.size(); i++) {\r\n        series.getData().add(new XYChart.Data<>(r.get(i) * Math.cos(Math.toRadians(nodes.get(i))),\r\n                                                 r.get(i) * Math.sin(Math.toRadians(nodes.get(i)))));\r\n    }\r\n\r\n    chart.getData().add(series);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(chart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n""]",0,1
"[""public class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button btn = findViewById(R.id.open_bottom_sheet);\r\n\r\n        btn.setOnClickListener(v -> {\r\n            BottomSheetDialog sheet = new BottomSheetDialog();\r\n            sheet.show(getSupportFragmentManager(), ""Sheet"");\r\n        });\r\n    }\r\n}\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n        v.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        return v;\r\n    }\r\n}\r\n""]",0,1
"[""public String transform(List<CustomObject> list) {\r\n    return list.stream()\r\n        .filter(o -> o.objectType().equals(""BUSINESS""))\r\n        .filter(o -> o.objectStatus().equals(""ACTIVE""))\r\n        .filter(o -> o.locale().equals(""en-US""))\r\n        .findFirst()\r\n        .orElseGet(() -> list.stream()\r\n            .filter(o -> o.objectType().equals(""BUSINESS""))\r\n            .sorted(Comparator.comparing(CustomObject::url))\r\n            .findFirst()\r\n            .get())\r\n        .getUrl();\r\n}\r\n""]",0,1
"[""public String transform(List<CustomObject> list) {\r\n    return list.stream()\r\n        .filter(o -> o.objectType().equals(""BUSINESS""))\r\n        .filter(o -> o.objectStatus().equals(""ACTIVE""))\r\n        .filter(o -> o.locale().equals(""en-US""))\r\n        .findFirst()\r\n        .orElseGet(() -> list.stream()\r\n            .filter(o -> o.objectType().equals(""BUSINESS""))\r\n            .sorted(Comparator.comparing(CustomObject::url))\r\n            .findFirst()\r\n            .get())\r\n        .getUrl();\r\n}\r\n""]",0,1
"[""public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> {\r\n                updateTimeline();\r\n            });\r\n\r\n            color2.addListener((obs, o, v) -> {\r\n                updateTimeline();\r\n            });\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null && timeline.get() != null) {\r\n                    timeline.get().play();\r\n                } else if (timeline.get() != null) {\r\n                    timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        SimpleObjectProperty<Paint> color1 = new SimpleObjectProperty<>(Color.RED);\r\n        SimpleObjectProperty<Paint> color2 = new SimpleObjectProperty<>(Color.BLUE);\r\n\r\n        void updateTimeline() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.get(), Interpolator.LINEAR)\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.get(), Interpolator.LINEAR)\r\n                )\r\n            );\r\n            timelin\r\n""]",0,1
"[""(MyEntityListener.class)\r\n@Entity\r\npublic class MyEntity {\r\n    private String something;\r\n\r\n    public String getSomething() {\r\n        return something;\r\n    }\r\n\r\n    public void setSomething(String something) {\r\n        this.something = something;\r\n    }\r\n}\r\n\r\npublic class MyEntityListener {\r\n\r\n    public String doThis() {\r\n        return ""expensive-computation"";\r\n    }\r\n\r\n    @PrePersist\r\n    public void myListener(MyEntity e) {\r\n        if (true) e.setSomething(doThis());\r\n    }\r\n}\r\n\r\n@SpringBootTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    MyEntityRepository repo;\r\n\r\n    @MockBean\r\n    MyEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        Mockito.when(entityListener.doThis()).thenReturn(expected);\r\n\r\n        MyEntity e = new MyEntity();\r\n        MyEntity stored = repo.save(e);\r\n        \r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n""]",0,1
"[""public class PatternSearch {\r\n\r\n    public static void main(String[] args) {\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5}\r\n        };\r\n\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        PatternSearch ps = new PatternSearch();\r\n        ps.search(T, P);\r\n    }\r\n\r\n    public void search(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        \r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (match(T, P, i, j, u, v)) {\r\n                    System.out.println(""Pattern found at ("" + i + "","" + j + "")"");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean match(int[][] T, int[][] P, int x, int y, int u, int v) {\r\n        for (int i = 0; i < u; i++) {\r\n            for (int j = 0; j < v; j++) {\r\n     \r\n""]",0,1
"[""public class HomeFragment extends Fragment {\r\n    private RecyclerView rv;\r\n    private Query q;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> ad;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        rv = v.findViewById(R.id.search_recyclerview);\r\n        LinearLayoutManager llm = new LinearLayoutManager(getContext());\r\n        rv.setLayoutManager(llm);\r\n        rv.setHasFixedSize(true);\r\n\r\n        setQByOrder(""technology"", ""totalInvestors"");\r\n        fetchRes(q);\r\n\r\n        return v;\r\n    }\r\n\r\n    protected void setQByOrder(String choice, String order) {\r\n        q = FirebaseDatabase.getInstance()\r\n                .getReference()\r\n                .child(""Category_wise"").child(choice).orderByChild(order);\r\n    }\r\n\r\n    protected void fetchRes(Query q) {\r\n        FirebaseRecyclerOptions<SCard> opts =\r\n                new FirebaseRecyclerOptions.Builder<SCard>()\r\n                        .setQuery(q, new SnapshotParser<SCard>() {\r\n                            @NonNull\r\n                            @Override\r\n                            public SCard parseSnapshot(@NonNull DataSnapshot snapshot) {\r\n                                return new SCard(\r\n                                        Objects.requireNonNull(snapshot.child(""companyName"").getValue()).toString(),\r\n                                        Objects.requireNonNull(snapshot.getKey()).toString()\r\n                                );\r\n                            }\r\n                        })\r\n                        .build();\r\n        ad = new SCardAdapter<>(opts);\r\n        ad.startListening();\r\n        rv.setAdapter(ad);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        ad.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        ad.stopListening();\r\n    }\r\n}\r\n\r\npublic class SCardAdapter<M extends SCard, V extends SCardAdapter.ViewHolder> extends FirebaseRecyclerAdapter<SCard, V> {\r\n\r\n    FirebaseRecyclerOptions<SCard> opts;\r\n    public SCardAdapter(@Nullable FirebaseRecyclerOptions<SCard> opts) {\r\n        super(opts);\r\n        this.opts = opts;\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(V holder, @SuppressLint(""RecyclerView"") final int pos, SCard model) {\r\n        holder.setName(model.getsName());\r\n    }\r\n\r\n    @Override\r\n    public V onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext())\r\n                .inflate(R.layout.startup_search_card, parent, false);\r\n        return (V) new ViewHolder(view);\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String string) {\r\n            sname.setText(string);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"["" class LocaleConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new LocaleInterceptor());\r\n    }\r\n\r\n    public class LocaleInterceptor extends HandlerInterceptorAdapter {\r\n        private static final Set<String> VALID_LOCALES = new HashSet<>(Arrays.asList(""en"", ""hi""));\r\n\r\n        @Override\r\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n            String locale = request.getParameter(""locale"");\r\n            if (locale != null && !VALID_LOCALES.contains(locale)) {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.reflect.Constructor;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<?>[] constructors = Parent.class.getDeclaredConstructors();\r\n        constructors[0].setAccessible(true);\r\n        Parent parent = (Parent) constructors[0].newInstance();\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {\r\n    }\r\n}\r\n""]",0,1
"[""import java.security.*;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory kf = KeyFactory.getInstance(""EC"");\r\n        PrivateKey pkey = kf.generatePrivate(keySpec);\r\n    }\r\n}\r\n""]",0,1
"[""import com.google.protobuf.Descriptors;\r\nimport com.google.protobuf.GeneratedMessageV3;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\n\r\npublic class ProtoParser {\r\n    public static void main(String[] args) throws IOException {\r\n        String protoFile = ""path/to/your.proto"";\r\n        FileInputStream fis = new FileInputStream(protoFile);\r\n        \r\n        Descriptors.FileDescriptor fileDescriptor = \r\n            Descriptors.FileDescriptor.buildFrom(fis, new Descriptors.FileDescriptor[0]);\r\n        \r\n        for (Descriptors.ServiceDescriptor service : fileDescriptor.getServices()) {\r\n            System.out.println(""Service: "" + service.getName());\r\n        }\r\n        \r\n        for (Descriptors.Descriptor message : fileDescriptor.getMessageTypes()) {\r\n            System.out.println(""Message: "" + message.getName());\r\n        }\r\n        \r\n        fi\r\n""]",0,1
"[""import java.util.concurrent.*;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1000);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Timeout occurred"");\r\n        }\r\n        int result = counter.get().get();\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout) throws TimeoutException {\r\n        ExecutorService executor = Executors.newSingleThreadExecutor();\r\n        try {\r\n            Future<?> future = executor.submit(() -> {\r\n                while (loop-- >= 0) {\r\n                    counter.get().incrementAndGet();\r\n                    callback.apply(null);\r\n                }\r\n            });\r\n            future.get(timeout, TimeUnit.MILLISECONDS);\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            e.printStackTrace();\r\n        } catch (TimeoutException e) {\r\n            throw e;\r\n        } finally {\r\n            executor.shutdownNow();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.*;\r\n\r\npublic class Step1 {\r\n    private Tracer tracer;\r\n\r\n    public Step1(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj) {\r\n        var paddedArray = new byte[16];\r\n        var originalArray = obj.getUniqueId().getBytes();\r\n        System.arraycopy(originalArray, 0, paddedArray, 16 - originalArray.length, originalArray.length);\r\n\r\n        var traceId = TraceId.fromBytes(paddedArray);\r\n        var spanId = SpanId.fromBytes(paddedArray);\r\n\r\n        var spanContext = SpanContext.create(traceId, spanId, TraceFlags.getDefault(), TraceState.getDefault());\r\n        var wrap = Span.wrap(spanContext);\r\n        var otelContext = Context.root().with(wrap);\r\n\r\n        var span = tracer.spanBuilder(""Step1"").setParent(otelContext).startSpan();\r\n        CompletableFuture.runAsync(() -> {\r\n            // ETL code he\r\n""]",0,1
"[""class LRUCache {\r\n    int cap;\r\n    Map<Integer, Integer> map = new HashMap<>();\r\n    LinkedHashMap<Integer, Integer> cache;\r\n\r\n    public LRUCache(int cap) {\r\n        this.cap = cap;\r\n        cache = new LinkedHashMap<>(cap, 0.75f, true);\r\n    }\r\n\r\n    public int get(int key) {\r\n        return cache.getOrDefault(key, -1);\r\n    }\r\n\r\n    public void put(int key, int val) {\r\n        if (cache.size() >= cap && !cache.containsKey(key)) {\r\n            int eldestKey = cache.entrySet().iterator().next().getKey();\r\n            cache.remove(eldestKey);\r\n        }\r\n        cache.put(key, val);\r\n    }\r\n}\r\n""]",0,1
"[""findAll().flatMap(p -> {\r\n    return Flux.fromStream(p.getRelations().stream())\r\n            .filter(r -> isPassing(r))\r\n            .flatMap(r -> findStorageId(r));\r\n})\r\n.take(1)\r\n.handle((Long storageId, SynchronousSink<Long> sink) -> {\r\n    if (storageId != null) {\r\n        sink.next(storageId);\r\n        sink.complete();\r\n    }\r\n})\r\n.switchIfEmpty(Mono.error(new RuntimeException(""Can't find storageId."")));\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    public final int width = 800;\r\n    public final int length = 600;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n    \r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n    \r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n    \r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n    \r\n    private void loadImage(){\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        Image originalImage =ii.getImage();\r\n        int newWidth = 75;\r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n    \r\n    @Override\r\n    protected void paintComponent(Graphics g){\r\n        super.paintComponent(g);\r\n        g.clearRect(0, 0, getWidth(), getHeight());\r\n        drawImage(g);\r\n    }\r\n    \r\n    private void drawImage(Graphics g){\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n    \r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n    \r\n    private void updatePosition(){\r\n        if (leftPressed){\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if(rightPressed){\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if(upPressed){\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if(downPressed){\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyPressed(KeyEvent e){\r\n        int key = e.getKeyCode();\r\n        \r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n        \r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n    }\r\n\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n    \r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n    \r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n    \r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        Image originalImage =ii.getImage();\r\n        int newWidth = 200;\r\n        int newHeight = 200;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n    \r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.clearRect(0, 0, getWidth(), getHeight());\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e){\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args){\r\n        SwingUtilities.invokeLater(new Runnable(){\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(500,500);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n                \r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n                \r\n                frame.setLayout(null);\r\n                \r\n                surface.setBounds(0, 0, 500, 500);\r\n                frame.add(surface);\r\n                \r\n                blueDot.setBounds((int) (Math.random() * 450), 0, 500, 500);\r\n                frame.add(blueDot);\r\n                \r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n                \r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n                \r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n                        \r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""public class GenTemp {\r\n    private static final AtomicLong CNT = new AtomicLong(0);\r\n\r\n    public static String genTemp() {\r\n        long val = CNT.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", (val >> 32) & 0xFFFF, (val >> 16) & 0xFFF, val & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(genTemp());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.util.function.UnaryOperator;\r\nimport javafx.scene.control.TextFormatter;\r\n\r\npublic class TestApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        SpinnerValueFactory<BigDecimal> factory = new SpinnerValueFactory<BigDecimal>() {\r\n            @Override\r\n            public void decrement(int steps) {\r\n                setValue(getValue().subtract(BigDecimal.valueOf(steps * 0.25)));\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                setValue(getValue().add(BigDecimal.valueOf(steps * 0.25)));\r\n            }\r\n        };\r\n\r\n        factory.setValue(BigDecimal.ZERO);\r\n        factory.setAmountToStepBy(BigDecimal.valueOf(0.25));\r\n        factory.setConverter(new javafx.util.StringConverter<BigDecimal>() {\r\n            @Override\r\n            public String toString(BigDecimal object) {\r\n                DecimalFormat df = new DecimalFormat(""+#.00;-#.00"");\r\n                return df.format(object);\r\n            }\r\n\r\n            @Override\r\n            public BigDecimal fromString(String string) {\r\n                try {\r\n                    return new BigDecimal(string.replace("","", "".""));\r\n                } catch (NumberFormatException e) {\r\n                    return BigDecimal.ZERO;\r\n                }\r\n            }\r\n        });\r\n\r\n        spinner.setValueFactory(factory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        Pattern validText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            if (validText.matcher(change.getControlNewText()).matches()) {\r\n                return change;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().addListener(new ChangeListener<BigDecimal>() {\r\n            @Override\r\n            public void changed(ObservableValue<? extends BigDecimal> observable, BigDecimal oldValue, BigDecimal newValue) {\r\n                if (newValue.compareTo(BigDecimal.valueOf(-20.00)) < 0) {\r\n                    spinner.getValueFactory().setValue(BigDecimal.valueOf(-20.00));\r\n                }\r\n                if (newValue.compareTo(BigDecimal.valueOf(20.00)) > 0) {\r\n                    spinner.getValueFactory().setValue(BigDecimal.valueOf(20.00));\r\n  \r\n""]",0,1
"[""SimpleObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>(stage.getUserData());\r\n\r\nuserDataProperty.addListener((observable, oldValue, newValue) -> {\r\n    System.out.println(""new userdata: "" + newValue);\r\n});\r\n\r\nstage.setUserData(2);\r\nuserDataProperty.set(stage.getUserData());\r\nSystem.out.println(stage.getUserData());\r\n\r\nstage.setUserData(3);\r\nuserDataProperty.set(stage.getUserData());\r\nSystem.out.println(stage.getUserData());\r\n""]",0,1
"[""package com.example.security;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.authentication.AuthenticationManagerBuilder;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecConfig {\r\n\r\n    private final UserDetailsService userService;\r\n    private final BCryptPasswordEncoder bCryptPwdEnc;\r\n    private final String jwtSec;\r\n    private final long accessTokExp;\r\n    private final long refreshTokExp;\r\n\r\n    public SecConfig(UserDetailsService userService, BCryptPasswordEncoder bCryptPwdEnc, \r\n                     String jwtSec, long accessTokExp, long refreshTokExp) {\r\n        this.userService = userService;\r\n        this.bCryptPwdEnc = bCryptPwdEnc;\r\n        this.jwtSec = jwtSec;\r\n        this.accessTokExp = accessTokExp;\r\n        this.refreshTokExp = refreshTokExp;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain security(HttpSecurity http) throws Exception {\r\n        CustomAuthFilter customAuthFilter = new CustomAuthFilter(authMgr(), accessTokExp, refreshTokExp, jwtSec);\r\n        customAuthFilter.setFilterProcessesUrl(""/api/login"");\r\n        http.csrf().disable()\r\n            .sessionManagement()\r\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n            .authorizeRequests()\r\n                .antMatchers(""/error"").permitAll()\r\n                .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n                .anyRequest().authenticated()\r\n            .and()\r\n            .addFilter(customAuthFilter)\r\n            .addFilterBefore(new CustomAuthzFilter(jwtSec), UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authMgr() throws Exception {\r\n        return authenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder pwdEnc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.userDetailsService(userService).passwordEncoder(pwdEnc());\r\n    }\r\n}\r\n""]",0,1
"[""class MyKeyMgr extends X509ExtendedKeyManager {\r\n    private final X509KeyManager km;\r\n    private final String als;\r\n\r\n    MyKeyMgr(X509KeyManager km, String als) {\r\n        this.km = km;\r\n        this.als = als;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] key, Principal[] p, Socket s) {\r\n        return als;\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String key, Principal[] p, Socket s) {\r\n        return km.chooseServerAlias(key, p, s);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String als) {\r\n        return km.getCertificateChain(als);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String als) {\r\n        return km.getPrivateKey(als);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String key, Principal[] p) {\r\n        return km.getClientAliases(key, p);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String key, Principal[] p) {\r\n        return km.getServerAliases(key, p);\r\n    }\r\n}\r\n\r\nprivate static SSLSocketFactory getFac(String ca, String caPwd, String usr, String usrPwd, String als) \r\n        throws IOException, GeneralSecurityException {\r\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    ks.load(new FileInputStream(usr), usrPwd.toCharArray());\r\n\r\n    KeyStore ts = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    ts.load(new FileInputStream(ca), caPwd.toCharArray());\r\n\r\n    TrustManagerFactory tmf = TrustManagerFactory.getInstance(""SunX509"");\r\n    tmf.init(ts);\r\n\r\n    KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");\r\n    kmf.init(ks, usrPwd.toCharArray());\r\n\r\n    X509KeyManager km = (X509KeyManager) kmf.getKeyManagers()[0];\r\n    SSLContext ctx = SSLContext.getInstance(""TLS"");\r\n    ctx.init(new KeyManager[]{new MyKeyMgr(km, als)}, tmf.getTrustManagers(), null);\r\n\r\n    return ctx.getSocketFactory();\r\n}\r\n""]",0,1
"["" void visitLineNumber(int ln, Label lb) {\r\n    super.visitLineNumber(ln, lb);\r\n    mv.visitLdcInsn(ln);\r\n    mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""log"", ""(I)V"", false);\r\n}\r\n\r\n@Override\r\npublic void visitCode() {\r\n    super.visitCode();\r\n    Label lb = new Label();\r\n    mv.visitLabel(lb);\r\n    visitLineNumber(-1, lb);\r\n}\r\n""]",0,1
"[""private static final ScheduledExecutorService SCH = Executors.newScheduledThreadPool(8);\r\nprivate static final ExecutorService SER = Executors.newFixedThreadPool(8);\r\n\r\nList<CompletableFuture<Boolean>> lst = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\n    lst.add(CompletableFuture.supplyAsync(() -> run(new Cli()), SER));\r\n}\r\nSER.shutdown();\r\n\r\nprivate static Boolean run(Cli cli) {\r\n    var id = cli.gen();\r\n    return chk(cli, id);\r\n}\r\n\r\nprivate static Boolean chk(Cli cli, String id) {\r\n    CompletableFuture<Boolean> fut = new CompletableFuture<>();\r\n    Runnable r = () -> {\r\n        if (cli.sts(id).eq(Sts.PEN)) return;\r\n        fut.complete(cli.rep(id));\r\n    };\r\n    SCH.scheduleAtFixedRate(r, 0, 10, TimeUnit.SECONDS);\r\n    return fut.join();\r\n}\r\n""]",0,1
"[""JTextArea txt = new JTextArea();\r\ntxt.addKeyListener(new KeyAdapter() {\r\n    public void keyPressed(KeyEvent e) {\r\n        if (e.getKeyCode() == KeyEvent.VK_TAB) {\r\n            e.consume();\r\n            txt.insert(""    "", txt.getCaretPosition());\r\n        }\r\n    }\r\n});\r\n""]",0,1
"[""(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class AnnGen extends AbstractProcessor {\r\n    \r\n    private final Map<String, TypeElement> annMap = new HashMap<>();\r\n    \r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> anns, RoundEnvironment env) {\r\n        if (env.processingOver()) {\r\n            annMap.forEach((k, v) -> procGen(v));\r\n            return false;\r\n        }\r\n        env.getElementsAnnotatedWith(Gen.class).forEach(el -> {\r\n            String n = el.getSimpleName() + ""Ann"";\r\n            annMap.put(n, (TypeElement) el);\r\n            procAnn(n, (TypeElement) el);\r\n        });\r\n        return false;\r\n    }\r\n    \r\n    private void procAnn(String n, TypeElement el) {\r\n        String p = processingEnv.getElementUtils().getPackageOf(el).toString();\r\n        try (Writer w = processingEnv.getFiler().createSourceFile(p + ""."" + n).openWriter()) {\r\n            w.write(""package "" + p + "";\n"");\r\n            w.write(""@interface "" + n + "" { "" + el.getSimpleName() + "" val(); }"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    \r\n    private void procGen(TypeElement el) {\r\n        processingEnv.getElementUtils().getPackageElement(el.getQualifiedName().toString())\r\n            .getEnclosedElements().stream()\r\n            .filter(e -> e.getAnnotationMirrors().stream()\r\n                .anyMatch(a -> annMap.containsKey(a.getAnnotationType().toString())))\r\n            .forEach(e -> genCode(e));\r\n    }\r\n    \r\n    private void genCode(Element el) {\r\n        String p = processingEnv.getElementUtils().getPackageOf(el).toString();\r\n        String n = el.getSimpleName() + ""Impl"";\r\n        try (Writer w = processingEnv.getFiler().createSourceFile(p + ""."" + n).openWriter()) {\r\n            w.write(""package "" + p + "";\n class "" + n + "" {}"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class Res {\r\n    @JsonProperty(""count"")\r\n    private int cnt;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int code;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    @JsonSerialize(using = StrArrSer.class)\r\n    @JsonDeserialize(using = StrArrDes.class)\r\n    private String[] data;\r\n\r\n    public String[] getData() { return data; }\r\n    public void setData(String[] data) { this.data = data; }\r\n}\r\n\r\npublic class StrArrSer extends JsonSerializer<String[]> {\r\n    @Override\r\n    public void serialize(String[] val, JsonGenerator gen, SerializerProvider sp) throws IOException {\r\n        gen.writeStartArray();\r\n        for (String s : val) gen.writeRawValue(s);\r\n        gen.writeEndArray();\r\n    }\r\n}\r\n\r\npublic class StrArrDes extends JsonDeserializer<String[]> {\r\n    @Override\r\n    public String[] deserialize(JsonParser p, DeserializationContext ctx) throws IOException {\r\n        List<String> lst = new ArrayList<>();\r\n        while (p.nextToken() != JsonToken.END_ARRAY) lst.add(p.readValueAsTree().toString());\r\n        return lst.toArray(new String[0]);\r\n    }\r\n}\r\n\r\nObjectMapper om = new ObjectMapper();\r\nRes res = om.readValue(jsonStr\r\n""]",0,1
"[""public class StrToDtDesTest {\r\n    \r\n    private StrToDtDes des;\r\n    private JsonParser jp;\r\n    private DeserializationContext ctx;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        des = new StrToDtDes();\r\n        jp = mock(JsonParser.class);\r\n        ctx = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testValidDate() throws Exception {\r\n        when(jp.getText()).thenReturn(""2025-03-17T10:15:30Z"");\r\n        Date dt = des.deserialize(jp, ctx);\r\n        assertNotNull(dt);\r\n    }\r\n\r\n    @Test\r\n    void testEmptyDate() throws Exception {\r\n        when(jp.getText()).thenReturn("""");\r\n        Date dt = des.deserialize(jp, ctx);\r\n        assertNull(dt);\r\n    }\r\n\r\n    @Test\r\n    void testInvalidDate() throws Exception {\r\n        when(jp.getText()).thenReturn(""invalid-date"");\r\n        assertThrows(MyCustomException.class, () -> des.deserialize(jp, ctx));\r\n    }\r\n}\r\n""]",0,1
"[""import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\nimport org.openqa.selenium.logging.LoggingPreferences;\r\nimport java.util.logging.Level;\r\n\r\npublic class MainEx {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n        FirefoxOptions opt = new FirefoxOptions();\r\n        LoggingPreferences logPrefs = new LoggingPreferences();\r\n        logPrefs.enable(LogType.BROWSER, Level.ALL);\r\n        opt.setCapability(""goog:loggingPrefs"", logPrefs);\r\n        WebDriver drv = new FirefoxDriver(opt);\r\n        drv.get(""https://www.google.com"");\r\n        drv.manage().logs().get(LogType.BROWSER).forEach(e -> System.out.println(e.getMessage()));\r\n        drv.quit();\r\n    }\r\n}\r\n""]",0,1
"["" class SecCfg {\r\n\r\n    @Value(""${sec.jwt.key}"")\r\n    private String key;\r\n\r\n    @Bean\r\n    SecurityFilterChain auth(HttpSecurity http) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain res(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(a -> a.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n            .formLogin(f -> f.loginPage(""/login"").permitAll())\r\n            .oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    JwtEncoder encJwt() {\r\n        byte[] b = Base64.getDecoder().decode(key);\r\n        SecretKeySpec s = new SecretKeySpec(b, ""HmacSHA256"");\r\n        OctetSequenceKey o = new OctetSequenceKey.Builder(s).keyID(""k"").algorithm(MACAlgorithm.HS256).build();\r\n        JWKSet j = new JWKSet(o);\r\n        JWKSource<SecurityContext> src = (s1, s2) -> s1.select(j);\r\n        return new NimbusJwtEncoder(src);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder decJwt() {\r\n        byte[] b = Base64.getDecoder().decode(key);\r\n        SecretKeySpec s = new SecretKeySpec(b, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(s).build();\r\n    }\r\n}\r\n""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Co {\r\n\r\n    private String n;\r\n    private String m;\r\n\r\n    public Co(@Value(""Adventure of War"") String n, @Value(""A place for War"") String m) {\r\n        this.n = n;\r\n        this.m = m;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Co{"" + ""n='"" + n + '\'' + "", m='"" + m + '\'' + '}';\r\n    }\r\n}\r\n""]",0,1
"[""package sec.cfg;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.annotation.Order;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.core.userdetails.*;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecCfg {\r\n\r\n    @Bean\r\n    public PasswordEncoder enc() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService memUsr() {\r\n        UserDetails u = User.withUsername(""spcUsr"")\r\n                .password(enc().encode(""spcPwd""))\r\n                .roles(""SPC"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(u);\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService dbUsr() {\r\n        return new CstUsrSrv();\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain spcSec(HttpSecurity h) throws Exception {\r\n        h.securityMatcher(""/spc/**"")\r\n                .authorizeHttpRequests(a -> a.anyRequest().authenticated())\r\n                .userDetailsService(memUsr())\r\n                .httpBasic();\r\n        return h.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain genSec(HttpSecurity h) throws Exception {\r\n        h.authorizeHttpRequests(a -> a.anyRequest().authenticated())\r\n                .userDetailsService(dbUsr())\r\n                .httpBasic();\r\n        return h.build();\r\n    }\r\n}\r\n""]",0,1
"[""package poll.me;\r\n\r\nimport io.smallrye.mutiny.Multi;\r\nimport java.time.Duration;\r\n\r\npublic class Poll {\r\n\r\n    public static void main(String[] args) {\r\n        Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n                .onItem().transformToUniAndMerge(t -> chkTxn())\r\n                .select().first()\r\n                .subscribe().with(txn -> System.out.println(""Txn: "" + txn), Throwable::printStackTrace);\r\n    }\r\n\r\n    static Multi<String> chkTxn() {\r\n        return Multi.createFrom().emitter(e -> {\r\n            srv.getTxn().toMulti()\r\n                    .onItem().transformToMultiAndMerge(t -> Multi.createFrom().iterable(t))\r\n                    .subscribe().with(t -> {\r\n                        if (!ver.on()) {\r\n                            e.fail(new Err());\r\n                        } else if (t.getAmt().stream().anyMatch(a -> a.getQty().equals(""test""))) {\r\n                            e.emit(t);\r\n                            e.complete();\r\n                        }\r\n                 \r\n""]",0,1
"[""package enc.me;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Base64;\r\n\r\npublic class Enc {\r\n    public static void main(String[] args) throws Exception {\r\n        byte[] key = Files.readAllBytes(Paths.get(""/home/debashishd/Downloads/s_key""));\r\n        byte[] fixKey = new byte[32];\r\n        System.arraycopy(key, 0, fixKey, 0, Math.min(key.length, 32));\r\n\r\n        SecretKeySpec sec = new SecretKeySpec(fixKey, ""AES"");\r\n        IvParameterSpec iv = new IvParameterSpec(new byte[16]);\r\n\r\n        Cipher en = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        en.init(Cipher.ENCRYPT_MODE, sec, iv);\r\n        String msg = ""Hello this is Roxane"";\r\n        String enc = Base64.getEncoder().encodeToString(en.doFinal(msg.getBytes(StandardCharsets.UTF_8)));\r\n\r\n        System.out.println(""Encrypted value: "" + enc);\r\n\r\n        Cipher de = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        de.init(Cipher.DECRYPT_MODE, sec, iv);\r\n        String dec = new String(de.doFinal(Base64.getDecoder().decode(enc)), StandardCharsets.UTF_8);\r\n\r\n        System.out.println(""Decrypted value: "" + dec);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.*;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpnDis extends Application {\r\n    public void start(Stage stg) {\r\n        Spinner<Integer> spnMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spnMax = new Spinner<>(2, 6, 6);\r\n        spnMin.valueProperty().addListener((o, old, val) -> {\r\n            spnMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(val, 6, spnMax.getValue()));\r\n            setBtn(spnMin, val == 6, true);\r\n        });\r\n        spnMax.valueProperty().addListener((o, old, val) -> {\r\n            spnMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, val, spnMin.getValue()));\r\n            setBtn(spnMax, val == 2, false);\r\n        });\r\n        VBox v = new VBox(10, spnMin, spnMax);\r\n        stg.setScene(new Scene(v, 200, 100));\r\n        stg.show();\r\n    }\r\n\r\n    private void setBtn(Spinner<Integer> spn, boolean d, boolean up) {\r\n        spn.lookupAll("".increment-arrow"").forEach(n -> n.setDisable(d && up));\r\n        spn.lookupAll("".decrement-arrow"").forEach(n -> n.setDisable(d && !up));\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n""]",0,1
"[""package com.xrx;\r\n\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class Tst {\r\n    public static void main(String[] a) {\r\n        try {\r\n            TemplateEngine te = new TemplateEngine();\r\n            ClassLoaderTemplateResolver r = new ClassLoaderTemplateResolver();\r\n            r.setCharacterEncoding(""UTF-8"");\r\n            r.setTemplateMode(TemplateMode.XML);\r\n            te.setTemplateResolver(r);\r\n            Context c = new Context();\r\n            c.setVariable(""TA"", ""????? ?????? ?? ??? ?????"");\r\n            c.setVariable(""TH"", ""?????"");\r\n            c.setVariable(""TC"", ""???"");\r\n            c.setVariable(""DT"", LocalDateTime.now().toString());\r\n            BufferedWriter o = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""out.xml""), StandardCharsets.UTF_8));\r\n            te.process(""tst.xml"", c, o);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package com.example.dataflow.io.redis;\r\n\r\nimport com.github.fppt.jedismock.RedisServer;\r\nimport org.apache.beam.sdk.io.TextIO;\r\nimport org.apache.beam.sdk.testing.PAssert;\r\nimport org.apache.beam.sdk.testing.TestPipeline;\r\nimport org.apache.beam.sdk.transforms.Create;\r\nimport org.apache.beam.sdk.transforms.Wait;\r\nimport org.apache.beam.sdk.values.KV;\r\nimport org.apache.beam.sdk.values.PCollection;\r\nimport org.junit.*;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\nimport redis.clients.jedis.Jedis;\r\nimport redis.clients.jedis.Transaction;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class RwIOTest {\r\n\r\n    private static final String R_HOST = ""localhost"";\r\n    private static final String[] DATA = new String[]{""123456789"", ""Bruce"", ""Wayne""};\r\n    @Mock\r\n    static Jedis jeds;\r\n    @Mock\r\n    private Transaction trns;\r\n    @Mock\r\n    CustomRedisConfigurations cnfg;\r\n\r\n    private int cnt;\r\n\r\n    @Rule\r\n    public TestPipeline p = TestPipeline.create();\r\n\r\n    @Before\r\n    public void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        when(cnfg.connect()).thenReturn(jeds);\r\n        when(jeds.multi()).thenReturn(trns);\r\n        cnt = 0;\r\n    }\r\n\r\n    @BeforeClass\r\n    public static void beforeClass() throws Exception {\r\n        RedisServer svr = RedisServer.newRedisServer(8000);\r\n        svr.start();\r\n        jeds = new Jedis(svr.getHost(), svr.getBindPort());\r\n    }\r\n\r\n    @AfterClass\r\n    public static void afterClass() throws IOException {\r\n        jeds.close();\r\n    }\r\n\r\n    @Test\r\n    public void testBatchProcessing() {\r\n        RwIO.Write spc = RwIO.write().withConnectionConfiguration(cnfg);\r\n        PCollection<KV<String, String>> flsh = p.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n        List<KV<String, String>> recs = new ArrayList<>();\r\n        for (int i = 0; i < 10000; i++) {\r\n            recs.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n        }\r\n\r\n        PCollection<KV<String, String>> out = p.apply(Create.of(recs));\r\n\r\n        out.apply(""Wait for flush"", Wait.on(flsh))\r\n           .apply(""Write to Redis"", RwIO.write()\r\n                .withConnectionConfiguration(CustomRedisConfigurations\r\n                    .create(R_HOST, 8000)\r\n                    .withTimeout(100)\r\n                    .withAuth(""creds"")\r\n                    .enableSSL()));\r\n        p.run();\r\n    }\r\n}\r\n""]",0,1
"[""public void DevEvt(){\r\n    LangPrg.getSelectionModel().clearSelection();\r\n    LangPrg.setValue(null);\r\n    LangPrg.setPromptText(""Select a language programming"");\r\n    if(Dev.getValue().equals(""Back-end"")){\r\n        LangPrg.setItems(LangPrgBE);\r\n    }\r\n    else if(Dev.getValue().equals(""Front-end"")){\r\n        LangPrg.setItems(LangPrgFE);\r\n    }\r\n}\r\n""]",0,1
"[""private static final String USB_PERM = ""com.ex.USB_PERM"";\r\n\r\npublic UsbSrv(ReactApplicationContext ctx) {\r\n    IntentFilter flt = new IntentFilter();\r\n    flt.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n    flt.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n    flt.addAction(USB_PERM);\r\n    ctx.registerReceiver(usbRec, flt);\r\n}\r\n\r\nprivate final BroadcastReceiver usbRec = new BroadcastReceiver() {\r\n    public void onReceive(Context ctx, Intent it) {\r\n        String act = it.getAction();\r\n        if (act.equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {\r\n            synchronized (this) {\r\n                UsbDevice dev = it.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                if (dev != null) {\r\n                    usbDev = dev;\r\n                    UsbManager mgr = (UsbManager) ctx.getSystemService(Context.USB_SERVICE);\r\n                    PendingIntent pi = PendingIntent.getBroadcast(ctx, 0, new Intent(USB_PERM), 0);\r\n                    mgr.requestPermission(usbDev, pi);\r\n                }\r\n            }\r\n        } else if (act.equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {\r\n            if (con != null) {\r\n                con.releaseInterface(usbIf);\r\n                con.close();\r\n            }\r\n            con = null;\r\n            usbDev = null;\r\n            endIn = null;\r\n            endOut = null;\r\n        } else if (act.equals(USB_PERM)) {\r\n            if (it.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                Log.d(""USB"", ""Perm OK"");\r\n            } else {\r\n                Log.d(""USB"", ""Perm Deny"");\r\n            }\r\n        }\r\n    }\r\n};\r\n""]",0,1
"[""package io.armadillo.aftfileuploads;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\r\n\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\n\r\n@SpringBootApplication\r\npublic class AftFileUploadsApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AftFileUploadsApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public ThreadPoolTaskScheduler taskSch() {\r\n        ThreadPoolTaskScheduler sch = new ThreadPoolTaskScheduler();\r\n        sch.setPoolSize(10);\r\n        sch.setThreadNamePrefix(""task-"");\r\n        sch.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\r\n        return sch;\r\n    }\r\n}\r\n""]",0,1
"["" class ResEnv<T> {\r\n    @Schema\r\n    private boolean sts;\r\n    @Schema\r\n    private T res;\r\n\r\n    public ResEnv(T res) {\r\n        this.sts = true;\r\n        this.res = res;\r\n    }\r\n\r\n    public boolean isSts() {\r\n        return sts;\r\n    }\r\n\r\n    public T getRes() {\r\n        return res;\r\n    }\r\n}\r\n\r\n@RestController\r\npublic class UsrCtl {\r\n    private final UsrSrv srv;\r\n\r\n    public UsrCtl(final UsrSrv srv) {\r\n        this.srv = srv;\r\n    }\r\n\r\n    @PostMapping(""/usr"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<ResEnv<UsrDto>> crt(final @RequestBody @Valid CrtUsr cmd) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(new ResEnv<>(srv.crt(cmd)));\r\n    }\r\n}\r\n""]",0,1
"[""package intcp;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class IntcpSrv implements ServerInterceptor {\r\n    @Override\r\n    public <R, S> Listener<R> interceptCall(ServerCall<R, S> cal, Metadata hdr, ServerCallHandler<R, S> nxt) {\r\n        System.out.println(""Hi"");\r\n        return nxt.startCall(cal, hdr);\r\n    }\r\n}\r\n""]",0,1
"[""private <T> void pos(Class<T> cls) {\r\n    int x, y;\r\n    boolean crt = false;\r\n    while (!crt) {\r\n        x = rnd.nextInt(sx);\r\n        y = rnd.nextInt(sy);\r\n        if (fld.getFld(x, y) instanceof Emp) {\r\n            try {\r\n                T obj = cls.getConstructor(int.class, int.class, int.class, int.class, Fld.class, Ply.class, Obj.class)\r\n                          .newInstance(x, y, sx, sy, fld, ply, this);\r\n                fld.setFld(x, y, obj);\r\n                crt = true;\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"["" class EsCfg {\r\n    @Bean\r\n    public RestClient rc() {\r\n        return RestClient.builder(HttpHost.create(""https://localhost:9700""))\r\n                .setHttpClientConfigCallback(http -> http\r\n                        .setSSLContext(ssl())\r\n                        .setDefaultCredentialsProvider(creds()))\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchTransport etp() {\r\n        return new RestClientTransport(rc(), new JacksonJsonpMapper());\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient ec() {\r\n        return new ElasticsearchClient(etp());\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchOperations eo() {\r\n        return new ElasticsearchTemplate(ec());\r\n    }\r\n\r\n    private SSLContext ssl() {\r\n        try (InputStream in = new ClassPathResource(""cert.pem"").getInputStream()) {\r\n            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");\r\n            Certificate cert = cf.generateCertificate(in);\r\n            KeyStore ks = KeyStore.getInstance(""pkcs12"");\r\n            ks.load(null, null);\r\n            ks.setCertificateEntry(""es-cert"", cert);\r\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n            tmf.init(ks);\r\n            SSLContext sc = SSLContext.getInstance(""TLS"");\r\n            sc.init(null, tmf.getTrustManagers(), new SecureRandom());\r\n            return sc;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private CredentialsProvider creds() {\r\n        CredentialsProvider cp = new BasicCredentialsProvider();\r\n        cp.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(""elastic"", ""123""));\r\n        return cp;\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        Exe svc = new Exe(5);\r\n        svc.run(""hi"");\r\n        svc.run(""h"");\r\n        svc.run(""u"");\r\n        svc.run(""y"");\r\n        svc.run(""hi"");\r\n        svc.run(""p"");\r\n        svc.run(""o"");\r\n        svc.run(""bb"");\r\n        svc.shut();\r\n    }\r\n}\r\n\r\nclass Exe {\r\n    private final ExecutorService ex;\r\n    private final ConcurrentMap<String, Lock> map = new ConcurrentHashMap<>();\r\n\r\n    public Exe(int n) {\r\n        this.ex = Executors.newFixedThreadPool(n);\r\n    }\r\n\r\n    public void run(String s) {\r\n        ex.submit(() -> {\r\n            Lock l = map.computeIfAbsent(s, k -> new ReentrantLock());\r\n            if (l.tryLock()) {\r\n                try {\r\n                    System.out.println(s);\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException e) {\r\n                    Thread.currentThread().interrupt();\r\n                } finally {\r\n                    l.unlock();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void shut() {\r\n        ex.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.*;\r\nimport org.springframework.http.codec.*;\r\n\r\n@Configuration\r\npublic class XmlCfg {\r\n\r\n    @Bean\r\n    public HttpMsgCod xmlCod() {\r\n        return new Jaxb2XmlDecoder();\r\n    }\r\n\r\n    @Bean\r\n    public HttpMsgCod xmlEnc() {\r\n        return new Jaxb2XmlEncoder();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.xml.bind.JAXBElement;\r\nimport javax.xml.namespace.QName;\r\nimport javax.xml.ws.WebServiceFeature;\r\nimport br.inf.portalfiscal.mdfe.wsdl.mdferecepcaosinc.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        ObjFct fct = new ObjFct();\r\n        QName qn = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""mdfeDadosMsg"");\r\n        JAXBElement<String> jax = new JAXBElement<>(qn, String.class, ""<mdfeDadosMsg xmlns=\""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc\"">...</mdfeDadosMsg>"");\r\n\r\n        MDFeRec rec = new MDFeRec();\r\n        MDFeRecS12 sp = rec.getMDFeRecS12(new WebServiceFeature[0]);\r\n        MdfeRecRes res = sp.mdfeRecepcao(jax.getValue());\r\n\r\n        System.out.println(res.getAny());\r\n    }\r\n}\r\n""]",0,1
"[""import org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport java.io.*;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport com.itextpdf.text.pdf.BaseFont;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) throws Exception {\r\n        String htm = ""<!DOCTYPE html><html lang='ru'><head><meta charset='UTF-8'/></head><body><h3 style='font-family:Arial;'>??????</h3></body></html>"";\r\n        String pth = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream out = new FileOutputStream(pth);\r\n        ITextRenderer ren = new ITextRenderer();\r\n        ren.getFontResolver().addFont(""arial.ttf"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n        ren.setDocumentFromString(htm);\r\n        ren.layout();\r\n    \r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.stream.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        String str = ""[[445, 292], [585, 331], [612, 223], [205, 532]]"";\r\n        int[][] arr = Arrays.stream(str.replaceAll(""[\\[\\]]"", """").split(""],\\s*\\[""))\r\n                .map(s -> Arrays.stream(s.split("","")).mapToInt(Integer::parseInt).toArray())\r\n                .toArray(int[][]::new);\r\n        for (int[] a : arr) System.out.println(Arrays.toString(a));\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class Run {\r\n    public static void main(String[] args) {\r\n        Card[] d = {new Card(""A""), new Card(""B""), new Card(""C""), new Card(""D"")};\r\n        Random r = new Random();\r\n        for (int i = d.length - 1; i > 0; i--) {\r\n            int j = r.nextInt(i + 1);\r\n            Card t = d[i];\r\n            d[i] = d[j];\r\n            d[j] = t;\r\n        }\r\n        for (Card c : d) System.out.println(c);\r\n    }\r\n}\r\n\r\nclass Card {\r\n    String v;\r\n    Card(String v) { this.v = v; }\r\n    public String toString() { return v; }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.extension.*;\r\nimport org.junit.platform.suite.api.*;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\n@ExtendWith(JUnit5Srv.class)\r\npublic class JUnit5S {}\r\n\r\nclass JUnit5Srv implements BeforeAllCallback, AfterAllCallback {\r\n    @Override\r\n    public void beforeAll(ExtensionContext c) throws Exception { start(); }\r\n    @Override\r\n    public void afterAll(ExtensionContext c) throws Exception { stop(); }\r\n    void start() { System.out.println(""Start""); }\r\n    void stop() { System.out.println(""Stop""); }\r\n}\r\n""]",0,1
"[""(""compute/{u}/res"")\r\npublic Mono<Void> pch(@PathVariable String u, @RequestBody String r) {\r\n    return svc.upd(u, r);\r\n}\r\n\r\npublic Mono<Void> upd(String u, String r) {\r\n    return fnd(u).flatMap(a -> {\r\n        a.setResults(r);\r\n        return repo.save(a);\r\n    }).then();\r\n}\r\n""]",0,1
"["" class JaxbCfg {\r\n    @Bean\r\n    public Jaxb2Marshaller mar() {\r\n        Jaxb2Marshaller m = new Jaxb2Marshaller();\r\n        m.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        m.setMtomEnabled(false);\r\n        return m;\r\n    }\r\n}\r\n\r\n@Component\r\npublic class MySoap extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate tmp;\r\n\r\n    public MySoap(Jaxb2Marshaller mar) {\r\n        setMarshaller(mar);\r\n        setUnmarshaller(mar);\r\n        tmp = getWebServiceTemplate();\r\n    }\r\n\r\n    public void send(MyReq req) {\r\n        try {\r\n            tmp.marshalSendAndReceive(req);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\npublic class Bin {\r\n    public static BinDat mkBin(byte[] dat) {\r\n        BinDat b = new BinDat();\r\n        b.setBlob(new String(Base64.getEncoder().encode(dat)));\r\n        b.setExt(""pdf"");\r\n        return b;\r\n    }\r\n}\r\n\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = ""BinDat"", propOrder = {""blob"", ""ext""})\r\npublic class BinDat {\r\n    @XmlElement(required = true)\r\n    protected String blob;\r\n    @XmlElement(required = true)\r\n    protected String ext;\r\n\r\n    public void setBlob(String b) { this.blob = b; }\r\n    public void setExt(String e) { this.ext = e; }\r\n}\r\n""]",0,1
"[""btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View v) {\r\n        long v1, v2;\r\n        v1 = Long.parseLong(txtfirst.getText().toString());\r\n        v2 = Long.parseLong(txtsecond.getText().toString());\r\n        list.clear();\r\n        for(long i = v1; i <= v2; i++) {\r\n            list.add("""" + i);\r\n        }\r\n        li.setAdapter(arrayAdapter);\r\n    }\r\n});\r\n""]",0,1
"[""import java.lang.management.ManagementFactory;\r\nimport java.nio.file.*;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        var mx = ManagementFactory.getRuntimeMXBean();\r\n        var pid = mx.getName().split(""@"")[0];\r\n        var path = Paths.get(""path/to/file"");\r\n        var w = path.toFile().toPath();\r\n        var ref = new Object() { String usr = """"; };\r\n\r\n        Files.lines(Paths.get(""/proc/"" + pid + ""/fd""))\r\n            .filter(l -> l.contains(w.toString()))\r\n            .forEach(l -> ref.usr = l);\r\n\r\n        System.out.println(ref.usr);\r\n    }\r\n}\r\n""]",0,1
"[""import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.*;\r\nimport java.io.*;\r\n\r\npublic class App {\r\n    public static void main(String[] a) throws Exception {\r\n        var f = new File(""D:\\Demo\\src\\test\\java\\StringXml\\_ignoreText.xsl"");\r\n        var s = ""<?xml version='1.0' encoding='UTF-8'?>""\r\n              + ""<root><n>123</n><t>hello</t></root>"";\r\n        var tf = TransformerFactory.newInstance();\r\n        var t = tf.newTransformer(new StreamSource(f));\r\n        var r = new StringWriter();\r\n        t.transform(new StreamSource(new StringReader(s)), new StreamResult(r));\r\n        System.out.println(r);\r\n    }\r\n}\r\n""]",0,1
"[""(10)\r\npublic SecurityFilterChain sec1(HttpSecurity h) throws Exception {\r\n    h.securityMatcher(""/**"")\r\n     .authorizeHttpRequests(a -> a.requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n     .anyRequest().authenticated())\r\n     .oauth2ResourceServer(...);\r\n    return h.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain sec2(HttpSecurity h, ResourceFilter f) throws Exception {\r\n    h.securityMatcher(""/**"").addFilterAfter(f, SessionManagementFilter.class);\r\n    return h.build();\r\n}\r\n""]",0,1
"[""class DocProc extends SimpleDocTreeVisitor<Void, Trees> {\r\n    private final Elements elm;\r\n    private final Types typ;\r\n\r\n    DocProc(ProcessingEnvironment e) {\r\n        this.elm = e.getElementUtils();\r\n        this.typ = e.getTypeUtils();\r\n    }\r\n\r\n    @Override\r\n    public Void visitLink(LinkTree l, Trees t) {\r\n        String sig = l.getReference().getSignature();\r\n        for (Element e : elm.getAllModuleElements()) {\r\n            for (Element p : e.getEnclosedElements()) {\r\n                for (Element i : p.getEnclosedElements()) {\r\n                    if (i.getSimpleName().toString().equals(sig)) {\r\n                        System.out.println(elm.getBinaryName((TypeElement) i));\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n""]",0,1
"[""interface S1 {\r\n    default void dsp() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface S2 {\r\n    void dsp();\r\n}\r\n\r\npublic class Per implements S1, S2 {\r\n    public void dsp() {\r\n        S1.super.dsp();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        Per p = new Per();\r\n        p.dsp();\r\n    }\r\n}\r\n""]",0,1
"[""package com.auto.ex;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\n\r\npublic class Main extends Application {\r\n\r\n    private static final ObservableList<String> lst1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert"");\r\n\r\n    private static final ObservableList<String> lst2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam"");\r\n\r\n    private AutoCompletionBinding<String> bind;\r\n\r\n    @Override\r\n    public void start(Stage stg) {\r\n        TextField txt = new TextField();\r\n        txt.setOnKeyTyped(e -> {\r\n            String in = txt.getText().toUpperCase();\r\n            if (bind != null) bind.dispose();\r\n            if (in.length() == 2) {\r\n                bind = TextFields.bindAutoCompletion(txt, in.startsWith(""A"") ? lst1 : lst2);\r\n                bind.setOnAutoCompleted(v -> System.out.println(""You picked "" + v.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox box = new VBox(10, txt);\r\n        stg.setScene(new Scene(box, 300, 200));\r\n        stg.setTitle(""AutoComplete"");\r\n        stg.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport org.apache.poi.hssf.usermodel.*;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExpXls {\r\n    public static void main(String[] args) {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             HSSFWorkbook wb = new HSSFWorkbook()) {\r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n            HSSFCellStyle[] stl = new HSSFCellStyle[50];\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                stl[i] = wb.createCellStyle();\r\n                stl[i].setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n                stl[i].setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n            }\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(stl[i]);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class SubSetChk {\r\n    public static void main(String[] args) {\r\n        Map<String, Set<Long>> mp = new HashMap<>();\r\n        mp.put(""a"", Set.of(1L, 2L, 3L));\r\n        mp.put(""b"", Set.of(4L, 5L));\r\n        mp.put(""c"", Set.of(1L));\r\n        mp.put(""d"", Set.of(2L, 3L));\r\n        mp.put(""e"", Set.of(5L));\r\n        mp.put(""f"", Set.of(6L));\r\n\r\n        List<String> res = new ArrayList<>();\r\n        List<String> ks = new ArrayList<>(mp.keySet());\r\n\r\n        for (int i = 0; i < ks.size(); i++) {\r\n            for (int j = i + 1; j < ks.size(); j++) {\r\n                if (mp.get(ks.get(i)).containsAll(mp.get(ks.get(j))) ||\r\n                    mp.get(ks.get(j)).containsAll(mp.get(ks.get(i)))) {\r\n                    res.add(ks.get(i) + "" and "" + ks.get(j));\r\n                }\r\n            }\r\n        }\r\n\r\n        res.forEach(System.out::println);\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.reactive.*;\r\nimport reactor.core.publisher.*;\r\n\r\n@Service\r\npublic class ChSvc {\r\n    private final ChRep rep;\r\n    private final RxtxMgr txMgr;\r\n\r\n    public ChSvc(ChRep rep, RxtxMgr txMgr) {\r\n        this.rep = rep;\r\n        this.txMgr = txMgr;\r\n    }\r\n\r\n    public Mono<Ch> crt(Ch ch) {\r\n        return txMgr.getRxtx()\r\n            .execute(tx -> rep.sav(ch)\r\n                .map(c -> {\r\n                    if (true) throw new RuntimeException();\r\n                    return c;\r\n                })\r\n            );\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class SumLim {\r\n    public List<Integer> getSet(int[] arr, int tgt, int lim) {\r\n        List<Integer> res = new ArrayList<>();\r\n        if (dfs(arr, tgt, lim, 0, res)) return res;\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    private boolean dfs(int[] arr, int tgt, int lim, int idx, List<Integer> res) {\r\n        if (tgt == 0 && res.size() == lim) return true;\r\n        if (res.size() >= lim || idx >= arr.length) return false;\r\n        res.add(arr[idx]);\r\n        if (dfs(arr, tgt - arr[idx], lim, idx + 1, res)) return true;\r\n        res.remove(res.size() - 1);\r\n        return dfs(arr, tgt, lim, idx + 1, res);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SumLim obj = new SumLim();\r\n        System.out.println(obj.getSet(new int[]{2, 7, 11, 15}, 20, 3));\r\n    }\r\n}\r\n""]",0,1
"[""import org.web3j.crypto.*;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class SigVer {\r\n    public boolean chk(String adr, String sig, String nc) {\r\n        try {\r\n            String pre = ""\u0019Ethereum Signed Message:\n"" + nc.length() + nc;\r\n            byte[] msg = pre.getBytes(StandardCharsets.UTF_8);\r\n            byte[] msgH = Hash.sha3(msg);\r\n            Sign.SignatureData sigD = sigDat(sig);\r\n            BigInteger pubK = Sign.signedMessageToKey(msgH, sigD);\r\n            String recAdr = ""0x"" + Keys.getAddress(pubK);\r\n            return recAdr.equalsIgnoreCase(adr);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private Sign.SignatureData sigDat(String sig) {\r\n        byte[] sigB = Numeric.hexStringToByteArray(sig);\r\n        byte v = sigB[64];\r\n        if (v < 27) v += 27;\r\n        return new Sign.SignatureData(v, \r\n                Arrays.copyOfRange(sigB, 0, 32), \r\n                Arrays.copyOfRange(sigB, 32, 64));\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum Agg {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVG(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, java.util.OptionalDouble> fn;\r\n\r\n    Agg(Function<DoubleStream, java.util.OptionalDouble> fn) {\r\n        this.fn = fn;\r\n    }\r\n\r\n    public double app(DoubleStream ds) {\r\n        return fn.apply(ds).orElse(-1);\r\n    }\r\n}\r\n\r\npublic class Cal {\r\n    public float calc(Agg a) {\r\n        return (float) a.app(provides.stream().mapToDouble(this::someFunc));\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class BPld {\r\n}\r\n\r\npublic class APld extends BPld {\r\n    private int id;\r\n    private String nm;\r\n    public APld(int id, String nm) {\r\n        this.id = id;\r\n        this.nm = nm;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getNm() {\r\n        return nm;\r\n    }\r\n}\r\n\r\npublic class BCmd<T extends BPld> {\r\n    String cmd;\r\n    T pld;\r\n    public BCmd(String cmd, T pld) {\r\n        this.cmd = cmd;\r\n        this.pld = pld;\r\n    }\r\n}\r\n\r\npublic class ACmd extends BCmd<APld> {\r\n    public ACmd(APld pld) {\r\n        super(""Add"", pld);\r\n    }\r\n}\r\n\r\npublic abstract class BEvt<C extends BCmd<P>, P extends BPld> {\r\n    abstract protected BEH<? extends BEvt<C, P>, C, P> getHnd();\r\n}\r\n\r\npublic abstract class BEH<E extends BEvt<C, P>, C extends BCmd<P>, P extends BPld> {\r\n    abstract public void onTry(E e, ArrayList<BEvt<?, ?>> ev);\r\n    abstract public void onCom(String uid, E e);\r\n}\r\n\r\npublic class AEH extends BEH<AEvt, ACmd, APld> {\r\n    @Override\r\n    public void onTry(AEvt e, ArrayList<BEvt<?, ?>> ev) {\r\n    }\r\n    @Override\r\n    public void onCom(String uid, AEvt e) {\r\n    }\r\n}\r\n\r\npublic class AEvt extends BEvt<ACmd, APld> {\r\n    @Override\r\n    protected BEH<AEvt, ACmd, APld> getHnd() {\r\n        return new AEH();\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.module.*;\r\nimport java.util.*;\r\n\r\npublic class ModChk {\r\n    public static void main(String[] args) {\r\n        ModuleLayer l = ModuleLayer.boot();\r\n        Set<String> cor = Set.of(""java.base"", ""java.sql"", ""java.xml"", ""java.desktop"",\r\n                                 ""java.logging"", ""java.management"", ""java.naming"",\r\n                                 ""java.security.sasl"", ""java.instrument"", ""jdk.unsupported"");\r\n\r\n        Map<Boolean, List<String>> grp = new HashMap<>();\r\n        grp.put(true, new ArrayList<>());\r\n        grp.put(false, new ArrayList<>());\r\n\r\n        for (Module m : l.modules()) {\r\n            grp.get(cor.contains(m.getName())).add(m.getName());\r\n        }\r\n\r\n        System.out.println(""Core: "" + grp.get(true));\r\n        System.out.println(""Non-Core: "" + grp.get(false));\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.*;\r\nimport java.time.format.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter fmt = new DateTimeFormatterBuilder()\r\n            .parseCaseInsensitive()\r\n            .appendPattern(""ddMMMyyyy"")\r\n            .toFormatter(Locale.of(""es"", ""ES""));\r\n\r\n        Map<String, String> rep = Map.of(\r\n            ""ENE"", ""JAN"", ""FEB"", ""FEB"", ""MAR"", ""MAR"",\r\n            ""ABR"", ""APR"", ""MAY"", ""MAY"", ""JUN"", ""JUN"",\r\n            ""JUL"", ""JUL"", ""AGO"", ""AUG"", ""SEP"", ""SEP"",\r\n            ""OCT"", ""OCT"", ""NOV"", ""NOV"", ""DIC"", ""DEC""\r\n        );\r\n\r\n        String txt = ""24ENE1982"";\r\n        for (var e : rep.entrySet()) {\r\n            txt = txt.replace(e.getKey(), e.getValue());\r\n        }\r\n\r\n        LocalDate dt = LocalDate.parse(txt, DateTimeFormatter.ofPattern(""ddMMMyyyy"", Locale.ENGLISH));\r\n        System.out.println(""Hello world! "" + dt);\r\n    }\r\n}\r\n""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class TxtCur {\r\n    public static void main(String[] args) {\r\n        JFrame frm = new JFrame();\r\n        JTextArea txt = new JTextArea(5, 20);\r\n        txt.setCursor(txt.getToolkit().createCustomCursor(\r\n            new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB), \r\n            new Point(), \r\n            ""NOCUR""\r\n        ));\r\n\r\n        frm.add(new JScrollPane(txt));\r\n        frm.setSize(300, 200);\r\n        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frm.setVisible(true);\r\n    }\r\n}\r\n""]",0,1
"[""import org.apache.poi.ss.formula.*;\r\nimport org.apache.poi.ss.formula.ptg.*;\r\nimport org.apache.poi.ss.util.*;\r\nimport java.util.*;\r\n\r\npublic class FmSh {\r\n    public static void main(String[] args) {\r\n        String fm = ""=(A2+B2)"";\r\n        String org = ""C2"";\r\n        String des = ""D2"";\r\n        System.out.println(shf(fm, org, des));\r\n    }\r\n\r\n    public static String shf(String fm, String org, String des) {\r\n        Ptgs ptg = FormulaParser.parse(fm, null, FormulaType.CELL, 0);\r\n        CellRef o = new CellRef(org);\r\n        CellRef d = new CellRef(des);\r\n        int dr = d.getRow() - o.getRow();\r\n        int dc = d.getCol() - o.getCol();\r\n        \r\n        for (Ptg p : ptg) {\r\n            if (p instanceof RefPtgBase) {\r\n                RefPtgBase r = (RefPtgBase) p;\r\n                if (!r.isColumnAbsolute()) r.setColumn(r.getColumn() + dc);\r\n                if (!r.isRowAbsolute()) r.setRow(r.getRow() + dr);\r\n            }\r\n        }\r\n        \r\n        return FormulaRenderer.toFormulaString(null, ptg);\r\n    }\r\n}\r\n\r\nclass CellRef {\r\n    private final CellReference ref;\r\n\r\n    public CellRef(String addr) {\r\n        this.ref = new CellReference(addr);\r\n    }\r\n\r\n    public int getRow() {\r\n        return ref.getRow();\r\n    }\r\n\r\n    public int getCol() {\r\n        return ref.getCol();\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\n\r\npublic class FWr {\r\n    public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile f = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            f.write(""123456789"".getBytes());\r\n        }\r\n        try (RandomAccessFile f = new RandomAccessFile(""test.txt"", ""rw"")) {\r\n            f.seek(0);\r\n            f.write(""hello"".getBytes());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.beans.property.*;\r\nimport javafx.scene.control.*;\r\nimport javafx.util.*;\r\nimport java.net.*;\r\nimport java.time.*;\r\nimport java.util.*;\r\n\r\npublic class Ctl implements Initializable {\r\n    @FXML\r\n    private TableView<Lib> tab;\r\n    @FXML\r\n    private TableColumn<Lib, String> cod, avl, tit, autDir;\r\n    private Svc svc = new Svc();\r\n\r\n    @Override\r\n    public void initialize(URL loc, ResourceBundle res) {\r\n        cod.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        avl.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        tit.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n        autDir.setCellValueFactory(c -> {\r\n            if (c.getValue() instanceof Bok) \r\n                return new SimpleStringProperty(((Bok) c.getValue()).getAut());\r\n            if (c.getValue() instanceof Mov) \r\n                return new SimpleStringProperty(((Mov) c.getValue()).getDir());\r\n            return new SimpleStringProperty("""");\r\n        });\r\n\r\n        tab.getItems().addAll(svc.getLibs());\r\n    }\r\n}\r\n\r\nabstract class Lib {\r\n    private int cod;\r\n    private String tit;\r\n    private boolean avl;\r\n    private int mid;\r\n    private LocalDate dt;\r\n\r\n    protected Lib(int cod, String tit, boolean avl, int mid, LocalDate dt) {\r\n        this.cod = cod;\r\n        this.tit = tit;\r\n        this.avl = avl;\r\n        this.mid = mid;\r\n        this.dt = dt;\r\n    }\r\n\r\n    public int getItemCode() { return cod; }\r\n    public String getTitle() { return tit; }\r\n    public boolean isAvailability() { return avl; }\r\n}\r\n\r\nclass Bok extends Lib {\r\n    private String aut;\r\n\r\n    protected Bok(int cod, String tit, boolean avl, int mid, LocalDate dt, String aut) {\r\n        super(cod, tit, avl, mid, dt);\r\n        this.aut = aut;\r\n    }\r\n\r\n    public String getAut() { return aut; }\r\n}\r\n\r\nclass Mov extends Lib {\r\n    private String dir;\r\n\r\n    protected Mov(int cod, String tit, boolean avl, int mid, LocalDate dt, String dir) {\r\n        super(cod, tit, avl, mid, dt);\r\n        this.dir = dir;\r\n    }\r\n\r\n    public String getDir() { return dir; }\r\n}\r\n\r\nclass Svc {\r\n    public List<Lib> getLibs() {\r\n        return List.of(\r\n            new Bok(1, ""Bk1"", true, 0, LocalDate.now(), ""Aut1""),\r\n            new Mov(2, ""Mv1"", false, 1, LocalDate.now(), ""Dir1"")\r\n        );\r\n    }\r\n}\r\n""]",0,1
"[""import org.mockito.*;\r\nimport javax.sql.*;\r\nimport java.sql.*;\r\n\r\npublic class DbSim {\r\n    public static DataSource mockDS() throws SQLException {\r\n        DataSource ds = Mockito.spy(DataSourceBuilder.create().build());\r\n        Mockito.doAnswer(inv -> {\r\n            if (Math.random() < 0.5) throw new SQLTransientConnectionException(""Mock Timeout"");\r\n            return ds.getConnection();\r\n        }).when(ds).getConnection();\r\n        return ds;\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.*;\r\nimport org.mockito.*;\r\nimport java.util.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass SvcTest {\r\n    private Svc svc;\r\n    @Mock\r\n    private Repo repo;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        svc = new Svc(repo);\r\n    }\r\n\r\n    @Test\r\n    void tstUpd() {\r\n        UUID id = UUID.randomUUID();\r\n        Req req = new Req(100);\r\n        Ent ent = new Ent(id, 50);\r\n\r\n        when(repo.findByUuid(id)).thenReturn(Optional.of(ent));\r\n        when(repo.saveAndFlush(any(Ent.class))).thenAnswer(i -> i.getArgument(0));\r\n\r\n        Dto res = svc.update(id, req);\r\n\r\n        assertEquals(100, res.getAmt());\r\n        verify(repo).saveAndFlush(ent);\r\n    }\r\n}\r\n\r\nclass Dto {\r\n    private int amt;\r\n    public Dto(Ent e) { this.amt = e.getAmt(); }\r\n    public int getAmt() { return amt; }\r\n}\r\n\r\nclass Req {\r\n    private int amt;\r\n    public Req(int amt) { this.amt = amt; }\r\n    public int getAmt() { return amt; }\r\n}\r\n\r\nclass Ent {\r\n    private UUID id;\r\n    private int amt;\r\n    public Ent(UUID id, int amt) { this.id = id; this.amt = amt; }\r\n    public int getAmt() { return amt; }\r\n    public void setAmt(int amt) { this.amt = amt; }\r\n}\r\n\r\ninterface Repo {\r\n    Optional<Ent> findByUuid(UUID id);\r\n    Ent saveAndFlush(Ent e);\r\n}\r\n\r\nclass Svc {\r\n    private Repo repo;\r\n    public Svc(Repo repo) { this.repo = repo; }\r\n    public Dto update(UUID id, Req req) {\r\n        Ent e = repo.findByUuid(id).orElseThrow();\r\n        e.setAmt(req.getAmt());\r\n        return new Dto(repo.saveAndFlush(e));\r\n    }\r\n}\r\n""]",0,1
"[""(basePackages = ""com.repo.db"", repositoryImplementationPostfix = ""DB"")\r\n@EnableRedisRepositories(basePackages = ""com.repo.rd"", repositoryImplementationPostfix = ""RD"")\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(App.class, args);\r\n    }\r\n}\r\n""]",0,1
"[""package tb;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport tb.gen.CLSID;\r\nimport tb.gen.IID;\r\nimport tb.gen.ITaskbarList3;\r\nimport tb.gen.ITaskbarList3Vtbl;\r\nimport tb.gen.ShObjIdl_core_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Tb extends Application {\r\n    public static final String G = ""{%s}"";\r\n    public static final String C = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String I = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage s) {\r\n        var b = new javafx.scene.control.Button(""Go"");\r\n        b.setOnAction(e -> clk());\r\n        var r = new javafx.scene.layout.StackPane(b);\r\n        var sc = new javafx.scene.Scene(r, 300, 200);\r\n        s.setTitle(""Tb"");\r\n        s.setScene(sc);\r\n        s.show();\r\n    }\r\n\r\n    void clk() {\r\n        long w = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            try (var a = Arena.ofConfined()) {\r\n                var c = a.allocateFrom(G.formatted(C), StandardCharsets.UTF_16LE);\r\n                var i = a.allocateFrom(G.formatted(I), StandardCharsets.UTF_16LE);\r\n                var cl = CLSID.allocate(a);\r\n                var ii = IID.allocate(a);\r\n                var p = a.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment wh = a.allocate(ValueLayout.ADDRESS, w);\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.CLSIDFromString(c, cl);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.IIDFromString(i, ii);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                hr = ShObjIdl_core_h.CoCreateInstance(cl, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), ii, p);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                var tp = p.get(ValueLayout.ADDRESS, 0);\r\n                var ti = tp.reinterpret(ITaskbarList3.sizeof());\r\n                MemorySegment vt = ITaskbarList3.lpVtbl(ti);\r\n                MemorySegment vti = vt.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n                MemorySegment hi = ITaskbarList3Vtbl.HrInit(vti);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(hi, ti);\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                MemorySegment ps = ITaskbarList3Vtbl.SetProgressState(vti);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(ps, ti, wh, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                for (int i = 0; i < 100; i += 20) {\r\n                    MemorySegment pv = ITaskbarList3Vtbl.SetProgressValue(vti);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(pv, ti, wh, i, 100);\r\n                    if (hr != ShObjIdl_core_h.S_OK()) return;\r\n                    Thread.sleep(500);\r\n                }\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(ps, ti, wh, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n            } catch (Throwable e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public void cpDb() {\r\n    AssetManager am = Objects.requireNonNull(requireContext()).getAssets();\r\n    Context ctx = requireContext();\r\n    ctx.getExternalFilesDir(null);\r\n    File dbFld = new File(ctx.getExternalFilesDir(null).getParent(), ""com.mydb.orca/databases"");\r\n    dbFld.mkdirs();\r\n\r\n    try {\r\n        String[] fls = am.list(""database/test"");\r\n        if (fls != null) {\r\n            for (String fn : fls) {\r\n                InputStream in = am.open(""database/test/"" + fn);\r\n                File outF = new File(dbFld, fn);\r\n                OutputStream out = new FileOutputStream(outF);\r\n                cpFl(in, out);\r\n                in.close();\r\n                out.flush();\r\n                out.close();\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""tag"", ""Failed to copy"", e);\r\n    }\r\n}\r\n\r\nprivate void cpFl(InputStream in, OutputStream out) throws IOException {\r\n    byte[] buf = new byte[1024];\r\n    int rd;\r\n    while ((rd = in.read(buf)) != -1) {\r\n        out.write(buf, 0, rd);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class M {\r\n    public static void main(String[] args) {\r\n        List<String> lst = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        lst.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        lst.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""public void pC(Graphics g) {\r\n    super.pC(g);\r\n    if (A.getImg() != null) {\r\n        float wF = getP().getW() / 1280F;\r\n        float hF = getP().getH() / 859F;\r\n        int w, h, x, y;\r\n        if (wF < hF) {\r\n            h = getP().getH();\r\n            w = (int) (1280F * hF);\r\n            x = getP().getW() / 2 - w / 2;\r\n            y = 0;\r\n        } else {\r\n            w = getP().getW();\r\n            h = (int) (859F * wF);\r\n            x = 0;\r\n            y = getP().getH() / 2 - h / 2;\r\n        }\r\n        g.dI(A.getImg(), x, y, w, h, this);\r\n    }\r\n}\r\n""]",0,1
"[""var es = Executors.newVirtualThreadPerTaskExecutor();\r\nvar sw = StopWatch.createStarted();\r\nvar ts = 10;\r\nvar fs = IntStream.range(1, ts + 1)\r\n    .mapToObj(i -> es.submit(new Tsk(i)))\r\n    .toList();\r\nfs.forEach(f -> { try { f.get(); } catch (Exception e) { e.printStackTrace(); } });\r\nsw.stop();\r\nSystem.out.println(""Time: "" + sw.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\nes.close();\r\n\r\nclass Tsk implements Callable<String> {\r\n    int id;\r\n    Tsk(int id) { this.id = id; }\r\n    public String call() {\r\n        System.out.println(""T: "" + id + "" start"");\r\n        var sw = StopWatch.createStarted();\r\n        try (var cn = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(""T: "" + id + "" con ok"");\r\n            var st = cn.createStatement();\r\n            System.out.println(""T: "" + id + "" sql go"");\r\n            var rs = st.executeQuery(""SELECT hello_world() AS out"");\r\n            String res = rs.next() ? rs.getString(""out"") : null;\r\n            st.close();\r\n            System.out.println(""T: "" + id + "" con cls"");\r\n            sw.stop();\r\n            System.out.println(""T: "" + id + "" done "" + sw.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n            return res;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.*;\r\nimport java.util.stream.*;\r\n\r\npublic class M {\r\n    private static List<String> run(String cmd) {\r\n        List<String> out = new ArrayList<>();\r\n        String[] arr = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + cmd + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n        };\r\n        try {\r\n            Process p = Runtime.getRuntime().exec(arr);\r\n            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n            out = r.lines().collect(Collectors.toList());\r\n            p.waitFor();\r\n            p.destroy();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        return out;\r\n    }\r\n\r\n    public static void main(String[] x) {\r\n        List<String> res = run(""WMIC OS Get Caption,Version"");\r\n        if (res != null) res.forEach(System.out::println);\r\n    }\r\n}\r\n""]",0,1
"[""try (Stream<Employee> s = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter w = response.getWriter();\r\n    Iterator<Employee> i = s.iterator();\r\n    w.write(""["");\r\n    if (i.hasNext()) {\r\n        w.write(jsonSerialize(i.next()));\r\n        while (i.hasNext()) {\r\n            w.write("","");\r\n            w.write(jsonSerialize(i.next()));\r\n        }\r\n    }\r\n    w.write(""]"");\r\n    w.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n""]",0,1
"[""public class Tst {\r\n    public static void prs(String pth) throws Exception {\r\n        try (CSVReader rdr = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(Tst.class.getResourceAsStream(pth))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n                .build()) {\r\n            String[] ln;\r\n            while ((ln = rdr.readNext()) != null) {\r\n                System.out.println(ln[0] + "" "" + ln[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            prs(""pth-tsv"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public interface Utl {\r\n    void get();\r\n}\r\n\r\n@Service\r\npublic class UtlOne implements Utl {\r\n    public void get() { }\r\n}\r\n\r\n@Service\r\npublic class UtlTwo implements Utl {\r\n    public void get() { }\r\n}\r\n\r\n@Component\r\npublic class UtlMgr {\r\n    private final UtlOne one;\r\n    private final UtlTwo two;\r\n    private Utl act;\r\n\r\n    @Autowired\r\n    public UtlMgr(UtlOne one, UtlTwo two) {\r\n        this.one = one;\r\n        this.two = two;\r\n        this.act = one;\r\n    }\r\n\r\n    public void swp(String val) {\r\n        act = ""one"".equals(val) ? one : two;\r\n    }\r\n\r\n    public Utl get() {\r\n        return act;\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DmoSvc {\r\n    private final UtlMgr mgr;\r\n\r\n    @Autowired\r\n    public DmoSvc(UtlMgr mgr) {\r\n        this.mgr = mgr;\r\n    }\r\n\r\n    public void run() {\r\n        mgr.get().get();\r\n    }\r\n}\r\n""]",0,1
"[""public class Src {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length, r = 0, c = n - 1;\r\n        while (r < n && c >= 0) {\r\n            if (mat[r][c] == num) return true;\r\n            if (mat[r][c] > num) c--;\r\n            else r++;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.*;\r\nimport org.apache.poi.openxml4j.opc.*;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.*;\r\n\r\npublic class WrdMrg {\r\n    private final OutputStream out;\r\n    private final List<InputStream> ins;\r\n    private XWPFDocument fst;\r\n\r\n    public WrdMrg(OutputStream out) {\r\n        this.out = out;\r\n        this.ins = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream in) throws Exception {\r\n        ins.add(in);\r\n        XWPFDocument doc = new XWPFDocument(OPCPackage.open(in));\r\n        if (fst == null) {\r\n            fst = doc;\r\n        } else {\r\n            XWPFParagraph br = fst.createParagraph();\r\n            br.setPageBreak(true);\r\n            for (XWPFParagraph p : doc.getParagraphs()) {\r\n                XWPFParagraph np = fst.createParagraph();\r\n                np.getCTP().set(p.getCTP().copy());\r\n            }\r\n            for (XWPFTable t : doc.getTables()) {\r\n                XWPFTable nt = fst.createTable();\r\n                nt.getCTTbl().set(t.getCTTbl().copy());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void merge() throws Exception {\r\n        fst.write(out);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        out.flush();\r\n        out.close();\r\n        for (InputStream i : ins) i.close();\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream fo = new FileOutputStream(""/home/vic/res.docx"");\r\n        WrdMrg wm = new WrdMrg(fo);\r\n        wm.add(new FileInputStream(""/home/vic/001.docx""));\r\n        wm.add(new FileInputStream(""/home/vic/002.docx""));\r\n        wm.merge();\r\n        wm.close();\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.security.*;\r\nimport java.util.*;\r\nimport org.wildfly.security.credential.*;\r\nimport org.wildfly.security.password.*;\r\nimport org.wildfly.security.password.interfaces.*;\r\nimport org.wildfly.security.password.util.*;\r\nimport org.wildfly.security.credential.store.*;\r\nimport org.wildfly.security.provider.*;\r\n\r\npublic class Sec {\r\n    public static void main(String[] args) throws Exception {\r\n        Provider prv = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(prv);\r\n\r\n        String msk = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        String[] pts = msk.split("";"");\r\n        MaskedPasswordSpec spc = new MaskedPasswordSpec(pts[1].toCharArray(), Integer.parseInt(pts[2]), Base64.getDecoder().decode(pts[0].substring(5)));\r\n        PasswordFactory fac = PasswordFactory.getInstance(MaskedPassword.ALGORITHM_MASKED, prv);\r\n        Password pwd = fac.generatePassword(spc);\r\n\r\n        CredentialStore.ProtectionParameter prm = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(new PasswordCredential(pwd)));\r\n\r\n        CredentialStore cs = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        String dir = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> cfg = new HashMap<>();\r\n        cfg.put(""keyStoreType"", ""JCEKS"");\r\n        cfg.put(""location"", dir + File.separator + ""credentials"" + File.separator + ""csstore.jceks"");\r\n        cfg.put(""modifiable"", ""false"");\r\n        cs.initialize(cfg, prm);\r\n    }\r\n}\r\n""]",0,1
"[""public class MyFrag extends Fragment {\r\n    LinearLayout out;\r\n    Button btn;\r\n    int id = 0;\r\n\r\n    public View onCreateView(LayoutInflater inf, ViewGroup grp, Bundle b) {\r\n        View v = inf.inflate(R.layout.my_frag, grp, false);\r\n        out = v.findViewById(R.id.ll_out);\r\n        btn = v.findViewById(R.id.btn_prd);\r\n        btn.setOnClickListener(x -> addRow());\r\n        return v;\r\n    }\r\n\r\n    void addRow() {\r\n        LinearLayout row = new LinearLayout(getActivity());\r\n        row.setLayoutParams(new LinearLayout.LayoutParams(\r\n                ViewGroup.LayoutParams.MATCH_PARENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT));\r\n        row.setOrientation(LinearLayout.HORIZONTAL);\r\n        row.setId(id++);\r\n\r\n        EditText nm = new EditText(getActivity());\r\n        nm.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        nm.setHint(""Name"");\r\n\r\n        EditText pr = new EditText(getActivity());\r\n        pr.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        pr.setHint(""Price"");\r\n\r\n        EditText sp = new EditText(getActivity());\r\n        sp.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));\r\n        sp.setHint(""Specs"");\r\n\r\n        Button del = new Button(getActivity());\r\n        del.setText(""X"");\r\n        del.setOnClickListener(x -> out.removeView(row));\r\n\r\n        row.addView(nm);\r\n        row.addView(pr);\r\n        row.addView(sp);\r\n        row.addView(del);\r\n        out.addView(row);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.*;\r\nimport java.security.spec.*;\r\nimport javax.crypto.*;\r\nimport javax.crypto.spec.*;\r\nimport org.bouncycastle.openssl.*;\r\nimport org.bouncycastle.openssl.jcajce.*;\r\n\r\npublic class KeyUtil {\r\n    public static PrivateKey getKey(String path, String pwd) throws Exception {\r\n        PEMParser p = new PEMParser(new FileReader(path));\r\n        Object o = p.readObject();\r\n        p.close();\r\n        JcaPEMKeyConverter c = new JcaPEMKeyConverter().setProvider(""BC"");\r\n        if (o instanceof PEMEncryptedKeyPair) {\r\n            PEMDecryptorProvider d = new JcePEMDecryptorProviderBuilder().build(pwd.toCharArray());\r\n            o = ((PEMEncryptedKeyPair) o).decryptKeyPair(d);\r\n        }\r\n        return c.getKeyPair((PEMKeyPair) o).getPrivate();\r\n    }\r\n\r\n    public static byte[] enc(PrivateKey k, byte[] d) throws Exception {\r\n        Cipher c = Cipher.getInstance(""RSA"");\r\n        c.init(Cipher.ENCRYPT_MODE, k);\r\n        return c.doFinal(d);\r\n    }\r\n\r\n    public static byte[] dec(PrivateKey k, byte[] d) throws Exception {\r\n        Cipher c = Cipher.getInstance(""RSA"");\r\n        c.init(Cipher.DECRYPT_MODE, k);\r\n        return c.doFinal(d);\r\n    }\r\n\r\n    public static void main(String[] a) throws Exception {\r\n        PrivateKey k = getKey(""key.pem"", ""pass"");\r\n        byte[] msg = ""Hello"".getBytes(StandardCharsets.UTF_8);\r\n        byte[] en = enc(k, msg);\r\n        byte[] de = dec(k, en);\r\n        System.out.println(new String(de, StandardCharsets.UTF_8));\r\n    }\r\n}\r\n""]",0,1
"[""import javax.servlet.*;\r\nimport javax.servlet.http.*;\r\n\r\npublic class MainSrv extends HttpServlet {\r\n    public void init(ServletConfig cfg) throws ServletException {\r\n        super.init(cfg);\r\n        try {\r\n            conn();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(""Fail to conn"");\r\n        }\r\n    }\r\n\r\n    void conn() throws Exception {\r\n        if (!isUp()) throw new Exception(""No conn"");\r\n    }\r\n\r\n    boolean isUp() {\r\n        return false;\r\n    }\r\n}\r\n""]",0,1
"[""public class App {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            return;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        f();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class App extends Application {\r\n    @Override\r\n    public void start(Stage s) {\r\n        var ta = new TextArea(""?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??"");\r\n        ta.setStyle(""-fx-font-family: 'Noto Color Emoji'; -fx-font-size: 16;"");\r\n        s.setScene(new Scene(new StackPane(ta), 400, 300));\r\n        s.show();\r\n    }\r\n\r\n    public static void main(String[] a) {\r\n        launch(a);\r\n    }\r\n}\r\n""]",0,1
"[""public class PAdp extends RecyclerView.Adapter<PAdp.VH> {\r\n    private final Context ctx;\r\n    private final List<PMod> lst;\r\n    private final int dCol, sCol;\r\n    private final Set<Integer> sel;\r\n\r\n    private static final String P_N = ""PqItm"";\r\n    private static final String S_K = ""PqSel"";\r\n\r\n    public PAdp(Context ctx, List<PMod> lst) {\r\n        this.ctx = ctx;\r\n        this.lst = lst;\r\n        this.sel = new HashSet<>();\r\n\r\n        Resources res = ctx.getResources();\r\n        int m = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        dCol = ContextCompat.getColor(ctx, (m == Configuration.UI_MODE_NIGHT_YES) ? R.color.dD : R.color.dL);\r\n        sCol = ContextCompat.getColor(ctx, (m == Configuration.UI_MODE_NIGHT_YES) ? R.color.sD : R.color.sL);\r\n\r\n        SharedPreferences p = ctx.getSharedPreferences(P_N, Context.MODE_PRIVATE);\r\n        for (String i : p.getStringSet(S_K, new HashSet<>())) sel.add(Integer.parseInt(i));\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public VH onCreateViewHolder(@NonNull ViewGroup p, int v) {\r\n        return new VH(LayoutInflater.from(p.getContext()).inflate(R.layout.pq_l, p, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull VH h, int p) {\r\n        final PMod t = lst.get(p);\r\n        h.cv.setCardBackgroundColor(sel.contains(p) ? sCol : dCol);\r\n        h.cv.setOnClickListener(v -> {\r\n            SharedPreferences e = ctx.getSharedPreferences(P_N, Context.MODE_PRIVATE);\r\n            sel.add(p);\r\n            e.edit().putStringSet(S_K, sel.stream().map(String::valueOf).collect(Collectors.toSet())).apply();\r\n            notifyItemChanged(p);\r\n            Intent i = new Intent(h.cv.getContext(), VPdf.class);\r\n            i.putExtra(""pN"", t.getN());\r\n            i.putExtra(""pU"", t.getU());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            h.cv.getContext().startActivity(i);\r\n        });\r\n        h.t.setText(t.getN());\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return lst.size();\r\n    }\r\n\r\n    public static class VH extends RecyclerView.ViewHolder {\r\n        CardView cv;\r\n        TextView t;\r\n\r\n        public VH(View i) {\r\n            super(i);\r\n            cv = i.findViewById(R.id.pqC);\r\n            t = i.findViewById(R.id.pqT);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""(TestInstance.Lifecycle.PER_CLASS)\r\n@ExtendWith(MockitoExtension.class)\r\nclass ITst {\r\n\r\n    @InjectMocks\r\n    ISvc svc;\r\n\r\n    @Mock\r\n    IRep rep;\r\n\r\n    @Mock\r\n    CRep crep;\r\n\r\n    @Mock\r\n    IDMap map;\r\n\r\n    @Mock\r\n    UriComponentsBuilder ub;\r\n\r\n    @Mock\r\n    UriComponents uc;\r\n\r\n    @Captor\r\n    ArgumentCaptor<Long> lCap;\r\n\r\n    @Captor\r\n    ArgumentCaptor<String> sCap;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n    }\r\n\r\n    @Test\r\n    void tst() {\r\n        ITm itm = new ITm();\r\n        itm.setN(""Test"");\r\n        CData d = new CData(""Test"", ""Desc"", 11L, BigDecimal.TEN, 5);\r\n\r\n        when(rep.findByNIgnoreCase(any())).thenReturn(Optional.of(itm));\r\n\r\n        Exception ex = assertThrows(ICrtEx.class, () -> svc.create(d, ub));\r\n\r\n        assertEquals(""There is an item created with this name"", ex.getMessage());\r\n    }\r\n}\r\n\r\npublic interface IRep extends JpaRepository<ITm, Long> {\r\n    Optional<ITm> findByNIgnoreCase(String n);\r\n}\r\n\r\n@Service\r\npublic class ISvc {\r\n\r\n    private final IRep rep;\r\n    private final CRep crep;\r\n    private final IDMap map;\r\n    private final IImg img;\r\n\r\n    public ISvc(IRep rep, CRep crep, IDMap map, IImg img) {\r\n        this.rep = rep;\r\n        this.crep = crep;\r\n        this.map = map;\r\n        this.img = img;\r\n    }\r\n\r\n    @Transactional\r\n    public CRU create(CData d, UriComponentsBuilder ub) {\r\n        Optional<ITm> f = rep.findByNIgnoreCase(d.n());\r\n\r\n        if (f.isPresent()) throw new ICrtEx(""There is an item created with this name"");\r\n\r\n        return new CRU();\r\n    }\r\n}\r\n""]",0,1
"[""String l = ""Left"";\r\nString r = ""Right"";\r\nString s = l + ""\t\t\t\t\t"" + r;\r\ntextView.setText(s);\r\ntextView.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);\r\n""]",0,1
"[""public String toCsv(DmnRuleTestResult res) {\r\n    List<DmnTestCaseResult> lst = res.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter wr = new CSVWriter(sw, ',', CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, ""\n"")) {\r\n        \r\n        wr.writeNext(new String[]{""testInput"", ""expectedOutput"", ""testOutput"", ""errorMessage""});\r\n        \r\n        for (DmnTestCaseResult r : lst) {\r\n            for (Map<String, Object> out : r.getTestOutput()) {\r\n                wr.writeNext(new String[]{\r\n                    r.getTestInput().toString(),\r\n                    r.getExpectedOutput().toString(),\r\n                    out.toString(),\r\n                    r.getErrorMessage()\r\n                });\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception e) {\r\n        throw new CsvParseException(e.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class Dinic<T> {\r\n    private final Map<String, Map<String, Integer>> net = new HashMap<>();\r\n    private final List<String> nds = new ArrayList<>(List.of(""src"", ""sink""));\r\n    private int[] lvl;\r\n\r\n    private void bfs(String src) {\r\n        lvl = new int[nds.size()];\r\n        Arrays.fill(lvl, -1);\r\n        lvl[nds.indexOf(src)] = 0;\r\n        Queue<String> q = new LinkedList<>();\r\n        q.offer(src);\r\n        while (!q.isEmpty()) {\r\n            String u = q.poll();\r\n            for (var e : net.get(u).entrySet()) {\r\n                String v = e.getKey();\r\n                if (e.getValue() > 0 && lvl[nds.indexOf(v)] == -1) {\r\n                    lvl[nds.indexOf(v)] = lvl[nds.indexOf(u)] + 1;\r\n                    q.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int f, String snk) {\r\n        if (u.equals(snk)) return f;\r\n        for (var e : net.get(u).entrySet()) {\r\n            String v = e.getKey();\r\n            if (e.getValue() > 0 && lvl[nds.indexOf(u)] < lvl[nds.indexOf(v)]) {\r\n                int s = dfs(v, Math.min(f, e.getValue()), snk);\r\n                if (s > 0) {\r\n                    net.get(u).put(v, e.getValue() - s);\r\n                    net.get(v).put(u, net.get(v).getOrDefault(u, 0) + s);\r\n                    return s;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private void add(String f, String t, int c) {\r\n        net.computeIfAbsent(f, k -> new HashMap<>()).put(t, c);\r\n        net.computeIfAbsent(t, k -> new HashMap<>()).put(f, 0);\r\n        if (!nds.contains(f)) nds.add(f);\r\n        if (!nds.contains(t)) nds.add(t);\r\n    }\r\n\r\n    public int run(Map<T, Set<T>> g) {\r\n        Map<String, Integer> idx = new HashMap<>();\r\n        int id = 0;\r\n        for (T t : g.keySet()) {\r\n            String a = ""A"" + t.toString();\r\n            String b = ""B"" + t.toString();\r\n            idx.put(a, id++);\r\n            idx.put(b, id++);\r\n            add(""src"", a, 1);\r\n            add(b, ""sink"", 1);\r\n            for (T n : g.get(t)) add(a, ""B"" + n.toString(), 1);\r\n        }\r\n\r\n        int mf = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (lvl[nds.indexOf(""sink"")] == -1) break;\r\n            int f;\r\n            while ((f = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) mf += f;\r\n        }\r\n        return g.size() - mf;\r\n    }\r\n}\r\n""]",0,1
"[""public class AlrmRcvr extends BroadcastReceiver {\r\n\r\n    @Override\r\n    public void onReceive(Context ctx, Intent it) {\r\n\r\n        Vibrator vib = (Vibrator) ctx.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vib != null && vib.hasVibrator()) {\r\n            vib.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String ttl = it.getStringExtra(""title"");\r\n        String cmt = it.getStringExtra(""comment"");\r\n        Intent actIt = new Intent(ctx, MainActivity.class);\r\n        actIt.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        actIt.putExtra(""stop"", true);\r\n\r\n        PendingIntent penIt = PendingIntent.getActivity(ctx, 0, actIt, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String txt = ""Reminder for: "" + ttl + ""\n"" + ""Comments: "" + cmt;\r\n        NotificationCompat.Builder bld = new NotificationCompat.Builder(ctx, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(ttl)\r\n                .setContentText(txt)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(txt))\r\n                .setContentIntent(penIt)\r\n                .setDeleteIntent(penIt)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat mgr = NotificationManagerCompat.from(ctx);\r\n        mgr.notify(123, bld.build());\r\n\r\n        Uri uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        Ringtone rng = RingtoneManager.getRingtone(ctx, uri);\r\n        rng.play();\r\n\r\n        AlrmSrv.rng = rng;\r\n    }\r\n}\r\n""]",0,1
"[""int[] arr = new int[10];\r\narr[0] = 6;\r\narr[1] = 2;\r\narr[2] = 8;\r\narr[3] = 1;\r\narr[4] = 3;\r\narr[5] = 0;\r\narr[6] = 9;\r\narr[7] = 7;\r\n\r\nSystem.out.print(""Search for? "");\r\nint s = in.nextInt();\r\nboolean found = false;\r\n\r\nfor(int i = 0; i < arr.length; i++) {\r\n    if(s == arr[i]) {\r\n        System.out.println(s + "" is at index "" + i + ""."");\r\n        found = true;\r\n        break;\r\n    }\r\n}\r\n\r\nif(!found) {\r\n    System.out.println(s + "" was not found."");\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Box box = new Box(200, 200, 200);\r\n        box.setTranslateX(300);\r\n        box.setTranslateY(200);\r\n        box.setTranslateZ(100);\r\n\r\n        box.setDrawMode(DrawMode.LINE);\r\n\r\n        box.setOnMouseEntered((MouseEvent e) -> {\r\n            box.setMaterial(new javafx.scene.paint.PhongMaterial(Color.RED));\r\n        });\r\n\r\n        box.setOnMouseExited((MouseEvent e) -> {\r\n            box.setMaterial(null);\r\n        });\r\n\r\n        PerspectiveCamera cam = new PerspectiveCamera(true);\r\n        Scene scene = new Scene(box, 600, 400, true);\r\n        scene.setFill(Color.LIGHTBLUE);\r\n        scene.setCamera(cam);\r\n\r\n        stage.setTitle(""3D Outline Effect"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\nclass Brd {\r\n    public String gss;\r\n\r\n    public String tke() {\r\n        Scanner sc = new Scanner(System.in);\r\n        String gss;\r\n\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        gss = sc.next();\r\n        \r\n        chck(gss);\r\n        \r\n        return gss;\r\n    }\r\n\r\n    public void chck(String gss) {\r\n        boolean isOk = true;\r\n\r\n        if (gss.length() != 5)\r\n            isOk = false;\r\n\r\n        if (!gss.matches(""[a-zA-Z]+""))\r\n            isOk = false;\r\n\r\n        if (!isOk) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n            gss = tke();\r\n        }\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Brd brd = new Brd();\r\n        String guess = brd.tke();\r\n    }\r\n}\r\n""]",0,1
"[""package com.question.controller;\r\n\r\nimport com.question.service.LangService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LangCtrl {\r\n\r\n    private final LangService lService;\r\n\r\n    @Value(""${configuration}"")\r\n    private String config;\r\n\r\n    public LangCtrl(@Qualifier(""french"") LangService lService) {\r\n        this.lService = lService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String tst(@RequestParam String name) {\r\n        return lService.proc(name);\r\n    }\r\n}\r\n""]",0,1
"["" interface MMapper {\r\n\r\n    @Mapping(target = ""agentName"", source = ""agentName"")\r\n    @Mapping(target = ""agentIdentityType"", source = ""agentIdentityType"")\r\n    @Mapping(target = ""agentIdentityNo"", source = ""agentIdentityNo"")\r\n    @Mapping(target = ""agentIdentityExpireAt"", source = ""agentIdentityExpireAt"")\r\n    AgentInfo toAgentInfo(WealthProdAccountInfoDTO dto);\r\n\r\n    default AgentInfo toAgentInfoWithNullCheck(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) {\r\n            return null;\r\n        }\r\n        if (dto.getAgentName() == null && dto.getAgentIdentityType() == null && \r\n            dto.getAgentIdentityNo() == null && dto.getAgentIdentityExpireAt() == null) {\r\n            return null;\r\n        }\r\n        return toAgentInfo(dto);\r\n    }\r\n}\r\n""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n    \r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n    \r\n    BufferedReader br = new BufferedReader(filObj);\r\n    \r\n    List<String> hdr = new ArrayList<String>();\r\n    List<HashMap<String, String>> tbl = new ArrayList<HashMap<String, String>>();\r\n    \r\n    String line = null;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            hdr = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> rec = new HashMap<String, String>();\r\n            int idx = 0;\r\n            for (String each : line.split("","")) {\r\n                rec.put(hdr.get(idx), each);\r\n                idx++;\r\n            }\r\n            tbl.add(rec);\r\n        }\r\n        ext++;\r\n    }\r\n    System.out.println(""My Table:"" + tbl);\r\n}\r\n""]",0,1
"["" class TMPFilter implements WebFilter {\r\n    private long reqTime = System.nanoTime();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange ex, WebFilterChain chain) {\r\n        long deltaTime = System.nanoTime() - reqTime;\r\n        ex.getResponse().getHeaders().add(""server-timing-test"", ""test"");\r\n        System.out.println(deltaTime);\r\n        return chain.filter(ex)\r\n                .doOnRequest(req -> {\r\n                    reqTime = System.nanoTime();\r\n                })\r\n                .doOnSuccess(arg -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-success"", Long.toString(delta));\r\n                })\r\n                .doOnError((arg) -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-error"", Long.toString(delta));\r\n                })\r\n                .doFinally((arg) -> {\r\n                    long delta = System.nanoTime() - reqTime;\r\n                    ex.getResponse().getHeaders().set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata = {\r\n    'TradeID': ['aaa', 'bbb', 'ccc'],\r\n    'TradeDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'Commodity': ['(com1,com2)', '(com1,com2)', '(com1,com2)'],\r\n    'StartDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'ExpiryDate': ['01/01/2024', '01/01/2024', '01/01/2024'],\r\n    'FixedPrice': [10, 10, 10],\r\n    'Quantity': [10, 10, 10],\r\n    'MTMValue': [100.00, 100.00, 100.00]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\nfprice = df.groupby(['StartDate', 'Commodity', 'DealType'], as_index=False).apply(\r\n    lambda group: -(group['MTMValue'].sum() - (group['FixedPrice'] * group['Quantity']).sum()) / group['Quantity'].sum()\r\n).reset_index(name='FloatPrice')\r\n\r\nprint(fprice)\r\n""]",0,1
"[""from sqlalchemy import create_engine, Column, Integer, String\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\nBase = declarative_base()\r\n\r\nclass Pet(Base):\r\n    __tablename__ = 'pets'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    age = Column(Integer)\r\n\r\nengine = create_engine('sqlite:///:memory:')\r\nBase.metadata.create_all(engine)\r\n\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nnew_pet = Pet(name='Buddy', age=5)\r\nsession.add(new_pet)\r\nsession.commit()\r\n\r\npet = session.query(Pet).first()\r\nprint(pet.name, pet.age)\r\n""]",0,1
"[""import sys\r\n\r\nprint(sys.getsizeof(''))\r\nprint(sys.getsizeof('H'))\r\nprint(sys.getsizeof('Hi'))\r\nprint(sys.getsizeof('ÃÂÃÂÃÂ¢ÃÂÃÂ'))\r\nprint(sys.getsizeof('ÃÂÃÂÃÂ¢ÃÂÃÂl'))\r\n""]",0,1
"[""import openai\r\nimport os\r\n\r\nopenai.api_key = os.getenv(""OPENAI_API_KEY"")\r\n\r\ndef upload_pdf(file_path):\r\n    with open(file_path, ""rb"") as file:\r\n        response = openai.File.create(\r\n            file=file,\r\n            purpose='answers'\r\n        )\r\n    return response['id']\r\n\r\ndef create_assistant(file_id):\r\n    response = openai.Assistant.create(\r\n        model=""gpt-4-1106-preview"",\r\n        tools=[{""type"": ""code_interpreter""}],\r\n        file_ids=[file_id]\r\n    )\r\n    return response\r\n\r\ndef main():\r\n    file_path = ""example.pdf""\r\n    file_id = upload_pdf(file_path)\r\n    assistant = create_assistant(file_id)\r\n    print(assistant)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import cv2 as cv\r\nimport numpy as np\r\n\r\nsrc = cv.imread(""boston_cooking_a.jpg"", cv.IMREAD_GRAYSCALE)\r\nthresh = cv.adaptiveThreshold(src, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 55, 11)\r\ndil = cv.dilate(thresh, cv.getStructuringElement(cv.MORPH_RECT, (3, 3)))\r\nero = cv.erode(dil, cv.getStructuringElement(cv.MORPH_RECT, (50, 3)))\r\ngrad = cv.Sobel(ero, cv.CV_8U, 0, 1, ksize=5)\r\nlines = cv.HoughLinesP(grad, 1, np.pi / 180, threshold=100, minLineLength=200, maxLineGap=10)\r\n\r\nfor line in lines:\r\n    x1, y1, x2, y2 = line[0]\r\n    cv.line(src, (x1, y1), (x2, y2), (0, 0, 255), 2)\r\n\r\ncv.imwrite(""output.jpg"", src)\r\ncv.imshow(""output"", src)\r\ncv.waitKey(0)\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef nrng():\r\n    nums = np.arange(1, 10.5, 0.5)\r\n    i = 0\r\n    while True:\r\n        yield nums[i % len(nums)]\r\n        i += 1\r\n\r\nrng = lambda : np.random.randint(2,20)//2\r\nn_rng = nrng()\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', next(n_rng))\r\n""]",0,1
"[""# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_sess():\r\n    return ""db_session""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef df():\r\n    return ""dataframe""\r\n\r\n# test_a.py\r\ndef test_a(db_sess, df):\r\n    assert db_sess == ""db_session""\r\n    assert df == ""dataframe""\r\n\r\n# test_b.py\r\ndef test_b(db_sess, df):\r\n    assert db_sess == ""db_session""\r\n    assert df == ""dataframe""\r\n""]",0,1
"[""from sqlalchemy.future import select\r\n\r\nquery = (\r\n    select(\r\n        models.Payment.organization_id,\r\n        models.Payment.id,\r\n        models.Payment.payment_type,\r\n    )\r\n    .where(\r\n        models.Payment.is_cleared.is_(True),\r\n    )\r\n    .limit(10)\r\n)\r\n\r\nresult = await self.session.execute(query)\r\n\r\nrows = result.fetchall()\r\ndata = [row._asdict() for row in rows]\r\n\r\nreturn data\r\n""]",0,1
"[""import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        await asyncio.sleep(1)\r\n        print(""This line is executed after the await"")  \r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""# user.py\r\nfrom typing import List, TYPE_CHECKING, Optional\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    age: Optional[int]\r\n    bought_items: List[""Item""] = []\r\n\r\n# item.py\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\n\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Dict, Callable\r\n\r\ndef mydec(cls):\r\n    setattr(cls, 'save', lambda self: print('Saved'))\r\n    setattr(cls, 'my_dict', {'a': 'str'})\r\n    return cls\r\n\r\n@mydec\r\n@dataclass\r\nclass A:\r\n    a: str = """"\r\n\r\ndef main():\r\n    a = A()\r\n    a.save()\r\n    print(a.my_dict)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guar_vals(A_eq, b_eq, n):\r\n    c = np.zeros(n)\r\n    bounds = [(0, 1)] * n\r\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n    if not res.success:\r\n        return [], []\r\n\r\n    sol = np.round(res.x).astype(int)\r\n    guaranteed_ones = [i for i in range(n) if sol[i] == 1]\r\n    guaranteed_zeros = [i for i in range(n) if sol[i] == 0]\r\n    return guaranteed_zeros, guaranteed_ones\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],\r\n    [1, 0, 0, 1],\r\n    [1, 1, 0, 0]\r\n])\r\n\r\nb_eq = np.array([2, 1, 1])\r\nn = 4\r\n\r\nguar_zeros, guar_ones = find_guar_vals(A_eq, b_eq, n)\r\n\r\nprint(f""Guaranteed zeros: {guar_zeros}"")\r\nprint(f""Guaranteed ones: {guar_ones}"")\r\n""]",0,1
"[""def make_pt(pt):\r\n    match pt:\r\n        case (x, y):\r\n            return Point2d(x, y)\r\n        case _:\r\n            raise TypeError(""not a point we support"")\r\n\r\nsp = match name:\r\n    case ""John"":\r\n        ""Jane""\r\n    case ""David"":\r\n        ""Alice""\r\nprint(sp)\r\n""]",0,1
"[""from pathlib import Path\r\nfrom yolov5 import YOLOv5\r\n\r\ndef load_model(path):\r\n    return YOLOv5(path)\r\n\r\ndef train_model(model, data_path, imgsz):\r\n    model.train(data=data_path, imgsz=imgsz)\r\n\r\ndef detect(model, img_path):\r\n    return model(img_path)\r\n\r\nmodel = load_model('yolov5s.pt')\r\ntrain_model(model, Path('data/custom'), 640)\r\ndetect(model, 'path/to/image.jpg')\r\n""]",0,1
"[""from pathlib import Path\r\nimport torch\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\n\r\ndef load_mod(path):\r\n    return AutoModelForCausalLM.from_pretrained(path, torch_dtype=torch.float32)\r\n\r\ndef load_tok(path):\r\n    return AutoTokenizer.from_pretrained(path)\r\n\r\ndef infer(mod, tok, prompt):\r\n    inputs = tok(prompt, return_tensors=""pt"")\r\n    outputs = mod.generate(inputs['input_ids'])\r\n    return tok.decode(outputs[0])\r\n\r\nmod = load_mod(Path('path/to/gguf/model'))\r\ntok = load_tok(Path('path/to/gguf/tokenizer'))\r\nres = infer(mod, tok, ""Hello, world!"")\r\nprint(res)\r\n""]",0,1
"[""class Rect {\r\n    constructor(l, w) {\r\n        this.name = ""Rect"";\r\n        this.l = l;\r\n        this.w = w;\r\n    }\r\n\r\n    shout() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.l * this.w}`\r\n        );\r\n    }\r\n\r\n    hello() {\r\n        return ""Rect: hello"";\r\n    }\r\n}\r\n\r\nclass Squa extends Rect {\r\n    constructor(l) {\r\n        super(l, l);\r\n        this.name = ""Squa"";\r\n    }\r\n\r\n    sqHello() {\r\n        const h = super.hello();\r\n        return ""Squa:"" + h.split("":"")[1];\r\n    }\r\n}\r\n\r\nconst r = new Rect(6, 4);\r\nr.shout();\r\n\r\nconst s = new Squa(5);\r\ns.shout();\r\n\r\nconsole.log(s.sqHello());\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\ndef fill_na(df):\r\n    cols = [col for col in df.columns if not col.endswith('_a')]\r\n    for col in cols:\r\n        df[col] = df[col].fillna(df[f'{col}_a'])\r\n    return df\r\n\r\ndf = fill_na(df)\r\nprint(df)\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\nid = ['a','b','c','a','b','e','f','a','b','k']\r\nvalue = [12,14,3,13,16,7,4,6,10,18]\r\n\r\ndf = pd.DataFrame({'id':id, 'value':value})\r\n\r\ndf['cum'] = df.groupby('id')['value'].apply(lambda x: x[::-1].cumsum()[::-1])\r\ndf['desired'] = df['cum'].where(~df['id'].duplicated(), np.nan)\r\n\r\ndf['desired'] = df['desired'].fillna(method='ffill')\r\nprint(df)\r\n""]",0,1
"[""from elasticsearch import Elasticsearch\r\n\r\nes_host = '<host>'\r\nes_port = '<port>'\r\nes_user = '<user>'\r\nes_pass = '<pass>'\r\nes_idx = '<index>'\r\n\r\nes = Elasticsearch(\r\n    [{'host': es_host, 'port': es_port}],\r\n    http_auth=(es_user, es_pass),\r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_idx)\r\n""]",0,1
"[""import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        if value == ""ab"":\r\n            return cls.ab\r\n        if value == ""cd"":\r\n            return cls.cd\r\n        return super()._missing_(value)\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${workspaceFolder}/your_script.py"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""cwd"": ""${workspaceFolder}/path_to_data_dirs"",\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter data directory name""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""import numpy as np\r\nimport time\r\n\r\ns = 3000\r\n\r\net1 = []\r\net2 = []\r\n\r\nn = 50\r\nfor _ in range(n):\r\n    a = np.random.rand(s, s)\r\n    st = time.time()\r\n    r1 = np.matmul(a, a)\r\n    et1.append(time.time() - st)\r\n\r\nfor _ in range(n):\r\n    b = np.random.rand(s, s)\r\n    st = time.time()\r\n    r2 = np.matmul(b, b.T)\r\n    et2.append(time.time() - st)\r\n\r\navg1 = np.mean(et1)\r\navg2 = np.mean(et2)\r\n\r\nprint(f""Avg time A @ A: {avg1}"")\r\nprint(f""Avg time B @ B.T: {avg2}"")\r\n\r\nimport matplotlib.pyplot as plt\r\nplt.plot(range(n), et1, label='A @ A')\r\nplt.plot(range(n), et2, label='B @ B.T')\r\nplt.xlabel('Iteration')\r\nplt.ylabel('Execution Time')\r\nplt.title('Matrix Multiplication Time Comparison')\r\nplt.legend()\r\nplt.show()\r\n\r\nnp.show_config()\r\n""]",0,1
"[""from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.output_parsers import StrOutputParser\r\nfrom langchain.callbacks import get_openai_callback\r\n\r\nprompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\nmodel = ChatOpenAI(verbose=True)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\ncallback = get_openai_callback()\r\nchain.invoke({""topic"": ""ice cream""}, callbacks=[callback])\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata = {\r\n    'Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ncols_tp = [col for col in df.columns if 'TP' in col]\r\ncols_vr = [col for col in df.columns if 'VReal' in col]\r\ncols_tv = [col for col in df.columns if 'TiV' in col]\r\n\r\nresult = pd.DataFrame({\r\n    'ID': [1, 2, 3],\r\n    'Price': df[cols_tp].values[0],\r\n    'Net': df[cols_vr].values[0],\r\n    'Range': df[cols_tv].values[0]\r\n})\r\n\r\nprint(result)\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""A"": [""foo"", ""ham"", ""spam"", ""egg""],\r\n        ""L"": [""A54"", ""A12"", ""B84"", ""C12""],\r\n        ""G"": [""X34"", ""C84"", ""G96"", ""L6""],\r\n    }\r\n)\r\n\r\ndf = df.with_columns(\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""L""))\r\n    .alias(""L""),\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""G""))\r\n    .alias(""G"")\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""import numpy as np\r\nfrom time import time\r\n\r\ndef cmp(do_cache: bool, arr_sz: int, n_arr: int, n_iter: int):\r\n    arrs = {i: np.random.rand(arr_sz) for i in range(n_arr)}\r\n\r\n    if do_cache:\r\n        cache = {}\r\n\r\n    for _ in range(n_iter):\r\n        i, j = np.random.randint(n_arr, size=2)\r\n\r\n        if do_cache and (i, j) in cache:\r\n            _ = cache[(i, j)]\r\n        else:\r\n            _ = arrs[i] + arrs[j]\r\n            if do_cache:\r\n                cache[(i, j)] = _\r\n\r\n%timeit cmp(do_cache=False, arr_sz=10000, n_arr=100, n_iter=1000)\r\n%timeit cmp(do_cache=True, arr_sz=10000, n_arr=100, n_iter=1000)\r\n""]",0,1
"[""import asyncio\r\nimport os\r\nfrom PIL import Image\r\nfrom tqdm import tqdm\r\nimport genai\r\n\r\nmodel = genai.GenerativeModel('gemini-pro-vision', safety_settings=safety_settings)\r\n\r\ndef process_img(img_path):\r\n    img = Image.open(img_path)\r\n    return img\r\n\r\nasync def fetch_data(batch):\r\n    tasks = []\r\n    for img_path in batch:\r\n        tasks.append(process_img(img_path))\r\n    return await asyncio.gather(*tasks)\r\n\r\nasync def main():\r\n    imgs = [os.path.join(image_dir, img) for img in os.listdir(image_dir)]\r\n    batch_size = 60\r\n    for i in tqdm(range(0, len(imgs), batch_size)):\r\n        batch = imgs[i:i+batch_size]\r\n        img_data = await fetch_data(batch)\r\n        \r\n        prompts = [""Carefully scan this images: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'."" for _ in img_data]\r\n        responses = await asyncio.gather(*[model.generate_content([prompt, img]) for prompt, img in zip(prompts, img_data)])\r\n\r\n        for res in responses:\r\n            print(res.text)\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef ijRev(i, j, rows, cols):\r\n    r = i + j\r\n    if r >= cols:\r\n        return rows - 1 - (r - cols), cols - 1 - j\r\n    return i, j\r\n\r\ndef rev_anti_diag(arr):\r\n    rows, cols = arr.shape\r\n    rev_arr = np.empty_like(arr)\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            rev_i, rev_j = ijRev(i, j, rows, cols)\r\n            rev_arr[rev_i, rev_j] = arr[i, j]\r\n    return rev_arr\r\n\r\nsrcArr = np.array([[ 1,  2,  4],\r\n                   [ 3,  5,  7],\r\n                   [ 6,  8, 10],\r\n                   [ 9, 11, 13],\r\n                   [12, 14, 15]])\r\n\r\nrev_arr = rev_anti_diag(srcArr)\r\nprint(rev_arr)\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Form, Depends, status\r\nfrom fastapi.responses import RedirectResponse\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass FormData(BaseModel):\r\n    text: str\r\n\r\n@app.get('/', name='homepage')\r\nasync def get_main(request: Request, msg: Optional[str] = None, result: Optional[str] = None):\r\n    if msg:\r\n        response = {""msg"": msg}\r\n    elif result:\r\n        response = {""result"": result}\r\n    else:\r\n        response = {}\r\n    return response\r\n\r\n@app.post('/')\r\nasync def post_main(request: Request, file: FormData = Depends(FormData.as_form)):\r\n    if condition:\r\n        trans = ""some_transformed_data""\r\n        return RedirectResponse(app.url_path_for('homepage'), status_code=status.HTTP_303_SEE_OTHER)\r\n    err = ""some_error""\r\n    return RedirectResponse(app.url_path_for('homepage'), status_code=status.HTTP_303_SEE_OTHER)\r\n""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom shapely.geometry import Point, Polygon\r\nfrom scipy.spatial import Delaunay\r\n\r\nlabels = ['Fe', 'Fe3O4', 'FeS', 'Fe2O3', 'FeS2', 'FeSO4', 'Fe2(SO4)3']\r\ncolors = ['#660066', '#b6fcd5', '#ff7f50', '#ffb6c1', '#c6e2ff', '#d3ffce', '#8a2be2']\r\npolygons = []\r\npolygons.append(Polygon([(-26.7243,-14.7423), (-26.7243,-30.0000), (-40.0000,-30.0000), (-40.0000,-28.0181)]))\r\npolygons.append(Polygon([(-18.1347,-0.4263), (-16.6048,1.6135), (-16.6048,-30.0000), (-26.7243,-30.0000), (-26.7243,-14.7423), (-18.1347,-0.4263)]))\r\npolygons.append(Polygon([(-18.1347,-0.4263), (-26.7243,-14.7423), (-40.0000,-28.0181), (-40.0000,-22.2917), (-18.1347,-0.4263)]))\r\npolygons.append(Polygon([(0.0000,-20.2615), (0.0000,-30.0000), (-16.6048,-30.0000), (-16.6048,1.6135), (-16.5517,1.6865), (-6.0517,-0.9385), (0.0000,-3.9643)]))\r\npolygons.append(Polygon([(-14.2390,10.0000), (-14.5829,7.5927), (-16.5517,1.6865), (-16.6048,1.6135), (-18.1347,-0.4263), (-40.0000,-22.2917), (-40.0000,10.0000)]))\r\npolygons.append(Polygon([(-6.0517,-0.9385), (-16.5517,1.6865), (-14.5829,7.5927), (-6.0517,-0.9385)]))\r\npolygons.append(Polygon([(0.0000,-3.9643), (-6.0517,-0.9385), (-14.5829,7.5927), (-14.2390,10.0000), (0.0000,10.0000)]))\r\n\r\nx_grid = np.arange(-40., 0.01, 1.)\r\ny_grid = np.arange(-30., 10.01, 1.)\r\nxy_grid = np.array(np.meshgrid(x_grid, y_grid)).T.reshape(-1, 2).tolist()\r\ndata = []\r\nfor coords in xy_grid:\r\n    point = Point(coords)\r\n    for i, poly in enumerate(polygons):\r\n        if poly.buffer(1e-3).contains(point):\r\n            data.append({\r\n                'x': point.x,\r\n                'y': point.y,\r\n                'label': labels[i],\r\n                'color': colors[i]\r\n            })\r\n            break\r\ndf = pd.DataFrame(data)\r\n\r\nplt.figure(figsize=(8, 8))\r\nfor color in df.color.unique():\r\n    df_color = df[df.color == color]\r\n    plt.scatter(\r\n        x=df_color.x,\r\n        y=df_color.y,\r\n        c=color,\r\n        s=100,\r\n        label=df_color.label.iloc[0]\r\n    )\r\n\r\npoints = df[['x', 'y']].values\r\ntri = Delaunay(points)\r\n\r\nfor simplex in tri.simplices:\r\n    pts = points[simplex]\r\n    plt.plot(pts[:, 0], pts[:, 1], 'k-', lw=0.5)\r\n\r\nplt.xlim([-40., 0.])\r\nplt.ylim([-30., 10.])\r\nplt.xlabel('Log pO2(g)')\r\nplt.ylabel('Log pSO2(g)')\r\nplt.legend(bbox_to_anchor=(1.05, 1.))\r\nplt.show()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef fix(df):\r\n    mask = (pl.col('value').is_null()) & (pl.col('quantity') == 0)\r\n    return df.with_columns([\r\n        pl.when(mask).then(0).otherwise(pl.col(col)).alias(col)\r\n        for col in df.columns if col != 'item' and col != 'quantity'\r\n    ])\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ndf = fix(df)\r\n""]",0,1
"[""import os\r\nfrom fastapi import FastAPI, Depends, HTTPException, Security\r\nfrom fastapi.security.api_key import APIKeyHeader\r\nfrom fastapi.routing import APIRouter\r\n\r\nAPI_KEY = ""your-api-key""\r\napi_key_header_auth = APIKeyHeader(name=""X-API-KEY"")\r\nenv = os.getenv(""ENV"", ""localhost"")\r\n\r\nasync def api_key_func(api_key_header: str = Security(api_key_header_auth)):\r\n    if env != ""localhost"" and api_key_header != API_KEY:\r\n        raise HTTPException(\r\n            status_code=401,\r\n            detail=""Invalid API Key"",\r\n        )\r\n\r\nrouter = APIRouter(\r\n    prefix=""/v2/test"",\r\n    tags=[""helloWorld""],\r\n    dependencies=[Depends(api_key_func)],\r\n    responses={404: {""description"": ""Not found""}},\r\n)\r\n\r\napp = FastAPI()\r\napp.include_router(router)\r\n""]",0,1
"[""from pydantic import BaseModel\r\nclass SFId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\nclass Mdl(BaseModel):\r\n    id: SFId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {\r\n            SFId: lambda v: str(v)\r\n        }\r\n""]",0,1
"[""from sqlmodel import SQLModel, Field, Relationship\r\nfrom sqlalchemy.orm import relationship\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: int = Field(default=None, foreign_key=""node.id"")\r\n    \r\n    parent: ""Node"" = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": [id]})\r\n    children: list[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef create_node(session, data, parent=None):\r\n    node = Node(data=data, parent=parent)\r\n    session.add(node)\r\n    session.commit()\r\n    session.refresh(node)\r\n    return node\r\n""]",0,1
"[""from datetime import date\r\nfrom pydantic import BaseModel, field_validator\r\n\r\nclass CustomDate(date):\r\n    POTENTIAL_FORMATS = []\r\n\r\n    @classmethod\r\n    def validate(cls, v, field):\r\n        if isinstance(v, date):\r\n            return v\r\n        return to_date(field.name, v, cls.POTENTIAL_FORMATS, return_str=False)\r\n\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(cls, source, handler):\r\n        return handler.general_plain_validator_function(cls.validate)\r\n\r\n\r\ndef custom_date(formats):\r\n    def validate_date(v, field):\r\n        if isinstance(v, date):\r\n            return v\r\n        return to_date(field.name, v, formats, return_str=False)\r\n    return field_validator(validate_date)\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: CustomDate\r\n    dt2: custom_date(['%Y-%m-%d', '%Y/%m/%d'])\r\n""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\n\r\ndef check_overflow(lst, dtype):\r\n    try:\r\n        return pd.Series(lst, dtype=dtype)\r\n    except OverflowError:\r\n        raise ValueError(f""Overflow error for dtype {dtype}"")\r\n\r\nlst = [2**31-1]\r\nser = check_overflow(lst, 'int32')\r\nser = ser + 1\r\n\r\nif ser.dtype == 'int32' and (ser < np.iinfo(np.int32).min or ser > np.iinfo(np.int32).max).any():\r\n    raise ValueError(""Overflow occurred after operation"")\r\n""]",0,1
"[""# app\r\ndef build_db(name: str):\r\n    def close():\r\n        return build_singleton_whatever(MongoClient, args....)\r\n    return close\r\n\r\n# endpoint\r\n@app.post(""/notification/feed"")\r\nasync def route_receive_notifications(db: Database = Depends(build_db(""someDB""))):\r\n    ...\r\n\r\n# pytest\r\ndef mock_db(*args):\r\n    def close():\r\n        return 'mock_db'\r\n    return close\r\n\r\nfastapi_app.dependency_overrides[build_db] = mock_db\r\n""]",0,1
"[""import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        outname = os.path.join(dir, 'out.jpg')\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n        \r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n""]",0,1
"[""class Pt:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        self._val = (x, y)\r\n\r\n    def __repr__(self):\r\n        return f""Pt({self.x}, {self.y})""\r\n\r\n    def __iter__(self):\r\n        return iter(self._val)\r\n\r\np = Pt(4, 5)\r\nmy_x = p.x\r\nmy_tuple = p\r\n""]",0,1
"[""import numpy as np\r\nfrom numba import njit\r\n\r\n@njit\r\ndef calc_y(z, x_size, z_size):\r\n    y = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for i in range(z_size):\r\n        for j in range(x_size):\r\n            y[j, i] = np.argmin(np.abs(z[j] - i))\r\n    return y\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = calc_y(z_coordinates, x_size, z_size)\r\n""]",0,1
"[""import polars as pl\r\n\r\nCOL_VALUE = ""value""\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\n\r\nsum_lower = (\r\n    df.with_columns(\r\n        pl.col(COL_VALUE).rank(reverse=True, method=""average"")\r\n        .alias(""rank"")\r\n    )\r\n    .join(df, on=""rank"", how=""left"")\r\n    .with_columns(\r\n        pl.col(COL_VALUE).apply(lambda x: sum(df[COL_VALUE] < x)).alias(""sum_lower"")\r\n    )\r\n)\r\n\r\nmax_other = df.with_columns(\r\n    pl.col(COL_VALUE).apply(lambda x: max(df[COL_VALUE] - x)).alias(""max_other"")\r\n)\r\n\r\ndf = df.join(sum_lower, on=COL_VALUE).join(max_other, on=COL_VALUE)\r\n\r\nprint(df)\r\n""]",0,1
"[""from collections import deque\r\n\r\nclass Sub:\r\n    def __init__(self, prev=None, s=0, e=0, diff=0):\r\n        self.prev = prev\r\n        self.s = s\r\n        self.e = e\r\n        self.diff = diff\r\n\r\ndef part(nums, mn, mx):\r\n    n = len(nums)\r\n    dp = [None] * (n + 1)\r\n    dp[0] = Sub()\r\n\r\n    for i in range(1, n + 1):\r\n        for j in range(mn, mx + 1):\r\n            if i - j >= 0:\r\n                sub = dp[i - j]\r\n                if sub:\r\n                    diff = max(nums[i - j:i]) - min(nums[i - j:i])\r\n                    new_diff = sub.diff + diff\r\n                    if dp[i] is None or new_diff > dp[i].diff:\r\n                        dp[i] = Sub(sub, i - j, i - 1, new_diff)\r\n\r\n    return dp[n]\r\n\r\nnum\r\n""]",0,1
"[""from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline\r\nimport torch\r\n\r\ndef custom_pipeline(model_name):\r\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\r\n    model = AutoModelForSequenceClassification.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)\r\n\r\n    def predict(texts):\r\n        tokenized = tokenizer(texts, padding=True, truncation=True, return_tensors='pt')\r\n        with torch.no_grad():\r\n            outputs = model(**tokenized)\r\n            logits = outputs.logits\r\n        return logits\r\n\r\n    return predict\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\nmodel_name = ""distilbert-base-uncased-finetuned-sst-2-english""\r\npipe = cust\r\n""]",0,1
"[""import geopandas as gpd\r\nimport requests\r\nimport zipfile\r\nimport io\r\n\r\ndef download_map(url, extract_to):\r\n    r = requests.get(url)\r\n    with zipfile.ZipFile(io.BytesIO(r.content)) as zip_ref:\r\n        zip_ref.extractall(extract_to)\r\n\r\ndef load_world_map():\r\n    url = ""https://www.naturalearthdata.com/http//www.naturalearthdata.com/downloads/110m-cultural-vectors/countries-110m.zip""\r\n    extract_to = ""./data""\r\n    download_map(url, extract_to)\r\n    world = gpd.read_file(f""{extract_to}/ne_110m_admin_0_countries.shp"")\r\n    return world\r\n\r\nworld = load_world_map()\r\nprint(world.head())\r\n""]",0,1
"[""from fastapi import FastAPI\r\nfrom contextlib import asynccontextmanager\r\n\r\n# --- main app ---\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\n# --- sub app ---\r\n\r\nsub_app = FastAPI()\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\n@asynccontextmanager\r\nasync def sub_lifespan(_):\r\n    print(""sub startup"")\r\n    yield\r\n    print(""sub shutdown"")\r\n\r\nsub_app = FastAPI(lifespan=sub_lifespan)\r\n\r\napp.mount(""/sub"", sub_app)\r\n\r\n""]",0,1
"[""from pyspark.sql import SparkSession\r\nfrom pyspark.sql import functions as F\r\nfrom pyspark.sql.window import Window\r\n\r\nspark = SparkSession.builder.master(""local"").appName(""WindowExample"").getOrCreate()\r\n\r\ndata = [(1, ""A"", 10), (2, ""B"", 20), (3, ""C"", 30), (4, ""D"", 40)]\r\ndf = spark.createDataFrame(data, [""id"", ""name"", ""value""])\r\n\r\nwindow_spec = Window.orderBy(""id"")\r\n\r\ndf_with_sum = df.withColumn(""sum_value"", F.sum(""value"").over(window_spec.rowsBetween(Window.unboundedPreceding, Window.currentRow)))\r\ndf_with_sum.show()\r\n\r\ndf_with_sum_all = df.withColumn(""sum_value_all"", F.sum(""value"").over(window_spec.rowsBetween(Window.unboundedPreceding, Window.unboundedFollowing)))\r\ndf_with_sum_all.show()\r\n\r\ndf_with_current = df.withColumn(""current_row_sum"", F.sum(""value"").over(window_spec.rowsBetween(Window.currentRow, Window.curr\r\n""]",0,1
"[""from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nimport joblib\r\n\r\napp = FastAPI()\r\n\r\nmodel = joblib.load(""model.joblib"")\r\n\r\ndef to_mongo(r: dict):\r\n    client = pymongo.MongoClient(""mongodb://mongo:27017"")\r\n    db = client[""models""]\r\n    col = db[""example-model""]\r\n    col.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict(features: List[float]):\r\n    pred = model.predict(pd.DataFrame([features], columns=model.feature_names_in_))\r\n    res = {""predictions"": pred.tolist()}\r\n    to_mongo(res)\r\n    return res\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef rd_json(pth: str):\r\n    df = pl.read_json(pth)\r\n    return df.with_columns(\r\n        pl.col(""date"").str.to_date(),\r\n        pl.col(""fillingDate"").str.to_date(),\r\n        pl.col(""acceptedDate"").str.to_date()\r\n    )\r\n\r\ndf1 = rd_json('../AAPL/single_statements/1985-09-30-quarterly_balance.json')\r\ndf2 = rd_json('../AAPL/single_statements/1986-09-30-quarterly_balance.json')\r\n\r\ndf = pl.concat([df1, df2]).sort(""date"")\r\n""]",0,1
"[""from icu import Collator, Locale\r\n\r\nloc1 = Locale(""en_US.UTF-8"")\r\nloc2 = Locale(""fa_IR.UTF-8"")\r\ncol1 = Collator.createInstance(loc1)\r\ncol2 = Collator.createInstance(loc2)\r\n\r\ndef key(s):\r\n    key1 = col1.getSortKey(s)\r\n    key2 = col2.getSortKey(s)\r\n    return (key1, key2)\r\n\r\nmylist.sort(key=key)\r\n""]",0,1
"[""import numpy as np\r\nfrom cython.parallel import prange\r\nimport cython\r\nfrom cython import boundscheck, wraparound\r\nfrom concurrent.futures import ThreadPoolExecutor\r\n\r\n@cython.boundscheck(False)\r\n@cython.wraparound(False)\r\ndef parallel_sort(arr):\r\n    n = len(arr)\r\n    chunk_size = n // 4\r\n    with ThreadPoolExecutor(max_workers=4) as executor:\r\n        futures = [executor.submit(np.sort, arr[i:i+chunk_size]) for i in range(0, n, chunk_size)]\r\n        results = [f.result() for f in futures]\r\n    return np.concatenate(results)\r\n\r\narr = np.random.randint(0, 2**64, int(3e8), dtype='uint64')\r\nsorted_arr = parallel_sort(arr)\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):\r\n    a: int\r\n\r\n@dataclass\r\nclass Outer:\r\n    hasa: HasA\r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n""]",0,1
"[""import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef chk(a: NDArray[np.float64]) -> NDArray[np.float64]:\r\n    return a * 2\r\n\r\nx: np.ndarray[np.float64] = np.array([1.0, 2.0, 3.0])\r\ny = chk(x)\r\nprint(y)\r\n\r\nt1: np.ndarray[Any, np.dtype[Any]] = np.array([1, 2, 3])\r\nt2: np.ndarray[np.float64] = np.array([1.0, 2.0, 3.0])\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef mk_df(n):\r\n    dt = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    dat = {\r\n        'dt': np.random.choice(dt, n),\r\n        'cat': np.random.choice(['A', 'B', 'C', 'D'], n),\r\n        'sub': np.random.choice(['X', 'Y', 'Z'], n),\r\n        'val': np.random.rand(n) * 100\r\n    }\r\n    df = pd.DataFrame(dat).sort_values('dt')\r\n    return pl.from_pandas(df)\r\n\r\ndf = mk_df(1000000)\r\n\r\ndf = df.with_columns(pl.col('dt').cast(pl.Datetime))\r\ndf = df.group_by(['cat', 'sub']).agg(\r\n    pl.col('dt').min().alias('dt_min')\r\n).join(df, on=['cat', 'sub'])\r\ndf = df.group_by_dynamic('dt', every='1w', closed='right').agg(\r\n    pl.col('val').sum().alias('val_sum'),\r\n    pl.col('val').mean().alias('val_avg'),\r\n    pl.col('val').max().alias('val_max'),\r\n    pl.col('val').min().alias('val_min')\r\n)\r\n""]",0,1
"[""jobs:\r\n- job: build\r\n  steps:\r\n  - script: |\r\n      curl -sSL https://install.python-poetry.org | python3 -\r\n      echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n    displayName: 'Install Poetry'\r\n\r\n  - script: poetry install --no-root\r\n    displayName: 'Install Deps'\r\n\r\n  - script: poetry run flake8 src\r\n    displayName: 'Linter'\r\n\r\n  - script: |\r\n      poetry add pytest-azurepipelines\r\n      poetry run pytest src\r\n    displayName: 'Tests'\r\n""]",0,1
"[""from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=Callable[[int], int])\r\n\r\ndef remember(f: T) -> T:\r\n    mem: Dict[int, int] = {}\r\n\r\n    @wraps(f)\r\n    def wrap(n: int) -> int:\r\n        if n not in mem:\r\n            mem[n] = f(n)\r\n        return mem[n]\r\n\r\n    return wrap  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n""]",0,1
"[""from contextlib import suppress\r\n\r\nclass Vld:\r\n    def chk(self, x, *, sup=None):\r\n        sup = sup or []\r\n        self._rs(EA(), sup) if a else None\r\n        self._rs(EB(), sup) if b else None\r\n        self._rs(EC(), sup) if c else None\r\n\r\n    def _rs(self, e, sup):\r\n        with suppress(*sup):\r\n            raise e\r\n\r\nv = Vld()\r\nv.chk(x, sup=[EB])\r\n""]",0,1
"[""import polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({\r\n    ""sid"": [1, 2, 3],\r\n    ""eng"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n    ""dur"": [123, 456, 789]\r\n})\r\n\r\ndf = df.with_columns(pl.col(""eng"").str.split("","")).explode(""eng"")\r\ndf = df.with_columns(pl.col(""dur"") / df.groupby(""sid"").count().select(""eng""))\r\n\r\nfig = px.bar(df, x=""sid"", y=""dur"", color=""eng"")\r\nfig.show()\r\n""]",0,1
"[""import torch\r\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\r\n\r\npth = ""Meta-Llama-3.1-8B-Instruct""\r\n\r\ntok = AutoTokenizer.from_pretrained(pth)\r\nmdl = AutoModelForCausalLM.from_pretrained(pth, torch_dtype=torch.float16, device_map=""auto"")\r\n\r\ntxt = ""Hello, how are you?""\r\ninp = tok(txt, return_tensors=""pt"").to(""cuda"")\r\nout = mdl.generate(**inp, max_length=50)\r\n\r\nprint(tok.decode(out[0], skip_special_tokens=True))\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef cnt_3w(df):\r\n    df = df.sort_values([""group_id"", ""sent_time""])\r\n    res = 0\r\n    for g, d in df.groupby(""group_id""):\r\n        d = d[[""user_id"", ""touchpoint""]].values\r\n        for i in range(len(d) - 2):\r\n            if d[i][1] == 1 and d[i+1][1] == 2 and d[i+2][1] == 3 and d[i][0] == d[i+2][0] and d[i][0] != d[i+1][0]:\r\n                res += 1\r\n    return res\r\n\r\nprint(cnt_3w(t1_df))\r\n""]",0,1
"[""import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\n\r\nmod = ""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nemb = HuggingFaceEmbeddings(model_name=mod)\r\n\r\ndef main():\r\n    d1 = Document(page_content=""The sky is blue."", metadata={""doc_id"": ""10""})\r\n    d2 = Document(page_content=""The forest is green"", metadata={""doc_id"": ""62""})\r\n    docs = [d1, d2]\r\n\r\n    for d in tqdm(docs, desc=""Proc""):\r\n        d.metadata['sum'] = 'hello'\r\n\r\n    pprint.pprint(docs)\r\n    db = FAISS.from_documents(docs, emb)\r\n    db.save_local(""faiss_idx"")\r\n    new_db = FAISS.load_local(""faiss_idx"", emb)\r\n\r\n    q = ""Which color is the sky?""\r\n    res = new_db.similarity_search_with_score(q)\r\n    print('Got:', res)\r\n    print('Meta:', res[0][0].metadata)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n""]",0,1
"[""import polars as pl\r\nfrom tqdm import tqdm\r\n\r\ndf = pl.DataFrame({\r\n    ""tm"": [""A"", ""A"", ""A"", ""B"", ""B"", ""C""],\r\n    ""conf"": [""E"", ""E"", ""E"", ""W"", ""W"", ""E""],\r\n    ""pts"": [11, 8, 10, 6, 6, 5],\r\n    ""rbs"": [7, 7, 6, 9, 12, 8]\r\n})\r\n\r\ndef proc(x):\r\n    return x.select(pl.col(""pts"").mean())\r\n\r\ngrps = df.select(""tm"").unique().height\r\nbar = tqdm(total=grps, desc=""Proc"")\r\n\r\ndef wrap(x):\r\n    bar.update(1)\r\n    return proc(x)\r\n\r\nres = df.group_by(""tm"").map_groups(\r\n""]",0,1
"[""import numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import LSTM, Dense, Masking\r\n\r\ndef pad_seq(seq, val=0.0):\r\n    mx = max(len(s) for s in seq)\r\n    return np.array([np.pad(s, (0, mx - len(s)), constant_values=val) for s in seq])\r\n\r\nx = [np.random.rand(np.random.randint(100, 200)) for _ in range(50)]\r\ny = np.random.rand(50)\r\n\r\nx = pad_seq(x)[..., np.newaxis]\r\n\r\nmdl = Sequential([\r\n    Masking(mask_value=0.0, input_shape=(x.shape[1], 1)),\r\n    LSTM(64),\r\n    Dense(1)\r\n])\r\n\r\nmdl.compile(optimizer='adam', loss='mse')\r\nmdl.fit(x, y, e\r\n""]",0,1
"[""import serial\r\nimport time\r\n\r\ndef wr(ser, msg):\r\n    ser.write(msg.encode())\r\n\r\ndef rd(ser):\r\n    return ser.readline().decode().strip()\r\n\r\nser = serial.Serial('/dev/ttyUSB0', 115200, timeout=1)\r\ntime.sleep(2)\r\n\r\nwr(ser, 'hello\n')\r\nprint(rd(ser))\r\n\r\nser.close()\r\n""]",0,1
"[""import boto3\r\nfrom pyiceberg.catalog import load_catalog\r\nfrom pyiceberg.schema import Schema\r\nfrom pyiceberg.types import TimestampType, DoubleType, StringType, NestedField\r\nfrom pyiceberg.partitioning import PartitionSpec, PartitionField\r\nfrom pyiceberg.transforms import YearTransform, MonthTransform\r\n\r\ndef mk_tbl():\r\n    bkt = ""my-bkt""\r\n    tbl = ""my-tbl""\r\n    db = ""iceberg_db""\r\n\r\n    sch = Schema(\r\n        NestedField(1, ""f1"", DoubleType(), False),\r\n        NestedField(2, ""f2"", StringType(), False)\r\n    )\r\n\r\n    part = PartitionSpec(\r\n        PartitionField(3, 3, YearTransform(), ""yr""),\r\n        PartitionField(3, 3, MonthTransform(), ""mn"")\r\n    )\r\n\r\n    cli = boto3.client(""glue"")\r\n    uri = f""s3://{bkt}/meta""\r\n    cat = load_catalog(""glue"", client=cli, uri=uri, type=""GLUE"")\r\n\r\n    cat.create_table(\r\n        identifier=f""{db}.{tbl}"",\r\n        schema=sch,\r\n        partition_spec=part,\r\n        location=f""s3://{bkt}/{tbl}/""\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    mk_tbl()\r\n""]",0,1
"[""import streamlit as st\r\n\r\ndef hdr():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    st.image(""images/logo.png"", width=300)\r\n    st.components.v1.html(""""""\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n    """""", height=0)\r\n\r\ndef run():\r\n    hdr()\r\n\r\nif __name__ == ""__main__"":\r\n    run()\r\n""]",0,1
"[""import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ng = None\r\n\r\n@asynccontextmanager\r\nasync def lsp(app: FastAPI):\r\n    global g\r\n    g = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def lsp2(app: FastAPI):\r\n    global g\r\n    g = ""Hi""\r\n    yield\r\n\r\ndef get_app(lsp_fn):\r\n    return FastAPI(title=""Test"", lifespan=lsp_fn)\r\n\r\napp = get_app(lsp)\r\n\r\n@app.get(""/"")\r\nasync def rt():\r\n    return Response(status_code=status.HTTP_200_OK, content=g)\r\n\r\n@pytest.fixture\r\ndef cli():\r\n    a = get_app(lsp2)\r\n    with TestClient(a) as c:\r\n        yield c\r\n\r\ndef test_ok(cli):\r\n    r = cli.get(""/"")\r\n    assert r.text == ""Hi""\r\n""]",0,1
"[""import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef fix_add(d, h):\r\n    return (d.astimezone(dt.timezone.utc) + dt.timedelta(hours=h)).astimezone(d.tzinfo)\r\n\r\nz = ZoneInfo(""Europe/Paris"")\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=z)\r\n\r\nd1 = fix_add(d0, 2)\r\nd2 = fix_add(d0, 3)\r\nd3 = fix_add(d0, 4)\r\n\r\nprint(d1.isoformat())\r\nprint(d2.isoformat())\r\nprint(d3.isoformat())\r\n""]",0,1
"[""from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\ndef chk(f):\r\n    return str(signature(f))\r\n\r\np1 = partial(bar, 3)\r\np2 = partial(bar, b=3)\r\np3 = partial(bar, a=3)\r\n\r\nprint(chk(p1))\r\nprint(chk(p2))\r\nprint(chk(p3))\r\n\r\nprint(p1(6))\r\nprint(p2(6))\r\nprint(p2(6, b=1))\r\nprint(p3(b=6))\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\n\r\ndat = {\r\n    ""c1"": [""a"", ""b"", ""c"", ""d""],\r\n    ""c2"": [[-0.06066, 0.072485, 0.548874, 0.158507],\r\n           [-0.536674, 0.10478, 0.926022, -0.083722],\r\n           [-0.21311, -0.030623, 0.300583, 0.261814],\r\n           [-0.308025, 0.006694, 0.176335, 0.533835]],\r\n}\r\n\r\ndf = pl.DataFrame(dat)\r\n\r\ndef sim(x, y):\r\n    return (x @ y.T) / (np.linalg.norm(x) * np.linalg.norm(y))\r\n\r\nmat = np.array(df[""c2""].to_list())\r\n\r\nout = pl.DataFrame(\r\n    [[df[""c1""][i]] + [sim(mat[i], mat[j]) for j in range(len(mat))] for i in range(len(mat))],\r\n    schema=[""c1""] + df[""c1""].to_list()\r\n)\r\n\r\nprint(out)\r\n""]",0,1
"[""from typing import Union, Literal\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, Field\r\n\r\napp = FastAPI()\r\n\r\nclass Foo(BaseModel):\r\n    typ: Literal[""Foo""] = Field(""Foo"", alias=""type"")\r\n    nam: str\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\nclass Bar(BaseModel):\r\n    typ: Literal[""Bar""] = Field(""Bar"", alias=""type"")\r\n    nam: str\r\n\r\n    class Config:\r\n        allow_population_by_field_name = True\r\n\r\nclass Demo(BaseModel):\r\n    exm: Union[Foo, Bar] = Field(..., discriminator=""typ"")\r\n\r\n@app.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    return Demo(exm=foo)\r\n""]",0,1
"[""import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef fit_poly(x, y, d=2):\r\n    p = PolynomialFeatures(d)\r\n    xp = p.fit_transform(x)\r\n    m = LinearRegression()\r\n    m.fit(xp, y)\r\n    return m, p\r\n\r\ndef grd_hes(m, p, x):\r\n    j = p.transform(x)\r\n    c = m.coef_\r\n    g = c[:, 1:].reshape(-1, x.shape[1])\r\n    h = np.zeros((x.shape[1], x.shape[1]))\r\n    idx = 1\r\n    for i in range(x.shape[1]):\r\n        h[i, i] = c[0, idx + i]\r\n        idx += x.shape[1] - i\r\n    return g, h\r\n\r\nx = np.random.rand(10, 2)\r\ny = np.random.rand(10, 1)\r\nm, p = fit_poly(x, y)\r\ng, h = grd_hes(m, p, x[:1])\r\n""]",0,1
"[""from abc import ABC, abstractmethod\r\n\r\nclass FBase(ABC):\r\n    foo: str\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = ""baz""\r\n\r\n    @abstractmethod\r\n    def _req(self): pass\r\n\r\nclass F(FBase):\r\n    foo: str = ""hello""\r\n\r\n    def _req(self): pass\r\n""]",0,1
"[""import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nfig, ax = plt.subplots()\r\nvals = [1000, 2500, 3000, 4500]\r\nx = np.arange(len(vals))\r\nbars = ax.bar(x, vals)\r\n\r\nfor bar in bars:\r\n    ax.text(\r\n        bar.get_x() + bar.get_width() / 2,\r\n        bar.get_height(),\r\n        f""{bar.get_height():,.2f}"",\r\n        ha=""center"",\r\n        va=""bottom"",\r\n    )\r\n\r\nplt.show()\r\n""]",0,1
"[""import polars as pl\r\nfrom datetime import datetime\r\n\r\nd1 = pl.DataFrame({\r\n    ""id"": [1, 2, 3, 4, 5],\r\n    ""ini"": [""2022-01-01"", ""2022-01-02"", ""2022-01-03"", ""2022-01-04"", ""2022-01-05""],\r\n    ""fin"": [""2022-01-03"", ""2022-01-06"", ""2022-01-07"", ""2022-01-09"", ""2022-01-07""],\r\n    ""val"": [10, 20, 30, 40, 50]\r\n}).with_columns(pl.col(""ini"").str.to_date(), pl.col(""fin"").str.to_date())\r\n\r\nd2 = pl.datetime_range(\r\n    start=datetime(2022, 1, 1),\r\n    end=datetime(2022, 1, 7),\r\n    interval=""1d"",\r\n    eager=True\r\n).to_frame(""dat"")\r\n\r\nres = d2.with_columns(\r\n    pl.sum(\r\n        pl.when(\r\n            (d1[""ini""] <= pl.col(""dat"")) & (d1[""fin""] >= pl.col(""dat""))\r\n        ).then(d1[""val""]).otherwise(0)\r\n    ).alias(""sum"")\r\n)\r\n\r\nprint(res)\r\n""]",0,1
"[""import numpy.typing as npt\r\nimport numpy as np\r\nfrom typing import Sequence, Union\r\n\r\nT = Union[npt.NDArray, Sequence]\r\n\r\ndef f(a: T) -> int:\r\n    return len(a)  \r\n\r\ndef g(a: T) -> Union[int, float, complex]:\r\n    return a[0]  \r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n""]",0,1
"[""import pandas as pd\r\n\r\na = pd.DataFrame({\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": [""a"", ""c"", ""x""],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n})\r\n\r\nb = a.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""VAL"")\r\nb[""ID""] = range(1, len(b) + 1)\r\nb[""FIELD_NAME""] = b[""FIELD_NAME""].str[-1]\r\nb[""FIELD_STR_VALUE""] = b[""VAL""].where(b[""VAL""].apply(lambda x: isinstance(x, str)))\r\nb[""FIELD_NUM_VALUE""] = b[""VAL""].where(b[""VAL""].apply(lambda x: isinstance(x, (int, float))))\r\nb = b.drop(columns=[""VAL""])\r\n\r\nprint(b)\r\n""]",0,1
"[""class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\nsetattr(BadBar, ""__len__"", classmethod(lambda cls: 9002))\r\n\r\nprint(len(BadBar))\r\nprint(len(BadBar()))\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\nA = pl.DataFrame({ ""idx"": [0, 20, 40], ""A"": ['a', 'b', 'c'] })\r\nB = pl.DataFrame({ ""idx"": [10, 20, 30], ""B"": ['d', 'e', 'f'] })\r\nC = pl.DataFrame({ ""idx"": [20, 30], ""C"": ['g', 'h'] })\r\n\r\nF = functools.reduce(lambda x, y: x.join(y, on=""idx"", how=""outer""), [A, B, C])\r\nprint(F.sort(""idx""))\r\n\r\nN, C = 300000, 20\r\nlst = [pl.DataFrame({ ""idx"": np.linspace(i, N*3-i, num=N, dtype=np.int32), f""A{i}"": np.arange(N, dtype=np.float32) }) for i in range(C)]\r\nres = functools.reduce(lambda x, y: x.join(y, on=""idx"", how=""outer""), lst)\r\nprint(res.sort(""idx""))\r\n""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\ndef calc(n, p, t):\r\n    n = int(n + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n    getcontext().prec = n + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n    for k in trange(n, position=p, desc=f""Job {p + 1} of {t}"", leave=True, ncols=100):\r\n        t = ((-1)**k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5)))\r\n    pi = 1 / pi\r\n    return pi\r\n\r\ndef par_job():\r\n    n_cores = 3\r\n    jobs = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, p, len(jobs)) for p, n in enumerate(jobs))\r\n\r\nif __name__ == ""__main__"":\r\n    par_job()\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame.from_dict(data1)\r\ndf2 = pd.DataFrame.from_dict(data2)\r\n\r\ndef closest_match(s, df):\r\n    idx = (df['seconds'] - s).abs().argsort()[:3]\r\n    return df.iloc[idx]\r\n\r\nresult = pd.concat([closest_match(s, df2) for s in df1['seconds']]).reset_index(drop=True)\r\nprint(result)\r\n""]",0,1
"[""import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\nclass Ex(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n    \r\n    @staticmethod\r\n    def ex() -> dict[str, Any]:\r\n        return {\r\n            'a': random.randint(1, 100),\r\n            'b': ''.join(random.choices(string.digits, k=10)),\r\n        }\r\n\r\nprint(Ex.ex())\r\n""]",0,1
"[""class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n        return result\r\n\r\n\r\ntree = BST(5)\r\ntree.add(10)\r\ntree.add(8)\r\ntree.add(2)\r\ntree.add(4)\r\ntree.add(7)\r\n\r\nprint(tree.traverse_pre())\r\n""]",0,1
"[""from http.server import SimpleHTTPRequestHandler, HTTPServer\r\nimport os\r\n\r\nclass MyHandler(SimpleHTTPRequestHandler):\r\n    def translate_path(self, path):\r\n        path = super().translate_path(path)\r\n        return os.path.abspath(path)\r\n\r\ndef run(addr='', port=8000, dir='.'):\r\n    os.chdir(dir)\r\n    server_address = (addr, port)\r\n    httpd = HTTPServer(server_address, MyHandler)\r\n    httpd.serve_forever()\r\n\r\nrun('', 8000, '/path/to/directory')\r\n""]",0,1
"[""import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\nif __name__ == '__main__':\r\n    path = ""my image path""\r\n\r\n    img = imread(path)\r\n    img = resize(img, (512, 512))\r\n\r\n    img_byte = base64.b64encode(img.tobytes())\r\n    data = {""shape"": img.shape, ""img"": img_byte.decode()}\r\n\r\n    response = requests.get('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\nimport json\r\nimport base64\r\nimport uvicorn\r\nimport numpy as np\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"")\r\ndef read_root():\r\n    return {""Hello"": ""World""}\r\n\r\n@app.get(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: dict):\r\n    img_byte = data.get('img').encode()\r\n    img_shape = tuple(data.get('shape'))\r\n    img_arr = np.frombuffer(base64.b64decode(img_byte), dtype=np.float32).reshape(img_shape)\r\n""]",0,1
"[""import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef ref_impl(enc):\r\n    return base64.b64decode(enc)\r\n\r\ndef impl1(enc):\r\n    return a2b_base64(enc)\r\n\r\ndef thread_impl(enc, n):\r\n    d = len(enc) // n\r\n    lbatch = (d // 4) * 4\r\n    batches = []\r\n    for i in range(n-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(enc[start:end])\r\n    batches.append(enc[end:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=n) as ex:\r\n        for res in ex.map(a2b_base64, batches):\r\n            ret += res\r\n    return ret\r\n\r\ndef proc_impl(enc, n):\r\n    d = len(enc) // n\r\n    lbatch = (d // 4) * 4\r\n    batches = []\r\n    for i in range(n-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(enc[start:end])\r\n    batches.append(enc[end:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=n) as ex:\r\n        for res in ex.map(a2b_base64, batches):\r\n            ret += res\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    cpu_num = cpu_count()\r\n    repeat = 60000000\r\n    large_b64 = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nref_impl"")\r\n    t_start = perf_counter()\r\n    dec1 = ref_impl(large_b64)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimpl1"")\r\n    t_start = perf_counter()\r\n    dec2 = impl1(large_b64)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthread_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = thread_impl(large_b64, cpu_num)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = proc_impl(large_b64, cpu_num)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nout = df.select(\r\n    pl.col(""sector_exposure"")\r\n    .str.split("";"")\r\n    .arr.eval(pl.element().str.split(""="").alias(""split""))\r\n    .arr.eval(pl.struct([pl.col(""split"").arr.get(0).alias(""sector""), pl.col(""split"").arr.get(1).cast(pl.Float64).alias(""value"")]))\r\n    .arr.to_struct()\r\n)\r\n\r\nout\r\n""]",0,1
"[""import hashlib\r\nimport sys\r\n\r\ndef get_hash(alg):\r\n    filename = input(""Enter the file name: "")\r\n    hash_obj = hashlib.new(alg)\r\n    with open(filename, ""rb"") as f:\r\n        for byte_block in iter(lambda: f.read(4096), b""""):\r\n            hash_obj.update(byte_block)\r\n    print(f""{alg} value has been calculated"")\r\n    return hash_obj.hexdigest()\r\n\r\ndef verify_checksum(alg):\r\n    checksum = input(f""Enter the {alg} checksum: "")\r\n    calc_hash = get_hash(alg)\r\n    if calc_hash == checksum:\r\n        print(f""{alg} checksum verified!"")\r\n    else:\r\n        print(f""{alg} checksum does not match."")\r\n\r\ndef which_hash():\r\n    alg = input(""Which hash do you want to calculate: sha256 or sha512? \n"")\r\n    if alg == ""sha256"" or alg == ""sha512"":\r\n        calc = get_hash(alg)\r\n        verify_checksum(alg)\r\n    else:\r\n        print(""Type either sha256 or sha512. If you type anything else the program will close...like this."")\r\n        sys.exit()\r\n\r\nif __name__ == ""__main__"":\r\n    which_hash()\r\n""]",0,1
"[""import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"", ci=""sd"", \r\n                edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5)\r\n\r\ng.map(sns.stripplot, 'sex', 'total_bill', 'smoker', hue_order=['Yes', 'No'], order=['Male', 'Female'],\r\n      palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nannot = Annotator(g.ax, pairs, data=tips, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\nannot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\nannot.apply_test().annotate()\r\n\r\nplt.show()\r\n""]",0,1
"[""import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j\r\n\r\nx = np.real(xx)\r\ny = np.real(yy)\r\nassert np.shares_memory(x, xx)\r\nassert np.shares_memory(y, yy)\r\n\r\nx_copy = np.real(xx).copy()\r\ny_copy = np.real(yy).copy()\r\n\r\ndot = timeit('np.dot(x_copy, y_copy)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x_copy, y_copy)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nimport json\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\ngdf_poly = gdf_poly.drop('name', axis=1)\r\n\r\nafr_gdf = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop=True)\r\n\r\nfig = ff.create_hexbin_mapbox(data_frame=data,\r\n                              lat=""LAT"", \r\n                              lon=""LON"",\r\n                              nx_hexagon=25,\r\n                              opacity=0.4,\r\n                              labels={""color"": ""Point Count""},\r\n                              mapbox_style='carto-positron',\r\n                              zoom=1\r\n                              )\r\n\r\nfig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(afr_gdf.geometry.to_json()),\r\n             ""below"": ""traces"",\r\n             ""type"": ""fill"",\r\n             ""color"": ""orange"",\r\n             ""opacity"": 0.1,\r\n             ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })   \r\n\r\nfig.update_traces(marker=dict(outlinecolor='rgba(0,0,0,0)'))\r\n\r\nfig.show()\r\n""]",0,1
"[""import pytest\r\nfrom unittest.mock import MagicMock\r\nfrom db import PostgresqlApi\r\n\r\n\r\n@pytest.fixture\r\ndef mock_db():\r\n    db = MagicMock(PostgresqlApi)\r\n    db.cursor.return_value = MagicMock()\r\n    return db\r\n\r\n\r\ndef test_db_connection(mock_db):\r\n    mock_db.add_event(event=""Test Event"")\r\n    mock_db.events.return_value = [(""Test Event"",)]\r\n    assert mock_db.events() == [(""Test Event"",)]\r\n\r\n\r\ndef test_add_event(mock_db):\r\n    mock_db.add_event(event=""Test Event"")\r\n    mock_db.cursor.execute.assert_called_with(\r\n        ""INSERT INTO history (event) VALUES (%s);"", (""Test Event"",)\r\n    )\r\n\r\n\r\ndef test_read_currencies(mock_db):\r\n    mock_db.events.return_value = [(""Test Event"",)]\r\n    result = {'get events': 'ok'}\r\n    assert result == {'get events': 'ok'}\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    ""session_id"": [20090312431273200, 20090312431273200, 20090312431273200, 20090312431273200],\r\n    ""fqid"": [""intro"", ""gramps"", ""gramps"", ""teddy""],\r\n    ""elapsed_time"": [0, 1323, 831, 5197]\r\n})\r\n\r\ndef agg_fqid(df):\r\n    return df.groupby(""session_id"").agg(\r\n        pl.col(""fqid"").value_counts().alias(""fqid_counts"")\r\n    ).explode(""fqid_counts"").unnest(""fqid_counts"").pivot(\r\n        values=""counts"", index=""session_id"", columns=""fqid""\r\n    )\r\n\r\nagg_fqid(df).show()\r\n""]",0,1
"[""from fastapi import FastAPI, Request\r\nfrom fastapi.responses import JSONResponse\r\nfrom starlette.middleware.base import BaseHTTPMiddleware\r\nimport json\r\n\r\napp = FastAPI()\r\n\r\nclass AddMetaMiddleware(BaseHTTPMiddleware):\r\n    async def dispatch(self, request: Request, call_next):\r\n        response = await call_next(request)\r\n\r\n        body = b""""\r\n        async for chunk in response.body_iterator:\r\n            body += chunk\r\n\r\n        data = {}\r\n        data[""data""] = json.loads(body.decode())\r\n        data[""metadata""] = {\r\n            ""some_data_key_1"": ""some_data_value_1"",\r\n            ""some_data_key_2"": ""some_data_value_2"",\r\n            ""some_data_key_3"": ""some_data_value_3""\r\n        }\r\n\r\n        body = json.dumps(data, indent=2).encode(""utf-8"")\r\n\r\n        return JSONResponse(content=body, status_code=response.status_code)\r\n\r\napp.add_middleware(AddMetaMiddleware)\r\n\r\n@app.get(""/"")\r\nasync def read_root():\r\n    return {""message"": ""Hello, World!""}\r\n""]",0,1
