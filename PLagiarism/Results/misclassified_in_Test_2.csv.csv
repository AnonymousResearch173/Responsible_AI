Code,label,predicted_label
"[""class InstanceofFix {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n""]",0,1
"[""package test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        ((One) one).run();\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.api.trace.TracingContextUtils;\r\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\n\r\nimport java.util.Map;\r\n\r\npublic class OpenTelemetrySqsTrace {\r\n\r\n    private final Tracer tracer;\r\n\r\n    public OpenTelemetrySqsTrace(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void processSqsMessage(Map<String, String> messageAttributes) {\r\n        TextMapGetter<Map<String, String>> getter = new TextMapGetter<>() {\r\n            @Override\r\n            public Iterable<String> keys(Map<String, String> carrier) {\r\n                return carrier.keySet();\r\n            }\r\n\r\n            @Override\r\n            public String get(Map<String, String> carrier, String key) {\r\n                return carrier.get(key);\r\n            }\r\n        };\r\n\r\n        Context extractedContext = W3CTraceContextPropagator.getInstance().extract(Context.current(), messageAttributes, getter);\r\n        Span parentSpan = Span.fromContext(extractedContext);\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(""consumeMessage"")\r\n                .setParent(extractedContext)\r\n                .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // Process the message\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class MountainSequence {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        List<Integer> uniqueSorted = new ArrayList<>(new TreeSet<>(list));\r\n        \r\n        int maxLen = 0;\r\n        \r\n        for (int peak = 1; peak < uniqueSorted.size() - 1; peak++) {\r\n            int peakValue = uniqueSorted.get(peak);\r\n\r\n            List<Integer> increasing = new ArrayList<>();\r\n            List<Integer> decreasing = new ArrayList<>();\r\n            List<Integer> increasingAgain = new ArrayList<>();\r\n\r\n            for (int num : list) {\r\n                if (num < peakValue) {\r\n                    if (decreasing.isEmpty()) {\r\n                        if (increasing.isEmpty() || num > increasing.get(increasing.size() - 1)) {\r\n                            increasing.add(num);\r\n                        }\r\n                    }\r\n                } else if (num == peakValue) {\r\n                    if (!increasing.isEmpty()) {\r\n                        decreasing.add(num);\r\n                    }\r\n                } else {\r\n                    if (!decreasing.isEmpty()) {\r\n                        if (increasingAgain.isEmpty() || num > increasingAgain.get(increasingAgain.size() - 1)) {\r\n                            increasingAgain.add(num);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!increasing.isEmpty() && !decreasing.isEmpty() && !increasingAgain.isEmpty()) {\r\n                maxLen = Math.max(maxLen, increasing.size() + decreasing.size() + increasingAgain.size());\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.Arrays;\r\n\r\n@Configuration\r\npublic class HiddenMethodFilterConfig {\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/*""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n""]",0,1
"[""import org.slf4j.MDC;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class VirtualThreadsPerformanceTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        int from = 1, to = 100;\r\n        Service service = new Service();\r\n\r\n        ExecutorService forkJoinPool = new ForkJoinPool(30);\r\n        ExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n        List<String> forkJoinResult = executeWithExecutor(forkJoinPool, service, from, to);\r\n        List<String> virtualThreadResult = executeWithExecutor(virtualThreadExecutor, service, from, to);\r\n\r\n        forkJoinPool.shutdown();\r\n        virtualThreadExecutor.shutdown();\r\n\r\n        System.out.println(""ForkJoinPool Result Size: "" + forkJoinResult.size());\r\n        System.out.println(""Virtual Thread Result Size: "" + virtualThreadResult.size());\r\n    }\r\n\r\n    private static List<String> executeWithExecutor(ExecutorService executor, Service service, int from, int to) throws Exception {\r\n        return executor.submit(\r\n                () -> IntStream.rangeClosed(-from, to)\r\n                        .mapToObj(i -> String.valueOf(i))\r\n                        .parallel()\r\n                        .map(val -> {\r\n                            try {\r\n                                service.setSomeThreadLocalString(val);\r\n                                MDC.put(""key1"", ""value1"");\r\n                                MDC.put(""key2"", ""value2"");\r\n\r\n                                return service.call(val);\r\n                            } finally {\r\n                                service.removeSomeThreadLocalString();\r\n                                MDC.remove(""key1"");\r\n                                MDC.remove(""key2"");\r\n                            }\r\n                        })\r\n                        .toList()\r\n        ).get();\r\n    }\r\n\r\n    static class Service {\r\n        private final ThreadLocal<String> threadLocal = new ThreadLocal<>();\r\n\r\n        void setSomeThreadLocalString(String value) {\r\n            threadLocal.set(value);\r\n        }\r\n\r\n        void removeSomeThreadLocalString() {\r\n            threadLocal.remove();\r\n        }\r\n\r\n        String call(String input) {\r\n            return ""Processed: "" + input;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.Base64;\r\n\r\npublic class Utf8OkHttpClient {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient().newBuilder().build();\r\n\r\n        MediaType mediaType = MediaType.parse(""application/octet-stream"");\r\n        RequestBody body = RequestBody.create(mediaType, """");\r\n\r\n        String fileName = ""3$ MÃÂÃÂ¹ F'RANÃÂÃÂ§ÃÂÃÂ©_33902_Country_5_202105.csv"";\r\n        String encodedFileName = ""=?UTF-8?B?"" + Base64.getEncoder().encodeToString(fileName.getBytes(StandardCharsets.UTF_8)) + ""?="";\r\n        String contentDisposition = ""attachment; filename=\"""" + encodedFileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""xxxx"")\r\n                .method(""POST"", body)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", contentDisposition)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n    }\r\n}\r\n""]",0,1
"[""public class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n""]",0,1
"[""package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session.equals(MemorySegment.NULL)) return null;\r\n\r\n                        MemorySegment atomName = arena.allocateFrom(""NET_WM_XAPP_PROGRESS"");\r\n                        MemorySegment netWmXappProgress = Xlib_h.XInternAtom(x11Session, atomName, 0);\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session,\r\n                                    MemorySegment.ofAddress(rawHandle).address(),\r\n                                    netWmXappProgress.address(),\r\n                                    Xlib_h.XA_CARDINAL(),\r\n                                    32,\r\n                                    Xlib_h.PropModeReplace(),\r\n                                    progressData,\r\n                                    1);\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.Map;\r\n\r\npublic class YamlLoader {\r\n\r\n    public static InterestingSetup loadInterestingSetup(String filePath) throws IOException {\r\n        Yaml yaml = new Yaml();\r\n        try (FileInputStream inputStream = new FileInputStream(filePath)) {\r\n            Map<String, Object> yamlConfig = yaml.load(inputStream);\r\n            Object interestingObject = yamlConfig.get(""interesting-setup"");\r\n            return convertToInterestingSetup(interestingObject);\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(""unchecked"")\r\n    private static InterestingSetup convertToInterestingSetup(Object object) {\r\n        if (object instanceof Map<?, ?> map) {\r\n            Yaml yaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            return yaml.load(yaml.dump(map));\r\n        }\r\n        throw new IllegalArgumentException(""Invalid YAML structure for InterestingSetup"");\r\n    }\r\n}\r\n""]",0,1
"[""import io.swagger.v3.oas.annotations.media.Content;\r\nimport io.swagger.v3.oas.annotations.media.ExampleObject;\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport io.swagger.v3.oas.annotations.parameters.RequestBody;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\npublic class ApiController {\r\n\r\n    @PostMapping(value = ""/example"", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @RequestBody(content = @Content(examples = @ExampleObject(value = ""{ \""key\"": \""value\"" }"")))\r\n    @ApiResponses({\r\n            @ApiResponse(responseCode = ""200"", content = @Content(examples = @ExampleObject(value = ""{ \""message\"": \""Success\"" }""), mediaType = MediaType.APPLICATION_JSON_VALUE)),\r\n            @ApiResponse(responseCode = ""400"", content = @Content(examples = @ExampleObject(value = ""{ \""error\"": \""Bad Request\"" }""), mediaType = MediaType.APPLICATION_JSON_VALUE))\r\n    })\r\n    public String exampleEndpoint(@RequestBody String request) {\r\n        return ""{ \""message\"": \""Success\"" }"";\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n\r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('\""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) {\r\n            return null;\r\n        }\r\n        StringBuilder escaped = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            escaped.append(ESCAPES.getOrDefault(c, String.valueOf(c)));\r\n        }\r\n        return escaped.toString();\r\n    }\r\n}\r\n""]",0,1
"[""import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\r\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;\r\nimport static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.security.test.context.support.WithMockUser;\r\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\r\nimport org.springframework.web.context.WebApplicationContext;\r\n\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Autowired\r\n    private WebApplicationContext context;\r\n\r\n    @BeforeEach\r\n    void setup() {\r\n        mockMvc = MockMvcBuilders.webAppContextSetup(context)\r\n                .apply(springSecurity())\r\n                .build();\r\n    }\r\n\r\n    @Test\r\n    void whenGetActuatorEndpoint_thenShouldAllowAccess() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void whenPutWithoutToken_thenShouldReturnUnauthorized() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void whenPutWithValidScope_thenShouldAllowAccess() throws Exception {\r\n        mockMvc.perform(get(""/data"")\r\n                .with(jwt().jwt(jwt -> jwt.claim(""scope"", ""data:write""))))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    @WithMockUser\r\n    void whenAuthenticatedWithoutScope_thenShouldReturnForbidden() throws Exception {\r\n        mockMvc.perform(get(""/data""))\r\n                .andExpect(status().isForbidden());\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.HashSet;\r\nimport java.util.Set;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) {\r\n        Set<Integer> dividends = new HashSet<>();\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n\r\n        Future<?> future1 = executor.submit(() -> {\r\n            for (int i = 3; i <= n; i += 3) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        Future<?> future2 = executor.submit(() -> {\r\n            for (int i = 5; i <= n; i += 5) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        Future<?> future3 = executor.submit(() -> {\r\n            for (int i = 7; i <= n; i += 7) {\r\n                synchronized (dividends) {\r\n                    dividends.add(i);\r\n                }\r\n            }\r\n        });\r\n\r\n        try {\r\n            future1.get();\r\n            future2.get();\r\n            future3.get();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        executor.shutdown();\r\n\r\n        int sum = 0;\r\n        for (int num : dividends) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));\r\n        System.out.println(fm.getSum(1000));\r\n        System.out.println(fm.getSum(76293));\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.temporal.WeekFields;\r\nimport java.util.Locale;\r\n\r\npublic class IsoWeek {\r\n    private final int year;\r\n    private final int week;\r\n\r\n    public IsoWeek(int year, int week) {\r\n        this.year = year;\r\n        this.week = week;\r\n    }\r\n\r\n    public static IsoWeek parse(String isoWeek) {\r\n        String[] parts = isoWeek.split(""-W"");\r\n        return new IsoWeek(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));\r\n    }\r\n\r\n    public boolean isBefore(IsoWeek other) {\r\n        return this.year < other.year || (this.year == other.year && this.week < other.week);\r\n    }\r\n\r\n    public int weeksBetween(IsoWeek other) {\r\n        LocalDate startDate = getFirstDayOfWeek();\r\n        LocalDate endDate = other.getFirstDayOfWeek();\r\n        return (int) java.time.temporal.ChronoUnit.WEEKS.between(startDate, endDate);\r\n    }\r\n\r\n    private LocalDate getFirstDayOfWeek() {\r\n        return LocalDate.of(year, 1, 4)\r\n                .with(WeekFields.of(Locale.getDefault()).weekOfWeekBasedYear(), week)\r\n                .with(WeekFields.of(Locale.getDefault()).dayOfWeek(), 1);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.format(""%d-W%02d"", year, week);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        IsoWeek weekA = IsoWeek.parse(""2012-W48"");\r\n        IsoWeek weekB = IsoWeek.parse(""2013-W03"");\r\n\r\n        System.out.println(""Week A: "" + weekA);\r\n        System.out.println(""Week B: "" + weekB);\r\n        System.out.println(""Is Week A before Week B? "" + weekA.isBefore(weekB));\r\n        System.out.println(""Weeks between Week A and Week B: "" + weekA.weeksBetween(weekB));\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.Callable;\r\n\r\npublic class InferenceThrowsExample {\r\n    public static <T extends Exception> void throwAsUnchecked(Exception e) throws T {\r\n        throw (T) e;\r\n    }\r\n\r\n    public static <T extends Exception> void execute(Callable<Void> callable) throws T {\r\n        try {\r\n            callable.call();\r\n        } catch (Exception e) {\r\n            throwAsUnchecked(e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> {\r\n                throw new IllegalArgumentException(""Unchecked Exception"");\r\n            });\r\n        } catch (Exception e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n\r\n        try {\r\n            execute(() -> {\r\n                throw new Exception(""Checked Exception"");\r\n            });\r\n        } catch (Exception e) {\r\n            System.out.println(""Caught: "" + e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class EqualSplit {\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0) {\r\n            return false;\r\n        }\r\n        int totalSum = arraySum(arr, 0);\r\n        if (totalSum % 2 != 0) {\r\n            return false;\r\n        }\r\n        return equalSplit(arr, 0, 0, 0, arr.length / 2, totalSum / 2);\r\n    }\r\n\r\n    private static boolean equalSplit(int[] arr, int index, int sum, int count, int halfSize, int targetSum) {\r\n        if (count == halfSize) {\r\n            return sum == targetSum;\r\n        }\r\n        if (index == arr.length) {\r\n            return false;\r\n        }\r\n        return equalSplit(arr, index + 1, sum + arr[index], count + 1, halfSize, targetSum) ||\r\n               equalSplit(arr, index + 1, sum, count, halfSize, targetSum);\r\n    }\r\n\r\n    private static int arraySum(int[] arr, int index) {\r\n        return index == arr.length ? 0 : arr[index] + arraySum(arr, index + 1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] arr1 = {1, 2, 3, 4, 5, 6};\r\n        int[] arr2 = {1, 1, 1, 1, 2, 2};\r\n        int[] arr3 = {1, 2, 3, 5, 5, 6};\r\n        System.out.println(equalSplit(arr1)); // false\r\n        System.out.println(equalSplit(arr2)); // true\r\n        System.out.println(equalSplit(arr3)); // true\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        label.setOnMouseEntered(event -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            double x = bounds.getMaxX();\r\n            double y = bounds.getMaxY();\r\n            tooltip.show(label, x, y);\r\n        });\r\n\r\n        label.setOnMouseExited(event -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.ObjectPropertyBase;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class SliderSwitch extends Control {\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n\r\n        @Override\r\n        public Object getBean() {\r\n            return SliderSwitch.this;\r\n        }\r\n\r\n        @Override\r\n        public String getName() {\r\n            return ""onAction"";\r\n        }\r\n    };\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n\r\n    public final void setOnAction(EventHandler<ActionEvent> value) {\r\n        onActionProperty().set(value);\r\n    }\r\n\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onActionProperty().get();\r\n    }\r\n\r\n    public SliderSwitch() {\r\n        setOnMouseClicked(event -> fireEvent(new ActionEvent(this, null)));\r\n    }\r\n\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SliderSwitchSkin(this);\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\npublic class MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DuplicateCharacters {\r\n    public static void main(String[] args) {\r\n        findDuplicateCharacters(""Great"");\r\n    }\r\n\r\n    public static void findDuplicateCharacters(String input) {\r\n        char[] chars = input.toCharArray();\r\n        Map<Character, Integer> charCountMap = new HashMap<>();\r\n\r\n        for (char c : chars) {\r\n            if (c != ' ') {\r\n                charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\r\n            }\r\n        }\r\n\r\n        boolean hasDuplicates = false;\r\n        System.out.println(""Duplicate characters in a given string:"");\r\n\r\n        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\r\n            if (entry.getValue() > 1) {\r\n                System.out.println(entry.getKey());\r\n                hasDuplicates = true;\r\n            }\r\n        }\r\n\r\n        if (!hasDuplicates) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class FourColorWheel extends Application {\r\n    private Group circle;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private double rotationAngle = 0;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        Button rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.boot.web.client.RestTemplateBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport io.micrometer.observation.annotation.Observed;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport io.micrometer.core.instrument.MeterRegistry;\r\nimport io.micrometer.core.instrument.Timer;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@SpringBootApplication\r\npublic class ObservabilityApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ObservabilityApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate(RestTemplateBuilder builder) {\r\n        return builder.build();\r\n    }\r\n}\r\n\r\n@RestController\r\npublic class TestController {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(TestController.class);\r\n    private final RestTemplate restTemplate;\r\n    private final MeterRegistry meterRegistry;\r\n\r\n    public TestController(RestTemplate restTemplate, MeterRegistry meterRegistry) {\r\n        this.restTemplate = restTemplate;\r\n        this.meterRegistry = meterRegistry;\r\n    }\r\n\r\n    @Observed(name = ""method1"", contextualName = ""method1"")\r\n    @GetMapping(value = ""/method1"")\r\n    public String method1(@RequestParam String input) {\r\n        log.info(""Inside the method1 with data = {}"", input);\r\n        Timer.Sample sample = Timer.start(meterRegistry);\r\n        String response = restTemplate.getForObject(""http://localhost:8090/method2"", String.class);\r\n        sample.stop(meterRegistry.timer(""method1.timer""));\r\n        return response;\r\n    }\r\n\r\n    @Observed(name = ""method2"", contextualName = ""method2"")\r\n    @GetMapping(value = ""/method2"")\r\n    public String method2() {\r\n        log.info(""Inside the method2"");\r\n        Timer.Sample sample = Timer.start(meterRegistry);\r\n        String response = ""Called method2 successfully"";\r\n        sample.stop(meterRegistry.timer(""method2.timer""));\r\n        return response;\r\n    }\r\n}\r\n\r\nxml\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-actuator</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-aop</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-registry-datadog</artifactId>\r\n        <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-tracing-bridge-brave</artifactId>\r\n        <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.micrometer</groupId>\r\n        <artifactId>micrometer-tracing</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n\r\nyaml\r\nspring:\r\n  application:\r\n    name: datadog-sample\r\n  sleuth:\r\n    sampler:\r\n      probability: 1.0\r\n\r\nserver:\r\n  port: 8090\r\n\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,metrics\r\n  metrics:\r\n    export:\r\n      datadog:\r\n        enabled: true\r\n        api-key: YOUR_DATADOG_API_KEY\r\n    distribution:\r\n      percentiles-histogram:\r\n        http:\r\n          server:\r\n            requests: true\r\n  tracing:\r\n    enabled: true\r\n    sampling:\r\n      probability: 1.0\r\n    propagation:\r\n      type: W3C\r\n\r\nlogging:\r\n  pattern:\r\n    console: .%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] - %msg%n\r\n""]",0,1
"[""import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\npublic class Playground {\r\n    static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n            var future = ts.fork(() -> ScopedValue.callWhere(NAME, ""haha"", () -> {\r\n                return NAME.get();\r\n            }));\r\n            ts.join();\r\n            System.out.println(future.resultNow());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.control.Label;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.text.TextAlignment;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        Label testLabel = createTestLabel();\r\n        root.getChildren().add(testLabel);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(getClass().getResource(""/ExampleStylesheet.css"").toExternalForm());\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setLayoutX(200);\r\n        testLabel.setLayoutY(100);\r\n        testLabel.setOnMouseEntered(event -> doSomething());\r\n        testLabel.setOnMouseExited(event -> doSomethingElse());\r\n        testLabel.addEventFilter(MouseEvent.MOUSE_MOVED, event -> {\r\n            Bounds bounds = testLabel.getBoundsInParent();\r\n            if (event.getX() < bounds.getMinX() || event.getX() > bounds.getMaxX() ||\r\n                event.getY() < bounds.getMinY() || event.getY() > bounds.getMaxY()) {\r\n                event.consume();\r\n            }\r\n        });\r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = createGridPane();\r\n        GridPane gridPane2 = createGridPane();\r\n\r\n        Label label1 = new Label(""One two three"");\r\n        TextField textField1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n\r\n        Label label2 = new Label(""Four five six seven"");\r\n        TextField textField2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n\r\n        TitledPane titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        TitledPane titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        double maxLabelWidth = Math.max(label1.prefWidth(-1), label2.prefWidth(-1));\r\n\r\n        gridPane1.getColumnConstraints().get(0).setMinWidth(maxLabelWidth);\r\n        gridPane2.getColumnConstraints().get(0).setMinWidth(maxLabelWidth);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private GridPane createGridPane() {\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setHgap(20);\r\n        ColumnConstraints labelColumn = new ColumnConstraints();\r\n        ColumnConstraints controlColumn = new ColumnConstraints();\r\n        controlColumn.setPercentWidth(100);\r\n        gridPane.getColumnConstraints().addAll(labelColumn, controlColumn);\r\n        return gridPane;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Side;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ContextMenu;\r\nimport javafx.scene.control.Menu;\r\nimport javafx.scene.control.MenuBar;\r\nimport javafx.scene.control.MenuItem;\r\nimport javafx.scene.control.MenuButton;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UpwardMenuBar extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        MenuButton menuButton = new MenuButton(""File"");\r\n        menuButton.getItems().addAll(\r\n                new MenuItem(""New""),\r\n                new MenuItem(""Open""),\r\n                new MenuItem(""Save""),\r\n                new MenuItem(""Exit"")\r\n        );\r\n\r\n        menuButton.showingProperty().addListener((obs, wasShowing, isNowShowing) -> {\r\n            if (isNowShowing) {\r\n                ContextMenu contextMenu = menuButton.getContextMenu();\r\n                if (contextMenu != null) {\r\n                    contextMenu.setAnchorLocation(javafx.stage.PopupWindow.AnchorLocation.WINDOW_TOP_RIGHT);\r\n                    contextMenu.show(menuButton, Side.TOP, 0, -menuButton.getHeight());\r\n                }\r\n            }\r\n        });\r\n\r\n        MenuBar menuBar = new MenuBar();\r\n        menuBar.getMenus().add(new Menu(""Edit""));\r\n        menuBar.getMenus().add(new Menu(""View""));\r\n\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuButton);\r\n        root.setTop(menuBar);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Upward Opening Menu"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\n\r\npublic class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initializeGrid();\r\n    }\r\n\r\n    private void initializeGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setPrefSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public WebMvcConfigurer contentNegotiationStrategy() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n                configurer.defaultContentType(MediaType.APPLICATION_JSON);\r\n            }\r\n        };\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.util.matcher.RequestMatcher;\r\nimport org.springframework.security.web.access.expression.WebExpressionAuthorizationManager;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\n\r\n@Bean\r\nSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    RequestMatcher localIpMatcher = request -> ""127.0.0.1"".equals(request.getRemoteAddr());\r\n\r\n    http\r\n        .csrf(csrf -> csrf.disable())\r\n        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n        .authorizeHttpRequests(auth -> auth\r\n            .requestMatchers(""/"").access(new WebExpressionAuthorizationManager(""hasIpAddress('127.0.0.1')""))\r\n            .anyRequest().denyAll()\r\n        );\r\n\r\n    return http.build();\r\n}\r\n""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\n\r\nimport java.util.concurrent.TimeUnit;\r\n\r\npublic class JdkBenchmarks {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    @Fork(value = 1, warmups = 2)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int[] localArray = testState.values;\r\n        int length = localArray.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(localArray[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    @Fork(value = 1, warmups = 2)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        int[] localArray = testState.values;\r\n        for (int value : localArray) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Thread)\r\n    public static class TestState {\r\n        public int[] values;\r\n\r\n        @Setup(Level.Iteration)\r\n        public void setupArray() {\r\n            int count = 1000;\r\n            values = new int[count];\r\n            for (int i = 0; i < count; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class NestedPerf {\r\n    @State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(java.util.concurrent.TimeUnit.SECONDS)\r\n    @Fork(1)\r\n    @Warmup(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    @Measurement(iterations = 5, time = 1, timeUnit = java.util.concurrent.TimeUnit.SECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\n\r\n    private static final double EARTH_RADIUS = 150;\r\n\r\n    private MeshView createTexturedSphere(double radius, int divisions) {\r\n        TriangleMesh mesh = new TriangleMesh();\r\n\r\n        for (int y = 0; y <= divisions; y++) {\r\n            double v = (double) y / divisions;\r\n            double latitude = Math.PI * (v - 0.5);\r\n            double sinLat = Math.sin(latitude);\r\n            double cosLat = Math.cos(latitude);\r\n\r\n            for (int x = 0; x <= divisions; x++) {\r\n                double u = (double) x / divisions;\r\n                double longitude = 2 * Math.PI * u;\r\n                float xPos = (float) (radius * cosLat * Math.cos(longitude));\r\n                float yPos = (float) (radius * sinLat);\r\n                float zPos = (float) (radius * cosLat * Math.sin(longitude));\r\n\r\n                mesh.getPoints().addAll(xPos, yPos, zPos);\r\n                mesh.getTexCoords().addAll((float) u, (float) v);\r\n            }\r\n        }\r\n\r\n        for (int y = 0; y < divisions; y++) {\r\n            for (int x = 0; x < divisions; x++) {\r\n                int p0 = y * (divisions + 1) + x;\r\n                int p1 = p0 + 1;\r\n                int p2 = p0 + divisions + 1;\r\n                int p3 = p2 + 1;\r\n\r\n                mesh.getFaces().addAll(p0, p0, p2, p2, p1, p1);\r\n                mesh.getFaces().addAll(p1, p1, p2, p2, p3, p3);\r\n            }\r\n        }\r\n\r\n        MeshView meshView = new MeshView(mesh);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\n        meshView.setMaterial(material);\r\n        return meshView;\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        MeshView earthSphere = createTexturedSphere(EARTH_RADIUS, 64);\r\n        earthSphere.setRotationAxis(Rotate.Y_AXIS);\r\n        earthSphere.setRotate(90);\r\n\r\n        Group root = new Group(earthSphere);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setTitle(""Textured Earth Sphere"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public class Test {\r\n    public static void go(Short n) { System.out.println(""Short""); }\r\n    public static void go(int n) { System.out.println(""int""); }\r\n\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go((Short) x);\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class StreamProcessorConfig {\r\n\r\n    @Bean\r\n    public Map<String, Function<KStream<String, InputType>, KStream<String, OutputType>>> tenantProcessors(\r\n            @Value(""${tenants}"") List<String> tenants) {\r\n        return tenants.stream().collect(Collectors.toMap(\r\n                tenant -> tenant + ""Processor"",\r\n                tenant -> inputTypeStream -> inputTypeStream.map((String k, InputType v) ->\r\n                        KeyValue.pair(k, OutputType.createFrom(v)))\r\n        ));\r\n    }\r\n}\r\n\r\nyaml\r\ntenants: A,B,C\r\n\r\nspring.cloud.function.definition: AProcessor;BProcessor;CProcessor\r\n\r\nspring.cloud.stream.kafka.streams.binder.functions.AProcessor.applicationId: ${spring.application.name}-AProcessor\r\nspring.cloud.stream.kafka.streams.binder.functions.BProcessor.applicationId: ${spring.application.name}-BProcessor\r\nspring.cloud.stream.kafka.streams.binder.functions.CProcessor.applicationId: ${spring.application.name}-CProcessor\r\n\r\nspring.cloud.stream.bindings.AProcessor-in-0.destination: A-input\r\nspring.cloud.stream.bindings.AProcessor-out-0.destination: A-output\r\n\r\nspring.cloud.stream.bindings.BProcessor-in-0.destination: B-input\r\nspring.cloud.stream.bindings.BProcessor-out-0.destination: B-output\r\n\r\nspring.cloud.stream.bindings.CProcessor-in-0.destination: C-input\r\nspring.cloud.stream.bindings.CProcessor-out-0.destination: C-output\r\n""]",0,1
"[""import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        StackPane root = new StackPane();\r\n\r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        Rectangle background = new Rectangle(500, 500, Color.RED);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        root.getChildren().addAll(background, testButton);\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class QRWithText {\r\n    public static void generateQRWithText(String qrData, String userName, String eventName, String filePath) {\r\n        try {\r\n            int qrSize = 500;\r\n            int textHeight = 50;\r\n            String charset = ""UTF-8"";\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, qrSize, qrSize, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            int imageWidth = qrImage.getWidth();\r\n            int imageHeight = qrImage.getHeight() + textHeight;\r\n\r\n            BufferedImage combinedImage = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g2d = combinedImage.createGraphics();\r\n\r\n            g2d.setColor(Color.WHITE);\r\n            g2d.fillRect(0, 0, imageWidth, imageHeight);\r\n            g2d.drawImage(qrImage, 0, 0, null);\r\n\r\n            g2d.setColor(Color.BLACK);\r\n            g2d.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n\r\n            FontMetrics fm = g2d.getFontMetrics();\r\n            int userNameWidth = fm.stringWidth(userName);\r\n            int eventNameWidth = fm.stringWidth(eventName);\r\n\r\n            g2d.drawString(userName, (imageWidth - userNameWidth) / 2, qrSize + 20);\r\n            g2d.drawString(eventName, (imageWidth - eventNameWidth) / 2, qrSize + 40);\r\n\r\n            g2d.dispose();\r\n            ImageIO.write(combinedImage, ""png"", new File(filePath));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        generateQRWithText(""https://example.com"", ""John Doe"", ""Tech Conference"", ""C:\\Users\\Nirmalw\\Desktop\\QR_with_text.png"");\r\n    }\r\n}\r\n""]",0,1
"[""import lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.event.EventListener;\r\nimport org.springframework.scheduling.annotation.Async;\r\nimport org.springframework.stereotype.Service;\r\nimport java.io.IOException;\r\nimport java.nio.file.*;\r\n\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class DirectoryWatcherService {\r\n\r\n    private final WatchService watchService;\r\n\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try {\r\n                WatchKey key = watchService.take();\r\n                for (WatchEvent<?> event : key.pollEvents()) {\r\n                    // actions on created files\r\n                }\r\n                key.reset();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n                break;\r\n            } catch (Exception e) {\r\n                handleFailure(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void handleFailure(Exception e) {\r\n        try {\r\n            Thread.sleep(5000);\r\n            startWatching();\r\n        } catch (InterruptedException ex) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.google.gson.Gson;\r\nimport com.mongodb.client.model.InsertOneModel;\r\nimport org.bson.Document;\r\nimport java.util.List;\r\n\r\npublic class ParallelStreamProcessor {\r\n\r\n    private static final Gson gson = new Gson();\r\n\r\n    public static List<InsertOneModel<Document>> processPuzzles(List<Object> puzzles) {\r\n        return puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .toList();\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class MapToJsonConverter {\r\n\r\n    public static String convertMapToJsonWithCamelCase(Map<String, Object> fields) throws JsonProcessingException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Map<String, Object> transformedMap = fields.entrySet().stream()\r\n                .collect(Collectors.toMap(\r\n                        entry -> toCamelCase(entry.getKey()),\r\n                        Map.Entry::getValue\r\n                ));\r\n        return mapper.writeValueAsString(transformedMap);\r\n    }\r\n\r\n    private static String toCamelCase(String underscore) {\r\n        String[] parts = underscore.split(""_"");\r\n        if (parts.length == 0) return underscore;\r\n        StringBuilder camelCase = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCase.append(Character.toUpperCase(parts[i].charAt(0))).append(parts[i].substring(1));\r\n        }\r\n        return camelCase.toString();\r\n    }\r\n}\r\n""]",0,1
"[""public class StrictFpExample {\r\n    public static void main(String[] args) {\r\n        nonStrictFpCalculation();\r\n        strictFpCalculation();\r\n    }\r\n\r\n    static void nonStrictFpCalculation() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Non-strictfp result: "" + c);\r\n    }\r\n\r\n    static strictfp void strictFpCalculation() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = a * 2;\r\n        double c = b / 4;\r\n        System.out.println(""Strictfp result: "" + c);\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.foreign.*;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteOrder;\r\n\r\npublic class LargeLongArray {\r\n    private static final long LONG_SIZE = Long.BYTES;\r\n    private final MemorySegment segment;\r\n    private final VarHandle handle;\r\n    private final long size;\r\n\r\n    public LargeLongArray(long size) {\r\n        if (size <= 0) throw new IllegalArgumentException(""Size must be positive"");\r\n        this.size = size;\r\n        this.segment = MemorySegment.allocateNative(size * LONG_SIZE, MemorySession.global());\r\n        this.handle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n        handle.set(segment, index * LONG_SIZE, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException(""Index out of bounds: "" + index);\r\n        return (long) handle.get(segment, index * LONG_SIZE);\r\n    }\r\n\r\n    public long size() {\r\n        return size;\r\n    }\r\n\r\n    public void copyTo(LargeLongArray destination, long srcIndex, long destIndex, long length) {\r\n        if (srcIndex < 0 || destIndex < 0 || length < 0 || \r\n            srcIndex + length > this.size || destIndex + length > destination.size) {\r\n            throw new IndexOutOfBoundsException(""Invalid copy range"");\r\n        }\r\n        MemorySegment.copy(this.segment, srcIndex * LONG_SIZE, destination.segment, destIndex * LONG_SIZE, length * LONG_SIZE);\r\n    }\r\n\r\n    public void fill(long value) {\r\n        for (long i = 0; i < size; i++) {\r\n            set(i, value);\r\n        }\r\n    }\r\n\r\n    public void free() {\r\n        segment.close();\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.geom.AffineTransform;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class BulletRenderer {\r\n    private final Map<Double, BufferedImage> rotationCache = new HashMap<>();\r\n\r\n    public BufferedImage rotateImage(BufferedImage img, double angle) {\r\n        if (rotationCache.containsKey(angle)) {\r\n            return rotationCache.get(angle);\r\n        }\r\n\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n\r\n        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\r\n\r\n        AffineTransform at = new AffineTransform();\r\n        at.rotate(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n        g2d.drawImage(img, at, null);\r\n        g2d.dispose();\r\n\r\n        rotationCache.put(angle, rotated);\r\n        return rotated;\r\n    }\r\n}\r\n""]",0,1
"[""import org.graalvm.polyglot.*;\r\n\r\npublic class GraalJSScript {\r\n    public static void main(String[] args) {\r\n        try (Context context = Context.create()) {\r\n            context.eval(""js"", ""console.log('Hello, GraalVM!');"");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n    \r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n        \r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        \r\n        System.out.println(result);\r\n        \r\n        sc.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setOnShowing(e -> {\r\n            comboBox.lookup("".combo-box-popup"").getStyleClass().add(""yellowed"");\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""package GUI.QLKH;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport DTO.QLKH_DTO;\r\nimport java.util.List;\r\nimport utils.HibernateUtil;\r\n\r\npublic class QLKH {\r\n    private static SessionFactory factory;\r\n    Session session = null;\r\n\r\n    public static void main(String[] args) {\r\n        factory = HibernateUtil.getSessionFactory();\r\n        QLKH Customer = new QLKH();\r\n        System.out.println(""search customers:"");\r\n        Customer.search();\r\n    }\r\n\r\n    public void search() {\r\n        String temp = ""John%"";\r\n        session = factory.openSession();\r\n        session.beginTransaction();\r\n        List<QLKH_DTO> search;\r\n        search = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n        session.getTransaction().commit();\r\n        for (QLKH_DTO customer : search) {\r\n            System.out.print(""Password: "" + customer.getPassword());\r\n            System.out.print(""Fullname: "" + customer.getFullname());\r\n            System.out.println(""Address: "" + customer.getAddress());\r\n            System.out.println(""City: "" + customer.getCity());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package app.controllers;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport java.io.IOException;\r\nimport app.components.Custom;\r\n\r\npublic class Menu {\r\n\r\n    @FXML\r\n    private VBox ccContainer;\r\n\r\n    private Custom cc;\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(""/app/components/Custom.fxml""));\r\n            cc = loader.load();\r\n            ccContainer.getChildren().add(cc);\r\n            cc.newText(""Test"");\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.assertj.core.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.PageRequest;\r\n\r\nimport java.util.List;\r\n\r\nclass ReportServiceTest {\r\n\r\n    @Test\r\n    void get_report_page() {\r\n        ReportPageRequest reportPageRequest = prepare_request();\r\n        prepare_reportPage(context, 9999L, pageable);\r\n\r\n        when(reportConverter.toReportSpecification(user, reportPageRequest)).thenReturn(reportSpecification);\r\n        when(PageRequest.of(1, 100)).thenReturn(pageRequest);\r\n        when(reportRepository.findAll(reportSpecification, pageRequest)).thenReturn(reportPage);\r\n        when(reportConverter.toReportPageResponse(context)).thenReturn(reportPageResponses);\r\n\r\n        try (MockedConstruction<PageImpl> pageMockedConstruction = Mockito.mockConstruction(PageImpl.class,\r\n                (mock, context) -> {\r\n                    when(mock.getTotalElements()).thenReturn(123456L);\r\n                    when(mock.getTotalPages()).thenReturn(1);\r\n                    when(mock.getContent()).thenReturn(reportPageResponses);\r\n                })) {\r\n\r\n            Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n\r\n            assertThat(actual.getTotalElements()).isEqualTo(123456L);\r\n            assertThat(actual.getTotalPages()).isEqualTo(1);\r\n            assertThat(actual.getContent()).isEqualTo(reportPageResponses);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            BorderPane root = new BorderPane();\r\n            Scene scene = new Scene(root, 400, 400);\r\n\r\n            StackPane stack = new StackPane();\r\n            Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n\r\n            stack.setLayoutX(200);\r\n            stack.setLayoutY(200);\r\n            text.setFont(Font.font(16));\r\n            stack.getChildren().add(text);\r\n            root.getChildren().add(stack);\r\n\r\n            Color color1 = Color.RED;\r\n            Color color2 = Color.BLUE;\r\n\r\n            Timeline timeline = new Timeline(\r\n                    new KeyFrame(Duration.ZERO, e -> text.setFill(color1)),\r\n                    new KeyFrame(Duration.seconds(2), e -> text.setFill(color2))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(true);\r\n            timeline.play();\r\n\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Objects;\r\n\r\npublic class OAuth2Client {\r\n    private static final String TOKEN_URL = ""https://your-auth-server.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String SCOPE = ""your-scope"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n    private static final String API_URL = ""https://api.example.com/protected/resource"";\r\n\r\n    private final OkHttpClient client = new OkHttpClient();\r\n\r\n    public String getAccessToken() throws IOException {\r\n        RequestBody body = new FormBody.Builder()\r\n                .add(""grant_type"", GRANT_TYPE)\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .add(""scope"", SCOPE)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(body)\r\n                .header(""Content-Type"", ""application/x-www-form-urlencoded"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            return Objects.requireNonNull(response.body()).string();\r\n        }\r\n    }\r\n\r\n    public String callProtectedApi(String accessToken) throws IOException {\r\n        Request request = new Request.Builder()\r\n                .url(API_URL)\r\n                .header(""Authorization"", ""Bearer "" + accessToken)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) throw new IOException(""Unexpected code "" + response);\r\n\r\n            return Objects.requireNonNull(response.body()).string();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            OAuth2Client client = new OAuth2Client();\r\n            String tokenResponse = client.getAccessToken();\r\n            System.out.println(""Access Token Response: "" + tokenResponse);\r\n\r\n            String accessToken = extractAccessToken(tokenResponse);\r\n            String apiResponse = client.callProtectedApi(accessToken);\r\n            System.out.println(""API Response: "" + apiResponse);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String extractAccessToken(String tokenResponse) {\r\n        return tokenResponse.split(""\""access_token\"":\"""")[1].split(""\"""")[0];\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MapEmbedder extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        webView.getEngine().load(""file:///"" + System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n\r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignmentExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n\r\n            Set<String> fieldNames = new HashSet<>();\r\n            classDeclaration.findAll(FieldDeclaration.class).forEach(field -> \r\n                field.getVariables().forEach(var -> fieldNames.add(var.getNameAsString()))\r\n            );\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                methodDeclaration.findAll(NameExpr.class).forEach(nameExpr -> {\r\n                    if (fieldNames.contains(nameExpr.getNameAsString())) {\r\n                        readFields.add(nameExpr.getNameAsString());\r\n                    }\r\n                });\r\n\r\n                methodDeclaration.findAll(AssignmentExpr.class).forEach(assignExpr -> {\r\n                    if (assignExpr.getTarget().isNameExpr()) {\r\n                        String fieldName = assignExpr.getTarget().asNameExpr().getNameAsString();\r\n                        if (fieldNames.contains(fieldName)) {\r\n                            writeFields.add(fieldName);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                methodDeclaration.findAll(UnaryExpr.class).forEach(unaryExpr -> {\r\n                    if (unaryExpr.getExpression().isNameExpr()) {\r\n                        String fieldName = unaryExpr.getExpression().asNameExpr().getNameAsString();\r\n                        if (fieldNames.contains(fieldName)) {\r\n                            writeFields.add(fieldName);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                System.out.println(""    Read Fields: "" + readFields);\r\n                System.out.println(""    Write Fields: "" + writeFields);\r\n            });\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@interface Annotation {\r\n    Class<?> className() default Void.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n    \r\n    @Annotation(className = String.class)\r\n    private String explicitlyAnnotated;\r\n\r\n    public static void main(String[] args) {\r\n        extractAndPrintClassName(Main.class);\r\n    }\r\n\r\n    public static void extractAndPrintClassName(Class<?> clazz) {\r\n        for (Field field : clazz.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> defaultClass = annotation.className() == Void.class ? field.getType() : annotation.className();\r\n                System.out.println(""Field: "" + field.getName() + "" -> Class: "" + defaultClass.getSimpleName());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Types;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.element.VariableElement;\r\nimport javax.annotation.processing.ProcessingEnvironment;\r\n\r\npublic class SwitchTypeResolver {\r\n\r\n    private final Trees trees;\r\n    private final Types types;\r\n\r\n    public SwitchTypeResolver(ProcessingEnvironment processingEnv) {\r\n        this.trees = Trees.instance(processingEnv);\r\n        this.types = processingEnv.getTypeUtils();\r\n    }\r\n\r\n    public TypeMirror getSwitchExpressionType(MethodTree methodTree) {\r\n        BlockTree blockTree = methodTree.getBody();\r\n\r\n        for (StatementTree statementTree : blockTree.getStatements()) {\r\n            if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                SwitchTree switchTree = (SwitchTree) statementTree;\r\n                ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n\r\n                Element element = trees.getElement(trees.getPath(trees.getCompilationUnit(methodTree), switchTreeExpression));\r\n                if (element instanceof VariableElement || element instanceof TypeElement) {\r\n                    return element.asType();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\n\r\n@Component\r\npublic class FxmlLoaderFactory {\r\n\r\n    private final ApplicationContext applicationContext;\r\n\r\n    public FxmlLoaderFactory(ApplicationContext applicationContext) {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n\r\n    public VBox loadFxml(String fxmlPath) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlPath));\r\n            loader.setControllerFactory(clazz -> applicationContext.getAutowireCapableBeanFactory().createBean(clazz));\r\n            return loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to load FXML: "" + fxmlPath, e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.ScatterChart;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport java.util.List;\r\n\r\npublic class SmoothedScatterChart extends Application {\r\n\r\n    private List<Double> r = List.of(1.0, 2.0, 3.0, 4.0, 5.0);\r\n    private List<Double> nodes = List.of(0.0, 45.0, 90.0, 135.0, 180.0);\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        primaryStage.setTitle(""Smoothed Scatter Chart"");\r\n\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series = new XYChart.Series<>();\r\n\r\n        for (int i = 0; i < r.size(); i++) {\r\n            series.getData().add(new XYChart.Data<>(\r\n                r.get(i) * Math.cos(Math.toRadians(nodes.get(i))),\r\n                r.get(i) * Math.sin(Math.toRadians(nodes.get(i)))\r\n            ));\r\n        }\r\n\r\n        scatterChart.getData().add(series);\r\n\r\n        primaryStage.setScene(new Scene(scatterChart, 800, 600));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n        view.post(() -> {\r\n            View parent = (View) view.getParent();\r\n            BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(parent);\r\n            behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n            behavior.setPeekHeight(parent.getHeight());\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n        .filter(object -> object.objectType().equals(""BUSINESS""))\r\n        .min(Comparator.comparing(CustomObject::url))\r\n        .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND""))\r\n        .let(firstBusiness -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS"") && object.objectStatus().equals(""ACTIVE""))\r\n            .min(Comparator.comparing(CustomObject::url))\r\n            .orElse(firstBusiness))\r\n        .let(firstActive -> listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS"") && object.objectStatus().equals(""ACTIVE"") && object.locale().equals(""en-US""))\r\n            .min(Comparator.comparing(CustomObject::url))\r\n            .orElse(firstActive))\r\n        .getUrl();\r\n}\r\n""]",0,1
"[""static class AnimatedRect extends Rectangle {\r\n    private final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n    public AnimatedRect(double width, double height) {\r\n        super(width, height);\r\n        setFill(color1.get());\r\n\r\n        ChangeListener<Paint> updateTimeline = (obs, o, v) -> {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        };\r\n\r\n        color1.addListener(updateTimeline);\r\n        color2.addListener(updateTimeline);\r\n\r\n        sceneProperty().addListener((obs, o, n) -> {\r\n            if (timeline.get() != null) {\r\n                if (n != null) {\r\n                    timeline.get().play();\r\n                } else {\r\n                    timeline.get().stop();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private Timeline createTimeline() {\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), LINEAR)),\r\n            new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), LINEAR))\r\n        );\r\n        timeline.setCycleCount(Timeline.INDEFINITE);\r\n        timeline.setAutoReverse(false);\r\n        return timeline;\r\n    }\r\n\r\n    final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n        StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n    );\r\n\r\n    final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n        StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n    );\r\n\r\n    static class StyleableProperties {\r\n        private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n            ""-color1"", PaintConverter.getInstance(), Color.RED\r\n        ) {\r\n            @Override\r\n            public boolean isSettable(AnimatedRect c) {\r\n                return !c.color1.isBound();\r\n            }\r\n\r\n            @Override\r\n            public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                return c.color1;\r\n            }\r\n        };\r\n\r\n        private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n            ""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n        ) {\r\n            @Override\r\n            public boolean isSettable(AnimatedRect c) {\r\n                return !c.color2.isBound();\r\n            }\r\n\r\n            @Override\r\n            public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                return c.color2;\r\n            }\r\n        };\r\n\r\n        private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n        static {\r\n            List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n            styleables.add(COLOR1);\r\n            styleables.add(COLOR2);\r\n            STYLEABLES = Collections.unmodifiableList(styleables);\r\n        }\r\n    }\r\n\r\n    public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n        return StyleableProperties.STYLEABLES;\r\n    }\r\n\r\n    @Override\r\n    public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n        return getClassCssMetaData();\r\n    }\r\n}\r\n""]",0,1
"[""@GetMapping(path = ""/file"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName,\r\n        @RequestParam String bucketName, @RequestParam String projectName) {\r\n    try {\r\n        Storage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\n        Blob blob = storage.get(bucketName, fileName);\r\n        if (blob == null) {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n\r\n        InputStream inputStream = Channels.newInputStream(blob.reader());\r\n        String contentType = blob.getContentType() != null ? blob.getContentType() : MediaType.APPLICATION_OCTET_STREAM_VALUE;\r\n\r\n        return ResponseEntity.ok()\r\n                .contentType(MediaType.parseMediaType(contentType))\r\n                .header(HttpHeaders.CONTENT_DISPOSITION, ""attachment; filename=\"""" + fileName + ""\"""")\r\n                .body(new InputStreamResource(inputStream));\r\n\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().build();\r\n    }\r\n}\r\n""]",0,1
"[""@ExtendWith(SpringExtension.class)\r\n@DataJpaTest\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    private MyEntityRepository repo;\r\n\r\n    @Spy\r\n    private MyEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        doReturn(expected).when(entityListener).doThis();\r\n\r\n        MyEntity e = new MyEntity();\r\n        MyEntity stored = repo.save(e);\r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n\r\n    @TestConfiguration\r\n    static class TestConfig {\r\n        @Bean\r\n        public MyEntityListener myEntityListener() {\r\n            return spy(new MyEntityListener());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.bytedeco.ffmpeg.avcodec.AVCodec;\r\nimport org.bytedeco.ffmpeg.avcodec.AVCodecContext;\r\nimport org.bytedeco.ffmpeg.avcodec.AVPacket;\r\nimport org.bytedeco.ffmpeg.avutil.AVFrame;\r\nimport org.bytedeco.ffmpeg.global.avcodec;\r\nimport org.bytedeco.ffmpeg.global.avutil;\r\nimport org.bytedeco.ffmpeg.global.swscale;\r\nimport org.bytedeco.ffmpeg.swscale.SwsContext;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class H264Decoder {\r\n    private AVCodecContext codecContext;\r\n    private AVPacket packet;\r\n    private AVFrame frame;\r\n    private SwsContext swsCtx;\r\n\r\n    public H264Decoder() {\r\n        AVCodec codec = avcodec.avcodec_find_decoder(avcodec.AV_CODEC_ID_H264);\r\n        codecContext = avcodec.avcodec_alloc_context3(codec);\r\n        avcodec.avcodec_open2(codecContext, codec, (AVCodecContext) null);\r\n\r\n        packet = avcodec.av_packet_alloc();\r\n        frame = avutil.av_frame_alloc();\r\n    }\r\n\r\n    public byte[] decodeH264(byte[] h264Bytes) {\r\n        packet.size(h264Bytes.length);\r\n        packet.data(avutil.av_malloc(h264Bytes.length));\r\n        packet.data().put(h264Bytes);\r\n\r\n        if (avcodec.avcodec_send_packet(codecContext, packet) < 0) {\r\n            return null;\r\n        }\r\n\r\n        if (avcodec.avcodec_receive_frame(codecContext, frame) == 0) {\r\n            int width = codecContext.width();\r\n            int height = codecContext.height();\r\n\r\n            byte[] rawData = new byte[width * height * 3];\r\n            frame.data(0).get(rawData);\r\n\r\n            return rawData;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public Map.Entry<Boolean, List<Integer>> hasMdat(byte[] byteArray) {\r\n        for (int i = 0; i < byteArray.length - 3; i++) {\r\n            if (byteArray[i] == 'm' && byteArray[i + 1] == 'd' &&\r\n                byteArray[i + 2] == 'a' && byteArray[i + 3] == 't') {\r\n                return Map.entry(true, Arrays.asList(i, i + 1, i + 2, i + 3));\r\n            }\r\n        }\r\n        return Map.entry(false, List.of(0));\r\n    }\r\n\r\n    public void processStream(byte[] bytes) {\r\n        Map.Entry<Boolean, List<Integer>> mdatLocation = hasMdat(bytes);\r\n        if (mdatLocation.getKey()) {\r\n            byte[] h264Data = Arrays.copyOfRange(bytes, mdatLocation.getValue().get(3) + 1, bytes.length);\r\n            byte[] decodedFrame = decodeH264(h264Data);\r\n            if (decodedFrame != null) {\r\n                // Send decodedFrame to client via SSE or WebSocket\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<dependency>\r\n    <groupId>org.bytedeco</groupId>\r\n    <artifactId>javacv-platform</artifactId>\r\n    <version>1.5.9</version>\r\n</dependency>\r\n""]",0,1
"[""import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n    public static List<int[]> findPattern(int[][] T, int[][] P) {\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n        List<int[]> result = new ArrayList<>();\r\n\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matches(T, P, i, j)) {\r\n                    result.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static boolean matches(int[][] T, int[][] P, int startX, int startY) {\r\n        int u = P.length, v = P[0].length;\r\n        for (int i = 0; i < u; i++) {\r\n            for (int j = 0; j < v; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[startX + i][startY + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n                {2, 3, 4, 3, 6},\r\n                {4, 1, 5, 7, 8},\r\n                {9, 1, 2, 3, 1},\r\n                {2, 4, 5, 1, 5},\r\n                {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n                {2, 3, 0},\r\n                {0, 1, 5},\r\n                {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> positions = findPattern(T, P);\r\n        for (int[] pos : positions) {\r\n            System.out.println(""("" + pos[0] + "", "" + pos[1] + "")"");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private DatabaseReference reference;\r\n    private List<SCard> itemList;\r\n    private SCardAdapter adapter;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n        reference = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\n        itemList = new ArrayList<>();\r\n        adapter = new SCardAdapter(itemList);\r\n        recyclerView.setAdapter(adapter);\r\n        fetchAll();\r\n        return v;\r\n    }\r\n\r\n    private void fetchAll() {\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                itemList.clear();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard item = company.getValue(SCard.class);\r\n                        if (item != null) {\r\n                            itemList.add(item);\r\n                        }\r\n                    }\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {}\r\n        });\r\n    }\r\n}\r\n\r\npublic class SCardAdapter extends RecyclerView.Adapter<SCardAdapter.ViewHolder> {\r\n    private List<SCard> itemList;\r\n\r\n    public SCardAdapter(List<SCard> itemList) {\r\n        this.itemList = itemList;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        SCard item = itemList.get(position);\r\n        holder.setName(item.getsName());\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return itemList.size();\r\n    }\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n\r\n        public void setName(String name) {\r\n            sname.setText(name);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.util.StringUtils;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class RestrictedLocaleResolver implements LocaleResolver {\r\n    private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(Locale.ENGLISH, new Locale(""hi""));\r\n\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String localeParam = request.getParameter(""locale"");\r\n        if (StringUtils.hasText(localeParam)) {\r\n            Locale requestedLocale = Locale.forLanguageTag(localeParam);\r\n            if (ALLOWED_LOCALES.contains(requestedLocale)) {\r\n                return requestedLocale;\r\n            } else {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + localeParam);\r\n            }\r\n        }\r\n        return Locale.ENGLISH;\r\n    }\r\n\r\n    @Override\r\n    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {\r\n        if (!ALLOWED_LOCALES.contains(locale)) {\r\n            throw new IllegalArgumentException(""Invalid locale: "" + locale);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Modifier;\r\n\r\npublic class ReflectionUtil {\r\n    public static Object createParentInstance() {\r\n        try {\r\n            Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n            constructor.setAccessible(true);\r\n            removeFinalModifier(constructor);\r\n            return constructor.newInstance();\r\n        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\r\n            throw new RuntimeException(""Failed to create Parent instance"", e);\r\n        }\r\n    }\r\n\r\n    private static void removeFinalModifier(Constructor<?> constructor) {\r\n        try {\r\n            Field modifiersField = Constructor.class.getDeclaredField(""modifiers"");\r\n            modifiersField.setAccessible(true);\r\n            modifiersField.setInt(constructor, constructor.getModifiers() & ~Modifier.PRIVATE);\r\n        } catch (NoSuchFieldException | IllegalAccessException ignored) {\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.security.KeyFactory;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyUtil {\r\n    public static PrivateKey getPrivateKeyFromString(String privateKey) {\r\n        try {\r\n            byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n            return keyFactory.generatePrivate(keySpec);\r\n        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\r\n            throw new RuntimeException(""Failed to convert String to PrivateKey"", e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport com.google.protobuf.TextFormat;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorProto;\r\n\r\npublic class ProtoParser {\r\n    public static FileDescriptorProto parseProtoFile(String filePath) {\r\n        try {\r\n            Path path = Paths.get(filePath);\r\n            String protoContent = new String(Files.readAllBytes(path));\r\n            FileDescriptorProto.Builder builder = FileDescriptorProto.newBuilder();\r\n            TextFormat.getParser().merge(protoContent, builder);\r\n            return builder.build();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to parse proto file"", e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Execution timed out"");\r\n        }\r\n        int result = counter.get().get();\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout, TimeUnit unit) throws TimeoutException {\r\n        long startTime = System.nanoTime();\r\n        long timeoutNanos = unit.toNanos(timeout);\r\n        while (loop-- >= 0) {\r\n            if (System.nanoTime() - startTime > timeoutNanos) {\r\n                throw new TimeoutException(""Function execution timed out"");\r\n            }\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.common.Attributes;\r\nimport io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.Scope;\r\n\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class ETLStepProcessor {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(""etl-pipeline"");\r\n\r\n    public void execute(DataPackage obj, String stepName) {\r\n        String traceId = generateTraceId(obj.getUniqueId());\r\n        String spanId = generateSpanId(stepName);\r\n        \r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceId,\r\n                spanId,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span span = tracer.spanBuilder(stepName)\r\n                .setParent(Context.current().with(Span.wrap(spanContext)))\r\n                .setAttribute(""data.package.id"", obj.getUniqueId())\r\n                .setAttribute(""etl.step"", stepName)\r\n                .startSpan();\r\n\r\n        try (Scope scope = span.makeCurrent()) {\r\n            CompletableFuture.runAsync(() -> processStep(obj, stepName))\r\n                    .whenComplete((result, exception) -> {\r\n                        if (exception != null) {\r\n                            span.recordException(exception);\r\n                        }\r\n                        span.end();\r\n                    });\r\n        }\r\n    }\r\n\r\n    private void processStep(DataPackage obj, String stepName) {\r\n        // Simulate step processing\r\n    }\r\n\r\n    private String generateTraceId(String uniqueId) {\r\n        byte[] uniqueIdBytes = uniqueId.getBytes(StandardCharsets.UTF_8);\r\n        ByteBuffer buffer = ByteBuffer.allocate(16);\r\n        if (uniqueIdBytes.length < 16) {\r\n            buffer.put(new byte[16 - uniqueIdBytes.length]);\r\n        }\r\n        buffer.put(uniqueIdBytes, 0, Math.min(uniqueIdBytes.length, 16));\r\n        return TraceId.fromBytes(buffer.array());\r\n    }\r\n\r\n    private String generateSpanId(String stepName) {\r\n        byte[] stepNameBytes = stepName.getBytes(StandardCharsets.UTF_8);\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        if (stepNameBytes.length < 8) {\r\n            buffer.put(new byte[8 - stepNameBytes.length]);\r\n        }\r\n        buffer.put(stepNameBytes, 0, Math.min(stepNameBytes.length, 8));\r\n        return SpanId.fromBytes(buffer.array());\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\nclass LRUCache {\r\n    private static class Node {\r\n        int key, value;\r\n        Node prev, next;\r\n        Node(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map;\r\n    private final Node head, tail;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        this.map = new HashMap<>(capacity);\r\n        this.head = new Node(0, 0);\r\n        this.tail = new Node(0, 0);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (!map.containsKey(key)) {\r\n            return -1;\r\n        }\r\n        Node node = map.get(key);\r\n        remove(node);\r\n        insertToFront(node);\r\n        return node.value;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            remove(map.get(key));\r\n        }\r\n        if (map.size() >= capacity) {\r\n            remove(tail.prev);\r\n        }\r\n        insertToFront(new Node(key, value));\r\n    }\r\n\r\n    private void remove(Node node) {\r\n        map.remove(node.key);\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    private void insertToFront(Node node) {\r\n        map.put(node.key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n}\r\n""]",0,1
"[""import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JRException;\r\nimport net.sf.jasperreports.engine.JasperCompileManager;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.export.JRPdfExporter;\r\nimport net.sf.jasperreports.export.SimpleExporterInput;\r\nimport net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;\r\nimport net.sf.jasperreports.export.SimplePdfExporterConfiguration;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class S3ImageToPdf {\r\n    private static final String BUCKET_NAME = ""your-bucket-name"";\r\n    private static final String IMAGE_KEY = ""path/to/your-image.jpg"";\r\n    private static final String JASPER_TEMPLATE = ""your-report-template.jrxml"";\r\n    private static final String OUTPUT_PDF = ""output.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException, JRException {\r\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\r\n        S3Object s3Object = s3Client.getObject(BUCKET_NAME, IMAGE_KEY);\r\n        InputStream inputStream = s3Object.getObjectContent();\r\n        \r\n        BufferedImage image = ImageIO.read(inputStream);\r\n        File tempFile = File.createTempFile(""temp-image"", "".jpg"");\r\n        ImageIO.write(image, ""jpg"", tempFile);\r\n\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(JASPER_TEMPLATE);\r\n        Map<String, Object> parameters = new HashMap<>();\r\n        parameters.put(""IMAGE_PATH"", tempFile.getAbsolutePath());\r\n\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new net.sf.jasperreports.engine.JREmptyDataSource());\r\n\r\n        JRPdfExporter exporter = new JRPdfExporter();\r\n        exporter.setExporterInput(new SimpleExporterInput(jasperPrint));\r\n        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(OUTPUT_PDF));\r\n        exporter.setConfiguration(new SimplePdfExporterConfiguration());\r\n        exporter.exportReport();\r\n\r\n        tempFile.delete();\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;  \r\nimport java.awt.event.*;\r\nimport javax.swing.*;  \r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        image = new ImageIcon(""Basic_red_dot.png"").getImage().getScaledInstance(75, 75, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, 75, 75);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) x = Math.max(x - MOVE_AMOUNT, 0);\r\n        if (rightPressed) x = Math.min(x + MOVE_AMOUNT, getWidth() - 75);\r\n        if (upPressed) y = Math.max(y - MOVE_AMOUNT, 0);\r\n        if (downPressed) y = Math.min(y + MOVE_AMOUNT, getHeight() - 75);\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n\r\n    public BlueDot() {\r\n        setOpaque(false);\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        image = new ImageIcon(""Basic_blue_dot.png"").getImage().getScaledInstance(10, 10, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, 10, 10);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getParent().getHeight()) {\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(""Image Display"");\r\n            frame.setSize(500, 500);\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.setLayout(null);\r\n\r\n            Surface surface = new Surface();\r\n            surface.setBounds(0, 0, 500, 500);\r\n            frame.add(surface);\r\n\r\n            BlueDot blueDot = new BlueDot();\r\n            blueDot.setBounds(0, 0, 500, 500);\r\n            frame.add(blueDot);\r\n\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n            surface.requestFocusInWindow();\r\n\r\n            Timer collisionTimer = new Timer(10, e -> {\r\n                if (surface.getRedDotBounds().intersects(blueDot.getBlueDotBounds())) {\r\n                    System.out.println(""Collision!!!!"");\r\n                }\r\n            });\r\n            collisionTimer.start();\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                (currentValue >> 32) & 0xFFFF, \r\n                (currentValue >> 16) & 0xFFF, \r\n                currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        BigDecimal min = new BigDecimal(""-20.00"");\r\n        BigDecimal max = new BigDecimal(""20.00"");\r\n        BigDecimal step = new BigDecimal(""0.25"");\r\n\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            private final SimpleObjectProperty<BigDecimal> value = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n            private final DecimalFormat format = new DecimalFormat(""+0.00;-0.00"");\r\n\r\n            {\r\n                value.addListener((obs, oldValue, newValue) -> {\r\n                    if (newValue.compareTo(min) < 0) {\r\n                        setValue(min);\r\n                    } else if (newValue.compareTo(max) > 0) {\r\n                        setValue(max);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void decrement(int steps) {\r\n                setValue(getValue().subtract(step.multiply(BigDecimal.valueOf(steps))));\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                setValue(getValue().add(step.multiply(BigDecimal.valueOf(steps))));\r\n            }\r\n\r\n            @Override\r\n            public void setValue(BigDecimal newValue) {\r\n                if (newValue.compareTo(min) < 0) newValue = min;\r\n                if (newValue.compareTo(max) > 0) newValue = max;\r\n                value.set(newValue.setScale(2, BigDecimal.ROUND_HALF_UP));\r\n            }\r\n\r\n            @Override\r\n            public BigDecimal getValue() {\r\n                return value.get();\r\n            }\r\n\r\n            @Override\r\n            public StringConverter<BigDecimal> getConverter() {\r\n                return new StringConverter<>() {\r\n                    @Override\r\n                    public String toString(BigDecimal object) {\r\n                        return object == null ? ""+0.00"" : format.format(object);\r\n                    }\r\n\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            return new BigDecimal(format.parse(string).toString());\r\n                        } catch (ParseException e) {\r\n                            return BigDecimal.ZERO;\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        };\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        Pattern pattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = change -> pattern.matcher(change.getControlNewText()).matches() ? change : null;\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(valueFactory.getConverter(), BigDecimal.ZERO, filter);\r\n        spinner.getEditor().setTextFormatter(textFormatter);\r\n\r\n        spinner.getEditor().textProperty().addListener((obs, oldText, newText) -> {\r\n            try {\r\n                BigDecimal value = new BigDecimal(newText.replace("","", "".""));\r\n                if (value.compareTo(min) < 0) spinner.getValueFactory().setValue(min);\r\n                if (value.compareTo(max) > 0) spinner.getValueFactory().setValue(max);\r\n            } catch (NumberFormatException ignored) {\r\n            }\r\n        });\r\n\r\n        StackPane root = new StackPane(spinner);\r\n        primaryStage.setScene(new Scene(root, 300, 200));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""@GetMapping(value = ""/test"")\r\n@ResponseBody\r\n@ApiBaseSiteIdAndUserIdParam\r\n@Secured({ ""ROLE_CUSTOMERGROUP"", ""ROLE_TRUSTED_CLIENT"", ""ROLE_CUSTOMERMANAGERGROUP"" })\r\npublic TestListWsDTO getTest(@RequestParam(required = false, defaultValue = DEFAULT_FIELD_SET) final String fields) {\r\n    if (userFacade.isAnonymousUser()) {\r\n        throw new AccessDeniedException(""Anonymous user is not allowed"");\r\n    }\r\n\r\n    CustomerModel currentUser = userService.getCurrentUser();\r\n    if (currentUser == null || userService.isAnonymousUser(currentUser)) {\r\n        throw new AccessDeniedException(""User session is not authenticated"");\r\n    }\r\n\r\n    customerFacade.loginSuccess();\r\n    return testConverter.convert(customerFacade.getCurrentCustomer());\r\n}\r\n""]",0,1
"[""import javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.stage.Stage;\r\n\r\npublic class StageUserDataListener {\r\n    private final ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>();\r\n\r\n    public StageUserDataListener(Stage stage) {\r\n        userDataProperty.addListener((observable, oldValue, newValue) -> \r\n            System.out.println(""New userData: "" + newValue)\r\n        );\r\n\r\n        stage.userDataProperty().addListener((observable, oldValue, newValue) -> \r\n            userDataProperty.set(newValue)\r\n        );\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Stage stage = new Stage();\r\n        StageUserDataListener listener = new StageUserDataListener(stage);\r\n\r\n        stage.setUserData(2);\r\n        stage.setUserData(3);\r\n    }\r\n}\r\n""]",0,1
"[""import org.locationtech.jts.geom.Coordinate;\r\nimport org.locationtech.jts.geom.Geometry;\r\nimport org.locationtech.jts.geom.GeometryFactory;\r\nimport org.locationtech.jts.geom.Polygon;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Struct;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport javax.sql.DataSource;\r\nimport oracle.jdbc.OracleConnection;\r\nimport oracle.jdbc.OraclePreparedStatement;\r\nimport oracle.jdbc.OracleResultSet;\r\nimport oracle.jdbc.internal.OracleStruct;\r\n\r\n@Component\r\npublic class SdoGeometryConverter {\r\n\r\n    private final DataSource dataSource;\r\n    private static final GeometryFactory geometryFactory = new GeometryFactory();\r\n\r\n    public SdoGeometryConverter(DataSource dataSource) {\r\n        this.dataSource = dataSource;\r\n    }\r\n\r\n    public void savePolygon(Long id, Polygon polygon) throws SQLException {\r\n        try (Connection connection = dataSource.getConnection()) {\r\n            OracleConnection oracleConnection = connection.unwrap(OracleConnection.class);\r\n            Struct sdoGeometry = createSdoGeometry(oracleConnection, polygon);\r\n            String sql = ""UPDATE my_table SET shape = ? WHERE id = ?"";\r\n            try (OraclePreparedStatement statement = (OraclePreparedStatement) oracleConnection.prepareStatement(sql)) {\r\n                statement.setObject(1, sdoGeometry);\r\n                statement.setLong(2, id);\r\n                statement.executeUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    public Polygon retrievePolygon(Long id) throws SQLException {\r\n        try (Connection connection = dataSource.getConnection()) {\r\n            OracleConnection oracleConnection = connection.unwrap(OracleConnection.class);\r\n            String sql = ""SELECT shape FROM my_table WHERE id = ?"";\r\n            try (OraclePreparedStatement statement = (OraclePreparedStatement) oracleConnection.prepareStatement(sql)) {\r\n                statement.setLong(1, id);\r\n                try (OracleResultSet resultSet = (OracleResultSet) statement.executeQuery()) {\r\n                    if (resultSet.next()) {\r\n                        Struct struct = (Struct) resultSet.getObject(1);\r\n                        return convertSdoGeometryToPolygon(struct);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Struct createSdoGeometry(OracleConnection connection, Polygon polygon) throws SQLException {\r\n        int srid = 4326;\r\n        Object[] sdoPoint = null;\r\n        Object[] sdoElemInfo = new Object[]{1, 1003, 1};\r\n        double[] ordinates = new double[polygon.getCoordinates().length * 2];\r\n        for (int i = 0; i < polygon.getCoordinates().length; i++) {\r\n            ordinates[2 * i] = polygon.getCoordinates()[i].x;\r\n            ordinates[2 * i + 1] = polygon.getCoordinates()[i].y;\r\n        }\r\n        Object[] sdoOrdinates = new Object[ordinates.length];\r\n        for (int i = 0; i < ordinates.length; i++) {\r\n            sdoOrdinates[i] = ordinates[i];\r\n        }\r\n        return connection.createStruct(""MDSYS.SDO_GEOMETRY"", new Object[]{2003, srid, sdoPoint, sdoElemInfo, sdoOrdinates});\r\n    }\r\n\r\n    private Polygon convertSdoGeometryToPolygon(Struct struct) throws SQLException {\r\n        Object[] attributes = struct.getAttributes();\r\n        Object[] elemInfoArray = (Object[]) ((Struct) attributes[3]).getAttributes();\r\n        double[] ordinatesArray = (double[]) ((Struct) attributes[4]).getAttributes();\r\n        List<Coordinate> coordinates = new ArrayList<>();\r\n        for (int i = 0; i < ordinatesArray.length; i += 2) {\r\n            coordinates.add(new Coordinate(ordinatesArray[i], ordinatesArray[i + 1]));\r\n        }\r\n        return geometryFactory.createPolygon(coordinates.toArray(new Coordinate[0]));\r\n    }\r\n}\r\n""]",0,1
"[""import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ReactiveMapTransformer {\r\n\r\n    public static <T> Map<String, String> transformToMap(List<T> list) {\r\n        return Flux.fromIterable(list)\r\n                .flatMap(item -> functionReturningMonoOfC(item)\r\n                        .map(C::url)\r\n                        .map(url -> Map.entry(item.getName(), url)))\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n    }\r\n\r\n    private static <T> Mono<C> functionReturningMonoOfC(T item) {\r\n        // Implementation not provided\r\n        return Mono.empty();\r\n    }\r\n\r\n    private static class C {\r\n        public String url() {\r\n            // Implementation not provided\r\n            return """";\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.net.Socket;\r\nimport java.security.GeneralSecurityException;\r\nimport java.security.KeyStore;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\nimport java.util.Arrays;\r\nimport java.util.Enumeration;\r\n\r\npublic class RedisSSLConfig {\r\n\r\n    public void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""my_cert""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo""));\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String alias)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new CustomX509KeyManager((X509KeyManager) keyManagers[i], alias);\r\n            }\r\n        }\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n\r\n    private static class CustomX509KeyManager implements X509KeyManager {\r\n        private final X509KeyManager originalKeyManager;\r\n        private final String alias;\r\n\r\n        public CustomX509KeyManager(X509KeyManager keyManager, String alias) {\r\n            this.originalKeyManager = keyManager;\r\n            this.alias = alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n            return alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n            return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n        }\r\n\r\n        @Override\r\n        public X509Certificate[] getCertificateChain(String alias) {\r\n            return originalKeyManager.getCertificateChain(alias);\r\n        }\r\n\r\n        @Override\r\n        public PrivateKey getPrivateKey(String alias) {\r\n            return originalKeyManager.getPrivateKey(alias);\r\n        }\r\n\r\n        @Override\r\n        public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n            return originalKeyManager.getClientAliases(keyType, issuers);\r\n        }\r\n\r\n        @Override\r\n        public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n            return originalKeyManager.getServerAliases(keyType, issuers);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class LineNumberInstrumentation extends MethodVisitor {\r\n\r\n    private final String classAndMethodName;\r\n\r\n    public LineNumberInstrumentation(MethodVisitor mv, String classAndMethodName) {\r\n        super(Opcodes.ASM9, mv);\r\n        this.classAndMethodName = classAndMethodName;\r\n    }\r\n\r\n    private void instrument() {\r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getName"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitLdcInsn(""_"" + classAndMethodName + ""_"");\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_2);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\n        super.visitLineNumber(line, start);\r\n        instrument();\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.function.Supplier;\r\n\r\npublic class Task implements Callable<Boolean> {\r\n    private final ReportClient client;\r\n\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public Boolean call() {\r\n        final var uuid = client.createDocument(documentId);\r\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n        CompletableFuture<GetStatusResponse> statusFuture = new CompletableFuture<>();\r\n\r\n        Runnable statusCheck = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                GetStatusResponse status = client.getStatus(uuid);\r\n                if (!Status.PENDING.equals(status.status())) {\r\n                    statusFuture.complete(status);\r\n                } else {\r\n                    scheduler.schedule(this, 10, TimeUnit.SECONDS);\r\n                }\r\n            }\r\n        };\r\n        scheduler.schedule(statusCheck, 0, TimeUnit.SECONDS);\r\n        GetStatusResponse finalStatus = statusFuture.join();\r\n        scheduler.shutdown();\r\n        final var document = client.getReport(uuid);\r\n        return Boolean.TRUE;\r\n    }\r\n\r\n    public static void executeTasks(ReportClient client) throws InterruptedException {\r\n        ExecutorService executor = Executors.newCachedThreadPool();\r\n        List<Callable<Boolean>> tasks = new ArrayList<>();\r\n        for (int i = 0; i < 100; i++) {\r\n            tasks.add(new Task(client));\r\n        }\r\n        executor.invokeAll(tasks);\r\n        executor.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport javax.swing.text.DefaultEditorKit;\r\n\r\npublic class TabToSpacesTextArea {\r\n    public static JTextArea createTextAreaWithSpacesTab() {\r\n        JTextArea textArea = new JTextArea();\r\n        Action tabAction = new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                textArea.replaceSelection(""    "");\r\n            }\r\n        };\r\n        textArea.getInputMap().put(KeyStroke.getKeyStroke(""TAB""), ""insert-spaces"");\r\n        textArea.getActionMap().put(""insert-spaces"", tabAction);\r\n        return textArea;\r\n    }\r\n\r\n    public static void createAndShowGUI() {\r\n        JFrame frame = new JFrame(""JTextArea Tab to Spaces"");\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        JTextArea textArea = createTextAreaWithSpacesTab();\r\n        frame.add(new JScrollPane(textArea));\r\n        frame.setSize(400, 300);\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(TabToSpacesTextArea::createAndShowGUI);\r\n    }\r\n}\r\n""]",0,1
"[""@SupportedAnnotationTypes(""com.company.generator.GenerateAnnotation"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class GenerateAnnotationProcessor extends AbstractProcessor {\r\n\r\n    private final Set<String> generatedAnnotations = new HashSet<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getElementsAnnotatedWith(GenerateAnnotation.class)) {\r\n            if (element.getKind() == ElementKind.ENUM) {\r\n                String enumName = element.getSimpleName().toString();\r\n                String annotationName = enumName + ""Annotation"";\r\n                generateAnnotation(enumName, annotationName);\r\n                generatedAnnotations.add(""com.company.generated."" + annotationName);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void generateAnnotation(String enumName, String annotationName) {\r\n        String annotationCode = ""package com.company.generated;\n"" +\r\n                ""import java.lang.annotation.ElementType;\n"" +\r\n                ""import java.lang.annotation.Retention;\n"" +\r\n                ""import java.lang.annotation.RetentionPolicy;\n"" +\r\n                ""import java.lang.annotation.Target;\n"" +\r\n                ""@Retention(RetentionPolicy.RUNTIME)\n"" +\r\n                ""@Target(ElementType.TYPE)\n"" +\r\n                ""public @interface "" + annotationName + "" {\n"" +\r\n                ""    "" + enumName + "" value();\n"" +\r\n                ""}"";\r\n        writeToFile(""com.company.generated."" + annotationName, annotationCode);\r\n    }\r\n\r\n    private void writeToFile(String className, String content) {\r\n        try {\r\n            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);\r\n            try (Writer writer = sourceFile.openWriter()) {\r\n                writer.write(content);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_21)\r\n@AutoService(Processor.class)\r\npublic class SecondPassProcessor extends AbstractProcessor {\r\n\r\n    private final Set<String> discoveredAnnotations = new HashSet<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) {\r\n            return false;\r\n        }\r\n        \r\n        for (Element element : roundEnv.getElementsAnnotatedWith(EnumAnnotation.class)) {\r\n            discoveredAnnotations.add(element.toString());\r\n        }\r\n\r\n        for (String annotation : discoveredAnnotations) {\r\n            try {\r\n                TypeElement annotationElement = processingEnv.getElementUtils().getTypeElement(annotation);\r\n                if (annotationElement != null) {\r\n                    for (Element element : roundEnv.getElementsAnnotatedWith(annotationElement)) {\r\n                        generateCodeForElement(element, annotation);\r\n                    }\r\n                }\r\n            } catch (Exception ignored) {\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void generateCodeForElement(Element element, String annotation) {\r\n        String className = element.getSimpleName() + ""Generated"";\r\n        String classContent = ""package com.company.generated;\n"" +\r\n                ""public class "" + className + "" {\n"" +\r\n                ""    public static void process() {\n"" +\r\n                ""        System.out.println(\""Processing "" + annotation + "" for "" + element.getSimpleName() + ""\"");\n"" +\r\n                ""    }\n"" +\r\n                ""}"";\r\n\r\n        writeToFile(""com.company.generated."" + className, classContent);\r\n    }\r\n\r\n    private void writeToFile(String className, String content) {\r\n        try {\r\n            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile(className);\r\n            try (Writer writer = sourceFile.openWriter()) {\r\n                writer.write(content);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public String[] getTransactionsList() throws JsonProcessingException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        return mapper.writeValueAsString(transactionsList).split(""\n"");\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n    \r\n    public static void transactionsReceived(String jsonString) throws JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n    private JsonParser jsonParser;\r\n    private DeserializationContext deserializationContext;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        deserializer = new StringToDateDeserializer();\r\n        jsonParser = mock(JsonParser.class);\r\n        deserializationContext = mock(DeserializationContext.class);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException, ParseException {\r\n        String validDate = ""2024-03-17T12:00:00Z"";\r\n        when(jsonParser.getText()).thenReturn(validDate);\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(jsonParser, deserializationContext));\r\n    }\r\n}\r\n""]",0,1
"[""import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\nimport org.openqa.selenium.chrome.ChromeOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\n\r\nimport java.util.logging.Level;\r\n\r\npublic class JavaScriptErrorLogger {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.chrome.driver"", ""path_to_driver/chromedriver"");\r\n\r\n        ChromeOptions options = new ChromeOptions();\r\n        options.setCapability(""goog:loggingPrefs"", java.util.Map.of(LogType.BROWSER, Level.ALL));\r\n\r\n        WebDriver driver = new ChromeDriver(options);\r\n        driver.get(""https://www.example.com"");\r\n\r\n        LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : logEntries) {\r\n            System.out.println(""JS Error: "" + entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n""]",0,1
"[""@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n            .algorithm(JWSAlgorithm.HS256)\r\n            .keyID(""customKey"")\r\n            .build();\r\n    JWKSet jwkSet = new JWKSet(octetKey);\r\n    JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(jwkSet);\r\n    return new NimbusJwtEncoder(jwkSource);\r\n}\r\n""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    \r\n    @Value(""Adventure of War"")\r\n    private String name;\r\n\r\n    @Value(""A place for War"")\r\n    private String motive;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getMotive() {\r\n        return motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails healthUser = User.withUsername(specialUser.getId())\r\n                .password(passwordEncoder().encode(specialUser.getPassword()))\r\n                .roles(""SPECIALROLE"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(healthUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http, InMemoryUserDetailsManager inMemoryUserDetailsService) throws Exception {\r\n        http\r\n            .securityMatcher(""/very-special-path/**"")\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .userDetailsService(inMemoryUserDetailsService);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain filterChain(HttpSecurity http, UserDetailsService customUserDetailsService) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(auth -> auth.anyRequest().authenticated())\r\n            .httpBasic(Customizer.withDefaults())\r\n            .userDetailsService(customUserDetailsService);\r\n        return http.build();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.crypto.Cipher;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.security.MessageDigest;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String keyFilePath = ""/home/debashishd/Downloads/s_key"";\r\n        String inputText = ""Hello this is Roxane"";\r\n\r\n        byte[] keyBytes = deriveKeyFromFile(keyFilePath);\r\n        SecretKey secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        IvParameterSpec ivSpec = new IvParameterSpec(new byte[16]);\r\n\r\n        String encrypted = encrypt(inputText, secretKey, ivSpec);\r\n        System.out.println(""Encrypted value: "" + encrypted);\r\n\r\n        String decrypted = decrypt(encrypted, secretKey, ivSpec);\r\n        System.out.println(""Decrypted value: "" + decrypted);\r\n    }\r\n\r\n    private static byte[] deriveKeyFromFile(String filePath) throws Exception {\r\n        byte[] keyFileBytes = Files.readAllBytes(Path.of(filePath));\r\n        MessageDigest sha256 = MessageDigest.getInstance(""SHA-256"");\r\n        return sha256.digest(keyFileBytes);\r\n    }\r\n\r\n    private static String encrypt(String data, SecretKey key, IvParameterSpec iv) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\r\n        byte[] encryptedBytes = cipher.doFinal(data.getBytes(StandardCharsets.UTF_8));\r\n        return Base64.getEncoder().encodeToString(encryptedBytes);\r\n    }\r\n\r\n    private static String decrypt(String encryptedData, SecretKey key, IvParameterSpec iv) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\r\n        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));\r\n        return new String(decryptedBytes, StandardCharsets.UTF_8);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerRestrictionApp extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n\r\n        disableButtons(spinnerMin, spinnerMax);\r\n\r\n        spinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\n            disableButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\n            disableButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        HBox root = new HBox(10, spinnerMin, spinnerMax);\r\n        primaryStage.setScene(new Scene(root, 300, 100));\r\n        primaryStage.setTitle(""Spinner Restriction"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void disableButtons(Spinner<Integer> spinnerMin, Spinner<Integer> spinnerMax) {\r\n        boolean minAtMax = spinnerMin.getValue().equals(spinnerMax.getValue());\r\n        boolean maxAtMin = spinnerMax.getValue().equals(spinnerMin.getValue());\r\n\r\n        spinnerMin.lookup("".increment-arrow-button"").setDisable(minAtMax);\r\n        spinnerMax.lookup("".decrement-arrow-button"").setDisable(maxAtMin);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStreamWriter;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.time.LocalDateTime;\r\nimport org.thymeleaf.TemplateEngine;\r\nimport org.thymeleaf.context.Context;\r\nimport org.thymeleaf.templatemode.TemplateMode;\r\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\r\n\r\npublic class TestThymeleafUTF8 {\r\n    public static void main(String[] args) {\r\n        try {\r\n            TemplateEngine templateEngine = new TemplateEngine();\r\n            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n            resolver.setCharacterEncoding(""UTF-8"");\r\n            resolver.setTemplateMode(TemplateMode.XML);\r\n            templateEngine.setTemplateResolver(resolver);\r\n            Context ct = new Context();\r\n            ct.setVariable(""TEST_AR"", ""???? ???? ?? ??? ????"");\r\n            ct.setVariable(""TEST_HE"", ""??????"");\r\n            ct.setVariable(""TEST_CN"", ""????"");\r\n            ct.setVariable(""currentDate"", LocalDateTime.now().toString());\r\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8));\r\n            templateEngine.process(""test_template.xml"", ct, out);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    \r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(ParDo.of(new DoFn<KV<String, String>, Void>() {\r\n        @ProcessElement\r\n        public void processElement(ProcessContext c) {\r\n            transaction.sadd(c.element().getKey(), c.element().getValue());\r\n            batchCount++;\r\n            if (batchCount >= 1000) {\r\n                transaction.exec();\r\n                transaction.multi();\r\n                batchCount = 0;\r\n            }\r\n        }\r\n    }));\r\n\r\n    outputData.apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n            .withConnectionConfiguration(CustomRedisConfigurations\r\n                    .create(REDIS_HOST, port)\r\n                    .withTimeout(100)\r\n                    .withAuth(""credentials"")\r\n                    .enableSSL()));\r\n\r\n    pipeline.run();\r\n\r\n    verify(transaction, atLeastOnce()).exec();\r\n    verify(transaction, atLeastOnce()).multi();\r\n}\r\n""]",0,1
"[""public void DevelopmentTypeEvent() {\r\n    LanguageProgramming.getSelectionModel().clearSelection();\r\n    LanguageProgramming.setValue(null);\r\n    LanguageProgramming.setItems(FXCollections.observableArrayList());\r\n\r\n    if (DevelopmentType.getValue().equals(""Back-end"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n    } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n        LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n    }\r\n\r\n    LanguageProgramming.setPromptText(""Select a language programming"");\r\n}\r\n""]",0,1
"[""private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n    public void onReceive(Context context, Intent intent) {\r\n        String action = intent.getAction();\r\n        if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n            synchronized (this) {\r\n                UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                if (device != null) {\r\n                    usbDevice = device;\r\n                    PendingIntent permissionIntent = PendingIntent.getBroadcast(\r\n                            context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n                    UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                    usbManager.requestPermission(device, permissionIntent);\r\n                }\r\n            }\r\n        } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n            if (connection != null) {\r\n                connection.releaseInterface(usbDeviceInterface);\r\n                connection.close();\r\n            }\r\n            connection = null;\r\n            usbDevice = null;\r\n            endpointIn = null;\r\n            endpointOut = null;\r\n        } else if (ACTION_USB_PERMISSION.equals(action)) {\r\n            UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (device != null && intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                connection = usbManager.openDevice(device);\r\n                if (connection != null) {\r\n                    usbDeviceInterface = device.getInterface(0);\r\n                    connection.claimInterface(usbDeviceInterface, true);\r\n                    endpointIn = usbDeviceInterface.getEndpoint(0);\r\n                    endpointOut = usbDeviceInterface.getEndpoint(1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n""]",0,1
"[""package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\n\r\npublic class Interceptor implements ServerInterceptor {\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n\r\nsh\r\n./start-connect-server.sh \\r\n    --packages org.apache.spark:spark-connect_2.12:3.4.1 \\r\n    --jars Interceptor.jar \\r\n    --conf ""spark.driver.extraClassPath=Interceptor.jar"" \\r\n    --conf ""spark.executor.extraClassPath=Interceptor.jar"" \\r\n    --conf spark.connect.grpc.interceptor.classes=interceptorserver.Interceptor\r\n""]",0,1
"[""import java.util.Random;\r\nimport java.lang.reflect.Constructor;\r\n\r\npublic class Game {\r\n    private Random random = new Random();\r\n    private int sizeX;\r\n    private int sizeY;\r\n    private Field field;\r\n    private Player player;\r\n\r\n    public <T extends Fieldable> void positionEntity(Class<T> clazz) {\r\n        int x, y;\r\n        boolean entityCreated = false;\r\n        while (!entityCreated) {\r\n            x = random.nextInt(sizeX);\r\n            y = random.nextInt(sizeY);\r\n            if (field.getFieldable(x, y) instanceof Empty) {\r\n                try {\r\n                    Constructor<T> constructor = clazz.getConstructor(\r\n                            int.class, int.class, int.class, int.class, \r\n                            Field.class, Player.class, Game.class\r\n                    );\r\n                    T entity = constructor.newInstance(x, y, sizeX, sizeY, field, player, this);\r\n                    field.setFieldable(x, y, entity);\r\n                    entityCreated = true;\r\n                } catch (Exception e) {\r\n                    throw new RuntimeException(""Failed to create entity: "" + clazz.getSimpleName(), e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import co.elastic.clients.elasticsearch.ElasticsearchClient;\r\nimport co.elastic.clients.transport.endpoints.BooleanResponse;\r\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\r\nimport co.elastic.clients.json.jackson.JacksonJsonpMapper;\r\nimport jakarta.annotation.PreDestroy;\r\nimport org.apache.http.auth.AuthScope;\r\nimport org.apache.http.auth.UsernamePasswordCredentials;\r\nimport org.apache.http.impl.client.BasicCredentialsProvider;\r\nimport org.apache.http.ssl.SSLContexts;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\r\nimport org.apache.http.nio.conn.ssl.SSLIOSessionStrategy;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestClientBuilder;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.data.elasticsearch.client.elc.ElasticsearchConfiguration;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchOperations;\r\nimport org.springframework.data.elasticsearch.core.ElasticsearchTemplate;\r\n\r\nimport javax.net.ssl.SSLContext;\r\nimport java.io.File;\r\nimport java.nio.file.Files;\r\nimport java.security.KeyStore;\r\nimport java.util.Collections;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig extends ElasticsearchConfiguration {\r\n\r\n    @Override\r\n    public RestClientBuilderCustomizer restClientBuilderCustomizer() {\r\n        return builder -> {\r\n            try {\r\n                KeyStore truststore = KeyStore.getInstance(""pkcs12"");\r\n                try (var is = Files.newInputStream(new File(""path/to/certificate.p12"").toPath())) {\r\n                    truststore.load(is, ""password"".toCharArray());\r\n                }\r\n\r\n                SSLContext sslContext = SSLContexts.custom()\r\n                        .loadTrustMaterial(truststore, null)\r\n                        .build();\r\n\r\n                SSLIOSessionStrategy sessionStrategy = new SSLIOSessionStrategy(sslContext);\r\n\r\n                BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n                credentialsProvider.setCredentials(AuthScope.ANY, \r\n                        new UsernamePasswordCredentials(""elastic"", ""password""));\r\n\r\n                builder.setHttpClientConfigCallback(httpClientBuilder ->\r\n                        httpClientBuilder\r\n                                .setSSLStrategy(sessionStrategy)\r\n                                .setDefaultCredentialsProvider(credentialsProvider)\r\n                );\r\n\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(""Failed to configure Elasticsearch SSL"", e);\r\n            }\r\n        };\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient elasticsearchClient(RestClient restClient) {\r\n        RestClientTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\n        return new ElasticsearchClient(transport);\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchOperations elasticsearchOperations(ElasticsearchClient client) {\r\n        return new ElasticsearchTemplate(client);\r\n    }\r\n\r\n    @PreDestroy\r\n    public void closeClient() {\r\n        try {\r\n            getClient().shutdown();\r\n        } catch (Exception ignored) {\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\npublic class TaskManager {\r\n    private final ExecutorService executor;\r\n    private final ConcurrentHashMap<String, Lock> lockMap;\r\n\r\n    public TaskManager(int concurrencyLevel) {\r\n        this.executor = Executors.newFixedThreadPool(concurrencyLevel);\r\n        this.lockMap = new ConcurrentHashMap<>();\r\n    }\r\n\r\n    public void submitTask(String value) {\r\n        executor.submit(() -> {\r\n            Lock lock = lockMap.computeIfAbsent(value, k -> new ReentrantLock());\r\n            if (lock.tryLock()) {\r\n                try {\r\n                    System.out.println(value);\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ex) {\r\n                    Thread.currentThread().interrupt();\r\n                } finally {\r\n                    lock.unlock();\r\n                    lockMap.remove(value, lock);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void shutdown() {\r\n        executor.shutdown();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        TaskManager manager = new TaskManager(5);\r\n        manager.submitTask(""hi"");\r\n        manager.submitTask(""h"");\r\n        manager.submitTask(""u"");\r\n        manager.submitTask(""y"");\r\n        manager.submitTask(""hi"");\r\n        manager.submitTask(""p"");\r\n        manager.submitTask(""o"");\r\n        manager.submitTask(""bb"");\r\n        manager.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\n@EnableWebSocketSecurity\r\npublic class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\r\n        messages.anyMessage().permitAll();\r\n    }\r\n\r\n    @Override\r\n    protected boolean isCsrfTokenRequired() {\r\n        return false;\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class WebFluxConfig implements WebFluxConfigurer {\r\n\r\n    @Override\r\n    public void configureHttpMessageReaders(List<HttpMessageReader<?>> readers) {\r\n        readers.add(0, new Jaxb2XmlDecoder());\r\n    }\r\n\r\n    @Override\r\n    public void configureHttpMessageWriters(List<HttpMessageWriter<?>> writers) {\r\n        writers.add(0, new Jaxb2XmlEncoder());\r\n    }\r\n}\r\n""]",0,1
"[""import javax.xml.namespace.QName;\r\nimport javax.xml.ws.BindingProvider;\r\nimport javax.xml.ws.Service;\r\nimport java.net.URL;\r\nimport java.util.Map;\r\n\r\npublic class MDFeClient {\r\n    public static String sendRequest(String xmlData) throws Exception {\r\n        URL wsdlURL = new URL(""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx?wsdl"");\r\n        QName serviceName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSinc"");\r\n        QName portName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSincSoap12"");\r\n\r\n        Service service = Service.create(wsdlURL, serviceName);\r\n        MDFeRecepcaoSincSoap12 port = service.getPort(portName, MDFeRecepcaoSincSoap12.class);\r\n\r\n        Map<String, Object> requestContext = ((BindingProvider) port).getRequestContext();\r\n        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, ""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx"");\r\n        requestContext.put(""com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump"", true);\r\n\r\n        MdfeRecepcaoResult response = port.mdfeRecepcao(xmlData);\r\n        return response != null ? response.getContent().toString() : ""No Response"";\r\n    }\r\n}\r\n""]",0,1
"[""import com.lowagie.text.pdf.BaseFont;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\n\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class PdfGenerator {\r\n    public static void generatePdfFromHtml(String htmlString) throws Exception {\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        String fontPath = ""fonts/arialuni.ttf"";\r\n        renderer.getFontResolver().addFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n\r\n        String htmlWithStyle = ""<!DOCTYPE html>"" +\r\n                ""<html lang=\""ru\"">"" +\r\n                ""<head>"" +\r\n                ""    <meta charset=\""UTF-8\""/>"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>"" +\r\n                ""    <style> body { font-family: Arial, sans-serif; } </style>"" +\r\n                ""</head>"" +\r\n                ""<body>"" +\r\n                ""    <h3>?????????????</h3>"" +\r\n                ""</body>"" +\r\n                ""</html>"";\r\n\r\n        renderer.setDocumentFromString(htmlWithStyle);\r\n        renderer.layout();\r\n        renderer.createPDF(byteArrayOutputStream);\r\n        byteArrayOutputStream.writeTo(outputStream);\r\n        outputStream.close();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class CoordinateConverter {\r\n    public static int[][] convertToIntArray(Map<String, Object> params) {\r\n        List<List<Integer>> coordinateList = (List<List<Integer>>) params.get(""coordinate"");\r\n        return coordinateList.stream()\r\n                .map(list -> list.stream().mapToInt(Integer::intValue).toArray())\r\n                .toArray(int[][]::new);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Random;\r\n\r\npublic class CardShuffler {\r\n    public static void shuffleDeck(Card[] deck) {\r\n        Random random = new Random();\r\n        for (int i = deck.length - 1; i > 0; i--) {\r\n            int j = random.nextInt(i + 1);\r\n            Card temp = deck[i];\r\n            deck[i] = deck[j];\r\n            deck[j] = temp;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@PatchMapping(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .flatMap(analysis -> {\r\n                analysis.setResults(results);\r\n                return computeSCARepository.save(analysis);\r\n            })\r\n            .then();\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false);\r\n        marshaller.setMarshallerProperties(Collections.singletonMap(Marshaller.JAXB_FORMATTED_OUTPUT, true));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    String base64Encoded = Base64.getEncoder().encodeToString(documentData);\r\n    binaryData.setBlob(new DataHandler(new ByteArrayDataSource(base64Encoded, ""text/plain"")));\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\n@Log4j2\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Override\r\n    public void sendDocuments(MyRequest request) {\r\n        try {\r\n            template.marshalSendAndReceive(request);\r\n        } catch (Exception e) {\r\n            log.error(e, e.getCause());\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        try {\r\n            value1 = Long.parseLong(txtfirst.getText().toString());\r\n            value2 = Long.parseLong(txtsecond.getText().toString());\r\n            list.clear();\r\n            for (long i = value1; i <= value2; i++) {\r\n                list.add(String.valueOf(i));\r\n            }\r\n            arrayAdapter.notifyDataSetChanged();\r\n        } catch (NumberFormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n});\r\n""]",0,1
"[""#!/bin/bash\r\n\r\nfunction find_java_fd() {\r\n    local file_path=""$1""\r\n    local pid=$(jps -l | grep ""org.apache.catalina.startup.Bootstrap"" | awk '{print $1}')\r\n    \r\n    if [[ -z ""$pid"" ]]; then\r\n        echo ""Tomcat process not found.""\r\n        return 1\r\n    fi\r\n\r\n    local fd_list=$(ls -l /proc/$pid/fd 2>/dev/null | grep ""$file_path"")\r\n\r\n    if [[ -z ""$fd_list"" ]]; then\r\n        echo ""No open file descriptor found for $file_path in Tomcat process.""\r\n        return 2\r\n    fi\r\n\r\n    echo ""Open file descriptor(s) for $file_path in Tomcat process $pid:""\r\n    echo ""$fd_list""\r\n}\r\n\r\nfind_java_fd ""/path/to/your/temp/file""\r\n""]",0,1
"[""import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.StreamResult;\r\nimport javax.xml.transform.stream.StreamSource;\r\nimport java.io.StringReader;\r\nimport java.io.StringWriter;\r\n\r\npublic class XmlTransformer {\r\n    public static String transformXml(String xmlInput) throws TransformerException {\r\n        String xslContent = """"""\r\n                <?xml version=""1.0"" encoding=""UTF-8""?>\r\n                <xsl:stylesheet version=""2.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">\r\n                    <xsl:output method=""xml"" encoding=""utf-8"" indent=""no""/>\r\n                    <xsl:template match=""node()|@*"">\r\n                        <xsl:copy>\r\n                            <xsl:apply-templates select=""node()|@*""/>\r\n                        </xsl:copy>\r\n                    </xsl:template>\r\n                    <xsl:template match=""text()"">\r\n                        <xsl:variable name=""value"" select=""normalize-space(.)""/>\r\n                        <xsl:choose>\r\n                            <xsl:when test=""matches($value, '^-?\\d+$')"">Integer</xsl:when>\r\n                            <xsl:when test=""matches($value, '^(true|false)$', 'i')"">Boolean</xsl:when>\r\n                            <xsl:otherwise>String</xsl:otherwise>\r\n                        </xsl:choose>\r\n                    </xsl:template>\r\n                </xsl:stylesheet>\r\n                """""";\r\n\r\n        TransformerFactory factory = TransformerFactory.newInstance();\r\n        Transformer transformer = factory.newTransformer(new StreamSource(new StringReader(xslContent)));\r\n\r\n        StringWriter writer = new StringWriter();\r\n        transformer.transform(new StreamSource(new StringReader(xmlInput)), new StreamResult(writer));\r\n\r\n        return writer.toString();\r\n    }\r\n\r\n    public static void main(String[] args) throws TransformerException {\r\n        String xmlInput = """"""\r\n                <SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"">\r\n                    <SOAP-ENV:Body>\r\n                        <return>\r\n                            <ICD10Flag>hello</ICD10Flag>\r\n                            <status>123</status>\r\n                        </return>\r\n                    </SOAP-ENV:Body>\r\n                </SOAP-ENV:Envelope>\r\n                """""";\r\n\r\n        System.out.println(transformXml(xmlInput));\r\n    }\r\n}\r\n""]",0,1
"[""import javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\n\r\npublic class DocCommentProcessor {\r\n\r\n    private final Elements elementUtils;\r\n    private final DocTrees docTrees;\r\n\r\n    public DocCommentProcessor(Elements elementUtils, DocTrees docTrees) {\r\n        this.elementUtils = elementUtils;\r\n        this.docTrees = docTrees;\r\n    }\r\n\r\n    public String getFullyQualifiedName(Element element, LinkTree linkTree) {\r\n        String signature = linkTree.getReference().getSignature();\r\n        TypeElement typeElement = elementUtils.getTypeElement(signature);\r\n        \r\n        if (typeElement != null) {\r\n            return typeElement.getQualifiedName().toString();\r\n        }\r\n\r\n        String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n        TypeElement localType = elementUtils.getTypeElement(packageName + ""."" + signature);\r\n\r\n        if (localType != null) {\r\n            return localType.getQualifiedName().toString();\r\n        }\r\n\r\n        return signature;\r\n    }\r\n}\r\n""]",0,1
"[""interface Show1 {\r\n    default void display() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n""]",0,1
"[""package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n    private AutoCompletionBinding<String> nameBinding;\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert"");\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam"");\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (nameBinding != null) nameBinding.dispose();\r\n            if (input.length() == 2) {\r\n                if (input.startsWith(""A"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                }\r\n                nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\n\r\npublic class ExcelExporter {\r\n    public static void exportXls() {\r\n        try (OutputStream os = new FileOutputStream(""test.xls"");\r\n             Workbook wb = new HSSFWorkbook()) {\r\n            Sheet sh = wb.createSheet(""test"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        exportXls();\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.ReactiveTransactionManager;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.transaction.reactive.TransactionalOperator;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Service\r\npublic class ChatService {\r\n\r\n    private final ChatRepository chatRepository;\r\n    private final TransactionalOperator transactionalOperator;\r\n\r\n    public ChatService(ChatRepository chatRepository, ReactiveTransactionManager transactionManager) {\r\n        this.chatRepository = chatRepository;\r\n        this.transactionalOperator = TransactionalOperator.create(transactionManager);\r\n    }\r\n\r\n    public Mono<Chat> createChat(Chat chat) {\r\n        return chatRepository.save(chat)\r\n                .flatMap(c -> Mono.error(new RuntimeException()))\r\n                .as(transactionalOperator::transactional);\r\n    }\r\n}\r\n""]",0,1
"[""import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MetamaskVerificationService {\r\n    public boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\n        String message = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\n        byte[] messageHash = org.web3j.crypto.Hash.sha3(message.getBytes(StandardCharsets.UTF_8));\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n\r\n        if (signatureBytes.length != 65) {\r\n            return false;\r\n        }\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v,\r\n                Arrays.copyOfRange(signatureBytes, 0, 32),\r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger recoveredKey = Sign.signedMessageToKey(messageHash, signatureData);\r\n        String recoveredAddress = ""0x"" + Keys.getAddress(recoveredKey);\r\n\r\n        return recoveredAddress.equalsIgnoreCase(publicWalletId);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.function.Function;\r\nimport java.util.stream.DoubleStream;\r\n\r\npublic enum AggregationType {\r\n    MIN(DoubleStream::min),\r\n    MAX(DoubleStream::max),\r\n    AVERAGE(DoubleStream::average);\r\n\r\n    private final Function<DoubleStream, java.util.OptionalDouble> operation;\r\n\r\n    AggregationType(Function<DoubleStream, java.util.OptionalDouble> operation) {\r\n        this.operation = operation;\r\n    }\r\n\r\n    public java.util.OptionalDouble apply(DoubleStream stream) {\r\n        return operation.apply(stream);\r\n    }\r\n}\r\n\r\npublic class AggregationService {\r\n    public Float someFunction(AggregationType e) {\r\n        return (float) e.apply(provides.stream().mapToDouble(this::someFunc)).orElse(-1);\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<E extends BaseEvent<E, C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<E, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class CoreNonCoreModules {\r\n    public static void main(String[] args) {\r\n        Set<String> bootModules = getBootModules();\r\n        Set<String> platformModules = getPlatformModules();\r\n\r\n        System.out.println(""Core (Boot) Modules:"");\r\n        bootModules.forEach(System.out::println);\r\n\r\n        System.out.println(""\nNon-Core (Platform) Modules:"");\r\n        platformModules.forEach(System.out::println);\r\n    }\r\n\r\n    private static Set<String> getBootModules() {\r\n        Set<String> bootModules = new HashSet<>();\r\n        for (Module module : ModuleLayer.boot().modules()) {\r\n            if (isBootClassLoader(module)) {\r\n                bootModules.add(module.getName());\r\n            }\r\n        }\r\n        return bootModules;\r\n    }\r\n\r\n    private static Set<String> getPlatformModules() {\r\n        Set<String> platformModules = new HashSet<>();\r\n        for (ModuleReference ref : ModuleFinder.ofSystem().findAll()) {\r\n            String moduleName = ref.descriptor().name();\r\n            if (!getBootModules().contains(moduleName)) {\r\n                platformModules.add(moduleName);\r\n            }\r\n        }\r\n        return platformModules;\r\n    }\r\n\r\n    private static boolean isBootClassLoader(Module module) {\r\n        try {\r\n            Class<?> moduleInfoClass = Class.forName(module.getName() + "".module-info"");\r\n            return moduleInfoClass.getClassLoader() == null;\r\n        } catch (ClassNotFoundException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.time.format.TextStyle;\r\nimport java.time.temporal.ChronoField;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.println(""Hello world! "" + parseSpanishDate(""24ENE1982""));\r\n    }\r\n\r\n    private static LocalDate parseSpanishDate(String dateString) {\r\n        Map<String, String> monthAbbreviations = new HashMap<>();\r\n        for (int i = 1; i <= 12; i++) {\r\n            String month = LocalDate.of(2000, i, 1)\r\n                    .getMonth()\r\n                    .getDisplayName(TextStyle.SHORT, new Locale(""es"", ""ES""))\r\n                    .toUpperCase();\r\n            monthAbbreviations.put(month, String.format(""%02d"", i));\r\n        }\r\n\r\n        for (Map.Entry<String, String> entry : monthAbbreviations.entrySet()) {\r\n            if (dateString.contains(entry.getKey())) {\r\n                dateString = dateString.replace(entry.getKey(), entry.getValue());\r\n                break;\r\n            }\r\n        }\r\n\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .appendPattern(""ddMMyyyy"")\r\n                .toFormatter(Locale.ROOT);\r\n\r\n        return LocalDate.parse(dateString, formatter);\r\n    }\r\n}\r\n""]",0,1
"[""import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\nimport org.apache.poi.ss.util.CellReference;\r\n\r\npublic class ExcelFormulaTranslator {\r\n\r\n    public static String translateFormula(String formula, String originalAddress, String destinationAddress) {\r\n        try (Workbook workbook = new XSSFWorkbook()) {\r\n            FormulaRenderingWorkbook renderingWorkbook = (FormulaRenderingWorkbook) workbook;\r\n            Ptg[] tokens = FormulaParser.parse(formula, renderingWorkbook, FormulaParser.FormulaType.CELL, 0);\r\n\r\n            CellReference originalRef = new CellReference(originalAddress);\r\n            CellReference destinationRef = new CellReference(destinationAddress);\r\n            int rowOffset = destinationRef.getRow() - originalRef.getRow();\r\n            int colOffset = destinationRef.getCol() - originalRef.getCol();\r\n\r\n            for (int i = 0; i < tokens.length; i++) {\r\n                if (tokens[i] instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                    org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) tokens[i];\r\n                    if (!ref.isRowRelative() && !ref.isColRelative()) continue;\r\n                    int newRow = ref.getRow() + (ref.isRowRelative() ? rowOffset : 0);\r\n                    int newCol = ref.getColumn() + (ref.isColRelative() ? colOffset : 0);\r\n                    ref.setRow(newRow);\r\n                    ref.setColumn(newCol);\r\n                }\r\n            }\r\n            return FormulaParser.toFormulaString(renderingWorkbook, tokens);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        System.out.println(translateFormula(""=A2+B2"", ""C2"", ""C3""));\r\n        System.out.println(translateFormula(""=A2+B2"", ""C2"", ""D2""));\r\n        System.out.println(translateFormula(""=A2+$B$2"", ""C2"", ""D10""));\r\n        System.out.println(translateFormula(""=SheetA2!A2+B2"", ""C2"", ""C3""));\r\n        System.out.println(translateFormula(""=IF(A2=A3,A4,A5)"", ""A6"", ""C6""));\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.RandomAccessFile;\r\n\r\npublic class FileOverwrite {\r\n    public static void overwriteFile(String filePath, String content, long position) {\r\n        try (RandomAccessFile raf = new RandomAccessFile(filePath, ""rw"")) {\r\n            raf.seek(position);\r\n            raf.write(content.getBytes());\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        overwriteFile(""test.txt"", ""123456789"", 0);\r\n        overwriteFile(""test.txt"", ""hello"", 0);\r\n    }\r\n}\r\n""]",0,1
"[""import com.zaxxer.hikari.HikariDataSource;\r\nimport org.mockito.Mockito;\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.util.Random;\r\n\r\npublic class DataSourceMocker {\r\n    public static DataSource createUnstableDataSource(DataSource realDataSource) {\r\n        HikariDataSource hikariDataSource = (HikariDataSource) realDataSource;\r\n        HikariDataSource spyDataSource = Mockito.spy(hikariDataSource);\r\n\r\n        Mockito.doAnswer(invocation -> {\r\n            if (new Random().nextInt(10) < 3) {\r\n                throw new SQLException(""Simulated connection failure"");\r\n            }\r\n            return invocation.callRealMethod();\r\n        }).when(spyDataSource).getConnection();\r\n\r\n        return spyDataSource;\r\n    }\r\n}\r\n""]",0,1
"[""import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\npublic class PriceServiceTest {\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price existingPrice;\r\n    private PriceRequest priceRequest;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.openMocks(this);\r\n        priceUuid = UUID.randomUUID();\r\n        existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n\r\n        priceRequest = new PriceRequest();\r\n        priceRequest.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(any(Price.class))).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO updatedPriceDTO = priceService.update(priceUuid, priceRequest);\r\n\r\n        assertNotNull(updatedPriceDTO);\r\n        assertEquals(priceRequest.getPriceAmount(), updatedPriceDTO.getPriceAmount());\r\n        verify(priceRepository).findByUuid(priceUuid);\r\n        verify(priceRepository).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n""]",0,1
"[""@EnableMongoRepositories(\r\n    basePackages = ""com.repository.mongo"",\r\n    repositoryImplementationPostfix = ""MongoImpl""\r\n)\r\n@EnableRedisRepositories(\r\n    basePackages = ""com.repository.redis"",\r\n    repositoryImplementationPostfix = ""RedisImpl""\r\n)\r\n@SpringBootApplication\r\npublic class StoreApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n""]",0,1
"[""void updateTaskbarProgress(long rawHandle) {\r\n    Executors.newSingleThreadExecutor().submit(() -> {\r\n        try (var arena = Arena.ofConfined()) {\r\n            var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n            var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n            var clsid = CLSID.allocate(arena);\r\n            var iidTaskbarList3 = IID.allocate(arena);\r\n            var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n            MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n\r\n            int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CoInitialize failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CLSIDFromString failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""IIDFromString failed with error code: "" + hr);\r\n            }\r\n\r\n            hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""CoCreateInstance failed with error code: "" + hr);\r\n            }\r\n\r\n            var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n            var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n            MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n            MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n            MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n            hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""HrInit failed with error code: "" + hr);\r\n            }\r\n\r\n            MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n            hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NORMAL());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n            }\r\n\r\n            for (int i = 0; i <= 100; i += 20) {\r\n                System.out.println(""Progress: "" + i);\r\n                MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressValue failed with error code: "" + hr);\r\n                }\r\n                Thread.sleep(500);\r\n            }\r\n\r\n            hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n            if (hr != ShObjIdl_core_h.S_OK()) {\r\n                throw new RuntimeException(""SetProgressState reset failed with error code: "" + hr);\r\n            }\r\n\r\n        } catch (Throwable ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            ShObjIdl_core_h.CoUninitialize();\r\n        }\r\n    });\r\n}\r\n""]",0,1
"[""public void copyDatabaseFromAssets(String assetFolder, String outputFolder) {\r\n    Executors.newSingleThreadExecutor().execute(() -> {\r\n        Context myContext = requireContext();\r\n        AssetManager assetManager = myContext.getAssets();\r\n        File databasesFolder = new File(myContext.getExternalFilesDir(null).getParent(), outputFolder);\r\n        if (!databasesFolder.exists() && !databasesFolder.mkdirs()) {\r\n            Log.e(""DatabaseCopy"", ""Failed to create database folder."");\r\n            return;\r\n        }\r\n        try {\r\n            String[] files = assetManager.list(assetFolder);\r\n            if (files != null) {\r\n                for (String filename : files) {\r\n                    File outFile = new File(databasesFolder, filename);\r\n                    if (!outFile.exists()) {\r\n                        try (InputStream in = assetManager.open(assetFolder + ""/"" + filename);\r\n                             OutputStream out = new FileOutputStream(outFile)) {\r\n                            byte[] buffer = new byte[4096];\r\n                            int bytesRead;\r\n                            while ((bytesRead = in.read(buffer)) != -1) {\r\n                                out.write(buffer, 0, bytesRead);\r\n                            }\r\n                            out.flush();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Log.e(""DatabaseCopy"", ""No files found in assets folder: "" + assetFolder);\r\n            }\r\n        } catch (IOException e) {\r\n            Log.e(""DatabaseCopy"", ""Error copying database files"", e);\r\n        }\r\n    });\r\n}\r\n""]",0,1
"[""import java.util.ArrayList;\r\n\r\npublic class PerformanceTest {\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 10; i++) {\r\n            measureAddPerformance();\r\n        }\r\n    }\r\n\r\n    private static void measureAddPerformance() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.*;\r\n\r\npublic class ScalableBackgroundPanel extends JPanel {\r\n    private BufferedImage backgroundImage;\r\n\r\n    public ScalableBackgroundPanel(BufferedImage image) {\r\n        this.backgroundImage = image;\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        if (backgroundImage != null) {\r\n            Graphics2D g2d = (Graphics2D) g.create();\r\n            int panelWidth = getWidth();\r\n            int panelHeight = getHeight();\r\n            int imageWidth = backgroundImage.getWidth();\r\n            int imageHeight = backgroundImage.getHeight();\r\n\r\n            double scaleX = (double) panelWidth / imageWidth;\r\n            double scaleY = (double) panelHeight / imageHeight;\r\n            double scale = Math.max(scaleX, scaleY);\r\n\r\n            int newWidth = (int) (imageWidth * scale);\r\n            int newHeight = (int) (imageHeight * scale);\r\n            int x = (panelWidth - newWidth) / 2;\r\n            int y = (panelHeight - newHeight) / 2;\r\n\r\n            g2d.drawImage(backgroundImage, x, y, newWidth, newHeight, this);\r\n            g2d.dispose();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\n\r\npublic class VirtualThreadDatabaseTest {\r\n    public static void main(String[] args) {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<Future<String>> futures;\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(i -> CompletableFuture.supplyAsync(() -> executeTask(i), executorService))\r\n                    .toList();\r\n        }\r\n        futures.forEach(f -> {\r\n            try {\r\n                f.get();\r\n            } catch (InterruptedException | ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        stopWatch.stop();\r\n        System.out.println(""Total execution time: "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n    }\r\n\r\n    private static String executeTask(int taskId) {\r\n        System.out.println(""Task: "" + taskId + "" started"");\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        String result = null;\r\n        try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(""Task: "" + taskId + "" connection established"");\r\n            try (var statement = connection.createStatement()) {\r\n                System.out.println(""Task: "" + taskId + "" executes SQL statement"");\r\n                try (ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"")) {\r\n                    if (resultSet.next()) {\r\n                        result = resultSet.getString(""output"");\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(""Task: "" + taskId + "" completed in "" + stopWatch.getTime(TimeUnit.MILLISECONDS) + "" ms"");\r\n        return result;\r\n    }\r\n}\r\n""]",0,1
"[""private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    try {\r\n        Process p = Runtime.getRuntime().exec(comm);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        p.waitFor();\r\n        p.destroy();\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n\r\n    return out;\r\n}\r\n""]",0,1
"[""private void writeJsonStream(HttpServletResponse response, Stream<Employee> dataStream) {\r\n    try {\r\n        response.setHeader(""content-type"", ""application/json"");\r\n        PrintWriter respWriter = response.getWriter();\r\n        respWriter.write(""["");\r\n        Iterator<Employee> iterator = dataStream.iterator();\r\n        if (iterator.hasNext()) {\r\n            Employee data = iterator.next();\r\n            respWriter.write(jsonSerialize(data));\r\n            entityManager.detach(data);\r\n        }\r\n        while (iterator.hasNext()) {\r\n            Employee data = iterator.next();\r\n            respWriter.write("","");\r\n            respWriter.write(jsonSerialize(data));\r\n            entityManager.detach(data);\r\n        }\r\n        respWriter.write(""]"");\r\n        respWriter.flush();\r\n    } catch (IOException e) {\r\n        log(e);\r\n    }\r\n}\r\n""]",0,1
"[""import com.opencsv.CSVParser;\r\nimport com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        CSVParser parser = new CSVParserBuilder().withSeparator('\t').build();\r\n        try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(parser)\r\n                .build()) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + line[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""path-to-tsv-file"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.Map;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic interface Util {\r\n    void getClient();\r\n}\r\n\r\n@Service\r\npublic class UtilOne implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilOne client"");\r\n    }\r\n}\r\n\r\n@Service\r\npublic class UtilTwo implements Util {\r\n    public void getClient() {\r\n        System.out.println(""UtilTwo client"");\r\n    }\r\n}\r\n\r\n@Component\r\npublic class UtilFactory {\r\n    private final Map<String, Util> utilMap;\r\n    private final AtomicReference<Util> activeUtil = new AtomicReference<>();\r\n\r\n    @Autowired\r\n    public UtilFactory(Map<String, Util> utilMap) {\r\n        this.utilMap = utilMap;\r\n        this.activeUtil.set(utilMap.get(""utilOne""));\r\n    }\r\n\r\n    public Util getActiveUtil() {\r\n        return activeUtil.get();\r\n    }\r\n\r\n    public void switchUtil(String utilKey) {\r\n        if (utilMap.containsKey(utilKey)) {\r\n            activeUtil.set(utilMap.get(utilKey));\r\n        }\r\n    }\r\n}\r\n\r\n@Component\r\npublic class DemoService {\r\n    private final UtilFactory utilFactory;\r\n\r\n    @Autowired\r\n    public DemoService(UtilFactory utilFactory) {\r\n        this.utilFactory = utilFactory;\r\n    }\r\n\r\n    public void useUtil() {\r\n        utilFactory.getActiveUtil().getClient();\r\n    }\r\n\r\n    public void updateUtil(String utilKey) {\r\n        utilFactory.switchUtil(utilKey);\r\n    }\r\n}\r\n\r\n@Configuration\r\npublic class AppConfig {\r\n    @Bean(""utilOne"")\r\n    public Util utilOne() {\r\n        return new UtilOne();\r\n    }\r\n\r\n    @Bean(""utilTwo"")\r\n    public Util utilTwo() {\r\n        return new UtilTwo();\r\n    }\r\n}\r\n""]",0,1
"[""public class CircularMatrixSearch {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) {\r\n                return true;\r\n            } else if (mat[row][col] < num) {\r\n                row++;\r\n            } else {\r\n                col--;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            {10, 20, 30, 40},\r\n            {15, 25, 35, 45},\r\n            {27, 29, 37, 48},\r\n            {32, 33, 39, 50}\r\n        };\r\n\r\n        System.out.println(search(mat, 22)); // true\r\n        System.out.println(search(mat, 23)); // false\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.*;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        this.inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument srcDocument = new XWPFDocument(srcPackage);\r\n\r\n        if (inputs.size() == 1) {\r\n            first = srcDocument;\r\n        } else {\r\n            addPageBreak(first);\r\n            appendDocument(first, srcDocument);\r\n        }\r\n    }\r\n\r\n    private void addPageBreak(XWPFDocument document) {\r\n        XWPFParagraph pageBreak = document.createParagraph();\r\n        pageBreak.setPageBreak(true);\r\n    }\r\n\r\n    private void appendDocument(XWPFDocument target, XWPFDocument source) throws Exception {\r\n        for (IBodyElement elem : source.getBodyElements()) {\r\n            if (elem instanceof XWPFParagraph) {\r\n                XWPFParagraph p = (XWPFParagraph) elem;\r\n                XWPFParagraph newPara = target.createParagraph();\r\n                newPara.getCTP().set(p.getCTP().copy());\r\n            } else if (elem instanceof XWPFTable) {\r\n                XWPFTable table = (XWPFTable) elem;\r\n                XWPFTable newTable = target.createTable();\r\n                newTable.getCTTbl().set(table.getCTTbl().copy());\r\n            }\r\n        }\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\n        WordMerge wm = new WordMerge(faos);\r\n        wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n        wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n        wm.doMerge();\r\n        wm.close();\r\n    }\r\n}\r\n""]",0,1
"[""import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.WildFlyElytronCredentialStore;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.spec.MaskedPasswordSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.provider.WildFlyElytronPasswordProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreUtil {\r\n\r\n    public static CredentialStore getCredentialStore() throws Exception {\r\n        String maskedPasswordString = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n        MaskedPassword maskedPassword = (MaskedPassword) ModularCrypt.decode(maskedPasswordString);\r\n        MaskedPasswordSpec maskedPasswordSpec = maskedPassword.getPasswordSpec();\r\n        Password storePassword = MaskedPassword.createRaw(MaskedPassword.ALGORITHM_MASKED, maskedPasswordSpec);\r\n\r\n        CredentialStore.ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                () -> new PasswordCredential(storePassword));\r\n\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(WildFlyElytronCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        \r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        \r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n\r\n        return credentialStore;\r\n    }\r\n}\r\n""]",0,1
"[""# application.yml (default properties)\r\nspring:\r\n  profiles:\r\n    active: dev\r\n  config:\r\n    import: optional:classpath:.env[.properties]\r\n\r\n---\r\n# application-dev.yml (for dev profile)\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: dev\r\n    import: optional:classpath:.env-dev[.properties]\r\n\r\n---\r\n# application-prod.yml (for prod profile)\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: prod\r\n    import: optional:classpath:.env-prod[.properties]\r\n\r\nbash\r\n# .env (default environment variables)\r\nDB_NAME=default_db\r\nDB_USERNAME=default_user\r\nDB_PASSWORD=default_password\r\n\r\n# .env-dev (for dev profile)\r\nDB_NAME=dev_db\r\nDB_USERNAME=dev_user\r\nDB_PASSWORD=dev_password\r\n\r\n# .env-prod (for prod profile)\r\nDB_NAME=prod_db\r\nDB_USERNAME=prod_user\r\nDB_PASSWORD=prod_password\r\n\r\nbash\r\n# Maven run command with environment variables\r\nmvn spring-boot:run \\r\n  -Dspring-boot.run.profiles=dev \\r\n  -Dspring-boot.run.jvmArguments=""-Xdebug"" \\r\n  -Dspring-boot.run.arguments=""DB_NAME=employee_db DB_USERNAME=postgres DB_PASSWORD=******""\r\n""]",0,1
"[""@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(ProducerTemplate producerTemplate) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.asyncRequestBody(""direct:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n""]",0,1
"[""public void addNewProductRow(LinearLayout parentLayout, Context context) {\r\n    LinearLayout newProductRow = new LinearLayout(context);\r\n    newProductRow.setOrientation(LinearLayout.HORIZONTAL);\r\n    newProductRow.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.MATCH_PARENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n    ));\r\n\r\n    AutoCompleteTextView productName = new AutoCompleteTextView(context);\r\n    productName.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productName.setHint(""Enter Product"");\r\n\r\n    EditText productQty = new EditText(context);\r\n    productQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productQty.setHint(""Enter Quantity"");\r\n    productQty.setInputType(InputType.TYPE_CLASS_NUMBER);\r\n\r\n    EditText productPrice = new EditText(context);\r\n    productPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productPrice.setHint(""Prod Price"");\r\n    productPrice.setFocusable(false);\r\n\r\n    EditText productSpecs = new EditText(context);\r\n    productSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    productSpecs.setHint(""Prod Specs"");\r\n    productSpecs.setFocusable(false);\r\n\r\n    Button removeButton = new Button(context);\r\n    removeButton.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT,\r\n            LinearLayout.LayoutParams.WRAP_CONTENT\r\n    ));\r\n    removeButton.setText(""X"");\r\n    removeButton.setOnClickListener(v -> parentLayout.removeView(newProductRow));\r\n\r\n    newProductRow.addView(productName);\r\n    newProductRow.addView(productQty);\r\n    newProductRow.addView(productPrice);\r\n    newProductRow.addView(productSpecs);\r\n    newProductRow.addView(removeButton);\r\n\r\n    parentLayout.addView(newProductRow);\r\n}\r\n""]",0,1
"[""import org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyLoader {\r\n\r\n    static {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n    }\r\n\r\n    public static PrivateKey loadEncryptedPrivateKey(String privateKeyPath, String passphrase) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(privateKeyPath))) {\r\n            Object object = pemParser.readObject();\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMDecryptorProvider decryptor = new JcePEMDecryptorProviderBuilder().build(passphrase.toCharArray());\r\n                PEMKeyPair keyPair = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n                return new JcaPEMKeyConverter().getPrivateKey(keyPair.getPrivateKeyInfo());\r\n            } else if (object instanceof PEMKeyPair) {\r\n                return new JcaPEMKeyConverter().getPrivateKey(((PEMKeyPair) object).getPrivateKeyInfo());\r\n            } else {\r\n                throw new IllegalArgumentException(""Invalid private key format"");\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            PrivateKey privateKey = loadEncryptedPrivateKey(""path/to/private_key.pem"", ""your_passphrase"");\r\n            System.out.println(""Private Key: "" + Base64.getEncoder().encodeToString(privateKey.getEncoded()));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.UnavailableException;\r\nimport javax.servlet.annotation.WebListener;\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpSessionEvent;\r\nimport javax.servlet.http.HttpSessionListener;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        throw new NullPointerException(""Backend connection failed"");\r\n    }\r\n}\r\n\r\n@WebListener\r\nclass DeploymentValidator implements HttpSessionListener {\r\n    @Override\r\n    public void sessionCreated(HttpSessionEvent se) {\r\n        if (!isBackendAvailable()) {\r\n            throw new RuntimeException(""Deployment Aborted: Backend Server Unreachable"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void sessionDestroyed(HttpSessionEvent se) {}\r\n\r\n    private boolean isBackendAvailable() {\r\n        try {\r\n            new MainServlet().connectToBackendServer();\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            f();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n""]",0,1
"[""public class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        if (mCtx == null) {\r\n            throw new IllegalArgumentException(""Context cannot be null"");\r\n        }\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundDark);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundLight);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundLight);\r\n        }\r\n\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        final PyqModel temp = pyqModelList.get(position);\r\n        holder.textView.setText(temp.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(temp.getPyqTopics());\r\n\r\n        int adapterPosition = holder.getAdapterPosition();\r\n        if (adapterPosition == RecyclerView.NO_POSITION) {\r\n            return;\r\n        }\r\n\r\n        holder.cardView.setCardBackgroundColor(selectedPositions.contains(adapterPosition) ? selectedBackgroundColor : defaultBackgroundColor);\r\n\r\n        holder.cardView.setOnClickListener(v -> {\r\n            boolean isSelected = selectedPositions.contains(adapterPosition);\r\n            if (isSelected) {\r\n                selectedPositions.remove(adapterPosition);\r\n            } else {\r\n                selectedPositions.add(adapterPosition);\r\n            }\r\n\r\n            SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) {\r\n                selectedItems.add(String.valueOf(pos));\r\n            }\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n            editor.apply();\r\n\r\n            notifyItemChanged(adapterPosition);\r\n\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(""pdfName"", temp.getPdfName());\r\n            i.putExtra(""pdfUrl"", temp.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Test\r\nvoid testCase() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    Mockito.doReturn(Optional.of(item)).when(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(""There is an item created with this name"", ex.getMessage());\r\n\r\n    Mockito.verify(itemRepository, times(1)).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n""]",0,1
"[""import android.text.SpannableString;\r\nimport android.text.Spanned;\r\nimport android.text.style.TabStopSpan;\r\nimport android.widget.TextView;\r\n\r\npublic void setAlignedText(TextView textView, String leftText, String rightText) {\r\n    int tabStop = textView.getWidth() - textView.getPaddingLeft() - textView.getPaddingRight();\r\n    SpannableString spannableString = new SpannableString(leftText + ""\t"" + rightText);\r\n    spannableString.setSpan(new TabStopSpan.Standard(tabStop), leftText.length() + 1, leftText.length() + 2, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n    textView.setText(spannableString);\r\n}\r\n""]",0,1
"[""import com.opencsv.CSVWriter;\r\nimport java.io.StringWriter;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter();\r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR,\r\n                 CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER, CSVWriter.DEFAULT_LINE_END)) {\r\n        \r\n        String[] header = {""TestInput"", ""ExpectedOutput"", ""TestOutput"", ""ErrorMessage""};\r\n        writer.writeNext(header);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput() != null && !testCase.getTestOutput().isEmpty()) {\r\n                for (Map<String, Object> testOutput : testCase.getTestOutput()) {\r\n                    writer.writeNext(new String[]{\r\n                            testInput,\r\n                            expectedOutput,\r\n                            testOutput.toString(),\r\n                            errorMessage\r\n                    });\r\n                }\r\n            } else {\r\n                writer.writeNext(new String[]{\r\n                        testInput,\r\n                        expectedOutput,\r\n                        ""No Output"",\r\n                        errorMessage\r\n                });\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class OptimizedDinicCalculator<T> implements MaxAntichainCalculator<T> {\r\n\r\n    private final Map<String, Map<String, Integer>> network = new HashMap<>();\r\n    private final Map<String, Integer> nodeIndex = new HashMap<>();\r\n    private final List<String> nodes = new ArrayList<>();\r\n    private int[] level;\r\n\r\n    public OptimizedDinicCalculator() {\r\n        addNode(""src"");\r\n        addNode(""sink"");\r\n    }\r\n\r\n    private void addNode(String node) {\r\n        if (!nodeIndex.containsKey(node)) {\r\n            nodeIndex.put(node, nodes.size());\r\n            nodes.add(node);\r\n            network.put(node, new HashMap<>());\r\n        }\r\n    }\r\n\r\n    private void addEdge(String from, String to, int capacity) {\r\n        addNode(from);\r\n        addNode(to);\r\n        network.get(from).put(to, capacity);\r\n        network.get(to).put(from, 0);\r\n    }\r\n\r\n    private void bfs(String source) {\r\n        level = new int[nodes.size()];\r\n        Arrays.fill(level, -1);\r\n        level[nodeIndex.get(source)] = 0;\r\n\r\n        Queue<String> queue = new LinkedList<>();\r\n        queue.offer(source);\r\n\r\n        while (!queue.isEmpty()) {\r\n            String u = queue.poll();\r\n            int uIndex = nodeIndex.get(u);\r\n            for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n                String v = entry.getKey();\r\n                int capacity = entry.getValue();\r\n                if (capacity > 0 && level[nodeIndex.get(v)] == -1) {\r\n                    level[nodeIndex.get(v)] = level[uIndex] + 1;\r\n                    queue.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int flow, String sink) {\r\n        if (u.equals(sink)) {\r\n            return flow;\r\n        }\r\n        int uIndex = nodeIndex.get(u);\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int vIndex = nodeIndex.get(v);\r\n            if (capacity > 0 && level[uIndex] < level[vIndex]) {\r\n                int sent = dfs(v, Math.min(flow, capacity), sink);\r\n                if (sent > 0) {\r\n                    network.get(u).put(v, capacity - sent);\r\n                    network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                    return sent;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private Set<String> reach(Map<T, Set<T>> graph, T t, Set<String> visited) {\r\n        Queue<T> queue = new LinkedList<>();\r\n        queue.add(t);\r\n        while (!queue.isEmpty()) {\r\n            T current = queue.poll();\r\n            String currentKey = ""A"" + current.toString();\r\n            visited.add(currentKey);\r\n            for (T neighbor : graph.get(current)) {\r\n                String neighborKey = ""B"" + neighbor.toString();\r\n                if (!visited.contains(neighborKey)) {\r\n                    queue.add(neighbor);\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return visited;\r\n    }\r\n\r\n    public int calculator(Map<T, Set<T>> graph) {\r\n        for (T t : graph.keySet()) {\r\n            addEdge(""src"", ""A"" + t, 1);\r\n            addEdge(""B"" + t, ""sink"", 1);\r\n            Set<String> visitedSubset = new HashSet<>();\r\n            for (String u : reach(graph, t, visitedSubset)) {\r\n                addEdge(""A"" + t, u, 1);\r\n            }\r\n        }\r\n\r\n        int maxFlow = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (level[nodeIndex.get(""sink"")] == -1) break;\r\n            int flow;\r\n            while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) {\r\n                maxFlow += flow;\r\n            }\r\n        }\r\n        return graph.size() - maxFlow;\r\n    }\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n\r\n        Intent stopIntent = new Intent(context, AlarmStopReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n\r\n        String text = ""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment;\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                .addAction(R.drawable.ic_stop, ""Stop"", stopPendingIntent);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static class AlarmStopReceiver extends BroadcastReceiver {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            if (ringtone != null && ringtone.isPlaying()) {\r\n                ringtone.stop();\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\npublic class SearchNumber {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int[] array = new int[10];\r\n        array[0] = 6;\r\n        array[1] = 2;\r\n        array[2] = 8;\r\n        array[3] = 1;\r\n        array[4] = 3;\r\n        array[5] = 0;\r\n        array[6] = 9;\r\n        array[7] = 7;\r\n\r\n        System.out.print(""Search for? "");\r\n        int searching = in.nextInt();\r\n\r\n        boolean found = false;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + "" is at index "" + i + ""."");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!found) {\r\n            System.out.println(searching + "" was not found."");\r\n        }\r\n\r\n        in.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.LineChart;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Path;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CustomLineChart extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        LineChart<Number, Number> lineChart = new LineChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        series1.setName(""Series 1"");\r\n        series1.getData().add(new XYChart.Data<>(1, 5));\r\n        series1.getData().add(new XYChart.Data<>(2, 7));\r\n        series1.getData().add(new XYChart.Data<>(3, 6));\r\n\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n        series2.setName(""Series 2"");\r\n        series2.getData().add(new XYChart.Data<>(1, 3));\r\n        series2.getData().add(new XYChart.Data<>(2, 8));\r\n        series2.getData().add(new XYChart.Data<>(3, 5));\r\n\r\n        lineChart.getData().addAll(series1, series2);\r\n        Scene scene = new Scene(lineChart, 800, 600);\r\n\r\n        Map<String, String> colorMap = new HashMap<>();\r\n        colorMap.put(""Series 1"", ""red"");\r\n        colorMap.put(""Series 2"", ""blue"");\r\n\r\n        lineChart.getData().forEach(series -> {\r\n            String color = colorMap.getOrDefault(series.getName(), ""black"");\r\n            series.getNode().lookup("".chart-series-line"").setStyle(""-fx-stroke: "" + color + "";"");\r\n            for (XYChart.Data<Number, Number> data : series.getData()) {\r\n                data.getNode().setStyle(""-fx-background-color: "" + color + "", white;"");\r\n            }\r\n        });\r\n\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Custom Line Chart"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.shape.MeshView;\r\nimport javafx.scene.shape.TriangleMesh;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineEffect3D extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial(Color.BLUE);\r\n        box.setMaterial(material);\r\n\r\n        MeshView outline = createOutline(box);\r\n        outline.setVisible(false);\r\n\r\n        box.setOnMouseClicked(event -> outline.setVisible(!outline.isVisible()));\r\n\r\n        Group root = new Group(box, outline);\r\n        Scene scene = new Scene(root, 600, 400, true);\r\n        scene.setFill(Color.BLACK);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""JavaFX 3D Outline Effect"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private MeshView createOutline(Box box) {\r\n        float w = (float) box.getWidth() / 2;\r\n        float h = (float) box.getHeight() / 2;\r\n        float d = (float) box.getDepth() / 2;\r\n\r\n        float[] points = {\r\n                -w, -h, -d,   w, -h, -d,   w,  h, -d,  -w,  h, -d,\r\n                -w, -h,  d,   w, -h,  d,   w,  h,  d,  -w,  h,  d\r\n        };\r\n\r\n        int[] faces = {\r\n                0, 0, 1, 0, 2, 0,  2, 0, 3, 0, 0, 0,\r\n                4, 0, 5, 0, 6, 0,  6, 0, 7, 0, 4, 0,\r\n                0, 0, 4, 0, 7, 0,  7, 0, 3, 0, 0, 0,\r\n                1, 0, 5, 0, 6, 0,  6, 0, 2, 0, 1, 0,\r\n                0, 0, 1, 0, 5, 0,  5, 0, 4, 0, 0, 0,\r\n                3, 0, 2, 0, 6, 0,  6, 0, 7, 0, 3, 0\r\n        };\r\n\r\n        TriangleMesh mesh = new TriangleMesh();\r\n        mesh.getPoints().setAll(points);\r\n        mesh.getFaces().setAll(faces);\r\n\r\n        MeshView outline = new MeshView(mesh);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setCullFace(CullFace.NONE);\r\n        return outline;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\npublic class Board {\r\n    private Scanner scan = new Scanner(System.in);\r\n\r\n    public String inputTake() {\r\n        String guess;\r\n        while (true) {\r\n            System.out.println(""choose a word, pick carefully: "");\r\n            guess = scan.next();\r\n            if (checkInput(guess)) {\r\n                return guess;\r\n            }\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        }\r\n    }\r\n\r\n    private boolean checkInput(String input) {\r\n        return input.length() == 5 && input.matches(""[a-zA-Z]+"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n""]",0,1
"[""package com.question.config;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Primary;\r\n\r\n@Configuration\r\npublic class LanguageConfig {\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    private final LanguageService frenchLanguageService;\r\n    private final LanguageService englishLanguageService;\r\n\r\n    public LanguageConfig(LanguageService frenchLanguageService, LanguageService englishLanguageService) {\r\n        this.frenchLanguageService = frenchLanguageService;\r\n        this.englishLanguageService = englishLanguageService;\r\n    }\r\n\r\n    @Bean\r\n    @Primary\r\n    public LanguageService languageService() {\r\n        return ""french"".equalsIgnoreCase(configuration) ? frenchLanguageService : englishLanguageService;\r\n    }\r\n}\r\n""]",0,1
"[""@Mapper\r\npublic interface WealthProdAccountInfoMapper {\r\n\r\n    WealthProdAccountInfoMapper INSTANCE = Mappers.getMapper(WealthProdAccountInfoMapper.class);\r\n\r\n    @Mapping(target = ""."", source = ""wealthProdAccountInfoDTO"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n    FileReader filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n    String line;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<>();\r\n            int index = 0;\r\n            for (String each : line.split("","")) {\r\n                myRecord.put(headers.get(index), each);\r\n                index++;\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n    br.close();\r\n    System.out.println(""My Table: "" + myTable);\r\n}\r\n""]",0,1
"[""import org.springframework.http.server.reactive.ServerHttpResponse;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long requestTime = System.nanoTime();\r\n        return chain.filter(exchange)\r\n                .doFinally(signalType -> {\r\n                    long deltaTime = System.nanoTime() - requestTime;\r\n                    ServerHttpResponse response = exchange.getResponse();\r\n                    response.beforeCommit(() -> {\r\n                        response.getHeaders().add(""server-timing"", Long.toString(deltaTime));\r\n                        return Mono.empty();\r\n                    });\r\n                });\r\n    }\r\n}\r\n""]",0,1
"[""from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError, Extra\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n\r\ntry:\r\n    print(Model(**{'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit', 'n': 1}))\r\nexcept ValidationError as e:\r\n    print(e)\r\n""]",0,1
"[""from sqlalchemy import Integer, String, ForeignKey\r\nfrom sqlalchemy.orm import DeclarativeBase, mapped_column, Mapped\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = ""user""\r\n\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    name: Mapped[str] = mapped_column(String, nullable=False)\r\n    email: Mapped[str] = mapped_column(String, unique=True, nullable=False)\r\n\r\nclass Address(Base):\r\n    __tablename__ = ""address""\r\n\r\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\r\n    user_id: Mapped[int] = mapped_column(ForeignKey(""user.id""))\r\n    street: Mapped[str] = mapped_column(String, nullable=False)\r\n    city: Mapped[str] = mapped_column(String, nullable=False)\r\n""]",0,1
"[""def demonstrate_format_behavior():\r\n    results = {}\r\n    try:\r\n        results[""index""] = '{x[1]}'.format(x=""asd"")\r\n    except Exception as e:\r\n        results[""index""] = str(e)\r\n    \r\n    try:\r\n        results[""slice""] = '{x[1:3]}'.format(x=""asd"")\r\n    except Exception as e:\r\n        results[""slice""] = str(e)\r\n    \r\n    return results\r\n\r\nprint(demonstrate_format_behavior())\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Response\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"")\r\ndef read_root():\r\n    return {""Hello"": ""World""}\r\n\r\n@app.post(""/input"")\r\ndef input_request(request: Request):\r\n    body = request.body()\r\n    body = body.decode(""utf-8"") if isinstance(body, bytes) else body\r\n    return Response(content=body, media_type=""application/xml"")\r\n\r\n@app.post(""/input_sync"")\r\ndef input_request_sync(request: Request):\r\n    body = request.stream().read()\r\n    return Response(content=body, media_type=""application/xml"")\r\n""]",0,1
"[""def explain_src_folder_usage():\r\n    return """"""\r\nThe 'src/' layout in Python packaging is used to prevent certain issues related to import resolution when developing a package. The main reasons include:\r\n\r\n1. **Avoiding Accidental Imports from the Local Directory**:\r\n   - Without the 'src/' layout, running tests or scripts from the project root might import the package from the local directory instead of the installed version, leading to inconsistencies.\r\n\r\n2. **Encouraging Explicit Package Installation**:\r\n   - With 'src/', the package must be installed (e.g., via `pip install -e .`) before it can be imported, ensuring that all dependencies are properly managed.\r\n\r\n3. **Reducing Conflicts with Other Modules**:\r\n   - If the package is directly in the root directory, it might shadow standard library modules or third-party dependencies.\r\n\r\nWhile it is possible to place the package directly in the root directory, the 'src/' structure is recommended for better isolation, consistency, and avoiding common import issues in larger projects.\r\n""""""\r\n""]",0,1
"[""def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    already_seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in already_seen:\r\n            continue\r\n        already_seen.add(log_hash)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'}\r\n]\r\n\r\nunique_logs = list(deduplicate(logs))\r\n""]",0,1
"[""from starlette.requests import Request\r\nfrom starlette.responses import Response\r\nimport time\r\n\r\n@app.middleware(""http"")\r\nasync def add_process_time_header(request: Request, call_next):\r\n    start_time = time.time()\r\n\r\n    response = await call_next(request)\r\n    body = b""""\r\n    \r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n\r\n    process_time = time.time() - start_time\r\n    response = Response(content=body, status_code=response.status_code, headers=dict(response.headers), media_type=response.media_type)\r\n    response.headers[""X-Process-Time""] = str(process_time)\r\n\r\n    return response\r\n""]",0,1
"[""import numpy as np\r\n\r\nclass NonRandomNumberGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.iterator = iter(self.sequence)\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.iterator)\r\n        except StopIteration:\r\n            self.iterator = iter(self.sequence)\r\n            return next(self.iterator)\r\n\r\nrng = lambda: np.random.randint(2, 20) // 2\r\nnrng = NonRandomNumberGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n""]",0,1
"[""# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    return ""Database Session""\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe_fixture():\r\n    return {""data"": [1, 2, 3]}\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe_fixture):\r\n    assert my_dataframe_fixture[""data""] == [1, 2, 3]\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    assert db_session == ""Database Session""\r\n""]",0,1
"[""import requests\r\n\r\ndef get_dropbox_refresh_token(app_key, app_secret, auth_code):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""code"": auth_code,\r\n        ""grant_type"": ""authorization_code"",\r\n        ""client_id"": app_key,\r\n        ""client_secret"": app_secret,\r\n        ""redirect_uri"": ""https://your_redirect_uri""\r\n    }\r\n    response = requests.post(url, data=data)\r\n    return response.json()\r\n\r\ndef get_dropbox_access_token(app_key, app_secret, refresh_token):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""refresh_token"": refresh_token,\r\n        ""grant_type"": ""refresh_token"",\r\n        ""client_id"": app_key,\r\n        ""client_secret"": app_secret\r\n    }\r\n    response = requests.post(url, data=data)\r\n    return response.json()\r\n""]",0,1
"[""from sqlalchemy.future import select\r\n\r\nasync def fetch_payments(session):\r\n    query = (\r\n        select(\r\n            models.Payment.organization_id,\r\n            models.Payment.id,\r\n            models.Payment.payment_type,\r\n        )\r\n        .where(models.Payment.is_cleared.is_(True))\r\n        .limit(10)\r\n    )\r\n    result = await session.execute(query)\r\n    return result.fetchall()\r\n""]",0,1
"[""import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(""This line is executed"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(""CancelledError caught inside __aexit__"")\r\n            return True\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guaranteed_values(A_eq, b_eq, num_vars):\r\n    guaranteed_zeros = set(range(num_vars))\r\n    guaranteed_ones = set(range(num_vars))\r\n\r\n    for i in range(num_vars):\r\n        c = np.zeros(num_vars)\r\n        c[i] = 1\r\n\r\n        res_min = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_vars, method='highs-ipm')\r\n        res_max = linprog(-c, A_eq=A_eq, b_eq=b_eq, bounds=[(0, 1)] * num_vars, method='highs-ipm')\r\n\r\n        if res_min.success and res_max.success:\r\n            if np.isclose(res_min.x[i], 1) and np.isclose(res_max.x[i], 1):\r\n                guaranteed_ones.add(i)\r\n            elif np.isclose(res_min.x[i], 0) and np.isclose(res_max.x[i], 0):\r\n                guaranteed_zeros.add(i)\r\n\r\n    return sorted(guaranteed_zeros), sorted(guaranteed_ones)\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  # x1 + x2 + x3 = 2\r\n    [1, 0, 0, 1],  # x1 + x4 = 1\r\n    [1, 1, 0, 0]   # x1 + x2 = 1\r\n])\r\nb_eq = np.array([2, 1, 1])\r\nnum_vars = 4\r\n\r\nzeros, ones = find_guaranteed_values(A_eq, b_eq, num_vars)\r\nprint(""Guaranteed Zeros:"", zeros)\r\nprint(""Guaranteed Ones:"", ones)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndef plot_polars_with_plotly():\r\n    df = pl.DataFrame(\r\n        {\r\n            ""nrs"": [1, 2, 3, None, 5],\r\n            ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n            ""random"": np.random.rand(5),\r\n            ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n        }\r\n    )\r\n\r\n    fig = px.bar(df.to_dicts(), x='names', y='random')\r\n    fig.show()\r\n\r\nplot_polars_with_plotly()\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom hydra.core.config_store import ConfigStore\r\nfrom pydantic import BaseModel, validator\r\n\r\nclass PydanticValidator(BaseModel):\r\n    param: int\r\n\r\n    @validator(""param"")\r\n    def check_positive(cls, v):\r\n        if v <= 0:\r\n            raise ValueError(""param must be positive"")\r\n        return v\r\n\r\n@dataclass\r\nclass Config:\r\n    param: int\r\n\r\n    def __post_init__(self):\r\n        validated = PydanticValidator(param=self.param)\r\n        self.param = validated.param\r\n\r\ncs = ConfigStore.instance()\r\ncs.store(name=""config"", node=Config)\r\n""]",0,1
"[""def get_spouse(name: str) -> str:\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            return ""Unknown""\r\n\r\nspouse = get_spouse(""John"")\r\nprint(spouse)\r\n""]",0,1
"[""def get_yolov8_imgsz_behavior():\r\n    return {\r\n        ""description"": ""YOLOv8 resizes images while maintaining aspect ratio using padding (letterboxing)."",\r\n        ""training"": {\r\n            ""imgsz"": ""Defines the target size (width and height) for training images."",\r\n            ""effect"": ""Images are resized to fit within the specified size while preserving aspect ratio using padding.""\r\n        },\r\n        ""inference"": {\r\n            ""imgsz"": ""Defines the target size for input images during inference."",\r\n            ""effect"": ""Images are resized using letterboxing, maintaining aspect ratio and ensuring detections align with original image dimensions.""\r\n        }\r\n    }\r\n\r\nprint(get_yolov8_imgsz_behavior())\r\n""]",0,1
"[""from llama_cpp import Llama\r\n\r\ndef run_gguf_inference(model_path: str, prompt: str, max_tokens: int = 256, temperature: float = 0.7, n_threads: int = 4) -> str:\r\n    llm = Llama(model_path=model_path, n_threads=n_threads)\r\n    response = llm(\r\n        prompt,\r\n        max_tokens=max_tokens,\r\n        temperature=temperature,\r\n        echo=True\r\n    )\r\n    return response[""choices""][0][""text""]\r\n\r\nif __name__ == '__main__':\r\n    model_file = ""path/to/your/model.gguf""\r\n    user_prompt = ""Explain the theory of relativity.""\r\n    result = run_gguf_inference(model_file, user_prompt)\r\n    print(result)\r\n""]",0,1
"[""javascript\r\nclass Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return ""Squarish:"" + h.split(':')[1];\r\n    }\r\n}\r\n\r\nconst rect = new Rectangle(6, 4);\r\nrect.shoutArea();\r\n\r\nconst squa = new Square(5);\r\nsqua.shoutArea();\r\n\r\nconsole.log(squa.squaHello());\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndef fill_missing_values(df):\r\n    for col in df.columns:\r\n        if col + '_a' in df.columns:\r\n            df[col] = df[col].fillna(df[col + '_a'])\r\n    return df\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\ndf = fill_missing_values(df)\r\nprint(df)\r\n""]",0,1
"[""from elasticsearch import Elasticsearch\r\n\r\ndef connect_elasticsearch(es_host, es_port, es_username, es_password, es_index):\r\n    es = Elasticsearch(\r\n        hosts=[f""http://{es_host}:{es_port}""],\r\n        basic_auth=(es_username, es_password),\r\n        verify_certs=False\r\n    )\r\n    \r\n    es.indices.refresh(index=es_index)\r\n    return es\r\n\r\nes_host = ""<>""\r\nes_port = ""<>""\r\nes_username = ""<>""\r\nes_password = ""<>""\r\nes_index = ""<>""\r\n\r\nes = connect_elasticsearch(es_host, es_port, es_username, es_password, es_index)\r\n""]",0,1
"[""import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        if isinstance(value, str):\r\n            value = value.lower()\r\n            for member in cls:\r\n                if member.value == value:\r\n                    return member\r\n        return None\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import torch\r\nimport torch.nn as nn\r\nimport torch.optim as optim\r\n\r\n\r\nclass HookedModel:\r\n    def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n        self.model = model\r\n        self.discard_ratio = discard_ratio\r\n        self.attentions = []\r\n        self.attention_gradients = []\r\n\r\n        for name, module in self.model.named_modules():\r\n            if attention_layer_name in name:\r\n                module.register_forward_hook(self.get_attention)\r\n                module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    def get_attention(self, module, input, output):\r\n        self.attentions.append(output.detach().cpu())\r\n\r\n    def get_attention_gradient(self, module, grad_input, grad_output):\r\n        self.attention_gradients.append(grad_input[0].detach().cpu())\r\n\r\n    def __call__(self, input_tensor, target_class):\r\n        self.model.zero_grad()\r\n        output = self.model(input_tensor)\r\n        loss = output[:, target_class].sum()\r\n        loss.backward()\r\n        return output\r\n\r\n\r\nclass SimpleModel(nn.Module):\r\n    def __init__(self):\r\n        super(SimpleModel, self).__init__()\r\n        self.conv1 = nn.Conv2d(1, 10, kernel_size=3)\r\n        self.relu = nn.ReLU()\r\n        self.fc1 = nn.Linear(100, 10)\r\n\r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self.relu(x)\r\n        x = x.view(x.size(0), -1)\r\n        x = self.fc1(x)\r\n        return x\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    model = SimpleModel()\r\n    hook = HookedModel(model, attention_layer_name=""conv1"")\r\n    \r\n    input_tensor = torch.randn(1, 1, 10, 10)\r\n    output = hook(input_tensor, target_class=1)\r\n\r\n    print(""Forward Hooks Captured Outputs:"", hook.attentions)\r\n    print(""Backward Hooks Captured Gradients:"", hook.attention_gradients)\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""cwd"": ""C:/path/to/your/base/directory"",\r\n            ""args"": [\r\n                ""${input:dataDir}""\r\n            ]\r\n        }\r\n    ],\r\n    ""inputs"": [\r\n        {\r\n            ""id"": ""dataDir"",\r\n            ""type"": ""promptString"",\r\n            ""description"": ""Enter the relative path to the data directory"",\r\n            ""default"": ""default_directory""\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""import bpy\r\n\r\ndef convert_triangles_to_quads(input_path, output_path):\r\n    bpy.ops.wm.read_factory_settings(use_empty=True)\r\n    \r\n    bpy.ops.import_scene.obj(filepath=input_path, use_smooth_groups=False, use_image_search=False)\r\n    \r\n    obj = bpy.context.selected_objects[0]\r\n    bpy.context.view_layer.objects.active = obj\r\n    \r\n    bpy.ops.object.mode_set(mode='EDIT')\r\n    bpy.ops.mesh.select_all(action='SELECT')\r\n    bpy.ops.mesh.tris_convert_to_quads(beauty=True)\r\n    bpy.ops.object.mode_set(mode='OBJECT')\r\n    \r\n    bpy.ops.export_scene.obj(filepath=output_path)\r\n\r\nconvert_triangles_to_quads('mushroom-shelve-1-merged.obj', 'quad_mesh.obj')\r\n""]",0,1
"[""from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\nfrom langchain.callbacks.base import CallbackManager, StdOutCallbackHandler\r\n\r\ncallback_manager = CallbackManager([StdOutCallbackHandler()])\r\n\r\nprompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\nmodel = ChatOpenAI(callback_manager=callback_manager)\r\noutput_parser = StrOutputParser()\r\n\r\nchain = prompt | model | output_parser\r\n\r\nchain.invoke({""topic"": ""ice cream""})\r\n""]",0,1
"[""from transformers import AutoImageProcessor, AutoModelForSemanticSegmentation\r\n\r\ndef load_segmentation_model():\r\n    id2label = {0: ""background"", 1: ""target""}\r\n    label2id = {""background"": 0, ""target"": 1}\r\n    \r\n    image_processor = AutoImageProcessor.from_pretrained(""Carve/u2net-universal"")\r\n    model = AutoModelForSemanticSegmentation.from_pretrained(\r\n        ""Carve/u2net-universal"",\r\n        id2label=id2label,\r\n        label2id=label2id\r\n    )\r\n    \r\n    return image_processor, model\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef replace_values(df: pl.DataFrame) -> pl.DataFrame:\r\n    return df.with_columns(\r\n        pl.when(pl.col(""A"").is_in([""foo"", ""spam""]))\r\n        .then(pl.lit(""XX""))\r\n        .otherwise(pl.col(""L""))\r\n        .alias(""L""),\r\n        pl.when(pl.col(""A"").is_in([""foo"", ""spam""]))\r\n        .then(pl.lit(""XX""))\r\n        .otherwise(pl.col(""G""))\r\n        .alias(""G"")\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""A"": [""foo"", ""ham"", ""spam"", ""egg""],\r\n        ""L"": [""A54"", ""A12"", ""B84"", ""C12""],\r\n        ""G"": [""X34"", ""C84"", ""G96"", ""L6""],\r\n    }\r\n)\r\n\r\ndf = replace_values(df)\r\nprint(df)\r\n""]",0,1
"[""import numpy as np\r\nfrom time import time\r\n\r\ndef optimized_numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {i: np.random.rand(array_size) for i in range(num_arrays)}\r\n    \r\n    if do_cache:\r\n        cache = {}\r\n\r\n    for _ in range(num_iter):\r\n        i, j = np.random.randint(num_arrays, size=2)\r\n\r\n        if do_cache:\r\n            key = (i, j) if i < j else (j, i)\r\n            if key in cache:\r\n                a = cache[key]\r\n            else:\r\n                a = np.add(arrays[i], arrays[j], dtype=np.float64)\r\n                cache[key] = a\r\n        else:\r\n            a = np.add(arrays[i], arrays[j], dtype=np.float64)\r\n\r\n    return arrays\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef count_star_combinations(inp):\r\n    pivot_df = inp.pivot_table(index=['month', 'item'], columns='star', aggfunc='size', fill_value=0)\r\n    pivot_df.columns = [f'star_{col}_cnt' for col in pivot_df.columns]\r\n    return pivot_df.reset_index()\r\n\r\ninp = pd.DataFrame({'month':[1,1,1,1,1,2,2,2], \r\n                    'item':[10,10,10,10,20,20,20,20], \r\n                    'star':[1,2,1,3,3,2,2,3]})\r\n\r\nresult = count_star_combinations(inp)\r\nprint(result)\r\n""]",0,1
"[""import discord\r\nimport asyncio\r\nimport time\r\nfrom discord.ext import commands\r\nfrom random import choice\r\n\r\nclass MyCog(commands.Cog):\r\n    def __init__(self, client):\r\n        self.client = client\r\n\r\n    @commands.Cog.listener(""on_message"")\r\n    async def on_message(self, message):\r\n        start = time.time()\r\n\r\n        if message.author.bot:\r\n            return\r\n        if message.type != discord.MessageType.default:\r\n            return\r\n        print(f""2 if checks done - {time.time() - start}"")\r\n\r\n        if isinstance(message.channel, discord.channel.DMChannel):\r\n            return await message.reply(\r\n                f'Hey {message.author.name}!\nLeider bin ich der falsche Ansprechpartner, falls du Hilfe suchst.. '\r\n                f'\nBetrete den https://discord.gg/deutschland Bl4cklist-Discord und sende unserem Support-Bot '\r\n                f'`Bl4cklist` eine Private-Nachricht, damit sich unser Support-Team um dein Problem so schnell '\r\n                f'es geht kÃÂÃÂ¼mmern kann.')\r\n\r\n        prefix_now = await get_prefix(message)\r\n        if message.content.startswith(str(prefix_now)):\r\n            try:\r\n                await message.reply(\r\n                    ""ÃÂÃÂ - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung ""\r\n                    ""zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen."")\r\n            except discord.Forbidden:\r\n                pass\r\n            return\r\n\r\n        if self.client.user in message.mentions:\r\n            response = choice([\r\n                ""Mit mir kann man die coolsten Gewinnspiele starten!"",\r\n                'Wird Zeit jemanden den Tag zu versÃÂÃÂ¼ÃÂÃÂen!',\r\n                ""Wer nicht auf diesem Server ist, hat die Kontrolle ÃÂÃÂ¼ber sein Leben verloren!"",\r\n                ""Wann startet endlich ein neues Gewinnspiel?"",\r\n                ""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lÃÂÃÂ¼gt!""\r\n            ])\r\n            try:\r\n                await message.reply(f""{response} (Mein PrÃÂÃÂ¤fix: `/`)"", mention_author=False)\r\n            except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n                pass\r\n            return\r\n\r\n        print(f""5 if checks done - {time.time() - start}"")\r\n\r\n        count = 1\r\n        mydb = await getConnection()\r\n        mycursor = await mydb.cursor()\r\n\r\n        await mycursor.execute(""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s"",\r\n                               (message.author.guild.id,))\r\n        in_database = await mycursor.fetchone()\r\n\r\n        if in_database:\r\n            if in_database[0]:\r\n                role_list = in_database[0].split("" "")\r\n                for roleid in role_list:\r\n                    if roleid.isdigit():\r\n                        role = message.author.guild.get_role(int(roleid))\r\n                        if role and role in message.author.roles:\r\n                            await mycursor.close()\r\n                            mydb.close()\r\n                            return\r\n\r\n            if in_database[1]:\r\n                role_list = in_database[1].split("" "")\r\n                for roleid in role_list:\r\n                    if roleid.isdigit():\r\n                        role = message.author.guild.get_role(int(roleid))\r\n                        if role and role in message.author.roles:\r\n                            count += 1\r\n\r\n        await mycursor.execute(""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s"",\r\n                               (message.author.guild.id,))\r\n        in_database1 = await mycursor.fetchone()\r\n        if in_database1 and in_database1[0]:\r\n            channel_list = in_database1[0].split("" "")\r\n            if str(message.channel.id) in channel_list:\r\n                await mycursor.close()\r\n                mydb.close()\r\n                return\r\n\r\n        print(f""mysql checks done - {time.time() - start}"")\r\n\r\n        await mycursor.execute(""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s"",\r\n                               (message.author.guild.id, message.author.id))\r\n        in_database2 = await mycursor.fetchone()\r\n\r\n        if in_database2:\r\n            await mycursor.execute(\r\n                ""UPDATE guild_message_count SET message_count = message_count + %s WHERE guild_id = %s AND user_id = %s"",\r\n                (count, message.author.guild.id, message.author.id))\r\n        else:\r\n            await mycursor.execute(\r\n                ""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)"",\r\n                (message.author.id, count, message.author.guild.id))\r\n\r\n        await mydb.commit()\r\n        await mycursor.close()\r\n        mydb.close()\r\n\r\n        print(f""task done - {time.time() - start}"")\r\n\r\ndef run_bot():\r\n    intents = discord.Intents.default()\r\n    intents.messages = True\r\n    client = commands.Bot(command_prefix=""/"", intents=intents)\r\n\r\n    @client.event\r\n    async def on_ready():\r\n        print(f""Logged in as {client.user}"")\r\n\r\n    client.add_cog(MyCog(client))\r\n    \r\n    asyncio.run(client.start('YOUR_TOKEN'))\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom starlette.middleware.sessions import SessionMiddleware\r\nfrom typing import Optional\r\n\r\napp = FastAPI()\r\napp.add_middleware(SessionMiddleware, secret_key=""your_secret_key"")\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\n@app.get(""/"", response_class=HTMLResponse, name=""homepage"")\r\nasync def get_main_data(request: Request):\r\n    msg = request.session.pop(""msg"", None)\r\n    result = request.session.pop(""result"", None)\r\n    return templates.TemplateResponse(""home.html"", {""request"": request, ""msg"": msg, ""result"": result})\r\n\r\n@app.post(""/"", name=""homepage_post"")\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    if condition:\r\n        request.session[""result""] = str(trans)\r\n    else:\r\n        request.session[""msg""] = str(err)\r\n    return RedirectResponse(url=request.url_for(""homepage""), status_code=303)\r\n""]",0,1
"[""import os\r\nfrom fastapi import Depends, Security, HTTPException\r\n\r\nAPI_KEY = ""your_secret_api_key""\r\napi_key_header_auth = ""X-API-Key""\r\n\r\nasync def api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    if os.getenv(""ENV"", ""development"") == ""production"":\r\n        if api_key_header != API_KEY:\r\n            raise HTTPException(\r\n                status_code=401,\r\n                detail=""Invalid API Key"",\r\n            )\r\n""]",0,1
"[""from pydantic import BaseModel\r\nfrom typing import Any\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: Any):\r\n        return cls(int(v))\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\n\r\nclass CustomBaseModel(BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: lambda v: str(v)}\r\n        allow_population_by_field_name = True\r\n""]",0,1
"[""from typing import Optional, List\r\nfrom sqlmodel import SQLModel, Field, Relationship, Session, create_engine, select\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n\r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": ""Node.id""})\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef create_and_insert_nodes():\r\n    engine = create_engine(""sqlite:///:memory:"")\r\n    SQLModel.metadata.create_all(engine)\r\n\r\n    with Session(engine) as session:\r\n        root = Node(data=""Root"")\r\n        child1 = Node(data=""Child 1"", parent=root)\r\n        child2 = Node(data=""Child 2"", parent=root)\r\n        grandchild = Node(data=""Grandchild"", parent=child1)\r\n\r\n        session.add(root)\r\n        session.commit()\r\n\r\n        stmt = select(Node).where(Node.parent_id == None)\r\n        root_node = session.exec(stmt).first()\r\n        return root_node\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import TypeVar, Callable\r\n\r\nT = TypeVar('T')\r\n\r\ndef something_else(klass: T) -> T:\r\n    return klass\r\n\r\ndef my_dataclass(klass: T) -> T:\r\n    return something_else(dataclass(klass))\r\n\r\n@dataclass\r\nclass TestA:\r\n    a: int\r\n    b: str\r\n\r\nTestA(0, """")\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndef transform_dataframe(df):\r\n    df['C'] = df.groupby(['A', 'B']).cumcount() + 1\r\n    result = df.pivot_table(index=['A', 'B'], columns='C', values='C', aggfunc='first')\r\n    result.columns = [f'C{i}' for i in result.columns]\r\n    result.reset_index(inplace=True)\r\n    return result\r\n\r\ndf = pd.DataFrame({\r\n    'A': ['a', 'a', 'a', 'c', 'c', 'c', 'c', 'c', 'e', 'e', 'e', 'e'],\r\n    'B': ['b', 'b', 'b', 'd', 'd', 'd', 'd', 'd', 'b', 'b', 'b', 'b'],\r\n    'C': [1, 2, 3, 7, 8, 5, 6, 3, 4, 3, 2, 1]\r\n})\r\n\r\ntransformed_df = transform_dataframe(df)\r\nprint(transformed_df)\r\n""]",0,1
"[""import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n        \r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\r\n        process.wait()\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=response.jpg'})\r\n""]",0,1
"[""class Point:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n        self._tuple = (x, y)\r\n\r\n    @property\r\n    def tuple(self):\r\n        return self._tuple\r\n\r\n    def __repr__(self):\r\n        return f""Point({self.x}, {self.y})""\r\n\r\n    def __str__(self):\r\n        return f""({self.x}, {self.y})""\r\n\r\n    def __getattr__(self, name):\r\n        if name == 'tuple':\r\n            return self._tuple\r\n        raise AttributeError(f""'{type(self).__name__}' object has no attribute '{name}'"")\r\n""]",0,1
"[""import numpy as np\r\nfrom numba import njit\r\n\r\n@njit(parallel=True)\r\ndef find_closest_y(z_coordinates, z_size):\r\n    x_size, y_size = z_coordinates.shape\r\n    y_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for i in range(z_size):\r\n        for x in range(x_size):\r\n            closest_y = np.argmin(np.abs(z_coordinates[x] - i))\r\n            y_coordinates[x, i] = closest_y\r\n    return y_coordinates\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = find_closest_y(z_coordinates, z_size)\r\n""]",0,1
"[""from ultralytics import YOLO\r\n\r\ndef get_class_data():\r\n    model = YOLO(""yolov8n.pt"")\r\n    results = model.predict(source=""0"")\r\n    class_data = []\r\n    for result in results:\r\n        for obj in result.pred[0]:\r\n            class_data.append(result.names[int(obj[5])])\r\n    return class_data\r\n\r\nclass_data = get_class_data()\r\n""]",0,1
"[""import itertools\r\n\r\ndef generate_combinations(letters, k, n):\r\n    all_combinations = set()\r\n    \r\n    for groups in itertools.combinations(itertools.combinations(letters, n), k):\r\n        sorted_groups = tuple(sorted(''.join(group) for group in groups))\r\n        all_combinations.add(sorted_groups)\r\n    \r\n    return [list(group) for group in all_combinations]\r\n\r\nletters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L']\r\nresult = generate_combinations(letters, 4, 3)\r\nprint(result)\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef compute_columns(df):\r\n    max_value = df[COL_VALUE].max()\r\n\r\n    sum_lower = df.select(pl.col(COL_VALUE)).to_series().apply(\r\n        lambda x: df.filter(pl.col(COL_VALUE) < x).select(pl.sum(COL_VALUE)).to_numpy()[0]\r\n    )\r\n\r\n    max_other = df[COL_VALUE].apply(\r\n        lambda x: max_value if x != max_value else df.filter(pl.col(COL_VALUE) != x).select(pl.col(COL_VALUE)).max()\r\n    )\r\n\r\n    return df.with_columns(\r\n        pl.Series(""sum_lower"", sum_lower),\r\n        pl.Series(""max_other"", max_other),\r\n    )\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\ndf = compute_columns(df)\r\nprint(df)\r\n""]",0,1
"[""from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\n\r\ndef get_logits_from_pipeline(texts):\r\n    selected_model = ""distilbert-base-uncased-finetuned-sst-2-english""\r\n    tokenizer = AutoTokenizer.from_pretrained(selected_model)\r\n    model = AutoModelForSequenceClassification.from_pretrained(selected_model, num_labels=2)\r\n\r\n    classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_tensors=""pt"")\r\n\r\n    results = []\r\n    for text in texts:\r\n        tokenized = tokenizer(text, return_tensors=""pt"")\r\n        with torch.no_grad():\r\n            outputs = model(**tokenized)\r\n        logits = outputs.logits\r\n        results.append(logits.squeeze().tolist())\r\n\r\n    return results\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\nlogits = get_logits_from_pipeline(texts)\r\nprint(logits)\r\n""]",0,1
"[""from fastapi import FastAPI\r\n\r\n# --- main app ---\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\n# --- sub app ---\r\n\r\nsub_app = FastAPI(lifespan=lambda app: (\r\n    print(""sub startup""),\r\n    yield,\r\n    print(""sub shutdown""),\r\n))\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\napp.mount(""/sub"", sub_app)\r\n""]",0,1
"[""import asyncio\r\nimport httpx\r\n\r\nasync def fetch_url(url: str, client: httpx.AsyncClient) -> str:\r\n    response = await client.get(url)\r\n    return response.text\r\n\r\nasync def fetch_all_urls(urls: list[str]) -> list[str]:\r\n    async with httpx.AsyncClient() as client:\r\n        tasks = [fetch_url(url, client) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\ndef fetch_multiple_urls(urls: list[str]) -> list[str]:\r\n    result = asyncio.run(fetch_all_urls(urls))\r\n    return result\r\n""]",0,1
"[""from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\nfrom bson import ObjectId\r\n\r\napp = FastAPI()\r\n\r\nclient = pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb = client[""models""]\r\nmodel_collection = db[""example-model""]\r\n\r\ndef response_to_mongo(r: dict):\r\n    r[""_id""] = str(ObjectId())\r\n    model_collection.insert_one(r)\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features: List[float]):\r\n    prediction = model.predict(\r\n        pd.DataFrame(\r\n            [features],\r\n            columns=model.feature_names_in_,\r\n        )\r\n    )\r\n    response = {""predictions"": prediction.tolist()}\r\n    response_to_mongo(response)\r\n    return response\r\n""]",0,1
"[""import polars as pl\r\nfrom pathlib import Path\r\n\r\ndef load_and_concat_jsons(json_paths):\r\n    def process_json(json_path):\r\n        df = pl.read_json(json_path)\r\n        return df.with_columns(\r\n            pl.col(""date"").str.to_date(),\r\n            pl.col(""fillingDate"").str.to_date(),\r\n            pl.col(""acceptedDate"").str.to_date()\r\n        )\r\n\r\n    dfs = [process_json(path) for path in json_paths]\r\n    return pl.concat(dfs).sort(""date"")\r\n\r\njson_files = [\r\n    ""../AAPL/single_statements/1985-09-30-quarterly_balance.json"",\r\n    ""../AAPL/single_statements/1986-09-30-quarterly_balance.json""\r\n]\r\n\r\nresult_df = load_and_concat_jsons(json_files)\r\n""]",0,1
"[""import plotly.graph_objects as go\r\nfrom plotly.subplots import make_subplots\r\n\r\ndef create_shared_hover_plot(A_error, B_error, title='Price over time', err='Price'):\r\n    fig = make_subplots(rows=2, cols=1,\r\n                        vertical_spacing=0.05,\r\n                        shared_xaxes=True,\r\n                        subplot_titles=(title, """"))\r\n\r\n    # A\r\n    fig.add_trace(go.Scatter(x=A_error['CloseDate'], \r\n                             y=A_error[err], \r\n                             line_color='green',\r\n                             marker_color='green',\r\n                             mode='lines+markers',\r\n                             showlegend=True,\r\n                             name=""A"",\r\n                             hoverinfo='x+y',\r\n                             stackgroup='one'),\r\n                  row=1, col=1)\r\n\r\n    # B\r\n    fig.add_trace(go.Scatter(x=B_error['CloseDate'], \r\n                             y=B_error[err], \r\n                             line_color='blue',\r\n                             mode='lines+markers',\r\n                             showlegend=True,\r\n                             name=""B"",\r\n                             hoverinfo='x+y',\r\n                             stackgroup='one'),\r\n                  row=2, col=1)\r\n\r\n    fig.update_yaxes(tickprefix='$')\r\n    fig.add_hline(y=0, line_width=3, line_dash=""dash"", line_color=""black"")\r\n\r\n    fig.update_layout(hovermode=""x unified"", legend_traceorder=""normal"")\r\n\r\n    return fig\r\n""]",0,1
"[""from icu import Collator, Locale\r\n\r\ndef create_multi_locale_sorter(primary_locale=""en_US.UTF-8"", secondary_locale=""fa_IR.UTF-8""):\r\n    collator1 = Collator.createInstance(Locale(primary_locale))\r\n    collator2 = Collator.createInstance(Locale(secondary_locale))\r\n\r\n    def sort_key(s):\r\n        primary_key = collator1.getSortKey(s)\r\n        secondary_key = collator2.getSortKey(s) if not s.isascii() else b""""\r\n        return primary_key, secondary_key\r\n\r\n    return sort_key\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):\r\n    a: int\r\n\r\n@dataclass\r\nclass Outer:\r\n    hasa: HasA\r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n""]",0,1
"[""torch.onnx.export(model, img, 'detr.onnx', opset_version=16)\r\n\r\nbash\r\npip install onnx-simplifier\r\n\r\npython\r\nimport onnx\r\nfrom onnxsim import simplify\r\n\r\nonnx_model = onnx.load(""detr.onnx"")\r\nmodel_simp, check = simplify(onnx_model)\r\nassert check, ""Simplified ONNX model could not be validated""\r\nonnx.save(model_simp, ""detr_simplified.onnx"")\r\n\r\npython\r\nimport onnxruntime\r\nonnx_model = onnx.load(""detr.onnx"")\r\nfor node in onnx_model.graph.node:\r\n    print(node.op_type)\r\n\r\npython\r\nimport onnxruntime as ort\r\nsess = ort.InferenceSession(""detr.onnx"")\r\n""]",0,1
"[""import pandas as pd\r\nfrom sklearn import datasets\r\n\r\ndef mutate_keep_unused(df, new_col_name, expr):\r\n    temp_df = df.copy()\r\n    temp_df[new_col_name] = expr(temp_df)\r\n    used_columns = list(expr.__code__.co_names)\r\n    existing_columns = set(df.columns)\r\n    drop_columns = [col for col in used_columns if col in existing_columns]\r\n    return temp_df.drop(columns=drop_columns)\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\n\r\nresult = mutate_keep_unused(\r\n    iris, \r\n    ""new_col"", \r\n    lambda x: x['sepal length (cm)'] + x['petal length (cm)'] * x['petal width (cm)']\r\n)\r\n\r\nprint(result.head())\r\n""]",0,1
"[""from typing import Any, TypeVar\r\nimport numpy as np\r\nimport numpy.typing as npt\r\n\r\nT = TypeVar(""T"", bound=np.generic)\r\n\r\ndef explain_ndarray_annotations(\r\n    arr: npt.NDArray[T]\r\n) -> tuple[str, str, str]:\r\n    dtype_info = f""Dtype: {arr.dtype} (Type: {type(arr.dtype)})""\r\n    shape_info = f""Shape: {arr.shape}""\r\n    annotation_info = (\r\n        ""Annotations:\n""\r\n        "" - np.ndarray[Any, np.dtype[Any]]: Generic array, dtype unspecified.\n""\r\n        "" - np.ndarray[Any, np.dtype[T]]: Generic array, dtype restricted.\n""\r\n        "" - np.ndarray[T]: Short form for dtype-only specification.""\r\n    )\r\n    return dtype_info, shape_info, annotation_info\r\n\r\narr_example = np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float64)\r\nresult = explain_ndarray_annotations(arr_example)\r\nprint(""\n"".join(result))\r\n""]",0,1
"[""#!/bin/bash\r\n\r\nset -e\r\n\r\ninstall_dependencies() {\r\n    sudo yum groupinstall -y ""Development Tools""\r\n    sudo yum install -y gcc gcc-c++ make zlib-devel bzip2 bzip2-devel readline-devel \\r\n        sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel\r\n}\r\n\r\ndownload_python_source() {\r\n    local version=""3.11.0""\r\n    local src_dir=""/usr/src""\r\n\r\n    cd ""$src_dir""\r\n    sudo curl -O ""https://www.python.org/ftp/python/$version/Python-$version.tgz""\r\n    sudo tar xvf ""Python-$version.tgz""\r\n}\r\n\r\ncompile_and_install_python() {\r\n    local version=""3.11.0""\r\n    local src_dir=""/usr/src/Python-$version""\r\n\r\n    cd ""$src_dir""\r\n    sudo ./configure --enable-optimizations --with-openssl=/usr/local/ssl\r\n    sudo make -j$(nproc)\r\n    sudo make altinstall\r\n}\r\n\r\nverify_ssl_module() {\r\n    python3.11 -c ""import ssl; print(ssl.OPENSSL_VERSION)""\r\n}\r\n\r\nfix_pip_ssl_issue() {\r\n    sudo python3.11 -m ensurepip\r\n    sudo python3.11 -m pip install --upgrade pip setuptools wheel\r\n}\r\n\r\nmain() {\r\n    install_dependencies\r\n    download_python_source\r\n    compile_and_install_python\r\n    verify_ssl_module\r\n    fix_pip_ssl_issue\r\n}\r\n\r\nmain\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef transform_with_polars(df):\r\n    df_pl = pl.from_pandas(df)\r\n    df_pl = df_pl.group_by_dynamic(\r\n        ""date"", every=""1w"", closed=""right"", by=[""category"", ""subcategory""]\r\n    ).agg(\r\n        pl.col(""value"").sum().alias(""value_sum""),\r\n        pl.col(""value"").mean().alias(""value_mean""),\r\n        pl.col(""value"").max().alias(""value_max""),\r\n        pl.col(""value"").min().alias(""value_min"")\r\n    )\r\n    return df_pl\r\n""]",0,1
"[""stages:\r\n- stage: Build\r\n  jobs:\r\n  - job: InstallAndTest\r\n    pool:\r\n      vmImage: 'ubuntu-latest'\r\n    steps:\r\n    - script: |\r\n        curl -sSL https://install.python-poetry.org | python3 -\r\n        echo ""##vso[task.prependpath]$HOME/.local/bin""\r\n      displayName: 'Install Poetry'\r\n\r\n    - script: |\r\n        poetry install --no-root\r\n      displayName: 'Install Dependencies'\r\n\r\n    - script: |\r\n        poetry run flake8 src\r\n      displayName: 'Linter'\r\n\r\n    - script: |\r\n        poetry add pytest-azurepipelines\r\n        poetry run pytest src\r\n      displayName: 'Tests'\r\n""]",0,1
"[""from typing import Callable, TypeVar, Dict, Protocol\r\nfrom functools import wraps\r\n\r\nT = TypeVar(""T"", bound=int)\r\n\r\nclass MemoizedFunction(Protocol):\r\n    memory: Dict[int, int]\r\n    def __call__(self, n: int) -> int: ...\r\n\r\ndef remember(f: Callable[[int], int]) -> MemoizedFunction:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n""]",0,1
"[""import polars as pl\r\nimport plotly.express as px\r\n\r\ndef plot_corrected_total_duration():\r\n    df = pl.DataFrame({\r\n        ""sub_id"": [1, 2, 3],\r\n        ""engagement"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n        ""total_duration"": [123, 456, 789]\r\n    })\r\n\r\n    df = df.with_columns(pl.col(""engagement"").str.split("","")).explode(""engagement"")\r\n\r\n    df = df.with_columns(pl.col(""total_duration"") / df.groupby(""sub_id"").count().select(pl.col(""engagement"")).alias(""engagement_count""))\r\n\r\n    fig = px.bar(df, x=""sub_id"", y=""total_duration"", color=""engagement"")\r\n    fig.show()\r\n\r\nplot_corrected_total_duration()\r\n""]",0,1
"[""import torch\r\nfrom transformers import LlamaForCausalLM, LlamaTokenizer, LlamaConfig\r\n\r\ndef load_llama_model(model_path):\r\n    tokenizer = LlamaTokenizer.from_pretrained(model_path)\r\n    \r\n    config = LlamaConfig(\r\n        hidden_size=4096,\r\n        num_hidden_layers=32,\r\n        num_attention_heads=32,\r\n        intermediate_size=int(4096 * 1.3),\r\n        vocab_size=128256,\r\n        use_scaled_rope=True\r\n    )\r\n\r\n    model = LlamaForCausalLM(config=config)\r\n    model.load_state_dict(torch.load(f""{model_path}/consolidated.00.pth"", map_location=torch.device(""cpu"")))\r\n    model.eval()\r\n\r\n    return model, tokenizer\r\n\r\ndef generate_text(model, tokenizer, input_text):\r\n    inputs = tokenizer(input_text, return_tensors=""pt"")\r\n    outputs = model.generate(inputs[""input_ids""])\r\n    return tokenizer.decode(outputs[0], skip_special_tokens=True)\r\n\r\n# Example usage:\r\n# model_path = ""Meta-Llama-3.1-8B-Instruct""\r\n# model, tokenizer = load_llama_model(model_path)\r\n# result = generate_text(model, tokenizer, ""Hello, how are you?"")\r\n# print(result)\r\n""]",0,1
,0,1
,0,1
,0,1
,0,1
 ÃÂÃÂÃÂÃÂ¢ÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂ  [1.5,0,1
,0,1
 ÃÂÃÂÃÂÃÂ¢ÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂ  [1.5,0,1
,0,1
 2.7] ÃÂÃÂÃÂÃÂ¢ÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂ  [0.49,0,1
,0,1
,0,1
,0,1
"import polars as pl

df = pl.DataFrame(
    {
        ""Group"": [""Group1"", ""Group2"", ""Group3""],
        ""Weight"": [100.0, 200.0, 300.0],
        ""Vals"": [[0.5, 0.5, 0.8], [0.5, 0.5, 0.8], [0.7, 0.9]]
    }
)

df = df.with_columns(
    pl.col(""Vals"").list.eval(pl.element().map(lambda x: x * pl.col(""Weight""))).alias(""Weighted"")
)

print(df)


shape: (3, 4)
?????????????????????????????????????????????????????????
? Group  ? Weight ? Vals            ? Weighted         ?
? ---    ? ---    ? ---             ? ---             ?
? str    ? f64    ? list[f64]       ? list[f64]       ?
?????????????????????????????????????????????????????????
? Group1 ? 100.0  ? [0.5, 0.5, 0.8] ? [50.0, 50.0, 80.0] ?
? Group2 ? 200.0  ? [0.5, 0.5, 0.8] ? [100.0, 100.0, 160.0] ?
? Group3 ? 300.0  ? [0.7, 0.9]      ? [210.0, 270.0] ?
?????????????????????????????????????????????????????????
",0,1
"[""import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hi""\r\n    yield\r\n\r\ndef create_app(lifespan):\r\n    app = FastAPI(title=""Test"", lifespan=lifespan)\r\n\r\n    @app.get(""/"")\r\n    async def root():\r\n        return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n    return app\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app = create_app(_lifespan_override)\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(""/"")\r\n    assert response.text == ""Hi""\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef calculate_ema_polars(values, span):\r\n    df = pl.DataFrame({""value"": values}).with_columns(\r\n        pl.col(""value"").ewm_mean(span=span, adjust=False, min_periods=span).alias(""ema_9"")\r\n    )\r\n    return df\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\ndf_result = calculate_ema_polars(values, span=9)\r\nprint(df_result)\r\n""]",0,1
"[""import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef handle_dst_shift():\r\n    d0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\n    \r\n    d1 = d0 + dt.timedelta(hours=2)\r\n    d2 = d0 + dt.timedelta(hours=3)\r\n    d3 = d0 + dt.timedelta(hours=4)\r\n\r\n    d1u = d1.astimezone(dt.timezone.utc)\r\n    d2u = d2.astimezone(dt.timezone.utc)\r\n\r\n    return {\r\n        ""d0"": d0.isoformat(),\r\n        ""d1"": d1.isoformat(),\r\n        ""d2"": d2.isoformat(),\r\n        ""d3"": d3.isoformat(),\r\n        ""d1_utc"": d1u.isoformat(),\r\n        ""d2_utc"": d2u.isoformat(),\r\n        ""delta_d2_d1"": d2 - d1,\r\n        ""delta_d2u_d1u"": d2u - d1u\r\n    }\r\n\r\nprint(handle_dst_shift())\r\n""]",0,1
"[""from functools import partial\r\nfrom inspect import signature\r\n\r\ndef analyze_partial_behavior():\r\n    def bar(a, b):\r\n        return a / b\r\n\r\n    results = {}\r\n\r\n    f1 = partial(bar, 3)\r\n    results[""f1_signature""] = str(signature(f1))\r\n    results[""f1_result""] = f1(6)\r\n\r\n    try:\r\n        f1(a=2, b=6)\r\n    except TypeError as e:\r\n        results[""f1_a_error""] = str(e)\r\n\r\n    try:\r\n        f1(c=2, b=6)\r\n    except TypeError as e:\r\n        results[""f1_c_error""] = str(e)\r\n\r\n    f2 = partial(bar, b=3)\r\n    results[""f2_signature""] = str(signature(f2))\r\n    results[""f2_result_default""] = f2(6)\r\n    results[""f2_result_override""] = f2(6, b=1)\r\n\r\n    f3 = partial(bar, a=3)\r\n    results[""f3_signature""] = str(signature(f3))\r\n\r\n    return results\r\n\r\nprint(analyze_partial_behavior())\r\n""]",0,1
"[""import numpy as np\r\nimport inspect\r\n\r\ndef analyze_numpy_sum():\r\n    A = np.random.random(1000)\r\n    \r\n    np_sum_source = inspect.getsource(np.sum)\r\n    array_sum_source = inspect.getsource(A.sum)\r\n    \r\n    np_sum_dis = None\r\n    array_sum_dis = None\r\n    \r\n    try:\r\n        import dis\r\n        np_sum_dis = dis.Bytecode(np.sum).dis()\r\n        array_sum_dis = dis.Bytecode(A.sum).dis()\r\n    except:\r\n        pass\r\n    \r\n    return {\r\n        ""np_sum_source"": np_sum_source,\r\n        ""array_sum_source"": array_sum_source,\r\n        ""np_sum_dis"": np_sum_dis,\r\n        ""array_sum_dis"": array_sum_dis\r\n    }\r\n\r\nanalyze_numpy_sum()\r\n""]",0,1
"[""import pandas as pd\r\nimport json\r\n\r\ndef analyze_json_parsing():\r\n    data_records = [\r\n        {""device"": ""rtr1"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        {""device"": ""rtr2"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        {""device"": ""rtr3"", ""dc"": ""London"", ""vendor"": ""Cisco""},\r\n    ]\r\n\r\n    data_index = {\r\n        ""rtr1"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        ""rtr2"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n        ""rtr3"": {""dc"": ""London"", ""vendor"": ""Cisco""},\r\n    }\r\n\r\n    df1 = pd.read_json(json.dumps(data_records))\r\n    df2 = pd.read_json(json.dumps(data_index))\r\n    df3 = pd.read_json(json.dumps(data_index), orient=""index"")\r\n\r\n    return df1, df2, df3\r\n""]",0,1
"[""from abc import ABC, abstractmethod\r\n\r\nclass FooBase(ABC):\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = ""baz""\r\n\r\n    @property\r\n    @abstractmethod\r\n    def foo(self) -> str:\r\n        pass\r\n\r\n\r\nclass Foo(FooBase):\r\n    @property\r\n    def foo(self) -> str:\r\n        return ""hello""\r\n""]",0,1
"[""import numpy.typing as npt\r\nimport numpy as np\r\nfrom typing import Any, Union, Sequence\r\n\r\nArrayLike = Union[npt.NDArray[Any], Sequence[Any]]\r\n\r\ndef f(a: ArrayLike) -> int:\r\n    return len(a)  # type: ignore[arg-type]\r\n\r\ndef g(a: ArrayLike) -> Any:\r\n    return a[0]  # type: ignore[index]\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))\r\n""]",0,1
"[""import requests\r\nfrom bs4 import BeautifulSoup\r\nimport cloudscraper\r\n\r\ndef scrape_etherscan_tokens():\r\n    scraper = cloudscraper.create_scraper()  \r\n    url = ""https://etherscan.io/tokens""\r\n    \r\n    response = scraper.get(url)\r\n    if response.status_code != 200:\r\n        raise Exception(f""Failed to fetch page, status code: {response.status_code}"")\r\n\r\n    soup = BeautifulSoup(response.text, ""html.parser"")\r\n    \r\n    tokens = []\r\n    for row in soup.select(""table tbody tr""):\r\n        columns = row.find_all(""td"")\r\n        if len(columns) >= 2:\r\n            token_name = columns[0].get_text(strip=True)\r\n            token_link = columns[0].find(""a"")[""href""] if columns[0].find(""a"") else None\r\n            tokens.append({""name"": token_name, ""link"": f""https://etherscan.io{token_link}"" if token_link else None})\r\n\r\n    return tokens\r\n\r\ntokens_data = scrape_etherscan_tokens()\r\nprint(tokens_data)\r\n""]",0,1
"[""class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\nBadBar.__class__.__len__ = lambda cls: cls.__len__()\r\n\r\nprint(len(BadBar))  # 9002\r\nprint(len(BadBar()))  # 9002\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef remove_duplicate_pairs(df):\r\n    df[""_pair""] = df.apply(lambda row: tuple(sorted([row[""person1""], row[""person2""]])), axis=1)\r\n    finaldf = df.drop_duplicates(subset=[""_pair"", ""messages""]).drop(columns=[""_pair""])\r\n    return finaldf\r\n\r\ndf = pd.DataFrame({\r\n    """": [0,1,2,3,4,5,6],\r\n    ""person1"": [""ryan"", ""delta"", ""delta"", ""delta"",""bravo"",""alpha"",""ryan""], \r\n    ""person2"": [""delta"", ""ryan"", ""alpha"", ""bravo"",""delta"",""ryan"",""alpha""], \r\n    ""messages"": [1, 1, 2, 3,3,9,9]\r\n})\r\n\r\nfinaldf = remove_duplicate_pairs(df)\r\nprint(finaldf)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\ndef efficient_sparse_dataframe(N, C):\r\n    pls = [pl.DataFrame({""index"": np.linspace(i, N*3-i, num=N, dtype=np.int32), f""A{i}"": np.arange(N, dtype=np.float32)}) for i in range(C)]\r\n    return functools.reduce(lambda a, b: a.join(b, on='index', how='outer'), pls).sort(by='index')\r\n\r\nN, C = 300000, 20\r\nF = efficient_sparse_dataframe(N, C)\r\nprint(F)\r\n""]",0,1
"[""from airflow.sensors.sql import SqlSensor\r\nimport pendulum\r\nfrom airflow.decorators import task, dag\r\n\r\n@dag(\r\n    dag_id=""database_monitor"",\r\n    schedule_interval='*/10 * * * *',\r\n    start_date=pendulum.datetime(2023, 7, 16, 21, 0, tz=""UTC""),\r\n    catchup=False,\r\n)\r\ndef Pipeline():\r\n    \r\n    check_db_alive = SqlSensor(\r\n        task_id=""check_db_alive"",\r\n        conn_id=""evergreen"",\r\n        sql=""SELECT pg_is_in_recovery()"",\r\n        success=lambda x: x[0] == False,\r\n        poke_interval=60,\r\n        mode=""reschedule"",\r\n    )\r\n\r\n    @task()\r\n    def alert_of_db_inrecovery():\r\n        import requests\r\n\r\n        data = {\r\n            ""@key"": ""kkll"",\r\n            ""@version"": ""alertapi-0.1"",\r\n            ""@type"": ""ALERT"",\r\n            ""object"": ""Testobject"",\r\n            ""severity"": ""MINOR"",\r\n            ""text"": ""Former primary instance is in recovery""\r\n        }\r\n        requests.post('https://httpevents.systems/api/sendAlert', verify=False, json=data)\r\n\r\n    check_db_alive >> alert_of_db_inrecovery()\r\n\r\ndag = Pipeline()\r\n""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import tqdm\r\nimport multiprocessing\r\n\r\ndef calc(n_digits, pos, total, lock):\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = max(n, 1)\r\n\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    with tqdm(total=n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True) as pbar:\r\n        for k in range(n):\r\n            t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n            deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n            pi += Decimal(t) / Decimal(deno)\r\n            with lock:\r\n                pbar.update(1)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    return pi\r\n\r\ndef parallel_with_joblib():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    lock = multiprocessing.Manager().Lock()\r\n\r\n    Parallel(n_jobs=n_cores)(\r\n        delayed(calc)(n, pos, len(tasks), lock) for pos, n in enumerate(tasks)\r\n    )\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n""]",0,1
"[""import pydantic\r\nimport random\r\nimport string\r\nfrom typing import Any\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(1, 100),\r\n            ""b"": """".join(random.choices(string.digits, k=10))\r\n        }\r\n\r\nprint(ExampleData.example())\r\n""]",0,1
"[""from flask import Flask, render_template, Response\r\nimport threading\r\nimport time\r\nimport map_plotting_test as mpt\r\n\r\napp = Flask(__name__)\r\n\r\ndef generate_loading():\r\n    yield ""<html><head><meta http-equiv='refresh' content='5'></head><body>""\r\n    yield ""<h1>Loading map...</h1>""\r\n    yield ""</body></html>""\r\n\r\n@app.route('/')\r\ndef render_loading():\r\n    threading.Thread(target=create_map_background).start()\r\n    return Response(generate_loading(), content_type='text/html')\r\n\r\ndef create_map_background():\r\n    mpt.create_map()\r\n    time.sleep(1)  \r\n\r\n@app.route('/map')\r\ndef render_the_map():\r\n    return render_template(""map.html"")\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n""]",0,1
"[""from http.server import SimpleHTTPRequestHandler, HTTPServer\r\nimport argparse\r\n\r\ndef run_server(address: str, port: int, directory: str):\r\n    handler_class = lambda *args, **kwargs: SimpleHTTPRequestHandler(*args, directory=directory, **kwargs)\r\n    server = HTTPServer((address, port), handler_class)\r\n    server.serve_forever()\r\n\r\nif __name__ == ""__main__"":\r\n    parser = argparse.ArgumentParser(description=""Simple HTTP Server"")\r\n    parser.add_argument(""--bind"", default=""0.0.0.0"", help=""Address to bind the server to"")\r\n    parser.add_argument(""--port"", type=int, default=8000, help=""Port to run the server on"")\r\n    parser.add_argument(""--directory"", default=""."", help=""Directory to serve files from"")\r\n    args = parser.parse_args()\r\n    \r\n    run_server(args.bind, args.port, args.directory)\r\n""]",0,1
"[""import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\ndef send_image(path_to_img: str, url: str):\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512), anti_aliasing=True)\r\n    image_byte = base64.b64encode(image.astype(np.float32).tobytes()).decode()\r\n    data = {""shape"": image.shape, ""image"": image_byte}\r\n    response = requests.post(url, json=data)\r\n    return response.json()\r\n\r\nimport json\r\nimport base64\r\nimport uvicorn\r\nimport numpy as np\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass ImageData(BaseModel):\r\n    shape: tuple\r\n    image: str\r\n\r\n@app.post(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: ImageData):\r\n    image_shape = tuple(data.shape)\r\n    image_array = np.frombuffer(base64.b64decode(data.image), dtype=np.float32).reshape(image_shape)\r\n    return {""success"": True, ""shape"": image_array.shape}\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(app, port=8000, host=""127.0.0.1"")\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef unpack_sector_exposure(df):\r\n    return df.with_columns(\r\n        pl.col(""sector_exposure"")\r\n        .str.split("";"")\r\n        .list.eval(pl.element().str.split(""=""))\r\n        .list.to_struct()\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nprint(unpack_sector_exposure(df))\r\n""]",0,1
"[""import polars as pl\r\nimport duckdb\r\nimport sqlalchemy\r\n\r\ndef write_polars_to_duckdb(df, db_path, table_name):\r\n    engine = sqlalchemy.create_engine(f""duckdb:///{db_path}"")\r\n    df.write_database(table_name=table_name, connection=engine, engine=""sqlalchemy"")\r\n\r\npldf = pl.DataFrame({'mynum': [1,2,3,4]})\r\nwrite_polars_to_duckdb(pldf, ""scratch.db"", ""test_table"")\r\n""]",0,1
"[""from sqlalchemy import Table, Column, TIMESTAMP, text, MetaData\r\n\r\ndef create_users_table(metadata):\r\n    return Table(\r\n        ""users"",\r\n        metadata,\r\n        Column(\r\n            ""datemodified"",\r\n            TIMESTAMP,\r\n            server_default=text(""CURRENT_TIMESTAMP""),\r\n            server_onupdate=text(""CURRENT_TIMESTAMP""),\r\n        ),\r\n    )\r\n""]",0,1
"[""import numpy as np\r\nfrom timeit import timeit\r\n\r\ndef benchmark_matmul_vs_dot():\r\n    N = 1300\r\n    xx = np.random.randn(N, N) + 1j\r\n    yy = np.random.randn(N, N) + 1j\r\n\r\n    x = np.real(xx).copy()\r\n    y = np.real(yy).copy()\r\n\r\n    dot_time = timeit('np.dot(x, y)', number=10, globals=globals())\r\n    matmul_time = timeit('np.matmul(x, y)', number=10, globals=globals())\r\n\r\n    print('time for np.matmul: ', matmul_time)\r\n    print('time for np.dot: ', dot_time)\r\n\r\nbenchmark_matmul_vs_dot()\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\n\r\ndef horizontal_median(df: pl.DataFrame) -> pl.DataFrame:\r\n    return df.with_columns(\r\n        pl.struct(df.select(pl.col(pl.Int64))).map_elements(\r\n            lambda row: float(np.nanmedian([v for v in row.values() if v is not None]))\r\n        ).alias(""Horizontal Median"")\r\n    )\r\n\r\ndf = pl.DataFrame({\r\n    ""ABC"": [""foo"", ""bar"", ""foo""],\r\n    ""A"": [1, 2, 3],\r\n    ""B"": [2, 1, None],\r\n    ""C"": [1, 2, 3]\r\n})\r\n\r\nprint(horizontal_median(df))\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\n\r\ndef horizontal_median(df: pl.DataFrame) -> pl.DataFrame:\r\n    return df.with_columns(\r\n        pl.struct(df.select(pl.col(pl.Int64))).map_elements(\r\n            lambda row: float(np.nanmedian([v for v in row.values() if v is not None]))\r\n        ).alias(""Horizontal Median"")\r\n    )\r\n\r\ndf = pl.DataFrame({\r\n    ""ABC"": [""foo"", ""bar"", ""foo""],\r\n    ""A"": [1, 2, 3],\r\n    ""B"": [2, 1, None],\r\n    ""C"": [1, 2, 3]\r\n})\r\n\r\nprint(horizontal_median(df))\r\n""]",0,1
"[""import psycopg2\r\nfrom unittest.mock import MagicMock, patch\r\n\r\nclass MockPostgresqlApi:\r\n    def __init__(self):\r\n        self.cursor = MagicMock()\r\n        self.db = MagicMock()\r\n        self.db.cursor.return_value = self.cursor\r\n\r\n    def add_event(self, *, event):\r\n        self.cursor.execute(""INSERT INTO history (event) VALUES (%s);"", (event,))\r\n\r\n    def events(self):\r\n        self.cursor.execute(""SELECT * FROM event;"")\r\n        return self.cursor.fetchall()\r\n\r\n    def close(self):\r\n        self.cursor.close()\r\n        self.db.close()\r\n\r\n@patch(""db.PostgresqlApi"", new_callable=lambda: MockPostgresqlApi)\r\ndef test_read_currencies(mock_db):\r\n    from fastapi.testclient import TestClient\r\n    from main import app\r\n\r\n    client = TestClient(app)\r\n    response = client.get(""/currencies"", auth=(""test_user"", ""test_pass""))\r\n    assert response.status_code == 200\r\n    assert response.json() == {""get events"": ""ok""}\r\n""]",0,1
"[""import polars as pl\r\nfrom datetime import datetime\r\nimport pytz\r\n\r\ndef convert_timezone_dynamic():\r\n    df = pl.DataFrame({\r\n        ""time"": [datetime(2023, 4, 3, 2), datetime(2023, 4, 4, 3), datetime(2023, 4, 5, 4)],\r\n        ""tzone"": [""Asia/Tokyo"", ""America/Chicago"", ""Europe/Paris""]\r\n    }).with_columns(pl.col(""time"").dt.replace_time_zone(""UTC""))\r\n\r\n    df = df.with_columns(\r\n        pl.struct([""time"", ""tzone""]).apply(\r\n            lambda x: x[""time""].convert_time_zone(x[""tzone""]).hour\r\n        ).alias(""local_hour"")\r\n    )\r\n\r\n    return df\r\n\r\nconvert_timezone_dynamic()\r\n""]",0,1
"[""from pydantic import BaseModel, ValidationError, field_validator\r\nfrom typing import List\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ndef validate_instance(model_class, data):\r\n    errors = []\r\n    try:\r\n        model_class(**data)\r\n    except ValidationError as e:\r\n        errors.extend(e.errors())\r\n\r\n    return errors\r\n\r\nsalary_data = {""gross"": ""hello"", ""net"": 1000, ""tax"": 10}\r\nemployee_data = {""name"": ""Mattia"", ""age"": ""hello"", ""salary"": salary_data}\r\n\r\nerrors = validate_instance(Employee, employee_data)\r\nprint(errors)\r\n""]",0,1
"[""import org.bouncycastle.asn1.ASN1Encodable;\r\nimport org.bouncycastle.asn1.ASN1EncodableVector;\r\nimport org.bouncycastle.asn1.ASN1Integer;\r\nimport org.bouncycastle.asn1.ASN1Primitive;\r\nimport org.bouncycastle.asn1.ASN1Sequence;\r\nimport org.bouncycastle.asn1.ASN1Set;\r\nimport org.bouncycastle.asn1.DEROctetString;\r\nimport org.bouncycastle.asn1.DERSequence;\r\nimport org.bouncycastle.asn1.DERTaggedObject;\r\nimport org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\r\nimport org.bouncycastle.asn1.x509.AlgorithmIdentifier;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.util.BigIntegers;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.spec.ECGenParameterSpec;\r\nimport java.util.Base64;\r\n\r\npublic class TestApplication {\r\n\r\n    private static final String CURVE = ""secp384r1""; // P-384 curve\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            // Add BouncyCastle Provider\r\n            Security.addProvider(new BouncyCastleProvider());\r\n\r\n            // Generate EC key pair\r\n            ECGenParameterSpec parameterSpec = new ECGenParameterSpec(CURVE);\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"", ""BC"");\r\n            keyPairGenerator.initialize(parameterSpec, new SecureRandom());\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n\r\n            // Encode with Safari-compatible ASN.1 structure.\r\n            byte[] keyPairBytes = encodeKeyPair(keyPair);\r\n\r\n            // Extract and print key pair\r\n            String privateKeyPem = convertToPem(keyPairBytes);\r\n            System.out.println(""Private Key in PEM format:\n"" + privateKeyPem);\r\n\r\n            // Save the key pair in binary format to a file (optional)\r\n            String privateKeyFilePath = ""private_key.bin"";\r\n            saveKeyToBinaryFile(keyPairBytes, privateKeyFilePath);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Convert a KeyPair into ASN.1 encoded PrivateKeyInfo compatible with Safari.\r\n    private static byte[] encodeKeyPair(KeyPair keyPair) throws IOException {\r\n        PrivateKeyInfo originalKeyInfo = PrivateKeyInfo.getInstance(keyPair.getPrivate().getEncoded());\r\n\r\n        ASN1Sequence oldPrivateKeySequence = DERSequence\r\n                .getInstance(originalKeyInfo.getPrivateKey().getOctets());\r\n        DERSequence newPrivateKeySequence = new DERSequence(new ASN1Encodable[] {\r\n                // Version (1).\r\n                oldPrivateKeySequence.getObjectAt(0),\r\n\r\n                // Private key bytes.\r\n                oldPrivateKeySequence.getObjectAt(1),\r\n\r\n                // Public key algorithm. Accepted by Firefox but not Safari, so must be skipped.\r\n                // oldPrivateKeySequence.getObjectAt(2),\r\n\r\n                // Public key bytes, tagged [1].\r\n                oldPrivateKeySequence.getObjectAt(3),\r\n        });\r\n\r\n        // Re-create PrivateKeyInfo with only the structures we want.\r\n        ASN1EncodableVector v = new ASN1EncodableVector();\r\n\r\n        // Version fixed to zero.\r\n        v.add(new ASN1Integer(BigIntegers.ZERO));\r\n        v.add(originalKeyInfo.getPrivateKeyAlgorithm());\r\n        v.add(new DEROctetString(newPrivateKeySequence));\r\n\r\n        return new DERSequence(v).getEncoded();\r\n    }\r\n\r\n    // Convert private key to PEM format\r\n    private static String convertToPem(byte[] privateKey) {\r\n        String base64Key = Base64.getEncoder().encodeToString(privateKey);\r\n        return ""-----BEGIN PRIVATE KEY-----\n"" +\r\n                base64Key +\r\n                ""\n-----END PRIVATE KEY-----"";\r\n    }\r\n\r\n    // Save the private key in binary format\r\n    private static void saveKeyToBinaryFile(byte[] privateKey, String filePath) {\r\n        try (FileOutputStream fos = new FileOutputStream(filePath)) {\r\n            fos.write(privateKey);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}""]",1,0
"[""@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\r\n            .oidc(Customizer.withDefaults());\r\n        http\r\n            .exceptionHandling((exceptions) -> exceptions\r\n                .defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""),\r\n                    new MediaTypeRequestMatcher(MediaType.TEXT_HTML)\r\n                )\r\n            )\r\n            .oauth2ResourceServer((oauth2) -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(2)\r\n    public SecurityFilterChain adminSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        http\r\n            .securityMatcher(""/admin/**"")\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .requestMatchers(HttpMethod.GET).hasAuthority(""SCOPE_admin:read"")\r\n                .anyRequest().hasAuthority(""SCOPE_admin:write"")\r\n            )\r\n            .oauth2ResourceServer((oauth2) -> oauth2.jwt(Customizer.withDefaults()));\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    @Order(3)\r\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)\r\n            throws Exception {\r\n        http\r\n            .authorizeHttpRequests((authorize) -> authorize\r\n                .anyRequest().authenticated()\r\n            )\r\n            .formLogin(Customizer.withDefaults);\r\n\r\n        return http.build();\r\n    }\r\n\r\n}""]",1,0
"[""public class Container {\r\n  private InterestingSetup interestingSetup;\r\n\r\n  public InterestingSetup getInterestingSetup() {\r\n    return interestingSetup;\r\n  }\r\n\r\n  public void setInterestingSetup(InterestingSetup interestingSetup) {\r\n    this.interestingSetup = interestingSetup;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""Container{"" +\r\n        ""interestingSetup="" + interestingSetup +\r\n        '}';\r\n  }\r\n}\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class InterestingSetup {\r\n  private int port;\r\n  private boolean validation;\r\n  private List<Map<String, String>> parts;\r\n\r\n  public int getPort() {\r\n    return port;\r\n  }\r\n\r\n  public void setPort(int port) {\r\n    this.port = port;\r\n  }\r\n\r\n  public boolean isValidation() {\r\n    return validation;\r\n  }\r\n\r\n  public void setValidation(boolean validation) {\r\n    this.validation = validation;\r\n  }\r\n\r\n  public List<Map<String, String>> getParts() {\r\n    return parts;\r\n  }\r\n\r\n  public void setParts(List<Map<String, String>> parts) {\r\n    this.parts = parts;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""InterestingSetup{"" +\r\n        ""port="" + port +\r\n        "", validation="" + validation +\r\n        "", parts="" + parts +\r\n        '}';\r\n  }\r\n}\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\nimport org.yaml.snakeyaml.TypeDescription;\r\nimport org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\nimport org.yaml.snakeyaml.representer.Representer;\r\n\r\npublic class Main {\r\n  public static void main(String... args) throws UnsupportedEncodingException {\r\n    String yamlString =\r\n        ""# this is the part I don't care about\n"" +\r\n        ""config:\n"" +\r\n        ""  key-1: val-1\n"" +\r\n        ""other-config:\n"" +\r\n        ""  lang: en\n"" +\r\n        ""  year: 1906\n"" +\r\n        ""# below is the only part I care about\n"" +\r\n        ""interesting-setup:\n"" +\r\n        ""  port: 1234\n"" +\r\n        ""  validation: false\n"" +\r\n        ""  parts:\n"" +\r\n        ""    - on-start: backup\n"" +\r\n        ""      on-stop: say-goodbye"";\r\n\r\n    // Skip unknown properties\r\n    Representer representer = new Representer();\r\n    representer.getPropertyUtils().setSkipMissingProperties(true);\r\n\r\n    // Define the target object type\r\n    Constructor constructor = new Constructor(Container.class);\r\n    TypeDescription containerTypeDescription = new TypeDescription(Container.class);\r\n\r\n    // Define how the interesting-setup property should be processed\r\n    containerTypeDescription.substituteProperty(""interesting-setup"", InterestingSetup.class,\r\n        ""getInterestingSetup"", ""setInterestingSetup"");\r\n    constructor.addTypeDescription(containerTypeDescription);\r\n\r\n    // Finally, parse the YAML\r\n    Yaml yaml = new Yaml(constructor, representer);\r\n    InputStream inputStream = new ByteArrayInputStream(yamlString.getBytes(StandardCharsets.UTF_8));;\r\n    Container container = yaml.load(inputStream);\r\n    System.out.println(container.getInterestingSetup());\r\n  }\r\n}\r\n\r\nObjectMapper mapper = new ObjectMapper(new YAMLFactory());\r\n// As the helper object Container doesn't contain all the properties\r\n// it is necessary to indicate that fact to the library to avoid\r\n// errors\r\nmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\nContainer container = mapper.readValue(yamlString, Container.class);\r\nSystem.out.println(container.getInterestingSetup());\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\n\r\n// Instead of mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n// you can annotate the class with @JsonIgnoreProperties(ignoreUnknown = true)\r\n// to avoid errors related to unknown properties\r\npublic class Container {\r\n\r\n  @JsonProperty(""interesting-setup"")\r\n  private InterestingSetup interestingSetup;\r\n\r\n  public InterestingSetup getInterestingSetup() {\r\n    return interestingSetup;\r\n  }\r\n\r\n  public void setInterestingSetup(InterestingSetup interestingSetup) {\r\n    this.interestingSetup = interestingSetup;\r\n  }\r\n\r\n  @Override\r\n  public String toString() {\r\n    return ""Container{"" +\r\n        ""interestingSetup="" + interestingSetup +\r\n        '}';\r\n  }\r\n}""]",1,0
"[""import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;\r\n\r\n@SpringBootTest(webEnvironment = WebEnvironment.MOCK)\r\n@AutoConfigureMockMvc\r\nclass ApplicationIntegrationTest {\r\n\r\n    @Autowired\r\n    MockMvc api;\r\n\r\n    @Test\r\n    void givenUserIsAnonymous_whenGetLiveness_thenOk() throws Exception {\r\n        api.perform(get(""/data/actuator/health/liveness""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsAnonymous_whenGetMachin_thenUnauthorized() throws Exception {\r\n        api.perform(get(""/data/machin""))\r\n            .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsGrantedWithDataWrite_whenGetMachin_thenOk() throws Exception {\r\n        api.perform(get(""/data/machin"")\r\n                .with(jwt().jwt(jwt -> jwt.authorities(List.of(new SimpleGrantedAuthority(""SCOPE_data:write""))))))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void givenUserIsAuthenticatedButNotGrantedWithDataWrite_whenGetMachin_thenForbidden() throws Exception {\r\n        api.perform(get(""/data/machin"")\r\n                .with(jwt().jwt(jwt -> jwt.authorities(List.of(new SimpleGrantedAuthority(""SCOPE_openid""))))))\r\n            .andExpect(status().isForbidden());\r\n    }\r\n}""]",1,0
"[""/**\r\n * Builds a common first column constraints for the provided gridPanes.\r\n * @param gridPanes\r\n */\r\nprivate static void buildFirstColumnConstraint(GridPane... gridPanes) {\r\n    /* Column constraint key. */\r\n    final String COLUMN_INDEX_CONSTRAINT = ""gridpane-column"";\r\n\r\n    /* Checks if the node is a first column node or not. */\r\n    Predicate<Node> isFirstColumn = node ->{\r\n        Integer constraint = (Integer) node.getProperties().get(COLUMN_INDEX_CONSTRAINT);\r\n        return constraint != null && constraint == 0;\r\n    };\r\n\r\n    /* Keep track of the max width. */\r\n    DoubleProperty maxWidth = new SimpleDoubleProperty();\r\n    ChangeListener<Number> widthListener = (obs, old, val) -> {\r\n        if (val.doubleValue() > maxWidth.get()) {\r\n            maxWidth.set(val.doubleValue());\r\n        }\r\n    };\r\n\r\n    // Bind the minWidth to the calculated width\r\n    final ColumnConstraints constraint = new ColumnConstraints();\r\n    constraint.minWidthProperty().bind(maxWidth);\r\n\r\n    // Go through each gridPane and set the first constraint\r\n    Stream.of(gridPanes).forEach(gridPane -> {\r\n        gridPane.getColumnConstraints().add(0,constraint);\r\n\r\n        // Filter for all first column children and add the widthListener to them\r\n        gridPane.getChildren().stream().filter(isFirstColumn)\r\n                .map(node -> (Region) node)\r\n                .forEach(region -> region.widthProperty().addListener(widthListener));\r\n    });\r\n}\r\n\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.DoubleProperty;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.Region;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.util.function.Predicate;\r\nimport java.util.stream.Stream;\r\n\r\npublic class GridPane_Demo extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n\r\n\r\n        GridPane gridPane1 = buildGrid(""One"", ""One Two"");\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n\r\n        GridPane gridPane2 = buildGrid(""One Two Three"", ""One Two Three Four"");\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        buildFirstColumnConstraint(gridPane1, gridPane2);\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 220);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private GridPane buildGrid(String label1, String label2) {\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setHgap(20);\r\n        gridPane.setVgap(5);\r\n        gridPane.addRow(0, new Label(label1), new TextField());\r\n        gridPane.addRow(1, new Label(label2), new TextField());\r\n        return gridPane;\r\n    }\r\n\r\n    /**\r\n     * Builds a common first column constraints for the provided gridPanes.\r\n     *\r\n     * @param gridPanes\r\n     */\r\n    private static void buildFirstColumnConstraint(GridPane... gridPanes) {\r\n        /* Column constraint key. */\r\n        final String COLUMN_INDEX_CONSTRAINT = ""gridpane-column"";\r\n\r\n        /* Checks if the node is a first column node or not. */\r\n        Predicate<Node> isFirstColumn = node -> {\r\n            Integer constraint = (Integer) node.getProperties().get(COLUMN_INDEX_CONSTRAINT);\r\n            return constraint != null && constraint == 0;\r\n        };\r\n\r\n        /* Keep track of the max width. */\r\n        DoubleProperty maxWidth = new SimpleDoubleProperty();\r\n        ChangeListener<Number> widthListener = (obs, old, val) -> {\r\n            if (val.doubleValue() > maxWidth.get()) {\r\n                maxWidth.set(val.doubleValue());\r\n            }\r\n        };\r\n\r\n        // Bind the minWidth to the calculated width\r\n        final ColumnConstraints constraint = new ColumnConstraints();\r\n        constraint.minWidthProperty().bind(maxWidth);\r\n\r\n        // Go through each gridPane and set the first constraint\r\n        Stream.of(gridPanes).forEach(gridPane -> {\r\n            gridPane.getColumnConstraints().add(0, constraint);\r\n\r\n            // Filter for all first column children and add the widthListener to them\r\n            gridPane.getChildren().stream().filter(isFirstColumn)\r\n                    .map(node -> (Region) node)\r\n                    .forEach(region -> region.widthProperty().addListener(widthListener));\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",1,0
"[""@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .authorizeHttpRequests((authorize) -> authorize\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer((oauth2) -> oauth2\r\n            .jwt(Customizer.withDefaults())\r\n            .authenticationEntryPoint((request, response, exception) -> {\r\n                System.out.println(""Authentication failed"");\r\n                BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                delegate.commence(request, response, exception);\r\n            })\r\n        )\r\n        .exceptionHandling((exceptions) -> exceptions\r\n            .authenticationEntryPoint((request, response, exception) -> {\r\n                System.out.println(""Authentication is required"");\r\n                BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                delegate.commence(request, response, exception);\r\n            })\r\n        );\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .oauth2ResourceServer((oauth2) -> oauth2\r\n            .jwt(Customizer.withDefaults())\r\n            .withObjectPostProcessor(new ObjectPostProcessor<BearerTokenAuthenticationFilter>() {\r\n                @Override\r\n                public <O extends BearerTokenAuthenticationFilter> O postProcess(O filter) {\r\n                    filter.setAuthenticationFailureHandler((request, response, exception) -> {\r\n                        System.out.println(""Authentication failed (and is being handled in a custom way)"");\r\n                        BearerTokenAuthenticationEntryPoint delegate = new BearerTokenAuthenticationEntryPoint();\r\n                        delegate.commence(request, response, exception);\r\n                    });\r\n                    return filter;\r\n                }\r\n            })\r\n        );\r\n\r\n    return http.build();\r\n}""]",1,0
"[""@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\r\n@Fork(3)\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@State(Scope.Benchmark)\r\npublic class JdkBenchmarks {\r\n\r\n    public int[] values;\r\n\r\n    @Setup\r\n    public void setupArray() {\r\n        int count = 1000;\r\n        values = new int[count];\r\n        for(int i = 0; i < count; i++) {\r\n            values[i] = i;\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void indexed(Blackhole bh) {\r\n        for(int i = 0; i < values.length; i++) {\r\n            bh.consume(values[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void indexed_cached(Blackhole bh) {\r\n        int[] vs = values;\r\n        int length = vs.length;\r\n        for(int i = 0; i < length; i++) {\r\n            bh.consume(vs[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\r\n    public void enhanced(Blackhole bh) {\r\n        for (int value : values) {\r\n            bh.consume(value);\r\n        }\r\n    }\r\n}""]",1,0
"[""import java.time.Duration;\r\nimport java.util.concurrent.ForkJoinPool;\r\n\r\npublic class SleepManagedBlocker implements ForkJoinPool.ManagedBlocker {\r\n\r\n  private final Duration sleepDuration;\r\n  private boolean slept; // Does this need to be volatile?\r\n\r\n  public SleepManagedBlocker(Duration slepDuration) {\r\n    this.sleepDuration = slepDuration;\r\n  }\r\n\r\n  @Override\r\n  public boolean block() throws InterruptedException {\r\n    if (!slept) {\r\n      slept = true;\r\n      Thread.sleep(sleepDuration);\r\n    }\r\n    return slept;\r\n  }\r\n\r\n  @Override\r\n  public boolean isReleasable() {\r\n    return slept;\r\n  }\r\n}\r\n\r\nimport java.time.Duration;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\nimport org.openjdk.jmh.annotations.Benchmark;\r\nimport org.openjdk.jmh.annotations.BenchmarkMode;\r\nimport org.openjdk.jmh.annotations.Fork;\r\nimport org.openjdk.jmh.annotations.Measurement;\r\nimport org.openjdk.jmh.annotations.Mode;\r\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\r\nimport org.openjdk.jmh.annotations.Param;\r\nimport org.openjdk.jmh.annotations.Scope;\r\nimport org.openjdk.jmh.annotations.State;\r\nimport org.openjdk.jmh.annotations.Warmup;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\n\r\n@Fork(value = 1, jvmArgsAppend = {""-Djava.util.concurrent.ForkJoinPool.common.maximumSpares=1024""})\r\n@Warmup(iterations = 5)\r\n@Measurement(iterations = 5)\r\n@BenchmarkMode(Mode.Throughput)\r\n@OutputTimeUnit(TimeUnit.SECONDS)\r\npublic class FJPBenchmarks {\r\n\r\n  @Benchmark\r\n  public void runTest(TestState state, Blackhole bh) {\r\n    state.executeOuterLoop(bh);\r\n  }\r\n\r\n  @State(Scope.Benchmark)\r\n  public static class TestState {\r\n\r\n    private static final Duration SLEEP_DURATION = Duration.ofMillis(5);\r\n    private static final int OUTER_LOOP_COUNT = 32;\r\n    private static final int INNER_LOOP_COUNT = 32;\r\n\r\n    @Param({""sequential"", ""parallel""})\r\n    private String sequentialMode;\r\n\r\n    @Param({""common"", ""separate""})\r\n    private String poolMode;\r\n\r\n    @Param({""raw"", ""managed""})\r\n    private String sleepMode;\r\n\r\n    void executeOuterLoop(Blackhole bh) {\r\n      IntStream.range(0, OUTER_LOOP_COUNT)\r\n          .unordered()\r\n          .parallel()\r\n          .forEach(i -> {\r\n            executeInnerLoop(createInnerLoop());\r\n            bh.consume(i);\r\n          });\r\n    }\r\n\r\n    IntStream createInnerLoop() {\r\n      var stream = IntStream.range(0, INNER_LOOP_COUNT).unordered();\r\n      return switch (sequentialMode) {\r\n        case ""sequential"" -> stream.sequential();\r\n        case ""parallel"" -> stream.parallel();\r\n        default -> throw new IllegalStateException(""bad sequentialMode: "" + sequentialMode);\r\n      };\r\n    }\r\n\r\n    void executeInnerLoop(IntStream loop) {\r\n      var sleeper = getSleeper();\r\n      switch (poolMode) {\r\n        case ""common"" -> loop.forEach(_ -> sleeper.sleepUnchecked());\r\n        case ""separate"" -> {\r\n          try (var pool = new ForkJoinPool()) {\r\n            loop.forEach(_ -> pool.submit(sleeper::sleepUnchecked).join());\r\n          }\r\n        }\r\n        default -> throw new IllegalStateException(""bad poolMode: "" + poolMode);\r\n      }\r\n    }\r\n\r\n    Sleeper getSleeper() {\r\n      return switch (sleepMode) {\r\n        case ""raw"" -> () -> Thread.sleep(SLEEP_DURATION);\r\n        case ""managed"" -> () -> ForkJoinPool.managedBlock(new SleepManagedBlocker());\r\n        default -> throw new IllegalStateException(""bad sleepMode: "" + sleepMode);\r\n      };\r\n    }\r\n\r\n    @FunctionalInterface\r\n    interface Sleeper {\r\n  \r\n      void sleep() throws InterruptedException;\r\n\r\n      default Void sleepUnchecked() {\r\n        try {\r\n          sleep();\r\n        } catch (InterruptedException ex) {\r\n          throw new RuntimeException(ex);\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    static class SleepManagedBlocker implements ForkJoinPool.ManagedBlocker {\r\n\r\n      private boolean slept;\r\n\r\n      @Override\r\n      public boolean block() throws InterruptedException {\r\n        if (!slept) {\r\n          slept = true;\r\n          Thread.sleep(SLEEP_DURATION);\r\n        }\r\n        return true;\r\n      }\r\n\r\n      @Override\r\n      public boolean isReleasable() {\r\n        return slept;\r\n      }\r\n    }\r\n  }\r\n}""]",1,0
"[""import com.spire.barcode.BarCodeGenerator;\r\nimport com.spire.barcode.BarCodeType;\r\nimport com.spire.barcode.BarcodeSettings;\r\nimport com.spire.barcode.QRCodeECL;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\npublic class GenerateQRCode {\r\n    public static void main(String []args) throws IOException {\r\n        //Instantiate a BarcodeSettings object\r\n        BarcodeSettings settings = new BarcodeSettings();\r\n        //Set barcode type\r\n        settings.setType(BarCodeType.QR_Code);\r\n        //Set barcode data\r\n        String data = ""https://stackoverflow.com/"";\r\n        settings.setData(data);\r\n        //Set barcode module width\r\n        settings.setX(2);\r\n        //Set error correction level\r\n        settings.setQRCodeECL(QRCodeECL.M);\r\n\r\n        //Set top text\r\n        settings.setTopText(""User Name"");\r\n        //Set bottom text\r\n        settings.setBottomText(""Event Name"");\r\n\r\n        //Set text visibility\r\n        settings.setShowText(false);\r\n        settings.setShowTopText(true);\r\n        settings.setShowBottomText(true);\r\n\r\n        //Set border visibility\r\n        settings.hasBorder(false);\r\n\r\n        //Instantiate a BarCodeGenerator object based on the specific settings\r\n        BarCodeGenerator barCodeGenerator = new BarCodeGenerator(settings);\r\n        //Generate QR code image\r\n        BufferedImage bufferedImage = barCodeGenerator.generateImage();\r\n        //save the image to a .png file\r\n        ImageIO.write(bufferedImage,""png"",new File(""QR_Code.png""));\r\n    }\r\n}""]",1,0
"[""// Precompute rotated images\r\nBufferedImage[] preRotatedImages = new BufferedImage[360];\r\nfor (int i = 0; i < 360; i++) {\r\n    preRotatedImages[i] = rotateImage(originalImage, i);\r\n}\r\n\r\n// Rotate function\r\nprivate BufferedImage rotateImage(BufferedImage img, int angle) {\r\n    int w = img.getWidth();\r\n    int h = img.getHeight();\r\n    int newW = (int) Math.ceil(Math.sqrt(w * w + h * h));\r\n    BufferedImage rotated = new BufferedImage(newW, newW, BufferedImage.TYPE_INT_ARGB);\r\n    Graphics2D g2d = rotated.createGraphics();\r\n    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n    g2d.rotate(Math.toRadians(angle), newW / 2, newW / 2);\r\n    g2d.drawImage(img, (newW - w) / 2, (newW - h) / 2, null);\r\n    g2d.dispose();\r\n    return rotated;\r\n}\r\n\r\n// During gameplay, fetch pre-rotated images\r\npublic void render(Graphics g, int angle, int x, int y) {\r\n    g.drawImage(preRotatedImages[angle % 360], x, y, null);\r\n}""]",1,0
"[""package com.example;\r\n\r\nimport org.graalvm.polyglot.Context;\r\nimport org.graalvm.polyglot.Value;\r\n\r\npublic class JsTest {\r\n\r\n  public static void main(String[] args) throws Exception {\r\n  \r\n    try (Context context = Context.newBuilder(""js"")\r\n            .allowAllAccess(true)\r\n            .build()) {\r\n        // Evaluate JavaScript code\r\n        String jsCode = ""console.log('Hello, GraalVM!');"";\r\n        context.eval(""js"", jsCode);\r\n    } catch (Exception e) {\r\n        throw new Exception(""Script execution failed: "" + e.getMessage());\r\n    }\r\n    \r\n  }\r\n  \r\n}\r\n\r\npackage com.example;\r\n\r\nimport org.graalvm.polyglot.Context;\r\nimport org.graalvm.polyglot.Value;\r\n\r\npublic class JsTest3 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        try (Context context = Context.newBuilder(""js"")\r\n                .option(""engine.WarnInterpreterOnly"", ""false"")\r\n                .allowAllAccess(true)\r\n                .build()) {\r\n\r\n            Value result = context.eval(""js"", ""2 + 2"");\r\n            System.out.println(""Result: "" + result.asInt());\r\n\r\n            // Call JavaScript Function\r\n            context.eval(""js"", ""function greet(name) { return 'Hello, ' + name; }"");\r\n            Value greetFunction = context.getBindings(""js"").getMember(""greet"");\r\n            System.out.println(""Greeting: "" + greetFunction.execute(""World"").asString());\r\n\r\n\r\n            // Evaluate JavaScript code\r\n            String jsCode = ""print('HI');"";\r\n            context.eval(""js"", jsCode);\r\n\r\n        } catch (Exception e) {\r\n            throw new Exception(""Script execution failed: "" + e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\npackage com.example;\r\n\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\n\r\npublic class JsTest {\r\n    public static void main(String[] args) throws ScriptException {\r\n        try {\r\n            //ScriptEngine engine = new ScriptEngineManager().getEngineByName(""nashorn"");\r\n            //ScriptEngine engine  =new ScriptEngineManager().getEngineByName(""JavaScript"");\r\n            ScriptEngineManager manager = new ScriptEngineManager();\r\n            ScriptEngine engine  = manager.getEngineByName(""JavaScript"");\r\n\r\n            if (engine == null) {\r\n                System.out.println(""Nashorn script engine not available."");\r\n                return;\r\n            }\r\n\r\n            engine.eval(""print('HI');"");\r\n            engine.eval(""print('Hello, Nashorn!');"");\r\n            engine.eval(""var x = 10 + 20; print('x = ' + x);"");\r\n\r\n        } catch (ScriptException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}""]",1,0
"[""// Method to process the sentence\r\nstatic public String processSentence(String sentence) {\r\n    if (!isValidSentence(sentence)) {\r\n        return sentence + "" is an invalid sentence"";\r\n    }\r\n\r\n    String[] words = sentence.trim().split(""\\s+""); // Split by whitespace\r\n\r\n    if (words.length <= 2) {\r\n        return ""Invalid Length"";\r\n    }\r\n\r\n    //Swap all words\r\n    String[] reverseWords = new String[words.length];\r\n    for(int i = words.length - 1; i >= 0; i--)\r\n    {\r\n        reverseWords[(reverseWords.length - 1) - i] = words[i];\r\n    }\r\n\r\n    // Reverse middle words\r\n    for (int i = 1; i < words.length - 1; i++) {\r\n        reverseWords[i] = new StringBuilder(reverseWords[i]).reverse().toString();\r\n    }\r\n\r\n    return String.join("" "", reverseWords); // Join words with a space\r\n}""]",1,0
"[""@Table(name = ""customers"", catalog = ""market"")\r\n\r\npublic class QLKH_DTO implements java.io.Serializable {\r\n    \r\n    @Id\r\n    @GeneratedValue(strategy =GenerationType.IDENTITY) \r\n    @Column(name = ""CustomerID"")\r\n    private Integer CustomerID;\r\n   \r\n    @Column(name = ""Password"")\r\n    private String Password;\r\n    \r\n    @Column(name = ""Fullname"")\r\n    private String Fullname; \r\n    \r\n    @Column(name = ""Address"")\r\n    private String Address;\r\n    \r\n    @Column(name = ""City"")\r\n    private String City;\r\n    \r\n    public QLKH_DTO(){}\r\n     \r\n    public QLKH_DTO(String Password,String Fullname, String Address, String City) {\r\n        this.Password = Password;\r\n        this.Fullname = Fullname;\r\n        this.Address = Address;\r\n        this.City = City;\r\n    }\r\n     \r\n \r\n    public Integer getCustomerID() {\r\n        return this.CustomerID;\r\n    }\r\n\r\n    public void setCustomerID(Integer CustomerID) {\r\n        this.CustomerID = CustomerID;\r\n    }\r\n    \r\n    public String getPassword() {\r\n        return this.Password;\r\n    }\r\n\r\n    public void setPassword(String Password) {\r\n        this.Password = Password;\r\n    }\r\n   \r\n    public String getFullname() {\r\n        return this.Fullname;\r\n    }\r\n\r\n    public void setFullname(String Fullname) {\r\n        this.Fullname = Fullname;\r\n    }\r\n    \r\n    public String getAddress() {\r\n        return this.Address;\r\n    }\r\n\r\n    public void setAddress(String Address) {\r\n        this.Address = Address;\r\n    }\r\n   \r\n    public String getCity() {\r\n        return this.City;\r\n    }\r\n\r\n    public void setCity(String City) {\r\n        this.City = City;\r\n    } \r\n}""]",1,0
"[""private static void postCall() throws IOException {\r\n\r\n    // Create a new HTTP client        \r\n    OkHttpClient client = new OkHttpClient()\r\n            .newBuilder()           \r\n            .build();\r\n\r\n    // Create the request body\r\n    MediaType mediaType = MediaType.parse(""application/x-www-form-urlencoded"");\r\n    RequestBody body = RequestBody.Companion.create(""password=yourPassword&grant_type=password&client_id=yoirClientId&username=yourUserName"",mediaType);\r\n    \r\n    // Build the request object, with method, headers\r\n    Request request = new Request.Builder()\r\n            .url(""https://your-address-to-get-the-token/openid-connect/token"")\r\n            .method(""POST"", body)               \r\n            .build();\r\n            \r\n    // Perform the request, this potentially throws an IOException\r\n    Response response = client.newCall(request).execute();\r\n    // Read the body of the response into a hashmap\r\n    Map<String, Object> responseMap = new ObjectMapper().readValue(response.body().byteStream(), HashMap.class);\r\n    // Read the value of the ""access_token"" key from the hashmap\r\n    String accessToken = (String) responseMap.get(""access_token"");\r\n    //System.out.println(responseMap.toString());\r\n    // Return the access_token value\r\n    System.out.println(""accessToken "" + accessToken);\r\n\r\n     request = new Request.Builder()\r\n            .url(""https://your-endpoint-rest-call"")\r\n            .method(""GET"", null)\r\n            .addHeader(""Authorization"", ""Bearer "" + accessToken)\r\n            .build();\r\n\r\n     response = client.newCall(request).execute();\r\n     System.out.println(""Response"" + response.body().string());\r\n\r\n\r\n}""]",1,0
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.FieldDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.Expression;\r\nimport com.github.javaparser.ast.expr.MethodCallExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class TestUtil {\r\n\r\n    public static void listFieldAccess() throws FileNotFoundException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n            List<String> fields = new ArrayList<>();\r\n\r\n            // Find all field names\r\n            classDeclaration.findAll(FieldDeclaration.class).forEach(fieldDeclaration -> {\r\n                fieldDeclaration.getVariables().forEach(variable -> {\r\n                    fields.add(variable.getNameAsString());\r\n                });\r\n            });\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                methodDeclaration.findAll(Expression.class).forEach(expression -> {\r\n                    // Process only specific types of expressions\r\n                    if (expression instanceof MethodCallExpr || expression instanceof AssignExpr ||\r\n                            expression instanceof UnaryExpr) {\r\n                        // Check if any of the expression fields match the class level fields\r\n                        List<String> matchedFields = fields.stream().filter(field -> {\r\n                            return expression.getChildNodes().stream().anyMatch((node) -> node.toString().contains(field));\r\n                        }).collect(Collectors.toList());\r\n                        System.out.println(""Field access: "" + matchedFields);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}""]",1,0
"[""import org.springframework.context.MessageSource;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.support.ReloadableResourceBundleMessageSource;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\r\n\r\nimport java.util.Locale;\r\n\r\n@Configuration\r\npublic class ApplicationConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public MessageSource messageSource() {\r\n        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();\r\n        messageSource.setBasenames(""classpath:/i18n/messages"");\r\n        messageSource.setDefaultEncoding(""UTF-8"");\r\n        return messageSource;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\r\n        localeChangeInterceptor.setParamName(""lang"");\r\n        return localeChangeInterceptor;\r\n    }\r\n\r\n    @Bean(name = ""localeResolver"")\r\n    public SessionLocaleResolver sessionLocaleResolver() {\r\n        SessionLocaleResolver localeResolver = new SessionLocaleResolver();\r\n        localeResolver.setDefaultLocale(new Locale(""en""));\r\n        return localeResolver;\r\n    }\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(localeChangeInterceptor());\r\n    } \r\n}""]",1,0
"[""import java.nio.ByteBuffer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.Base64;\r\nimport org.bouncycastle.crypto.Signer;\r\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\r\nimport org.bouncycastle.crypto.params.Ed25519PublicKeyParameters;\r\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\r\nimport org.bouncycastle.util.encoders.Hex;\r\n\r\n// Base64, hex decode\r\nString keyHexBase64 =""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\nbyte[] key = Hex.decode(new String(Base64.getDecoder().decode(keyHexBase64), StandardCharsets.UTF_8));\r\n\r\n// Separate secret and public key\r\nByteBuffer keyBuffer = ByteBuffer.wrap(key);\r\nbyte[] secretKey = new byte[32];\r\nkeyBuffer.get(secretKey);\r\nbyte[] publicKey = new byte[keyBuffer.remaining()];\r\nkeyBuffer.get(publicKey);\r\n\r\n// Signing\r\nbyte[] message = ""The quick brown fox jumps over the lazy dog"".getBytes(StandardCharsets.UTF_8);\r\nEd25519PrivateKeyParameters secretKeyParameters = new Ed25519PrivateKeyParameters(secretKey, 0);\r\nSigner signer = new Ed25519Signer();\r\nsigner.init(true, secretKeyParameters);\r\nsigner.update(message, 0, message.length);\r\nbyte[] signature = signer.generateSignature();\r\nSystem.out.println(""Signature (hex): "" + Hex.toHexString(signature));\r\n\r\n// Verification\r\nEd25519PublicKeyParameters publicKeyParameters = new Ed25519PublicKeyParameters(publicKey, 0);\r\nSigner verifier = new Ed25519Signer();\r\nverifier.init(false, publicKeyParameters);\r\nverifier.update(message, 0, message.length);\r\nboolean verified = verifier.verifySignature(signature); // Signature (hex): 2aa31bb14799a00ac1129bdd6773a8481f0fd7e829d59f6fccc81021bf21e397dc5d17362d342615a5500598542586cad8891f984bdb90ec0c80b48eb638df07\r\nSystem.out.println(""Verification: "" + verified); // Verification: true""]",1,0
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Scope;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class EtlStep {\r\n    private final Tracer tracer;\r\n\r\n    public EtlStep(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj, int step) {\r\n        // Retrieve the current span context if available\r\n        SpanContext parentContext = Span.fromContext(Context.current()).getSpanContext();\r\n\r\n        Span span = tracer.spanBuilder(""Step"" + step)\r\n            .setParent(Context.current().with(Span.wrap(parentContext)))\r\n            .startSpan();\r\n\r\n        try (Scope scope = span.makeCurrent()) {\r\n            CompletableFuture.runAsync(() -> {\r\n                // Your code here\r\n            }).whenComplete((unused, exception) -> {\r\n                if (exception != null) {\r\n                    span.recordException(exception);\r\n                }\r\n                span.end();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nclass DataPackage {\r\n    private final String uniqueId;\r\n\r\n    public DataPackage(String uniqueId) {\r\n        this.uniqueId = uniqueId;\r\n    }\r\n\r\n    public String getUniqueId() {\r\n        return uniqueId;\r\n    }\r\n}""]",1,0
"[""import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        // Increment the counter\r\n        long currentValue = COUNTER.getAndIncrement();\r\n\r\n        // Use bit manipulation and formatting to generate the desired output\r\n        long part1 = (currentValue >> 28) & 0xFFFF;  // First 4 hex digits\r\n        long part2 = (currentValue >> 16) & 0xFFF;   // Next 3 hex digits\r\n        long part3 = currentValue & 0xFFFF;          // Last 4 hex digits\r\n\r\n        return String.format(""%04X-7%03X-%04X"", part1, part2, part3);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}""]",1,0
"[""@Slf4j\r\n@Configuration\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n@Value(""${jwt.key}"")\r\nprivate String jwtKey;\r\n\r\nprivate final TokenService tokenService;\r\n\r\n@Bean\r\nSecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                           CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n    OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n    http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n    http.exceptionHandling((exceptions) -> exceptions.defaultAuthenticationEntryPointFor(\r\n                    new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n            .oauth2ResourceServer((resourceServer) -> resourceServer.jwt(jwtSpec -> {\r\n                jwtSpec.decoder(jwtDecoder());\r\n            }));\r\n\r\n    http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n    return http.build();\r\n\r\n}\r\n\r\n@Bean\r\nSecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n    http\r\n            .authorizeHttpRequests(authz -> authz\r\n                    .requestMatchers(""/hello"").authenticated()\r\n                    .anyRequest().permitAll())\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                    .jwt(jwt -> jwt.decoder(jwtDecoder())))\r\n            .formLogin(Customizer.withDefaults());\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\nAuthorizationServerSettings authorizationServerSettings() {\r\n    return AuthorizationServerSettings.builder().build();\r\n}\r\n\r\n@Bean\r\nWebSecurityCustomizer webSecurityCustomizer() {\r\n    return (web) -> web.ignoring().requestMatchers(new AntPathRequestMatcher(""/h2-console/**""));\r\n}\r\n\r\n@Bean\r\nPasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n\r\n@Bean\r\nOAuth2TokenCustomizer<JwtEncodingContext> jwtCustomizer() {\r\n    return tokenService.jwtCustomizer();\r\n}\r\n\r\n@Bean\r\npublic JwtEncoder jwtEncoder() {\r\n    return tokenService.jwtEncoder();\r\n}\r\n\r\n@Bean\r\npublic JwtDecoder jwtDecoder() {\r\n    byte[] keyBytes = Base64.getDecoder().decode(jwtKey);\r\n    SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n    return NimbusJwtDecoder.withSecretKey(keySpec).build();\r\n}\r\n}\r\n\r\n@Service\r\npublic class TokenService {\r\n\r\n@Value(""${jwt.key}"")\r\nprivate String jwtKey;\r\n\r\npublic OAuth2TokenCustomizer<JwtEncodingContext> jwtCustomizer() {\r\n    return context -> {\r\n        if (OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())) {\r\n            context.getJwsHeader().algorithm(MacAlgorithm.HS256);\r\n            Date expirationDate = \r\nDate.from(Instant.now().plus(Duration.ofHours(5)));\r\n            Date issueDate = Date.from(Instant.now());\r\n            context.getClaims().claims(claims -> {\r\n                claims.put(""exp"", expirationDate);\r\n                claims.put(""iat"", issueDate);\r\n                claims.put(""custom"", ""custom"");\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\npublic JwtEncoder jwtEncoder() {\r\n    return parameters -> {\r\n        byte[] secretKeyBytes = Base64.getDecoder().decode(jwtKey);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyBytes, ""HmacSHA256"");\r\n\r\n        try {\r\n            MACSigner signer = new MACSigner(secretKeySpec);\r\n\r\n            JWTClaimsSet.Builder claimsSetBuilder = new JWTClaimsSet.Builder();\r\n            parameters.getClaims().getClaims().forEach((key, value) ->\r\n                    claimsSetBuilder.claim(key, value instanceof Instant ? Date.from((Instant) value) : value)\r\n            );\r\n            JWTClaimsSet claimsSet = claimsSetBuilder.build();\r\n\r\n            JWSHeader header = new JWSHeader(JWSAlgorithm.HS256);\r\n\r\n            SignedJWT signedJWT = new SignedJWT(header, claimsSet);\r\n            signedJWT.sign(signer);\r\n\r\n            return Jwt.withTokenValue(signedJWT.serialize())\r\n                    .header(""alg"", header.getAlgorithm().getName())\r\n                    .subject(claimsSet.getSubject())\r\n                    .issuer(claimsSet.getIssuer())\r\n                    .claims(claims -> claims.putAll(claimsSet.getClaims()))\r\n                    .issuedAt(claimsSet.getIssueTime().toInstant())\r\n                    .expiresAt(claimsSet.getExpirationTime().toInstant())\r\n                    .build();\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(""Error while signing the JWT"", e);\r\n        }\r\n    };\r\n}\r\n}""]",1,0
"[""import java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.SecureRandom;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.crypto.engines.AESEngine;\r\nimport org.bouncycastle.crypto.generators.OpenSSLPBEParametersGenerator;\r\nimport org.bouncycastle.crypto.io.CipherOutputStream;\r\nimport org.bouncycastle.crypto.modes.CBCBlockCipher;\r\nimport org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\r\nimport org.bouncycastle.crypto.params.ParametersWithIV;\r\n\r\n...\r\n\r\nString inputPath = ""..."";\r\nString outputPath = ""..."";\r\nString passwordStr = ""..."";\r\n\r\n// Generate random 8 bytes salt\r\nSecureRandom random = new SecureRandom();\r\nbyte salt[] = new byte[8];\r\nrandom.nextBytes(salt);\r\n\r\n// Derive 32 bytes key (AES_256) and 16 bytes IV\r\nbyte[] password = passwordStr.getBytes(StandardCharsets.UTF_8);\r\nOpenSSLPBEParametersGenerator pbeGenerator = new OpenSSLPBEParametersGenerator(new MD5Digest()); // SHA256 as of v1.1.0 (if in OpenSSL the default digest is applied)\r\npbeGenerator.init(password, salt);\r\nParametersWithIV parameters = (ParametersWithIV) pbeGenerator.generateDerivedParameters(256, 128); // keySize, ivSize in bits\r\n\r\n// Encrypt with AES-256, CBC using streams\r\ntry (FileOutputStream fos = new FileOutputStream(outputPath)) {\r\n\r\n    // Apply OpenSSL format\r\n    fos.write(""Salted__"".getBytes(StandardCharsets.UTF_8));\r\n    fos.write(salt);\r\n\r\n    // Encrypt chunkwise (for large data)\r\n    PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESEngine()));\r\n    cipher.init(true, parameters);\r\n    try (FileInputStream fis = new FileInputStream(inputPath);\r\n         CipherOutputStream cos = new CipherOutputStream(fos, cipher)) {\r\n        int bytesRead = -1;\r\n        byte[] buffer = new byte[64 * 1024 * 1024]; // chunksize, e.g. 64 MiB\r\n        while ((bytesRead = fis.read(buffer)) != -1) {\r\n            cos.write(buffer, 0, bytesRead);\r\n        }    \r\n    }\r\n}""]",1,0
"[""public User signin(UserLoginDTO loginDetails, HttpServletResponse response) {\r\n    try {\r\n        // Get the wallet ID and signed message from the body stored in the DTO\r\n        String publicWalletId = loginDetails.getPublicWalletId();\r\n        String message = loginDetails.getMessage();\r\n\r\n        // Find the nonce from the DB that was used to sign this message\r\n        User user = userRepository.findByPublicWalletId(publicWalletId);\r\n        String nonce = user.getNonce();\r\n\r\n        // Generate the HASH of the Nonce\r\n        byte[] nonceHash = Hash.sha3(nonce.getBytes()) // org.web3j.crypto.Hash\r\n\r\n        // Generate the Signature Data\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(message); // org.web3j.utils.Numeric\r\n        \r\n        byte v = (byte) ((signatureBytes[64] < 27) ? (signatureBytes[64] + 27) : signatureBytes[64]);\r\n        byte[] r = Arrays.copyOfRange(signatureBytes, 0, 32);\r\n        byte[] s = Arrays.copyOfRange(signatureBytes, 32, 64);\r\n        \r\n        SignatureData signatureData = new SignatureData(v, r, s); // org.web3j.crypto.Sign.SignatureData\r\n\r\n        // Generate the 4 possible Public Keys\r\n        List<String> recoveredKeys = new ArrayList<>();\r\n        for(int i = 0; i < 4; i++) {\r\n            BigInteger r = new BigInteger(1, signatureData.getR());\r\n            BigInteger s = new BigInteger(1, signatureData.getS());\r\n            ECDSASignature ecdsaSignature = new ECDSASignature(r, s);\r\n            BigInteger recoveredKey = Sign.recoverFromSignature((byte)i, ecdsaSignature, nonceHash);\r\n            if(recoveredKey != null) {\r\n                recoveredKeys.add(""0x"" + Keys.getAddressFromKey(recoveredKey)); // org.web3j.crypto.Keys\r\n            }\r\n        }\r\n\r\n        // Check if one of the generated Keys match the public wallet ID.\r\n        for(String recoveredKey : recoveredKeys) {\r\n            if(recoveredKey.equalsIgnoreCase(publicWalletId)) { \r\n                // Add Code here to create the JWT and add that to your HttpServletResponse. Not shown here.\r\n                return user;\r\n            }\r\n        }\r\n        throw new CustomException(""Message Sign Invalid"", HttpStatus.UNAUTHORIZED);\r\n    }\r\n    catch (Exception ex) {\r\n         // Custom Error Handling.\r\n    }\r\n}""]",1,0
"[""import org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.servlet.mvc.method.annotation.SseEmitter;\r\n\r\nimport java.io.IOException;\r\n\r\n@RestController\r\n@RequestMapping(""/sse"")\r\npublic class SseController {\r\n\r\n    @GetMapping(""/events"")\r\n    public SseEmitter handleSse() {\r\n        SseEmitter emitter = new SseEmitter();\r\n\r\n        // Asynchronous processing to send events\r\n        new Thread(() -> {\r\n            try {\r\n                for (int i = 0; i < 10; i++) {\r\n                    // Send events every 1 second\r\n                    emitter.send(SseEmitter.event().name(""message"").data(""Event "" + i));\r\n\r\n                    Thread.sleep(1000);\r\n                }\r\n                // Signal the end of the event stream\r\n                emitter.complete();\r\n            } catch (IOException | InterruptedException e) {\r\n                emitter.completeWithError(e);\r\n            }\r\n        }).start();\r\n\r\n        return emitter;\r\n    }\r\n}""]",1,0
"[""public class ShakyDataSource implements DataSource {\r\n    private final DataSource ds;\r\n    private AtomicLong getConnectionCallsCount = new AtomicLong(1);\r\n    \r\n    public ShakyDataSource(final DataSource ds) {\r\n        this.ds = ds;\r\n    }\r\n    \r\n    @Override\r\n    public Connection getConnection() throws SQLException {\r\n        final long newGetConnectionCallCount = getConnectionCallsCount.incrementAndGet();\r\n        \r\n        if ((newGetConnectionCallCount % 2) == 0) {\r\n            throw new SQLException(""Simulated connection failure"");\r\n        }\r\n        else {\r\n            return ds.getConnection();\r\n        }\r\n    }\r\n    \r\n    // All other methods of DataSource call corresponding methods of ds\r\n}\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport javax.sql.DataSource;\r\n\r\n[...]\r\n\r\n@Configuration\r\n@EnableConfigurationProperties\r\npublic class DbConfigClass {\r\n\r\n    [...]\r\n\r\n    @Bean(name = ""myDataSource"")\r\n    @ConfigurationProperties(prefix = ""com.mycompany.somedatabase"")\r\n    public DataSource dsSomeDataSource() {\r\n        if (SIMULATE_SHAKY_CONNECTION) {\r\n            LOGGER.error(""Don't do this in production!"");\r\n            return new ShakyDataSource(DataSourceBuilder.create().build());\r\n        }\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n    \r\n    [...]\r\n}""]",1,0
"[""import java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\ninterface ITask<T, R extends TaskResult<T>>{\r\n    R make();\r\n}\r\n\r\nclass TaskResult<T>{\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value){\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String, AlphaTaskResult> {\r\n    public AlphaTaskResult make(){\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer, BetaTaskResult> {\r\n    public BetaTaskResult make(){\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main <T>{\r\n\r\n    public static <T, R extends TaskResult<T>> List<R> run(List<ITask<T, R>> tasks){\r\n\r\n        List<R> results =  tasks\r\n                .stream()\r\n                .map(ITask::make)\r\n                .collect(Collectors.toList());\r\n\r\n        return results;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n\r\n    }\r\n}""]",1,0
"[""private void loadHighlightedPositions() {\r\n    SharedPreferences sharedPreferences = getSharedPreferences(""MyPrefs"", MODE_PRIVATE);\r\n    String positionsString = sharedPreferences.getString(""highlightedPositions"", """");\r\n    if (!positionsString.isEmpty()) {\r\n        String[] positionsArray = positionsString.split("","");\r\n        for (String position : positionsArray) {\r\n            highlightedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n}\r\n\r\nprivate void saveHighlightedPositions() {\r\n    SharedPreferences sharedPreferences = getSharedPreferences(""MyPrefs"", MODE_PRIVATE);\r\n    SharedPreferences.Editor editor = sharedPreferences.edit();\r\n    StringBuilder positionsString = new StringBuilder();\r\n    for (int position : highlightedPositions) {\r\n        positionsString.append(position).append("","");\r\n    }\r\n    if (positionsString.length() > 0) {\r\n        positionsString.deleteCharAt(positionsString.length() - 1); // Remove the trailing comma\r\n    }\r\n    editor.putString(""highlightedPositions"", positionsString.toString());\r\n    editor.apply();\r\n}""]",1,0
"[""public class UsernamePasswordAuthFilter extends AbstractAuthenticationProcessingFilter {\r\n    \r\n  private final String END_POINT = ""/api/login"";\r\n  private static final ObjectMapper MAPPER = new ObjectMapper();\r\n\r\n  UsernamePasswordAuthFilter() {\r\n    super(END_POINT); \r\n  }\r\n\r\n  @Override\r\n  public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\r\n            throws AuthenticationException, IOException, ServletException;\r\n\r\n    CredentialsDto credentialsDto = MAPPER.readValue(request.getInputStream(), CredentialsDto.class);\r\n    String username = credentialsDto.getUsername();\r\n    String password = credentialsDto.getPassword();\r\n    \r\n    UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(username,\r\n                password);\r\n    // Allow subclasses to set the ""details"" property\r\n    setDetails(request, authRequest);\r\n    return this.getAuthenticationManager().authenticate(authRequest);\r\n  }\r\n}\r\n\r\npublic class UsernamePasswordAuthFilter extends AbstractAuthenticationProcessingFilter {\r\n    \r\n  private final String END_POINT = ""/api/login"";\r\n  private static final ObjectMapper MAPPER = new ObjectMapper();\r\n\r\n  UsernamePasswordAuthFilter() {\r\n    super(END_POINT); \r\n  }\r\n\r\n  @Override\r\n  public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\r\n            throws AuthenticationException, IOException, ServletException;\r\n\r\n    CredentialsDto credentialsDto = MAPPER.readValue(request.getInputStream(), CredentialsDto.class);   \r\n    // Allow subclasses to set the ""details"" property\r\n    setDetails(request, credentialsDto);\r\n    return this.getAuthenticationManager().authenticate(credentialsDto);\r\n  }\r\n}\r\n\r\n@Component\r\n@AllArgsConstructor\r\npublic class CustomAuthenticationProvider implements AuthenticationProvider {\r\n\r\n    private final AuthenticationService authenticationService;\r\n    \r\n    @Override\r\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {       \r\n        UserDto userDto = null;\r\n        if(authentication instanceof CredentialsDto) {\r\n          userDto = authenticationService.authenticate((CredentialsDto) authentication);\r\n                \r\n        }\r\n        \r\n        if(userDto==null)return null;       \r\n        return new UsernamePasswordAuthenticationToken(userDto.getUsername(), \r\n                null,\r\n                List.of(new SimpleGrantedAuthority(userDto.getRole())\r\n        )); \r\n    }\r\n\r\n    @Override\r\n    public boolean supports(Class<?> authentication) {    \r\n        return CredentialsDto.class.isAssignableFrom(authentication);\r\n    }\r\n}""]",1,0
"[""@Service\r\n@RequiredArgsConstructor\r\npublic class UserDetailsServiceImpl implements UserDetailsService {\r\n\r\n    private final UserTenantRepository userTenantRepository;\r\n\r\n    @Override\r\n    @Transactional\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n\r\n        // Getting subdomain from request attributes\r\n        HttpServletRequest request =\r\n                ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes()))\r\n                        .getRequest();\r\n\r\n        String serverName = request.getServerName();\r\n        String subdomain = serverName.substring(0, serverName.indexOf("".""));\r\n        UserTenant userTenant = userTenantRepository.findByUserAndSubdomain(username, subdomain)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\r\n                        ""UserTenant Not Found with username: "" + username + "" and "" + subdomain));\r\n\r\n        // Getting Rules from the UserTenant\r\n        List<GrantedAuthority> authorities = userTenant.getRoles().stream()\r\n                .map(role -> new SimpleGrantedAuthority(role.getName().name()))\r\n                .collect(Collectors.toList());\r\n\r\n        return new UserDetailsImpl(\r\n                userTenant.getUser().getId(),\r\n                userTenant.getUser().getUsername(),\r\n                userTenant.getUser().getPassword(),\r\n                authorities\r\n        );\r\n    }\r\n}""]",1,0
"[""import dis\r\n\r\nIn [24]: dis.dis(""'time'=='time'"")\r\n  1           0 LOAD_CONST               0 ('time')  # <-- same object (0)\r\n              2 LOAD_CONST               0 ('time')  # <-- same object (0)\r\n              4 COMPARE_OP               2 (==)\r\n              6 RETURN_VALUE\r\n\r\nIn [25]: dis.dis(""'time'=='1234'"")\r\n  1           0 LOAD_CONST               0 ('time')  # <-- different object (0)\r\n              2 LOAD_CONST               1 ('1234')  # <-- different object (1)\r\n              4 COMPARE_OP               2 (==)\r\n              6 RETURN_VALUE\r\n\r\nIn [26]: timeit.timeit(""x='time'; y='time'; x==y"", number=1000000)\r\nOut[26]: 0.0745926329982467\r\n\r\nIn [27]: timeit.timeit(""x='time'; y='1234'; x==y"", number=1000000)\r\nOut[27]: 0.10328884399496019\r\n\r\nint\r\n_PyUnicode_Equal(PyObject *str1, PyObject *str2)\r\n{\r\n    assert(PyUnicode_CheckExact(str1));\r\n    assert(PyUnicode_CheckExact(str2));\r\n    if (str1 == str2) {                  // <-- Here\r\n        return 1;\r\n    }\r\n    if (PyUnicode_READY(str1) || PyUnicode_READY(str2)) {\r\n        return -1;\r\n    }\r\n    return unicode_compare_eq(str1, str2);\r\n}""]",1,0
"[""from typing import Annotated, Literal, TypeVar\r\nimport numpy as np\r\nimport numpy.typing as npt\r\n\r\n\r\nDType = TypeVar(""DType"", bound=np.generic)\r\n\r\nArray4 = Annotated[npt.NDArray[DType], Literal[4]]\r\nArray3x3 = Annotated[npt.NDArray[DType], Literal[3, 3]]\r\nArrayNxNx3 = Annotated[npt.NDArray[DType], Literal[""N"", ""N"", 3]]\r\n\r\nimport numpy as np\r\nfrom my_types import Array4\r\n\r\n\r\ndef foo(arr: Array4[np.int32]):\r\n    assert arr.shape == (4,)\r\n\r\ndef assert_match(arr, array_type):\r\n    hinted_shape = array_type.__metadata__[0].__args__\r\n    hinted_dtype_type = array_type.__args__[0].__args__[1]\r\n    hinted_dtype = hinted_dtype_type.__args__[0]\r\n    assert np.issubdtype(arr.dtype, hinted_dtype), ""DType does not match""\r\n    assert arr.shape == hinted_shape, ""Shape does not match""\r\n\r\n\r\nassert_match(some_array, Array4[np.int32])\r\n\r\nfrom nptyping import NDArray, Shape, Int32\r\n\r\n\r\ndef foo(arr: NDArray[Shape[""4""], Int32]):\r\n    assert isinstance(arr, NDArray[Shape[""4""], Int32])\r\n\r\nfrom beartype import beartype\r\nfrom beartype.vale import Is\r\nfrom typing import Annotated\r\nimport numpy as np\r\n\r\n\r\nInt32Array4 = Annotated[np.ndarray, Is[lambda array:\r\n    array.shape == (4,) and np.issubdtype(array.dtype, np.int32)]]\r\nInt32Array3x3 = Annotated[np.ndarray, Is[lambda array:\r\n    array.shape == (3,3) and np.issubdtype(array.dtype, np.int32)]]\r\n\r\nimport numpy as np\r\nfrom beartype import beartype\r\nfrom my_types import Int32Array4 \r\n\r\n\r\n@beartype\r\ndef foo(arr: Int32Array4):\r\n    ...  # Runtime type checked by beartype.\r\n\r\nfrom nptyping import NDArray, Shape, Int32\r\nfrom beartype import beartype\r\n\r\n\r\n@beartype\r\ndef foo(arr: NDArray[Shape[""4""], Int32]):\r\n    ...  # Runtime type checked by beartype.""]",1,0
"[""from starlette.concurrency import iterate_in_threadpool\r\n\r\n@app.middleware(""http"")\r\nasync def some_middleware(request: Request, call_next):\r\n    response = await call_next(request)\r\n    response_body = [chunk async for chunk in response.body_iterator]\r\n    response.body_iterator = iterate_in_threadpool(iter(response_body))\r\n    print(f""response_body={response_body[0].decode()}"")\r\n    return response\r\n\r\n@app.middleware(""http"")\r\nasync def some_middleware(request: Request, call_next):\r\n    response = await call_next(request)\r\n    chunks = []\r\n    async for chunk in response.body_iterator:\r\n        chunks.append(chunk)\r\n    response_body = b''.join(chunks)\r\n    print(f""response_body={response_body.decode()}"")\r\n    return Response(content=response_body, status_code=response.status_code, \r\n        headers=dict(response.headers), media_type=response.media_type)""]",1,0
"[""def nrng_gen():\r\n    yield from range(10)\r\n\r\nnrng = nrng_gen()\r\n\r\nnrng_func = lambda: next(nrng)\r\n\r\nfor i in range(10):\r\n    print(nrng_func())\r\n\r\nclass NRNG:\r\n    def __init__(self):\r\n        self.numbers = range(10)\r\n        self.state = -1\r\n    def __call__(self):\r\n        self.state += 1\r\n        return self.numbers[self.state]\r\n        \r\nnrng = NRNG()\r\n\r\n\r\nfor i in range(10):\r\n    print(nrng())""]",1,0
"[""query = select(Payment)\r\n\r\nresults = sess.execute(query).all()\r\nprint(results)  # [(Payment(id=1),), (Payment(id=2),)]\r\nprint(type(results[0]))  # <class 'sqlalchemy.engine.row.Row'>\r\n\r\nresults = sess.scalars(query).all()\r\nprint(results)  # [Payment(id=1), Payment(id=2)]\r\nprint(type(results[0]))  # <class '__main__.Payment'>\r\n\r\nquery = select(\r\n    Payment.id,\r\n    Payment.organization_id,\r\n    Payment.payment_type,\r\n)\r\n\r\nresults = sess.scalars(query).all()\r\nprint(results)  # [1, 2]\r\n\r\nresults = sess.execute(query).all()\r\nprint(results)  # [(1, 123, None), (2, 234, None)]""]",1,0
"[""res = [r1.result(), r2.result()]\r\n\r\nres = await asyncio.gather(r1, r2)\r\n\r\nclass GatheringTaskGroup(asyncio.TaskGroup):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.__tasks = []\r\n\r\n    def create_task(self, coro, *, name=None, context=None):\r\n        task = super().create_task(coro, name=name, context=context)\r\n        self.__tasks.append(task)\r\n        return task\r\n\r\n    def results(self):\r\n        return [task.result() for task in self.__tasks]\r\n\r\nasync def foo(): return 1\r\nasync def bar(): return 2\r\nasync with GatheringTaskGroup() as tg:\r\n    task1 = tg.create_task(foo())\r\n    task2 = tg.create_task(bar())\r\nprint(tg.results())""]",1,0
"[""{\r\n    ""name"": ""Python: Current File (Integrated Terminal)"",\r\n    ""type"": ""python"",\r\n    ""request"": ""launch"",\r\n    ""program"": ""${file}"",\r\n    ""console"": ""integratedTerminal"",\r\n    ""purpose"": [""debug-test""], \r\n    ""redirectOutput"": true,\r\n    ""env"": {""PYTHONPATH"": ""${workspaceRoot}""}\r\n}\r\n\r\ndef test_disabling_capturing(capsys):\r\n    print('this output is captured')\r\n    with capsys.disabled():\r\n        print('output not captured, going directly to sys.stdout')\r\n    print('this output is also captured')""]",1,0
"[""from sqlmodel import SQLModel, Field\r\n\r\nfrom .user import User\r\n\r\nclass Item(SQLModel):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\nUser.update_forward_refs(Item=Item)\r\n\r\nfrom fastapi import FastAPI\r\n\r\nfrom .user import User\r\nfrom . import item\r\n\r\napi = FastAPI()\r\n\r\n@api.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n\r\nfrom .item import Item""]",1,0
"[""import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\npx.bar(df, x=list(df[""names""]), y=list(df[""random""]))\r\n\r\nimport polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({""a"":[1,2,3,4,5], ""b"":[1,4,9,16,25]})\r\n\r\npx.line(x=df[""a""], y=df[""b""])""]",1,0
"[""Name: langchain\r\nVersion: 0.0.220\r\nSummary: Building applications with LLMs through composability\r\nHome-page: https://www.github.com/hwchase17/langchain\r\nAuthor: \r\nAuthor-email: \r\nLicense: MIT\r\nLocation: /home/anaconda3/lib/python3.9/site-packages\r\nRequires: aiohttp, async-timeout, dataclasses-json, langchainplus-sdk, numexpr, numpy, openapi-schema-pydantic, pydantic, PyYAML, requests, SQLAlchemy, tenacity\r\nRequired-by: jupyter_ai, jupyter_ai_magics\r\n\r\npython3.10 -m pip install langchain\r\n\r\npython3.10 -m pip show langchain\r\n\r\nName: langchain\r\nVersion: 0.0.264\r\nSummary: Building applications with LLMs through composability\r\nHome-page: https://www.github.com/hwchase17/langchain\r\nAuthor: \r\nAuthor-email: \r\nLicense: MIT\r\nLocation: /home/.local/lib/python3.10/site-packages\r\nRequires: aiohttp, async-timeout, dataclasses-json, langsmith, numexpr, numpy, openapi-schema-pydantic, pydantic, PyYAML, requests, SQLAlchemy, tenacity\r\nRequired-by:""]",1,0
"[""es = Elasticsearch(\r\n    [\r\n        {'host': 'localhost', 'port': '9200', ""scheme"": ""https""}\r\n    ],\r\n        basic_auth=('elastic', '<password>')\r\n)\r\n\r\nes = Elasticsearch(\r\n    [\r\n        {\r\n            'host':str(es_host),\r\n            'port':str(es_port),\r\n            'scheme': ""https""\r\n        }\r\n    ], \r\n    http_auth=(str(es_username), str(es_password))\r\n)""]",1,0
"[""{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: Current File with arguments"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [\r\n        ""--dir"",\r\n        ""/some/fixed/dir/${input:enterDir}""\r\n      ]\r\n    }\r\n  ],\r\n  ""inputs"": [\r\n    {\r\n      ""id"": ""enterDir"",\r\n      ""type"": ""promptString"",\r\n      ""description"": ""Subdirectory to process"",\r\n      ""default"": ""data-0034""\r\n    }\r\n  ]\r\n}\r\n\r\n{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: Current File with arguments"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [\r\n        ""--dir"",\r\n        ""${input:pickDir}""\r\n      ]\r\n    }\r\n  ],\r\n  ""inputs"": [\r\n    {\r\n      ""id"": ""pickDir"",\r\n      ""type"": ""command"",\r\n      ""command"": ""extension.commandvariable.file.pickFile"",\r\n      ""args"": {\r\n        ""include"": ""**/*"",\r\n        ""display"": ""fileName"",\r\n        ""description"": ""Subdirectory to process"",\r\n        ""showDirs"": true,\r\n        ""fromFolder"": { ""fixed"": ""/some/fixed/dir"" }\r\n      }\r\n    }\r\n  ]\r\n}""]",1,0
"[""def convert_tris_to_quads(obj_path, export_folder):\r\n    try:\r\n        filename = os.path.basename(obj_path).split('.')[0]\r\n        logging.info(f""Importing {obj_path}"")\r\n\r\n        bpy.ops.object.select_all(action='DESELECT')\r\n        bpy.ops.object.select_by_type(type='MESH')\r\n        bpy.ops.object.delete()\r\n    \r\n        bpy.ops.import_scene.obj(filepath=obj_path)\r\n        print(""current objects in the scene: "", [obj for obj in bpy.context.scene.objects])\r\n        for obj in bpy.context.selected_objects:\r\n            bpy.context.view_layer.objects.active = obj\r\n            \r\n        logging.info(""Converting mesh"")\r\n        bpy.ops.object.mode_set(mode='EDIT')\r\n        bpy.ops.mesh.select_all(action='SELECT')\r\n        bpy.ops.mesh.tris_convert_to_quads()\r\n        bpy.ops.object.mode_set(mode='OBJECT')\r\n\r\n        # Export to OBJ\r\n        obj_export_path = export_folder + filename + '_quad.obj'\r\n        logging.info(f""Exporting OBJ to {obj_export_path}"")\r\n        bpy.ops.export_scene.obj(filepath=obj_export_path, use_selection=True)\r\n\r\n        # Export to STL\r\n        stl_export_path = export_folder + filename + '_quad.stl'\r\n        logging.info(f""Exporting STL to {stl_export_path}"")\r\n        bpy.ops.export_mesh.stl(filepath=stl_export_path, use_selection=True)\r\n\r\n    except Exception as e:\r\n        logging.error(f""Error processing {obj_path}: {e}"")\r\n        return False""]",1,0
"[""import re\r\nfrom io import StringIO\r\nfrom itertools import batched\r\n\r\nfile = StringIO('''a\t  b c\td _ e\r\na   b c\td _ e\r\n   a   b c\td _ e\r\na   b_c\td _ e\t\r\nabcd''')\r\n\r\nfor line in file:\r\n    print(list(batched(re.split(r""([\s_]+)"", line.rstrip('\r\n')) + [''], 2)))\r\n\r\n[('a', '\t  '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('a', '   '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('', '   '), ('a', '   '), ('b', ' '), ('c', '\t'), ('d', ' _ '), ('e', '')]\r\n[('a', '   '), ('b', '_'), ('c', '\t'), ('d', ' _ '), ('e', '\t'), ('', '')]\r\n[('abcd', '')]""]",1,0
"[""from fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass Item(BaseModel):\r\n    process_id: int\r\n\r\n\r\n@app.post(""/do_something"")\r\nasync def do_something(item: Item):\r\n    return item\r\n\r\ndef test_do_something():\r\n    response = client.post(""/do_something"", json={""process_id"": 16})\r\n    return response.json()\r\n\r\n@app.post(""/do_something"")\r\nasync def do_something(process_id: int):\r\n    return {""process_id"": process_id}\r\n\r\ndef test_do_something():\r\n    response = client.post(""/do_something"", params={""process_id"": 16})\r\n    return response.json()\r\n\r\n@app.post(""/do_something"")\r\ndef do_something(process_id: int = Body(..., embed=True)):\r\n    return process_id""]",1,0
"[""def mirror(a):\r\n    m, n = a.shape\r\n    if m == n:\r\n        return a.T.copy()\r\n    if m > n:\r\n        return mirror(a.T).T\r\n\r\n    # Shear\r\n    v = a.flatten()\r\n    w = v[:-m].reshape((m, n-1))\r\n    \r\n    # Flip the parallelogram\r\n    w[:, m-1:] = w[::-1, m-1:]\r\n\r\n    # Flip the triangles\r\n    t = np.vstack((w[:, :m-1].reshape((m-1, m)), v[-m:]))\r\n    t = t.T\r\n    w[:, :m-1] = t[:-1].reshape((m, m-1))\r\n\r\n    # Write flipped parts back and unshear\r\n    v[:-m] = w.ravel()\r\n    v[-m:] = t[-1]\r\n    return v.reshape((m, n))""]",1,0
"[""from fastapi import FastAPI, Request, status\r\nfrom fastapi.responses import RedirectResponse, HTMLResponse\r\nfrom typing import Optional\r\nimport urllib\r\n\r\napp = FastAPI()\r\n\r\nclass CustomURLProcessor:\r\n    def __init__(self):  \r\n        self.path = """" \r\n        self.request = None\r\n\r\n    def url_for(self, request: Request, name: str, **params: str):\r\n        self.path = request.url_for(name, **params)\r\n        self.request = request\r\n        return self\r\n    \r\n    def include_query_params(self, **params: str):\r\n        parsed = list(urllib.parse.urlparse(self.path))\r\n        parsed[4] = urllib.parse.urlencode(params)\r\n        return urllib.parse.urlunparse(parsed)\r\n        \r\n\r\n@app.get('/', response_class=HTMLResponse)\r\ndef event_msg(request: Request, msg: Optional[str] = None):\r\n    if msg:\r\n        html_content = """"""\r\n        <html>\r\n           <head>\r\n              <script>\r\n                 window.history.pushState('', '', ""/"");\r\n              </script>\r\n           </head>\r\n           <body>\r\n              <h1>"""""" + msg + """"""</h1>\r\n           </body>\r\n        </html>\r\n        """"""\r\n        return HTMLResponse(content=html_content, status_code=200)\r\n    else:\r\n        html_content = """"""\r\n        <html>\r\n           <body>\r\n              <h1>Create an event</h1>\r\n              <form method=""POST"" action=""/"">\r\n                 <input type=""submit"" value=""Create Event"">\r\n              </form>\r\n           </body>\r\n        </html>\r\n        """"""\r\n        return HTMLResponse(content=html_content, status_code=200)\r\n\r\n@app.post('/')\r\ndef event_create(request: Request):\r\n    redirect_url = CustomURLProcessor().url_for(request, 'event_msg').include_query_params(msg=""Succesfully created!"")\r\n    return RedirectResponse(redirect_url, status_code=status.HTTP_303_SEE_OTHER)\r\n\r\nfrom starlette.datastructures import URL\r\n\r\nredirect_url = URL(request.url_for('event_msg')).include_query_params(msg=""Succesfully created!"")\r\n\r\nredirect_url = request.url_for('event_msg').include_query_params(msg=""Succesfully created!"")""]",1,0
"[""def glimpse(df):\r\n    print(f""Rows: {df.shape[0]}"")\r\n    print(f""Columns: {df.shape[1]}"")\r\n    for col in df.columns:\r\n        print(f""$ {col} <{df[col].dtype}> {df[col].head().values}"")\r\n\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame(\r\n    {""column_one"": [""A"", ""B"", ""C"", ""D""], ""column_two"": [1, 2, 3, 4]}\r\n)\r\n\r\nglimpse(df)\r\n\r\n# Output\r\nRows: 4\r\nColumns: 2\r\n$ column_one <object> ['A' 'B' 'C' 'D']\r\n$ column_two <int64> [1 2 3 4]""]",1,0
"[""from fastapi import FastAPI, Request, Depends, HTTPException\r\nfrom starlette.status import HTTP_403_FORBIDDEN\r\nfrom fastapi.security.api_key import APIKeyHeader\r\nfrom fastapi import Security\r\nfrom typing import Optional\r\n\r\nAPI_KEY = 'some-api-key'\r\nAPI_KEY_NAME = 'X-API-KEY'\r\nsafe_clients = ['127.0.0.1']\r\n\r\n\r\nclass MyAPIKeyHeader(APIKeyHeader):\r\n    async def __call__(self, request: Request) -> Optional[str]:\r\n        if request.client.host in safe_clients:\r\n            api_key = API_KEY\r\n        else:\r\n            api_key = request.headers.get(self.model.name)\r\n            if not api_key:\r\n                if self.auto_error:\r\n                    raise HTTPException(\r\n                        status_code=HTTP_403_FORBIDDEN, detail='Not authenticated'\r\n                    )\r\n                else:\r\n                    return None\r\n\r\n        return api_key\r\n\r\n\r\napi_key_header_auth = MyAPIKeyHeader(name=API_KEY_NAME)\r\n\r\n\r\nasync def check_api_key(request: Request, api_key: str = Security(api_key_header_auth)):\r\n    if api_key != API_KEY:\r\n        raise HTTPException(status_code=401, detail='Invalid API Key')\r\n\r\n \r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.get('/')\r\ndef main(request: Request):\r\n    return request.client.host\r\n\r\nfrom fastapi import FastAPI, Request, Security, Depends, HTTPException\r\nfrom fastapi.security.api_key import APIKeyHeader\r\n\r\n\r\n# List of valid API keys\r\nAPI_KEYS = [\r\n    'z77xQYZWROmI4fY4',\r\n    'FXhO4i3bLA1WIsvR'\r\n]\r\nAPI_KEY_NAME = 'X-API-KEY'\r\nsafe_clients = ['127.0.0.1']\r\napi_key_header = APIKeyHeader(name=API_KEY_NAME, auto_error=False)\r\n\r\n\r\nasync def check_api_key(request: Request, api_key: str = Security(api_key_header)):\r\n    if api_key not in API_KEYS and request.client.host not in safe_clients:\r\n        raise HTTPException(status_code=401, detail='Invalid or missing API Key')\r\n\r\n \r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.get('/')\r\ndef main(request: Request):\r\n    return request.client.host\r\n\r\nfrom fastapi import Response\r\n\r\n# ... rest of the code is the same as above\r\n\r\napp = FastAPI(dependencies=[Depends(check_api_key)])\r\n\r\n\r\n@app.middleware(""http"")\r\nasync def remove_auth_btn(request: Request, call_next):\r\n    response = await call_next(request)\r\n    if request.url.path == '/openapi.json' and request.client.host in safe_clients:\r\n        response_body = [section async for section in response.body_iterator]\r\n        resp_str = response_body[0].decode()  # convert ""response_body"" bytes into string\r\n        resp_dict = json.loads(resp_str)  # convert ""resp_str"" into dict\r\n        del resp_dict['components']['securitySchemes']  # remove securitySchemes\r\n        resp_str = json.dumps(resp_dict)  # convert ""resp_dict"" back to str\r\n        return Response(content=resp_str, status_code=response.status_code, media_type=response.media_type)\r\n    \r\n    return response""]",1,0
"[""class CustomDate:\r\n    POTENTIAL_FORMATS = []\r\n\r\n    @classmethod\r\n    def validate(cls, field_value, info):\r\n        if type(field_value) is date:\r\n            return field_value\r\n        return to_date(info.field_name, field_value, cls.POTENTIAL_FORMATS, return_str=False)\r\n\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(cls, source, handler) -> core_schema.CoreSchema:\r\n        return core_schema.with_info_before_validator_function(\r\n            cls.validate, handler(date), field_name=handler.field_name\r\n        )\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import Annotated, List, Any, Callable\r\n\r\n\r\nfrom pydantic import ValidationError, BaseModel, Field, BeforeValidator, field_validator, GetCoreSchemaHandler\r\nfrom pydantic_core import core_schema, CoreSchema\r\n\r\n\r\ndef fn(v: str, info: core_schema.ValidationInfo, *args, **kwargs) -> str:\r\n    try:\r\n        print(f'Validating {info.field_name}')\r\n        return info.data['use_this']\r\n    except AttributeError as err:\r\n        return 'No data'\r\n\r\n\r\nclass AsFieldB4Method(str):\r\n    @classmethod\r\n    def __get_pydantic_core_schema__(\r\n        cls, source_type: Any, handler: GetCoreSchemaHandler, *args, **kwargs\r\n    ) -> CoreSchema:\r\n        return core_schema.field_before_validator_function(fn, 'not_the_real_field_name', core_schema.str_schema())\r\n\r\n\r\nclass MyModel(BaseModel):\r\n    use_this: str\r\n    core_schema_field_b4_method: AsFieldB4Method  # Partially works""]",1,0
"[""--ignore-requires-python    Ignore the Requires-Python information.\r\n\r\nfrom setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""foobar"",\r\n    version=""1.0"",\r\n    packages=find_packages(),\r\n    python_requires=""<3.7""\r\n)\r\n\r\n$ pip install .\r\nProcessing /home/vvvvv/75726452\r\nERROR: Package 'foobar' requires a different Python: 3.7.11 not in '<3.7'\r\n\r\n$ pip install . --ignore-requires-python\r\nProcessing /home/vvvvv/75726452\r\nInstalling collected packages: foobar\r\n    Running setup.py install for foobar ... done\r\nSuccessfully installed foobar-1.0""]",1,0
"[""from collections import namedtuple\r\n\r\nPoint = namedtuple(""Point"", [""x"", ""y""])\r\n\r\np = Point(4, 5)\r\n\r\nx = p.x\r\ny = p.y\r\n\r\nxy = p  # xy = tuple(p) not necessary since namedtuple is already a tuple\r\n\r\nfrom dataclasses import dataclass, astuple\r\n\r\n@dataclass\r\nclass Point:\r\n    x: int\r\n    y: int\r\n    \r\np = Point(4, 5)\r\n\r\nx = p.x\r\ny = p.y\r\n\r\nxy = astuple(p)""]",1,0
"[""O(x_size * (y_size + z_size))\r\n\r\nimport numba as nb\r\nimport numpy as np\r\n\r\n# Fill the missing values in the value-array if there is not enough values (e.g. pretty large z_size)\r\n# (untested)\r\n@nb.njit('(float64[::1], uint16[::1], int64)')\r\ndef fill_missing_values(all_val, all_pos, z_size):\r\n    i = 0\r\n    while i < z_size:\r\n        # If there is a missing value\r\n        if all_pos[i] == 0xFFFF:\r\n            j = i\r\n            while j < z_size and all_pos[j] == 0xFFFF:\r\n                j += 1\r\n            if i == 0:\r\n                # Fill the hole based on 1 value (lower bound)\r\n                assert j+1 < z_size and all_pos[j] == 0xFFFF and all_pos[j] != 0xFFFF\r\n                for i2 in range(i, j):\r\n                    all_val[i2] = all_val[j+1]\r\n                    all_pos[i2] = all_pos[j+1]\r\n            elif j == z_size:\r\n                # Fill the hole based on 1 value (upper bound)\r\n                assert i-1 >= 0 and all_pos[i-1] != 0xFFFF and all_pos[i] == 0xFFFF\r\n                for i2 in range(i, j):\r\n                    all_val[i2] = all_val[i-1]\r\n                    all_pos[i2] = all_pos[i-1]\r\n            else:\r\n                assert i-1 >= 0 and j < z_size and all_pos[i-1] != 0xFFFF and all_pos[j] != 0xFFFF\r\n                lower_val = all_val[i-1]\r\n                lower_pos = all_pos[i-1]\r\n                upper_val = all_val[j]\r\n                upper_pos = all_pos[j]\r\n                # Fill the hole based on 2 values\r\n                for i2 in range(i, j):\r\n                    if np.abs(lower_val - i2) < np.abs(upper_val - i2):\r\n                        all_val[i2] = lower_val\r\n                        all_pos[i2] = lower_pos\r\n                    else:\r\n                        all_val[i2] = upper_val\r\n                        all_pos[i2] = upper_pos\r\n            i = j\r\n        i += 1\r\n\r\n# Correct values in very pathological cases where z_size is big so there are not enough \r\n# values added to the value-array causing some values of the value-array to be incorrect.\r\n# The number of `while` iteration should be always <= 3 in practice\r\n@nb.njit('(float64[::1], uint16[::1], int64)')\r\ndef correct_values(all_val, all_pos, z_size):\r\n    while True:\r\n        stop = True\r\n        for i in range(0, z_size-1):\r\n            current = np.abs(all_val[i] - i)\r\n            if np.abs(all_val[i+1] - i) < current:\r\n                all_val[i] = all_val[i+1]\r\n                all_pos[i] = all_pos[i+1]\r\n                stop = False\r\n        for i in range(1, z_size):\r\n            current = np.abs(all_val[i] - i)\r\n            if np.abs(all_val[i-1] - i) < current:\r\n                all_val[i] = all_val[i-1]\r\n                all_pos[i] = all_pos[i-1]\r\n                stop = False\r\n        if stop:\r\n            break\r\n\r\n@nb.njit('(float64[:,::1], int64)', parallel=True)\r\ndef compute_fastest(z_coordinates, z_size):\r\n    x_size, y_size = z_coordinates.shape\r\n    assert y_size >= 2 and z_size >= 2\r\n    y_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n    for x in nb.prange(x_size):\r\n        all_pos = np.full(z_size, 0xFFFF, dtype=np.uint16)\r\n        all_val = np.full(z_size, np.inf, dtype=np.float64)\r\n        for y in range(0, y_size):\r\n            val = z_coordinates[x, y]\r\n            #assert not np.isnan(val)\r\n            if val < 0: # Lower bound\r\n                i = 0\r\n                if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                    all_val[i] = val\r\n                    all_pos[i] = y\r\n            elif val >= z_size: # Upper bound\r\n                i = z_size - 1\r\n                if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                    all_val[i] = val\r\n                    all_pos[i] = y\r\n            else: # Inside the array of values\r\n                offset = np.int32(val)\r\n                for i in range(max(offset-1, 0), min(offset+2, z_size)):\r\n                    if np.abs(val - i) < np.abs(all_val[i] - i):\r\n                        all_val[i] = val\r\n                        all_pos[i] = y\r\n        fill_missing_values(all_val, all_pos, z_size)\r\n        correct_values(all_val, all_pos, z_size)\r\n        for i in range(0, z_size):\r\n            y_coordinates[x, i] = all_pos[i]\r\n    return y_coordinates\r\n\r\nNaive fully vectorized code in the question:   113000 ms  (slow due to swapping)\r\nNaive loop in the question:                      8460 ms\r\nZLi's implementation:                            1964 ms\r\nNaive Numba parallel code with loops:             402 ms\r\nPaulS' implementation:                            262 ms\r\nThis Numba code:                                   12 ms  <----------""]",1,0
"[""from transformers import AutoTokenizer, AutoModelForSequenceClassification\r\n\r\ntokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\r\nmodel = AutoModelForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')\r\n\r\n\r\ntext = ['hello this is a test',\r\n 'that transforms a list of sentences',\r\n 'into a list of list of sentences',\r\n 'in order to emulate, in this case, two batches of the same lenght',\r\n 'to be tokenized by the hf tokenizer for the defined model']\r\n\r\nclassifier(text, batch_size=2, truncation=""only_first"")\r\n\r\n[{'label': 'NEGATIVE', 'score': 0.9379090666770935},\r\n {'label': 'POSITIVE', 'score': 0.9990271329879761},\r\n {'label': 'NEGATIVE', 'score': 0.9726701378822327},\r\n {'label': 'NEGATIVE', 'score': 0.9965035915374756},\r\n {'label': 'NEGATIVE', 'score': 0.9913086891174316}]\r\n\r\nclassifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer)\r\ntype(classifier)\r\n\r\nfrom transformers import TextClassificationPipeline\r\n\r\nclass MarioThePlumber(TextClassificationPipeline):\r\n    def postprocess(self, model_outputs):\r\n        best_class = model_outputs[""logits""]\r\n        return best_class\r\n\r\npipe = MarioThePlumber(model=model, tokenizer=tokenizer)\r\n\r\npipe(text, batch_size=2, truncation=""only_first"")\r\n\r\n[tensor([[ 1.5094, -1.2056]]),\r\n tensor([[-3.4114,  3.5229]]),\r\n tensor([[ 1.8835, -1.6886]]),\r\n tensor([[ 3.0780, -2.5745]]),\r\n tensor([[ 2.5383, -2.1984]])]""]",1,0
"[""from contextlib import asynccontextmanager\r\n\r\n...\r\n\r\nmain_app_lifespan = app.router.lifespan_context\r\n\r\n@asynccontextmanager\r\nasync def lifespan_wrapper(app):\r\n    print(""sub startup"")\r\n    async with main_app_lifespan(app) as maybe_state:\r\n        yield maybe_state\r\n    print(""sub shutdown"")\r\n\r\napp.router.lifespan_context = lifespan_wrapper\r\n\r\nINFO:     Waiting for application startup.\r\nsub startup\r\nstartup\r\nINFO:     Application startup complete.\r\n...\r\nINFO:     Shutting down\r\nINFO:     Waiting for application shutdown.\r\nshutdown\r\nsub shutdown\r\nINFO:     Application shutdown complete.""]",1,0
"[""# my_app.modules.box.schemas.py\r\nfrom pydantic import BaseModel\r\nfrom my_app.modules.toy.schemas import ToyResponse\r\n\r\nclass BoxResponse(BaseModel):\r\n    id: int\r\n    toys: list[""ToyResponse""] # Type check not required here since this is the parent class\r\n\r\n# my_app.modules.toy.schemas.py\r\nfrom typing import TYPE_CHECKING\r\nfrom pydantic import BaseModel\r\n\r\nif TYPE_CHECKING:\r\n    from my_app.modules.box.schemas import BoxResponse\r\n\r\nclass ToyResponse(BaseModel):\r\n    id: int\r\n    if TYPE_CHECKING:\r\n        box: ""BoxResponse""\r\n    else:\r\n        box""]",1,0
"[""import re\r\nimport pandas as pd\r\n\r\ntext = """"""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|  \r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n""""""\r\n\r\npattern = r""\| ([\w\s]+) \| ([\w\s]+) \| ([\w\s]+) \|""\r\n\r\n# Use the findall function to extract all rows that match the pattern\r\nmatches = re.findall(pattern, text)\r\n\r\n# Extract the header and data rows\r\nheader = matches[0]\r\ndata = matches[1:]\r\n\r\n# Create a pandas DataFrame using the extracted header and data rows\r\ndf = pd.DataFrame(data, columns=header)\r\n\r\n# Optionally, convert numerical columns to appropriate types\r\ndf['Some Number'] = df['Some Number'].astype(int)\r\n\r\nprint(df)""]",1,0
"[""from fastapi import FastAPI, Request\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.get('/{_:path}')\r\nasync def pred_image(request: Request):\r\n    url = request.url.path[1:] if not request.url.query else request.url.path[1:] + ""?"" + request.url.query\r\n    return {'url': url}\r\n\r\n@app.get('/{full_path:path}')\r\nasync def pred_image(full_path: str, request: Request):\r\n    url = full_path if not request.url.query else full_path + ""?"" + request.url.query\r\n    return {'url': url}\r\n\r\n@app.get('/{_:path}')\r\nasync def pred_image(request: Request):\r\n    url = request.url._url.split('/', 3)[-1]\r\n    return {'url': url}\r\n\r\nimport requests\r\nfrom urllib.parse import quote \r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\npath_param = 'https://www.google.com/search?q=my+query'\r\nurl = base_url + quote(path_param, safe='')\r\nr = requests.get(url)\r\nprint(r.json())\r\n\r\nfrom urllib.parse import unquote \r\n\r\n@app.get('/{path}')\r\nasync def pred_image(path: str):\r\n    return {'url': unquote(unquote(path))}\r\n\r\nimport requests\r\nfrom urllib.parse import quote \r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\npath_param = 'https://www.google.com/search?q=my+query'\r\nurl = base_url + quote(quote(path_param, safe=''), safe='')\r\nr = requests.get(url)\r\nprint(r.json())\r\n\r\n@app.get('/')\r\nasync def pred_image(url: str):\r\n    return {'url': url}\r\n\r\nimport requests\r\n\r\nbase_url = 'http://127.0.0.1:8000/'\r\nparams = {'url': 'https://www.google.com/search?q=my+query'}\r\nr = requests.get(base_url, params=params)\r\nprint(r.json())\r\n\r\n405 ""Method Not Allowed""""]",1,0
"[""def func(b: HasHasA) -> None:\r\n    b.hasa.a += 100 - 100\r\n\r\n@dataclass\r\nclass Inner:\r\n    a: bool\r\n\r\no = Outer(Inner(bool(0)))\r\nfunc(o)\r\nif o.hasa.a is False:\r\n    print(""Oh no! This is still False!"")\r\nelse:\r\n    print(""This is true now!"")\r\n\r\nclass HasHasA(Protocol):\r\n    @property\r\n    def hasa(self) -> HasA:\r\n        ...""]",1,0
"[""from itertools import chain\r\n\r\ndef f(*args):\r\n    res = list(chain.from_iterable([[item] for item in l] for l in args[0]))\r\n    for arg in args[1:]:\r\n        aux = []\r\n        for i, sublist in enumerate(arg):\r\n            aux += [res[i] + [opt] for opt in sublist]\r\n        res = aux\r\n    return res\r\n\r\ndef check(*args):\r\n    size = sum(len(l) for l in args[0])\r\n    for arg in args[1:]:\r\n        if len(arg) != size:\r\n            return False\r\n        size = sum(len(l) for l in arg)\r\n    return True""]",1,0
"[""import pandas as pd\r\ndata = ['221011141200', '221011031200', '221011191200', '221011131600']\r\n\r\ndf = pd.DataFrame(data, columns=['dttime'])\r\ndf['dttime'] = pd.to_datetime(df['dttime'], format='%y%m%d%H%M%S')\r\n\r\n# Before sorting\r\nprint(df)\r\n\r\n# After sorting\r\ndf = df.sort_values(by='dttime')\r\nprint(df)\r\n\r\ndttime\r\n0 2022-10-11 14:12:00\r\n1 2022-10-11 03:12:00\r\n2 2022-10-11 19:12:00\r\n3 2022-10-11 13:16:00\r\n\r\n               dttime\r\n1 2022-10-11 03:12:00\r\n3 2022-10-11 13:16:00\r\n0 2022-10-11 14:12:00\r\n2 2022-10-11 19:12:00""]",1,0
"[""def _int_to_enum(value, enum_klass):\r\n    """"""Convert a numeric value to an IntEnum member.\r\n    If it's not a known member, return the numeric value itself.\r\n    """"""\r\n    try:\r\n        return enum_klass(value)\r\n    except ValueError:\r\n        return value\r\n\r\nfrom signal import _int_to_enum as rcall\r\nfrom functools import reduce, partial\r\n\r\ndef increment(x):\r\n    return x + 1\r\n\r\ndef double(x):\r\n    return x * 2\r\n\r\ndouble_and_increment = partial(reduce, rcall, [double, increment])\r\nprint(double_and_increment(1))""]",1,0
"[""def utcnow(cls):\r\n    ""Construct a UTC datetime from time.time().""\r\n    t = _time.time()\r\n    return cls.utcfromtimestamp(t)\r\n\r\nimport time\r\nfrom itertools import repeat\r\n\r\ndef function():\r\n    n = 10_000_000\r\n    reps = repeat(1, n)\r\n    now = time.time\r\n    first = now()\r\n    for _ in reps:\r\n        second = now()\r\n        assert first <= second, f""{first=} {second=} i={n - sum(reps)}""\r\n        first = second\r\nfunction()""]",1,0
"[""import numpy as np\r\nimport tensorflow as tf\r\n\r\n# add additional dimension for lstm layer\r\nx_train = np.asarray(train_set[""x data""].values))[..., None] \r\ny_train = np.asarray(train_set[""y data""]).astype(np.float32)\r\n\r\nmodel = tf.keras.Sequential()\r\nmodel.add(tf.keras.layers.LSTM(units=32))\r\nmodel.add(tf.keras.layers.Dense(units=1))\r\nmodel.compile(loss=""mean_squared_error"", optimizer=""adam"", metrics=""mse"")\r\nmodel.fit(x=x_train,y=y_train,epochs=10)\r\n\r\nx_train = tf.ragged.constant(train_set[""x data""].values[..., None]) # add additional dimension for lstm layer\r\ny_train = np.asarray(train_set[""y data""]).astype(np.float32)\r\n\r\nmodel = tf.keras.Sequential()\r\nmodel.add(tf.keras.layers.Input(shape=[None, x_train.bounding_shape()[-1]], batch_size=2, dtype=tf.float32, ragged=True))\r\nmodel.add(tf.keras.layers.LSTM(units=32))\r\nmodel.add(tf.keras.layers.Dense(units=1))\r\nmodel.compile(loss=""mean_squared_error"", optimizer=""adam"", metrics=""mse"")\r\nmodel.fit(x=x_train,y=y_train,epochs=10)\r\n\r\nx_train = tf.ragged.constant([np.array(list(v))[..., None] for v in train_set[""x data""].values]) # add additional dimension for lstm layer""]",1,0
"[""from pyiceberg.catalog import load_catalog\r\nfrom pyiceberg.table import Table\r\nfrom pyiceberg.schema import Schema\r\nfrom pyiceberg.types import DoubleType, StringType, TimestampType, NestedField\r\nfrom pyiceberg.partitioning import PartitionSpec, PartitionField\r\nfrom pyiceberg.transforms import YearTransform, MonthTransform, DayTransform\r\nfrom pyiceberg.table.sorting import SortOrder, SortField\r\nfrom pyiceberg.transforms import IdentityTransform\r\n\r\ndef create_iceberg_table():\r\n    # Specify the Glue Catalog database name and URI\r\n    glue_database_name = ""iceberg_catalog""\r\n    glue_catalog_uri = ""s3://ua-weather-data/catalog""  # Replace with your Glue Catalog URI\r\n\r\n    # Instantiate glue catalog\r\n    catalog = load_catalog(""glue"", **{""type"": ""glue""})\r\n    #catalog = load_catalog(catalog_impl=""org.apache.iceberg.aws.glue.GlueCatalog"", name=glue_database_name, uri=glue_catalog_uri)\r\n\r\n    # Define the Iceberg schema\r\n    schema = Schema(\r\n        NestedField(field_id=1, name=""cloudCover"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=2, name=""dayOfWeek"", field_type=StringType(), required=False),\r\n        NestedField(field_id=3, name=""dayOrNight"", field_type=StringType(), required=False),\r\n        NestedField(field_id=4, name=""expirationTimeUtc"", field_type=TimestampType(), required=False),\r\n        NestedField(field_id=5, name=""iconCode"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=6, name=""iconCodeExtend"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=7, name=""precipChance"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=8, name=""precipType"", field_type=StringType(), required=False),\r\n        NestedField(field_id=9, name=""pressureMeanSeaLevel"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=10, name=""qpf"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=11, name=""qpfSnow"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=12, name=""relativeHumidity"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=13, name=""temperature"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=14, name=""temperatureFeelsLike"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=15, name=""temperatureHeatIndex"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=16, name=""temperatureWindChill"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=17, name=""uvDescription"", field_type=StringType(), required=False),\r\n        NestedField(field_id=18, name=""uvIndex"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=19, name=""validTimeLocal"", field_type=TimestampType(), required=True),\r\n        NestedField(field_id=20, name=""validTimeUtc"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=21, name=""visibility"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=22, name=""windDirection"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=23, name=""windDirectionCardinal"", field_type=StringType(), required=False),\r\n        NestedField(field_id=24, name=""windGust"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=25, name=""windSpeed"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=26, name=""wxPhraseLong"", field_type=StringType(), required=False),\r\n        NestedField(field_id=27, name=""wxPhraseShort"", field_type=StringType(), required=False),\r\n        NestedField(field_id=28, name=""wxSeverity"", field_type=DoubleType(), required=False),\r\n        NestedField(field_id=29, name=""data_origin"", field_type=StringType(), required=True)\r\n    )\r\n\r\n    # Define the partitioning specification with year, month, and day\r\n    partition_spec = PartitionSpec(\r\n        PartitionField(field_id=19, source_id=19, transform=YearTransform(), name=""validTimeLocal_year""),\r\n        PartitionField(field_id=19, source_id=19, transform=MonthTransform(), name=""validTimeLocal_month""),\r\n        PartitionField(field_id=19, source_id=19, transform=DayTransform(), name=""validTimeLocal_day"")\r\n    )\r\n\r\n    # Define the sorting order using validTimeUtc field\r\n    sort_order = SortOrder(SortField(source_id=20, transform=IdentityTransform()))\r\n\r\n    # Create the Iceberg table using the Iceberg catalog\r\n    table_name = ""iceberg_catalog.hourly_forecasts""\r\n    catalog.create_table(\r\n        identifier=table_name,\r\n        location=""s3://ua-weather-data/catalog"",\r\n        schema=schema,\r\n        partition_spec=partition_spec,\r\n        sort_order=sort_order\r\n    )\r\n\r\n    print(""Iceberg table created using AWS Glue Catalog."")\r\n\r\nif __name__ == ""__main__"":\r\n    create_iceberg_table()""]",1,0
"[""from typing import get_type_hints\r\n\r\n\r\ndef func():\r\n    class A:\r\n        some_b: ""B""\r\n\r\n    class B:\r\n        pass\r\n\r\n    print(get_type_hints(A, localns=locals()))\r\n\r\n\r\nfunc()\r\n\r\nfrom __future__ import annotations\r\nfrom typing import get_type_hints\r\n\r\n\r\ndef func():\r\n    class A:\r\n        some_b: B\r\n\r\n    class B:\r\n        pass\r\n\r\n    print(get_type_hints(A, localns=locals()))""]",1,0
"[""from bs4 import BeautifulSoup\r\nimport shutil\r\nimport pathlib\r\nimport logging\r\nimport streamlit as st\r\n\r\n\r\ndef add_analytics_tag():\r\n    # replace G-XXXXXXXXXX to your web app's ID\r\n    \r\n    analytics_js = """"""\r\n    <!-- Global site tag (gtag.js) - Google Analytics -->\r\n    <script async src=""https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX""></script>\r\n    <script>\r\n        window.dataLayer = window.dataLayer || [];\r\n        function gtag(){dataLayer.push(arguments);}\r\n        gtag('js', new Date());\r\n        gtag('config', 'G-XXXXXXXXXX');\r\n    </script>\r\n    <div id=""G-XXXXXXXXXX""></div>\r\n    """"""\r\n    analytics_id = ""G-XXXXXXXXXX""\r\n\r\n    \r\n    # Identify html path of streamlit\r\n    index_path = pathlib.Path(st.__file__).parent / ""static"" / ""index.html""\r\n    logging.info(f'editing {index_path}')\r\n    soup = BeautifulSoup(index_path.read_text(), features=""html.parser"")\r\n    if not soup.find(id=analytics_id): # if id not found within html file\r\n        bck_index = index_path.with_suffix('.bck')\r\n        if bck_index.exists():\r\n            shutil.copy(bck_index, index_path)  # backup recovery\r\n        else:\r\n            shutil.copy(index_path, bck_index)  # save backup\r\n        html = str(soup)\r\n        new_html = html.replace('<head>', '<head>\n' + analytics_js) \r\n        index_path.write_text(new_html) # insert analytics tag at top of head""]",1,0
"[""yum install epel-release\r\nyum install R\r\nyum install libxml2-devel\r\nyum install openssl-devel\r\nyum install libcurl-devel\r\nyum install libXcomposite libXcursor libXi libXtst libXrandr alsa-lib mesa-libEGL libXdamage mesa-libGL libXScrnSaver\r\n\r\nyum install conda\r\nconda clean -a     # Clean cache and remove old packages, if you already have conda installed\r\n# Install all the packages together and let conda handle versioning. It is important to give a Python version while setting up the environment. Since Tensorflow supports python 3.9.0, I have used this version \r\nconda create -y -n ""tf"" python=3.9.0 ipython tensorflow keras r-essentials r-reticulate r-tensorflow\r\nconda activate tf\r\n\r\niptables -A INPUT -p tcp --dport 7878 -j ACCEPT\r\n/sbin/service iptables save\r\n\r\n/usr/lib/rstudio-server/bin/rserver \\r\n   --server-daemonize=0 \\r\n   --www-port 7878 \\r\n   --rsession-which-r=$(which R) \\r\n   --rsession-ld-library-path=$CONDA_PREFIX/lib\r\n\r\ninstall.packages(""reticulate"")\r\ninstall.packages(""tensorflow"")\r\nlibrary(reticulate)\r\nlibrary(tensorflow)\r\nts <- reticulate::import(""tensorflow"")""]",1,0
"[""lasts = ['x', 'y', 'z']\r\nfirsts = ['a', 'b', 'c']\r\n\r\nfrom itertools import product\r\nfor last, first in product(lasts, firsts):\r\n    print (last, first)\r\n\r\nx a\r\nx b\r\nx c\r\ny a\r\ny b\r\ny c\r\nz a\r\nz b\r\nz c\r\n\r\niPairs=( (l,f) for l in lasts for f in firsts)\r\nfor last, first in iPairs:\r\n    print (last, first)\r\n\r\niPairs = zip( (l for l in lasts for _ in firsts),\r\n              (f for _ in lasts for f in firsts) )""]",1,0
"[""from typing import Optional\r\nfrom pydantic import BaseModel, BaseSettings\r\n\r\n\r\nclass SubSettings(BaseModel):\r\n     # ^ Note that this inherits from BaseModel, not BaseSettings\r\n    sub_field: Optional[str]\r\n\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str]\r\n    field_two: Optional[int]\r\n    sub_settings: SubSettings\r\n\r\n    class Config:\r\n        env_nested_delimiter = '__'\r\n\r\nfrom typing import Optional\r\nfrom pydantic import BaseModel, BaseSettings, Field\r\n\r\nclass SubSettings(BaseSettings):\r\n    sub_field: Optional[str]\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str]\r\n    field_two: Optional[int]\r\n    sub_settings: SubSettings\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs['sub_settings'] = SubSettings(_env_file=kwargs['_env_file'])\r\n        super().__init__(*args, **kwargs)\r\n\r\n\r\nsettings = Settings(_env_file='local.env')""]",1,0
"[""class FooBase(ABC):\r\n    @property\r\n    @classmethod\r\n    @abstractmethod\r\n    def foo(cls) -> str:\r\n        ...\r\n\r\nclass Foo(FooBase):\r\n    foo = ""hi""\r\n\r\ndef go(f: FooBase) -> str:\r\n    return f.foo\r\n\r\nclass Foo(FooBase):\r\n    ...\r\n\r\nFoo()  # error: Cannot instantiate abstract class ""Foo"" with abstract attribute ""foo""\r\n\r\n@final\r\nclass Foo(FooBase):  # error: Final class __main__.Foo has abstract attributes ""foo""\r\n   ...""]",1,0
"[""import sys, os\r\nsys.path.append(os.path.expanduser('~/path/to/parent'))\r\nfrom module_of_interest import *  # NOQA\r\n\r\nimport ubelt as ub\r\nfpath = ub.Path('/home/username/path/to/parent/module_of_interest.py')\r\nmodpath, modname = ub.split_modpath(fpath, check=False)\r\nmodpath = ub.Path(modpath).shrinkuser()  # abstract home directory\r\n\r\n+ my_project\r\n    + mypymod\r\n        + __init__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + submod2.py\r\n\r\nimport mypymod\r\nimport mypymod.submod1\r\nimport mypymod.subpkg\r\nimport mypymod.subpkg.submod2\r\n\r\nfrom setuptools import setup, find_packages\r\nsetup(\r\n    name='mypymod',\r\n    version='0.1.0',\r\n    packages=find_packages(include=['mypymod', 'mypymod.*']),\r\n    install_requires=[],\r\n)\r\n\r\n+ my_project\r\n    + setup.py\r\n    + mypymod\r\n        + __init__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + submod2.py\r\n\r\npip install -e <path-to-repo-root>\r\n\r\npip install -e .\r\n\r\n+ my_project\r\n    + setup.py\r\n    + mypymod\r\n        + __init__.py\r\n        + __main__.py\r\n        + submod1.py\r\n        + subpkg\r\n            + __init__.py\r\n            + __main__.py\r\n            + submod2.py\r\n\r\nfrom mypymod import submod1""]",1,0
"[""Union[\r\n    _SupportsArray[dtype[Any]],\r\n    _NestedSequence[_SupportsArray[dtype[Any]]],\r\n    bool,\r\n    int,\r\n    float,\r\n    complex,\r\n    str,\r\n    bytes,\r\n    _NestedSequence[Union[bool, int, float, complex, str, bytes]]\r\n]\r\n\r\nimport numpy.typing as npt\r\n\r\n...\r\n\r\ndef f(a: npt.ArrayLike) -> int:\r\n    return len(a)\r\n\r\n...\r\n\r\ndef g(a: npt.ArrayLike) -> Any:\r\n    return a[0]\r\n\r\nfrom typing import Any, Protocol, TypeVar\r\n\r\nimport numpy as np\r\n\r\nT = TypeVar(""T"", covariant=True)\r\n\r\n\r\nclass SequenceLike(Protocol[T]):\r\n    def __len__(self) -> int: ...\r\n    def __getitem__(self, item: int) -> T: ...\r\n\r\n\r\ndef f(a: SequenceLike[Any]) -> int:\r\n    return len(a)\r\n\r\n\r\ndef g(a: SequenceLike[T]) -> T:\r\n    return a[0]\r\n\r\n\r\nprint(f(np.array([0, 1])), g(np.array([0, 1])))\r\nprint(f([0, 1]), g([0, 1]))""]",1,0
"[""project\r\nÃ¢ÂÂ   file001.py\r\nÃ¢ÂÂ   file002.py\r\nÃ¢ÂÂ   function_app.py\r\nÃ¢ÂÂ   README.md\r\nÃ¢ÂÂ   host.json\r\nÃ¢ÂÂ   local.settings.json\r\n\r\nimport azure.function as func\r\nimport json\r\n    \r\nbp01 = func.Blueprint()\r\n@bp01.route(route=""route01"")\r\ndef method01(req:func.HttpRequest) -> func.HttpRequest:\r\n    return func.HttpResponse (\r\n        json.dumps({\r\n        'version': 1\r\n        })\r\n    )\r\n\r\nimport azure.function as func\r\nimport json\r\n    \r\nbp02 = func.Blueprint()\r\n@bp02.route(route=""route02"")\r\ndef method02(req:func.HttpRequest) -> func.HttpRequest:\r\n    return func.HttpResponse (\r\n        json.dumps({\r\n        'version': 2\r\n        })\r\n    )\r\n\r\nimport azure.functions as func \r\nfrom file001.py import bp01\r\nfrom file002.py import bp02\r\n\r\napp = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS) \r\n\r\napp.register_functions(bp01)\r\napp.register_functions(bp01)""]",1,0
"[""import toml\r\nfrom typing import Literal\r\n\r\ndef bump_version(file_path: str, part: Literal[""major"", ""minor"", ""patch""] = ""patch"") -> None:\r\n    with open(file_path, ""r"") as f:\r\n        pyproject = toml.load(f)\r\n\r\n    version = pyproject[""tool""][""poetry""][""version""]\r\n    major, minor, patch = map(int, version.split("".""))\r\n\r\n    if part == ""major"":\r\n        major += 1\r\n        minor = 0\r\n        patch = 0\r\n    elif part == ""minor"":\r\n        minor += 1\r\n        patch = 0\r\n    elif part == ""patch"":\r\n        patch += 1\r\n    else:\r\n        raise ValueError(""Invalid part value. Choose 'major', 'minor', or 'patch'."")\r\n\r\n    pyproject[""tool""][""poetry""][""version""] = f""{major}.{minor}.{patch}""\r\n\r\n    with open(file_path, ""w"") as f:\r\n        toml.dump(pyproject, f)\r\n\r\n    print(f""Version bumped to {major}.{minor}.{patch}"")""]",1,0
"[""(B * R)/(B + R)\r\n\r\nalpha * B + (1 - alpha) * R\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndata = [\r\n    [""A"", ""C"", 2],\r\n    [""A"", ""D"", 10],\r\n    [""A"", ""F"", 100],\r\n    [""A"", ""F"", 101],\r\n    [""A"", ""F"", 102],\r\n    [""A"", ""G"", 1],\r\n    [""B"", ""C"", 1],\r\n    [""B"", ""C"", 2],\r\n    [""B"", ""D"", 10],\r\n    [""B"", ""F"", 100],\r\n    [""B"", ""F"", 101],\r\n    [""B"", ""F"", 102],\r\n    [""B"", ""G"", 1],\r\n    [""B"", ""G"", 2],\r\n    [""B"", ""G"", 3],\r\n    [""B"", ""G"", 4],\r\n    [""B"", ""G"", 5],\r\n    [""B"", ""G"", 6],\r\n    [""B"", ""G"", 7],\r\n    [""B"", ""G"", 8]\r\n]\r\n\r\ndef weight(days_ago: int, epilson: float=0.005) -> float:\r\n    return np.exp(-1 * days_ago * epilson)\r\n\r\ndef weighted_balanceness(array: np.ndarray, weights: np.ndarray):\r\n    classes = np.unique(array)\r\n    cnt = np.array([weights[array == c].sum() for c in classes])\r\n    m = len(classes)\r\n    n = weights.sum()\r\n\r\n    H = -(cnt / n * np.log(cnt / n)).sum() \r\n    return H / np.log(m)\r\n\r\n\r\ndf = pd.DataFrame(data=data, columns=[""player"", ""opponent"", ""days_ago""])\r\ndf[""effective_count""] = weight(df[""days_ago""])\r\n\r\nscores = []\r\nfor opponent in df[""opponent""].unique():\r\n    df_o = df.loc[df[""opponent""] == opponent]\r\n    player = np.where(df_o[""player""].values == ""A"", 0, 1)\r\n    balanceness = weighted_balanceness(array=player, weights=df_o[""effective_count""])\r\n\r\n    recency = df_o[""effective_count""].mean()\r\n    scores.append([opponent, balanceness, recency])\r\n\r\n\r\ndf_out = pd.DataFrame(scores, columns=[""opponent"", ""balanceness"", ""recency""])\r\ndf_out[""br""] = df_out[""balanceness""] * df_out[""recency""]\r\ndf_out[""mean_br""] = 0.5 * df_out[""balanceness""] + 0.5 * df_out[""recency""]\r\ndf_out[""harmonic_mean_br""] = df_out[""balanceness""] * df_out[""recency""] / ( (df_out[""balanceness""] + df_out[""recency""]))\r\n\r\nprint(df_out)\r\n\r\nopponent  balanceness   recency        br   mean_br  harmonic_mean_br\r\n0        C     0.917739  0.991704  0.910125  0.954721          0.476644\r\n1        D     1.000000  0.951229  0.951229  0.975615          0.487503\r\n2        F     1.000000  0.603511  0.603511  0.801755          0.376368\r\n3        G     0.508437  0.979726  0.498129  0.744082          0.334728""]",1,0
"[""pip install Faker\r\npip install pydantic\r\n\r\nimport uuid\r\nfrom datetime import date, datetime, timedelta\r\nfrom typing import List, Union\r\nfrom pydantic import BaseModel, UUID4\r\nfrom faker import Faker\r\n\r\n# your pydantic model\r\nclass Person(BaseModel):\r\n    id: UUID4\r\n    name: str\r\n    hobbies: List[str]\r\n    age: Union[float, int]\r\n    birthday: Union[datetime, date]\r\n\r\nclass PersonFactory:\r\n    @classmethod\r\n    def generate_id(cls):\r\n        return str(uuid.uuid4())\r\n\r\n    @classmethod\r\n    def generate_name(cls):\r\n        # Implement your own logic to generate realistic names\r\n        return Faker().name()\r\n\r\n    @classmethod\r\n    def generate_hobbies(cls):\r\n        # Implement your own logic to generate hobbies\r\n        return Faker().words(nb=1)\r\n\r\n    @classmethod\r\n    def generate_age(cls):\r\n        # Implement your own logic to generate realistic ages\r\n        return Faker().random_int(1940, 2023)\r\n        \r\n    \r\n    @classmethod\r\n    def generate_birthday(cls):\r\n        # Implement your own logic to generate realistic birthdays\r\n        return Faker().date_of_birth(tzinfo=None, minimum_age=18, maximum_age=80)\r\n\r\n    @classmethod\r\n    def build(cls):\r\n        id = cls.generate_id()\r\n        name = cls.generate_name()\r\n        hobbies = cls.generate_hobbies()\r\n        birthday = cls.generate_birthday()\r\n        age = datetime.now().year - birthday.year\r\n        \r\n        return Person(id=id, name=name, hobbies=hobbies, age=age, birthday=birthday)\r\n\r\nresult = PersonFactory.build()\r\nprint(result)\r\n\r\nid=UUID('4b7ffc04-48a1-4f4d-8c5b-d3167717dd69')\r\nname='Katherine Brown'\r\nhobbies=['stay']\r\nage=30\r\nbirthday=datetime.date(1993, 2, 17)""]",1,0
"[""@app.post(""/upload"")\r\ndef upload(file: UploadFile = File(...)):\r\n    try:\r\n        contents = file.file.read()\r\n        with open(file.filename, 'wb') as f:\r\n            f.write(contents)\r\n    except Exception:\r\n        return {""message"": ""There was an error uploading the file""}\r\n    finally:\r\n        file.file.close()\r\n        \r\n    return {""message"": f""Successfuly uploaded {file.filename}""}\r\n\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8000/upload'\r\nfile = {'file': open('images/1.png', 'rb')}\r\nresp = requests.post(url=url, files=file) \r\nprint(resp.json())\r\n\r\nimport base64\r\nimport requests\r\n\r\nurl = 'http://127.0.0.1:8000/upload'\r\nwith open(""photo.png"", ""rb"") as image_file:\r\n    encoded_string = base64.b64encode(image_file.read())\r\n    \r\npayload ={""filename"": ""photo.png"", ""filedata"": encoded_string}\r\nresp = requests.post(url=url, data=payload)\r\n\r\n@app.post(""/upload"")\r\ndef upload(filename: str = Form(...), filedata: str = Form(...)):\r\n    image_as_bytes = str.encode(filedata)  # convert string to bytes\r\n    img_recovered = base64.b64decode(image_as_bytes)  # decode base64string\r\n    try:\r\n        with open(""uploaded_"" + filename, ""wb"") as f:\r\n            f.write(img_recovered)\r\n    except Exception:\r\n        return {""message"": ""There was an error uploading the file""}\r\n        \r\n    return {""message"": f""Successfuly uploaded {filename}""}""]",1,0
"[""ret = ret + result\r\n\r\n#define PY_SSIZE_T_CLEAN // Required for large bytes objects on 64-bit machines\r\n#include <Python.h>\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <assert.h>\r\n#include <omp.h>\r\n\r\nint base64_table[256];\r\n\r\n// Generate a conversion table for sake of performance\r\nstatic inline void init_table()\r\n{\r\n    static const unsigned char base64_chars[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";\r\n\r\n    for (int i = 0; i < 64; ++i)\r\n        base64_table[i] = -1;\r\n\r\n    for (int i = 0; i < 64; ++i)\r\n        base64_table[base64_chars[i]] = i;\r\n\r\n    base64_table['='] = 0;\r\n}\r\n\r\nstatic inline int decode_char(unsigned char c)\r\n{\r\n    return base64_table[c];\r\n}\r\n\r\n// Assume the input is correctly formatted\r\nstatic PyObject* decode(PyObject* self, PyObject* args)\r\n{\r\n    PyObject* input_obj;\r\n\r\n    // Extract the input parameter and check its type\r\n    if(!PyArg_ParseTuple(args, ""O!"", &PyBytes_Type, &input_obj))\r\n        return NULL;\r\n\r\n    char* input = PyBytes_AS_STRING(input_obj);\r\n    Py_ssize_t input_length = PyBytes_GET_SIZE(input_obj);\r\n    assert(input_length % 4 == 0);\r\n\r\n    int padding = 0;\r\n    padding += input_length >= 1 && input[input_length - 1] == '=';\r\n    padding += input_length >= 2 && input[input_length - 2] == '=';\r\n\r\n    // Assume there is enough memory\r\n    Py_ssize_t output_length = (input_length / 4) * 3 - padding;\r\n    PyObject* output_obj = PyBytes_FromStringAndSize(NULL, output_length);\r\n    assert(output_obj != NULL);\r\n    char* output = PyBytes_AS_STRING(output_obj);\r\n    assert(output != NULL);\r\n\r\n    #pragma omp parallel for schedule(guided) if(input_length >= 8*1024*1024)\r\n    for(Py_ssize_t k = 0; k < input_length / 4; ++k)\r\n    {\r\n        const Py_ssize_t i = k * 4;\r\n        const Py_ssize_t j = k * 3;\r\n\r\n        const int a = decode_char(input[i]);\r\n        const int b = decode_char(input[i + 1]);\r\n        const int c = decode_char(input[i + 2]);\r\n        const int d = decode_char(input[i + 3]);\r\n        assert(a > 0 && b > 0 && c > 0 && d > 0);\r\n\r\n        const int merged = (a << 18) + (b << 12) + (c << 6) + d;\r\n\r\n        if(j < output_length) output[j]     = (merged >> 16) & 0xFF;\r\n        if(j < output_length) output[j + 1] = (merged >> 8) & 0xFF;\r\n        if(j < output_length) output[j + 2] = merged & 0xFF;\r\n    }\r\n\r\n    return output_obj;\r\n}\r\n\r\nstatic PyMethodDef MyMethods[] = \r\n{\r\n    {""decode"", decode, METH_VARARGS, ""Parallel base64 decoding function.""},\r\n    {NULL, NULL, 0, NULL}\r\n};\r\n\r\nstatic struct PyModuleDef parallel_base64 = \r\n{\r\n    PyModuleDef_HEAD_INIT,\r\n    ""parallel_base64"",\r\n    NULL,\r\n    -1,\r\n    MyMethods\r\n};\r\n\r\nPyMODINIT_FUNC PyInit_parallel_base64(void) \r\n{\r\n    init_table();\r\n    return PyModule_Create(&parallel_base64);\r\n}\r\n\r\nfrom setuptools import setup, Extension\r\n\r\nmodule = Extension(\r\n    'parallel_base64', \r\n    sources=['base64.c'],\r\n    extra_compile_args=['-fopenmp'],\r\n    extra_link_args=['-fopenmp']\r\n)\r\n\r\nsetup(\r\n    name='parallel_base64',\r\n    version='1.0',\r\n    description='A parallel base64 module written in C',\r\n    ext_modules=[module],\r\n)\r\n\r\npython setup.py build_ext --inplace\r\n\r\ndecoding time = 3.6366550829989137\r\n\r\nimplmementation1\r\nVerify result Ok\r\ndecoding time = 3.5178445390010893\r\n\r\nthreaded_impl\r\nVerify result Ok\r\ndecoding time = 9.623698087001685\r\n\r\nmutiproc_impl\r\nVerify result Ok\r\ndecoding time = 13.102449985999556\r\n\r\nc_module_impl\r\nVerify result Ok\r\ndecoding time = 0.29033970499949646""]",1,0
"[""def local_double(x: pl.Expr) -> pl.Expr:\r\n  return(2*x)\r\n\r\ndef binomial_elements(x: dict) -> float:\r\n    return np.random.binomial(n=x['daily_n'], p=x['prob'], size=x['size'])\r\n\r\n\r\ndf_sim.with_columns(\r\n  pl.struct([""daily_n"", ""prob"", ""size""])\r\n  .map_elements(binomial_elements)\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndef binomial_batches(x: pl.Series) -> np.array:\r\n    return np.random.binomial(n=x.struct['daily_n'], p=x.struct['prob'])\r\n\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(binomial_batches)\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(lambda x: np.random.binomial(n=x.struct['daily_n'], p=x.struct['prob']))\r\n  .cast(pl.Int32)\r\n  .alias('events')\r\n  )\r\n\r\ndf_sim.with_columns(\r\n  pl.struct(""daily_n"", ""prob"")\r\n  .map_batches(lambda x: (\r\n      np.random.binomial(\r\n          n=x.struct['daily_n'], \r\n          p=x.struct['prob'], \r\n          size=(3,x.shape[0])\r\n          ).transpose()\r\n      )\r\n  )\r\n  .alias('events')\r\n  )\r\n\r\nshape: (4, 4)\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¬Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ\r\nÃ¢ÂÂ daily_n Ã¢ÂÂ prob Ã¢ÂÂ size Ã¢ÂÂ events             Ã¢ÂÂ\r\nÃ¢ÂÂ ---     Ã¢ÂÂ ---  Ã¢ÂÂ ---  Ã¢ÂÂ ---                Ã¢ÂÂ\r\nÃ¢ÂÂ i64     Ã¢ÂÂ f64  Ã¢ÂÂ i32  Ã¢ÂÂ list[i64]          Ã¢ÂÂ\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂªÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ¡\r\nÃ¢ÂÂ 1000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [491, 493, 482]    Ã¢ÂÂ\r\nÃ¢ÂÂ 2000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [1032, 966, 972]   Ã¢ÂÂ\r\nÃ¢ÂÂ 3000    Ã¢ÂÂ 0.5  Ã¢ÂÂ 1    Ã¢ÂÂ [1528, 1504, 1483] Ã¢ÂÂ\r\nÃ¢ÂÂ 4000    Ã¢ÂÂ 0.6  Ã¢ÂÂ 1    Ã¢ÂÂ [2401, 2422, 2367] Ã¢ÂÂ\r\nÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ´Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ""]",1,0
"[""import seaborn as sns\r\nfrom statannotations.Annotator import Annotator\r\n%matplotlib inline\r\n\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\nargs = dict(x=""sex"", y=""total_bill"", data=tips, hue=""smoker"", hue_order=[""Yes"",""No""], order=['Male', 'Female'])\r\n\r\ng = sns.catplot(edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize = 0.1, height=4, aspect=.7,alpha=0.5, kind=""bar"", ci = ""sd"", row=""time"", **args)\r\ng.map(sns.stripplot, args[""x""], args[""y""], args[""hue""], hue_order=args[""hue_order""], order=args[""order""], palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nfor ax_n in g.axes:\r\n    for ax in ax_n:\r\n        annot = Annotator(ax, pairs, **args)\r\n        annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\n        annot.apply_test().annotate()""]",1,0
"[""'customdata': array([[0.0, '-0.3490658516205964,-0.7648749219440846', 0],\r\n                         [0.0, '-0.3490658516205964,-0.6802309514438665', 0],\r\n                         [0.0, '-0.3490658516205964,-0.5955869809436484', 0],\r\n                         ...,\r\n                         [0.0, '0.8482300176421051,0.8010385323099501', 0],\r\n                         [0.0, '0.8482300176421051,0.8856825028101681', 0],\r\n                         [0.0, '0.8482300176421051,0.9703264733103861', 0]], dtype=object),\r\n    'geojson': {'features': [{'geometry': {'coordinates': [[[-20.00000007,\r\n                                                           -41.31174966478728],\r\n                                                           [-18.6000000672,\r\n                                                           -40.70179509236059],\r\n                                                           [-18.6000000672,\r\n                                                           -39.464994178287064],\r\n                                                           [-20.00000007,\r\n                                                           -38.838189880150665],\r\n                                                           [-21.4000000728,\r\n                                                           -39.464994178287064],\r\n                                                           [-21.4000000728,\r\n                                                           -40.70179509236059],\r\n                                                           [-20.00000007,\r\n                                                           -41.31174966478728]]],\r\n                                           'type': 'Polygon'},\r\n                              'id': '-0.3490658516205964,-0.7648749219440846',\r\n                              'type': 'Feature'},\r\n                             {'geometry': {'coordinates': [[[-20.00000007,\r\n                                                           -37.56790013078226],\r\n                                                           [-18.6000000672,\r\n                                                           -36.924474103794715],\r\n                                                           [-18.6000000672,\r\n                                                           -35.62123099996148],\r\n                                                           [-20.00000007,\r\n                                                           -34.96149172026768],\r\n                                                           [-21.4000000728,\r\n                                                           -35.62123099996148],\r\n                                                           [-21.4000000728,\r\n                                                           -36.924474103794715],\r\n                                                           [-20.00000007,\r\n                                                           -37.56790013078226]]],\r\n                                           'type': 'Polygon'},\r\n                              'id': '-0.3490658516205964,-0.6802309514438665',\r\n                              'type': 'Feature'},\r\n                             {'geometry': {'coordinates\r\n...\r\n\r\nfig.data[0]['geojson']['features'] = new_geojson\r\nfig.data[0]['customdata'] = hexbins_in_afr['customdata']\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport plotly.express as px\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nfrom geopandas.tools import sjoin\r\nfrom shapely.geometry import Polygon\r\nimport json\r\n\r\n\r\ndata = pd.DataFrame({\r\n    'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\ngdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\ngdf_poly = gdf_poly.drop('name', axis = 1)\r\n\r\nAfr_gdf_area = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop = True)\r\n\r\nfig = ff.create_hexbin_mapbox(data_frame=data,\r\n                       lat=""LAT"", \r\n                       lon=""LON"",\r\n                       nx_hexagon=25,\r\n                       opacity=0.4,\r\n                       labels={""color"": ""Point Count""},\r\n                       mapbox_style='carto-positron',\r\n                       zoom = 1\r\n                       )\r\n\r\ngdf = gpd.GeoDataFrame({\r\n    'customdata': fig.data[0]['customdata'].tolist(),\r\n    'id':[item['id'] for item in fig.data[0]['geojson']['features']],\r\n    'geometry':[Polygon(item['geometry']['coordinates'][0]) for item in fig.data[0]['geojson']['features']]\r\n})\r\ngdf.set_crs(epsg=4326, inplace=True)\r\n\r\nhexbins_in_afr = sjoin(gdf, Afr_gdf_area, how='inner')\r\n\r\ndef get_coordinates(polygon):\r\n    return [[list(i) for i in polygon.exterior.coords]]\r\n\r\nhexbins_in_afr['coordinates'] = hexbins_in_afr['geometry'].apply(lambda x: get_coordinates(x))\r\n\r\n## create a new geojson that matches the structure of fig.data[0]['geojson']['features']\r\nnew_geojson = [{\r\n    'type': 'Feature', \r\n    'id': id, \r\n    'geometry': {\r\n        'type': 'Polygon', \r\n        'coordinates': coordinate\r\n    }\r\n} for id, coordinate in zip(hexbins_in_afr['id'],hexbins_in_afr['coordinates'])]\r\n\r\nfig.data[0]['geojson']['features'] = new_geojson\r\nfig.data[0]['customdata'] = hexbins_in_afr['customdata']\r\n\r\nfig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n                ""below"": ""traces"",\r\n                ""type"": ""fill"",\r\n                ""color"": ""orange"",\r\n                ""opacity"" : 0.1,\r\n                ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })   \r\n\r\nfig.show()""]",1,0
