Code,label,predicted_label
"[""import org.springframework.web.reactive.function.client.WebClient;\r\nimport org.springframework.web.client.RestTemplate;\r\nimport reactor.core.publisher.Mono;\r\n\r\npublic class HttpClientExample {\r\n    private static final WebClient webClient = WebClient.create(""https://api.example.com"");\r\n    private static final RestTemplate restTemplate = new RestTemplate();\r\n\r\n    public static void main(String[] args) {\r\n        String result1 = callApiWithWebClient();\r\n        System.out.println(""WebClient Response: "" + result1);\r\n\r\n        String result2 = callApiWithRestTemplate();\r\n        System.out.println(""RestTemplate Response: "" + result2);\r\n    }\r\n\r\n    private static String callApiWithWebClient() {\r\n        return webClient.get()\r\n                .uri(""/data"")\r\n                .retrieve()\r\n                .bodyToMono(String.class)\r\n                .block(); \r\n    }\r\n\r\n    private static String callApiWithRestTemplate() {\r\n        return restTemplate.getForObject(""https://api.example.com/data"", String.class);\r\n    }\r\n}\r\n""]",0,1
"[""class Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }   \r\n        System.out.println(s);\r\n    }\r\n\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        } else {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n\r\n    static void doesWorkAlternative(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        }\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n\r\n    static void doesWorkSingleIf(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n""]",0,1
"[""package test.one;\r\n\r\npublic abstract class One {\r\n    \r\n    protected abstract void whatever();\r\n\r\n    public void run() {\r\n        whatever();\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Three {\r\n\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        };\r\n        one.whatever(); // Error\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n    public static void main(String[] args) {\r\n        new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(""Do whatever.."");\r\n            }\r\n        }\r\n        .whatever(); \r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.context.propagation.TextMapGetter;\r\nimport io.opentelemetry.context.propagation.TextMapPropagator;\r\nimport io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport java.util.Map;\r\n\r\npublic class MessageConsumer {\r\n\r\n    private static final Tracer tracer = GlobalOpenTelemetry.getTracer(""my-tracer"");\r\n    private static final TextMapPropagator propagator = GlobalOpenTelemetry.getPropagators().getTextMapPropagator();\r\n\r\n    public void consumeMessage(Map<String, String> messageAttributes) {\r\n        Context extractedContext = propagator.extract(Context.current(), messageAttributes, new TextMapGetter<>() {\r\n            @Override\r\n            public Iterable<String> keys(Map<String, String> carrier) {\r\n                return carrier.keySet();\r\n            }\r\n\r\n            @Override\r\n            public String get(Map<String, String> carrier, String key) {\r\n                return carrier.get(key);\r\n            }\r\n        });\r\n\r\n        Span span = tracer.spanBuilder(""consumeMessage"")\r\n            .setParent(extractedContext)\r\n            .startSpan();\r\n\r\n        try (var scope = span.makeCurrent()) {\r\n            System.out.println(""Processing message with traceId: "" + span.getSpanContext().getTraceId());\r\n        } finally {\r\n            span.end();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class LongestMountainSequence {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        if (n < 2) return n;\r\n\r\n        List<Integer> uniqueSorted = new ArrayList<>(new TreeSet<>(list));\r\n\r\n        int maxLen = 0;\r\n        for (int i = 1; i < uniqueSorted.size() - 1; i++) {\r\n            for (int j = i + 1; j < uniqueSorted.size(); j++) {\r\n                List<Integer> increasing = new ArrayList<>();\r\n                List<Integer> decreasing = new ArrayList<>();\r\n                List<Integer> increasingAgain = new ArrayList<>();\r\n\r\n                for (int num : list) {\r\n                    if (num <= uniqueSorted.get(i) && (increasing.isEmpty() || num > increasing.get(increasing.size() - 1))) {\r\n                        increasing.add(num);\r\n                    } else if (num <= uniqueSorted.get(j) && (decreasing.isEmpty() || num < decreasing.get(decreasing.size() - 1))) {\r\n                        decreasing.add(num);\r\n                    } else if (!decreasing.isEmpty() && num > decreasing.get(decreasing.size() - 1)) {\r\n                        increasingAgain.add(num);\r\n                    }\r\n                }\r\n\r\n                if (!increasing.isEmpty() && !decreasing.isEmpty() && !increasingAgain.isEmpty()) {\r\n                    maxLen = Math.max(maxLen, increasing.size() + decreasing.size() + increasingAgain.size());\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(solve(List.of(1, 100)));\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\nimport java.util.Arrays;\r\n\r\n@SpringBootApplication\r\npublic class ThymeleafApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ThymeleafApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.List;\r\nimport java.util.concurrent.*;\r\nimport java.util.stream.IntStream;\r\nimport org.slf4j.MDC;\r\n\r\npublic class VirtualThreadTest {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ExecutorService forkJoinPool = new ForkJoinPool(30);\r\n        ExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n        System.out.println(""Testing ForkJoinPool..."");\r\n        long forkJoinTime = testPerformance(forkJoinPool);\r\n        System.out.println(""ForkJoinPool time: "" + forkJoinTime + "" ms"");\r\n\r\n        System.out.println(""Testing Virtual Threads..."");\r\n        long virtualThreadTime = testPerformance(virtualThreadExecutor);\r\n        System.out.println(""Virtual Threads time: "" + virtualThreadTime + "" ms"");\r\n\r\n        forkJoinPool.shutdown();\r\n        virtualThreadExecutor.shutdown();\r\n    }\r\n\r\n    private static long testPerformance(ExecutorService executorService) throws Exception {\r\n        long start = System.currentTimeMillis();\r\n\r\n        List<String> results = executorService.submit(() ->\r\n            IntStream.rangeClosed(1, 100)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(""key"", ""value"");\r\n                        return callExternalService(i);\r\n                    } finally {\r\n                        MDC.remove(""key"");\r\n                    }\r\n                })\r\n                .toList()\r\n        ).get();\r\n\r\n        return System.currentTimeMillis() - start;\r\n    }\r\n\r\n    private static String callExternalService(int i) {\r\n        try {\r\n            Thread.sleep(50);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        return ""Response "" + i;\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.net.URLEncoder;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient.Builder().build();\r\n\r\n        MediaType mediaType = MediaType.parse(""application/octet-stream"");\r\n        RequestBody body = RequestBody.create("""", mediaType);\r\n\r\n        String fileName = ""3$ MÃÂ¹ F'RANÃÂ§ÃÂ©_33902_Country_5_202105.csv"";\r\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8).replace(""+"", ""%20"");\r\n        String contentDisposition = ""attachment; filename=\"""" + encodedFileName + ""\"""";\r\n\r\n        Request request = new Request.Builder()\r\n                .url(""https://example.com/upload"")\r\n                .method(""POST"", body)\r\n                .addHeader(""Content-Type"", ""application/octet-stream"")\r\n                .addHeader(""Content-Disposition"", contentDisposition)\r\n                .addHeader(""Authorization"", ""Bearer xxxxx"")\r\n                .addHeader(""Cookie"", ""xxxxxx"")\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n        System.out.println(response.code());\r\n    }\r\n}\r\n""]",0,1
"[""package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(rawHandle);\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    System.out.println(""Started"");\r\n\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        var NET_WM_XAPP_PROGRESS = arena.allocateFrom(""NET_WM_XAPP_PROGRESS"");\r\n\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        if (x11Session == null) {\r\n                            System.err.println(""Failed to open X11 display."");\r\n                            return null;\r\n                        }\r\n\r\n                        MemorySegment initData = arena.allocateFrom(ValueLayout.JAVA_INT, 0);\r\n                        Xlib_h.XChangeProperty(x11Session,                    \r\n                                MemorySegment.ofAddress(rawHandle), \r\n                                NET_WM_XAPP_PROGRESS,               \r\n                                6,                                            \r\n                                32,                                           \r\n                                0,                                            \r\n                                initData,                                     \r\n                                1);                                           \r\n                        Xlib_h.XFlush(x11Session);\r\n\r\n                        System.out.println(""Countdown started"");\r\n\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            Thread.sleep(500);\r\n                            System.out.println(i);\r\n                            MemorySegment progressData = arena.allocateFrom(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session,                    \r\n                                    MemorySegment.ofAddress(rawHandle), \r\n                                    NET_WM_XAPP_PROGRESS,               \r\n                                    6,                                            \r\n                                    32,                                           \r\n                                    0,                                            \r\n                                    progressData,                                 \r\n                                    1);                                           \r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n\r\n                        System.out.println(""Finished"");\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n\r\n                    } catch (Throwable ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.yaml.snakeyaml.Yaml;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class YamlLoader {\r\n    public static void main(String[] args) {\r\n        try (InputStream input = new FileInputStream(""config.yaml"")) {\r\n            Yaml yaml = new Yaml();\r\n            Map<String, Object> yamlConfig = yaml.load(input);\r\n\r\n            Object interestingObject = yamlConfig.get(""interesting-setup"");\r\n            Map<String, Object> interestingMap = (Map<String, Object>) interestingObject;\r\n\r\n            InterestingSetup setup = new InterestingSetup();\r\n            setup.port = (int) interestingMap.get(""port"");\r\n            setup.validation = (boolean) interestingMap.get(""validation"");\r\n            setup.parts = (List<Map<String, String>>) interestingMap.get(""parts"");\r\n\r\n            System.out.println(setup);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nclass InterestingSetup {\r\n    int port;\r\n    boolean validation;\r\n    List<Map<String, String>> parts;\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""InterestingSetup{"" +\r\n                ""port="" + port +\r\n                "", validation="" + validation +\r\n                "", parts="" + parts +\r\n                '}';\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXML {\r\n    \r\n    private static final Map<Character, String> ESCAPES = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPES.put('<', ""&lt;"");\r\n        ESCAPES.put('>', ""&gt;"");\r\n        ESCAPES.put('&', ""&amp;"");\r\n        ESCAPES.put('\'', ""&#039;"");\r\n        ESCAPES.put('""', ""&#034;"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        if (input == null) return null;\r\n        StringBuilder sb = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            String escaped = ESCAPES.get(c);\r\n            sb.append(escaped != null ? escaped : c);\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    private static final Set<Integer> uniqueDividends = Collections.synchronizedSet(new HashSet<>());\r\n\r\n    static class DivisorTask implements Runnable {\r\n        private int divisor, n;\r\n\r\n        public DivisorTask(int n, int divisor) {\r\n            this.n = n;\r\n            this.divisor = divisor;\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            for (int i = 1; i <= n; i++) {\r\n                if (i % divisor == 0) {\r\n                    uniqueDividends.add(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public int getSum(int n) {\r\n        int sum = 0;\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        \r\n        executor.execute(new DivisorTask(n, 3));\r\n        executor.execute(new DivisorTask(n, 5));\r\n        executor.execute(new DivisorTask(n, 7));\r\n\r\n        executor.shutdown();\r\n        try {\r\n            executor.awaitTermination(1, TimeUnit.SECONDS);\r\n        } catch (InterruptedException e) {\r\n        }\r\n\r\n        for (int num : uniqueDividends) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        FindMultiples finder = new FindMultiples();\r\n        int n = 1000;\r\n        System.out.println(""Sum: "" + finder.getSum(n));\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        String content = """"""\r\n                {\r\n                   ""aggregateId"": ""3f61aede-83dd-4049-a6ff-337887b6b807""\r\n                }\r\n                """""";\r\n\r\n        Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n        System.out.println(objectMapper.writeValueAsString(aggregate));\r\n    }\r\n}\r\n\r\nrecord AggregateId(UUID id) {\r\n    @JsonValue\r\n    public UUID value() {\r\n        return id;\r\n    }\r\n\r\n    @JsonCreator\r\n    public static AggregateId fromString(String id) {\r\n        return new AggregateId(UUID.fromString(id));\r\n    }\r\n}\r\n\r\nclass Aggregate {\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(""aggregateId"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.*;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\n\r\npublic class IsoWeek {\r\n    private Year year;\r\n    private int week;\r\n\r\n    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""YYYY-'W'ww"");\r\n\r\n    public IsoWeek(String weekString) {\r\n        LocalDate date = LocalDate.parse(weekString + ""-1"", formatter);\r\n        this.year = Year.of(date.getYear());\r\n        this.week = date.get(ChronoField.ALIGNED_WEEK_OF_YEAR);\r\n    }\r\n\r\n    public boolean isBefore(IsoWeek other) {\r\n        return this.year.getValue() < other.year.getValue() ||\r\n               (this.year.getValue() == other.year.getValue() && this.week < other.week);\r\n    }\r\n\r\n    public long weeksBetween(IsoWeek other) {\r\n        LocalDate start = LocalDate.ofYearDay(this.year.getValue(), 1)\r\n                                   .with(ChronoField.ALIGNED_WEEK_OF_YEAR, this.week);\r\n        LocalDate end = LocalDate.ofYearDay(other.year.getValue(), 1)\r\n                                 .with(ChronoField.ALIGNED_WEEK_OF_YEAR, other.week);\r\n        return ChronoUnit.WEEKS.between(start, end);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return year + ""-W"" + (week < 10 ? ""0"" + week : week);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        IsoWeek weekA = new IsoWeek(""2012-W48"");\r\n        IsoWeek weekB = new IsoWeek(""2013-W03"");\r\n\r\n        System.out.println(weekA.isBefore(weekB)); \r\n        System.out.println(weekA.weeksBetween(weekB)); \r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.atomic.AtomicReference;\r\n\r\npublic class DemoSecurityProblem {\r\n    static final AtomicReference<DemoSecurityProblem> instance = new AtomicReference<>();\r\n\r\n    public DemoSecurityProblem() {\r\n        if (true) {\r\n            throw new RuntimeException(""Constructor failed!"");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() throws Throwable {\r\n        instance.set(this);\r\n    }\r\n\r\n    public void doSomething() {\r\n        System.out.println(""Executing dangerous operation!"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            new MaliciousSubClass();\r\n        } catch (Exception ignored) { }\r\n\r\n        System.gc();\r\n\r\n        if (instance.get() != null) {\r\n            instance.get().doSomething();\r\n        }\r\n    }\r\n}\r\n\r\nclass MaliciousSubClass extends DemoSecurityProblem { }\r\n""]",0,1
"[""import java.util.concurrent.Callable;\r\n\r\nclass InferenceExample {\r\n    static <T, E extends Exception> T execute(Callable<T> callable) throws E {\r\n        try {\r\n            return callable.call();\r\n        } catch (Exception e) {\r\n            throw (E) e; // unchecked cast, can be unsafe\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            execute(() -> {\r\n                if (true) throw new IllegalArgumentException(""Unchecked""); \r\n                return ""OK"";\r\n            }); // No compilation error\r\n\r\n            execute(() -> {\r\n                if (true) throw new Exception(""Checked""); \r\n                return ""OK"";\r\n            }); // Compilation error: unhandled exception\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class EqualSplit {\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0) \r\n            return false;\r\n        return equalSplit(arr, 0, 0, 0, arr.length / 2);\r\n    }\r\n\r\n    private static boolean equalSplit(int[] arr, int index, int sum1, int sum2, int count1) {\r\n        if (index == arr.length) \r\n            return sum1 == sum2 && count1 == 0;\r\n        \r\n        if (count1 > 0 && equalSplit(arr, index + 1, sum1 + arr[index], sum2, count1 - 1)) \r\n            return true;\r\n        \r\n        return equalSplit(arr, index + 1, sum1, sum2 + arr[index], count1);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] arr = {1, 2, 3, 4, 6, 8};\r\n        System.out.println(equalSplit(arr)); \r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        Scene scene = new Scene(new AnchorPane(label), 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n\r\n        label.setOnMouseEntered(e -> {\r\n            Point2D p = label.localToScene(label.getWidth(), label.getHeight());\r\n            tooltip.show(label,\r\n                    p.getX() + label.getScene().getX() + label.getScene().getWindow().getX(),\r\n                    p.getY() + label.getScene().getY() + label.getScene().getWindow().getY());\r\n        });\r\n\r\n        label.setOnMouseExited(e -> tooltip.hide());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\r\n\r\nclass MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"",\r\n            ""2023-10-05T15:14:29.12345678Z"",\r\n            ""2023-10-05T15:14:29.1234567Z"",\r\n            ""2023-10-05T15:14:29.123456Z"",\r\n            ""2023-10-05T15:14:29.12345Z"",\r\n            ""2023-10-05T15:14:29.1234Z"",\r\n            ""2023-10-05T15:14:29.123Z"",\r\n            ""2023-10-05T15:14:29.12Z"",\r\n            ""2023-10-05T15:14:29.1Z"",\r\n            ""2023-10-05T15:14:29Z""\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.HashSet;\r\n\r\npublic class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n          \r\n        char string[] = string1.toCharArray();  \r\n          \r\n        System.out.println(""Duplicate characters in a given string: "");  \r\n        HashSet<Character> printed = new HashSet<>();\r\n          \r\n        for(int i = 0; i < string.length - 1; i++) {  \r\n            count = 1;  \r\n            for(int j = i+1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0' && !printed.contains(string[i])) {  \r\n                System.out.println(string[i]);  \r\n                printed.add(string[i]);\r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n        if (!hasDuplicates) \r\n            System.out.println(""no duplicates""); \r\n    }  \r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private int rotationAngle = 0;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private Button rotate;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        rotationAngle += 90;\r\n        circle.setRotate(rotationAngle);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.scene.transform.Rotate;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.input.KeyEvent;\r\n\r\npublic class DynamicDrawMode extends Application {\r\n    private Box box;\r\n    private boolean wireframe = false;\r\n\r\n    public void start(Stage stage) {\r\n        box = new Box(200, 200, 200);\r\n        box.setMaterial(new PhongMaterial(Color.BLUE));\r\n        box.setCullFace(CullFace.BACK);\r\n        box.setDrawMode(DrawMode.FILL);\r\n        box.getTransforms().add(new Rotate(30, Rotate.X_AXIS));\r\n        box.getTransforms().add(new Rotate(30, Rotate.Y_AXIS));\r\n\r\n        BorderPane root = new BorderPane(box);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.setOnKeyPressed(this::toggleDrawMode);\r\n\r\n        stage.setTitle(""3D Draw Mode Toggle"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    private void toggleDrawMode(KeyEvent event) {\r\n        if (event.getText().equalsIgnoreCase(""w"")) {\r\n            wireframe = !wireframe;\r\n            box.setDrawMode(wireframe ? DrawMode.LINE : DrawMode.FILL);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.StructuredTaskScope;\r\nimport java.lang.ScopedValue;\r\n\r\nvoid main() throws InterruptedException {\r\n    final var NAME = ScopedValue.<String>newInstance();\r\n    try (var ts = new StructuredTaskScope.ShutdownOnFailure()) {\r\n        ScopedValue.runWhere(NAME, ""haha"", () -> {\r\n            ts.fork(() -> {\r\n                return NAME.get() + "" world""; \r\n            });\r\n        });\r\n        ts.join();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.text.TextAlignment;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(createTestLabel());\r\n        Scene scene = new Scene(root, 400, 200);\r\n\r\n        scene.getStylesheets().add(""ExampleStylesheet.css"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setPickOnBounds(false);\r\n\r\n        testLabel.setOnMouseEntered(this::doSomething);\r\n        testLabel.setOnMouseExited(this::doSomethingElse);\r\n\r\n        testLabel.setShape(new javafx.scene.shape.Rectangle(180, 100));\r\n        \r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething(MouseEvent e) {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse(MouseEvent e) {\r\n        System.out.println(""Outside label."");\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.ColumnConstraints;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        gridPane1.add(new Label(""One two three""), 0, 0);\r\n        gridPane1.add(new TextField(), 1, 0);\r\n        gridPane1.setHgap(20);\r\n        \r\n        GridPane gridPane2 = new GridPane();\r\n        gridPane2.setHgap(20);\r\n        gridPane2.add(new Label(""Four five six seven""), 0, 0);\r\n        gridPane2.add(new TextField(), 1, 0);\r\n\r\n        ColumnConstraints column1 = new ColumnConstraints();\r\n        column1.setPercentWidth(40);\r\n        ColumnConstraints column2 = new ColumnConstraints();\r\n        column2.setPercentWidth(60);\r\n\r\n        gridPane1.getColumnConstraints().addAll(column1, column2);\r\n        gridPane2.getColumnConstraints().addAll(column1, column2);\r\n\r\n        var titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        var titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        Scene scene = new Scene(new VBox(titledPane1, titledPane2), 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.Popup;\r\n\r\npublic class MenuUpwardsApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        MenuBar menuBar = new MenuBar();\r\n        menuBar.getMenus().add(createMenu(""Options""));\r\n\r\n        VBox root = new VBox();\r\n        root.getChildren().add(menuBar);\r\n        root.setStyle(""-fx-background-color: lightgray;"");\r\n        \r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n        \r\n        menuBar.setTranslateY(250);  \r\n    }\r\n\r\n    private Menu createMenu(String title) {\r\n        Menu menu = new Menu(title);\r\n        menu.getItems().addAll(new MenuItem(""Item 1""), new MenuItem(""Item 2""));\r\n\r\n        menu.setOnShowing(e -> {\r\n            Popup popup = new Popup();\r\n            popup.getContent().add(new Label(""Temporary Workaround""));\r\n            popup.setAutoHide(true);\r\n            popup.show(menu.getParentPopup(), 200, 100);\r\n        });\r\n\r\n        return menu;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import com.itextpdf.text.*;\r\nimport com.itextpdf.text.pdf.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\n\r\npublic class TestWatermark3 {\r\n    public static String resourcesPath = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    public static String FILE_NAME = resourcesPath + ""test.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        System.out.println(""########## STARTED ADDING WATERMARK ###########"");\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        try {\r\n            byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n            String watermarkText = ""??? ??????""; \r\n            String fontPath = resourcesPath + ""myCustomFont.ttf"";\r\n            Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 18);\r\n\r\n            BaseFont baseFont = arabicFont.getBaseFont();\r\n            PdfReader reader = new PdfReader(byteArray);\r\n            PdfStamper stamper = new PdfStamper(reader, baos);\r\n            Phrase watermarkPhrase = new Phrase(watermarkText, arabicFont);\r\n\r\n            int numberOfPages = reader.getNumberOfPages();\r\n\r\n            for (int i = 1; i <= numberOfPages; i++) {\r\n                Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n                PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n                PdfGState state = new PdfGState();\r\n                state.setFillOpacity(0.4f);\r\n                overContent.saveState();\r\n                overContent.setGState(state);\r\n\r\n                for (float x = 80f; x < pageSize.getWidth(); x += 120) {\r\n                    for (float y = 100; y < pageSize.getHeight(); y += 120) {\r\n                        ColumnText.showTextAligned(overContent, Element.ALIGN_CENTER, watermarkPhrase, x, y, 45f,\r\n                                PdfWriter.RUN_DIRECTION_RTL, ColumnText.AR_NOVOWEL);\r\n                    }\r\n                }\r\n\r\n                overContent.restoreState();\r\n            }\r\n\r\n            stamper.close();\r\n            reader.close();\r\n            byteArray = baos.toByteArray();\r\n            File outputFile = new File(resourcesPath + ""output.pdf"");\r\n            if (outputFile.exists()) {\r\n                outputFile.delete();\r\n            }\r\n            Files.write(outputFile.toPath(), byteArray);\r\n\r\n            System.out.println(""########## FINISHED ADDING WATERMARK ###########"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport java.util.concurrent.*;\r\n\r\n@SpringBootApplication\r\npublic class VirtualThreadSecurityApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(VirtualThreadSecurityApp.class, args);\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/secure"")\r\nclass SecureController {\r\n    private final ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\n    @GetMapping(""/user"")\r\n    public String getUser() throws Exception {\r\n        return executor.submit(() -> {\r\n            var auth = SecurityContextHolder.getContext().getAuthentication();\r\n            return auth != null ? ""User: "" + auth.getName() : ""No User"";\r\n        }).get();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.fxml.Initializable;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.GridPane;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Grid extends GridPane implements Initializable {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n        \r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        initialize(null, null);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        this.setStyle(""-fx-border-color: black;"");\r\n        \r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row <= totalRowFields; row++) {\r\n            for (int col = 0; col <= totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n    \r\n    @Bean\r\n    public MappingJackson2HttpMessageConverter jsonMessageConverter() {\r\n        return new MappingJackson2HttpMessageConverter();\r\n    }\r\n\r\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n        converters.add(jsonMessageConverter());\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.ArgumentMatchers;\r\nimport org.mockito.MockedConstruction;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\n\r\nclass DocumentConverterTest {\r\n\r\n    private byte[] content;\r\n    \r\n    @BeforeEach\r\n    void setUp() {\r\n        content = ""sample content"".getBytes();\r\n    }\r\n\r\n    @Test\r\n    void testDocumentConversion() throws Exception {\r\n        try (MockedConstruction<PDFDocument> pdfMock = Mockito.mockConstruction(PDFDocument.class);\r\n             MockedConstruction<PSConverter> converterMock = Mockito.mockConstruction(PSConverter.class)) {\r\n\r\n            PDFDocument pdfDocument = pdfMock.constructed().get(0);\r\n            PSConverter converter = converterMock.constructed().get(0);\r\n\r\n            doNothing().when(pdfDocument).load(ArgumentMatchers.any(ByteArrayInputStream.class));\r\n\r\n            doAnswer(invocation -> {\r\n                ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n                outputStream.write(content);\r\n                return outputStream;\r\n            }).when(converter).convert(ArgumentMatchers.any(), ArgumentMatchers.any(ByteArrayOutputStream.class));\r\n\r\n            assertNotNull(pdfDocument);\r\n            assertNotNull(converter);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.openjdk.jmh.annotations.*;\r\nimport org.openjdk.jmh.infra.Blackhole;\r\nimport org.openjdk.jmh.runner.Runner;\r\nimport org.openjdk.jmh.runner.RunnerException;\r\nimport org.openjdk.jmh.runner.options.Options;\r\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\r\n\r\nimport java.util.List;\r\nimport java.util.concurrent.ForkJoinPool;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class NestedPerf {\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(1) // Too few warmup iterations\r\n                .measurementIterations(3) // Too few measurement iterations\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Earth3D extends Application {\r\n\r\n    private static final double EARTH_RADIUS = 200;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Sphere earthSphere = new Sphere(EARTH_RADIUS, 128);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(""/images/earth2.jpg"")));\r\n        earthSphere.setMaterial(material);\r\n\r\n        Group root = new Group(earthSphere);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setTitle(""JavaFX 3D Earth"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public class Test {\r\n    public static void go(Short n) {\r\n        System.out.println(""Short"");\r\n    }\r\n\r\n    public static void go(int n) {\r\n        System.out.println(""int"");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go((short) x);\r\n    }\r\n}\r\n""]",0,1
"[""import kotlinx.coroutines.sync.Semaphore\r\nimport kotlinx.coroutines.sync.withPermit\r\nimport org.springframework.web.bind.annotation.GetMapping\r\nimport org.springframework.web.bind.annotation.RequestMapping\r\nimport org.springframework.web.bind.annotation.RestController\r\nimport java.util.concurrent.Executors\r\nimport java.util.concurrent.Semaphore as JSemaphore\r\n\r\n@RestController\r\n@RequestMapping(""/api"")\r\nclass ApiController {\r\n\r\n    private val semaphore = JSemaphore(50, true)\r\n    private val executor = Executors.newVirtualThreadPerTaskExecutor()\r\n\r\n    @GetMapping(""/process"")\r\n    fun processRequest(): String {\r\n        if (!semaphore.tryAcquire()) {\r\n            return ""Too many concurrent requests""\r\n        }\r\n\r\n        return try {\r\n            executor.submit {\r\n                Thread.sleep(100) \r\n            }.get()\r\n            ""Processed""\r\n        } finally {\r\n            semaphore.release()\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package com.test;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\n\r\npublic class App extends Application {\r\n    public static final String PATH_TO_STYLESHEET = App.class.getResource(""/style/style.css"") != null \r\n        ? App.class.getResource(""/style/style.css"").toExternalForm() \r\n        : """";\r\n\r\n    public static final String PATH_TO_IMG = App.class.getResource(""/img/logo.png"") != null \r\n        ? App.class.getResource(""/img/logo.png"").toExternalForm() \r\n        : """";\r\n\r\n    public static final String PATH_TO_SOUNDS = App.class.getResource(""/sound/click.wav"") != null \r\n        ? App.class.getResource(""/sound/click.wav"").toExternalForm() \r\n        : """";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(new Text(""Hello, JavaFX!""));\r\n\r\n        Scene scene = new Scene(root, 300, 200);\r\n        if (!PATH_TO_STYLESHEET.isEmpty()) {\r\n            scene.getStylesheets().add(PATH_TO_STYLESHEET);\r\n        }\r\n\r\n        primaryStage.setTitle(""JavaFX App"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.animation.FadeTransition;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.Region;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        StackPane root = new StackPane();\r\n\r\n        Region background = new Region();\r\n        background.setStyle(""-fx-background-color: red;"");\r\n        background.setPrefSize(500, 500);\r\n\r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        root.getChildren().addAll(background, testButton);\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(root, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\nimport com.google.zxing.*;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String userName = ""John Doe"";\r\n            String eventName = ""Tech Conference"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR.png"";\r\n            String charset = ""UTF-8"";\r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 400, 400, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage combined = new BufferedImage(420, 500, BufferedImage.TYPE_INT_RGB);\r\n\r\n            Graphics2D g = combined.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, 420, 500);\r\n\r\n            g.drawImage(qrImage, 10, 10, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            g.drawString(userName, 20, 450);\r\n            g.drawString(eventName, 20, 480);\r\n            g.dispose();\r\n\r\n            ImageIO.write(combined, ""png"", new File(filePath));\r\n\r\n            System.out.println(""QR Code created successfully!"");\r\n        } catch (WriterException | IOException e) {\r\n            System.err.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import jakarta.annotation.Resource;\r\nimport jakarta.inject.Inject;\r\nimport jakarta.jms.*;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServlet;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class JMSExampleServlet extends HttpServlet {\r\n\r\n    private static final int MSG_COUNT = 5;\r\n\r\n    @Inject\r\n    @JMSConnectionFactory(""java:/jms/remoteCF"")\r\n    private JMSContext context;\r\n\r\n    @Resource(lookup = ""java:/queue/testQueue"")\r\n    private Queue queue;\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n        resp.setContentType(""text/html"");\r\n        PrintWriter out = resp.getWriter();\r\n        \r\n        try {\r\n            out.write(""<p>Sending messages to <em>"" + queue + ""</em></p>"");\r\n            out.write(""<h2>The following messages will be sent to the destination:</h2>"");\r\n            \r\n            for (int i = 0; i < MSG_COUNT; i++) {\r\n               \r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    private String sourceNode;\r\n    private String destinationNode;\r\n    private String weekIndex;\r\n    private int quantity;\r\n\r\n    public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n        this.weekIndex = weekIndex;\r\n        this.sourceNode = sourceNode;\r\n        this.destinationNode = destinationNode;\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public String getSourceNode() {\r\n        return sourceNode;\r\n    }\r\n\r\n    public String getDestinationNode() {\r\n        return destinationNode;\r\n    }\r\n\r\n    public String getWeekIndex() {\r\n        return weekIndex;\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n}\r\n\r\npublic class GroupByPercentage {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n                new Record(""week1"", ""source1"", ""destination1"", 100),\r\n                new Record(""week1"", ""source1"", ""destination2"", 200),\r\n                new Record(""week1"", ""source2"", ""destination1"", 200),\r\n                new Record(""week1"", ""source2"", ""destination2"", 100),\r\n                new Record(""week2"", ""source1"", ""destination1"", 200),\r\n                new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        Map<String, Map<String, Integer>> totalQuantityByWeekAndSource = records.stream()\r\n                .collect(Collectors.groupingBy(Record::getWeekIndex,\r\n                        Collectors.groupingBy(Record::getSourceNode,\r\n                                Collectors.summingInt(Record::getQuantity))));\r\n\r\n        List<String> result = records.stream()\r\n                .map(r -> {\r\n                    int total = totalQuantityByWeekAndSource.get(r.getWeekIndex()).get(r.getSourceNode());\r\n                    double percentage = (double) r.getQuantity() / total * 100;\r\n                    return r.getWeekIndex() + "" "" + r.getSourceNode() + "" "" + r.getDestinationNode() +\r\n                            "" "" + String.format(""%.2f%%"", percentage);\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n""]",0,1
"[""import com.mongodb.client.model.InsertOneModel;\r\n\r\npublic class ParallelStreamTest {\r\n    public static void main(String[] args) {\r\n        List<String> puzzles = List.of(""puzzle1"", ""puzzle2"", ""puzzle3"");\r\n        Gson gson = new Gson();\r\n\r\n        List<InsertOneModel<Document>> bulkWrites1 = puzzles.parallelStream()\r\n                .map(gson::toJson)\r\n                .map(Document::parse)\r\n                .map(InsertOneModel::new)\r\n                .collect(Collectors.toList());\r\n\r\n        List<InsertOneModel<Document>> bulkWrites2 = puzzles.parallelStream()\r\n                .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n                .collect(Collectors.toList());\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class JSONConverter {\r\n    public static void main(String[] args) {\r\n        Map<String, Integer> fields = new HashMap<>();\r\n        fields.put(""test_first"", 1);\r\n        fields.put(""test_second"", 2);\r\n        \r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Map<String, Integer> transformedMap = new HashMap<>();\r\n        \r\n        for (Map.Entry<String, Integer> entry : fields.entrySet()) {\r\n            String key = toCamelCase(entry.getKey());\r\n            transformedMap.put(key, entry.getValue());\r\n        }\r\n        \r\n        try {\r\n            String json = mapper.writeValueAsString(transformedMap);\r\n            System.out.println(json);\r\n        } catch (JsonProcessingException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String toCamelCase(String str) {\r\n        String[] parts = str.split(""_"");\r\n        StringBuilder camelCaseString = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCaseString.append(parts[i].substring(0, 1).toUpperCase()).append(parts[i].substring(1));\r\n        }\r\n        return camelCaseString.toString();\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class JSONConverter {\r\n    public static void main(String[] args) {\r\n        Map<String, Integer> fields = new HashMap<>();\r\n        fields.put(""test_first"", 1);\r\n        fields.put(""test_second"", 2);\r\n        \r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Map<String, Integer> transformedMap = new HashMap<>();\r\n        \r\n        for (Map.Entry<String, Integer> entry : fields.entrySet()) {\r\n            String key = toCamelCase(entry.getKey());\r\n            transformedMap.put(key, entry.getValue());\r\n        }\r\n        \r\n        try {\r\n            String json = mapper.writeValueAsString(transformedMap);\r\n            System.out.println(json);\r\n        } catch (JsonProcessingException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static String toCamelCase(String str) {\r\n        String[] parts = str.split(""_"");\r\n        StringBuilder camelCaseString = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCaseString.append(parts[i].substring(0, 1).toUpperCase()).append(parts[i].substring(1));\r\n        }\r\n        return camelCaseString.toString();\r\n    }\r\n}\r\n""]",0,1
"[""public class StrictFpExample {\r\n    public static void main(String[] args) {\r\n        double a = Double.MAX_VALUE;\r\n        double b = 2.0;\r\n        double c = a * b;\r\n        double d = c / 4;  \r\n\r\n        System.out.println(""Without strictfp: "" + d);\r\n\r\n        StrictFpClass strictFpClass = new StrictFpClass();\r\n        strictFpClass.runStrictFp();\r\n    }\r\n}\r\n\r\nstrictfp class StrictFpClass {\r\n    public void runStrictFp() {\r\n        double a = Double.MAX_VALUE;\r\n        double b = 2.0;\r\n        double c = a * b;\r\n        double d = c / 4;  \r\n\r\n        System.out.println(""With strictfp: "" + d);\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.MemorySession;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.util.stream.LongStream;\r\n\r\npublic class LargeLongArray {\r\n    private final MemorySegment segment;\r\n    private final long size;\r\n\r\n    public LargeLongArray(long size) {\r\n        this.size = size;\r\n        this.segment = MemorySegment.allocateNative(size * Long.BYTES, MemorySession.global());\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();\r\n        segment.set(ValueLayout.JAVA_LONG, index * Long.BYTES, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        if (index < 0 || index >= size) throw new IndexOutOfBoundsException();\r\n        return segment.get(ValueLayout.JAVA_LONG, index * Long.BYTES);\r\n    }\r\n\r\n    public long sum() {\r\n        return LongStream.range(0, size).map(this::get).sum();\r\n    }\r\n\r\n    public void close() {\r\n        segment.close();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        LargeLongArray array = new LargeLongArray(1_000_000L);\r\n        array.set(999_999, 42);\r\n        System.out.println(array.get(999_999));\r\n        System.out.println(array.sum());\r\n        array.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class BulletHell extends JPanel {\r\n    private final List<Bullet> bullets = new ArrayList<>();\r\n    private final BufferedImage bulletSprite;\r\n\r\n    public BulletHell() {\r\n        bulletSprite = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics g = bulletSprite.getGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(0, 0, 16, 16);\r\n        g.dispose();\r\n        \r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(Math.random() * 800, Math.random() * 600, Math.random() * 360, bulletSprite));\r\n        }\r\n\r\n        Timer timer = new Timer(16, e -> {\r\n            bullets.forEach(Bullet::update);\r\n            repaint();\r\n        });\r\n        timer.start();\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        Graphics2D g2d = (Graphics2D) g;\r\n        bullets.forEach(b -> b.draw(g2d));\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame();\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(800, 600);\r\n        frame.add(new BulletHell());\r\n        frame.setVisible(true);\r\n    }\r\n}\r\n\r\nclass Bullet {\r\n    double x, y, angle;\r\n    BufferedImage sprite;\r\n\r\n    public Bullet(double x, double y, double angle, BufferedImage sprite) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.angle = angle;\r\n        this.sprite = sprite;\r\n    }\r\n\r\n    public void update() {\r\n        x += Math.cos(Math.toRadians(angle)) * 2;\r\n        y += Math.sin(Math.toRadians(angle)) * 2;\r\n    }\r\n\r\n    public void draw(Graphics2D g) {\r\n        AffineTransform old = g.getTransform();\r\n        g.translate(x, y);\r\n        g.rotate(Math.toRadians(angle), sprite.getWidth() / 2.0, sprite.getHeight() / 2.0);\r\n        g.drawImage(sprite, 0, 0, null);\r\n        g.setTransform(old);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n    \r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        \r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n        \r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        \r\n        System.out.println(result);\r\n        \r\n        sc.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.yellowed-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.scene.control.SkinBase;\r\nimport javafx.scene.control.skin.ComboBoxListViewSkin;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setSkin(new ComboBoxListViewSkin<>(comboBox) {\r\n            @Override\r\n            protected void updatePopup() {\r\n                super.updatePopup();\r\n                if (getPopupContent() != null) {\r\n                    getPopupContent().getStyleClass().add(""yellowed-popup"");\r\n                }\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""package GUI.QLKH;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport DTO.QLKH_DTO;\r\nimport utils.HibernateUtil;\r\nimport java.util.List;\r\n\r\npublic class QLKH {\r\n    private static SessionFactory factory;\r\n    Session session=null;\r\n    \r\n    public static void main(String[] args) {\r\n        factory = HibernateUtil.getSessionFactory();\r\n        QLKH Customer = new QLKH();\r\n       \r\n        System.out.println(""search customers:"");\r\n        Customer.search();\r\n    }\r\n\r\n    public void search(){\r\n         String temp = ""%John%"";\r\n         session = factory.openSession();\r\n         session.beginTransaction(); \r\n        List<QLKH_DTO> search;\r\n        search = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n        \r\n        session.getTransaction().commit();      \r\n        \r\n        for (QLKH_DTO customer : search) {\r\n            System.out.print(""Password: "" + customer.getPassword());\r\n            System.out.print(""Fullname: "" + customer.getFullname());\r\n            System.out.println(""Address: "" + customer.getAddress());\r\n            System.out.println(""City: "" + customer.getCity());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package app.components;\r\n\r\nimport java.io.IOException;\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\npublic class Custom extends VBox {\r\n    \r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    \r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<VBox alignment=""CENTER"" xmlns=""http://javafx.com/javafx/20"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" text=""-"" />\r\n   </children>\r\n</VBox>\r\npackage app.controllers;\r\n\r\nimport app.components.Custom;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class Menu {\r\n\r\n    @FXML\r\n    private Custom cc;\r\n\r\n    public void initialize() {\r\n        if (cc != null) {\r\n            cc.newText(""Test"");\r\n        }\r\n    }\r\n}\r\nmodule app {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    \r\n    opens app to javafx.fxml;\r\n    opens app.controllers to javafx.fxml;\r\n    \r\n    exports app;\r\n}\r\n""]",0,1
"[""package application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n        Scene scene = new Scene(root, 400, 400);\r\n        StackPane stack = new StackPane();\r\n        \r\n        Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n        \r\n        Color color1 = Color.RED;\r\n        Color color2 = Color.BLUE;\r\n        \r\n        double[] r = {color1.getRed()};\r\n        double[] g = {color1.getGreen()};\r\n        double[] b = {color1.getBlue()};\r\n        \r\n        text.setFont(Font.font(16));\r\n        text.setFill(color1);\r\n        \r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.millis(20), event -> {\r\n                r[0] += (color2.getRed() - color1.getRed()) / 50;\r\n                g[0] += (color2.getGreen() - color1.getGreen()) / 50;\r\n                b[0] += (color2.getBlue() - color1.getBlue()) / 50;\r\n                \r\n                if (r[0] > color2.getRed()) r[0] = color2.getRed();\r\n                if (g[0] > color2.getGreen()) g[0] = color2.getGreen();\r\n                if (b[0] > color2.getBlue()) b[0] = color2.getBlue();\r\n                \r\n                text.setFill(new Color(r[0], g[0], b[0], 1.0));\r\n            })\r\n        );\r\n        \r\n        timeline.setCycleCount(50);\r\n        timeline.play();\r\n        \r\n        stack.getChildren().add(text);\r\n        root.getChildren().add(stack);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import okhttp3.*;\r\nimport org.json.JSONObject;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Client {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = getAccessToken();\r\n        if (token != null) {\r\n            callApiWithToken(token);\r\n        }\r\n    }\r\n\r\n    private static String getAccessToken() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        RequestBody body = new FormBody.Builder()\r\n                .add(""grant_type"", GRANT_TYPE)\r\n                .add(""client_id"", CLIENT_ID)\r\n                .add(""client_secret"", CLIENT_SECRET)\r\n                .build();\r\n\r\n        Request request = new Request.Builder()\r\n                .url(TOKEN_URL)\r\n                .post(body)\r\n                .addHeader(""Content-Type"", ""application/x-www-form-urlencoded"")\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (!response.isSuccessful()) return null;\r\n            JSONObject json = new JSONObject(response.body().string());\r\n            return json.getString(""access_token"");\r\n        }\r\n    }\r\n\r\n    private static void callApiWithToken(String token) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        Request request = new Request.Builder()\r\n                .url(""https://example.com/protected-resource"")\r\n                .get()\r\n                .addHeader(""Authorization"", ""Bearer "" + token)\r\n                .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                System.out.println(response.body().string());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class MapViewer extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n        \r\n        File file = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n        String content = """";\r\n        try {\r\n            content = new String(Files.readAllBytes(file.toPath()), StandardCharsets.UTF_8);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        webEngine.loadContent(content);\r\n        \r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        \r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Google Maps in JavaFX"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.NameExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class FieldAccessList {\r\n    public static void main(String[] args) throws IOException {\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(""Class: "" + classDecl.getNameAsString());\r\n\r\n            classDecl.findAll(MethodDeclaration.class).forEach(methodDecl -> {\r\n                System.out.println(""  Method: "" + methodDecl.getNameAsString());\r\n\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n\r\n                methodDecl.accept(new VoidVisitorAdapter<Void>() {\r\n                    @Override\r\n                    public void visit(NameExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (classDecl.getFieldByName(n.getNameAsString()).isPresent()) {\r\n                            readFields.add(n.getNameAsString());\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(AssignExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (n.getTarget() instanceof NameExpr) {\r\n                            String fieldName = ((NameExpr) n.getTarget()).getNameAsString();\r\n                            if (classDecl.getFieldByName(fieldName).isPresent()) {\r\n                                writeFields.add(fieldName);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void visit(UnaryExpr n, Void arg) {\r\n                        super.visit(n, arg);\r\n                        if (n.getExpression() instanceof NameExpr) {\r\n                            String fieldName = ((NameExpr) n.getExpression()).getNameAsString();\r\n                            if (classDecl.getFieldByName(fieldName).isPresent()) {\r\n                                writeFields.add(fieldName);\r\n                            }\r\n                        }\r\n                    }\r\n                }, null);\r\n\r\n                if (!readFields.isEmpty()) {\r\n                    System.out.println(""    Read Fields: "" + readFields);\r\n                }\r\n                if (!writeFields.isEmpty()) {\r\n                    System.out.println(""    Write Fields: "" + writeFields);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.annotation.*;\r\nimport java.lang.reflect.Field;\r\n\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@interface Annotation {\r\n    Class<?> className() default Object.class;\r\n}\r\n\r\nclass AnotherClass {}\r\n\r\nclass Main {\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n\r\n    @Annotation(className = String.class)\r\n    private String explicitAttribute;\r\n}\r\n\r\npublic class AnnotationProcessor {\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            Annotation annotation = field.getAnnotation(Annotation.class);\r\n            if (annotation != null) {\r\n                Class<?> clazz = annotation.className() == Object.class ? field.getType() : annotation.className();\r\n                System.out.println(""Field: "" + field.getName() + "", Class: "" + clazz.getSimpleName());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.source.util.Trees;\r\nimport com.sun.tools.javac.api.JavacTrees;\r\nimport com.sun.tools.javac.code.Type;\r\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\r\nimport com.sun.tools.javac.tree.JCTree;\r\n\r\nimport javax.annotation.processing.AbstractProcessor;\r\nimport javax.annotation.processing.RoundEnvironment;\r\nimport javax.annotation.processing.SupportedAnnotationTypes;\r\nimport javax.annotation.processing.SupportedSourceVersion;\r\nimport javax.lang.model.SourceVersion;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport java.util.Set;\r\n\r\n@SupportedAnnotationTypes(""*"")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_17)\r\npublic class SwitchExpressionTypeProcessor extends AbstractProcessor {\r\n\r\n    private Trees trees;\r\n\r\n    @Override\r\n    public synchronized void init(javax.annotation.processing.ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        this.trees = JavacTrees.instance(processingEnv);\r\n    }\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getRootElements()) {\r\n            TreePath path = trees.getPath(element);\r\n            if (path != null) {\r\n                new TreeScanner<Void, Void>() {\r\n                    @Override\r\n                    public Void visitMethod(MethodTree methodTree, Void unused) {\r\n                        BlockTree blockTree = methodTree.getBody();\r\n                        if (blockTree != null) {\r\n                            for (StatementTree statementTree : blockTree.getStatements()) {\r\n                                if (statementTree.getKind() == Tree.Kind.SWITCH) {\r\n                                    SwitchTree switchTree = (SwitchTree) statementTree;\r\n                                    ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n                                    if (switchTreeExpression instanceof JCTree.JCExpression) {\r\n                                        Type type = ((JCTree.JCExpression) switchTreeExpression).type;\r\n                                        if (type != null) {\r\n                                            System.out.println(""Switch Expression Type: "" + type.toString());\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        return super.visitMethod(methodTree, unused);\r\n                    }\r\n                }.scan(path.getCompilationUnit(), null);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.fxml.FXMLLoader;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport java.io.IOException;\r\n\r\n@Component\r\npublic class ListItemFactory {\r\n\r\n    private final ApplicationContext applicationContext;\r\n\r\n    public ListItemFactory(ApplicationContext applicationContext) {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n\r\n    public VBox createListItem() {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(""/path/to/fxml""));\r\n        fxmlLoader.setControllerFactory(clazz -> {\r\n            if (clazz.isAnnotationPresent(Component.class)) {\r\n                return applicationContext.getAutowireCapableBeanFactory().createBean(clazz);\r\n            }\r\n            try {\r\n                return clazz.getDeclaredConstructor().newInstance();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n\r\n        try {\r\n            return fxmlLoader.load();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n}\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.layout.VBox;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class MainController {\r\n\r\n    @FXML\r\n    private VBox contentArea;\r\n\r\n    private final ListItemFactory listItemFactory;\r\n\r\n    public MainController(ListItemFactory listItemFactory) {\r\n        this.listItemFactory = listItemFactory;\r\n    }\r\n\r\n    public void addItem() {\r\n        VBox listItem = listItemFactory.createListItem();\r\n        if (listItem != null) {\r\n            contentArea.getChildren().add(listItem);\r\n        }\r\n    }\r\n}import javafx.fxml.FXML;\r\nimport javafx.scene.control.Label;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class ListItemController {\r\n\r\n    @FXML\r\n    private Label label;\r\n\r\n    public void setText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.stage.Stage;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ScatterChartExample extends Application {\r\n\r\n    private List<Double> r = new ArrayList<>();\r\n    private List<Double> nodes = new ArrayList<>();\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        populateData();\r\n        createScatterChart();\r\n    }\r\n\r\n    private void populateData() {\r\n        for (int i = 0; i < 10; i++) {\r\n            r.add(10.0 + i * 2);\r\n            nodes.add(i * 36.0);\r\n        }\r\n    }\r\n\r\n    public void createScatterChart() {\r\n        final NumberAxis xAxis = new NumberAxis();\r\n        final NumberAxis yAxis = new NumberAxis();\r\n\r\n        final XYChart<Number, Number> smoothedChart = new XYChart<>(xAxis, yAxis);\r\n\r\n        XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n        XYChart.Series<Number, Number> series2 = new XYChart.Series<>();\r\n\r\n        for (int i = 0; i < r.size(); i++) {\r\n            double x = r.get(i) * Math.cos(Math.toRadians(nodes.get(i)));\r\n            double y = r.get(i) * Math.sin(Math.toRadians(nodes.get(i)));\r\n            series1.getData().add(new XYChart.Data<>(x, y));\r\n\r\n            if (i < r.size() - 1) {\r\n                double xNext = r.get(i + 1) * Math.cos(Math.toRadians(nodes.get(i + 1)));\r\n                double yNext = r.get(i + 1) * Math.sin(Math.toRadians(nodes.get(i + 1)));\r\n                series2.getData().add(new XYChart.Data<>(xNext, yNext));\r\n            }\r\n        }\r\n\r\n        smoothedChart.getData().add(series1);\r\n        smoothedChart.getData().add(series2);\r\n\r\n        Stage stage = new Stage();\r\n        Scene scene = new Scene(smoothedChart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n        openBottomSheet.setOnClickListener(v -> {\r\n            BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n            bottomSheet.show(getSupportFragmentManager(), ""BottomSheet"");\r\n        });\r\n    }\r\n}\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        BottomSheetDialog dialog = (BottomSheetDialog) getDialog();\r\n        if (dialog != null) {\r\n            View bottomSheet = dialog.findViewById(com.google.android.material.R.id.design_bottom_sheet);\r\n            if (bottomSheet != null) {\r\n                BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(bottomSheet);\r\n                behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                behavior.setSkipCollapsed(true);\r\n                bottomSheet.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n            }\r\n        }\r\n    }\r\n}\r\n<!-- bottom_sheet_layout.xml -->\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical"">\r\n\r\n    <Button\r\n        android:id=""@+id/close_button""\r\n        android:layout_width=""wrap_content""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Close"" />\r\n</LinearLayout>\r\n""]",0,1
"[""import java.util.List;\r\nimport java.util.Comparator;\r\n\r\npublic class CustomProcessor {\r\n\r\n    public String transform(List<CustomObject> listOfObjects) {\r\n        return listOfObjects.stream()\r\n                .filter(obj -> ""BUSINESS"".equals(obj.objectType()))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .findFirst()\r\n                .orElseThrow(() -> new RuntimeException(""NO BUSINESS OBJECT FOUND""))\r\n                .getUrl();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.animation.KeyFrame;\r\nimport javafx.animation.KeyValue;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.*;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport java.util.*;\r\n\r\npublic class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> restartAnimation());\r\n            color2.addListener((obs, o, v) -> restartAnimation());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null && timeline.get() != null) {\r\n                    timeline.get().play();\r\n                } else if (timeline.get() != null) {\r\n                    timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        void restartAnimation() {\r\n            if (timeline.get() != null) {\r\n                timeline.get().stop();\r\n            }\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.getValue())\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.getValue())\r\n                )\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n        );\r\n\r\n        static class StyleableProperties {\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                ""-color1"", PaintConverter.getInstance(), Color.RED\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getSt\r\n""]",0,1
"[""import static org.assertj.core.api.Assertions.assertThat;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport jakarta.persistence.EntityListeners;\r\nimport jakarta.persistence.PrePersist;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\r\n\r\n@DataJpaTest\r\n@ExtendWith({SpringExtension.class, MockitoExtension.class})\r\npublic class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    private myEntityRepository repo;\r\n    \r\n    @InjectMocks\r\n    private myEntityListener entityListener;\r\n    \r\n    @Mock\r\n    private myEntityListener mockListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        doReturn(expected).when(mockListener).doThis();\r\n        \r\n        myEntity e = new myEntity();\r\n        myEntity stored = repo.save(e);\r\n        \r\n        assertThat(stored.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PatternSearch {\r\n    public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n\r\n        List<int[]> result = searchPattern(T, P);\r\n        for (int[] pos : result) {\r\n            System.out.println(""("" + pos[0] + "","" + pos[1] + "")"");\r\n        }\r\n    }\r\n\r\n    static List<int[]> searchPattern(int[][] T, int[][] P) {\r\n        List<int[]> matches = new ArrayList<>();\r\n        int m = T.length, n = T[0].length;\r\n        int u = P.length, v = P[0].length;\r\n\r\n        for (int i = 0; i <= m - u + 1; i++) {  \r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matchesAt(T, P, i, j)) {\r\n                    matches.add(new int[]{i, j});\r\n                }\r\n            }\r\n        }\r\n        return matches;\r\n    }\r\n\r\n    static boolean matchesAt(int[][] T, int[][] P, int x, int y) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[x + i][y + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n""]",0,1
"[""import android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.firebase.ui.database.FirebaseRecyclerAdapter;\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.google.firebase.database.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class HomeFragment extends Fragment {\r\n    private RecyclerView recyclerView;\r\n    private SCardAdapter adapter;\r\n    private DatabaseReference reference;\r\n\r\n    public HomeFragment() {}\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n\r\n        reference = FirebaseDatabase.getInstance().getReference(""Category_wise"");\r\n        fetchAll();\r\n\r\n        return v;\r\n    }\r\n\r\n    private void fetchAll() {\r\n        reference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                List<SCard> list = new ArrayList<>();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard sCard = company.getValue(SCard.class);\r\n                        if (sCard != null) {\r\n                            list.add(sCard);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                FirebaseRecyclerOptions<SCard> options =\r\n                        new FirebaseRecyclerOptions.Builder<SCard>()\r\n                                .setQuery(reference, SCard.class)\r\n                                .build();\r\n\r\n                adapter = new SCardAdapter(options);\r\n                recyclerView.setAdapter(adapter);\r\n                adapter.startListening();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError databaseError) {}\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        if (adapter != null) adapter.startListening();\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        if (adapter != null) adapter.stopListening();\r\n    }\r\n}\r\n\r\nclass SCard {\r\n    private String companyName;\r\n\r\n    public SCard() {}\r\n\r\n    public SCard(String companyName) {\r\n        this.companyName = companyName;\r\n    }\r\n\r\n    public String getCompanyName() {\r\n        return companyName;\r\n    }\r\n\r\n    public void setCompanyName(String companyName) {\r\n        this.companyName = companyName;\r\n    }\r\n}\r\n\r\nclass SCardAdapter extends FirebaseRecyclerAdapter<SCard, SCardAdapter.ViewHolder> {\r\n\r\n    public SCardAdapter(@NonNull FirebaseRecyclerOptions<SCard> options) {\r\n        super(options);\r\n    }\r\n\r\n    @Override\r\n    protected void onBindViewHolder(@NonNull ViewHolder holder, int position, @NonNull SCard model) {\r\n        holder.sname.setText(model.getCompanyName());\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.LocaleResolver;\r\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\r\nimport org.springframework.web.servlet.i18n.CookieLocaleResolver;\r\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\n@Configuration\r\npublic class LocaleConfig {\r\n\r\n    private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(Locale.ENGLISH, new Locale(""hi""));\r\n\r\n    @Bean\r\n    public LocaleResolver localeResolver() {\r\n        CookieLocaleResolver resolver = new CookieLocaleResolver();\r\n        resolver.setDefaultLocale(Locale.ENGLISH);\r\n        return resolver;\r\n    }\r\n\r\n    @Bean\r\n    public LocaleChangeInterceptor localeChangeInterceptor() {\r\n        return new LocaleChangeInterceptor() {\r\n            @Override\r\n            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\r\n                String newLocale = request.getParameter(getParamName());\r\n                if (newLocale != null) {\r\n                    Locale locale = Locale.forLanguageTag(newLocale);\r\n                    if (!ALLOWED_LOCALES.contains(locale)) {\r\n                        throw new IllegalArgumentException(""Invalid locale: "" + newLocale);\r\n                    }\r\n                }\r\n                return super.preHandle(request, response, handler);\r\n            }\r\n        };\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.reflect.Constructor;\r\nimport java.lang.reflect.Modifier;\r\n\r\npublic class ReflectionExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        if (Modifier.isPrivate(constructor.getModifiers())) {\r\n            constructor.setAccessible(true);\r\n        }\r\n        Parent parentInstance = constructor.newInstance();\r\n        System.out.println(""Instance created: "" + parentInstance);\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {}\r\n}\r\n""]",0,1
"[""import java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU="";\r\n\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n\r\n        System.out.println(""Private Key: "" + pkey);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorSet;\r\nimport com.google.protobuf.DescriptorProtos.FileDescriptorProto;\r\n\r\npublic class ProtoParser {\r\n    public static void main(String[] args) throws IOException {\r\n        byte[] protoBytes = Files.readAllBytes(Paths.get(""example.proto""));\r\n\r\n        FileDescriptorSet descriptorSet = FileDescriptorSet.parseFrom(protoBytes);\r\n\r\n        for (FileDescriptorProto descriptorProto : descriptorSet.getFileList()) {\r\n            System.out.println(""Proto Name: "" + descriptorProto.getName());\r\n            System.out.println(""Package: "" + descriptorProto.getPackage());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.Function;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 2, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Execution timed out!"");\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(""Final Counter: "" + result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeout, TimeUnit unit) \r\n            throws TimeoutException, InterruptedException {\r\n        long startTime = System.nanoTime();\r\n        while (loop-- >= 0) {\r\n            if (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) >= unit.toMillis(timeout)) {\r\n                throw new TimeoutException();\r\n            }\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MyClass obj = new MyClass();\r\n        obj.entry(x -> {\r\n            try {\r\n                Thread.sleep(500); \r\n            } catch (InterruptedException ignored) {}\r\n            return null;\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class Step1 {\r\n    private final Tracer tracer;\r\n\r\n    public Step1(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void execute(DataPackage obj) {\r\n        byte[] traceIdBytes = obj.getUniqueId().getBytes(StandardCharsets.UTF_8);\r\n        byte[] paddedTraceId = new byte[16];\r\n        System.arraycopy(traceIdBytes, 0, paddedTraceId, 16 - Math.min(traceIdBytes.length, 16), Math.min(traceIdBytes.length, 16));\r\n\r\n        byte[] spanIdBytes = (""span-"" + obj.getStep()).getBytes(StandardCharsets.UTF_8);\r\n        byte[] paddedSpanId = new byte[8];\r\n        System.arraycopy(spanIdBytes, 0, paddedSpanId, 8 - Math.min(spanIdBytes.length, 8), Math.min(spanIdBytes.length, 8));\r\n\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                TraceId.fromBytes(paddedTraceId),\r\n                SpanId.fromBytes(paddedSpanId),\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span wrappedSpan = Span.wrap(spanContext);\r\n        Context otelContext = Context.root().with(wrappedSpan);\r\n\r\n        Span span = tracer.spanBuilder(""Step1"")\r\n                .setParent(otelContext)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                Thread.sleep(100);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }).whenComplete((res, ex) -> {\r\n            if (ex != null) {\r\n                span.recordException(ex);\r\n            }\r\n            span.end();\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\nclass LRUCache {\r\n    int capacity;\r\n    Map<Integer, Integer> map;\r\n    Queue<Integer> queue;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        this.map = new HashMap<>();\r\n        this.queue = new LinkedList<>();\r\n    }\r\n    \r\n    public int get(int key) {\r\n        if (map.containsKey(key)) {\r\n            queue.remove(key);\r\n            queue.add(key);\r\n            return map.get(key);\r\n        }\r\n        return -1;\r\n    }\r\n    \r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            queue.remove(key);\r\n        } else if (queue.size() >= capacity) {\r\n            int oldest = queue.poll();\r\n            map.remove(oldest);\r\n        }\r\n        queue.add(key);\r\n        map.put(key, value);\r\n    }\r\n}\r\n""]",0,1
"[""import com.amazonaws.services.s3.AmazonS3;\r\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\r\nimport com.amazonaws.services.s3.model.S3Object;\r\nimport net.sf.jasperreports.engine.JRException;\r\nimport net.sf.jasperreports.engine.JasperCompileManager;\r\nimport net.sf.jasperreports.engine.JasperFillManager;\r\nimport net.sf.jasperreports.engine.JasperPrint;\r\nimport net.sf.jasperreports.engine.JasperReport;\r\nimport net.sf.jasperreports.engine.JasperExportManager;\r\n\r\nimport java.awt.Image;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class S3JasperReport {\r\n    public static void main(String[] args) throws JRException, IOException {\r\n        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();\r\n        String bucketName = ""your-bucket"";\r\n        String key = ""image_name.jpg"";\r\n\r\n        S3Object s3Object = s3Client.getObject(bucketName, key);\r\n        Image image = ImageIO.read(new ByteArrayInputStream(s3Object.getObjectContent().readAllBytes()));\r\n\r\n        Map<String, Object> params = new HashMap<>();\r\n        params.put(""imageParam"", image);\r\n\r\n        JasperReport jasperReport = JasperCompileManager.compileReport(""report_template.jrxml"");\r\n        JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, params);\r\n\r\n        JasperExportManager.exportReportToPdfFile(jasperPrint, ""output.pdf"");\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;  \r\nimport java.awt.event.*;\r\nimport javax.swing.*;  \r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n    \r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n    \r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, 75, 75);\r\n    }\r\n    \r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n    \r\n    @Override\r\n    protected void paintComponent(Graphics g){\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(x, y, 75, 75);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n    \r\n    private void updatePosition(){\r\n        if (leftPressed) x = Math.max(x - MOVE_AMOUNT, 0);\r\n        if (rightPressed) x = Math.min(x + MOVE_AMOUNT, getWidth() - 75);\r\n        if (upPressed) y = Math.max(y - MOVE_AMOUNT, 0);\r\n        if (downPressed) y = Math.min(y + MOVE_AMOUNT, getHeight() - 75);\r\n    }\r\n    \r\n    @Override\r\n    public void keyPressed(KeyEvent e){\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = true;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = true;\r\n            case KeyEvent.VK_UP -> upPressed = true;\r\n            case KeyEvent.VK_DOWN -> downPressed = true;\r\n        }\r\n    }\r\n    \r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> leftPressed = false;\r\n            case KeyEvent.VK_RIGHT -> rightPressed = false;\r\n            case KeyEvent.VK_UP -> upPressed = false;\r\n            case KeyEvent.VK_DOWN -> downPressed = false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private final int DOT_SIZE = 20;\r\n    private final int FALL_SPEED = 2;\r\n    private Timer timer;\r\n    \r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        x = (int) (Math.random() * 480);\r\n        y = 0;\r\n        timer = new Timer(20, this);\r\n        timer.start();\r\n    }\r\n    \r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    \r\n    public void actionPerformed(ActionEvent e){\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            x = (int) (Math.random() * 480);\r\n            y = 0;\r\n        }\r\n        repaint();\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args){\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame();\r\n            frame.setTitle(""Image Display"");\r\n            frame.setSize(500, 500);\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            \r\n            Surface surface = new Surface();\r\n            BlueDot blueDot = new BlueDot();\r\n            \r\n            frame.setLayout(null);\r\n            surface.setBounds(0, 0, 500, 500);\r\n            blueDot.setBounds(0, 0, 500, 500);\r\n            \r\n            frame.add(surface);\r\n            frame.add(blueDot);\r\n""]",0,1
"[""import java.util.concurrent.atomic.AtomicLong;\r\n\r\npublic class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", \r\n                             (currentValue >> 32) & 0xFFFF, \r\n                             (currentValue >> 16) & 0xFFF, \r\n                             currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.function.UnaryOperator;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class CustomSpinnerApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        spinner.setEditable(true);\r\n        \r\n        BigDecimal min = new BigDecimal(""-20.00"");\r\n        BigDecimal max = new BigDecimal(""20.00"");\r\n        BigDecimal step = new BigDecimal(""0.25"");\r\n\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            private final SimpleObjectProperty<BigDecimal> value = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n\r\n            {\r\n                setConverter(new StringConverter<BigDecimal>() {\r\n                    @Override\r\n                    public String toString(BigDecimal value) {\r\n                        if (value == null) return ""+0,00"";\r\n                        return (value.compareTo(BigDecimal.ZERO) >= 0 ? ""+"" : """") + value.setScale(2).toPlainString().replace(""."", "","");\r\n                    }\r\n\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            return new BigDecimal(string.replace("","", "".""));\r\n                        } catch (NumberFormatException e) {\r\n                            return BigDecimal.ZERO;\r\n                        }\r\n                    }\r\n                });\r\n                setValue(BigDecimal.ZERO);\r\n            }\r\n\r\n            @Override\r\n            public void decrement(int steps) {\r\n                BigDecimal newValue = getValue().subtract(step.multiply(new BigDecimal(steps)));\r\n                if (newValue.compareTo(min) >= 0) setValue(newValue);\r\n            }\r\n\r\n            @Override\r\n            public void increment(int steps) {\r\n                BigDecimal newValue = getValue().add(step.multiply(new BigDecimal(steps)));\r\n                if (newValue.compareTo(max) <= 0) setValue(newValue);\r\n            }\r\n        };\r\n\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        Pattern validPattern = Pattern.compile(""[+-]?\\d{0,2}(,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validPattern.matcher(newText).matches()) {\r\n                try {\r\n                    BigDecimal newValue = new BigDecimal(newText.replace("","", "".""));\r\n                    if (newValue.remainder(step).compareTo(BigDecimal.ZERO) == 0 && newValue.compareTo(min) >= 0 && newValue.compareTo(max) <= 0) {\r\n                        return c;\r\n                    }\r\n                } catch (NumberFormatException ignored) {}\r\n            }\r\n            return null;\r\n        };\r\n\r\n        TextFormatter<BigDecimal> textFormatter = new TextFormatter<>(valueFactory.getConverter(), BigDecimal.ZERO, filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().bindBidirectional(textFormatter.valueProperty());\r\n\r\n        VBox root = new VBox(10, spinner);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Custom Spinner"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.stage.Stage;\r\n\r\npublic class UserDataListenerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>(stage.getUserData());\r\n        \r\n        stage.setUserData(""InitialData"");\r\n\r\n        userDataProperty.addListener((observable, oldValue, newValue) -> {\r\n            System.out.println(""New userData: "" + newValue);\r\n        });\r\n\r\n        stage.setUserData(""Test1"");\r\n        userDataProperty.set(stage.getUserData());\r\n\r\n        stage.setUserData(""Test2"");\r\n        userDataProperty.set(stage.getUserData());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class ReactiveExample {\r\n    public static void main(String[] args) {\r\n        List<A> list = List.of(new A(""one""), new A(""two""));\r\n        \r\n        Map<String, String> result = Flux.fromIterable(list)\r\n                .flatMap(a -> functionReturningMonoOfC(a)\r\n                        .map(C::url)\r\n                        .map(url -> Map.entry(a.getName(), url))\r\n                )\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n    }\r\n    \r\n    static Mono<C> functionReturningMonoOfC(A a) {\r\n        return Mono.just(new C(""http://example.com/"" + a.getName()));\r\n    }\r\n\r\n    static class A {\r\n        private final String name;\r\n        A(String name) { this.name = name; }\r\n        String getName() { return name; }\r\n    }\r\n\r\n    static class C {\r\n        private final String url;\r\n        C(String url) { this.url = url; }\r\n        String url() { return url; }\r\n    }\r\n}\r\n""]",0,1
"[""import javax.net.ssl.*;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\nimport java.security.cert.CertificateException;\r\n\r\npublic class RedisSSLConfig {\r\n\r\n    public void testWithTls() throws IOException, GeneralSecurityException {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        SSLSocketFactory sslFactory = createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""D:\\tmp\\keystore.jks"",\r\n                ""123456"",\r\n                ""my_cert""\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true).sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        JedisPooled jedis = new JedisPooled(address, config);\r\n        jedis.set(""foo"", ""bar"");\r\n        System.out.println(jedis.get(""foo""));\r\n    }\r\n\r\n    private static SSLSocketFactory createSslSocketFactory(\r\n            String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String alias)\r\n            throws IOException, GeneralSecurityException {\r\n\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream fis = new FileInputStream(userCertPath)) {\r\n            keyStore.load(fis, userCertPassword.toCharArray());\r\n        }\r\n\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream fis = new FileInputStream(caCertPath)) {\r\n            trustStore.load(fis, caCertPassword.toCharArray());\r\n        }\r\n\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n        X509KeyManager defaultKeyManager = (X509KeyManager) keyManagerFactory.getKeyManagers()[0];\r\n        X509KeyManager customKeyManager = new CustomKeyManager(defaultKeyManager, alias);\r\n\r\n        SSLContext sslContext = SSLContext.getInstance(""TLSv1.2"");\r\n        sslContext.init(new KeyManager[]{customKeyManager}, trustManagerFactory.getTrustManagers(), new SecureRandom());\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n\r\n    private static class CustomKeyManager implements X509KeyManager {\r\n        private final X509KeyManager baseKeyManager;\r\n        private final String alias;\r\n\r\n        public CustomKeyManager(X509KeyManager baseKeyManager, String alias) {\r\n            this.baseKeyManager = baseKeyManager;\r\n            this.alias = alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n            return alias;\r\n        }\r\n\r\n        @Override\r\n        public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n            return baseKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n        }\r\n\r\n        @Override\r\n        public X509Certificate[] getCertificateChain(String alias) {\r\n            return baseKeyManager.getCertificateChain(alias);\r\n        }\r\n\r\n        @Override\r\n        public PrivateKey getPrivateKey(String alias) {\r\n            return baseKeyManager.getPrivateKey(alias);\r\n        }\r\n\r\n        @Override\r\n        public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n            return baseKeyManager.getClientAliases(keyType, issuers);\r\n        }\r\n\r\n        @Override\r\n        public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n            return baseKeyManager.getServerAliases(keyType, issuers);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.objectweb.asm.MethodVisitor;\r\nimport org.objectweb.asm.Opcodes;\r\n\r\npublic class MyMethodVisitor extends MethodVisitor {\r\n\r\n    private final String classAndMethodName;\r\n\r\n    public MyMethodVisitor(int api, MethodVisitor mv, String classAndMethodName) {\r\n        super(api, mv);\r\n        this.classAndMethodName = classAndMethodName;\r\n    }\r\n\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n        \r\n        mv.visitTypeInsn(Opcodes.NEW, ""java/lang/StringBuilder"");\r\n        mv.visitInsn(Opcodes.DUP);\r\n        mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/StringBuilder"", ""<init>"", ""()V"", false);\r\n        mv.visitLdcInsn(""_"" + classAndMethodName + ""_"");\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(Ljava/lang/String;)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""java/lang/Thread"", ""currentThread"", ""()Ljava/lang/Thread;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/Thread"", ""getStackTrace"", ""()[Ljava/lang/StackTraceElement;"", false);\r\n        mv.visitInsn(Opcodes.ICONST_2);\r\n        mv.visitInsn(Opcodes.AALOAD);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StackTraceElement"", ""getLineNumber"", ""()I"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""append"", ""(I)Ljava/lang/StringBuilder;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"", false);\r\n        mv.visitMethodInsn(Opcodes.INVOKESTATIC, ""afljava/logger/Logger"", ""writeToLogger"", ""(Ljava/lang/String;)V"", false);\r\n    }\r\n\r\n    @Override\r\n    public void visitLineNumber(int line, org.objectweb.asm.Label start) {\r\n        super.visitLineNumber(line, start);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.*;\r\n\r\npublic class Task implements Callable<Boolean> {\r\n\r\n    private final ReportClient client;\r\n\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public Boolean call() {\r\n        final var uuid = client.createDocument(documentId);\r\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\r\n        CompletableFuture<Boolean> future = new CompletableFuture<>();\r\n\r\n        Runnable checkStatus = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                GetStatusResponse status = client.getStatus(uuid);\r\n                if (!Status.PENDING.equals(status.status())) {\r\n                    future.complete(client.getReport(uuid) != null);\r\n                }\r\n            }\r\n        };\r\n\r\n        scheduler.scheduleAtFixedRate(checkStatus, 0, 10, TimeUnit.SECONDS);\r\n        try {\r\n            return future.get();\r\n        } catch (Exception e) {\r\n            return Boolean.FALSE;\r\n        } finally {\r\n            scheduler.shutdown();\r\n        }\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    private static final ExecutorService SERVICE = Executors.newFixedThreadPool(8);\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        List<Callable<Boolean>> callableTasks = new ArrayList<>();\r\n        ReportClient client = new ReportClient();\r\n        \r\n        for (int i = 0; i <= 100; i++) {  \r\n            callableTasks.add(new Task(client));\r\n        }\r\n\r\n        SERVICE.invokeAll(callableTasks);\r\n        SERVICE.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonGenerator;\r\nimport com.fasterxml.jackson.databind.SerializerProvider;\r\nimport com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\r\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer;\r\nimport java.io.IOException;\r\nimport java.util.Iterator;\r\n\r\npublic class ItemSerializer extends StdSerializer<Item> {\r\n\r\n    public ItemSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public ItemSerializer(Class<Item> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(Item item, JsonGenerator gen, SerializerProvider provider) throws IOException {\r\n        ToXmlGenerator xmlGen = (ToXmlGenerator) gen;\r\n        xmlGen.writeStartObject();\r\n        \r\n        xmlGen.writeStringField(""SNO"", item.getSNo());\r\n        xmlGen.writeNumberField(""Weight"", item.getWeight());\r\n\r\n        Iterator<String> aIter = item.getAList().iterator();\r\n        Iterator<String> bIter = item.getBList().iterator();\r\n\r\n        while (aIter.hasNext() || bIter.hasNext()) {\r\n            if (aIter.hasNext()) xmlGen.writeStringField(""A"", aIter.next());\r\n            if (bIter.hasNext()) xmlGen.writeStringField(""B"", bIter.next());\r\n        }\r\n\r\n        xmlGen.writeEndObject();\r\n    }\r\n}\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\r\n\r\nimport java.util.List;\r\n\r\n@JacksonXmlRootElement(localName = ""Item"")\r\n@JsonSerialize(using = ItemSerializer.class)\r\npublic class Item {\r\n    \r\n    @JacksonXmlProperty(localName = ""SNO"")\r\n    private String sNo;\r\n\r\n    @JacksonXmlProperty(localName = ""Weight"")\r\n    private Float weight;\r\n\r\n    private List<String> aList;\r\n    private List<String> bList;\r\n\r\n    public String getSNo() { return sNo; }\r\n    public Float getWeight() { return weight; }\r\n    public List<String> getAList() { return aList; }\r\n    public List<String> getBList() { return bList; }\r\n\r\n    public void setSNo(String sNo) { this.sNo = sNo; }\r\n    public void setWeight(Float weight) { this.weight = weight; }\r\n    public void setAList(List<String> aList) { this.aList = aList; }\r\n    public void setBList(List<String> bList) { this.bList = bList; }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private JsonNode transactionsList;\r\n\r\n    public String[] getTransactionsList() {\r\n        if (transactionsList == null || !transactionsList.isArray()) {\r\n            return new String[0];\r\n        }\r\n        String[] result = new String[transactionsList.size()];\r\n        for (int i = 0; i < transactionsList.size(); i++) {\r\n            result[i] = transactionsList.get(i).toString();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public void setTransactionsList(JsonNode transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = ""{ \""payLoad\"": [{ \""id\"": 1, \""userName\"": null, \""arName\"": \""A1\"", \""areas\"": [] }, { \""id\"": 2, \""userName\"": \""alpha2\"", \""arName\"": \""A2\"", \""areas\"": [] }], \""count\"": 2, \""respCode\"": 200 }"";\r\n        \r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n\r\n        for (String item : responseRcvd.getTransactionsList()) {\r\n            System.out.println(item);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nclass StringToDateDeserializerTest {\r\n\r\n    private final StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n\r\n    @Test\r\n    void testDeserializeValidDate() throws IOException, ParseException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn(""2024-03-12T15:30:00Z"");\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n        assertNotNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeEmptyString() throws IOException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test\r\n    void testDeserializeInvalidDate() throws IOException {\r\n        JsonParser mockParser = mock(JsonParser.class);\r\n        DeserializationContext mockContext = mock(DeserializationContext.class);\r\n\r\n        when(mockParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        assertThrows(MyCustomException.class, () -> deserializer.deserialize(mockParser, mockContext));\r\n    }\r\n}\r\n""]",0,1
"[""import org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.logging.LogEntries;\r\nimport org.openqa.selenium.logging.LogEntry;\r\nimport org.openqa.selenium.logging.LogType;\r\nimport org.openqa.selenium.logging.LoggingPreferences;\r\n\r\nimport java.util.logging.Level;\r\n\r\npublic class MainExample {\r\n    public static void main(String[] args) {\r\n        System.setProperty(""webdriver.gecko.driver"", ""path_to_driver/geckodriver"");\r\n\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        LoggingPreferences logs = new LoggingPreferences();\r\n        logs.enable(LogType.BROWSER, Level.ALL);\r\n        options.setCapability(""goog:loggingPrefs"", logs);\r\n\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(""https://www.google.com"");\r\n\r\n        try {\r\n            Thread.sleep(2000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        LogEntries entries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : entries) {\r\n            System.out.println(entry.getLevel() + "": "" + entry.getMessage());\r\n        }\r\n\r\n        driver.quit();\r\n    }\r\n}\r\n""]",0,1
"["" class SecurityConfig {\r\n\r\n    @Value(""${security.jwt.secret}"")\r\n    private String jwtSecret;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n\r\n        http.exceptionHandling(exceptions -> exceptions.defaultAuthenticationEntryPointFor(\r\n                        new LoginUrlAuthenticationEntryPoint(""/login""), new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n                .oauth2ResourceServer(resourceServer -> resourceServer.jwt(Customizer.withDefaults()));\r\n\r\n        http.cors(customizer -> customizer.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(\r\n                        authorize -> authorize.requestMatchers(""/oauth2/authorize"").permitAll().anyRequest().authenticated())\r\n                .formLogin(formLogin -> formLogin.loginPage(""/login"").permitAll())\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()));\r\n        http.csrf(csrf -> csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec)\r\n                .keyID(UUID.randomUUID().toString()) // Should match in decoder\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                System.out.println(""No keys found matching selection criteria!"");\r\n            } else {\r\n                System.out.println(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        NimbusJwtDecoder decoder = NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n        decoder.setJwtValidator(JwtValidators.createDefaultWithIssuer(""http://localhost:8080"")); \r\n        return decoder;\r\n    }\r\n}\r\n""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    private String name;\r\n    private String motive;\r\n\r\n    public Company(@Value(""Adventure of War"") String name, @Value(""A place for War"") String motive) {\r\n        this.name = name;\r\n        this.motive = motive;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n""]",0,1
"[""import io.smallrye.mutiny.Multi;\r\nimport io.smallrye.mutiny.subscription.Cancellable;\r\nimport java.time.Duration;\r\nimport java.util.List;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\npublic class PollingService {\r\n    public static void main(String[] args) {\r\n        AtomicBoolean stopPolling = new AtomicBoolean(false);\r\n\r\n        Cancellable cancellable = Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n            .onItem().transformToMultiAndMerge(tick -> {\r\n                System.out.println(""Tick: "" + tick);\r\n                return Multi.createFrom().<Transaction>emitter(emitter -> {\r\n                    if (stopPolling.get()) {\r\n                        emitter.complete();\r\n                        return;\r\n                    }\r\n                    service.getTransactions().toMulti()\r\n                        .onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n                        .subscribe().with(transaction -> {\r\n                            if (!verification.isOngoing()) {\r\n                                emitter.fail(new TransactionVerificationException());\r\n                            } else {\r\n                                boolean transactionFound = transaction.getAmount().stream()\r\n                                    .anyMatch(amount -> ""test"".equals(amount.getQuantity()));\r\n                                if (transactionFound) {\r\n                                    emitter.emit(transaction);\r\n                                    stopPolling.set(true);\r\n                                    emitter.complete();\r\n                                }\r\n                            }\r\n                        });\r\n                });\r\n            })\r\n            .subscribe()\r\n            .with(transaction -> log.info(transaction), Throwable::printStackTrace);\r\n    }\r\n}\r\n""]",0,1
"[""import javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.security.SecureRandom;\r\nimport java.util.Base64;\r\n\r\npublic class AESEncryption {\r\n    public static void main(String[] args) throws Exception {\r\n        byte[] keyValue = Files.readAllBytes(Paths.get(""/home/debashishd/Downloads/s_key""));\r\n\r\n        byte[] keyBytes = new byte[32];\r\n        System.arraycopy(keyValue, 0, keyBytes, 0, Math.min(keyValue.length, 32));\r\n\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, ""AES"");\r\n        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n\r\n        byte[] iv = new byte[16];\r\n        new SecureRandom().nextBytes(iv);\r\n        IvParameterSpec ivSpec = new IvParameterSpec(iv);\r\n\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);\r\n        String testMessage = ""Hello this is Roxane"";\r\n        byte[] encryptedBytes = cipher.doFinal(testMessage.getBytes(StandardCharsets.UTF_8));\r\n        String encryptedValue = Base64.getEncoder().encodeToString(encryptedBytes);\r\n        String ivString = Base64.getEncoder().encodeToString(iv);\r\n\r\n        System.out.println(""Encrypted value: "" + encryptedValue);\r\n\r\n        Cipher decryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(Base64.getDecoder().decode(ivString)));\r\n        byte[] decryptedBytes = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue));\r\n        String decryptedResult = new String(decryptedBytes, StandardCharsets.UTF_8);\r\n\r\n        System.out.println(""Decrypted value: "" + decryptedResult);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n        \r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n\r\n        spinnerMin.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            int newMax = newValue.intValue();\r\n            if (newMax > spinnerMax.getValue()) {\r\n                spinnerMax.getValueFactory().setValue(newMax);\r\n            }\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newValue.intValue(), 6, spinnerMax.getValue()));\r\n            checkButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            int newMin = newValue.intValue();\r\n            if (newMin < spinnerMin.getValue()) {\r\n                spinnerMin.getValueFactory().setValue(newMin);\r\n            }\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newValue.intValue(), spinnerMin.getValue()));\r\n            checkButtons(spinnerMin, spinnerMax);\r\n        });\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().addAll(spinnerMin, spinnerMax);\r\n\r\n        Scene scene = new Scene(root, 300, 250);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    private void checkButtons(Spinner<Integer> spinnerMin, Spinner<Integer> spinnerMax) {\r\n        if (spinnerMin.getValue() == spinnerMax.getValue()) {\r\n            spinnerMin.getEditor().setStyle(""-fx-background-color: lightgray;"");\r\n            spinnerMax.getEditor().setStyle(""-fx-background-color: lightgray;"");\r\n        } else {\r\n            spinnerMin.getEditor().setStyle(""-fx-background-color: white;"");\r\n            spinnerMax.getEditor().setStyle(""-fx-background-color: white;"");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"["" void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n               .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n    pipeline.run();\r\n}\r\n\r\n@Test\r\npublic void testBatchProcessingWithTransactionExecutedOver1000() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingMoreThan1000Records.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n               .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n    pipeline.run();\r\n}\r\n""]",0,1
"[""package com.example.demo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            Parent root = FXMLLoader.load(this.getClass().getResource(""test.fxml""));\r\n            Scene scene = new Scene(root);\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n}\r\npackage com.example.demo;\r\n\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.ComboBox;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class Test implements Initializable {\r\n    @FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(""Back-end"", ""Front-end"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(""Java"", ""PHP"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(""HTML"", ""CSS"", ""Javascript"");\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n        DevelopmentType.setValue(""Front-end""); // Default value for testing\r\n        LanguageProgramming.setPromptText(""Select a language programming"");\r\n    }\r\n\r\n    public void DevelopmentTypeEvent(){\r\n        if(DevelopmentType.getValue().equals(""Back-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        } else if (DevelopmentType.getValue().equals(""Front-end"")) {\r\n            LanguageProgramming.setPromptText(""Select a language programming"");\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package com.example.usb;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.hardware.usb.UsbDevice;\r\nimport android.hardware.usb.UsbManager;\r\nimport android.util.Log;\r\n\r\npublic class NativeUsbService {\r\n\r\n    private static final String TAG = ""NativeUsbService"";\r\n    private static final String ACTION_USB_PERMISSION = ""com.android.example.USB_PERMISSION"";\r\n    private UsbDevice usbDevice;\r\n    private UsbManager usbManager;\r\n    private UsbConnection connection;\r\n    private UsbInterface usbDeviceInterface;\r\n    private UsbEndpoint endpointIn;\r\n    private UsbEndpoint endpointOut;\r\n\r\n    public NativeUsbService(Context context) {\r\n        usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n\r\n        IntentFilter filter = new IntentFilter();\r\n        filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n        filter.addAction(ACTION_USB_PERMISSION);\r\n\r\n        context.registerReceiver(usbReceiver, filter);\r\n    }\r\n\r\n    private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {\r\n\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getAction();\r\n            if (action.equals(UsbManager.ACTION_USB_DEVICE_ATTACHED)) {\r\n                synchronized (this) {\r\n                    UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n                    if (device != null) {\r\n                        usbDevice = device;\r\n                        // I'm not sure if permission is automatically granted here, so let's check\r\n                        if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                            Log.d(TAG, ""onReceive: Permission granted for device"");\r\n                        } else {\r\n                            // Permission not granted, might need to request it\r\n                            Log.d(TAG, ""onReceive: Permission not granted for device"");\r\n                            // Attempt to request permission (if needed)\r\n                            Intent permissionIntent = new Intent(ACTION_USB_PERMISSION);\r\n                            usbManager.requestPermission(device, permissionIntent);\r\n                        }\r\n                    } else {\r\n                        Log.d(TAG, ""onReceive: DEVICE WAS ATTACHED AND WAS NULL :("");\r\n                    }\r\n                }\r\n            } else if (action.equals(UsbManager.ACTION_USB_DEVICE_DETACHED)) {\r\n                Log.d(TAG, ""onReceive: Device was detached!"");\r\n                if (connection != null) {\r\n                    connection.releaseInterface(usbDeviceInterface);\r\n                    connection.close();\r\n                }\r\n                connection = null;\r\n                usbDevice = null;\r\n                endpointIn = null;\r\n                endpointOut = null;\r\n            } else if (action.equals(ACTION_USB_PERMISSION)) {\r\n                if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                    Log.d(TAG, ""onReceive: USB permission granted for device"");\r\n                    // Now that permission is granted, establish a connection with the device\r\n                    if (usbDevice != null) {\r\n                        // Proceed to setup the connection or handle device communication\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, ""onReceive: USB permission denied for device"");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Ensure to unregister the receiver when it's no longer needed\r\n    public void unregisterReceiver(Context context) {\r\n        context.unregisterReceiver(usbReceiver);\r\n    }\r\n}\r\n""]",0,1
"["" class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    public UserController(final UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @PostMapping(""/users"")\r\n    @PreAuthorize(""hasAuthority('create:user')"")\r\n    public ResponseEntity<UserDto> create(final @RequestBody @Valid CreateUserCommand command) {\r\n        return ResponseEntity\r\n                .status(HttpStatus.CREATED)\r\n                .body(userService.create(command));\r\n    }\r\n}\r\n\r\n""]",0,1
"[""private <T> void positionEntity(Class<T> entityClass, Object... params) {\r\n    int x;\r\n    int y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = entityClass.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class).newInstance(x, y, params);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate void positionMagician() {\r\n    positionEntity(Magician.class, player, field, this, sizeX, sizeY);\r\n}\r\n\r\nprivate void positionGoblin() {\r\n    positionEntity(Goblin.class, player, field, this, sizeX, sizeY);\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Task implements Runnable {\r\n    private final String x;\r\n    private static final Map<String, Lock> locks = new HashMap<>();\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        synchronized (locks) {\r\n            if (!locks.containsKey(key)) {\r\n                locks.put(key, new ReentrantLock());\r\n            }\r\n            return locks.get(key);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock l = getLock(x);\r\n        l.lock();\r\n        try {\r\n            System.out.println(x);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException ex) {\r\n            Logger.getLogger(Task.class.getName()).log(Level.SEVERE, null, ex);\r\n        } finally {\r\n            l.unlock();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n    }\r\n}\r\n""]",0,1
"["" class WebSocketSecurityConfig extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n\r\n    @Bean\r\n    AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }\r\n\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\r\n        messages.anyMessage().authenticated();\r\n    }\r\n}\r\n\r\n@Configuration\r\n@EnableWebSecurity(debug = true)\r\npublic class SecurityConfig {\r\n\r\n    @Autowired\r\n    private JwtFilter jwtFilter;\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n            .addFilterBefore(jwtFilter, BasicAuthenticationFilter.class)\r\n            .cors(AbstractHttpConfigurer::disable)\r\n            .csrf(csrf -> csrf.ignoringRequestMatchers(""/ws/**""))\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(""/authenticate"").permitAll()\r\n                .requestMatchers(""/createchatroom"").authenticated()\r\n                .requestMatchers(""/public/**"").permitAll()\r\n                .requestMatchers(""/private/**"").permitAll()\r\n                .requestMatchers(""/ws/**"").authenticated()\r\n                .requestMatchers(""/register"").permitAll()\r\n                .requestMatchers(""/csrf"").authenticated()\r\n                .requestMatchers(""/addEmployeeToFavorites"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name())\r\n                .requestMatchers(""/addChatRoomToFavorites"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name())\r\n                .requestMatchers(""/home"").hasAnyAuthority(EMPLOYEE.name(), ADMIN.name()))\r\n            .build();\r\n    }\r\n}\r\n""]",0,1
"[""(""/sides"")\r\npublic class SidesController {\r\n\r\n    @PostMapping(\r\n        value = ""/Request"",\r\n        consumes = MediaType.APPLICATION_XML_VALUE,\r\n        produces = MediaType.APPLICATION_XML_VALUE)\r\n    public Mono<ResponseModel> getSsi(@RequestBody Mono<RequestModel> requestModelMono) {\r\n        return requestModelMono.map(request -> {\r\n            ResponseModel response = new ResponseModel();\r\n            response.setMessage(""Processed request for: "" + request.getId());\r\n            return response;\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""package br.inf.portalfiscal.mdfe.wsdl.mdferecepcaosinc;\r\n\r\nimport javax.xml.namespace.QName;\r\nimport javax.xml.ws.Service;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\n\r\npublic class MDFeRecepcaoSincClient {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            URL wsdlURL = new URL(""https://mdfe-homologacao.svrs.rs.gov.br/ws/MDFeRecepcaoSinc/MDFeRecepcaoSinc.asmx?wsdl"");\r\n            QName serviceName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSinc"");\r\n            Service service = Service.create(wsdlURL, serviceName);\r\n\r\n            QName portName = new QName(""http://www.portalfiscal.inf.br/mdfe/wsdl/MDFeRecepcaoSinc"", ""MDFeRecepcaoSincSoap12"");\r\n            MDFeRecepcaoSincSoap12 port = service.getPort(portName, MDFeRecepcaoSincSoap12.class);\r\n\r\n            ObjectFactory of = new ObjectFactory();\r\n            JAXBElement<String> jaxb = of.createMdfeDadosMsg(""<mdfeDadosMsg>...</mdfeDadosMsg>"");\r\n\r\n            MdfeRecepcaoResult result = port.mdfeRecepcao(jaxb.getValue());\r\n            System.out.println(result.getContent());\r\n\r\n        } catch (MalformedURLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""package com.example.pdfgenerator;\r\n\r\nimport com.lowagie.text.DocumentException;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\n\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport java.io.*;\r\n\r\npublic class PdfGenerator {\r\n\r\n    public static void main(String[] args) throws IOException, DocumentException {\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""X-UA-Compatible\"" content=\""IE=edge\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""    <style>\n"" +\r\n                ""       @font-face {\n"" +\r\n                ""           font-family: 'Arial';\n"" +\r\n                ""           src: url('file:///C:/Windows/Fonts/arial.ttf');\n"" +\r\n                ""       }\n"" +\r\n                ""       body { font-family: 'Arial', sans-serif; }\n"" +\r\n                ""    </style>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>?????????????</h3>\n"" +\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        renderer.getFontResolver().addFont(""C:/Windows/Fonts/arial.ttf"", true);\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        outputStream.close();\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\npublic class CoordinateController {\r\n\r\n    @PostMapping(""/hole/coordinate"")\r\n    @ResponseBody\r\n    public String saveCoordinate(@RequestBody Map<String, Object> params) {\r\n        Object coordinateObj = params.get(""coordinate"");\r\n        List<List<Integer>> coordinateList = (List<List<Integer>>) coordinateObj;\r\n        \r\n        int[][] coordinates = new int[coordinateList.size()][2];\r\n        for (int i = 0; i < coordinateList.size(); i++) {\r\n            coordinates[i][0] = coordinateList.get(i).get(0);\r\n            coordinates[i][1] = coordinateList.get(i).get(1);\r\n        }\r\n\r\n        for (int[] row : coordinates) {\r\n            System.out.println(Arrays.toString(row));\r\n        }\r\n\r\n        return ""success"";\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Random;\r\n\r\npublic class CardShuffler {\r\n    public static void shuffleDeck(Card[] deck) {\r\n        Random random = new Random();\r\n        for (int i = deck.length - 1; i > 0; i--) {\r\n            int j = random.nextInt(i + 1);\r\n            Card temp = deck[i];\r\n            deck[i] = deck[j];\r\n            deck[j] = temp;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Card[] deck = new Card[52];\r\n        for (int i = 0; i < deck.length; i++) {\r\n            deck[i] = new Card(""Card "" + (i + 1));\r\n        }\r\n\r\n        shuffleDeck(deck);\r\n\r\n        for (Card card : deck) {\r\n            System.out.println(card.getName());\r\n        }\r\n    }\r\n}\r\n\r\nclass Card {\r\n    private String name;\r\n\r\n    public Card(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.extension.*;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\npublic class JUnit5Suite {\r\n    public static final JUnit5Server MY_SERVER = new JUnit5Server();\r\n    \r\n    @BeforeAll\r\n    public static void setup() {\r\n        MY_SERVER.beforeAll(null);\r\n    }\r\n\r\n    @AfterAll\r\n    public static void teardown() {\r\n        MY_SERVER.afterAll(null);\r\n    }\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n    @Override\r\n    public void beforeAll(ExtensionContext context) throws Exception {\r\n        System.out.println(""Starting server..."");\r\n    }\r\n\r\n    @Override\r\n    public void afterAll(ExtensionContext context) throws Exception {\r\n        System.out.println(""Stopping server..."");\r\n    }\r\n}\r\n""]",0,1
"[""(""compute/{uuid}/results"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n        .flatMap(analysis -> {\r\n            analysis.setResults(results);\r\n            return computeSCARepository.save(analysis);\r\n        })\r\n        .then();\r\n}\r\n""]",0,1
"["" class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false);\r\n        marshaller.setMarshallerProperties(Collections.singletonMap(\r\n            Marshaller.JAXB_ENCODING, ""UTF-8""\r\n        ));\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    byte[] encodedData = Base64.getEncoder().encode(documentData);\r\n    binaryData.setBlob(new DataHandler(new ByteArrayDataSource(encodedData, ""application/pdf"")));\r\n    binaryData.setExtension(""pdf"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(\r\n        MyServiceProperties properties,\r\n        Jaxb2Marshaller marshaller\r\n    ) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    @Ov\r\n""]",0,1
"[""btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        try {\r\n            value1 = Long.parseLong(txtfirst.getText().toString());\r\n            value2 = Long.parseLong(txtsecond.getText().toString());\r\n\r\n            if (value1 > value2) {\r\n                Toast.makeText(getApplicationContext(), ""Invalid range"", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            list.clear();\r\n            for (long i = value1; i <= value2; i++) {\r\n                list.add("""" + i);\r\n            }\r\n            arrayAdapter.notifyDataSetChanged();\r\n            li.setAdapter(arrayAdapter);\r\n\r\n        } catch (NumberFormatException e) {\r\n            Toast.makeText(getApplicationContext(), ""Invalid input"", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n});\r\n""]",0,1
"[""import javax.lang.model.element.Element;\r\nimport javax.lang.model.element.PackageElement;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport com.sun.source.doctree.DocTree;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.SimpleDocTreeVisitor;\r\nimport java.util.List;\r\n\r\npublic class JavadocLinkProcessor {\r\n\r\n    private final Elements elementUtils;\r\n    private final DocTrees docTrees;\r\n\r\n    public JavadocLinkProcessor(Elements elementUtils, DocTrees docTrees) {\r\n        this.elementUtils = elementUtils;\r\n        this.docTrees = docTrees;\r\n    }\r\n\r\n    public void processLinks(Element element) {\r\n        var docCommentTree = docTrees.getDocCommentTree(element);\r\n        if (docCommentTree == null) return;\r\n\r\n        docCommentTree.accept(new SimpleDocTreeVisitor<Void, Void>() {\r\n            @Override\r\n            public Void visitLink(LinkTree node, Void unused) {\r\n                String reference = node.getReference().getSignature();\r\n                TypeElement typeElement = resolveFullyQualifiedName(reference, element);\r\n                if (typeElement != null) {\r\n                    System.out.println(""Fully qualified name: "" + typeElement.getQualifiedName());\r\n                }\r\n                return null;\r\n            }\r\n        }, null);\r\n    }\r\n\r\n    private TypeElement resolveFullyQualifiedName(String reference, Element context) {\r\n        if (reference.contains(""."")) {\r\n            return elementUtils.getTypeElement(reference);\r\n        }\r\n\r\n        PackageElement pkg = elementUtils.getPackageOf(context);\r\n        TypeElement withinPackage = elementUtils.getTypeElement(pkg.getQualifiedName() + ""."" + reference);\r\n        if (withinPackage != null) return withinPackage;\r\n\r\n        List<? extends Element> imports = context.getEnclosingElement().getEnclosedElements();\r\n        for (Element imp : imports) {\r\n            if (imp instanceof TypeElement && imp.getSimpleName().contentEquals(reference)) {\r\n                return (TypeElement) imp;\r\n            }\r\n        }\r\n        \r\n        return elementUtils.getTypeElement(""java.lang."" + reference);\r\n    }\r\n}\r\n""]",0,1
"[""interface Show1 {\r\n    default void display() {\r\n        System.out.println(""hello"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}\r\n""]",0,1
"[""package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (nameBinding != null) {\r\n                nameBinding.dispose();\r\n                nameBinding = null;\r\n            }\r\n            if (input.length() >= 2) {\r\n                ObservableList<String> sourceList = input.startsWith(""A"") ? names1 : names2;\r\n                nameBinding = TextFields.bindAutoCompletion(textField, sourceList);\r\n                nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.web3j.crypto.Keys;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\n\r\npublic class SignatureVerifier {\r\n\r\n    public static boolean verifySignature(String publicWalletId, String nonce, String signature) {\r\n        String messageHash = ""\u0019Ethereum Signed Message:\n"" + nonce.length() + nonce;\r\n        byte[] messageHashBytes = Numeric.hexStringToByteArray(Numeric.toHexString(messageHash.getBytes()));\r\n\r\n        byte[] signatureBytes = Numeric.hexStringToByteArray(signature);\r\n        if (signatureBytes.length != 65) return false;\r\n\r\n        byte v = signatureBytes[64];\r\n        if (v < 27) v += 27;\r\n\r\n        Sign.SignatureData signatureData = new Sign.SignatureData(\r\n                v, \r\n                Arrays.copyOfRange(signatureBytes, 0, 32), \r\n                Arrays.copyOfRange(signatureBytes, 32, 64)\r\n        );\r\n\r\n        BigInteger publicKey;\r\n        try {\r\n            publicKey = Sign.signedMessageToKey(messageHashBytes, signatureData);\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n\r\n        String recoveredWalletId = ""0x"" + Keys.getAddress(publicKey);\r\n        return recoveredWalletId.equalsIgnoreCase(publicWalletId);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String publicWalletId = ""0x123456789abcdef..."";\r\n        String nonce = ""random_nonce_value"";\r\n        String signature = ""0xabcdef123456..."";\r\n        \r\n        System.out.println(verifySignature(publicWalletId, nonce, signature));\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.DoubleSummaryStatistics;\r\nimport java.util.List;\r\nimport java.util.function.ToDoubleFunction;\r\n\r\npublic class AggregationExample {\r\n\r\n    public enum AggregationType {\r\n        MIN(DoubleSummaryStatistics::getMin),\r\n        MAX(DoubleSummaryStatistics::getMax),\r\n        AVERAGE(DoubleSummaryStatistics::getAverage);\r\n\r\n        private final ToDoubleFunction<DoubleSummaryStatistics> function;\r\n\r\n        AggregationType(ToDoubleFunction<DoubleSummaryStatistics> function) {\r\n            this.function = function;\r\n        }\r\n\r\n        public double apply(DoubleSummaryStatistics stats) {\r\n            return function.applyAsDouble(stats);\r\n        }\r\n    }\r\n\r\n    private List<Double> provides;\r\n\r\n    public Float someFunction(AggregationType type) {\r\n        DoubleSummaryStatistics stats = provides.stream()\r\n                .mapToDouble(this::someFunc)\r\n                .summaryStatistics();\r\n        return (float) type.apply(stats);\r\n    }\r\n\r\n    private double someFunc(double value) {\r\n        return value;\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {\r\n    }\r\n\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<? extends BaseEvent<C, P>, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class CoreModulesCheck {\r\n    public static void main(String[] args) {\r\n        Set<String> coreModules = getCoreModules();\r\n        Set<String> allModules = new HashSet<>();\r\n\r\n        ModuleFinder.ofSystem().findAll().stream()\r\n                .map(ModuleReference::descriptor)\r\n                .map(m -> m.name())\r\n                .forEach(allModules::add);\r\n\r\n        System.out.println(""Core Modules:"");\r\n        coreModules.forEach(System.out::println);\r\n\r\n        System.out.println(""\nNon-Core Modules:"");\r\n        allModules.stream()\r\n                .filter(m -> !coreModules.contains(m))\r\n                .forEach(System.out::println);\r\n    }\r\n\r\n    private static Set<String> getCoreModules() {\r\n        Set<String> core = new HashSet<>();\r\n        core.add(""java.base"");\r\n        core.add(""java.compiler"");\r\n        core.add(""java.datatransfer"");\r\n        core.add(""java.desktop"");\r\n        core.add(""java.instrument"");\r\n        core.add(""java.logging"");\r\n        core.add(""java.management"");\r\n        core.add(""java.management.rmi"");\r\n        core.add(""java.naming"");\r\n        core.add(""java.net.http"");\r\n        core.add(""java.prefs"");\r\n        core.add(""java.rmi"");\r\n        core.add(""java.scripting"");\r\n        core.add(""java.se"");\r\n        core.add(""java.security.jgss"");\r\n        core.add(""java.security.sasl"");\r\n        core.add(""java.smartcardio"");\r\n        core.add(""java.sql"");\r\n        core.add(""java.sql.rowset"");\r\n        core.add(""java.transaction.xa"");\r\n        core.add(""java.xml"");\r\n        core.add(""java.xml.crypto"");\r\n        return core;\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMyyyy"")\r\n                .toFormatter(Locale.of(""es"", ""ES""));\r\n\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", formatter);\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.Cursor;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setCursor(Cursor.NONE); \r\n\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Cursor Test"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.apache.poi.ss.formula.FormulaParser;\r\nimport org.apache.poi.ss.formula.FormulaRenderingWorkbook;\r\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.ss.formula.ptg.Ptg;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.util.List;\r\n\r\npublic class ExcelFormulaTransformer {\r\n    public static void main(String[] args) {\r\n        try {\r\n            FileInputStream fis = new FileInputStream(new File(""example.xlsx""));\r\n            Workbook workbook = WorkbookFactory.create(fis);\r\n            String formula = ""IF(A2=A3,A4,A5)"";\r\n            String transformedFormula = transformFormula(formula, ""A6"", ""C6"", workbook);\r\n            System.out.println(""Transformed Formula: "" + transformedFormula);\r\n        } catch (Exception e) {\r\n            System.out.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public static String transformFormula(String formula, String originalAddress, String destinationAddress, Workbook workbook) {\r\n        Ptg[] tokens = FormulaParser.parse(formula, (FormulaRenderingWorkbook) workbook, 0, 0);\r\n        for (Ptg token : tokens) {\r\n            if (token instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) token;\r\n                int rowOffset = parseRow(destinationAddress) - parseRow(originalAddress);\r\n                int colOffset = parseColumn(destinationAddress) - parseColumn(originalAddress);\r\n                ref.setRow(ref.getRow() + rowOffset);\r\n                ref.setColumn(ref.getColumn() + colOffset);\r\n            }\r\n        }\r\n        return FormulaParser.toFormulaString((FormulaRenderingWorkbook) workbook, tokens);\r\n    }\r\n\r\n    private static int parseColumn(String cell) {\r\n        int col = 0;\r\n        for (char ch : cell.toCharArray()) {\r\n            if (Character.isLetter(ch)) {\r\n                col = col * 26 + (ch - 'A' + 1);\r\n            }\r\n        }\r\n        return col - 1;\r\n    }\r\n\r\n    private static int parseRow(String cell) {\r\n        String num = cell.replaceAll(""\\D+"", """");\r\n        return num.isEmpty() ? -1 : Integer.parseInt(num) - 1;\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.RandomAccessFile;\r\n\r\npublic class OverwriteFileExample {\r\n    public static void main(String[] args) {\r\n        try {\r\n            RandomAccessFile raf = new RandomAccessFile(""test.txt"", ""rw"");\r\n            raf.write(""123456789"".getBytes());\r\n            raf.seek(0);\r\n            raf.write(""hello"".getBytes());\r\n            raf.close();\r\n        } catch (Exception e) {\r\n            System.out.println(""Error: "" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class CollectionController implements Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n\r\n        authorDirectorColumn.setCellValueFactory(cellData -> {\r\n            LibraryItem item = cellData.getValue();\r\n            if (item instanceof Book) {\r\n                return new SimpleStringProperty(((Book) item).getAuthor());\r\n            } else if (item instanceof Movie) {\r\n                return new SimpleStringProperty(((Movie) item).getDirector());\r\n            }\r\n            return new SimpleStringProperty("""");\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n@Configuration\r\npublic class TestDbConfig {\r\n\r\n    @Bean(name = ""testDataSource"")\r\n    public DataSource testDataSource() throws SQLException {\r\n        DataSource originalDataSource = mock(DataSource.class);\r\n        Connection mockConnection = mock(Connection.class);\r\n\r\n        when(originalDataSource.getConnection()).thenAnswer(invocation -> {\r\n            if (Math.random() > 0.7) { \r\n                throw new SQLException(""Simulated connection issue"");\r\n            }\r\n            return mockConnection;\r\n        });\r\n\r\n        return originalDataSource;\r\n    }\r\n}\r\n""]",0,1
"[""import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.MockitoAnnotations;\r\n\r\npublic class PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    private UUID priceUuid;\r\n    private Price existingPrice;\r\n    private PriceRequest priceRequest;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MockitoAnnotations.initMocks(this);\r\n\r\n        priceUuid = UUID.randomUUID();\r\n        existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n\r\n        priceRequest = new PriceRequest();\r\n        priceRequest.setPriceAmount(150.0);\r\n    }\r\n\r\n    @Test\r\n    void testUpdate() {\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(any())).thenAnswer(invocation -> invocation.getArgument(0));\r\n\r\n        PriceDTO result = priceService.update(priceUuid, priceRequest);\r\n\r\n        assertNotNull(result);\r\n        assertEquals(150.0, result.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n""]",0,1
"[""(Task.Status.class)\r\n@MappedJdbcTypes(JdbcType.INTEGER)\r\npublic class TaskStatusTypeHandler extends BaseTypeHandler<Task.Status> {\r\n\r\n    @Override\r\n    public void setNonNullParameter(PreparedStatement ps, int i, Task.Status parameter, JdbcType jdbcType) throws SQLException {\r\n        ps.setInt(i, parameter.getId());\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(ResultSet rs, String columnName) throws SQLException {\r\n        int statusId = rs.getInt(columnName);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\r\n        int statusId = rs.getInt(columnIndex);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Task.Status getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\r\n        int statusId = cs.getInt(columnIndex);\r\n        for (Task.Status status : Task.Status.values()) {\r\n            if (status.getId().equals(statusId)) {\r\n                return status;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n""]",0,1
"[""package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.CLSID;\r\nimport taskbar_test.gen.IID;\r\nimport taskbar_test.gen.ITaskbarList3;\r\nimport taskbar_test.gen.ITaskbarList3Vtbl;\r\nimport taskbar_test.gen.ShObjIdl_core_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class FxWinTaskbar extends Application {\r\n\r\n    public static final String GUID_FORMAT = ""{%s}"";\r\n    public static final String CLSID_CONST = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String IID_ITASKBAR_LIST_3 = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        var button = new javafx.scene.control.Button(""Click Me"");\r\n        button.setOnAction(e -> handleClick());\r\n\r\n        var root = new javafx.scene.layout.StackPane(button);\r\n        var scene = new javafx.scene.Scene(root, 320, 180);\r\n\r\n        stage.setTitle(""Taskbar Progress"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    void handleClick() {\r\n        long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newCachedThreadPool().submit(() -> {\r\n            try (var arena = Arena.ofConfined()) {\r\n                var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n                var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n                var clsid = CLSID.allocate(arena);\r\n                var iidTaskbarList3 = IID.allocate(arena);\r\n                var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n                MemorySegment extraAllocation = arena.allocate(8); // Unnecessary allocation\r\n\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.err.println(""Failed to initialize COM: "" + hr);\r\n                    return;\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n                hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""IIDFromString failed: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.out.println(""CoCreateInstance failed: "" + hr);\r\n                    return;\r\n                }\r\n\r\n                var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n                var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n                MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n                MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n                MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""HrInit failed: "" + hr);\r\n                }\r\n\r\n                MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed: "" + hr);\r\n                }\r\n\r\n                for (int i = 0; i <= 100; i += 20) { // Possible off-by-one error\r\n                    System.out.println(""Progress: "" + i);\r\n                    MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                    Thread.sleep(550); // Slightly inefficient delay\r\n                }\r\n\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NOPROGRESS());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    System.out.println(""SetProgressState reset failed: "" + hr);\r\n                }\r\n\r\n            } catch (Throwable ex) {\r\n                ex.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import android.content.ContentResolver;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.Objects;\r\n\r\npublic void saveFileToStorage(String fileName, InputStream inputStream) {\r\n    OutputStream outputStream = null;\r\n    try {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            ContentResolver contentResolver = requireContext().getContentResolver();\r\n            ContentValues contentValues = new ContentValues();\r\n            contentValues.put(""_display_name"", fileName);\r\n            contentValues.put(""relative_path"", Environment.DIRECTORY_DOCUMENTS);\r\n            Uri fileUri = contentResolver.insert(Uri.parse(""content://media/external_primary/document""), contentValues);\r\n            if (fileUri != null) {\r\n                outputStream = contentResolver.openOutputStream(fileUri);\r\n                byte[] buffer = new byte[8192];\r\n                int length;\r\n                while ((length = inputStream.read(buffer)) != -1) {\r\n                    outputStream.write(buffer, 0, length);\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""FileSave"", ""Error saving file: "" + fileName, e);\r\n    } finally {\r\n        try {\r\n            if (outputStream != null) outputStream.close();\r\n            inputStream.close();\r\n        } catch (IOException ignored) {}\r\n    }\r\n}\r\n\r\npublic void copyDatabaseFiles() {\r\n    try {\r\n        String[] files = requireContext().getAssets().list(""database/test"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                InputStream in = requireContext().getAssets().open(""database/test/"" + filename);\r\n                saveFileToStorage(filename, in);\r\n            }\r\n        } else {\r\n            Log.e(""FileCopy"", ""No files found"");\r\n        }\r\n    } catch (IOException e) {\r\n        Log.e(""FileCopy"", ""Error copying database files"", e);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println((t2 - t1) + ""\n"" + (t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.Graphics;\r\nimport java.awt.Image;\r\nimport java.awt.image.BufferedImage;\r\nimport javax.swing.JPanel;\r\n\r\npublic class ScaledBackgroundPanel extends JPanel {\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        BufferedImage image = ApplicationImages.getImage();\r\n        if (image != null) {\r\n            float factorWidth = (float) getWidth() / 1280;\r\n            float factorHeight = (float) getHeight() / 859;\r\n            int width, height, x = 0, y = 0;\r\n\r\n            if (factorWidth < factorHeight) {\r\n                width = (int) (1280 * factorWidth);\r\n                height = (int) (859 * factorWidth);\r\n                y = (getHeight() - height) / 2;\r\n            } else {\r\n                width = (int) (1280 * factorHeight);\r\n                height = (int) (859 * factorHeight);\r\n                x = (getWidth() - width) / 2;\r\n            }\r\n\r\n            Image scaledImage = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);\r\n            g.drawImage(scaledImage, x, y, this);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.Future;\r\nimport java.util.stream.IntStream;\r\nimport org.apache.commons.lang3.time.StopWatch;\r\nimport java.util.concurrent.TimeUnit;\r\nimport static java.text.MessageFormat.format;\r\n\r\npublic class VirtualThreadTest {\r\n    public static void main(String[] args) {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<? extends Future<String>> futures;\r\n        \r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                .mapToObj(Task::new)\r\n                .map(executorService::submit)\r\n                .toList();\r\n        }\r\n\r\n        for (Future<String> future : futures) {\r\n            try {\r\n                future.get();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(format(""The total time of execution was: {0} ms"", stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n    }\r\n}\r\n\r\nclass Task implements java.util.concurrent.Callable<String> {\r\n    private final int taskId;\r\n\r\n    public Task(int taskId) {\r\n        this.taskId = taskId;\r\n    }\r\n\r\n    @Override\r\n    public String call() {\r\n        System.out.println(format(""Task: {0} started"", taskId));\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        String result = null;\r\n\r\n        try (Connection connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"")) {\r\n            System.out.println(format(""Task: {0} connection established"", taskId));\r\n            var statement = connection.createStatement();\r\n            System.out.println(format(""Task: {0} executes SQL statement"", taskId));\r\n            ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n\r\n            while (resultSet.next()) {\r\n                result = resultSet.getString(""output"");\r\n            }\r\n\r\n            statement.close();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        stopWatch.stop();\r\n        System.out.println(format(""Task: {0} completed in {1} ms"", taskId, stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n        return result;\r\n    }\r\n}\r\n""]",0,1
"[""package com.adobe.panpipe;\r\n\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.stream.Collectors;\r\n\r\ninterface ITask<T> {\r\n    TaskResult<T> make();\r\n}\r\n\r\nclass TaskResult<T> {\r\n    T value;\r\n}\r\n\r\nclass AlphaTaskResult extends TaskResult<String> {\r\n    AlphaTaskResult(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass BetaTaskResult extends TaskResult<Integer> {\r\n    BetaTaskResult(Integer value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass AlphaTask implements ITask<String> {\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(""alphaTask"");\r\n    }\r\n}\r\n\r\nclass BetaTask implements ITask<Integer> {\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static <T, U extends TaskResult<T>> List<U> run(List<? extends ITask<T>> tasks) {\r\n        List<U> results = tasks\r\n                .stream()\r\n                .map(task -> (U) task.make())\r\n                .collect(Collectors.toList());\r\n\r\n        return results;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class WindowsCommandRunner {\r\n\r\n    private static List<String> runWindowsCommandAsRuntime(String command) {\r\n        List<String> out = new ArrayList<>();\r\n\r\n        String[] comm = {\r\n                ""C:\\Windows\\System32\\cmd.exe"",\r\n                ""/S"",\r\n                ""/K"",\r\n                ""\"""" + command + ""\"""",\r\n                ""&"",\r\n                ""exit""\r\n        };\r\n\r\n        System.out.println(""COMMAND: "" + String.join("" "", comm));\r\n\r\n        try {\r\n            Process p = Runtime.getRuntime().exec(comm);\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n            out = reader.lines().collect(Collectors.toList());\r\n\r\n            int exitVal = p.waitFor();\r\n            System.out.println(""Exited with error code "" + exitVal);\r\n            \r\n            p.destroy();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<String> output = runWindowsCommandAsRuntime(""WMIC OS Get Caption,Version"");\r\n        if (output != null) {\r\n            output.forEach(System.out::println);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonProcessingException;\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Iterator;\r\nimport java.util.stream.Stream;\r\n\r\npublic class EmployeeStreamWriter {\r\n\r\n    private final EmployeeRepository empRepo;\r\n    private final EntityManager entityManager;\r\n\r\n    public EmployeeStreamWriter(EmployeeRepository empRepo, EntityManager entityManager) {\r\n        this.empRepo = empRepo;\r\n        this.entityManager = entityManager;\r\n    }\r\n\r\n    public void writeEmployees(HttpServletResponse response) {\r\n        try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n            response.setHeader(""Content-Type"", ""application/json"");\r\n            PrintWriter respWriter = response.getWriter();\r\n            Iterator<Employee> iterator = dataStream.iterator();\r\n\r\n            respWriter.write(""["");\r\n            if (iterator.hasNext()) {\r\n                Employee first = iterator.next();\r\n                respWriter.write(jsonSerialize(first));\r\n                entityManager.detach(first);\r\n            }\r\n            while (iterator.hasNext()) {\r\n                Employee data = iterator.next();\r\n                respWriter.write("","");\r\n                respWriter.write(jsonSerialize(data));\r\n                entityManager.detach(data);\r\n            }\r\n            respWriter.write(""]"");\r\n            respWriter.flush();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private String jsonSerialize(Employee employee) throws JsonProcessingException {\r\n        return ""{}""; // placeholder for actual serialization logic\r\n    }\r\n}\r\n""]",0,1
"[""import com.opencsv.CSVParser;\r\nimport com.opencsv.CSVParserBuilder;\r\nimport com.opencsv.CSVReader;\r\nimport com.opencsv.CSVReaderBuilder;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Objects;\r\n\r\npublic class TestMain {\r\n    public static void parseTsv(String filePath) throws Exception {\r\n        CSVParser parser = new CSVParserBuilder().withSeparator('\t').build();\r\n        try (CSVReader reader = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(parser)\r\n                .build()) {\r\n            String[] line;\r\n            while ((line = reader.readNext()) != null) {\r\n                System.out.println(line[0] + "" "" + (line.length > 1 ? line[1] : """"));\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(""path-to-tsv-file"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Component\r\npublic class UtilFactory {\r\n\r\n    @Autowired\r\n    private ApplicationContext context;\r\n\r\n    public Util getUtil(String type) {\r\n        if (""two"".equalsIgnoreCase(type)) {\r\n            return context.getBean(UtilTwo.class);\r\n        }\r\n        return context.getBean(UtilOne.class);\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n\r\n    private volatile Util util;\r\n\r\n    public void updateUtil(String type) {\r\n        this.util = utilFactory.getUtil(type);\r\n    }\r\n\r\n    public void useUtil() {\r\n        if (util == null) {\r\n            util = utilFactory.getUtil(""one"");\r\n        }\r\n        util.getClient();\r\n    }\r\n}\r\n""]",0,1
"[""public class CircularSearch {\r\n    public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int row = 0, col = n - 1;\r\n\r\n        while (row < n && col >= 0) {\r\n            if (mat[row][col] == num) {\r\n                return true;\r\n            } else if (mat[row][col] > num) {\r\n                col--;\r\n            } else {\r\n                row++;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[][] mat = {\r\n            { 10, 12, 15, 20 },\r\n            { 25, 30, 35, 40 },\r\n            { 50, 55, 60, 65 },\r\n            { 70, 75, 80, 85 }\r\n        };\r\n\r\n        System.out.println(search(mat, 22)); \r\n        System.out.println(search(mat, 15)); \r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.*;\r\n\r\npublic class WordMerge {\r\n\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {            \r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);         \r\n\r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            XWPFParagraph pageBreak = first.createParagraph();\r\n            pageBreak.setPageBreak(true);\r\n\r\n            for (XWPFParagraph p : src1Document.getParagraphs()) {\r\n                XWPFParagraph newPara = first.createParagraph();\r\n                newPara.getCTP().set(p.getCTP().copy());\r\n            }\r\n\r\n            for (XWPFTable tbl : src1Document.getTables()) {\r\n                first.createTable().getCTTbl().set(tbl.getCTTbl().copy());\r\n            }\r\n        }        \r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileOutputStream faos = new FileOutputStream(""/home/victor/result.docx"");\r\n        WordMerge wm = new WordMerge(faos);\r\n\r\n        wm.add(new FileInputStream(""/home/victor/001.docx""));\r\n        wm.add(new FileInputStream(""/home/victor/002.docx""));\r\n\r\n        wm.doMerge();\r\n        wm.close();\r\n    }\r\n}\r\n""]",0,1
"[""import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.CredentialStoreException;\r\nimport org.wildfly.security.credential.store.CredentialStore.ProtectionParameter;\r\nimport org.wildfly.security.credential.store.WildFlyElytronCredentialStoreProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class MaskedCredentialStoreAccess {\r\n    public static void main(String[] args) throws Exception {\r\n        String maskedPasswordStr = ""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123"";\r\n\r\n        MaskedPasswordAlgorithmSpec spec = new MaskedPasswordAlgorithmSpec(""12345678"".toCharArray(), 123);\r\n        Password maskedPassword = ModularCrypt.decode(maskedPasswordStr).createPassword(new WildFlyElytronCredentialStoreProvider(), spec);\r\n        PasswordCredential passwordCredential = new PasswordCredential(maskedPassword);\r\n\r\n        ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(passwordCredential));\r\n\r\n        Provider provider = new WildFlyElytronCredentialStoreProvider();\r\n        Security.addProvider(provider);\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }\r\n}\r\n""]",0,1
"["" class MyCamelRouteBuilder extends RouteBuilder {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n    private static final String JOB_METHOD_NAME = ""xyz"";\r\n\r\n    private final MyJob myJob;\r\n\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        super();\r\n        this.myJob = myJob;\r\n    }\r\n\r\n    @Override\r\n    public void configure() {\r\n        fromF(""direct:%s"", JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n\r\n        fromF(""master:some_name_1/some_name_2:scheduler:%s?delay=%s"", JOB_NAME, 1234)\r\n            .routeId(""JobTimer"")\r\n            .toF(""direct:%s"", JOB_NAME)\r\n            .end();\r\n    }\r\n}\r\n\r\n@Named\r\npublic class MyJob {\r\n    public MyJob() {}\r\n\r\n    public void xyz() {\r\n        System.out.println(""Job executed"");\r\n    }\r\n}\r\n\r\n@Named\r\n@RestController\r\n@RequestMapping\r\n@Validated\r\npublic class MyController {\r\n\r\n    private static final String JOB_NAME = ""abc"";\r\n\r\n    private final ProducerTemplate producerTemplate;\r\n\r\n    @Inject\r\n    public MyController(ProducerTemplate producerTemplate) {\r\n        this.producerTemplate = producerTemplate;\r\n    }\r\n\r\n    @PostMapping(path = ""/my_endpoint"")\r\n    public String run() throws Exception {\r\n        producerTemplate.sendBody(""direct:"" + JOB_NAME, null);\r\n        return ""ok"";\r\n    }\r\n}\r\n""]",0,1
"[""import android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\n\r\npublic class MyFragment extends Fragment {\r\n\r\n    private LinearLayout parentLayout;\r\n    private Button addProduct;\r\n\r\n    @Override\r\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        parentLayout = view.findViewById(R.id.ll_out);\r\n        addProduct = view.findViewById(R.id.btn_prd);\r\n\r\n        addProduct.setOnClickListener(v -> {\r\n            LinearLayout newProductLayout = new LinearLayout(getActivity());\r\n            newProductLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n\r\n            EditText productName = new EditText(getActivity());\r\n            productName.setHint(""Enter Product"");\r\n            productName.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            EditText productQty = new EditText(getActivity());\r\n            productQty.setHint(""Enter Quantity"");\r\n            productQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            EditText productPrice = new EditText(getActivity());\r\n            productPrice.setHint(""Prod Price"");\r\n            productPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n\r\n            ImageView deleteButton = new ImageView(getActivity());\r\n            deleteButton.setImageResource(android.R.drawable.ic_delete);\r\n            deleteButton.setLayoutParams(new LinearLayout.LayoutParams(100, 100));\r\n            deleteButton.setOnClickListener(v1 -> parentLayout.removeView(newProductLayout));\r\n\r\n            newProductLayout.addView(productName);\r\n            newProductLayout.addView(productQty);\r\n            newProductLayout.addView(productPrice);\r\n            newProductLayout.addView(deleteButton);\r\n\r\n            parentLayout.addView(newProductLayout);\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport javax.crypto.Cipher;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JcePEMDecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\npublic class RSAEncryptDecrypt {\r\n\r\n    static {\r\n        Security.addProvider(new BouncyCastleProvider());\r\n    }\r\n\r\n    public static PrivateKey loadEncryptedPrivateKey(String filePath, String password) throws Exception {\r\n        try (PEMParser pemParser = new PEMParser(new FileReader(new File(filePath)))) {\r\n            Object object = pemParser.readObject();\r\n            PEMDecryptorProvider decryptor = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());\r\n            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");\r\n            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n\r\n            if (object instanceof PEMEncryptedKeyPair) {\r\n                PEMKeyPair keyPair = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(keyPair.getPrivateKeyInfo().getEncoded()));\r\n            } else if (object instanceof PEMKeyPair) {\r\n                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(((PEMKeyPair) object).getPrivateKeyInfo().getEncoded()));\r\n            }\r\n            throw new IllegalArgumentException(""Invalid key format"");\r\n        }\r\n    }\r\n\r\n    public static byte[] encrypt(byte[] data, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\r\n        return cipher.doFinal(data);\r\n    }\r\n\r\n    public static byte[] decrypt(byte[] encryptedData, PrivateKey privateKey) throws Exception {\r\n        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");\r\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n        return cipher.doFinal(encryptedData);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            PrivateKey privateKey = loadEncryptedPrivateKey(""private_key.pem"", ""your-passphrase"");\r\n            String message = ""Hello, World!"";\r\n            byte[] encrypted = encrypt(message.getBytes(StandardCharsets.UTF_8), privateKey);\r\n            byte[] decrypted = decrypt(encrypted, privateKey);\r\n            System.out.println(""Decrypted message: "" + new String(decrypted, StandardCharsets.UTF_8));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.UnavailableException;\r\nimport javax.servlet.http.HttpServlet;\r\n\r\npublic class MainServlet extends HttpServlet {\r\n\r\n    @Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            log(""Backend connection failed: "" + e.getMessage());\r\n            throw new UnavailableException(""Cannot connect to Backend Server"");\r\n        }\r\n    }\r\n\r\n    private void connectToBackendServer() throws Exception {\r\n        throw new NullPointerException(""Simulating backend failure"");\r\n    }\r\n}\r\n""]",0,1
"[""public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(""Stack Overflow occurred: "" + e);\r\n            f();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EmojiSupportApp extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        String emojiText = ""?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??"";\r\n        TextArea textArea = new TextArea(emojiText);\r\n\r\n        String fontUrl = getClass().getResource(""NotoColorEmoji-Regular.ttf"").toExternalForm();\r\n        Font font = Font.loadFont(fontUrl, 14);\r\n        if (font != null) {\r\n            textArea.setFont(font);\r\n        }\r\n\r\n        Scene scene = new Scene(textArea, 400, 300);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Emoji TextArea"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.Configuration;\r\nimport android.content.res.Resources;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context context;\r\n    private final List<PyqModel> pyqList;\r\n    private final int defaultBgColor;\r\n    private final int selectedBgColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context context, List<PyqModel> pyqList) {\r\n        if (context == null) {\r\n            throw new IllegalArgumentException(""Context cannot be null"");\r\n        }\r\n        this.context = context;\r\n        this.pyqList = pyqList;\r\n        this.selectedPositions = new HashSet<>();\r\n\r\n        Resources res = context.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBgColor = ContextCompat.getColor(context, R.color.defaultBackgroundDark);\r\n            selectedBgColor = ContextCompat.getColor(context, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBgColor = ContextCompat.getColor(context, R.color.defaultBackgroundLight);\r\n            selectedBgColor = ContextCompat.getColor(context, R.color.selectedBackgroundLight);\r\n        }\r\n\r\n        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String pos : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(pos));\r\n        }\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        View view = inflater.inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        final PyqModel item = pyqList.get(position);\r\n\r\n        holder.title.setText(item.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.topics.setText(item.getPyqTopics());\r\n\r\n        int adapterPos = holder.getAdapterPosition();\r\n        if (adapterPos == RecyclerView.NO_POSITION) {\r\n            return;\r\n        }\r\n\r\n        if (selectedPositions.contains(adapterPos)) {\r\n            holder.card.setCardBackgroundColor(selectedBgColor);\r\n        } else {\r\n            holder.card.setCardBackgroundColor(defaultBgColor);\r\n        }\r\n\r\n        holder.card.setOnClickListener(v -> {\r\n            if (selectedPositions.contains(adapterPos)) {\r\n                selectedPositions.remove(adapterPos);\r\n            } else {\r\n                selectedPositions.add(adapterPos);\r\n            }\r\n\r\n            SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) {\r\n                selectedItems.add(String.valueOf(pos));\r\n            }\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n            editor.apply();\r\n\r\n            notifyItemChanged(adapterPos);\r\n\r\n            Intent intent = new Intent(holder.card.getContext(), ViewPdf.class);\r\n            intent.putExtra(""pdfName"", item.getPdfName());\r\n            intent.putExtra(""pdfUrl"", item.getPdfUri());\r\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.card.getContext().startActivity(intent);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView card;\r\n        TextView title, serialNumber, topics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            card = itemView.findViewById(R.id.pyqCardView);\r\n            title = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            topics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport com.inventory.server.domain.Item;\r\nimport com.inventory.server.domain.Categorie;\r\nimport com.inventory.server.dto.CreateItemData;\r\nimport com.inventory.server.exception.ItemAlreadyCreatedException;\r\nimport com.inventory.server.repository.ItemRepository;\r\nimport com.inventory.server.service.ItemService;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.*;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.web.util.UriComponentsBuilder;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.Optional;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass ItemServiceTest {\r\n\r\n    @InjectMocks\r\n    ItemService itemService;\r\n\r\n    @Mock\r\n    ItemRepository itemRepository;\r\n\r\n    @Mock\r\n    CategorieRepository categorieRepository;\r\n\r\n    @Mock\r\n    UriComponentsBuilder uriBuilder;\r\n\r\n    MockItem input;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        input = new MockItem();\r\n        MockitoAnnotations.openMocks(this);\r\n    }\r\n\r\n    @Test\r\n    void testItemAlreadyExists() {\r\n        Item item = input.mockEntity();\r\n        CreateItemData data = input.mockDTO();\r\n\r\n        when(itemRepository.findByItemNameIgnoreCase(anyString())).thenReturn(Optional.ofNullable(item));\r\n\r\n        Exception exception = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n            itemService.createItem(data, uriBuilder);\r\n        });\r\n\r\n        assertEquals(""There is an item created with this name"", exception.getMessage());\r\n\r\n        verify(itemRepository, times(1)).findByItemNameIgnoreCase(any());\r\n    }\r\n}\r\n""]",0,1
"[""import android.text.Spannable;\r\nimport android.text.SpannableString;\r\nimport android.text.style.AlignmentSpan;\r\nimport android.widget.TextView;\r\nimport android.text.Layout;\r\n\r\npublic class TextAlignUtil {\r\n    public static void alignText(TextView textView) {\r\n        String leftText = ""Left"";\r\n        String rightText = ""Right"";\r\n        String space = ""    "";\r\n        \r\n        SpannableString finalString = new SpannableString(leftText + space + rightText);\r\n        finalString.setSpan(new AlignmentSpan.Standard(Layout.Alignment.ALIGN_OPPOSITE), \r\n                leftText.length(), leftText.length() + rightText.length(), \r\n                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n        \r\n        textView.setText(finalString);\r\n    }\r\n}\r\n""]",0,1
"[""package org.apache.misc.alg.dag;\r\n\r\nimport java.util.*;\r\n\r\npublic class DinicCalculator<T> implements MaxAntichainCalculator<T> {\r\n\r\n    private final Map<String, Map<String, Integer>> network;\r\n    private List<String> nodes;\r\n    private Map<String, Integer> nodeIndexMap;\r\n    private int[] level;\r\n\r\n    public DinicCalculator() {\r\n        network = new HashMap<>();\r\n        nodes = new ArrayList<>();\r\n        nodes.add(""src"");\r\n        nodes.add(""sink"");\r\n        updateNodeIndices();\r\n    }\r\n\r\n    private void updateNodeIndices() {\r\n        nodeIndexMap = new HashMap<>();\r\n        for (int i = 0; i < nodes.size(); i++) {\r\n            nodeIndexMap.put(nodes.get(i), i);\r\n        }\r\n    }\r\n\r\n    private void bfs(String source) {\r\n        level = new int[nodes.size()];\r\n        Arrays.fill(level, -1);\r\n        level[nodeIndexMap.get(source)] = 0;\r\n\r\n        Queue<String> queue = new LinkedList<>();\r\n        queue.offer(source);\r\n\r\n        while (!queue.isEmpty()) {\r\n            String u = queue.poll();\r\n            for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n                String v = entry.getKey();\r\n                int capacity = entry.getValue();\r\n                if (capacity > 0 && level[nodeIndexMap.get(v)] == -1) {\r\n                    level[nodeIndexMap.get(v)] = level[nodeIndexMap.get(u)] + 1;\r\n                    queue.offer(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private int dfs(String u, int flow, String sink) {\r\n        if (u.equals(sink)) {\r\n            return flow;\r\n        }\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            if (capacity > 0 && level[nodeIndexMap.get(u)] < level[nodeIndexMap.get(v)]) {\r\n                int sent = dfs(v, Math.min(flow, capacity), sink);\r\n                if (sent > 0) {\r\n                    network.get(u).put(v, capacity - sent);\r\n                    network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                    return sent;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private void addEdge(String from, String to, int capacity) {\r\n        network.computeIfAbsent(from, k -> new HashMap<>()).put(to, capacity);\r\n        network.computeIfAbsent(to, k -> new HashMap<>()).put(from, 0);\r\n        if (!nodes.contains(from)) nodes.add(from);\r\n        if (!nodes.contains(to)) nodes.add(to);\r\n        updateNodeIndices();\r\n    }\r\n\r\n    private Set<String> reach(Map<T, Set<T>> graph, T t, Set<String> visited) {\r\n        Queue<T> queue = new LinkedList<>();\r\n        queue.add(t);\r\n        while (!queue.isEmpty()) {\r\n            T current = queue.poll();\r\n            String currentKey = ""A"" + current.toString();\r\n            visited.add(currentKey);\r\n            for (T neighbor : graph.get(current)) {\r\n                String neighborKey = ""B"" + neighbor.toString();\r\n                if (!visited.contains(neighborKey)) {\r\n                    queue.add(neighbor);\r\n                    visited.add(neighborKey);\r\n                }\r\n            }\r\n        }\r\n        return visited;\r\n    }\r\n\r\n    public int calculator(Map<T, Set<T>> graph) {\r\n        for (T t : graph.keySet()) {\r\n            addEdge(""src"", ""A"" + t.toString(), 1);\r\n            addEdge(""B"" + t.toString(), ""sink"", 1);\r\n            Set<String> visitedSubset = new HashSet<>();\r\n            for (String u : reach(graph, t, visitedSubset)) {\r\n                addEdge(""A"" + t.toString(), u, 1);\r\n            }\r\n        }\r\n        int maxFlow = 0;\r\n        while (true) {\r\n            bfs(""src"");\r\n            if (level[nodeIndexMap.get(""sink"")] == -1) {\r\n                break;\r\n            }\r\n            int flow;\r\n            while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"")) > 0) {\r\n                maxFlow += flow;\r\n            }\r\n        }\r\n        return graph.size() - maxFlow;\r\n    }\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null) {\r\n            vibrator.vibrate(500);\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        activityIntent.putExtra(""stop_music"", true);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder: "" + event + ""\n"" + ""Comments: "" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(pendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null) {\r\n            vibrator.vibrate(500);\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        activityIntent.putExtra(""stop_music"", true);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder: "" + event + ""\n"" + ""Comments: "" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(pendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null) {\r\n            vibrator.vibrate(500);\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        activityIntent.putExtra(""stop_music"", true);\r\n\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        String text = ""Reminder: "" + event + ""\n"" + ""Comments: "" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(pendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        if (ringtone != null) {\r\n            ringtone.play();\r\n        }\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        if (getIntent().getBooleanExtra(""stop_music"", false)) {\r\n            AlarmReceiver.stopRingtone();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.PerspectiveCamera;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.PhongMaterial;\r\nimport javafx.scene.shape.Box;\r\nimport javafx.scene.shape.CullFace;\r\nimport javafx.scene.shape.DrawMode;\r\nimport javafx.stage.Stage;\r\n\r\npublic class OutlineEffect extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseColor(Color.DARKGRAY);\r\n        box.setMaterial(material);\r\n\r\n        Box outline = new Box(102, 102, 102);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setCullFace(CullFace.NONE);\r\n        outline.setVisible(false);\r\n\r\n        Group group = new Group(outline, box);\r\n\r\n        box.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {\r\n            outline.setVisible(!outline.isVisible());\r\n            event.consume();\r\n        });\r\n\r\n        Scene scene = new Scene(group, 600, 400, true);\r\n        scene.setFill(Color.LIGHTGRAY);\r\n        scene.setCamera(new PerspectiveCamera());\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""3D Outline Effect"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass Board {\r\n    public String inputTake() {\r\n        Scanner scan = new Scanner(System.in);\r\n        String guess;\r\n\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n\r\n        if (!checkInput(guess)) {\r\n            return inputTake();\r\n        }\r\n\r\n        return guess;\r\n    }\r\n\r\n    public boolean checkInput(String input) {\r\n        boolean isGood = input.length() == 5 && input.matches(""[a-zA-Z]+"");\r\n\r\n        if (!isGood) {\r\n            System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        }\r\n\r\n        return isGood;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(""Your guess: "" + guess);\r\n    }\r\n}\r\n""]",0,1
"[""package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Lazy;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    @Value(""${configuration}"")\r\n    private String configuration;\r\n\r\n    private final LanguageService languageService;\r\n\r\n    @Autowired\r\n    public LanguageController(@Lazy @Qualifier(""french"") LanguageService frenchService,\r\n                              @Lazy @Qualifier(""english"") LanguageService englishService) {\r\n        this.languageService = configuration.equals(""french"") ? frenchService : englishService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n""]",0,1
"[""(componentModel = ""spring"")\r\npublic interface AgentInfoMapper {\r\n\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CsvReader {\r\n    public static void main(String[] args) throws IOException {\r\n        FileReader filObj = null;\r\n        try {\r\n            filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        BufferedReader br = new BufferedReader(filObj);\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n\r\n        String line = null;\r\n        int ext = 0;\r\n        while ((line = br.readLine()) != null) {\r\n            if (ext == 0) {\r\n                headers = Arrays.asList(line.split("",""));\r\n            } else {\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                int index = 0;\r\n                for (String each : line.split("","")) {\r\n                    myRecord.put(headers.get(index), each);\r\n                    index++;\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            ext++;\r\n        }\r\n\r\n        for (HashMap<String, String> record : myTable) {\r\n            System.out.println(record);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.stereotype.Component;\r\nimport org.springframework.web.server.ServerWebExchange;\r\nimport org.springframework.web.server.WebFilter;\r\nimport org.springframework.web.server.WebFilterChain;\r\nimport reactor.core.publisher.Mono;\r\n\r\n@Component\r\npublic class TMPFilter implements WebFilter {\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n        \r\n        return chain.filter(exchange)\r\n                .doOnTerminate(() -> {\r\n                    long delta = System.nanoTime() - startTime;\r\n                    exchange.getResponse().getHeaders()\r\n                            .set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n""]",0,1
"[""from typing import Literal, Union\r\nfrom pydantic import BaseModel, Field, ValidationError, Extra\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = Extra.forbid \r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n\r\ntry:\r\n    print(Model(**{'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit', 'n': 1}))\r\nexcept ValidationError as e:\r\n    print(e)\r\n""]",0,1
"[""from sqlalchemy import Integer, String, create_engine\r\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker, mapped_column\r\n\r\nengine = create_engine(""sqlite:///:memory:"", echo=True)\r\nSession = sessionmaker(bind=engine)\r\n\r\nclass Base(DeclarativeBase):\r\n    pass\r\n\r\nclass User(Base):\r\n    __tablename__ = 'users'\r\n    \r\n    id = mapped_column(Integer, primary_key=True, autoincrement=True)\r\n    name = mapped_column(String(50))\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nsession = Session()\r\nnew_user = User(id=1, name=""Alice"")\r\nsession.add(new_user)\r\nsession.commit()\r\n\r\nuser = session.query(User).filter_by(name=""Alice"").first()\r\nprint(user.id, user.name)\r\n""]",0,1
"[""import openai\r\n\r\nclient = openai.OpenAI(api_key=""your-api-key"")\r\n\r\nfile = client.files.create(\r\n    file=open(""example.pdf"", ""rb""),\r\n    purpose=""assistants""\r\n)\r\n\r\nassistant = client.beta.assistants.create(\r\n    instructions=""You are a research assistant. Analyze the given document and extract key insights."",\r\n    model=""gpt-4-turbo"",\r\n    tools=[{""type"": ""retrieval""}],\r\n    file_ids=[file.id]\r\n)\r\n\r\nquery = ""Summarize the main points of the document.""\r\n\r\nthread = client.beta.threads.create()\r\n\r\nmessage = client.beta.threads.messages.create(\r\n    thread_id=thread.id,\r\n    role=""user"",\r\n    content=query\r\n)\r\n\r\nrun = client.beta.threads.runs.create(\r\n    thread_id=thread.id,\r\n    assistant_id=assistant.id\r\n)\r\n\r\nresponse = client.beta.threads.messages.list(thread_id=thread.id)\r\n\r\nprint(response.data[0].content)\r\n""]",0,1
"[""import cv2 as cv\r\nimport numpy as np\r\n\r\nimage = cv.imread(""boston_cooking_a.jpg"", cv.IMREAD_GRAYSCALE)\r\nif image is None:\r\n    print(""Error loading image"")\r\n    exit()\r\n\r\nimage = cv.GaussianBlur(image, (5, 5), 0)\r\nthresh = cv.adaptiveThreshold(image, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY_INV, 51, 9)\r\n\r\nkernel = np.ones((2, 2), np.uint8)\r\nmorph = cv.morphologyEx(thresh, cv.MORPH_CLOSE, kernel, iterations=2)\r\n\r\nedges = cv.Canny(morph, 50, 150)\r\n\r\nlines = cv.HoughLinesP(edges, 1, np.pi / 180, 100, minLineLength=30, maxLineGap=5)\r\nresult = cv.cvtColor(image, cv.COLOR_GRAY2BGR)\r\n\r\nif lines is not None:\r\n    for line in lines:\r\n        x1, y1, x2, y2 = line[0]\r\n        cv.line(result, (x1, y1), (x2, y2), (0, 255, 0), 2)\r\n\r\ncv.imwrite(""baseline_result.jpg"", result)\r\ncv.imshow(""Result"", result)\r\ncv.waitKey(0)\r\ncv.destroyAllWindows()\r\n""]",0,1
"[""from pydantic import BaseModel, validator\r\n\r\nclass Window(BaseModel):\r\n    size: tuple[int, int]\r\n\r\n    @validator(""size"", pre=True)\r\n    def parse_size(cls, value):\r\n        if isinstance(value, str):\r\n            parts = value.split(""x"")\r\n            if len(parts) != 2:\r\n                raise ValueError(""Invalid size format"")\r\n            return int(parts[0]), int(parts[1])\r\n        return value\r\n\r\nfields = {'size': '1920x1080'}\r\nwindow = Window(**fields)\r\nprint(window)\r\n""]",0,1
"[""def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in seen:\r\n            continue\r\n        seen.add(log_hash)\r\n        yield log\r\n\r\nlogs = [\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'},\r\n    {'id': '12345', 'error': None, 'fruit': 'apple'},\r\n    {'id': '1234', 'error': None, 'fruit': 'orange'}\r\n]\r\n\r\nunique_logs = list(deduplicate(logs))\r\nprint(unique_logs)\r\n""]",0,1
"[""import time\r\nfrom fastapi import FastAPI, Request\r\nfrom starlette.responses import Response\r\n\r\napp = FastAPI()\r\n\r\n@app.middleware(""http"")\r\nasync def add_process_time_header(request: Request, call_next):\r\n    start_time = time.time()\r\n    \r\n    response = await call_next(request)\r\n    body = b""""\r\n    async for chunk in response.body_iterator:\r\n        body += chunk\r\n    \r\n    response = Response(content=body, status_code=response.status_code, headers=dict(response.headers))\r\n    \r\n    process_time = time.time() - start_time\r\n    response.headers[""X-Process-Time""] = str(round(process_time, 4))\r\n    return response\r\n""]",0,1
"[""import numpy as np\r\n\r\nrng = lambda: np.random.randint(2, 20) // 2\r\n\r\nclass NRNG:\r\n    def __init__(self):\r\n        self.numbers = iter(np.arange(1, 10.5, 0.5))\r\n\r\n    def __call__(self):\r\n        try:\r\n            return next(self.numbers)\r\n        except StopIteration:\r\n            self.numbers = iter(np.arange(1, 10.5, 0.5))\r\n            return next(self.numbers)\r\n\r\nnrng = NRNG()\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n""]",0,1
"[""import requests\r\n\r\nAPP_KEY = ""your_app_key""\r\nAPP_SECRET = ""your_app_secret""\r\nREFRESH_TOKEN = ""your_refresh_token""\r\n\r\ndef get_access_token():\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    data = {\r\n        ""grant_type"": ""refresh_token"",\r\n        ""refresh_token"": REFRESH_TOKEN\r\n    }\r\n    headers = {\r\n        ""Authorization"": f""Basic {APP_KEY}:{APP_SECRET}"",\r\n        ""Content-Type"": ""application/x-www-form-urlencoded""\r\n    }\r\n    \r\n    response = requests.post(url, data=data, headers=headers)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json().get(""access_token"")\r\n    else:\r\n        print(""Error:"", response.status_code, response.text)\r\n        return None\r\n\r\ntoken = get_access_token()\r\nprint(""Access Token:"", token)\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""console"": ""integratedTerminal"",\r\n            ""justMyCode"": false,\r\n            ""env"": {\r\n                ""PYTHONUNBUFFERED"": ""1""\r\n            },\r\n            ""outputCapture"": ""std""\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Callable, Dict, Any, Type\r\n\r\ndef mydecorator(cls: Type[Any]) -> Type[Any]:\r\n    def save(self) -> None:\r\n        print(f""Saving {self}"")\r\n\r\n    setattr(cls, ""save"", save)\r\n    setattr(cls, ""my_fields_dict"", {""a"": str})\r\n\r\n    cls.__annotations__[""save""] = Callable[[], None]\r\n    cls.__annotations__[""my_fields_dict""] = Dict[str, Any]\r\n\r\n    return cls\r\n\r\n@mydecorator\r\n@dataclass\r\nclass A:\r\n    a: str = """"\r\n\r\na = A()\r\na.save()\r\nprint(a.my_fields_dict)\r\n""]",0,1
"[""import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],  \r\n    [1, 0, 0, 1],  \r\n    [1, 1, 0, 0]   \r\n])\r\nb_eq = np.array([2, 1, 1])\r\nbounds = [(0, 1)] * 4\r\n\r\ndef check_fixed_values(num_vars):\r\n    guaranteed_zeros = set()\r\n    guaranteed_ones = set()\r\n\r\n    for i in range(num_vars):\r\n        c = np.zeros(num_vars)\r\n        c[i] = 1\r\n        \r\n        res_min = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n        res_max = linprog(-c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n        if res_min.success and res_max.success:\r\n            if res_min.x[i] >= 0.999:\r\n                guaranteed_ones.add(i)\r\n            elif res_max.x[i] <= 0.001:\r\n                guaranteed_zeros.add(i)\r\n\r\n    return guaranteed_zeros, guaranteed_ones\r\n\r\nzero_vars, one_vars = check_fixed_values(4)\r\nprint(""Guaranteed zero:"", zero_vars)\r\nprint(""Guaranteed one:"", one_vars)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\nfig = px.bar(df.to_dicts(), x=""names"", y=""random"")\r\nfig.show()\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom omegaconf import OmegaConf\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\n\r\nclass PydanticConfig(BaseModel):\r\n    value: int = Field(..., ge=0, le=10)\r\n\r\n\r\n@dataclass\r\nclass HydraConfig:\r\n    pydantic_cfg: PydanticConfig\r\n\r\n\r\ncfg_dict = {""pydantic_cfg"": {""value"": 5}}\r\n\r\ntry:\r\n    hydra_cfg = OmegaConf.structured(HydraConfig)\r\n    cfg = OmegaConf.merge(hydra_cfg, cfg_dict)\r\n    validated = PydanticConfig(**cfg.pydantic_cfg)\r\n    print(validated)\r\nexcept ValidationError as e:\r\n    print(""Validation failed:"", e)\r\n""]",0,1
"[""class Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return ""Squarish:"" + h.split(':')[1];\r\n    }\r\n}\r\n\r\nconst rect = new Rectangle(6, 4);\r\nrect.shoutArea(); //=> I AM A RECTANGLE AND MY AREA IS 24\r\n\r\nconst squa = new Square(5);\r\nsqua.shoutArea(); //=> I AM A SQUARE AND MY AREA IS 25\r\n\r\nconsole.log(squa.squaHello()); //=> Squarish: hello\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\nid = ['a','b','c','a','b','e','f','a','b','k']\r\nvalue = [12,14,3,13,16,7,4,6,10,18]\r\n\r\ndf = pd.DataFrame({'id':id, 'value':value})\r\n\r\ndf['duped'] = np.where(df['id'].duplicated(keep='last'), 0, 1)\r\ndf['value_duped'] = df['value'] * df['duped']\r\n\r\ndf['cumsum_of_value'] = df['value_duped'].cumsum()\r\ndf['desired_output'] = df.groupby('id')['value'].transform(lambda x: x.cumsum().where(x.notna(), 0))\r\n\r\nprint(df)\r\n""]",0,1
"[""pip uninstall elasticsearch\r\npip install elasticsearch==7.13.4\r\n\r\nimport elasticsearch.helpers\r\nfrom elasticsearch import Elasticsearch\r\n\r\nes_host = '<your_host>'\r\nes_port = '<your_port>'\r\nes_username = '<your_username>'\r\nes_password = '<your_password>'\r\nes_index = '<your_index>'\r\n\r\nes = Elasticsearch(\r\n    [{'host': str(es_host), 'port': str(es_port)}],\r\n    http_auth=(str(es_username), str(es_password)),\r\n    use_ssl=False, \r\n    verify_certs=False\r\n)\r\n\r\nes.indices.refresh(index=es_index)\r\n""]",0,1
"[""import enum\r\nfrom typing import Annotated, Literal\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends, HTTPException\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass MyEnum(enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower() if isinstance(value, str) else value\r\n        if value == ""ab"":\r\n            return cls.ab\r\n        elif value == ""cd"":\r\n            return cls.cd\r\n        raise ValueError(f""{value} is not a valid enum value"")\r\n\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""def __init__(self, model, attention_layer_name='desired_name_module', discard_ratio=0.9):\r\n    self.model = model\r\n    self.discard_ratio = discard_ratio\r\n    for name, module in self.model.named_modules():\r\n        if attention_layer_name in name:\r\n            module.register_forward_hook(self.get_attention)\r\n            module.register_backward_hook(self.get_attention_gradient)\r\n\r\n    self.attentions = []\r\n    self.attention_gradients = []\r\n\r\ndef get_attention(self, module, input, output):\r\n    self.attentions.append(output.cpu())\r\n\r\ndef get_attention_gradient(self, module, grad_input, grad_output):\r\n    self.attention_gradients.append(grad_input[0].cpu())\r\n\r\ndef __call__(self, input_tensor, category_index):\r\n    self.model.zero_grad()\r\n    output = self.model(input_tensor)\r\n    loss = ...\r\n    loss.backward()\r\n\r\n""]",0,1
"[""{\r\n  ""version"": ""0.2.0"",\r\n  ""configurations"": [\r\n    {\r\n      ""name"": ""Python: current file"",\r\n      ""type"": ""python"",\r\n      ""request"": ""launch"",\r\n      ""program"": ""${file}"",\r\n      ""args"": [""${input:directory}""],\r\n      ""cwd"": ""${workspaceFolder}/data"",\r\n      ""inputs"": [\r\n        {\r\n          ""id"": ""directory"",\r\n          ""type"": ""promptString"",\r\n          ""description"": ""Enter the data directory name"",\r\n          ""default"": ""example_directory""\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata = {\r\n    'Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ntp_columns = df.filter(regex='TP').values.flatten()\r\nvr_columns = df.filter(regex='VReal').values.flatten()\r\ntv_columns = df.filter(regex='TiV').values.flatten()\r\n\r\nresult = pd.DataFrame({\r\n    'ID': [1, 2, 3],\r\n    'Price': tp_columns,\r\n    'Net': vr_columns,\r\n    'Range': tv_columns\r\n})\r\n\r\nprint(result)\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""A"": [""foo"", ""ham"", ""spam"", ""egg""],\r\n        ""L"": [""A54"", ""A12"", ""B84"", ""C12""],\r\n        ""G"": [""X34"", ""C84"", ""G96"", ""L6""],\r\n    }\r\n)\r\n\r\ndf = df.with_columns(\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""L""))\r\n    .alias(""L""),\r\n    pl.when((pl.col(""A"") == ""foo"") | (pl.col(""A"") == ""spam""))\r\n    .then(pl.lit(""XX""))\r\n    .otherwise(pl.col(""G""))\r\n    .alias(""G"")\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""import numpy as np\r\nfrom time import time\r\n\r\ndef numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {}\r\n    for i in range(num_arrays):  \r\n        arrays[i] = np.random.rand(array_size)\r\n\r\n    if do_cache:  \r\n        cache = {}\r\n\r\n    for _ in range(num_iter):  \r\n        i, j = np.random.randint(num_arrays, size=2)\r\n\r\n        if do_cache and (i, j) in cache:\r\n            a = cache[(i, j)]  \r\n        else:\r\n            a = arrays[i] + arrays[j]\r\n            if do_cache:\r\n                cache[(i, j)] = a\r\n\r\n%timeit numpy_comparison(do_cache=False, array_size=10000, num_arrays=100, num_iter=1000)\r\n%timeit numpy_comparison(do_cache=True, array_size=10000, num_arrays=100, num_iter=1000)\r\n""]",0,1
"[""import asyncio\r\nimport time\r\nimport discord\r\nfrom discord.ext import commands\r\n\r\nclass MyCog(commands.Cog):\r\n    def __init__(self, bot):\r\n        self.bot = bot\r\n\r\n    @commands.Cog.listener(""on_message"")\r\n    async def on_message(self, message):\r\n        start = time.time()\r\n\r\n        if message.author.bot:\r\n            return\r\n\r\n        if message.type != discord.MessageType.default:\r\n            return\r\n\r\n        print(f""2 if checks done - {time.time() - start}"")\r\n\r\n        if isinstance(message.channel, discord.channel.DMChannel):\r\n            return await message.reply(f'Hey {message.author.name}!\nLeider bin ich der falsche Ansprechpartner, falls du Hilfe suchst.. <:pepe_hands:705896495601287320>\nBetrete den https://discord.gg/deutschland Bl4cklist-Discord und sende unserem Support-Bot <@671421220566204446> (`Bl4cklistÃÂÃÂ°ÃÂÃÂ¸ÃÂ¢ÃÂÃÂÃÂÃÂ¥Support#7717`) eine Private-Nachricht, damit sich unser Support-Team um dein Problem so schnell es geht kÃÂ¼mmern kann. <:pepe_love:759741232443949107>')\r\n\r\n        prefix_now = await get_prefix(message)\r\n        if message.content.startswith(str(prefix_now)):\r\n            try:\r\n                await message.reply(""ÃÂ» <a:alarm:769215249261789185> - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen."")\r\n            except discord.Forbidden:\r\n                pass\r\n            return\r\n\r\n        if self.bot.user in message.mentions:\r\n\r\n            response = choice([\r\n                ""Mit mir kann man die coolsten Gewinnspiele starten! <a:gift:843914342835421185>"",\r\n                'Wird Zeit jemanden den Tag zu versÃÂ¼ÃÂen! <:smile:774755282618286101>',\r\n                ""Wer nicht auf diesem Server ist, hat die Kontrolle ÃÂ¼ber sein Leben verloren! <a:lach_blue2:803693710490861608>"",\r\n                ""Wann startet endlich ein neues Gewinnspiel? <:whut:848347703217487912>"",\r\n                ""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lÃÂ¼gt! <:wyldekatze:842157727169773608>""\r\n            ])\r\n\r\n            try:\r\n                await message.reply(f""{response} (Mein PrÃÂ¤fix: `/`)"", mention_author=False)\r\n            except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n                pass\r\n            return\r\n\r\n        print(f""5 if checks done - {time.time() - start}"")\r\n\r\n        count = 1\r\n        mydb = await getConnection()\r\n        mycursor = await mydb.cursor()\r\n        await mycursor.execute(""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s"", (message.author.guild.id,))\r\n        in_database = await mycursor.fetchone()\r\n        if in_database:\r\n            if in_database[0] is not None:\r\n                role_list = in_database[0].split("" "")\r\n                for roleid in role_list:\r\n                    try:\r\n                        int(roleid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    role = message.author.guild.get_role(int(roleid))\r\n                    if role is None:\r\n                        continue\r\n\r\n                    if role in message.author.roles:\r\n                        await mycursor.close()\r\n                        mydb.close()\r\n                        return\r\n\r\n            if in_database[1] is not None:\r\n                role_list = in_database[1].split("" "")\r\n                for roleid in role_list:\r\n                    try:\r\n                        int(roleid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    role = message.author.guild.get_role(int(roleid))\r\n                    if role is None:\r\n                        continue\r\n\r\n                    if role in message.author.roles:\r\n                        count += 1\r\n\r\n        await mycursor.execute(""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s"", (message.author.guild.id,))\r\n        in_database1 = await mycursor.fetchone()\r\n        if in_database1:\r\n            if in_database1[0] is not None:\r\n                channel_list = in_database1[0].split("" "")\r\n                for channelid in channel_list:\r\n\r\n                    try:\r\n                        int(channelid)\r\n                    except ValueError:\r\n                        continue\r\n\r\n                    if int(message.channel.id) == int(channelid):\r\n                        await mycursor.close()\r\n                        mydb.close()\r\n                        return\r\n\r\n        print(f""mysql checks done - {time.time() - start}"")\r\n\r\n        await mycursor.execute(""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s"",\r\n                               (message.author.guild.id, message.author.id))\r\n        in_database2 = await mycursor.fetchone()\r\n        if in_database2:\r\n            await mycursor.execute(\r\n                ""UPDATE guild_message_count SET user_id = %s, message_count = message_count + %s WHERE guild_id = %s AND user_id = %s"",\r\n                (message.author.id, count, message.author.guild.id, message.author.id))\r\n        else:\r\n            await mycursor.execute(\r\n                ""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)"",\r\n                (message.author.id, count, message.author.guild.id))\r\n\r\n        await mydb.commit()\r\n        await mycursor.close()\r\n        mydb.close()\r\n\r\n        print(f""task done - {time.time() - start}"")\r\n\r\n\r\nasync def main():\r\n    bot = commands.Bot(command_prefix=""!"")\r\n    bot.add_cog(MyCog(bot))\r\n\r\n    await bot.start('your_token')\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n""]",0,1
"[""import os\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport genai\r\n\r\nmodel = genai.GenerativeModel('gemini-pro-vision')\r\n\r\nimage_dir = ""path_to_images""\r\nimages_to_process = [os.path.join(image_dir, image) for image in os.listdir(image_dir)][:107]\r\n\r\nprompt = """"""Carefully scan these images: if it has text, extract all the text and return it. If the image does not have text return '<000>'.""""""\r\n\r\nbatch_size = 60\r\nbatched_images = [images_to_process[i: i + batch_size] for i in range(0, len(images_to_process), batch_size)]\r\n\r\nfor batch in tqdm(batched_images):\r\n    inputs = [[prompt, Image.open(img)] for img in batch]\r\n    outputs = model.generate_content(inputs)\r\n    \r\n    for output in outputs:\r\n        print(output.text)\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef ijIndicesToSourceArray(i, j, rows, cols):\r\n    return (rows - j - 1, cols - i - 1)\r\n\r\narr = np.array([[ 1,  2,  4],\r\n                [ 3,  5,  7],\r\n                [ 6,  8, 10],\r\n                [ 9, 11, 13],\r\n                [12, 14, 15]])\r\n\r\nrows, cols = arr.shape\r\nnew_arr = np.zeros((rows, cols), dtype=arr.dtype)\r\n\r\nfor i in range(rows):\r\n    for j in range(cols):\r\n        ni, nj = ijIndicesToSourceArray(i, j, rows, cols)\r\n        new_arr[i, j] = arr[ni, nj]\r\n\r\nprint(new_arr)\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom typing import Optional\r\nfrom starlette import status\r\n\r\napp = FastAPI()\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\nsession_store = {}\r\n\r\n@app.get('/', response_class=HTMLResponse, name='homepage')\r\nasync def get_main_data(request: Request, session_id: Optional[str] = None):\r\n    data = session_store.pop(session_id, {})\r\n    return templates.TemplateResponse('home.html', {'request': request, **data})\r\n\r\n@app.post('/', name='homepage_post')\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    session_id = str(hash(file))\r\n    session_store[session_id] = {'result': ""Processed Data""}\r\n    \r\n    return RedirectResponse(url=f""/?session_id={session_id}"", status_code=status.HTTP_303_SEE_OTHER)\r\n""]",0,1
"[""import matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport numpy as np\r\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\r\n\r\nx = df.x.to_numpy()\r\ny = df.y.to_numpy()\r\npoints = np.column_stack((x, y))\r\n\r\nvor = Voronoi(points)\r\n\r\nplt.figure(figsize=(8, 8))\r\nvoronoi_plot_2d(vor, show_vertices=False, line_width=1.2)\r\n\r\nfor i, region in enumerate(vor.regions):\r\n    if not -1 in region and len(region) > 0:\r\n        polygon = [vor.vertices[j] for j in region]\r\n        plt.fill(*zip(*polygon), color=df.color.iloc[i], alpha=0.5)\r\n\r\nplt.xlim([-40, 0])\r\nplt.ylim([-30, 10])\r\nplt.xlabel('Log pO2(g)')\r\nplt.ylabel('Log pSO2(g)')\r\nplt.show()\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndef glimpse(df):\r\n    print(f""Rows: {df.shape[0]}"")\r\n    print(f""Columns: {df.shape[1]}\n"")\r\n    for col in df.columns:\r\n        dtype = df[col].dtype\r\n        sample_values = "", "".join(map(str, df[col].iloc[:5].values))\r\n        print(f""{col} <{dtype}> {sample_values}"")\r\n\r\ntest = pd.DataFrame({'column_one':['A', 'B', 'C', 'D'],\r\n                     'column_two':[1, 2, 3, 4],\r\n                     'column_three': np.random.randn(4)})\r\n\r\nglimpse(test)\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame({\r\n    'item':         ['CASH', 'CHECK', 'DEBT', 'CHECK', 'CREDIT', 'CASH'],\r\n    'quantity':     [100, -20, 0, 10, 0, 0],\r\n    'value':        [99, 47, None, 90, None, 120],\r\n    'value_other':  [97, 57, None, 91, None, 110],\r\n    'value_other2': [94, 37, None, 93, None, 115],\r\n})\r\n\r\ncols = ['value', 'value_other', 'value_other2']\r\n\r\ndf = df.with_columns(\r\n    pl.when(pl.all_horizontal(pl.col(""value"").is_null(), pl.col(""quantity"") == 0))\r\n    .then(0)\r\n    .otherwise(pl.all_horizontal(*[pl.col(c) for c in cols]))\r\n    .alias(cols)\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""import os\r\nfrom fastapi import APIRouter, Depends, Security, HTTPException\r\n\r\ndef api_key(api_key_header: str = Security(api_key_header_auth)):\r\n    env = os.getenv(""ENV"", ""production"")\r\n    if env == ""localhost"":\r\n        return\r\n    if api_key_header != API_KEY:\r\n        raise HTTPException(\r\n            status_code=401,\r\n            detail=""Invalid API Key"",\r\n        )\r\n\r\nrouter = APIRouter(\r\n    prefix=""/v2/test"",\r\n    tags=[""helloWorld""],\r\n    dependencies=[Depends(api_key) if os.getenv(""ENV"") != ""localhost"" else None],\r\n    responses={404: {""description"": ""Not found""}}\r\n)\r\n""]",0,1
"[""import pydantic\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v):\r\n        return int(v) if isinstance(v, str) else v\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema):\r\n        field_schema[""type""] = ""string""\r\n\r\n    def __str__(self):\r\n        return str(super())\r\n\r\nclass BaseModel(pydantic.BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: lambda v: str(v)}\r\n        alias_generator = lambda x: """".join(word.capitalize() if i else word for i, word in enumerate(x.split(""_"")))\r\n        populate_by_name = True\r\n""]",0,1
"[""import numpy as np\r\nfrom numpy.lib.stride_tricks import sliding_window_view\r\n\r\ndef largest_neighbor_direction(a):\r\n    L = a.shape[0]\r\n    swv = sliding_window_view(a, (3, 3))  \r\n    swv[:, :, 1, 1] = -np.inf\r\n    directions = swv.reshape(L-2, L-2, 9).argmax(axis=2).astype(np.uint8)\r\n    return directions\r\n\r\na = np.random.rand(10000, 10000).astype(np.float32)\r\ndirections = largest_neighbor_direction(a)\r\n""]",0,1
"[""from typing import Optional, List\r\nfrom sqlmodel import Field, Relationship, Session, SQLModel, create_engine, select\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n    \r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"")\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\nsqlite_url = ""sqlite:///database.db""\r\nengine = create_engine(sqlite_url)\r\n\r\nSQLModel.metadata.create_all(engine)\r\n\r\ndef create_nodes():\r\n    with Session(engine) as session:\r\n        root = Node(data=""Root"")\r\n        child1 = Node(data=""Child 1"", parent=root)\r\n        child2 = Node(data=""Child 2"", parent=root)\r\n\r\n        session.add(root)\r\n        session.add(child1)\r\n        session.add(child2)\r\n        session.commit()\r\n\r\ndef get_tree():\r\n    with Session(engine) as session:\r\n        statement = select(Node).where(Node.parent_id.is_(None))\r\n        root = session.exec(statement).first()\r\n        return root\r\n\r\ncreate_nodes()\r\ntree = get_tree()\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Type, TypeVar\r\n\r\nT = TypeVar(""T"")\r\n\r\ndef something_else(klass: Type[T]) -> Type[T]:\r\n    return klass\r\n\r\ndef my_dataclass(klass: Type[T]) -> Type[T]:\r\n    return something_else(dataclass(klass))\r\n\r\n@my_dataclass\r\nclass TestB:\r\n    a: int\r\n    b: str\r\n\r\nTestB(0, """")  # should work\r\n""]",0,1
"[""from fastapi import FastAPI, Depends\r\nfrom pymongo import MongoClient\r\nfrom motor.motor_asyncio import AsyncIOMotorClient\r\nfrom typing import Callable\r\n\r\napp = FastAPI()\r\n\r\ndef build_db(name: str) -> Callable[[], AsyncIOMotorClient]:\r\n    def get_db():\r\n        return AsyncIOMotorClient(""mongodb://localhost:27017"")[name]\r\n    return get_db\r\n\r\n@app.post(""/notification/feed"")\r\nasync def route_receive_notifications(db=Depends(build_db(""someDB""))):\r\n    return {""db_name"": db.name}\r\n\r\ndef mock_db():\r\n    return AsyncIOMotorClient(""mongodb://localhost:27017"")[""testDB""]\r\n\r\napp.dependency_overrides[build_db(""someDB"")] = lambda: mock_db()\r\n""]",0,1
"[""import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n\r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        cmd = f""oiiotool {inname} -o {outname}""\r\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n        process.communicate()\r\n\r\n        if not os.path.exists(outname):\r\n            return {""error"": ""File conversion failed""}\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=converted.jpg'})\r\n""]",0,1
"[""class Point:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def __iter__(self):\r\n        return iter((self.x, self.y))\r\n    \r\n    def __getitem__(self, index):\r\n        return (self.x, self.y)[index]\r\n\r\n    def __repr__(self):\r\n        return f""Point({self.x}, {self.y})""\r\n\r\n    def __eq__(self, other):\r\n        if isinstance(other, tuple):\r\n            return (self.x, self.y) == other\r\n        return False\r\n\r\np = Point(4, 5)\r\nmy_x = p.x\r\nmy_tuple = tuple(p)\r\n""]",0,1
"[""import numpy as np\r\n\r\nx_size = 2000\r\ny_size = 2500\r\nz_size = 400\r\nrng = np.random.default_rng(123)\r\nz_coordinates = np.linspace(0, z_size, y_size) + rng.laplace(0, 1, (x_size, y_size))\r\n\r\ny_coordinates = np.empty((x_size, z_size), dtype=np.uint16)\r\n\r\nz_range = np.arange(z_size)\r\nfor i in range(x_size):\r\n    y_coordinates[i] = np.argmin(np.abs(z_coordinates[i][:, None] - z_range), axis=0)\r\n""]",0,1
"[""from itertools import combinations\r\nfrom functools import lru_cache\r\n\r\n@lru_cache(None)\r\ndef generate_groups(letters, k, n):\r\n    if k == 1:\r\n        return [[tuple(sorted(letters))]]\r\n    \r\n    all_groups = []\r\n    for group in combinations(letters, n):\r\n        remaining = tuple(sorted(set(letters) - set(group)))\r\n        sub_groups = generate_groups(remaining, k - 1, n)\r\n        for sg in sub_groups:\r\n            all_groups.append([tuple(sorted(group))] + sg)\r\n    \r\n    unique_combos = {tuple(sorted(g)) for g in all_groups}\r\n    return [list(g) for g in unique_combos]\r\n\r\nletters = tuple(""ABCDEFGHIJKL"")\r\nk, n = 4, 3\r\ncombinations = generate_groups(letters, k, n)\r\n\r\nprint(combinations[:5])\r\n""]",0,1
"[""import polars as pl\r\n\r\nCOL_VALUE = ""value""\r\n\r\ndf = pl.DataFrame({COL_VALUE: [3, 7, 1, 9, 4]})\r\n\r\nsum_lower = (\r\n    df.with_columns(pl.col(COL_VALUE).rank(""ordinal"").alias(""rank""))\r\n    .sort(""rank"")\r\n    .with_columns(pl.col(COL_VALUE).cumsum().shift(1).fill_null(0).alias(""sum_lower""))\r\n    .sort(COL_VALUE)\r\n    .select(""sum_lower"")\r\n)\r\n\r\nmax_other = (\r\n    df.select(pl.max(COL_VALUE).alias(""max_val""))\r\n    .join(df, how=""cross"")\r\n    .with_columns((pl.col(""max_val"") - (pl.col(""max_val"") == pl.col(COL_VALUE)) * pl.col(COL_VALUE)).alias(""max_other""))\r\n    .select(""max_other"")\r\n)\r\n\r\ndf = df.with_columns(sum_lower, max_other)\r\nprint(df)\r\n""]",0,1
"[""from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification\r\nimport torch\r\n\r\nselected_model = ""distilbert-base-uncased-finetuned-sst-2-english""\r\ntokenizer = AutoTokenizer.from_pretrained(selected_model)\r\nmodel = AutoModelForSequenceClassification.from_pretrained(selected_model, num_labels=2)\r\n\r\nclassifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)\r\n\r\ntexts = [""this is the first sentence"", ""of my data."", ""In fact, thats not true,"", ""but we are going to assume it"", ""is""]\r\n\r\ninputs = tokenizer(texts, padding=True, truncation=True, return_tensors=""pt"")\r\n\r\nwith torch.no_grad():\r\n    outputs = model(**inputs)\r\n    logits = outputs.logits\r\n\r\nprint(logits)\r\n""]",0,1
"[""import geopandas as gpd\r\nimport pooch\r\n\r\nurl = ""https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip""\r\n\r\npath = pooch.retrieve(\r\n    url,\r\n    known_hash=None,\r\n    processor=pooch.Unzip(),\r\n)\r\n\r\nshp_file = [f for f in path if f.endswith("".shp"")][0]\r\n\r\nworld = gpd.read_file(shp_file)\r\n\r\nprint(world.head())\r\n""]",0,1
"[""from fastapi import FastAPI\r\n\r\ndef lifespan(_):\r\n    print(""startup"")\r\n    yield\r\n    print(""shutdown"")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return {""message"": ""Hello World""}\r\n\r\nsub_app = FastAPI()\r\n\r\n@sub_app.get(""/"")\r\nasync def sub_root():\r\n    return {""message"": ""Hello Sub World""}\r\n\r\nasync def sub_startup():\r\n    print(""sub startup"")\r\n\r\nasync def sub_shutdown():\r\n    print(""sub shutdown"")\r\n\r\nsub_app.router.on_startup.append(sub_startup)\r\nsub_app.router.on_shutdown.append(sub_shutdown)\r\n\r\napp.mount(""/sub"", sub_app)\r\n""]",0,1
"[""from fastapi import APIRouter, Form, Response, HTTPException, Depends\r\nfrom sqlalchemy.orm import Session\r\nimport models\r\nfrom database import get_db\r\nfrom utils import verify_password, create_access_token\r\n\r\nrouter = APIRouter()\r\n\r\n@router.post(""/login"")\r\ndef user_login(response: Response, username: str = Form(), password: str = Form(), db: Session = Depends(get_db)):\r\n    user = db.query(models.User).filter(models.User.mobile_number == username).first()\r\n    if not user or not verify_password(password, user.password):\r\n        raise HTTPException(400, detail=""wrong phone number or password"")\r\n    \r\n    access_token = create_access_token(data={""sub"": user.mobile_number})\r\n    response.set_cookie(\r\n        key=""fakesession"", \r\n        value=""fake-cookie-session-value"", \r\n        httponly=True, \r\n        samesite=""None"", \r\n        secure=True\r\n    )\r\n    \r\n    return {""status"": ""success""}\r\n""]",0,1
"[""from pyspark.sql import SparkSession\r\nfrom pyspark.sql.window import Window\r\nfrom pyspark.sql.functions import sum\r\n\r\nspark = SparkSession.builder.appName(""window_example"").getOrCreate()\r\n\r\ndata = [(1, ""A"", 100), (2, ""A"", 200), (3, ""A"", 300), \r\n        (4, ""B"", 400), (5, ""B"", 500), (6, ""B"", 600)]\r\n\r\ndf = spark.createDataFrame(data, [""id"", ""group"", ""value""])\r\n\r\nwindow_spec1 = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n\r\ndf.withColumn(""cumulative_sum"", sum(""value"").over(window_spec1)).show()\r\n\r\nwindow_spec2 = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(-1, 1)\r\n\r\ndf.withColumn(""rolling_sum"", sum(""value"").over(window_spec2)).show()\r\n""]",0,1
"[""import httpx\r\nimport asyncio\r\n\r\nurls = [\r\n    ""https://example.com"",\r\n    ""https://example.org"",\r\n    ""https://example.net"",\r\n]\r\n\r\nasync def fetch(client, url):\r\n    try:\r\n        response = await client.get(url)\r\n        return response.text\r\n    except Exception as e:\r\n        print(f""Error fetching {url}: {e}"")\r\n        return None\r\n\r\nasync def fetch_all(urls):\r\n    async with httpx.AsyncClient() as client:\r\n        tasks = [fetch(client, url) for url in urls]\r\n        return await asyncio.gather(*tasks)\r\n\r\nresults = asyncio.run(fetch_all(urls))\r\nprint(results)\r\n""]",0,1
"[""from fastapi import FastAPI\r\nfrom typing import List\r\nimport pymongo\r\nimport pandas as pd\r\n\r\napp = FastAPI()\r\n\r\nclient = pymongo.MongoClient(""mongodb://mongo:27017"")\r\ndb = client[""models""]\r\nmodel_collection = db[""example-model""]\r\n\r\ndef response_to_mongo(r: dict):\r\n    inserted_id = model_collection.insert_one(r).inserted_id\r\n    return inserted_id\r\n\r\n@app.post(""/predict"")\r\nasync def predict_model(features: List[float]):\r\n\r\n    prediction = model.predict(\r\n        pd.DataFrame(\r\n            [features],\r\n            columns=model.feature_names_in_,\r\n        )\r\n    )\r\n\r\n    response = {""predictions"": prediction.tolist()}\r\n    response[""_id""] = response_to_mongo(response)\r\n    \r\n    return response\r\n""]",0,1
"[""from icu import Collator, Locale\r\n\r\ncollator_en = Collator.createInstance(Locale(""en_US.UTF-8""))\r\ncollator_fa = Collator.createInstance(Locale(""fa_IR.UTF-8""))\r\n\r\ndef sort_key(s):\r\n    is_ascii = all(ord(c) < 128 for c in s)\r\n    return (collator_en.getSortKey(s) if is_ascii else b"""", collator_fa.getSortKey(s))\r\n\r\nmylist.sort(key=sort_key)\r\n""]",0,1
"[""import numpy as np\r\nimport concurrent.futures\r\n\r\narr = np.random.randint(0, 2**64, int(3e8), dtype=np.uint64)\r\n\r\ndef parallel_sort(arr, num_parts=8):\r\n    chunk_size = len(arr) // num_parts\r\n    chunks = [arr[i * chunk_size: (i + 1) * chunk_size] for i in range(num_parts)]\r\n\r\n    with concurrent.futures.ProcessPoolExecutor() as executor:\r\n        sorted_chunks = list(executor.map(np.sort, chunks))\r\n\r\n    return np.concatenate(sorted_chunks)\r\n\r\nsorted_arr = parallel_sort(arr)\r\n""]",0,1
"[""import pandas as pd\r\nfrom io import StringIO\r\n\r\ntext = """"""\r\n| Some Title | Some Description             | Some Number |\r\n|------------|------------------------------|-------------|\r\n| Dark Souls | This is a fun game           | 5           |\r\n| Bloodborne | This one is even better      | 2           |\r\n| Sekiro     | This one is also pretty good | 110101      |\r\n""""""\r\n\r\ndf = pd.read_csv(StringIO(text), sep=""|"", skiprows=2, skipinitialspace=True).iloc[:, 1:-1]\r\n\r\ndf.columns = df.columns.str.strip()\r\ndf = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):  \r\n    a: int\r\n\r\n@dataclass\r\nclass Outer:\r\n    hasa: HasA  \r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n""]",0,1
"[""from sklearn import datasets\r\nimport pandas pd\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\n\r\ndef mutate_drop(df, new_col_name, expr):\r\n    df[new_col_name] = expr(df)\r\n    return df.drop(columns=[col for col in df.columns if col not in [new_col_name] + ['species']], errors='ignore')\r\n\r\niris = mutate_drop(iris, 'new_col', lambda x: x['sepal length (cm)'] + x['petal length (cm)'] * x['petal width (cm)'])\r\n""]",0,1
"[""import numpy as np\r\nfrom numpy.typing import NDArray\r\n\r\ndef example1(arr: NDArray[np.float64]):\r\n    return arr * 2\r\n\r\ndef example2(arr: np.ndarray[np.float32, np.dtype[np.int32]]): \r\n    return arr.astype(np.float64)\r\n\r\narr1 = np.array([1, 2, 3], dtype=np.float64)\r\narr2 = np.array([[1, 2], [3, 4]], dtype=np.float32)\r\n\r\nprint(example1(arr1))\r\nprint(example2(arr2))\r\n\r\nT = np.ndarray[float]\r\nprint(T)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\ndef create_timeseries_df(num_rows):\r\n    date_rng = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    data = {\r\n        'date': np.random.choice(date_rng, num_rows),\r\n        'category': np.random.choice(['A', 'B', 'C', 'D'], num_rows),\r\n        'subcategory': np.random.choice(['X', 'Y', 'Z'], num_rows),\r\n        'value': np.random.rand(num_rows) * 100\r\n    }\r\n    df = pd.DataFrame(data)\r\n    df = df.sort_values('date')\r\n    df.set_index('date', inplace=True)\r\n    \r\n    return df\r\n\r\nnum_rows = 1000000\r\ndf = create_timeseries_df(num_rows)\r\n\r\ndf_pl = pl.from_pandas(df).sort(""date"")\r\n\r\ndf_pl = df_pl.group_by_dynamic(""date"", every=""1w"", closed=""right"").agg(\r\n    pl.col(""value"").sum().alias(""value_sum""),\r\n    pl.col(""value"").mean().alias(""value_mean""),\r\n    pl.col(""value"").max().alias(""value_max""),\r\n    pl.col(""value"").min().alias(""value_min"")\r\n)\r\n""]",0,1
"[""import inspect\r\nimport ast\r\n\r\ndef fct1():\r\n    frame = inspect.currentframe().f_back\r\n    try:\r\n        source_lines, _ = inspect.getsourcelines(frame)\r\n        caller_line = source_lines[frame.f_lineno - 1].strip()\r\n        if ""="" in caller_line:\r\n            var_name = caller_line.split(""="")[0].strip()\r\n            return {""name"": var_name}\r\n    finally:\r\n        del frame\r\n\r\n    return None\r\n\r\na = fct1()\r\n""]",0,1
"[""from typing import Callable, TypeVar, Dict\r\nfrom functools import wraps\r\n\r\nF = TypeVar(""F"", bound=Callable[[int], int])\r\n\r\ndef remember(f: F) -> F:\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        if n not in wrapper.memory:\r\n            wrapper.memory[n] = f(n)\r\n        return wrapper.memory[n]\r\n\r\n    wrapper.memory: Dict[int, int] = {}\r\n    return wrapper  # type: ignore\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n <= 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n\r\nprint(fib(100))\r\n""]",0,1
"[""import polars as pl\r\nimport plotly.express as px\r\n\r\ndf = pl.DataFrame({\r\n    ""sub_id"": [1, 2, 3],\r\n    ""engagement"": [""one:one,two:two"", ""one:two,two:one"", ""one:one""],\r\n    ""total_duration"": [123, 456, 789]\r\n})\r\n\r\ndf = df.with_columns(pl.col(""engagement"").str.split("","")).explode(""engagement"")\r\n\r\ndf = df.with_columns(\r\n    (pl.col(""total_duration"") / df.groupby(""sub_id"").count().select(""engagement"")).alias(""adjusted_duration"")\r\n)\r\n\r\nfig = px.bar(df, x=""sub_id"", y=""adjusted_duration"", color=""engagement"")\r\nfig.show()\r\n""]",0,1
"[""import torch\r\nfrom transformers import LlamaTokenizer, LlamaForCausalLM, LlamaConfig\r\n\r\nmodel_path = ""Meta-Llama-3.1-8B-Instruct""\r\ntokenizer_path = f""{model_path}/tokenizer.model""\r\n\r\ntokenizer = LlamaTokenizer.from_pretrained(model_path, legacy=True)\r\n\r\nmodel_config = LlamaConfig(\r\n    hidden_size=4096,\r\n    num_hidden_layers=32,\r\n    num_attention_heads=32,\r\n    intermediate_size=int(4096 * 1.3),  \r\n    vocab_size=128256,\r\n    use_scaled_rope=True\r\n)\r\n\r\nmodel = LlamaForCausalLM(model_config)\r\nmodel.load_state_dict(torch.load(f""{model_path}/consolidated.00.pth"", map_location=torch.device(""cpu"")))\r\n\r\nmodel.eval()\r\n\r\ninput_text = ""Hello, how are you?""\r\ninputs = tokenizer(input_text, return_tensors=""pt"")\r\noutputs = model.generate(inputs[""input_ids""])\r\n\r\ndecoded_output = tokenizer.decode(outputs[0], skip_special_tokens=True)\r\nprint(decoded_output)\r\n""]",0,1
"[""arr = []\r\n\r\nfor i in range(1, 101):\r\n    if (three := (i % 3 == 0)) & (five := (i % 5 == 0)):\r\n        arr.append(""FizzBuzz"")\r\n    elif three:\r\n        arr.append(""Fizz"")\r\n    elif five:\r\n        arr.append(""Buzz"")\r\n    else:\r\n        arr.append(str(i))\r\n\r\nprint(arr)\r\n""]",0,1
"[""import pprint\r\nfrom langchain_community.vectorstores import FAISS\r\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\r\nfrom langchain.docstore.document import Document\r\nfrom tqdm import tqdm\r\nimport time\r\n\r\nmodel = ""sentence-transformers/multi-qa-MiniLM-L6-cos-v1""\r\nembeddings = HuggingFaceEmbeddings(model_name=model)\r\n\r\ndef main():\r\n    doc1 = Document(page_content=""The sky is blue."", metadata={""document_id"": ""10""})\r\n    doc2 = Document(page_content=""The forest is green"", metadata={""document_id"": ""62""})\r\n    docs = [doc1, doc2]\r\n\r\n    for doc in tqdm(docs, desc=""Processing docs""):\r\n        time.sleep(0.1)\r\n        doc.metadata['summary'] = 'hello'\r\n\r\n    pprint.pprint(docs)\r\n    db = FAISS.from_documents(docs, embeddings)\r\n    db.save_local(""faiss_index"")\r\n    new_db = FAISS.load_local(""faiss_index"", embeddings)\r\n\r\n    query = ""Which color is the sky?""\r\n    docs = new_db.similarity_search_with_score(query)\r\n    print('Retrieved docs:', docs)\r\n    print('Metadata of the most relevant document:', docs[1][0].metadata)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n""]",0,1
"[""import numpy as np\r\nimport tensorflow as tf\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import LSTM, Dense\r\n\r\nx_data = [np.random.rand(np.random.randint(100, 200)) for _ in range(50)]\r\ny_data = np.random.rand(50).astype(np.float32)\r\n\r\nmax_len = max(len(seq) for seq in x_data)\r\nx_padded = np.array([np.pad(seq, (0, max_len - len(seq))) for seq in x_data])\r\n\r\nx_padded = np.expand_dims(x_padded, axis=-1)\r\n\r\nmodel = Sequential([\r\n    LSTM(64, return_sequences=False, input_shape=(max_len, 1)),\r\n    Dense(1, activation=""linear"")\r\n])\r\n\r\nmodel.compile(optimizer=""adam"", loss=""mse"")\r\nmodel.fit(x_padded, y_data, epochs=10, batch_size=8)\r\n""]",0,1
"[""import machine\r\nimport utime\r\nimport sys\r\n\r\nusb = machine.UART(0, baudrate=115200)\r\n\r\ndef read_usb():\r\n    if usb.any():\r\n        return usb.read().decode('utf-8').strip()\r\n    return None\r\n\r\ndef write_usb(data):\r\n    usb.write(data + ""\n"")\r\n    utime.sleep(0.1)\r\n\r\nwhile True:\r\n    msg = read_usb()\r\n    if msg:\r\n        write_usb(""Received: "" + msg)\r\n""]",0,1
"[""from pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import DateType, IntegerType, StringType\r\n\r\nspark = SparkSession.builder.appName(""SchemaCast"").getOrCreate()\r\n\r\ndata = [(""2024-01-01"", ""1"", ""hello""), (""2024-02-01"", ""2"", ""world"")]\r\ndf2 = spark.createDataFrame(data, [""A"", ""B"", ""C""])\r\n\r\nschema = {\r\n    ""A"": DateType(),\r\n    ""B"": IntegerType(),\r\n    ""C"": StringType()\r\n}\r\n\r\nfor col, dtype in schema.items():\r\n    df2 = df2.withColumn(col, df2[col].cast(dtype))\r\n\r\ndf2.printSchema()\r\n""]",0,1
"[""import streamlit as st\r\nfrom PIL import Image\r\n\r\ndef page_header():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    header = st.container()\r\n    with header:\r\n        logo = Image.open(""images/logo.png"")\r\n        st.image(logo, width=300)\r\n\r\n        ga_code = """"""\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n        """"""\r\n        st.markdown(ga_code, unsafe_allow_html=True)\r\n\r\ndef main():\r\n    page_header()\r\n    st.write(""Welcome to my Streamlit app!"")\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import pytest\r\nfrom contextlib import asynccontextmanager\r\nfrom fastapi.testclient import TestClient\r\nfrom fastapi import FastAPI, Response, status\r\n\r\ngreeting = None\r\n\r\n@asynccontextmanager\r\nasync def _lifespan(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hello""\r\n    yield\r\n\r\n@asynccontextmanager\r\nasync def _lifespan_override(app: FastAPI):\r\n    global greeting\r\n    greeting = ""Hi""\r\n    yield\r\n\r\napp = FastAPI(title=""Test"", lifespan=_lifespan)\r\n\r\n@app.get(""/"")\r\nasync def root():\r\n    return Response(status_code=status.HTTP_200_OK, content=greeting)\r\n\r\n@pytest.fixture\r\ndef fake_client():\r\n    app.router.lifespan = _lifespan_override\r\n    with TestClient(app) as client:\r\n        yield client\r\n\r\ndef test_override(fake_client):\r\n    response = fake_client.get(""/"")\r\n    assert response.text == ""Hi""\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = (\r\n    pl.DataFrame(\r\n        {\r\n            ""value"": values\r\n        }\r\n    )\r\n    .with_columns(\r\n        pl.col(""value"").ewm_mean(alpha=2/(9+1), adjust=False, min_periods=9).alias(""ema_9"")\r\n    )\r\n)\r\n\r\ndf\r\n""]",0,1
"[""import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\nd0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\nd0.isoformat()\r\n\r\nd1 = d0 + dt.timedelta(hours=2)\r\nd1.isoformat()\r\n\r\nd2 = d0 + dt.timedelta(hours=3)\r\nd2.isoformat()\r\n\r\nd1u = d1.astimezone(dt.timezone.utc)\r\nd2u = d2.astimezone(dt.timezone.utc)\r\n\r\nd2 - d1\r\nd2u - d1u\r\n\r\nd3 = d0 + dt.timedelta(hours=4)\r\nd3.isoformat()\r\n""]",0,1
"[""from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\nf = partial(bar, 3)\r\nassert str(signature(f)) == '(b)'\r\nassert f(6) == 0.5 == f(b=6)\r\n\r\ntry:\r\n    f(a=2, b=6)\r\nexcept TypeError as e:\r\n    print(e)\r\n\r\ntry:\r\n    f(c=2, b=6)\r\nexcept TypeError as e:\r\n    print(e)\r\n\r\nf = partial(bar, b=3)\r\nassert str(signature(f)) == '(a, *, b=3)'\r\nassert f(6) == 2.0 == f(6, b=3)\r\nassert f(6, b=1) == 6.0\r\n\r\nf = partial(bar, a=3)\r\nassert str(signature(f)) == '(*, a=3, b)'\r\n""]",0,1
"[""import numpy as np\r\n\r\nnp.random.seed(7)\r\nA = np.random.random(1000)\r\n\r\n%timeit np.sum(A)\r\n%timeit A.sum()\r\n\r\ndef check_sum_methods():\r\n    arr = np.random.random(1000)\r\n    \r\n    sum_1 = np.sum(arr)\r\n    sum_2 = arr.sum()\r\n    \r\n    assert np.isclose(sum_1, sum_2), ""Sums should be identical""\r\n\r\ncheck_sum_methods()\r\n\r\nfrom numpy.core.multiarray import array as array_constructor\r\n\r\ndef custom_np_sum(arr):\r\n    if not isinstance(arr, np.ndarray):\r\n        arr = array_constructor(arr, dtype=float)\r\n    \r\n    return arr.sum(axis=None, dtype=None, out=None, keepdims=False, initial=0)\r\n\r\n%timeit custom_np_sum(A)\r\n""]",0,1
"[""from typing import Union, Literal\r\nfrom pydantic import BaseModel, Field\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\nclass Foo(BaseModel):\r\n    type: Literal[""Foo""] = Field(""Foo"", alias=""_type"", exclude=True)\r\n    Name: str\r\n\r\nclass Bar(BaseModel):\r\n    type: Literal[""Bar""] = Field(""Bar"", alias=""_type"", exclude=True)\r\n    Name: str\r\n\r\nclass Demo(BaseModel):\r\n    example: Union[Foo, Bar] = Field(..., discriminator=""type"")\r\n\r\n@app.post(""/demo"")\r\nasync def demo(foo: Foo):\r\n    demo_instance = Demo(example=foo)\r\n    return demo_instance\r\n""]",0,1
"[""import base64\r\nimport hmac\r\nimport hashlib\r\n\r\ndef generate_auth_header(data_to_sign):\r\n    api_secret_hash = base64.b64decode(""Rbju7azu87qCTvZRWbtGqg=="")\r\n    api_secret = api_secret_hash.decode(""ascii"")\r\n    hash = hmac.new(api_secret.encode(), data_to_sign.encode(), hashlib.sha256).digest()\r\n    return base64.b64encode(hash).decode()\r\n\r\nprint(generate_auth_header(""abc""))\r\n""]",0,1
"[""import numpy as np\r\nfrom sklearn.preprocessing import PolynomialFeatures\r\nfrom sklearn.linear_model import LinearRegression\r\n\r\ndef fit_polynomial(X, y, degree=2):\r\n    poly = PolynomialFeatures(degree=degree)\r\n    Xp = poly.fit_transform(X)\r\n    model = LinearRegression()\r\n    model.fit(Xp, y)\r\n    return model, poly\r\n\r\ndef compute_gradient_hessian(model, poly, X):\r\n    coefs = model.coef_\r\n    n_features = X.shape[1]\r\n    \r\n    gradient = coefs[1:n_features+1]\r\n    \r\n    hessian = np.zeros((n_features, n_features))\r\n    index = n_features + 1\r\n    for i in range(n_features):\r\n        for j in range(i, n_features):\r\n            hessian[i, j] = coefs[index]\r\n            hessian[j, i] = coefs[index]\r\n            index += 1\r\n            \r\n    return np.array(gradient), np.array(hessian)\r\n\r\nX = np.random.rand(10, 2)\r\ny = np.random.rand(10)\r\n\r\nmodel, poly = fit_polynomial(X, y, degree=2)\r\ngrad, hess = compute_gradient_hessian(model, poly, X)\r\nprint(""Gradient:"", grad)\r\nprint(""Hessian:"", hess)\r\n""]",0,1
"[""import os\r\nfrom typing import Optional\r\nfrom pydantic import BaseSettings, Field\r\n\r\n\r\nclass SubSettings(BaseSettings):\r\n    sub_field: Optional[str] = Field(None, env='SUB_FIELD')\r\n\r\n    class Config:\r\n        env_file = 'local.env'\r\n\r\n\r\nclass Settings(BaseSettings):\r\n    field_one: Optional[str] = Field(None, env='FIELD_ONE')\r\n    field_two: Optional[int] = Field(None, env='FIELD_TWO')\r\n    sub_settings: SubSettings = SubSettings()\r\n\r\n    class Config:\r\n        env_file = 'local.env'\r\n\r\n\r\nsettings = Settings()\r\nprint(settings.dict())\r\n""]",0,1
"[""from abc import ABC, abstractmethod\r\n\r\nclass FooBase(ABC):\r\n    foo: str\r\n    bar: str\r\n    baz: int\r\n\r\n    def __init__(self):\r\n        self.bar = ""bar""\r\n        self.baz = 42\r\n\r\n    @abstractmethod\r\n    def __init_subclass__(cls):\r\n        if not hasattr(cls, 'foo'):\r\n            raise TypeError(f""Class {cls.__name__} must define attribute 'foo'"")\r\n\r\nclass Foo(FooBase):\r\n    foo: str = ""hello""\r\n\r\n\r\nf = Foo()\r\nprint(f.foo, f.bar, f.baz)\r\n""]",0,1
"[""import requests\r\nfrom fake_useragent import UserAgent\r\n\r\nua = UserAgent()\r\nheaders = {\r\n    'User-Agent': ua.random,\r\n    'Accept-Language': 'en-US,en;q=0.9',\r\n}\r\n\r\nsession = requests.Session()\r\nsession.headers.update(headers)\r\n\r\nurl = ""https://etherscan.io/tokens""\r\nresponse = session.get(url, timeout=15)\r\n\r\nif response.status_code == 200:\r\n    print(response.text[:500])\r\nelse:\r\n    print(""Failed to fetch page:"", response.status_code)\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndata = {\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": [""a"", ""c"", ""x""],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n}\r\n\r\ndf = pd.DataFrame(data)\r\n\r\ndf_melted = df.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""FIELD_VALUE"")\r\n\r\ndf_melted[""FIELD_NAME""] = df_melted[""FIELD_NAME""].str[-1]\r\n\r\ndf_melted[""FIELD_STR_VALUE""] = df_melted[""FIELD_VALUE""].apply(lambda x: x if isinstance(x, str) else """")\r\ndf_melted[""FIELD_NUM_VALUE""] = df_melted[""FIELD_VALUE""].apply(lambda x: x if isinstance(x, int) else None)\r\n\r\ndf_melted = df_melted.drop(columns=[""FIELD_VALUE""])\r\n\r\ndf_melted.insert(0, ""ID"", range(1, len(df_melted) + 2))  \r\n\r\nprint(df_melted)\r\n""]",0,1
"[""import click\r\nimport boto3\r\nimport os\r\nfrom pathlib import Path\r\nfrom importlib_resources import files\r\n\r\ns3_client = boto3.client('s3')\r\n\r\n@click.command()\r\n@click.argument('bucket_name')\r\ndef upload_files(bucket_name):\r\n    base_path = Path(__file__).parent / ""../resources/artifacts""  \r\n    if not base_path.exists():\r\n        click.echo(""Resources folder not found, check installation."")\r\n        return\r\n\r\n    for file_path in base_path.iterdir():\r\n        if file_path.is_file():\r\n            s3_client.upload_file(str(file_path), bucket_name, file_path.name)\r\n            click.echo(f""Uploaded {file_path.name}"")\r\n\r\nif __name__ == ""__main__"":\r\n    upload_files()\r\n""]",0,1
"[""class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\n    def __class_getitem__(cls, item):\r\n        return cls.__len__()\r\n\r\nBadBar.__len__ = classmethod(lambda cls: 9002)\r\n\r\nlen(GoodBar), len(GoodBar()), len(BadBar), len(BadBar())\r\n""]",0,1
"[""import asyncio\r\nimport pytest\r\nimport random\r\nfrom faker import Faker\r\nfrom sqlalchemy.ext.asyncio import AsyncSession\r\nfrom app.models import User\r\nfrom app.database import async_session_maker\r\n\r\nfake = Faker()\r\n\r\nclass AsyncFactory:\r\n    async def create_user(self, session: AsyncSession):\r\n        user = User(\r\n            id=random.randint(1, 10000),\r\n            name=fake.name(),\r\n            email=fake.email(),\r\n        )\r\n        session.add(user)\r\n        await session.commit()\r\n        return user\r\n\r\n@pytest.fixture\r\nasync def async_session():\r\n    async with async_session_maker() as session:\r\n        yield session\r\n\r\n@pytest.fixture\r\nasync def user_fixture(async_session):\r\n    factory = AsyncFactory()\r\n    return await factory.create_user(async_session)\r\n\r\nasync def test_user_creation(user_fixture):\r\n    assert user_fixture.id is not None\r\n    assert ""@"" in user_fixture.email\r\n""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import tqdm\r\nimport time\r\n\r\n\r\ndef calc(n_digits, pos, total):\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    progress = tqdm(total=n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True)\r\n    \r\n    for k in range(n):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n        progress.update(1)\r\n    \r\n    progress.close()\r\n    \r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    \r\n    return pi\r\n\r\n\r\ndef parallel_with_joblib():\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n\r\n    results = Parallel(n_jobs=n_cores, prefer=""threads"")(delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame(data1)\r\ndf2 = pd.DataFrame(data2)\r\n\r\ndef find_closest_indices(df, target):\r\n    idx = (df['seconds'] - target).abs().argsort()[0]\r\n    low = max(0, idx - 2)\r\n    high = min(len(df), idx + 3)\r\n    return df.iloc[low:high]\r\n\r\nresults = pd.concat([find_closest_indices(df2, sec) for sec in df1['seconds']]).drop_duplicates().reset_index(drop=True)\r\nprint(results)\r\n""]",0,1
"[""import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(0, 10),\r\n            ""b"": """".join(random.choices(string.digits, k=10))\r\n        }\r\n\r\n\r\nprint(ExampleData.example())\r\n""]",0,1
"[""class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, result=None):\r\n        if result is None:\r\n            result = []\r\n        result.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(result)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(result)\r\n\r\n        return result\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nprint(Tree.traverse_pre())\r\n""]",0,1
"[""from flask import Flask, render_template, jsonify\r\nimport map_plotting_test as mpt\r\nimport threading\r\n\r\napp = Flask(__name__)\r\n\r\ndef create_map_task():\r\n    mpt.create_map()\r\n\r\n@app.route('/')\r\ndef render_the_map():\r\n    thread = threading.Thread(target=create_map_task)\r\n    thread.start()\r\n    return render_template(""loading.html"")\r\n\r\n@app.route('/map')\r\ndef render_the_actual_map():\r\n    return render_template(""map.html"")\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n""]",0,1
"[""import base64\r\nimport requests\r\nimport numpy as np\r\nimport json\r\nfrom matplotlib.pyplot import imread\r\nfrom skimage.transform import resize\r\n\r\nif __name__ == '__main__':\r\n    path_to_img = ""my image path""\r\n\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512), mode='reflect')\r\n\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {""shape"": image.shape, ""image"": image_byte.decode()}\r\n\r\n    response = requests.post('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\n""]",0,1
"[""import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef reference_implementation(encoded):\r\n    """"""This is the implementation that gives the desired result""""""\r\n    return base64.b64decode(encoded)\r\n\r\n\r\ndef implmementation1(encoded):\r\n    """"""Try to call the directly the underlying library""""""\r\n    return a2b_base64(encoded)\r\n\r\n\r\ndef threaded_impl(encoded, N):\r\n    """"""Try multi threading calling the underlying library""""""\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # lenght of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret = ret + result\r\n    return ret\r\n\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    """"""Try multi processing calling the underlying library""""""\r\n    d = len(encoded) // N            # number of splits\r\n    lbatch = (d // 4) * 4           # lenght of first N-1 batches, the last is len(source) - lbatch*N\r\n    batches = []\r\n    for i in range(N-1):\r\n        start = i * lbatch\r\n        end = (i + 1) * lbatch\r\n        batches.append(encoded[start:end])\r\n    batches.append(encoded[end:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret = ret + result\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2; collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3; collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4; collect()\r\n""]",0,1
"[""import pandas as pd\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\npage = requests.get('https://www.bmv.com.mx/es/mercados/capitales')\r\nsoup = BeautifulSoup(page.text, 'lxml')\r\n\r\nprint('Read html!')\r\n\r\n# get headers\r\nthead = soup.find(""thead"")\r\ntr = thead.find_all(""tr"")\r\n\r\nheaders = [t.get_text().strip().replace('\n', ',').split(',') for t in tr]\r\nheaders = headers[0] if headers else []\r\n\r\ndf = pd.DataFrame(columns=headers)\r\n\r\n# fetch rows into pandas dataframe\r\nrows = soup.find_all('tr', {""role"": ""row""})\r\n\r\nfor row in rows:\r\n    cells = row.findChildren('td')\r\n    row_data = []\r\n    for cell in cells:\r\n        value = cell.get_text(strip=True)\r\n        row_data.append(value)\r\n\r\n    if row_data:\r\n        df.loc[len(df)] = row_data\r\n\r\nprint(df.head())\r\n""]",0,1
"[""import hashlib\r\nimport sys\r\nfrom color import Color\r\n\r\ndef get_hash(algorithm):\r\n    filename = input(""Enter the file name: "")\r\n    hash_obj = hashlib.new(algorithm)\r\n    with open(filename, ""rb"") as f:\r\n        for byte_block in iter(lambda: f.read(4096), b""""):\r\n            hash_obj.update(byte_block)\r\n    print(f""{algorithm} value has been calculated"")\r\n    color_reset()\r\n\r\ndef verify_checksum(algorithm):\r\n    print(f""Verifying {algorithm} checksum..."")\r\n\r\ndef which_hash():\r\n    sha256_or_sha512 = input(""Which hash do you want to calculate: sha256 or sha512? \n"")\r\n    if sha256_or_sha512 in [""sha256"", ""sha512""]:\r\n        get_hash(sha256_or_sha512)\r\n        verify_checksum(sha256_or_sha512)\r\n    else:\r\n        print(""Type either sha256 or sha512. If you type anything else the program will close...like this."")\r\n        sys.exit()\r\n\r\nif __name__ == ""__main__"":\r\n    which_hash()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nsector_names = [""Technology"", ""Financials"", ""Health Care"", ""Consumer Discretionary"", ""Consumer Staples"", ""Industrials""]\r\n\r\ndf = df.with_columns(\r\n    pl.col(""sector_exposure"")\r\n    .str.split("";"", inclusive=True)\r\n    .arr.eval(pl.col().str.split(""=""), parallel=True)\r\n    .arr.eval(pl.struct([pl.element().arr.get(1).cast(pl.Float64).alias(name) for name in sector_names]), parallel=True)\r\n)\r\n\r\nprint(df)\r\n""]",0,1
"[""import numpy as np\r\nfrom timeit import timeit\r\n\r\nN = 1300\r\nxx = np.random.randn(N, N) + 1j\r\nyy = np.random.randn(N, N) + 1j  # Changed to lowercase 'j' for complex numbers\r\n\r\nx = np.real(xx)\r\ny = np.real(yy)\r\n\r\nassert np.shares_memory(x, xx)\r\nassert np.shares_memory(y, yy)\r\n\r\ndot = timeit('np.dot(x, y)', number=10, globals=globals())\r\nmatmul = timeit('np.matmul(x, y)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul: ', matmul)\r\nprint('time for np.dot: ', dot)\r\n\r\n# If you try .copy() here, it should make the performance differences go away.\r\nx_copy = np.real(xx).copy()\r\ny_copy = np.real(yy).copy()\r\n\r\ndot_copy = timeit('np.dot(x_copy, y_copy)', number=10, globals=globals())\r\nmatmul_copy = timeit('np.matmul(x_copy, y_copy)', number=10, globals=globals())\r\n\r\nprint('time for np.matmul (with copy): ', matmul_copy)\r\nprint('time for np.dot (with copy): ', dot_copy)\r\n""]",0,1
"[""import numpy as np\r\nimport cv2\r\nfrom PIL import Image\r\n\r\ndpi = 1000  # dots per inch\r\ndpmm = 0.03937 * dpi  # dots per mm\r\nwidthOfSampleMM = 50  # mm\r\nheightOfSampleMM = 50  # mm\r\npatternSizeMM = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nvariation = 0.75  # 1 is very bad, 0 is very good\r\n\r\n# conversions to pixels\r\nwidthOfSamplesPX = int(np.ceil(widthOfSampleMM * dpmm))  # get the width\r\nwidthOfSamplesPX = widthOfSamplesPX + 10 - widthOfSamplesPX % 10  # round up the width to nearest 10\r\nheightOfSamplePX = int(np.ceil(heightOfSampleMM * dpmm))  # get the height\r\nheightOfSamplePX = heightOfSamplePX + 10 - heightOfSamplePX % 10  # round up the height to nearest 10\r\npatternSizePX = patternSizeMM * dpmm  # this is the size of the pattern, so far I am going with circles\r\n\r\n# init an empty image\r\nim = 255 * np.ones((heightOfSamplePX, widthOfSamplesPX), dtype=np.uint8)\r\n\r\n# horizontal circle centers\r\nnumPoints = int(density * heightOfSamplePX / patternSizePX)  # get number of patterns possible\r\nif numPoints == 1:\r\n    horizontal = [heightOfSamplePX // 2]\r\nelse:\r\n    horizontal = [int(i * heightOfSamplePX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\n# vertical circle centers\r\nnumPoints = int(density * widthOfSamplesPX / patternSizePX)\r\nif numPoints == 1:\r\n    vertical = [widthOfSamplesPX // 2]\r\nelse:\r\n    vertical = [int(i * widthOfSamplesPX / (numPoints + 1)) for i in range(1, numPoints + 1)]\r\n\r\nfor i in vertical:\r\n    for j in horizontal:\r\n        # generate the noisy information\r\n        iWithNoise = i + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        jWithNoise = j + variation * np.random.randint(-2 * patternSizePX / density, +2 * patternSizePX / density)\r\n        patternSizePXWithNoise = patternSizePX + patternSizePX * variation * (np.random.rand() - 0.5) / 2\r\n        cv2.circle(im, (int(iWithNoise), int(jWithNoise)), int(patternSizePXWithNoise // 2), 0, -1)  # add circle\r\n\r\n# Save the image in a high-resolution format using PIL\r\nim_pil = Image.fromarray(im)\r\nim_pil.save(""speckle_pattern.png"", dpi=(dpi, dpi))\r\n\r\n# If saving in TIFF format with high resolution:\r\nim_pil.save(""speckle_pattern.tiff"", dpi=(dpi, dpi))\r\n""]",0,1
"[""import matplotlib.pyplot as plt\r\n\r\nwith open('notebook.txt', encoding='utf-8') as file:\r\n    contents = file.readlines()\r\n\r\nnewList = []\r\nfor content in contents:\r\n    newContent = content.replace('\n', '')\r\n    money = newContent.split(':')[-1]\r\n    newList.append(int(money))\r\n\r\nx = [1, 2, 3, 4, 5, 6]\r\ny = newList\r\nplt.plot(x, y, 'r')\r\nplt.xlabel('month')\r\nplt.ylabel('money')\r\nplt.legend()\r\nplt.show()\r\n""]",0,1
"[""from pydantic import root_validator\r\nfrom typing import Callable\r\n\r\ndef root_unique_validator(field_name: str) -> Callable:\r\n    def _unique_validator(cls, values):\r\n        root_values = values.get('__root__')\r\n        value_set = set()\r\n        for value in root_values:\r\n            if value.get(field_name) in value_set:\r\n                raise ValueError(f'Duplicate {field_name.capitalize()}')\r\n            else:\r\n                value_set.add(value.get(field_name))\r\n        return values\r\n    return _unique_validator\r\n\r\nclass CustomerRecordDF(BaseModel):\r\n\r\n    __root__: List[CustomerRecord]\r\n    \r\n    _validate_unique_name = root_unique_validator('name')\r\n    _validate_unique_address = root_unique_validator('address')\r\n\r\ndf_dict = df.to_dict(orient='records')\r\nCustomerRecordDF.parse_obj(df_dict)\r\n""]",0,1
"[""from pydantic import BaseModel, ValidationError, validator\r\nfrom typing import List\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\ntry:\r\n    salary = Salary(gross=""hello"", net=1000, tax=10)\r\n    employee = Employee(name=""Mattia"", age=""hello"", salary=salary)\r\nexcept ValidationError as e:\r\n    print(e.errors())\r\n""]",0,1
