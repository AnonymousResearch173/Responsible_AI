Code,label,predicted_label
"[""// Using WebClient with .block()\r\nWebClient client = WebClient.create();\r\nString result = client.get()\r\n    .uri(\""https://example.com\"")\r\n    .retrieve()\r\n    .bodyToMono(String.class)\r\n    .block();\r\n\r\n// Using RestTemplate (classic blocking)\r\nRestTemplate restTemplate = new RestTemplate();\r\nString result = restTemplate.getForObject(\""https://example.com\"", String.class);\r\n\r\n// Summary in plain logic\r\n// WebClient with .block() uses more memory and threads than RestTemplate in a blocking app\r\n// RestTemplate is simpler and cheaper for blocking apps\r\n// If you are not planning to go full reactive, prefer RestTemplate""]",0,1
"[""// Does not compile\r\nclass Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }   \r\n        System.out.println(s); // error: cannot find symbol\r\n    }\r\n}\r\n\r\n// Compiles and works\r\nclass InstanceofFixed {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\n// Why the first one fails:\r\n// Pattern variables like `String s` are only in scope if the compiler can be sure they are initialized\r\n// In `else if (!(o instanceof String s))`, the scope of `s` does not extend beyond that block\r\n// So `s` is not visible after that block ends\r\n\r\n// This is not a bug in javac, it is the intended behavior according to the Java Language Specification\r\n\r\n// You do not need to report this\r\n// But to understand more, you can check the JLS section on pattern matching:\r\n// https://docs.oracle.com/javase/specs/jls/se17/html/jls-14.html#jls-14.11.1""]",0,1
"[""package test.one;\r\n\r\npublic abstract class One {\r\n    protected abstract void whatever();\r\n\r\n    public void run() {\r\n        whatever();\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Three {\r\n    public static void main(String[] args) {\r\n        One one = new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        };\r\n        one.whatever(); // error\r\n    }\r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n    public static void main(String[] args) {\r\n        new One() {\r\n            @Override\r\n            protected void whatever() {\r\n                System.out.println(\""Do whatever..\"");\r\n            }\r\n        }.whatever(); // works\r\n    }\r\n}""]",0,1
"[""// MyCorsConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.cors.CorsConfiguration;\r\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\r\nimport org.springframework.web.filter.CorsFilter;\r\n\r\n@Configuration\r\npublic class MyCorsConfig {\r\n\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.addAllowedOrigin(\""http://localhost:3000\"");\r\n        config.addAllowedMethod(\""*\"");\r\n        config.addAllowedHeader(\""*\"");\r\n        config.setAllowCredentials(true);\r\n\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n\r\n        return new CorsFilter(source);\r\n    }\r\n}\r\n\r\n// SecurityConfig.java\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .cors(Customizer.withDefaults())\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/calciatore/list\"").permitAll()\r\n                .anyRequest().authenticated()\r\n            );\r\n\r\n        return http.build();\r\n    }\r\n}""]",0,1
"[""import io.opentelemetry.api.GlobalOpenTelemetry;\r\nimport io.opentelemetry.api.trace.Span;\r\nimport io.opentelemetry.api.trace.SpanContext;\r\nimport io.opentelemetry.api.trace.TraceFlags;\r\nimport io.opentelemetry.api.trace.TraceState;\r\nimport io.opentelemetry.api.trace.Tracer;\r\nimport io.opentelemetry.context.Context;\r\n\r\npublic class Service2 {\r\n\r\n    public void processMessage(String traceIdFromSqs) {\r\n        Tracer tracer = GlobalOpenTelemetry.getTracer(\""example\"");\r\n\r\n        SpanContext remoteSpanContext = SpanContext.createFromRemoteParent(\r\n            traceIdFromSqs,\r\n            \""0000000000000001\"",\r\n            TraceFlags.getSampled(),\r\n            TraceState.getDefault()\r\n        );\r\n\r\n        Context remoteContext = Context.root().with(Span.wrap(remoteSpanContext));\r\n\r\n        Span consumeMessageSpan = tracer.spanBuilder(\""consumeMessage\"")\r\n            .setParent(remoteContext)\r\n            .startSpan();\r\n\r\n        try (var scope = consumeMessageSpan.makeCurrent()) {\r\n            // do something\r\n        } finally {\r\n            consumeMessageSpan.end();\r\n        }\r\n    }\r\n}""]",0,1
"[""import java.util.*;\r\n\r\npublic class Main {\r\n    public static int solve(List<Integer> nums) {\r\n        int n = nums.size();\r\n        int[] inc = new int[n];\r\n        int[] dec = new int[n];\r\n        int[] inc2 = new int[n];\r\n\r\n        Arrays.fill(inc, 1);\r\n        Arrays.fill(dec, 1);\r\n        Arrays.fill(inc2, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) < nums.get(i)) {\r\n                    inc[i] = Math.max(inc[i], inc[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    inc2[i] = Math.max(inc2[i], inc2[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (nums.get(j) > nums.get(i)) {\r\n                    dec[i] = Math.max(dec[i], dec[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLen = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i; j < n; j++) {\r\n                int left = inc[i];\r\n                int middle = dec[j] - (i == j ? 1 : 0);\r\n                int right = inc2[j] - 1;\r\n                maxLen = Math.max(maxLen, left + middle + right);\r\n            }\r\n        }\r\n\r\n        return maxLen;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9)));\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5)));\r\n        System.out.println(solve(List.of(1, 100)));\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3)));\r\n    }\r\n}""]",0,1
"[""ExecutorService forkJoinExecutor = new ForkJoinPool(30);\r\nExecutorService virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\r\n\r\nList<String> result1 = forkJoinExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nList<String> result2 = virtualThreadExecutor.submit(() ->\r\n        IntStream.rangeClosed(1, 1000)\r\n                .mapToObj(i -> i)\r\n                .parallel()\r\n                .map(i -> {\r\n                    try {\r\n                        MDC.put(\""key\"", \""value\"");\r\n                        return callExternalSystem(i);\r\n                    } finally {\r\n                        MDC.remove(\""key\"");\r\n                    }\r\n                })\r\n                .toList()\r\n).get();\r\n\r\nString callExternalSystem(int i) {\r\n    try {\r\n        Thread.sleep(10);\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n    }\r\n    return \""response \"" + i;\r\n}""]",0,1
"[""import okhttp3.*;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        String fileName = \""3$ Mù F'RANçé_33902_Country_5_202105.csv\"";\r\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8)\r\n                .replace(\""+\"", \""%20\"");\r\n\r\n        String contentDisposition = \""attachment; filename*=UTF-8''\"" + encodedFileName;\r\n\r\n        File file = new File(\""your_file_path_here\"");\r\n        byte[] data = java.nio.file.Files.readAllBytes(file.toPath());\r\n\r\n        RequestBody body = RequestBody.create(data, MediaType.parse(\""application/octet-stream\""));\r\n\r\n        Request request = new Request.Builder()\r\n                .url(\""https://your_url_here\"")\r\n                .addHeader(\""Content-Type\"", \""application/octet-stream\"")\r\n                .addHeader(\""Content-Disposition\"", contentDisposition)\r\n                .addHeader(\""Authorization\"", \""Bearer your_token_here\"")\r\n                .post(body)\r\n                .build();\r\n\r\n        Response response = client.newCall(request).execute();\r\n        System.out.println(response.code());\r\n        System.out.println(response.body().string());\r\n    }\r\n}""]",0,1
"[""// File: Parent.java\r\npackage example;\r\n\r\npublic abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\n// File: Child.java\r\npackage example;\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {\r\n    }\r\n}\r\n\r\n// File: Main.java\r\npackage another;\r\n\r\nimport example.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}""]",0,1
"[""import java.lang.foreign.*;\r\nimport java.lang.invoke.*;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\ntry (var arena = Arena.ofConfined()) {\r\n  SymbolLookup libc = Linker.nativeLinker().defaultLookup();\r\n  MethodHandle XOpenDisplay = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XOpenDisplay\"").get(), FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));\r\n  MethodHandle XInternAtom = Linker.nativeLinker()\r\n      .downcallHandle(libc.find(\""XInternAtom\"").get(), FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n  MethodHandle XChangeProperty = // already generated by jextract\r\n      Xlib_h.XChangeProperty;\r\n  MethodHandle XFlush = Xlib_h.XFlush;\r\n\r\n  MemorySegment display = (MemorySegment) XOpenDisplay.invoke(MemorySegment.NULL);\r\n  int screen = 0; // default screen\r\n\r\n  MemorySegment atomName = arena.allocateUtf8String(\""_NET_WM_XAPP_PROGRESS\"");\r\n  int atom = (int) XInternAtom.invoke(display, atomName, 0);\r\n\r\n  long window = rawHandle; // from JavaFX\r\n\r\n  for (int i = 0; i <= 100; i += 20) {\r\n      MemorySegment value = arena.allocate(ValueLayout.JAVA_LONG, i);\r\n      XChangeProperty.invoke(display, window, atom,\r\n              /* type = CARDINAL */ 6, /* format = 32 */ 32,\r\n              /* mode replace */ 0, value, 1);\r\n      XFlush.invoke(display);\r\n      Thread.sleep(500);\r\n  }\r\n}""]",0,1
"[""import org.yaml.snakeyaml.Yaml;\r\nimport org.yaml.snakeyaml.constructor.Constructor;\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Yaml yaml = new Yaml();\r\n        try (InputStream input = new FileInputStream(\""config.yaml\"")) {\r\n            Map<String, Object> all = yaml.load(input);\r\n            Map<String, Object> part = (Map<String, Object>) all.get(\""interesting-setup\"");\r\n\r\n            Yaml customYaml = new Yaml(new Constructor(InterestingSetup.class));\r\n            String serialized = new Yaml().dump(part);\r\n            InterestingSetup setup = customYaml.load(serialized);\r\n\r\n            System.out.println(setup.port);\r\n            System.out.println(setup.validation);\r\n            System.out.println(setup.parts);\r\n        }\r\n    }\r\n}""]",0,1
"[""public class EscapeXML {\r\n\r\n    private static final String[] ESCAPES;\r\n\r\n    static {\r\n        int size = '>' + 1;\r\n        ESCAPES = new String[size];\r\n        ESCAPES['<'] = \""&lt;\"";\r\n        ESCAPES['>'] = \""&gt;\"";\r\n        ESCAPES['&'] = \""&amp;\"";\r\n        ESCAPES['\\''] = \""&#039;\"";\r\n        ESCAPES['\""'] = \""&#034;\"";\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (c < ESCAPES.length && ESCAPES[c] != null) {\r\n                result.append(ESCAPES[c]);\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class EscapeXMLMap {\r\n\r\n    private static final Map<Character, String> ESCAPE_MAP = new HashMap<>();\r\n\r\n    static {\r\n        ESCAPE_MAP.put('<', \""&lt;\"");\r\n        ESCAPE_MAP.put('>', \""&gt;\"");\r\n        ESCAPE_MAP.put('&', \""&amp;\"");\r\n        ESCAPE_MAP.put('\\'', \""&#039;\"");\r\n        ESCAPE_MAP.put('\""', \""&#034;\"");\r\n    }\r\n\r\n    public static String escape(String input) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (char c : input.toCharArray()) {\r\n            if (ESCAPE_MAP.containsKey(c)) {\r\n                result.append(ESCAPE_MAP.get(c));\r\n            } else {\r\n                result.append(c);\r\n            }\r\n        }\r\n        return result.toString();\r\n    }\r\n}""]",0,1
"[""import java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\npublic class FindMultiples {\r\n\r\n    public int getSum(int n) throws InterruptedException, ExecutionException {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        Set<Integer> resultSet = ConcurrentHashMap.newKeySet();\r\n\r\n        Callable<Void> task3 = () -> {\r\n            for (int i = 3; i <= n; i += 3) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task5 = () -> {\r\n            for (int i = 5; i <= n; i += 5) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Callable<Void> task7 = () -> {\r\n            for (int i = 7; i <= n; i += 7) {\r\n                resultSet.add(i);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        List<Callable<Void>> tasks = Arrays.asList(task3, task5, task7);\r\n        executor.invokeAll(tasks);\r\n        executor.shutdown();\r\n\r\n        int sum = 0;\r\n        for (int num : resultSet) {\r\n            sum += num;\r\n        }\r\n\r\n        return sum;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FindMultiples fm = new FindMultiples();\r\n        System.out.println(fm.getSum(10));     // Output: 40\r\n        System.out.println(fm.getSum(1000));   // Output: 272066\r\n    }\r\n}""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonValue;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.util.UUID;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String content = \""\""\""\r\n            {\r\n                \""aggregateId\"": \""3f61aede-83dd-4049-a6ff-337887b6b807\""\r\n            }\r\n            \""\""\"";\r\n        Aggregate aggregate = mapper.readValue(content, Aggregate.class);\r\n        System.out.println(mapper.writeValueAsString(aggregate));\r\n    }\r\n}\r\n\r\nrecord AggregateId(@JsonValue UUID id) {\r\n    @JsonCreator\r\n    public AggregateId(UUID id) {\r\n        this.id = id;\r\n    }\r\n}\r\n\r\nclass Aggregate {\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(\""aggregateId\"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}""]",0,1
"[""public static void main(String[] args) {\r\n        String weekA = \""2012-W48\"";\r\n        String weekB = \""2013-W03\"";\r\n        DateTimeFormatter weekFormatter = new DateTimeFormatterBuilder()\r\n                .appendPattern(\""uuuu-'W'ww\"")\r\n                .parseDefaulting(WeekFields.ISO.dayOfWeek(), 1)\r\n                .toFormatter(Locale.US);\r\n        LocalDate dateA = LocalDate.parse(weekA, weekFormatter);\r\n        LocalDate dateB = LocalDate.parse(weekB, weekFormatter);\r\n        boolean isBefore = dateA.isBefore(dateB);\r\n        long weeksBetween = ChronoUnit.WEEKS.between(dateA, dateB);\r\n        System.out.println(\""isBefore: \"" + isBefore);\r\n        System.out.println(\""weeksBetween: \"" + weeksBetween);\r\n    }""]",0,1
"[""public DemoSecurityProblem() {\r\n        if (true) {\r\n            throw new RuntimeException(\""Construction failed!\"");\r\n        }\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Dangerous method executed!\"");\r\n    }\r\n    static MaliciousSubClass saved;\r\n    @Override\r\n    protected void finalize() {\r\n        saved = this;\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        try {\r\n            new MaliciousSubClass();\r\n        } catch (Exception ignored) {\r\n        }\r\n        System.gc();\r\n        Thread.sleep(1000);\r\n        if (MaliciousSubClass.saved != null) {\r\n            MaliciousSubClass.saved.doSomething();\r\n        } else {\r\n            System.out.println(\""No object was saved.\"");\r\n        }\r\n    }""]",0,1
"[""class Demo<T extends Exception> {\r\n    void doSomething() throws T {\r\n        // some logic\r\n    }\r\n}\r\n\r\nclass Example {\r\n    <T extends Exception> void call(Demo<T> demo) throws T {\r\n        demo.doSomething();\r\n    }\r\n\r\n    void test() {\r\n        Demo<RuntimeException> demo = new Demo<>();\r\n        call(demo);\r\n    }\r\n}""]",0,1
"[""public class EqualSplit {\r\n\r\n    public static boolean equalSplit(int[] arr) {\r\n        if (arr.length % 2 != 0)\r\n            return false;\r\n        return helper(arr, 0, 0, 0, 0);\r\n    }\r\n\r\n    private static boolean helper(int[] arr, int index, int sum1, int count1, int sum2) {\r\n        if (index == arr.length) {\r\n            return count1 == arr.length / 2 && sum1 == sum2;\r\n        }\r\n\r\n        boolean putInGroup1 = false;\r\n        if (count1 < arr.length / 2) {\r\n            putInGroup1 = helper(arr, index + 1, sum1 + arr[index], count1 + 1, sum2);\r\n        }\r\n\r\n        boolean putInGroup2 = helper(arr, index + 1, sum1, count1, sum2 + arr[index]);\r\n\r\n        return putInGroup1 || putInGroup2;\r\n    }\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(\""TEST\\nTEST\\nTEST\"");\r\n        label.setStyle(\""-fx-background-color: green;\"");\r\n\r\n        Tooltip tooltip = new Tooltip(\""TOOLTIP\"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_ENTERED, e -> {\r\n            Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n            tooltip.show(label, bounds.getMaxX(), bounds.getMaxY());\r\n        });\r\n\r\n        label.addEventHandler(MouseEvent.MOUSE_EXITED, e -> tooltip.hide());\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}""]",0,1
"[""public SliderSwitch() {\r\n        getStyleClass().add(\""slider-switch\"");\r\n    }\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new ObjectPropertyBase<>() {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n        @Override\r\n        public Object getBean() {\r\n            return SliderSwitch.this;\r\n        }\r\n        @Override\r\n        public String getName() {\r\n            return \""onAction\"";\r\n        }\r\n    };\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n    public final void setOnAction(EventHandler<ActionEvent> value) {\r\n        onActionProperty().set(value);\r\n    }\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onActionProperty().get();\r\n    }\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SliderSwitchSkin(this);\r\n    }\r\n    public SliderSwitchSkin(SliderSwitch control) {\r\n        super(control);\r\n        control.setOnMouseClicked(e -> {\r\n            control.fireEvent(new ActionEvent());\r\n        });\r\n    }\r\n    SliderSwitch source = (SliderSwitch) event.getSource();\r\n    System.out.println(\""Switch toggled: \"" + source);""]",0,1
"[""@ParameterizedTest\r\n    @MethodSource(\""hashMapProvider\"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(\""1\"");\r\n        assertNotNull(obj1);\r\n    }\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(\""1\"", \""Obj1\"");\r\n        map.put(\""2\"", \""Obj2\"");\r\n        return Stream.of(map);\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            \""2023-10-05T15:14:29.123456789Z\"",\r\n            \""2023-10-05T15:14:29.12345678Z\"",\r\n            \""2023-10-05T15:14:29.1234567Z\"",\r\n            \""2023-10-05T15:14:29.123456Z\"",\r\n            \""2023-10-05T15:14:29.12345Z\"",\r\n            \""2023-10-05T15:14:29.1234Z\"",\r\n            \""2023-10-05T15:14:29.123Z\"",\r\n            \""2023-10-05T15:14:29.12Z\"",\r\n            \""2023-10-05T15:14:29.1Z\"",\r\n            \""2023-10-05T15:14:29Z\""\r\n        };\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n            .appendPattern(\""yyyy-MM-dd'T'HH:mm:ss\"")\r\n            .optionalStart()\r\n            .appendFraction(ChronoField.NANO_OF_SECOND, 1, 9, true)\r\n            .optionalEnd()\r\n            .appendLiteral('Z')\r\n            .toFormatter();\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp.replace(\""Z\"", \""\""), formatter);\r\n                System.out.println(\""Parsed date: \"" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(\""Failed to parse: \"" + timestamp + \"" - \"" + e.getMessage());\r\n            }\r\n        }\r\n    }""]",0,1
"[""public static void main(String[] args) {  \r\n        String string1 = \""Great\"";  \r\n        int count;  \r\n        boolean hasDuplicate = false;\r\n        char string[] = string1.toCharArray();  \r\n        System.out.println(\""Duplicate characters in a given string:\"");  \r\n        for(int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for(int j = i + 1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicate = true;  \r\n            }  \r\n        }\r\n        if(!hasDuplicate) {  \r\n            System.out.println(\""no duplicates\"");  \r\n        }  \r\n    }""]",0,1
"[""private Group circle;\r\n    private Button rotate;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n    private int angle = 0;\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n        rotate = new Button(\""Rotate Right\"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(\""-fx-background-color: GRAY\"");\r\n        Scene scene = new Scene(pane, 500, 400);\r\n        primaryStage.setTitle(\""Four-Color Wheel\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public void processButtonPress(ActionEvent event) {\r\n        angle += 90;\r\n        circle.setRotate(angle);\r\n    }""]",0,1
"[""return builder.build(); // auto-configured by Spring Boot + micrometer tracing\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n        \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    export:\r\n      datadog:\r\n        enabled: true\r\n        api-key: YOUR_DD_API_KEY\r\n    propagation:\r\n      type: W3C\r\n    sampling:\r\n      probability: 1.0\r\n    return builder.build();\r\n    log.info(\""in method1\"");\r\n    return restTemplate.getForObject(\r\n      \""http://localhost:8090/method2?input=\"" + input, String.class);\r\n    log.info(\""in method2\"");\r\n    return \""ok\"";""]",0,1
"[""private boolean wireframe = false;\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        box.setMaterial(new PhongMaterial(Color.BLUE));\r\n        box.setDrawMode(DrawMode.FILL);\r\n        box.setTranslateX(250);\r\n        box.setTranslateY(250);\r\n        box.setTranslateZ(400);\r\n        box.getTransforms().add(new Rotate(30, Rotate.X_AXIS));\r\n        box.getTransforms().add(new Rotate(30, Rotate.Y_AXIS));\r\n        Button toggleButton = new Button(\""Toggle Draw Mode\"");\r\n        toggleButton.setOnAction(e -> {\r\n            if (wireframe) {\r\n                box.setDrawMode(DrawMode.FILL);\r\n            } else {\r\n                box.setDrawMode(DrawMode.LINE);\r\n            }\r\n            wireframe = !wireframe;\r\n        });\r\n        VBox controls = new VBox(toggleButton);\r\n        controls.setAlignment(Pos.TOP_CENTER);\r\n        controls.setSpacing(10);\r\n        Group root = new Group(box);\r\n        SubScene subScene = new SubScene(root, 500, 500, true, SceneAntialiasing.BALANCED);\r\n        subScene.setFill(Color.LIGHTGRAY);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-1000);\r\n        subScene.setCamera(camera);\r\n        VBox layout = new VBox(controls, subScene);\r\n        Scene scene = new Scene(layout, 500, 550);\r\n        primaryStage.setTitle(\""Draw Mode Toggle\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""static final ScopedValue<String> NAME = ScopedValue.newInstance();\r\n    public static void main(String[] args) throws InterruptedException {\r\n        try (var ts = new StructuredTaskScope<Void>()) {\r\n            ts.fork(() -> {\r\n                ScopedValue.runWhere(NAME, \""haha\"", () -> {\r\n                    System.out.println(\""Scoped value: \"" + NAME.get());\r\n                    return null;\r\n                });\r\n                return null;\r\n            });\r\n            ts.join();\r\n        }\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(\""-fx-background-color: black;\"");\r\n        Label testLabel = createTestLabel();\r\n        root.getChildren().add(testLabel);\r\n        Scene scene = new Scene(root, 600, 400);\r\n        scene.getStylesheets().add(\""styles.css\"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(\""Placeholder\\nText\"");\r\n        testLabel.setLayoutX(100);\r\n        testLabel.setLayoutY(100);\r\n        testLabel.getStyleClass().add(\""test-label\"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.addEventFilter(MouseEvent.MOUSE_MOVED, e -> {\r\n            Bounds bounds = testLabel.getLayoutBounds();\r\n            if (e.getX() >= 0 && e.getY() >= 0 &&\r\n                e.getX() <= bounds.getWidth() &&\r\n                e.getY() <= bounds.getHeight()) {\r\n                doSomething();\r\n            } else {\r\n                doSomethingElse();\r\n            }\r\n        });\r\n        return testLabel;\r\n    }\r\n    public void doSomething() {\r\n        System.out.println(\""Inside label.\"");\r\n    }\r\n    public void doSomethingElse() {\r\n        System.out.println(\""Outside label.\"");\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    -fx-background-color: blue;\r\n    -fx-border-color: red;\r\n    -fx-font-family: \""Harlow Solid Italic\"";\r\n    -fx-font-size: 100;\r\n    -fx-padding: -40 20 0 20;""]",0,1
"[""@Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        Label label1 = new Label(\""One two three\"");\r\n        TextField field1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(field1, 1, 0);\r\n        gridPane1.setHgap(20);\r\n        ColumnConstraints col1A = new ColumnConstraints();\r\n        ColumnConstraints col1B = new ColumnConstraints();\r\n        col1B.setHgrow(Priority.ALWAYS);\r\n        gridPane1.getColumnConstraints().addAll(col1A, col1B);\r\n        TitledPane titledPane1 = new TitledPane(\""Top\"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        GridPane gridPane2 = new GridPane();\r\n        Label label2 = new Label(\""Four five six seven\"");\r\n        TextField field2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(field2, 1, 0);\r\n        gridPane2.setHgap(20);\r\n        ColumnConstraints col2A = new ColumnConstraints();\r\n        ColumnConstraints col2B = new ColumnConstraints();\r\n        col2B.setHgrow(Priority.ALWAYS);\r\n        gridPane2.getColumnConstraints().addAll(col2A, col2B);\r\n        TitledPane titledPane2 = new TitledPane(\""Bottom\"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n        col1A.prefWidthProperty().bind(Bindings.createDoubleBinding(\r\n            () -> Math.max(label1.prefWidth(-1), label2.prefWidth(-1)),\r\n            label1.widthProperty(), label2.widthProperty()\r\n        ));\r\n        col2A.prefWidthProperty().bind(col1A.prefWidthProperty());\r\n        VBox root = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) {\r\n        Button menuButton = new Button(\""Menu\"");\r\n        ContextMenu contextMenu = new ContextMenu();\r\n        MenuItem item1 = new MenuItem(\""Option 1\"");\r\n        MenuItem item2 = new MenuItem(\""Option 2\"");\r\n        contextMenu.getItems().addAll(item1, item2);\r\n        menuButton.setOnAction(e -> {\r\n            Bounds bounds = menuButton.localToScreen(menuButton.getBoundsInLocal());\r\n            double x = bounds.getMinX();\r\n            double y = bounds.getMinY() - contextMenu.getHeight();\r\n            contextMenu.show(menuButton, x, y);\r\n        });\r\n        BorderPane root = new BorderPane();\r\n        root.setBottom(menuButton);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }""]",0,1
"[""public static String resourcesPath = \""C:\\\\Users\\\\java\\\\Desktop\\\\TestWaterMark\\\\\"";\r\n    public static String FILE_NAME = resourcesPath + \""test.pdf\"";\r\n    public static void main(String[] args) throws IOException {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n        String watermarkText = \""??? ??????\"";\r\n        String fontPath = resourcesPath + \""myCustomFont.ttf\"";\r\n        Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, BaseFont.EMBEDDED, 16);\r\n        BaseFont baseFont = arabicFont.getBaseFont();\r\n        PdfReader reader = new PdfReader(byteArray);\r\n        PdfStamper stamper = new PdfStamper(reader, baos);\r\n        int numberOfPages = reader.getNumberOfPages();\r\n        for (int i = 1; i <= numberOfPages; i++) {\r\n            Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n            PdfContentByte overContent = stamper.getOverContent(i);\r\n            PdfGState state = new PdfGState();\r\n            state.setFillOpacity(0.3f);\r\n            overContent.saveState();\r\n            overContent.setGState(state);\r\n            float textWidth = baseFont.getWidthPoint(watermarkText, 13);\r\n            float height = baseFont.getAscentPoint(watermarkText, 13) - baseFont.getDescentPoint(watermarkText, 13);\r\n            for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n                for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n                    overContent.beginText();\r\n                    overContent.setFontAndSize(baseFont, 13);\r\n                    overContent.showTextAligned(Element.ALIGN_CENTER, watermarkText, x, y, 45f);\r\n                    overContent.endText();\r\n                }\r\n            }\r\n            overContent.restoreState();\r\n        }\r\n        stamper.close();\r\n        reader.close();\r\n        byteArray = baos.toByteArray();\r\n        File outputFile = new File(resourcesPath + \""output.pdf\"");\r\n        if (outputFile.exists()) outputFile.delete();\r\n        Files.write(outputFile.toPath(), byteArray);\r\n    }""]",0,1
"[""private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n        this.buildGrid();\r\n    }\r\n    private void buildGrid() {\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }\r\n    }""]",0,1
"[""private RSAKey rsaKey;\r\n    private final DefaultUserDetailsService defaultUserDetailsService;\r\n    public SecurityConfig(DefaultUserDetailsService defaultUserDetailsService) {\r\n        this.defaultUserDetailsService = defaultUserDetailsService;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .cors(Customizer.withDefaults())\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\""/auth/**\"").permitAll()\r\n                        .anyRequest().authenticated()\r\n                )\r\n                .userDetailsService(defaultUserDetailsService)\r\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter())))\r\n                .build();\r\n    }\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {\r\n        return config.getAuthenticationManager();\r\n    }\r\n    @Bean\r\n    public PasswordEncoder getPasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    @Bean\r\n    public JWKSource<SecurityContext> jwkSource() {\r\n        rsaKey = generateRsa();\r\n        JWKSet jwkSet = new JWKSet(rsaKey);\r\n        return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\r\n    }\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        return NimbusJwtDecoder.withPublicKey(rsaKey.toRSAPublicKey()).build();\r\n    }\r\n    @Bean\r\n    JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwks) {\r\n        return new NimbusJwtEncoder(jwks);\r\n    }\r\n    @Bean\r\n    CorsConfigurationSource corsConfigurationSource() {\r\n        CorsConfiguration config = new CorsConfiguration();\r\n        config.setAllowedOrigins(List.of(\""http://localhost:4200\""));\r\n        config.setAllowedMethods(List.of(\""GET\"", \""POST\"", \""DELETE\""));\r\n        config.setAllowedHeaders(List.of(\""Authorization\"", \""Content-Type\""));\r\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\r\n        source.registerCorsConfiguration(\""/**\"", config);\r\n        return source;\r\n    }\r\n    private RSAKey generateRsa() {\r\n        try {\r\n            KeyPairGenerator generator = KeyPairGenerator.getInstance(\""RSA\"");\r\n            generator.initialize(2048);\r\n            KeyPair keyPair = generator.generateKeyPair();\r\n            return new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())\r\n                    .privateKey((RSAPrivateKey) keyPair.getPrivate())\r\n                    .keyID(UUID.randomUUID().toString())\r\n                    .build();\r\n        } catch (Exception e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n    private JwtAuthenticationConverter jwtAuthenticationConverter() {\r\n        JwtGrantedAuthoritiesConverter authoritiesConverter = new JwtGrantedAuthoritiesConverter();\r\n        authoritiesConverter.setAuthorityPrefix(\""ROLE_\"");\r\n        authoritiesConverter.setAuthoritiesClaimName(\""scope\"");\r\n        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\n        converter.setJwtGrantedAuthoritiesConverter(authoritiesConverter);\r\n        return converter;\r\n    }""]",0,1
"[""private final PDFDocument pdfDocument;\r\n    private final PSConverter converter;\r\n    public PDFProcessor(PDFDocument pdfDocument, PSConverter converter) {\r\n        this.pdfDocument = pdfDocument;\r\n        this.converter = converter;\r\n    }\r\n    public byte[] process(byte[] input) throws IOException {\r\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\r\n        pdfDocument.load(inputStream);\r\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n        converter.convert(pdfDocument, outputStream);\r\n        return outputStream.toByteArray();\r\n    }\r\n    @Mock\r\n    PDFDocument pdfDocument;\r\n    @Mock\r\n    PSConverter converter;\r\n    @InjectMocks\r\n    PDFProcessor processor;\r\n    @Test\r\n    void testProcess() throws IOException {\r\n        byte[] content = \""test\"".getBytes();\r\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\r\n        doNothing().when(pdfDocument).load(any(ByteArrayInputStream.class));\r\n        doAnswer(invocation -> {\r\n            ByteArrayOutputStream os = invocation.getArgument(1);\r\n            os.write(content);\r\n            return null;\r\n        }).when(converter).convert(any(), any(ByteArrayOutputStream.class));\r\n        byte[] result = processor.process(\""input\"".getBytes());\r\n        assertArrayEquals(content, result);\r\n    }\r\n    public void load(ByteArrayInputStream inputStream) {}\r\n    public void convert(PDFDocument document, ByteArrayOutputStream outputStream) {}""]",0,1
"[""@Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .requestMatchers(\""/\"").access(new WebExpressionAuthorizationManager(\""hasIpAddress('127.0.0.1')\""))\r\n                .anyRequest().authenticated()\r\n            )\r\n            .httpBasic(Customizer.withDefaults());\r\n        return http.build();\r\n    }""]",0,1
"[""private final AuthenticationManager authenticationManager;\r\n    public SecurityConfig(AuthenticationManager authenticationManager) {\r\n        this.authenticationManager = authenticationManager;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        BearerTokenAuthenticationFilter bearerFilter = new BearerTokenAuthenticationFilter(authenticationManager);\r\n        bearerFilter.setAuthenticationFailureHandler(new JwtAuthenticationFailureHandler());\r\n        http\r\n            .csrf(csrf -> csrf.disable())\r\n            .authorizeHttpRequests(auth -> auth\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n            )\r\n            .exceptionHandling(exceptions -> exceptions\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint())\r\n            )\r\n            .addFilterBefore(bearerFilter, BearerTokenAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n    public static class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n        @Override\r\n        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }\r\n    public static class JwtAuthenticationFailureHandler implements AuthenticationFailureHandler {\r\n        @Override\r\n        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException {\r\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        }\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        List<String> products = List.of(\r\n            \""NIVEA BODY LOTION EXPRESS HYDRATION 200 ML HYPERmart\"",\r\n            \""HYPERMART WINTER CREAM\"",\r\n            \""SKIN HYDRATION BALM\""\r\n        );\r\n        String query = \""HYDRATION LOTION\"";\r\n        List<String> results = searchProducts(products, query);\r\n        results.forEach(System.out::println);\r\n    }\r\n    static List<String> searchProducts(List<String> products, String query) {\r\n        String[] tokens = query.toLowerCase().split(\""\\\\s+\"");\r\n        Map<String, Integer> scored = new LinkedHashMap<>();\r\n        for (String product : products) {\r\n            String pl = product.toLowerCase();\r\n            int score = 0;\r\n            for (String word : tokens) {\r\n                if (pl.contains(word))  score++;\r\n            }\r\n            if (score > 0) scored.put(product, score);\r\n        }\r\n        List<Map.Entry<String,Integer>> list = new ArrayList<>(scored.entrySet());\r\n        list.sort((a,b) -> b.getValue().compareTo(a.getValue()));\r\n        List<String> out = new ArrayList<>();\r\n        for (var e : list) out.add(e.getKey());\r\n        return out;\r\n    }""]",0,1
"[""@Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int[] values = testState.values;\r\n        int length = values.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(values[i]);\r\n        }\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.AverageTime)\r\n    @OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        for (int value : testState.values) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n    @State(Scope.Thread)\r\n    public static class TestState {\r\n        int[] values;\r\n        @Setup(Level.Iteration)\r\n        public void setup() {\r\n            values = new int[1000];\r\n            for (int i = 0; i < values.length; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }""]",0,1
"[""@State(Scope.Benchmark)\r\n    public static class StateData {\r\n        public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n        public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n    }\r\n    private static void runInNewPool(Runnable task) {\r\n        ForkJoinPool pool = new ForkJoinPool();\r\n        try {\r\n            pool.submit(task).join();\r\n        } finally {\r\n            pool.shutdown();\r\n        }\r\n    }\r\n    private static void innerParallelLoop() {\r\n        StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    private static void innerSequentialLoop() {\r\n        StateData.innerLoop.stream().unordered().forEach(i -> {\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingNewPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            runInNewPool(NestedPerf::innerParallelLoop);\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerSequentialLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    @Benchmark\r\n    @BenchmarkMode(Mode.Throughput)\r\n    @OutputTimeUnit(TimeUnit.SECONDS)\r\n    public void testingCommonPool(Blackhole bh) {\r\n        StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n            innerParallelLoop();\r\n            bh.consume(i);\r\n        });\r\n    }\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(NestedPerf.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n        new Runner(opt).run();\r\n    }""]",0,1
"[""private static final int DIVISIONS = 64;\r\n    private static final float RADIUS = 200;\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TriangleMesh mesh = createTexturedSphere(RADIUS, DIVISIONS);\r\n        MeshView earth = new MeshView(mesh);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(getClass().getResourceAsStream(\""/images/earth2.jpg\"")));\r\n        earth.setMaterial(material);\r\n        Group root = new Group(earth);\r\n        Scene scene = new Scene(root, 800, 600, true);\r\n        scene.setFill(Color.BLACK);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-600);\r\n        scene.setCamera(camera);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Textured Earth Sphere\"");\r\n        primaryStage.show();\r\n    }\r\n    private TriangleMesh createTexturedSphere(float radius, int divisions) {\r\n        TriangleMesh mesh = new TriangleMesh();\r\n        int div = divisions;\r\n        int pointCount = (div + 1) * (div + 1);\r\n        float[] points = new float[pointCount * 3];\r\n        float[] texCoords = new float[pointCount * 2];\r\n        int[] faces = new int[div * div * 6 * 2];\r\n        int idx = 0, tidx = 0;\r\n        for (int y = 0; y <= div; y++) {\r\n            double phi = Math.PI * y / div;\r\n            for (int x = 0; x <= div; x++) {\r\n                double theta = 2 * Math.PI * x / div;\r\n                float px = (float) (radius * Math.sin(phi) * Math.cos(theta));\r\n                float py = (float) (radius * Math.cos(phi));\r\n                float pz = (float) (radius * Math.sin(phi) * Math.sin(theta));\r\n                points[idx++] = px;\r\n                points[idx++] = py;\r\n                points[idx++] = pz;\r\n                texCoords[tidx++] = (float) x / div;\r\n                texCoords[tidx++] = (float) y / div;\r\n            }\r\n        }\r\n        int fidx = 0;\r\n        for (int y = 0; y < div; y++) {\r\n            for (int x = 0; x < div; x++) {\r\n                int p00 = y * (div + 1) + x;\r\n                int p01 = p00 + 1;\r\n                int p10 = p00 + div + 1;\r\n                int p11 = p10 + 1;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p10; faces[fidx++] = p10;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p00; faces[fidx++] = p00;\r\n                faces[fidx++] = p11; faces[fidx++] = p11;\r\n                faces[fidx++] = p01; faces[fidx++] = p01;\r\n            }\r\n        }\r\n        mesh.getPoints().setAll(points);\r\n        mesh.getTexCoords().setAll(texCoords);\r\n        mesh.getFaces().setAll(faces);\r\n        return mesh;\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""public static void go(Short n) {\r\n        System.out.println(\""Short\"");\r\n    }\r\n    public static void go(int n) {\r\n        System.out.println(\""int\"");\r\n    }\r\n    public static void main(String[] args) {\r\n        short x = 11;\r\n        go(x);\r\n    }""]",0,1
"[""@Bean\r\n    fun requestSemaphore(): Semaphore {\r\n        return Semaphore(50)\r\n    }\r\n    @Bean\r\n    fun filter(semaphore: Semaphore): FilterRegistrationBean<Filter> {\r\n        val filter = Filter { request, response, chain ->\r\n            if (semaphore.tryAcquire(1, TimeUnit.SECONDS)) {\r\n                try {\r\n                    chain.doFilter(request, response)\r\n                } finally {\r\n                    semaphore.release()\r\n                }\r\n            } else {\r\n                (response as HttpServletResponse).status = HttpServletResponse.SC_SERVICE_UNAVAILABLE\r\n                response.writer.write(\""Too many concurrent requests\"")\r\n            }\r\n        }\r\n        val registration = FilterRegistrationBean<Filter>()\r\n        registration.filter = filter\r\n        registration.order = Ordered.HIGHEST_PRECEDENCE\r\n        return registration\r\n    }""]",0,1
"[""public static final String PATH_TO_STYLESHEET = App.class.getResource(\""/style/style.css\"").toExternalForm();\r\n    public static final String PATH_TO_IMG = App.class.getResource(\""/img/logo.png\"").toExternalForm();\r\n    public static final String PATH_TO_SOUNDS = App.class.getResource(\""/sound/click.wav\"").toExternalForm();\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        Scene scene = new Scene(root, 400, 300);\r\n        scene.getStylesheets().add(PATH_TO_STYLESHEET);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        Rectangle background = new Rectangle(500, 500, Color.RED);\r\n        Button testButton = new Button(\""Test\"");\r\n        testButton.setStyle(\""-fx-background-color: green;\"");\r\n        testButton.setLayoutX(200);\r\n        testButton.setLayoutY(200);\r\n        pane.getChildren().addAll(background, testButton);\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), background);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n        Scene scene = new Scene(pane, 500, 500);\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n        stage.setTitle(\""Test\"");\r\n        stage.setResizable(false);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = \""This is the text\"";\r\n            String filePath = \""C:\\\\Users\\\\Nirmalw\\\\Desktop\\\\Projects\\\\QR\\\\test\\\\test_img\\\\my_QR_with_text.png\"";\r\n            String charset = \""UTF-8\"";\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n            BitMatrix matrix = new MultiFormatWriter().encode(\r\n                    new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n            BufferedImage combined = new BufferedImage(500, 550, BufferedImage.TYPE_INT_RGB);\r\n            Graphics2D g = combined.createGraphics();\r\n            g.setColor(Color.WHITE);\r\n            g.fillRect(0, 0, 500, 550);\r\n            g.drawImage(qrImage, 0, 0, null);\r\n            g.setColor(Color.BLACK);\r\n            g.setFont(new Font(\""Arial\"", Font.BOLD, 20));\r\n            g.drawString(\""User Name: John\"", 20, 520);\r\n            g.drawString(\""Event: Demo\"", 300, 520);\r\n            g.dispose();\r\n            ImageIO.write(combined, \""png\"", new File(filePath));\r\n            System.out.println(\""QR Code with text created successfully!\"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }""]",0,1
"[""@Value(\""${path}\"")\r\n    private String path;\r\n    @Bean\r\n    public Path directoryPath() {\r\n        return Paths.get(path);\r\n    }\r\n    private final Path directoryPath;\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try (WatchService watchService = FileSystems.getDefault().newWatchService()) {\r\n                directoryPath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);\r\n                WatchKey key;\r\n                while ((key = watchService.take()) != null) {\r\n                    for (WatchEvent<?> event : key.pollEvents()) {\r\n                        // actions on created files\r\n                    }\r\n                    key.reset();\r\n                }\r\n            } catch (Exception e) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ie) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private final Path directoryPath;\r\n    @Async\r\n    @EventListener(ApplicationReadyEvent.class)\r\n    public void startWatching() {\r\n        while (true) {\r\n            try (WatchService watchService = FileSystems.getDefault().newWatchService()) {\r\n                directoryPath.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);\r\n                WatchKey key;\r\n                while ((key = watchService.take()) != null) {\r\n                    for (WatchEvent<?> event : key.pollEvents()) {\r\n                        // actions on created files\r\n                    }\r\n                    key.reset();\r\n                }\r\n            } catch (Exception e) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException ie) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }""]",0,1
"[""@Resource(lookup = \""java:/queue/testQueue\"")\r\n    private Queue queue;\r\n    @Inject\r\n    @JMSConnectionFactory(\""java:/jms/remoteCF\"")\r\n    private JMSContext context;\r\n    @PostConstruct\r\n    public void init() {\r\n        new Thread(this::sendAndReceive).start();\r\n    }\r\n    private void sendAndReceive() {\r\n        for (int i = 0; i < 5; i++) {\r\n            String message = \""Message \"" + i;\r\n            context.createProducer().send(queue, message);\r\n            JMSConsumer consumer = context.createConsumer(queue);\r\n            String received = consumer.receiveBody(String.class, 5000);\r\n            System.out.println(\""Received: \"" + received);\r\n        }\r\n    }\r\n    <remote-connector name=\""remote-artemis\"" socket-binding=\""remote-artemis\""/>\r\n    <pooled-connection-factory\r\n        name=\""remote-artemis\""\r\n        entries=\""java:/jms/remoteCF\""\r\n        connectors=\""remote-artemis\""\r\n        user=\""${artemismq.user}\""\r\n        password=\""${artemismq.password}\""\r\n        enable-amq1-prefix=\""true\""/>\r\n    <external-jms-queue name=\""testQueue\"" entries=\""java:/queue/testQueue\""/>\r\n    <remote-destination host=\""${artemismq.host}\"" port=\""${artemismq.port}\""/>""]",0,1
"[""public static class Record {\r\n        private String sourceNode;\r\n        private String destinationNode;\r\n        private String weekIndex;\r\n        private int quantity;\r\n        public Record(String weekIndex, String sourceNode, String destinationNode, int quantity) {\r\n            this.weekIndex = weekIndex;\r\n            this.sourceNode = sourceNode;\r\n            this.destinationNode = destinationNode;\r\n            this.quantity = quantity;\r\n        }\r\n        public String getSourceNode() { return sourceNode; }\r\n        public String getDestinationNode() { return destinationNode; }\r\n        public String getWeekIndex() { return weekIndex; }\r\n        public int getQuantity() { return quantity; }\r\n    }\r\n    public static class OutputRecord {\r\n        private String weekIndex;\r\n        private String sourceNode;\r\n        private String destinationNode;\r\n        private double percentage;\r\n        public OutputRecord(String weekIndex, String sourceNode, String destinationNode, double percentage) {\r\n            this.weekIndex = weekIndex;\r\n            this.sourceNode = sourceNode;\r\n            this.destinationNode = destinationNode;\r\n            this.percentage = percentage;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return weekIndex + \"" \"" + sourceNode + \"" \"" + destinationNode + \"" \"" + String.format(\""%.2f%%\"", percentage);\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(\""week1\"", \""source1\"", \""destination1\"", 100),\r\n            new Record(\""week1\"", \""source1\"", \""destination2\"", 200),\r\n            new Record(\""week1\"", \""source2\"", \""destination1\"", 200),\r\n            new Record(\""week1\"", \""source2\"", \""destination2\"", 100),\r\n            new Record(\""week2\"", \""source1\"", \""destination1\"", 200),\r\n            new Record(\""week2\"", \""source1\"", \""destination2\"", 200)\r\n        );\r\n        Map<String, Map<String, List<Record>>> grouped = records.stream()\r\n            .collect(Collectors.groupingBy(Record::getWeekIndex, Collectors.groupingBy(Record::getSourceNode)));\r\n        List<OutputRecord> result = grouped.entrySet().stream()\r\n            .flatMap(weekEntry -> weekEntry.getValue().entrySet().stream()\r\n                .flatMap(sourceEntry -> {\r\n                    int total = sourceEntry.getValue().stream().mapToInt(Record::getQuantity).sum();\r\n                    return sourceEntry.getValue().stream()\r\n                        .map(r -> new OutputRecord(r.getWeekIndex(), r.getSourceNode(), r.getDestinationNode(),\r\n                            (r.getQuantity() * 100.0) / total));\r\n                }))\r\n            .collect(Collectors.toList());\r\n        result.forEach(System.out::println);\r\n    }""]",0,1
"[""public static class Puzzle {\r\n        String name;\r\n        int level;\r\n        public Puzzle(String name, int level) {\r\n            this.name = name;\r\n            this.level = level;\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        List<Puzzle> puzzles = List.of(\r\n            new Puzzle(\""Puzzle1\"", 1),\r\n            new Puzzle(\""Puzzle2\"", 2),\r\n            new Puzzle(\""Puzzle3\"", 3),\r\n            new Puzzle(\""Puzzle4\"", 4)\r\n        );\r\n        Gson gson = new Gson();\r\n        List<InsertOneModel<Document>> bulkWrites = puzzles.parallelStream()\r\n            .map(gson::toJson)\r\n            .map(Document::parse)\r\n            .map(InsertOneModel::new)\r\n            .toList();\r\n        bulkWrites.forEach(System.out::println);\r\n    }""]",0,1
"[""public static void main(String[] args) throws JsonProcessingException {\r\n        Map<String, Integer> originalMap = new HashMap<>();\r\n        originalMap.put(\""test_first\"", 1);\r\n        originalMap.put(\""test_second\"", 2);\r\n        Map<String, Integer> camelCaseMap = originalMap.entrySet()\r\n                .stream()\r\n                .collect(Collectors.toMap(\r\n                        entry -> toCamelCase(entry.getKey()),\r\n                        Map.Entry::getValue\r\n                ));\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        String json = mapper.writeValueAsString(camelCaseMap);\r\n        System.out.println(json);\r\n    }\r\n    private static String toCamelCase(String snakeCase) {\r\n        String[] parts = snakeCase.split(\""_\"");\r\n        StringBuilder camelCase = new StringBuilder(parts[0]);\r\n        for (int i = 1; i < parts.length; i++) {\r\n            camelCase.append(parts[i].substring(0, 1).toUpperCase());\r\n            camelCase.append(parts[i].substring(1));\r\n        }\r\n        return camelCase.toString();\r\n    }""]",0,1
"[""@Autowired\r\n    private DataSource dataSource;\r\n    @Autowired\r\n    private JwtTokenProvider jwtTokenProvider;\r\n    @Bean\r\n    public static PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors().and()\r\n                .authorizeRequests()\r\n                .antMatchers(\""/resources/**\"", \""/error\"", \""/api/user/**\"").permitAll()\r\n                .antMatchers(\""/api/admin/**\"").hasRole(\""ADMIN\"")\r\n                .anyRequest().fullyAuthenticated()\r\n                .and()\r\n                .logout().permitAll()\r\n                .logoutRequestMatcher(new AntPathRequestMatcher(\""/api/user/logout\"", \""POST\""))\r\n                .and()\r\n                .formLogin().loginPage(\""/api/user/login\"").and()\r\n                .httpBasic().and()\r\n                .csrf().disable();\r\n        http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtTokenProvider));\r\n    }\r\n    @Autowired\r\n    public void configAuthentication(AuthenticationManagerBuilder authBuilder) throws Exception {\r\n        authBuilder.jdbcAuthentication()\r\n                .dataSource(dataSource)\r\n                .passwordEncoder(new BCryptPasswordEncoder())\r\n                .usersByUsernameQuery(\""select username, password, enabled from usr01 where username=?\"")\r\n                .authoritiesByUsernameQuery(\""select username, role from usr01 where username=?\"");\r\n    }\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer() {\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(\""/**\"").allowedOrigins(\""*\"").allowedMethods(\""*\"");\r\n            }\r\n        };\r\n    }\r\n    @Bean\r\n    @Override\r\n    public AuthenticationManager authenticationManagerBean() throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e308;\r\n        double c = a * b;\r\n        double d = c / b;\r\n        System.out.println(\""Non-strictfp result: \"" + d);\r\n    }\r\n    public static void main(String[] args) {\r\n        double a = 1e308;\r\n        double b = 1e308;\r\n        double c = a * b;\r\n        double d = c / b;\r\n        System.out.println(\""Strictfp result: \"" + d);\r\n    }""]",0,1
"[""int to, weight;\r\n    Edge(int t, int w) {\r\n        to = t;\r\n        weight = w;\r\n    }\r\n    static int result;\r\n    static long target;\r\n    static Map<Long, Integer> map;\r\n    public static int solve(List<List<Edge>> T, long L) {\r\n        target = L;\r\n        result = Integer.MAX_VALUE;\r\n        boolean[] visited = new boolean[T.size()];\r\n        decompose(0, T, visited);\r\n        return result == Integer.MAX_VALUE ? -1 : result;\r\n    }\r\n    static int dfsSize(int node, int parent, List<List<Edge>> T, boolean[] visited) {\r\n        int size = 1;\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                size += dfsSize(e.to, node, T, visited);\r\n            }\r\n        }\r\n        return size;\r\n    }\r\n    static int dfsCentroid(int node, int parent, int size, List<List<Edge>> T, boolean[] visited) {\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                int childSize = dfsSize(e.to, node, T, visited);\r\n                if (childSize > size / 2) return dfsCentroid(e.to, node, size, T, visited);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    static void collect(int node, int parent, long sum, int depth, List<List<Edge>> T, boolean[] visited, List<long[]> paths) {\r\n        if (sum > target) return;\r\n        paths.add(new long[]{sum, depth});\r\n        for (Edge e : T.get(node)) {\r\n            if (e.to != parent && !visited[e.to]) {\r\n                collect(e.to, node, sum + e.weight, depth + 1, T, visited, paths);\r\n            }\r\n        }\r\n    }\r\n    static void process(int node, List<List<Edge>> T, boolean[] visited) {\r\n        map = new HashMap<>();\r\n        map.put(0L, 0);\r\n        for (Edge e : T.get(node)) {\r\n            if (visited[e.to]) continue;\r\n            List<long[]> paths = new ArrayList<>();\r\n            collect(e.to, node, e.weight, 1, T, visited, paths);\r\n            for (long[] path : paths) {\r\n                long remain = target - path[0];\r\n                if (map.containsKey(remain)) {\r\n                    result = Math.min(result, map.get(remain) + (int) path[1]);\r\n                }\r\n            }\r\n            for (long[] path : paths) {\r\n                map.put(path[0], Math.min(map.getOrDefault(path[0], Integer.MAX_VALUE), (int) path[1]));\r\n            }\r\n        }\r\n    }\r\n    static void decompose(int root, List<List<Edge>> T, boolean[] visited) {\r\n        int size = dfsSize(root, -1, T, visited);\r\n        int centroid = dfsCentroid(root, -1, size, T, visited);\r\n        visited[centroid] = true;\r\n        process(centroid, T, visited);\r\n        for (Edge e : T.get(centroid)) {\r\n            if (!visited[e.to]) {\r\n                decompose(e.to, T, visited);\r\n            }\r\n        }\r\n    }\r\n    static void putEdge(List<List<Edge>> T, int u, int v, int w) {\r\n        T.get(u).add(new Edge(v, w));\r\n        T.get(v).add(new Edge(u, w));\r\n    }\r\n    public static void main(String[] args) {\r\n        List<List<Edge>> T = new ArrayList<>();\r\n        int N = 8;\r\n        for (int i = 0; i < N; i++) T.add(new ArrayList<>());\r\n        putEdge(T, 0, 1, 2);\r\n        putEdge(T, 1, 2, 1);\r\n        putEdge(T, 1, 3, 2);\r\n        putEdge(T, 2, 6, 1);\r\n        putEdge(T, 6, 7, 1);\r\n        putEdge(T, 3, 4, 1);\r\n        putEdge(T, 3, 5, 4);\r\n        System.out.println(Solver.solve(T, 5L));\r\n    }""]",0,1
"[""private final MemorySegment segment;\r\n    public BigLongArray(long size) {\r\n        this.segment = Arena.ofAuto().allocate(size * ValueLayout.JAVA_LONG.byteSize());\r\n    }\r\n    public void set(long index, long value) {\r\n        segment.setAtIndex(ValueLayout.JAVA_LONG, index, value);\r\n    }\r\n    public long get(long index) {\r\n        return segment.getAtIndex(ValueLayout.JAVA_LONG, index);\r\n    }\r\n    public long length() {\r\n        return segment.byteSize() / ValueLayout.JAVA_LONG.byteSize();\r\n    }\r\n    public static void main(String[] args) {\r\n        BigLongArray array = new BigLongArray(5_000_000_000L);\r\n        array.set(4_000_000_000L, 123456789L);\r\n        System.out.println(array.get(4_000_000_000L));\r\n    }""]",0,1
"[""BufferedImage bulletImage;\r\n    Timer timer = new Timer(16, this);\r\n    List<Bullet> bullets = new ArrayList<>();\r\n    Map<Integer, BufferedImage> rotationCache = new HashMap<>();\r\n    public BulletGame() {\r\n        bulletImage = createBulletImage();\r\n        for (int i = 0; i < 10000; i++) {\r\n            bullets.add(new Bullet(Math.random() * getWidth(), Math.random() * getHeight(), Math.random() * 360));\r\n        }\r\n        timer.start();\r\n    }\r\n    BufferedImage createBulletImage() {\r\n        BufferedImage img = new BufferedImage(20, 20, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g = img.createGraphics();\r\n        g.setColor(Color.RED);\r\n        g.fillOval(5, 5, 10, 10);\r\n        g.dispose();\r\n        return img;\r\n    }\r\n    BufferedImage getRotatedImage(double angle) {\r\n        int key = (int) angle;\r\n        if (!rotationCache.containsKey(key)) {\r\n            int w = bulletImage.getWidth();\r\n            int h = bulletImage.getHeight();\r\n            BufferedImage rotated = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n            Graphics2D g = rotated.createGraphics();\r\n            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(angle), w / 2.0, h / 2.0);\r\n            g.setTransform(at);\r\n            g.drawImage(bulletImage, 0, 0, null);\r\n            g.dispose();\r\n            rotationCache.put(key, rotated);\r\n        }\r\n        return rotationCache.get(key);\r\n    }\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        for (Bullet b : bullets) {\r\n            BufferedImage img = getRotatedImage(b.angle);\r\n            g.drawImage(img, (int) b.x, (int) b.y, null);\r\n        }\r\n    }\r\n    public void actionPerformed(ActionEvent e) {\r\n        repaint();\r\n    }\r\n    static class Bullet {\r\n        double x, y;\r\n        int angle;\r\n        Bullet(double x, double y, double angle) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.angle = (int) angle;\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\""Bullet Hell\"");\r\n        BulletGame game = new BulletGame();\r\n        frame.add(game);\r\n        frame.setSize(800, 600);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }""]",0,1
"[""<dependency>\r\n        <groupId>org.graalvm.sdk</groupId>\r\n        <artifactId>graal-sdk</artifactId>\r\n        <version>21.1.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.graalvm.js</groupId>\r\n        <artifactId>js</artifactId>\r\n        <version>21.1.0</version>\r\n    </dependency>\r\n    public static void main(String[] args) {\r\n        try (Context context = Context.create(\""js\"")) {\r\n            Value result = context.eval(\""js\"", \""1 + 2\"");\r\n            System.out.println(\""Result: \"" + result.asInt());\r\n            context.eval(\""js\"", \""console.log('Hello from GraalVM');\"");\r\n        }\r\n    }""]",0,1
"[""public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(\""[a-zA-Z ]+\"");\r\n    }\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + \"" is an invalid sentence\"";\r\n        }\r\n        String[] words = sentence.trim().split(\""\\\\s+\"");\r\n        if (words.length <= 2) {\r\n            return \""Invalid Length\"";\r\n        }\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n        StringBuilder result = new StringBuilder();\r\n        result.append(words[0]);\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            result.append(\"" \"");\r\n            result.append(new StringBuilder(words[i]).reverse().toString());\r\n        }\r\n        result.append(\"" \"");\r\n        result.append(words[words.length - 1]);\r\n        return result.toString();\r\n    }\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\""Enter the sentence\"");\r\n        String input = sc.nextLine();\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n        System.out.println(result);\r\n        sc.close();\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(\""Option 1\"", \""Option 2\"", \""Option 3\"");\r\n        comboBox.getStyleClass().add(\""yellowed\"");\r\n        comboBox.setSkin(new ComboBoxListViewSkin<>(comboBox) {\r\n            {\r\n                ListView<?> listView = (ListView<?>) getPopupContent();\r\n                listView.getStyleClass().add(\""yellowed-popup\"");\r\n            }\r\n        });\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(getClass().getResource(\""test.css\"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n    -fx-background-color: yellow;\r\n    -fx-background-color: yellow;""]",0,1
"[""@FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    public Custom() {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\""Custom.fxml\""));\r\n        fxmlLoader.setRoot(this);\r\n        fxmlLoader.setController(this);\r\n        try {\r\n            fxmlLoader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n      <Button fx:id=\""plusBtn\"" text=\""+\""/>\r\n      <Label fx:id=\""label\"" text=\""Label\""/>\r\n      <Button fx:id=\""minusBtn\"" text=\""-\""/>\r\n    @FXML private Custom cc;\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n        cc.newText(\""Test\"");\r\n    }\r\n      <Custom fx:id=\""cc\""/>\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\""views/fxml/Menu.fxml\""));\r\n        Scene scene = new Scene(loader.load(), 400, 400);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    opens app to javafx.fxml;\r\n    opens app.controllers to javafx.fxml;\r\n    opens app.components to javafx.fxml;\r\n    exports app;\r\n    exports app.components;""]",0,1
"[""ReportConverter reportConverter = Mockito.mock(ReportConverter.class);\r\n    ReportRepository reportRepository = Mockito.mock(ReportRepository.class);\r\n    ReportService sut = new ReportService(reportConverter, reportRepository);\r\n    User user = new User();\r\n    Pageable pageable = Mockito.mock(Pageable.class);\r\n    ReportSpecification reportSpecification = new ReportSpecification();\r\n    List<ReportPageResponse> reportPageResponses = List.of(new ReportPageResponse());\r\n    ReportPageRequest reportPageRequest = new ReportPageRequest();\r\n    @Test\r\n    void get_report_page() {\r\n        when(reportConverter.toReportSpecification(user, reportPageRequest)).thenReturn(reportSpecification);\r\n        when(reportRepository.findAll(reportSpecification, PageRequest.of(1, 100))).thenReturn(null);\r\n        when(reportConverter.toReportPageResponse(Mockito.any())).thenReturn(reportPageResponses);\r\n        try (MockedConstruction<PageImpl> pageMock = Mockito.mockConstruction(PageImpl.class,\r\n                (mock, context) -> {\r\n                    when(mock.getTotalElements()).thenReturn(123456L);\r\n                    when(mock.getTotalPages()).thenReturn(1);\r\n                    when(mock.getContent()).thenReturn(reportPageResponses);\r\n                })) {\r\n            Page<ReportPageResponse> actual = sut.getReportPage(user, reportPageRequest);\r\n            PageImpl<ReportPageResponse> constructed = pageMock.constructed().get(0);\r\n            assertThat(actual.getTotalElements()).isEqualTo(constructed.getTotalElements());\r\n            assertThat(actual.getTotalPages()).isEqualTo(constructed.getTotalPages());\r\n            assertThat(actual.getContent()).isEqualTo(constructed.getContent());\r\n        }\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage primaryStage) {\r\n        BorderPane root = new BorderPane();\r\n        Scene scene = new Scene(root, 400, 400);\r\n        StackPane stack = new StackPane();\r\n        Text text = new Text(\""Hello there StackOverflow, how are you? (:\"");\r\n        text.setFont(Font.font(16));\r\n        stack.getChildren().add(text);\r\n        root.setCenter(stack);\r\n        Color startColor = Color.RED;\r\n        Color endColor = Color.BLUE;\r\n        Timeline timeline = new Timeline(\r\n            new KeyFrame(Duration.ZERO, e -> {\r\n                text.setFill(startColor);\r\n            }),\r\n            new KeyFrame(Duration.seconds(2), e -> {\r\n                text.setFill(endColor);\r\n            })\r\n        );\r\n        timeline.setCycleCount(1);\r\n        timeline.play();\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""private Map<String, String> prop;\r\n    public Map<String, String> getProp() {\r\n        return prop;\r\n    }\r\n    public void setProp(Map<String, String> prop) {\r\n        this.prop = prop;\r\n    }\r\n    private final RootProperties rootProperties;\r\n    public TestController(RootProperties rootProperties) {\r\n        this.rootProperties = rootProperties;\r\n    }\r\n    @GetMapping(\""/props\"")\r\n    public Map<String, String> getProps() {\r\n        return rootProperties.getProp();\r\n    }\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) throws Exception {\r\n        WebView webView = new WebView();\r\n        File htmlFile = new File(\""src/main/resources/embeddedMap.html\"");\r\n        String url = htmlFile.toURI().toString();\r\n        webView.getEngine().load(url);\r\n        StackPane root = new StackPane(webView);\r\n        Scene scene = new Scene(root, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    html, body {\r\n      height: 100%;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    #map {\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n    function initMap() {\r\n      new google.maps.Map(document.getElementById(\""map\""), {\r\n        zoom: 15,\r\n        center: { lat: 32.99069, lng: -106.97436 },\r\n        mapTypeId: \""terrain\""\r\n      });\r\n    }\r\n    src=\""https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap\"">""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n        File projectDir = new File(\""src/main/java\"");\r\n        TypeSolver typeSolver = new CombinedTypeSolver(new ReflectionTypeSolver(), new JavaParserTypeSolver(projectDir));\r\n        SymbolResolver resolver = new JavaSymbolSolver(typeSolver);\r\n        StaticJavaParser.getConfiguration().setSymbolResolver(resolver);\r\n        File sourceFile = new File(\""src/main/java/Example.java\"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDecl -> {\r\n            System.out.println(\""Class: \"" + classDecl.getNameAsString());\r\n            Set<String> classFields = new HashSet<>();\r\n            classDecl.findAll(FieldDeclaration.class).forEach(fd ->\r\n                fd.getVariables().forEach(v -> classFields.add(v.getNameAsString()))\r\n            );\r\n            classDecl.findAll(MethodDeclaration.class).forEach(method -> {\r\n                System.out.println(\""  Method: \"" + method.getNameAsString());\r\n                Set<String> readFields = new HashSet<>();\r\n                Set<String> writeFields = new HashSet<>();\r\n                method.findAll(NameExpr.class).forEach(expr -> {\r\n                    try {\r\n                        ResolvedFieldDeclaration resolved = expr.resolve().asField();\r\n                        if (classFields.contains(resolved.getName())) {\r\n                            if (isWriteAccess(expr)) writeFields.add(resolved.getName());\r\n                            else readFields.add(resolved.getName());\r\n                        }\r\n                    } catch (Exception ignored) {\r\n                    }\r\n                });\r\n                method.findAll(FieldAccessExpr.class).forEach(expr -> {\r\n                    try {\r\n                        ResolvedFieldDeclaration resolved = expr.resolve().asField();\r\n                        if (classFields.contains(resolved.getName())) {\r\n                            if (isWriteAccess(expr)) writeFields.add(resolved.getName());\r\n                            else readFields.add(resolved.getName());\r\n                        }\r\n                    } catch (Exception ignored) {\r\n                    }\r\n                });\r\n                readFields.forEach(f -> System.out.println(\""    Read Field: \"" + f));\r\n                writeFields.forEach(f -> System.out.println(\""    Write Field: \"" + f));\r\n            });\r\n        });\r\n    }\r\n    private static boolean isWriteAccess(Expression expr) {\r\n        if (expr.getParentNode().isPresent()) {\r\n            return expr.getParentNode().get() instanceof AssignExpr &&\r\n                   ((AssignExpr) expr.getParentNode().get()).getTarget() == expr;\r\n        }\r\n        return false;\r\n    }""]",0,1
"[""Class<?> className() default Void.class;\r\n    @Annotation\r\n    private AnotherClass annotatedAttribute;\r\n    @Annotation(className = YetAnotherClass.class)\r\n    private AnotherClass overriddenAttribute;\r\n    public static void main(String[] args) throws Exception {\r\n        for (Field field : Main.class.getDeclaredFields()) {\r\n            if (field.isAnnotationPresent(Annotation.class)) {\r\n                Annotation annotation = field.getAnnotation(Annotation.class);\r\n                Class<?> clazz = annotation.className();\r\n                if (clazz == Void.class) {\r\n                    clazz = field.getType();\r\n                }\r\n                System.out.println(\""Field: \"" + field.getName() + \"" -> \"" + clazz.getName());\r\n            }\r\n        }\r\n    }""]",0,1
"[""private Trees trees;\r\n    @Override\r\n    public synchronized void init(javax.annotation.processing.ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        trees = Trees.instance(processingEnv);\r\n    }\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element rootElement : roundEnv.getRootElements()) {\r\n            TreePath path = trees.getPath(rootElement);\r\n            new TreePathScanner<Void, Void>() {\r\n                @Override\r\n                public Void visitSwitch(SwitchTree switchTree, Void unused) {\r\n                    ExpressionTree expression = switchTree.getExpression();\r\n                    TreePath exprPath = new TreePath(getCurrentPath(), expression);\r\n                    TypeMirror type = trees.getTypeMirror(exprPath);\r\n                    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\r\n                            \""Switch expression type: \"" + type.toString());\r\n                    return super.visitSwitch(switchTree, unused);\r\n                }\r\n            }.scan(path, null);\r\n        }\r\n        return false;\r\n    }\r\n    @Override\r\n    public SourceVersion getSupportedSourceVersion() {\r\n        return SourceVersion.latest();\r\n    }""]",0,1
"[""private final ObjectProvider<MyController> controllerProvider;\r\n    public ListItemFactory(ObjectProvider<MyController> controllerProvider) {\r\n        this.controllerProvider = controllerProvider;\r\n    }\r\n    public VBox createListItem() throws IOException {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\""/fxml/my-item.fxml\""));\r\n        loader.setControllerFactory(param -> controllerProvider.getObject());\r\n        return loader.load();\r\n    }\r\n    @FXML\r\n    private Label nameLabel;\r\n    public void setData(String name) {\r\n        nameLabel.setText(name);\r\n    }\r\n    @FXML\r\n    private VBox contentArea;\r\n    private final ListItemFactory listItemFactory;\r\n    public MainController(ListItemFactory listItemFactory) {\r\n        this.listItemFactory = listItemFactory;\r\n    }\r\n    public void populateList() {\r\n        for (int i = 0; i < 10; i++) {\r\n            try {\r\n                VBox item = listItemFactory.createListItem();\r\n                MyController controller = (MyController) item.getProperties().get(\""controller\"");\r\n                controller.setData(\""Item \"" + i);\r\n                contentArea.getChildren().add(item);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    <Label fx:id=\""nameLabel\""/>""]",0,1
"[""List<Double> r = Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0);\r\n    List<Double> nodes = Arrays.asList(0.0, 45.0, 90.0, 135.0, 180.0);\r\n    @Override\r\n    public void start(Stage stage) {\r\n        NumberAxis xAxis = new NumberAxis();\r\n        NumberAxis yAxis = new NumberAxis();\r\n        javafx.scene.chart.LineChart<Number, Number> chart = new javafx.scene.chart.LineChart<>(xAxis, yAxis);\r\n        chart.setCreateSymbols(true);\r\n        XYChart.Series<Number, Number> series = new XYChart.Series<>();\r\n        for (int i = 0; i < r.size(); i++) {\r\n            double angleRad = Math.toRadians(nodes.get(i));\r\n            double x = r.get(i) * Math.cos(angleRad);\r\n            double y = r.get(i) * Math.sin(angleRad);\r\n            series.getData().add(new XYChart.Data<>(x, y));\r\n        }\r\n        chart.getData().add(series);\r\n        Scene scene = new Scene(chart, 800, 600);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""@Override\r\n    protected void onCreate(Bundle savedInstanceState)\r\n    {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        Button OpenBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n        OpenBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v)\r\n            {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), \""ModalBottomSheet\"");\r\n            }\r\n        });\r\n    }\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n        return v;\r\n    }\r\n    @Override\r\n    public void onStart()\r\n    {\r\n        super.onStart();\r\n        View view = getView();\r\n        if (view != null)\r\n        {\r\n            view.getViewTreeObserver().addOnGlobalLayoutListener(\r\n                new ViewTreeObserver.OnGlobalLayoutListener() {\r\n                    @Override\r\n                    public void onGlobalLayout()\r\n                    {\r\n                        view.getViewTreeObserver().removeOnGlobalLayoutListener(this);\r\n                        View parent = (View) view.getParent();\r\n                        BottomSheetBehavior behavior = BottomSheetBehavior.from(parent);\r\n                        parent.getLayoutParams().height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n                        parent.requestLayout();\r\n                        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);\r\n                        behavior.setSkipCollapsed(true);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    xmlns:tools=\""http://schemas.android.com/tools\""\r\n    android:layout_width=\""match_parent\""\r\n    android:layout_height=\""match_parent\""\r\n    android:gravity=\""center\""\r\n    android:orientation=\""vertical\""\r\n    tools:context=\"".MainActivity\"">\r\n    <Button\r\n        android:id=\""@+id/open_bottom_sheet\""\r\n        android:layout_width=\""wrap_content\""\r\n        android:layout_height=\""wrap_content\""\r\n        android:text=\""Open Bottom Sheet\"" />\r\n    android:layout_width=\""match_parent\""\r\n    android:layout_height=\""match_parent\""\r\n    android:orientation=\""vertical\""\r\n    android:padding=\""16dp\"">\r\n    <!-- Your bottom sheet content here -->""]",0,1
"[""public static void main(String[] args) {\r\n        launch();\r\n    }\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(\""-color1: green; -color2: orange;\"");\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    static class AnimatedRect extends Rectangle {\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, AnimatedRect.this, \""-color1\"", Color.RED\r\n        );\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, AnimatedRect.this, \""-color2\"", Color.BLUE\r\n        );\r\n        final SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n            color1.addListener((obs, o, v) -> {\r\n                if (timeline.get() != null) timeline.get().stop();\r\n                timeline.set(createTimeline());\r\n                timeline.get().play();\r\n            });\r\n            color2.addListener((obs, o, v) -> {\r\n                if (timeline.get() != null) timeline.get().stop();\r\n                timeline.set(createTimeline());\r\n                timeline.get().play();\r\n            });\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) {\r\n                    if (timeline.get() != null) timeline.get().play();\r\n                } else {\r\n                    if (timeline.get() != null) timeline.get().stop();\r\n                }\r\n            });\r\n        }\r\n        Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                new KeyFrame(Duration.millis(0),\r\n                    new KeyValue(fillProperty(), color1.getValue(), Interpolator.LINEAR)\r\n                ),\r\n                new KeyFrame(Duration.millis(1000),\r\n                    new KeyValue(fillProperty(), color2.getValue(), Interpolator.LINEAR)\r\n                )\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 =\r\n                new CssMetaData<>(\""-color1\"", PaintConverter.getInstance(), Color.RED) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect c) {\r\n                        return !c.color1.isBound();\r\n                    }\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                        return c.color1;\r\n                    }\r\n                };\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 =\r\n                new CssMetaData<>(\""-color2\"", PaintConverter.getInstance(), Color.BLUE) {\r\n                    @Override\r\n                    public boolean isSettable(AnimatedRect c) {\r\n                        return !c.color2.isBound();\r\n                    }\r\n                    @Override\r\n                    public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                        return c.color2;\r\n                    }\r\n                };\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables =\r\n                    new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }""]",0,1
"[""@RequestParam String fileName,\r\n        @RequestParam String bucketName,\r\n        @RequestParam String projectName) {\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectName).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n    try (ReadChannel reader = blob.reader()) {\r\n        InputStream inputStream = Channels.newInputStream(reader);\r\n        String contentType = blob.getContentType();\r\n        return ResponseEntity.ok()\r\n                .contentType(MediaType.parseMediaType(contentType != null ? contentType : MediaType.APPLICATION_OCTET_STREAM_VALUE))\r\n                .header(\""Content-Disposition\"", \""attachment; filename=\"" + fileName)\r\n                .body(new InputStreamResource(inputStream));\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().body(null);\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        int[][] T = {\r\n            {2, 3, 4, 3, 6},\r\n            {4, 1, 5, 7, 8},\r\n            {9, 1, 2, 3, 1},\r\n            {2, 4, 5, 1, 5},\r\n            {3, 1, 9, 0, 2}\r\n        };\r\n        int[][] P = {\r\n            {2, 3, 0},\r\n            {0, 1, 5},\r\n            {9, 0, 2}\r\n        };\r\n        searchPattern(T, P);\r\n    }\r\n    public static void searchPattern(int[][] T, int[][] P) {\r\n        int m = T.length;         // rows in T\r\n        int n = T[0].length;      // columns in T\r\n        int u = P.length;         // rows in P\r\n        int v = P[0].length;      // columns in P\r\n        for (int i = 0; i <= m - u; i++) {\r\n            for (int j = 0; j <= n - v; j++) {\r\n                if (matches(T, P, i, j)) {\r\n                    System.out.println(\""(\"" + i + \"",\"" + j + \"")\"");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public static boolean matches(int[][] T, int[][] P, int row, int col) {\r\n        for (int i = 0; i < P.length; i++) {\r\n            for (int j = 0; j < P[0].length; j++) {\r\n                if (P[i][j] != 0 && P[i][j] != T[row + i][col + j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }""]",0,1
"[""private RecyclerView recyclerView;\r\n    private SCardAdapter<SCard, SCardAdapter.ViewHolder> adapter;\r\n    private List<SCard> scardList = new ArrayList<>();\r\n    private SCardListAdapter listAdapter;\r\n    public HomeFragment() {}\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        View v = inflater.inflate(R.layout.fragment_home, container, false);\r\n        recyclerView = v.findViewById(R.id.search_recyclerview);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        recyclerView.setHasFixedSize(true);\r\n        listAdapter = new SCardListAdapter(scardList);\r\n        recyclerView.setAdapter(listAdapter);\r\n        fetchAllCategories();\r\n        return v;\r\n    }\r\n    private void fetchAllCategories() {\r\n        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(\""Category_wise\"");\r\n        reference.addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                scardList.clear();\r\n                for (DataSnapshot category : dataSnapshot.getChildren()) {\r\n                    for (DataSnapshot company : category.getChildren()) {\r\n                        SCard card = company.getValue(SCard.class);\r\n                        scardList.add(card);\r\n                    }\r\n                }\r\n                listAdapter.notifyDataSetChanged();\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n    private List<SCard> list;\r\n    public SCardListAdapter(List<SCard> list) {\r\n        this.list = list;\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.startup_search_card, parent, false);\r\n        return new ViewHolder(v);\r\n    }\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        SCard item = list.get(position);\r\n        holder.setName(item.getsName());\r\n    }\r\n    @Override\r\n    public int getItemCount() {\r\n        return list.size();\r\n    }\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView sname;\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            sname = itemView.findViewById(R.id.sname);\r\n        }\r\n        public void setName(String name) {\r\n            sname.setText(name);\r\n        }\r\n    }\r\n    private String sName;\r\n    public SCard() {}\r\n    public SCard(String sName) {\r\n        this.sName = sName;\r\n    }\r\n    public String getsName() {\r\n        return sName;\r\n    }\r\n    public void setsName(String sName) {\r\n        this.sName = sName;\r\n    }""]",0,1
"[""private static final List<Locale> ALLOWED_LOCALES = Arrays.asList(\r\n            new Locale(\""en\""),\r\n            new Locale(\""hi\"")\r\n    );\r\n    @Override\r\n    public Locale resolveLocale(HttpServletRequest request) {\r\n        String paramLocale = request.getParameter(\""locale\"");\r\n        if (paramLocale != null) {\r\n            Locale locale = StringUtils.parseLocaleString(paramLocale);\r\n            if (ALLOWED_LOCALES.contains(locale)) {\r\n                return locale;\r\n            } else {\r\n                throw new IllegalArgumentException(\""Invalid locale: \"" + paramLocale);\r\n            }\r\n        }\r\n        return determineDefaultLocale(request);\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        Class<Parent> clazz = Parent.class;\r\n        Constructor<Parent> constructor = clazz.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parent = constructor.newInstance();\r\n        System.out.println(\""Instance created: \"" + parent);\r\n    }\r\n    private Parent() {\r\n        System.out.println(\""Private constructor called\"");\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        String privateKey = \""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU\"";\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        Security.addProvider(new BouncyCastleProvider());\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n        KeyFactory keyFactory = KeyFactory.getInstance(\""Ed25519\"", \""BC\"");\r\n        PrivateKey pkey = keyFactory.generatePrivate(keySpec);\r\n        System.out.println(\""Private key: \"" + pkey);\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        File protoDir = new File(\""src/main/proto\"");\r\n        SchemaLoader loader = new SchemaLoader();\r\n        loader.addSource(protoDir);\r\n        Schema schema = loader.loadSchema();\r\n        List<ProtoFileElement> files = schema.protoFiles();\r\n        for (ProtoFileElement file : files) {\r\n            System.out.println(\""File name: \"" + file.getName());\r\n            System.out.println(\""Package: \"" + file.getPackageName());\r\n            System.out.println(\""Messages: \"" + file.getTypes());\r\n        }\r\n    }\r\n    implementation 'com.squareup.wire:wire-schema:4.6.1'""]",0,1
"[""ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n    public void entry(Function<Void, Void> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            runWithTimeout(() -> I_need_a_timeout(callback, 110), 2, TimeUnit.SECONDS);\r\n        } catch (TimeoutException e) {\r\n            System.out.println(\""Timed out!\"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(\""Final result: \"" + result);\r\n    }\r\n    private void I_need_a_timeout(Function<Void, Void> callback, int loop) {\r\n        while (loop-- >= 0) {\r\n            counter.get().incrementAndGet();\r\n            callback.apply(null);\r\n        }\r\n    }\r\n    private void runWithTimeout(Runnable task, long timeout, TimeUnit unit) throws Exception {\r\n        Thread currentThread = Thread.currentThread();\r\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\r\n        ScheduledFuture<?> timeoutTask = scheduler.schedule(() -> currentThread.stop(), timeout, unit);\r\n        try {\r\n            task.run();\r\n        } finally {\r\n            timeoutTask.cancel(true);\r\n            scheduler.shutdownNow();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        MyClass obj = new MyClass();\r\n        obj.entry((v) -> {\r\n            try {\r\n                Thread.sleep(100); // Simulate long-running task\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n            return null;\r\n        });\r\n    }""]",0,1
"[""private static final Tracer tracer = GlobalOpenTelemetry.getTracer(\""etl-pipeline\"");\r\n    public void execute(DataPackage data) {\r\n        String traceIdString = padOrGenerateTraceId(data.getUniqueId());\r\n        String spanIdString = generateSpanId(data.getProcessorName());\r\n        SpanContext spanContext = SpanContext.createFromRemoteParent(\r\n                traceIdString,\r\n                spanIdString,\r\n                TraceFlags.getSampled(),\r\n                TraceState.getDefault()\r\n        );\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context parentContext = Context.root().with(parentSpan);\r\n        Span span = tracer.spanBuilder(data.getProcessorName())\r\n                .setParent(parentContext)\r\n                .startSpan();\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                doWork(data);\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n                throw new RuntimeException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n    private String padOrGenerateTraceId(String input) {\r\n        byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\r\n        String hex = bytesToHex(bytes);\r\n        if (hex.length() > 32) return hex.substring(0, 32);\r\n        return String.format(\""%032x\"", new java.math.BigInteger(1, bytes));\r\n    }\r\n    private String generateSpanId(String input) {\r\n        byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\r\n        String hex = bytesToHex(bytes);\r\n        if (hex.length() > 16) return hex.substring(0, 16);\r\n        return String.format(\""%016x\"", new java.math.BigInteger(1, bytes));\r\n    }\r\n    private String bytesToHex(byte[] bytes) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (byte b : bytes) sb.append(String.format(\""%02x\"", b));\r\n        return sb.toString();\r\n    }\r\n    private void doWork(DataPackage data) {\r\n        // Simulated work\r\n    }\r\n    public static class DataPackage {\r\n        private final String uniqueId;\r\n        private final String processorName;\r\n        public DataPackage(String uniqueId, String processorName) {\r\n            this.uniqueId = uniqueId;\r\n            this.processorName = processorName;\r\n        }\r\n        public String getUniqueId() {\r\n            return uniqueId;\r\n        }\r\n        public String getProcessorName() {\r\n            return processorName;\r\n        }\r\n    }""]",0,1
"[""class Node {\r\n        int key;\r\n        int value;\r\n        Node prev;\r\n        Node next;\r\n    }\r\n    private void addNode(Node node) {\r\n        node.prev = head;\r\n        node.next = head.next;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n    private void removeNode(Node node) {\r\n        Node before = node.prev;\r\n        Node after = node.next;\r\n        before.next = after;\r\n        after.prev = before;\r\n    }\r\n    private void moveToHead(Node node) {\r\n        removeNode(node);\r\n        addNode(node);\r\n    }\r\n    private Node removeTail() {\r\n        Node last = tail.prev;\r\n        removeNode(last);\r\n        return last;\r\n    }\r\n    private final int capacity;\r\n    private final Map<Integer, Node> map;\r\n    private final Node head;\r\n    private final Node tail;\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        map = new HashMap<>();\r\n        head = new Node();\r\n        tail = new Node();\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n    public int get(int key) {\r\n        Node node = map.get(key);\r\n        if (node == null) return -1;\r\n        moveToHead(node);\r\n        return node.value;\r\n    }\r\n    public void put(int key, int value) {\r\n        Node node = map.get(key);\r\n        if (node != null) {\r\n            node.value = value;\r\n            moveToHead(node);\r\n        } else {\r\n            Node newNode = new Node();\r\n            newNode.key = key;\r\n            newNode.value = value;\r\n            map.put(key, newNode);\r\n            addNode(newNode);\r\n            if (map.size() > capacity) {\r\n                Node tail = removeTail();\r\n                map.remove(tail.key);\r\n            }\r\n        }\r\n    }""]",0,1
"[""private Timer timer;\r\n    private int redX = 200, redY = 200;\r\n    private int blueX = (int) (Math.random() * 425), blueY = 0;\r\n    private final int DOT_SIZE = 75;\r\n    private final int FALL_SPEED = 2;\r\n    private final int MOVE_AMOUNT = 5;\r\n    private boolean up, down, left, right;\r\n    public GamePanel() {\r\n        setPreferredSize(new Dimension(500, 500));\r\n        setFocusable(true);\r\n        addKeyListener(this);\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.setColor(Color.RED);\r\n        g.fillRect(redX, redY, DOT_SIZE, DOT_SIZE);\r\n        g.setColor(Color.BLUE);\r\n        g.fillOval(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n    }\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if (left) redX = Math.max(redX - MOVE_AMOUNT, 0);\r\n        if (right) redX = Math.min(redX + MOVE_AMOUNT, getWidth() - DOT_SIZE);\r\n        if (up) redY = Math.max(redY - MOVE_AMOUNT, 0);\r\n        if (down) redY = Math.min(redY + MOVE_AMOUNT, getHeight() - DOT_SIZE);\r\n        blueY += FALL_SPEED;\r\n        if (blueY > getHeight()) {\r\n            blueX = (int) (Math.random() * (getWidth() - DOT_SIZE));\r\n            blueY = 0;\r\n        }\r\n        Rectangle redRect = new Rectangle(redX, redY, DOT_SIZE, DOT_SIZE);\r\n        Rectangle blueRect = new Rectangle(blueX, blueY, DOT_SIZE, DOT_SIZE);\r\n        if (redRect.intersects(blueRect)) {\r\n            System.out.println(\""Collision!\"");\r\n        }\r\n        repaint();\r\n    }\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = true;\r\n            case KeyEvent.VK_RIGHT -> right = true;\r\n            case KeyEvent.VK_UP -> up = true;\r\n            case KeyEvent.VK_DOWN -> down = true;\r\n        }\r\n    }\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        switch (e.getKeyCode()) {\r\n            case KeyEvent.VK_LEFT -> left = false;\r\n            case KeyEvent.VK_RIGHT -> right = false;\r\n            case KeyEvent.VK_UP -> up = false;\r\n            case KeyEvent.VK_DOWN -> down = false;\r\n        }\r\n    }\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {}\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JFrame frame = new JFrame(\""Game\"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(new GamePanel());\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }""]",0,1
"[""private static final AtomicLong COUNTER = new AtomicLong(0);\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        String raw = String.format(\""%011X\"", currentValue & 0xFFFFFFFFFFFL);\r\n        return String.format(\""%s-7%s-%s\"",\r\n                raw.substring(0, 4),\r\n                raw.substring(4, 7),\r\n                raw.substring(7)).toLowerCase();\r\n    }\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }""]",0,1
"[""private final ObjectProperty<BigDecimal> valueProperty = new SimpleObjectProperty<>(BigDecimal.ZERO);\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Spinner<BigDecimal> spinner = new Spinner<>();\r\n        BigDecimal min = new BigDecimal(\""-20.00\"");\r\n        BigDecimal max = new BigDecimal(\""20.00\"");\r\n        BigDecimal step = new BigDecimal(\""0.25\"");\r\n        SpinnerValueFactory<BigDecimal> valueFactory = new SpinnerValueFactory<BigDecimal>() {\r\n            {\r\n                setConverter(new StringConverter<>() {\r\n                    final DecimalFormat df = new DecimalFormat(\""+#,##0.00;-#,##0.00\"", DecimalFormatSymbols.getInstance(Locale.GERMAN));\r\n                    @Override\r\n                    public String toString(BigDecimal value) {\r\n                        return value == null ? \""\"" : df.format(value);\r\n                    }\r\n                    @Override\r\n                    public BigDecimal fromString(String string) {\r\n                        try {\r\n                            string = string.replace(\"",\"", \"".\"");\r\n                            return new BigDecimal(string);\r\n                        } catch (NumberFormatException e) {\r\n                            return getValue();\r\n                        }\r\n                    }\r\n                });\r\n                setValue(BigDecimal.ZERO);\r\n            }\r\n            @Override\r\n            public void decrement(int steps) {\r\n                BigDecimal newValue = getValue().subtract(step.multiply(BigDecimal.valueOf(steps)));\r\n                if (newValue.compareTo(min) >= 0) setValue(newValue);\r\n            }\r\n            @Override\r\n            public void increment(int steps) {\r\n                BigDecimal newValue = getValue().add(step.multiply(BigDecimal.valueOf(steps)));\r\n                if (newValue.compareTo(max) <= 0) setValue(newValue);\r\n            }\r\n        };\r\n        spinner.setValueFactory(valueFactory);\r\n        spinner.setEditable(true);\r\n        TextFormatter<BigDecimal> formatter = new TextFormatter<>(\r\n                valueFactory.getConverter(),\r\n                spinner.getValue(),\r\n                change -> {\r\n                    String newText = change.getControlNewText();\r\n                    if (newText.isEmpty() || newText.equals(\""+\"") || newText.equals(\""-\"")) return change;\r\n                    try {\r\n                        BigDecimal newVal = new BigDecimal(newText.replace(\"",\"", \"".\""));\r\n                        if (newVal.scale() <= 2 && newVal.remainder(step).compareTo(BigDecimal.ZERO) == 0\r\n                                && newVal.compareTo(min) >= 0 && newVal.compareTo(max) <= 0) return change;\r\n                    } catch (NumberFormatException e) {\r\n                    }\r\n                    return null;\r\n                });\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        formatter.valueProperty().bindBidirectional(valueFactory.valueProperty());\r\n        VBox root = new VBox(10, new Label(\""Spinner:\""), spinner);\r\n        stage.setScene(new Scene(root, 300, 100));\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""@RequestHeader(\""Authorization\"") String authorization) {\r\n    OAuth2Authentication authentication = (OAuth2Authentication) SecurityContextHolder.getContext().getAuthentication();\r\n    if (authentication == null || !authentication.isAuthenticated()) {\r\n        throw new AccessDeniedException(\""User is not authenticated\"");\r\n    }\r\n    String userId = authentication.getName();\r\n    UserModel userModel = userService.getUserForUID(userId);\r\n    userService.setCurrentUser(userModel);\r\n    final CustomerData customerData = customerFacade.getCurrentCustomer();\r\n    if (userFacade.isAnonymousUser()) {\r\n        throw new AccessDeniedException(\""Anonymous user is not allowed\"");\r\n    }\r\n    return testFacade.getTestList(customerData);""]",0,1
"[""private final ObjectProperty<Object> userDataProperty = new SimpleObjectProperty<>();\r\n    @Override\r\n    public void start(Stage stage) {\r\n        userDataProperty.addListener((obs, oldVal, newVal) -> {\r\n            System.out.println(\""new userdata: \"" + newVal);\r\n        });\r\n        stage.setUserData(2);\r\n        userDataProperty.set(stage.getUserData());\r\n        stage.setUserData(3);\r\n        userDataProperty.set(stage.getUserData());\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""private final UserDetailsService userDetailsService;\r\n    private final BCryptPasswordEncoder bCryptPasswordEncoder;\r\n    private final String jwtSecret;\r\n    private final int accessTokenExpiredInDays;\r\n    private final int refreshTokenExpiredInDays;\r\n    public SecurityConfig(UserDetailsService userDetailsService,\r\n                          BCryptPasswordEncoder bCryptPasswordEncoder,\r\n                          @Value(\""${jwt.secret}\"") String jwtSecret,\r\n                          @Value(\""${jwt.access.expiry}\"") int accessTokenExpiredInDays,\r\n                          @Value(\""${jwt.refresh.expiry}\"") int refreshTokenExpiredInDays) {\r\n        this.userDetailsService = userDetailsService;\r\n        this.bCryptPasswordEncoder = bCryptPasswordEncoder;\r\n        this.jwtSecret = jwtSecret;\r\n        this.accessTokenExpiredInDays = accessTokenExpiredInDays;\r\n        this.refreshTokenExpiredInDays = refreshTokenExpiredInDays;\r\n    }\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        CustomAuthenticationFilter customAuthenticationFilter =\r\n            new CustomAuthenticationFilter(authenticationManager(http), accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n        customAuthenticationFilter.setFilterProcessesUrl(\""/api/login\"");\r\n        http.csrf().disable();\r\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n        http.authorizeRequests().antMatchers(\""/error\"").permitAll();\r\n        http.authorizeRequests().antMatchers(\""/api/login/**\"", \""/api/token/refresh/**\"").permitAll();\r\n        http.authorizeRequests().anyRequest().authenticated();\r\n        http.addFilter(customAuthenticationFilter);\r\n        http.addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\r\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n                   .userDetailsService(userDetailsService)\r\n                   .passwordEncoder(bCryptPasswordEncoder)\r\n                   .and()\r\n                   .build();\r\n    }""]",0,1
"[""private final X509KeyManager originalKeyManager;\r\n    private final String alias;\r\n    public AliasSpecificKeyManager(X509KeyManager originalKeyManager, String alias) {\r\n        this.originalKeyManager = originalKeyManager;\r\n        this.alias = alias;\r\n    }\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        return alias;\r\n    }\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        return alias;\r\n    }\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return originalKeyManager.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getClientAliases(keyType, issuers);\r\n    }\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return originalKeyManager.getServerAliases(keyType, issuers);\r\n    }\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return originalKeyManager.getCertificateChain(alias);\r\n    }\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return originalKeyManager.getPrivateKey(alias);\r\n    }\r\n        String caCertPath, String caCertPassword, String userCertPath, String userCertPassword, String clientAlias)\r\n        throws IOException, GeneralSecurityException {\r\n    KeyStore keyStore = KeyStore.getInstance(\""JKS\"");\r\n    keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n    KeyStore trustStore = KeyStore.getInstance(\""JKS\"");\r\n    trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\""SunX509\"");\r\n    trustManagerFactory.init(trustStore);\r\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\""SunX509\"");\r\n    keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n    X509KeyManager keyManager = null;\r\n    for (KeyManager km : keyManagerFactory.getKeyManagers()) {\r\n        if (km instanceof X509KeyManager) {\r\n            keyManager = (X509KeyManager) km;\r\n            break;\r\n        }\r\n    }\r\n    KeyManager[] wrappedKeyManagers = new KeyManager[] {\r\n        new AliasSpecificKeyManager(keyManager, clientAlias)\r\n    };\r\n    SSLContext sslContext = SSLContext.getInstance(\""TLS\"");\r\n    sslContext.init(wrappedKeyManagers, trustManagerFactory.getTrustManagers(), null);\r\n    return sslContext.getSocketFactory();""]",0,1
"[""private final String className;\r\n    private final String methodName;\r\n    private boolean hasVisitedLine;\r\n    public MyMethodVisitor(MethodVisitor mv, String className, String methodName) {\r\n        super(Opcodes.ASM9, mv);\r\n        this.className = className;\r\n        this.methodName = methodName;\r\n    }\r\n    @Override\r\n    public void visitLineNumber(int line, Label start) {\r\n        if (!hasVisitedLine) {\r\n            hasVisitedLine = true;\r\n            mv.visitLabel(new Label());\r\n            mv.visitTypeInsn(Opcodes.NEW, \""java/lang/StringBuilder\"");\r\n            mv.visitInsn(Opcodes.DUP);\r\n            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, \""java/lang/StringBuilder\"", \""<init>\"", \""()V\"", false);\r\n            mv.visitLdcInsn(className + \"".\"" + methodName + \""_\"");\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""append\"", \""(Ljava/lang/String;)Ljava/lang/StringBuilder;\"", false);\r\n            mv.visitLdcInsn(line);\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""append\"", \""(I)Ljava/lang/StringBuilder;\"", false);\r\n            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, \""java/lang/StringBuilder\"", \""toString\"", \""()Ljava/lang/String;\"", false);\r\n            mv.visitMethodInsn(Opcodes.INVOKESTATIC, \""afljava/logger/Logger\"", \""writeToLogger\"", \""(Ljava/lang/String;)V\"", false);\r\n        }\r\n        super.visitLineNumber(line, start);\r\n    }\r\n    @Override\r\n    public void visitCode() {\r\n        super.visitCode();\r\n    }""]",0,1
"[""private final ReportClient client;\r\n    public Task(ReportClient client) {\r\n        this.client = client;\r\n    }\r\n    @Override\r\n    public Boolean call() throws Exception {\r\n        CompletableFuture<Boolean> future = new CompletableFuture<>();\r\n        startCheck(client.createDocument(documentId), future);\r\n        return future.get();\r\n    }\r\n    private void startCheck(String uuid, CompletableFuture<Boolean> future) {\r\n        MAIN_EXECUTOR.submit(() -> {\r\n            GetStatusResponse status = client.getStatus(uuid);\r\n            if (Status.PENDING.equals(status.status())) {\r\n                DELAY_EXECUTOR.schedule(() -> startCheck(uuid, future), 10, TimeUnit.SECONDS);\r\n            } else {\r\n                client.getReport(uuid);\r\n                future.complete(Boolean.TRUE);\r\n            }\r\n        });\r\n    }\r\n    List<Callable<Boolean>> tasks = new ArrayList<>();\r\n    ReportClient client = new ReportClient();\r\n    for (int i = 0; i < 100; i++) {\r\n        tasks.add(new Task(client));\r\n    }\r\n    List<Future<Boolean>> results = MAIN_EXECUTOR.invokeAll(tasks);\r\n    MAIN_EXECUTOR.shutdown();\r\n    DELAY_EXECUTOR.shutdown();""]",0,1
"[""public static void main(String[] args) {\r\n        JFrame frame = new JFrame(\""Tab to Spaces\"");\r\n        JTextArea textArea = new JTextArea();\r\n        textArea.getInputMap().put(KeyStroke.getKeyStroke(\""TAB\""), \""insert-spaces\"");\r\n        textArea.getActionMap().put(\""insert-spaces\"", new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                try {\r\n                    int pos = textArea.getCaretPosition();\r\n                    textArea.getDocument().insertString(pos, \""    \"", null);\r\n                } catch (BadLocationException ex) {\r\n                }\r\n            }\r\n        });\r\n        frame.add(new JScrollPane(textArea));\r\n        frame.setSize(400, 300);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setVisible(true);\r\n    }""]",0,1
"[""ONE, TWO\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        Elements elementUtils = processingEnv.getElementUtils();\r\n        for (Element element : roundEnv.getElementsAnnotatedWith(GenerateAnnotation.class)) {\r\n            if (element.getKind() == ElementKind.ENUM) {\r\n                String enumName = element.getSimpleName().toString();\r\n                String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n                String annotationName = enumName + \""Annotation\"";\r\n                try {\r\n                    JavaFileObject file = processingEnv.getFiler().createSourceFile(packageName + \"".\"" + annotationName);\r\n                    try (Writer writer = file.openWriter()) {\r\n                        writer.write(\""package \"" + packageName + \"";\\n\"");\r\n                        writer.write(\""import com.example.annotations.EnumAnnotation;\\n\"");\r\n                        writer.write(\""@EnumAnnotation\\n\"");\r\n                        writer.write(\""public @interface \"" + annotationName + \"" {\\n\"");\r\n                        writer.write(enumName + \"" value();\\n\"");\r\n                        writer.write(\""}\\n\"");\r\n                    }\r\n                } catch (Exception ignored) {}\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        for (Element element : roundEnv.getRootElements()) {\r\n            for (AnnotationMirror mirror : element.getAnnotationMirrors()) {\r\n                if (mirror.getAnnotationType().asElement().getAnnotation(EnumAnnotation.class) != null) {\r\n                    String name = element.getSimpleName().toString();\r\n                    processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, \""Found: \"" + name);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }""]",0,1
"[""public static void main(String[] args) throws JsonProcessingException {\r\n        String jsonString = \""\""\""\r\n        {\r\n          \""payLoad\"": [\r\n            {\r\n              \""id\"": 1,\r\n              \""userName\"": null,\r\n              \""arName\"": \""A1\"",\r\n              \""areas\"": []\r\n            },\r\n            {\r\n              \""id\"": 2,\r\n              \""userName\"": \""alpha2\"",\r\n              \""arName\"": \""A2\"",\r\n              \""areas\"": []\r\n            }\r\n          ],\r\n          \""count\"": 2,\r\n          \""respCode\"": 200\r\n        }\r\n        \""\""\"";\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Response response = objectMapper.readValue(jsonString, Response.class);\r\n        for (String s : response.getTransactionsList()) {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n    @JsonProperty(\""count\"")\r\n    private int totalCount;\r\n    @JsonProperty(\""respCode\"")\r\n    private int responseCode;\r\n    @JsonProperty(\""payLoad\"")\r\n    private List<JsonNode> transactions;\r\n    public String[] getTransactionsList() {\r\n        return transactions.stream()\r\n                .map(JsonNode::toString)\r\n                .toArray(String[]::new);\r\n    }\r\n    public void setTransactions(List<JsonNode> transactions) {\r\n        this.transactions = transactions;\r\n    }""]",0,1
"[""@Test\r\n    public void testDeserialize_validDate() throws IOException {\r\n        String dateStr = \""2023-12-10T15:30:00Z\"";\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(dateStr);\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        Date date = deserializer.deserialize(parser, context);\r\n        SimpleDateFormat expectedFormat = new SimpleDateFormat(\""yyyy-MM-dd'T'HH:mm:ssX\"");\r\n        Date expectedDate = expectedFormat.parse(dateStr);\r\n        assertEquals(expectedDate, date);\r\n    }\r\n    @Test\r\n    public void testDeserialize_emptyDate() throws IOException {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""\"");\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        Date date = deserializer.deserialize(parser, context);\r\n        assertNull(date);\r\n    }\r\n    @Test\r\n    public void testDeserialize_invalidDate() throws IOException {\r\n        JsonParser parser = mock(JsonParser.class);\r\n        DeserializationContext context = mock(DeserializationContext.class);\r\n        when(parser.getText()).thenReturn(\""invalid-date\"");\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(parser, context);\r\n        });\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        System.setProperty(\""webdriver.gecko.driver\"", \""path_to_driver/geckodriver\"");\r\n        LoggingPreferences logs = new LoggingPreferences();\r\n        logs.enable(LogType.BROWSER, Level.ALL);\r\n        FirefoxOptions options = new FirefoxOptions();\r\n        options.setCapability(\""moz:firefoxOptions\"", options);\r\n        options.setCapability(\""goog:loggingPrefs\"", logs);\r\n        WebDriver driver = new FirefoxDriver(options);\r\n        driver.get(\""https://example.com\"");\r\n        LogEntries logEntries = driver.manage().logs().get(LogType.BROWSER);\r\n        for (LogEntry entry : logEntries) {\r\n            System.out.println(entry.getLevel() + \"" \"" + entry.getMessage());\r\n        }\r\n        driver.quit();\r\n    }""]",0,1
"[""@Value(\""${security.jwt.secret}\"")\r\n    private String jwtSecret;\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(Customizer.withDefaults());\r\n        http.exceptionHandling(e -> e.defaultAuthenticationEntryPointFor(\r\n                new LoginUrlAuthenticationEntryPoint(\""/login\""),\r\n                new MediaTypeRequestMatcher(MediaType.TEXT_HTML)));\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(a -> a\r\n                        .requestMatchers(\""/oauth2/authorize\"").permitAll()\r\n                        .anyRequest().authenticated())\r\n                .formLogin(f -> f.loginPage(\""/login\"").permitAll());\r\n        http.oauth2ResourceServer(o -> o.jwt(Customizer.withDefaults()));\r\n        http.csrf(c -> c.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\r\n        return http.build();\r\n    }\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \""HmacSHA256\"");\r\n        OctetSequenceKey octetSequenceKey = new OctetSequenceKey.Builder(secretKey)\r\n                .keyID(\""my-key-id\"")\r\n                .build();\r\n        JWKSet jwkSet = new JWKSet(octetSequenceKey);\r\n        JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(jwkSet);\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n    @Bean\r\n    public JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(jwtSecret);\r\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \""HmacSHA256\"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKey).build();\r\n    }""]",0,1
"[""@Value(\""Adventure of War\"")\r\n    private String name;\r\n    @Value(\""A place for War\"")\r\n    private String motive;\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    public String getMotive() {\r\n        return motive;\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \""Company{\"" +\r\n                \""name='\"" + name + '\\'' +\r\n                \"", motive='\"" + motive + '\\'' +\r\n                '}';\r\n    }\r\n    public static void main(String[] args) {\r\n        ApplicationContext context = new AnnotationConfigApplicationContext(App.class);\r\n        Company company = context.getBean(Company.class);\r\n        System.out.println(company);\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        byte[] keyBytes = Files.readAllBytes(Paths.get(\""/home/debashishd/Downloads/s_key\""));\r\n        MessageDigest sha = MessageDigest.getInstance(\""SHA-256\"");\r\n        byte[] key = sha.digest(keyBytes);\r\n        SecretKeySpec secretKey = new SecretKeySpec(key, \""AES\"");\r\n        IvParameterSpec iv = new IvParameterSpec(new byte[16]);\r\n        Cipher cipher = Cipher.getInstance(\""AES/CBC/PKCS5Padding\"");\r\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\r\n        String Test_message = \""Hello this is Roxane\"";\r\n        byte[] encrypted = cipher.doFinal(Test_message.getBytes(StandardCharsets.UTF_8));\r\n        String encryptedValue = Base64.getEncoder().encodeToString(encrypted);\r\n        System.out.println(\""Encrypted value: \"" + encryptedValue);\r\n        Cipher decryptCipher = Cipher.getInstance(\""AES/CBC/PKCS5Padding\"");\r\n        decryptCipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\r\n        byte[] decrypted = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedValue));\r\n        String decryptedValue = new String(decrypted, StandardCharsets.UTF_8);\r\n        System.out.println(\""Decrypted value: \"" + decryptedValue);\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>(2, 6, 2);\r\n        Spinner<Integer> spinnerMax = new Spinner<>(2, 6, 6);\r\n        ChangeListener<Number> listener = (obs, oldVal, newVal) -> {\r\n            int minVal = spinnerMin.getValue();\r\n            int maxVal = spinnerMax.getValue();\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, maxVal, minVal));\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(minVal, 6, maxVal));\r\n            Button minUp = lookupArrowButton(spinnerMin, \""increment-arrow-button\"");\r\n            Button maxDown = lookupArrowButton(spinnerMax, \""decrement-arrow-button\"");\r\n            if (minVal == maxVal) {\r\n                if (minUp != null) minUp.setDisable(true);\r\n                if (maxDown != null) maxDown.setDisable(true);\r\n            } else {\r\n                if (minUp != null) minUp.setDisable(false);\r\n                if (maxDown != null) maxDown.setDisable(false);\r\n            }\r\n        };\r\n        spinnerMin.valueProperty().addListener(listener);\r\n        spinnerMax.valueProperty().addListener(listener);\r\n        HBox root = new HBox(10, spinnerMin, spinnerMax);\r\n        Scene scene = new Scene(root, 300, 100);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n    private Button lookupArrowButton(Spinner<?> spinner, String styleClass) {\r\n        for (Node node : ((SpinnerSkin) spinner.getSkin()).getChildren()) {\r\n            if (node.lookup(\"".\"" + styleClass) instanceof Button) {\r\n                return (Button) node.lookup(\"".\"" + styleClass);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        try {\r\n            TemplateEngine templateEngine = new TemplateEngine();\r\n            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n            resolver.setCharacterEncoding(\""UTF-8\"");\r\n            resolver.setTemplateMode(TemplateMode.XML);\r\n            resolver.setSuffix(\"".xml\"");\r\n            resolver.setPrefix(\""/\"");\r\n            templateEngine.setTemplateResolver(resolver);\r\n            Context ct = new Context();\r\n            ct.setVariable(\""TEST_AR\"", \""????? ?????? ?? ??? ????\"");\r\n            ct.setVariable(\""TEST_HE\"", \""??????\"");\r\n            ct.setVariable(\""TEST_CH\"", \""??????\"");\r\n            ct.setVariable(\""currentDate\"", LocalDateTime.now().toString());\r\n            BufferedWriter out = new BufferedWriter(\r\n                new OutputStreamWriter(new FileOutputStream(\""test_output.xml\""), StandardCharsets.UTF_8)\r\n            );\r\n            templateEngine.process(\""test_template\"", ct, out);\r\n        } catch (Exception e) {\r\n            System.out.println(e);\r\n        }\r\n    }""]",0,1
"[""private static RedisServer server;\r\n    private static Jedis jedis;\r\n    private static int port;\r\n    @Rule\r\n    public TestPipeline pipeline = TestPipeline.create();\r\n    @BeforeClass\r\n    public static void setUpClass() throws IOException {\r\n        server = RedisServer.newRedisServer(0);\r\n        server.start();\r\n        port = server.getBindPort();\r\n        jedis = new Jedis(\""localhost\"", port);\r\n    }\r\n    @AfterClass\r\n    public static void tearDownClass() throws IOException {\r\n        jedis.close();\r\n        server.stop();\r\n    }\r\n    @Before\r\n    public void flushDB() {\r\n        jedis.flushDB();\r\n    }\r\n    @Test\r\n    public void testBatchProcessingCodeCoverage() {\r\n        List<KV<String, String>> records = new ArrayList<>();\r\n        for (int i = 0; i < 2000; i++) {\r\n            records.add(KV.of(\""key\"" + (i / 10), \""value\"" + i));\r\n        }\r\n        CustomRedisConfigurations config = CustomRedisConfigurations\r\n                .create(\""localhost\"", port)\r\n                .withTimeout(100)\r\n                .withAuth(\""\"")\r\n                .enableSSL();\r\n        PCollection<KV<String, String>> input = pipeline.apply(Create.of(records));\r\n        input.apply(RedisWriteIO.write().withConnectionConfiguration(config));\r\n        pipeline.run().waitUntilFinish();\r\n    }""]",0,1
"[""@FXML\r\n    public ComboBox<String> DevelopmentType;\r\n    @FXML\r\n    public ComboBox<String> LanguageProgramming;\r\n    ObservableList<String> listDevelopmentType = FXCollections.observableArrayList(\""Back-end\"", \""Front-end\"");\r\n    ObservableList<String> listLanguageProgrammingBackEnd = FXCollections.observableArrayList(\""Java\"", \""PHP\"");\r\n    ObservableList<String> listLanguageProgrammingFrontEnd = FXCollections.observableArrayList(\""HTML\"", \""CSS\"", \""Javascript\"");\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        DevelopmentType.setItems(listDevelopmentType);\r\n    }\r\n    public void DevelopmentTypeEvent() {\r\n        LanguageProgramming.getSelectionModel().clearSelection();\r\n        LanguageProgramming.setValue(null);\r\n        if (DevelopmentType.getValue().equals(\""Back-end\"")) {\r\n            LanguageProgramming.setItems(listLanguageProgrammingBackEnd);\r\n        } else if (DevelopmentType.getValue().equals(\""Front-end\"")) {\r\n            LanguageProgramming.setItems(listLanguageProgrammingFrontEnd);\r\n        }\r\n    }""]",0,1
"[""public void onReceive(Context context, Intent intent) {\r\n        String action = intent.getAction();\r\n        if (UsbManager.ACTION_USB_DEVICE_ATTACHED.equals(action)) {\r\n            UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (device != null) {\r\n                usbDevice = device;\r\n                PendingIntent permissionIntent = PendingIntent.getBroadcast(\r\n                        context, 0, new Intent(ACTION_USB_PERMISSION), PendingIntent.FLAG_IMMUTABLE);\r\n                UsbManager usbManager = (UsbManager) context.getSystemService(Context.USB_SERVICE);\r\n                usbManager.requestPermission(device, permissionIntent);\r\n            }\r\n        } else if (UsbManager.ACTION_USB_DEVICE_DETACHED.equals(action)) {\r\n            if (connection != null) {\r\n                connection.releaseInterface(usbDeviceInterface);\r\n                connection.close();\r\n            }\r\n            connection = null;\r\n            usbDevice = null;\r\n            endpointIn = null;\r\n            endpointOut = null;\r\n        } else if (ACTION_USB_PERMISSION.equals(action)) {\r\n            UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\r\n            if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {\r\n                if (device != null) {\r\n                    usbDevice = device;\r\n                    // connect to device\r\n                }\r\n            } else {\r\n                // permission denied\r\n            }\r\n        }\r\n    }\r\n    IntentFilter filter = new IntentFilter();\r\n    filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);\r\n    filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);\r\n    filter.addAction(ACTION_USB_PERMISSION);\r\n    reactContext.registerReceiver(usbReceiver, filter);""]",0,1
"[""private boolean success;\r\n    private T result;\r\n    public static <T> ResponseEnvelope<T> of(T result) {\r\n        ResponseEnvelope<T> envelope = new ResponseEnvelope<>();\r\n        envelope.success = true;\r\n        envelope.result = result;\r\n        return envelope;\r\n    }\r\n    public boolean isSuccess() {\r\n        return success;\r\n    }\r\n    public T getResult() {\r\n        return result;\r\n    }\r\n    public void setSuccess(boolean success) {\r\n        this.success = success;\r\n    }\r\n    public void setResult(T result) {\r\n        this.result = result;\r\n    }\r\n    @ApiResponse(responseCode = \""201\"", description = \""Created\"", content = {\r\n        @Content(mediaType = \""application/json\"",\r\n                 schema = @Schema(implementation = UserResponseWrapper.class))\r\n    })\r\n    return ResponseEntity.status(HttpStatus.CREATED).body(userService.create(command));\r\n    public UserResponseWrapper(UserDto userDto) {\r\n        super.setSuccess(true);\r\n        super.setResult(userDto);\r\n    }\r\n    return new OpenAPI()\r\n        .components(new Components()\r\n            .addSchemas(\""ResponseEnvelope_UserDto\"",\r\n                new Schema<>()\r\n                    .$ref(\""#/components/schemas/UserResponseWrapper\"")));""]",0,1
"[""Fieldable create(int x, int y);\r\n    int x;\r\n    int y;\r\n    boolean entityCreated = false;\r\n    while (!entityCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            Fieldable entity = factory.create(x, y);\r\n            field.setFieldable(x, y, entity);\r\n            entityCreated = true;\r\n        }\r\n    }\r\n    mag = new Magician(x, y, sizeX, sizeY, field, player, this);\r\n    return mag;\r\n    goblin = new Goblin(x, y, player, field, this, sizeX, sizeY);\r\n    return goblin;""]",0,1
"[""uris: https://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certificate: classpath:certs/http_ca.crt\r\n    @Bean\r\n    public RestClientBuilderCustomizer customizer(ResourceLoader resourceLoader) {\r\n        return builder -> {\r\n            try {\r\n                CertificateFactory factory = CertificateFactory.getInstance(\""X.509\"");\r\n                InputStream is = resourceLoader.getResource(\""classpath:certs/http_ca.crt\"").getInputStream();\r\n                Certificate trustedCa = factory.generateCertificate(is);\r\n                KeyStore trustStore = KeyStore.getInstance(\""pkcs12\"");\r\n                trustStore.load(null, null);\r\n                trustStore.setCertificateEntry(\""ca\"", trustedCa);\r\n                SSLContext sslContext = SSLContexts.custom()\r\n                        .loadTrustMaterial(trustStore, null)\r\n                        .build();\r\n                builder.setHttpClientConfigCallback(httpClientBuilder ->\r\n                        httpClientBuilder.setSSLContext(sslContext));\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        };\r\n    }\r\n    private final MyRepository repository;\r\n    private final ElasticsearchOperations operations;\r\n    public MyService(MyRepository repository, ElasticsearchOperations operations) {\r\n        this.repository = repository;\r\n        this.operations = operations;\r\n    }\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-elasticsearch</artifactId>""]",0,1
"[""private static final ExecutorService executor = Executors.newFixedThreadPool(5);\r\n    private static final ConcurrentMap<String, ReentrantLock> locks = new ConcurrentHashMap<>();\r\n    public static void main(String[] args) {\r\n        submitTask(\""hi\"");\r\n        submitTask(\""h\"");\r\n        submitTask(\""u\"");\r\n        submitTask(\""y\"");\r\n        submitTask(\""hi\"");\r\n        submitTask(\""p\"");\r\n        submitTask(\""o\"");\r\n        submitTask(\""bb\"");\r\n        executor.shutdown();\r\n    }\r\n    static void submitTask(String value) {\r\n        executor.submit(new Task(value));\r\n    }\r\n    static class Task implements Runnable {\r\n        private final String value;\r\n        Task(String value) {\r\n            this.value = value;\r\n        }\r\n        @Override\r\n        public void run() {\r\n            ReentrantLock lock = locks.computeIfAbsent(value, v -> new ReentrantLock());\r\n            boolean acquired = lock.tryLock();\r\n            if (!acquired) {\r\n                return;\r\n            }\r\n            try {\r\n                System.out.println(\""Running: \"" + value);\r\n                Thread.sleep(5000);\r\n            } catch (InterruptedException ignored) {\r\n            } finally {\r\n                lock.unlock();\r\n            }\r\n        }\r\n    }""]",0,1
"[""@Autowired\r\n    private JwtFilter jwtFilter;\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .addFilterBefore(jwtFilter, BasicAuthenticationFilter.class)\r\n                .csrf(csrf -> csrf.disable())\r\n                .authorizeHttpRequests(auth -> auth\r\n                        .requestMatchers(\""/authenticate\"").permitAll()\r\n                        .requestMatchers(\""/register\"").permitAll()\r\n                        .requestMatchers(\""/ws/**\"").permitAll()\r\n                        .anyRequest().authenticated())\r\n                .build();\r\n    }\r\n    @Override\r\n    protected boolean sameOriginDisabled() {\r\n        return true;\r\n    }\r\n    @Bean\r\n    public AuthorizationManager<Message<?>> messageAuthorizationManager(\r\n            MessageMatcherDelegatingAuthorizationManager.Builder messages) {\r\n        messages.anyMessage().permitAll();\r\n        return messages.build();\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        String xml = \""<?xml version=\\\""1.0\\\"" encoding=\\\""utf-8\\\""?>\""\r\n                   + \""<retMDFe xmlns=\\\""http://www.portalfiscal.inf.br/mdfe\\\"" versao=\\\""3.00\\\"">\""\r\n                   + \""<tpAmb>1</tpAmb>\""\r\n                   + \""<cUF>43</cUF>\""\r\n                   + \""<verAplic>RS20240710093839</verAplic>\""\r\n                   + \""<cStat>244</cStat>\""\r\n                   + \""<xMotivo>Rejeição: Falha na descompactação da área de dados</xMotivo>\""\r\n                   + \""</retMDFe>\"";\r\n        JAXBContext context = JAXBContext.newInstance(RetMDFe.class);\r\n        Unmarshaller unmarshaller = context.createUnmarshaller();\r\n        RetMDFe result = (RetMDFe) unmarshaller.unmarshal(new StringReader(xml));\r\n        System.out.println(\""Status: \"" + result.getCStat());\r\n        System.out.println(\""Motivo: \"" + result.getXMotivo());\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        String htmlString = \""<!DOCTYPE html>\\n\"" +\r\n                \""<html lang=\\\""ru\\\"">\\n\"" +\r\n                \""<head>\\n\"" +\r\n                \""    <meta charset=\\\""UTF-8\\\""/>\\n\"" +\r\n                \""    <meta http-equiv=\\\""X-UA-Compatible\\\"" content=\\\""IE=edge\\\""/>\\n\"" +\r\n                \""    <meta name=\\\""viewport\\\"" content=\\\""width=device-width, initial-scale=1.0\\\""/>\\n\"" +\r\n                \""    <style>\\n\"" +\r\n                \""        body { font-family: 'DejaVu Sans'; }\\n\"" +\r\n                \""    </style>\\n\"" +\r\n                \""</head>\\n\"" +\r\n                \""<body>\\n\"" +\r\n                \""    <h3>?????????????</h3>\\n\"" +\r\n                \""</body>\\n\"" +\r\n                \""</html>\"";\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + \""/A.pdf\"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n        ITextRenderer renderer = new ITextRenderer();\r\n        ITextFontResolver fontResolver = renderer.getFontResolver();\r\n        fontResolver.addFont(\""src/main/resources/fonts/DejaVuSans.ttf\"", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n        outputStream.close();\r\n    }""]",0,1
"[""Object coordinateObj = params.get(\""coordinate\"");\r\n    if (coordinateObj instanceof List) {\r\n        List<?> outerList = (List<?>) coordinateObj;\r\n        int[][] result = new int[outerList.size()][];\r\n        for (int i = 0; i < outerList.size(); i++) {\r\n            Object inner = outerList.get(i);\r\n            if (inner instanceof List) {\r\n                List<?> innerList = (List<?>) inner;\r\n                int[] innerArray = new int[innerList.size()];\r\n                for (int j = 0; j < innerList.size(); j++) {\r\n                    Object val = innerList.get(j);\r\n                    if (val instanceof Number) {\r\n                        innerArray[j] = ((Number) val).intValue();\r\n                    } else if (val instanceof String) {\r\n                        innerArray[j] = Integer.parseInt((String) val);\r\n                    }\r\n                }\r\n                result[i] = innerArray;\r\n            }\r\n        }\r\n        for (int[] row : result) {\r\n            for (int val : row) {\r\n                System.out.print(val + \"" \"");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    return \""success\"";""]",0,1
"[""@Override\r\n    public void beforeAll(ExtensionContext context) throws Exception {\r\n        System.out.println(\""Server started\"");\r\n    }\r\n    @Override\r\n    public void afterAll(ExtensionContext context) throws Exception {\r\n        System.out.println(\""Server stopped\"");\r\n    }\r\n    @Test\r\n    void testSomething() {\r\n        System.out.println(\""FirstTest running\"");\r\n    }\r\n    @Test\r\n    void testSomethingElse() {\r\n        System.out.println(\""SecondTest running\"");\r\n    }""]",0,1
"[""@PatchMapping(\""compute/{uuid}/results\"")\r\npublic Mono<Void> patchAnalysisWithResults(@PathVariable String uuid, @RequestBody String results) {\r\n    return computeSCAService.updateAnalysisWithResults(uuid, results);\r\n}\r\n\r\npublic Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n        .flatMap(analysis -> {\r\n            analysis.setResults(results);\r\n            return computeSCARepository.save(analysis);\r\n        })\r\n        .then();\r\n}""]",0,1
"[""@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(\""com.company.project.xsd.some_portal.v4_0\"");\r\n        marshaller.setMtomEnabled(false);\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nprivate BinaryData buildBinaryData(byte[] documentData) {\r\n    BinaryData binaryData = new BinaryData();\r\n    String base64Data = Base64.getEncoder().encodeToString(documentData);\r\n    DataHandler handler = new DataHandler(new ByteArrayDataSource(base64Data.getBytes(StandardCharsets.UTF_8), \""application/octet-stream\""));\r\n    binaryData.setBlob(handler);\r\n    binaryData.setExtension(\""pdf\"");\r\n    return binaryData;\r\n}\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(MyServiceProperties properties, Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        setDefaultUri(properties.getTargetUrl());\r\n        this.template = getWebServiceTemplate();\r\n    }\r\n\r\n    public void sendDocuments(MyRequest request) {\r\n        template.marshalSendAndReceive(request);\r\n    }\r\n}""]",0,1
"[""btngenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        list.clear();\r\n        String startStr = txtfirst.getText().toString();\r\n        String endStr = txtsecond.getText().toString();\r\n\r\n        long start = Long.parseLong(startStr);\r\n        long end = Long.parseLong(endStr);\r\n\r\n        for (long i = start; i <= end; i++) {\r\n            String serial = String.format(\""%011d\"", i);\r\n            list.add(serial);\r\n        }\r\n\r\n        arrayAdapter.notifyDataSetChanged();\r\n    }\r\n});""]",0,1
"[""@Bean\r\n@Order(10)\r\npublic SecurityFilterChain authenticationChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .securityMatcher(\""/**\"")\r\n        .authorizeHttpRequests(authorize -> authorize\r\n            .requestMatchers(createAntRequestMatchers(whitelist)).permitAll()\r\n            .anyRequest().authenticated()\r\n        )\r\n        .oauth2ResourceServer(oauth2 -> oauth2.jwt());\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain resourceFilterChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    http\r\n        .securityMatcher(\""/**\"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class);\r\n    return http.build();\r\n}""]",0,1
"[""@Override\r\npublic Void visitLink(LinkTree linkTree, Void unused) {\r\n    DocTreePath path = getCurrentPath();\r\n    DocTrees docTrees = DocTrees.instance(processingEnv);\r\n    TreePath treePath = docTrees.getPath(path.getDocComment());\r\n    CompilationUnitTree compilationUnit = treePath.getCompilationUnit();\r\n    Trees trees = Trees.instance(processingEnv);\r\n    JavacTask javacTask = (JavacTask) processingEnv.getTask();\r\n    Elements elementUtils = processingEnv.getElementUtils();\r\n\r\n    String signature = linkTree.getReference().getSignature();\r\n    Symbol currentSymbol = (Symbol) trees.getElement(treePath);\r\n\r\n    Scope scope = currentSymbol.members();\r\n\r\n    Symbol targetSymbol = null;\r\n    for (Symbol sym : scope.getSymbolsByName(Name.fromString(signature))) {\r\n        targetSymbol = sym;\r\n        break;\r\n    }\r\n\r\n    if (targetSymbol == null) {\r\n        for (ImportTree importTree : compilationUnit.getImports()) {\r\n            String importStr = importTree.getQualifiedIdentifier().toString();\r\n            if (importStr.endsWith(\"".\"" + signature)) {\r\n                targetSymbol = elementUtils.getTypeElement(importStr);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (targetSymbol != null) {\r\n        System.out.println(targetSymbol.toString());\r\n    }\r\n\r\n    return null;\r\n}""]",0,1
"[""interface Show1 {\r\n    default void display() {\r\n        System.out.println(\""hello\"");\r\n    }\r\n}\r\n\r\ninterface Show2 {\r\n    void display();\r\n}\r\n\r\npublic class Person implements Show1, Show2 {\r\n    @Override\r\n    public void display() {\r\n        Show1.super.display();\r\n    }\r\n\r\n    public static void main(String args[]) {\r\n        Person p = new Person();\r\n        p.display();\r\n    }\r\n}""]",0,1
"[""package com.autocomplete.example;\r\n\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n            \""Alice\"", \""Adam\"", \""Alfred\"", \""Amon\"", \""Alfredo\"", \""Al\"", \""Albert\""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n            \""Bob\"", \""Conner\"", \""Robin\"", \""Fred\"", \""Freddy\"", \""Edward\"", \""Fredward\"", \""Mariam\""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding = null;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.textProperty().addListener((obs, oldText, newText) -> {\r\n            if (nameBinding != null) {\r\n                nameBinding.dispose();\r\n                nameBinding = null;\r\n            }\r\n\r\n            if (newText.length() == 2) {\r\n                ObservableList<String> list = newText.toUpperCase().startsWith(\""A\"") ? names1 : names2;\r\n                nameBinding = TextFields.bindAutoCompletion(textField, list);\r\n                nameBinding.setOnAutoCompleted(event -> System.out.println(\""You selected \"" + event.getCompletion()));\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""Autocomplete Example\"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import org.apache.poi.hssf.usermodel.HSSFWorkbook;\r\nimport org.apache.poi.ss.usermodel.*;\r\nimport org.apache.poi.ss.usermodel.IndexedColors;\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\n\r\npublic class ExcelExportExample {\r\n    public static void main(String[] args) {\r\n        try (\r\n            OutputStream os = new FileOutputStream(\""test.xls\"");\r\n            Workbook wb = new HSSFWorkbook()\r\n        ) {\r\n            Sheet sh = wb.createSheet(\""test\"");\r\n            Row r = sh.createRow(0);\r\n\r\n            CellStyle cs = wb.createCellStyle();\r\n            cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n            cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n\r\n            for (int i = 0; i < 50; i++) {\r\n                Cell c = r.createCell(i);\r\n                c.setCellValue(i + 1);\r\n                c.setCellStyle(cs);\r\n            }\r\n\r\n            wb.write(os);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}""]",0,1
"[""import java.util.*;\r\n\r\npublic class LimitedSumCombination {\r\n    public static List<Integer> findCombination(int[] nums, int target, int limit) {\r\n        List<Integer> result = new ArrayList<>();\r\n        backtrack(nums, target, limit, 0, new ArrayList<>(), result);\r\n        return result;\r\n    }\r\n\r\n    private static boolean backtrack(int[] nums, int target, int limit, int start, List<Integer> current, List<Integer> result) {\r\n        if (current.size() > limit) return false;\r\n        if (current.size() == limit && target == 0) {\r\n            result.addAll(current);\r\n            return true;\r\n        }\r\n        for (int i = start; i < nums.length; i++) {\r\n            current.add(nums[i]);\r\n            if (backtrack(nums, target - nums[i], limit, i + 1, current, result)) {\r\n                return true;\r\n            }\r\n            current.remove(current.size() - 1);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] nums = {2, 7, 11, 15};\r\n        int target = 20;\r\n        int limit = 3;\r\n        List<Integer> combination = findCombination(nums, target, limit);\r\n        System.out.println(combination);\r\n    }\r\n}""]",0,1
"[""import org.web3j.crypto.Hash;\r\nimport org.web3j.crypto.Sign;\r\nimport org.web3j.utils.Numeric;\r\nimport java.math.BigInteger;\r\n\r\npublic boolean verifySignature(String publicWalletId, String originalNonce, String signedMessage) {\r\n    String message = \""\\u0019Ethereum Signed Message:\\n\"" + originalNonce.length() + originalNonce;\r\n    byte[] messageHash = Hash.sha3(message.getBytes());\r\n\r\n    byte[] signatureBytes = Numeric.hexStringToByteArray(signedMessage);\r\n    byte v = signatureBytes[64];\r\n    if (v < 27) {\r\n        v += 27;\r\n    }\r\n\r\n    Sign.SignatureData signatureData = new Sign.SignatureData(\r\n        v,\r\n        Arrays.copyOfRange(signatureBytes, 0, 32),\r\n        Arrays.copyOfRange(signatureBytes, 32, 64)\r\n    );\r\n\r\n    BigInteger publicKeyRecovered = Sign.signedMessageToKey(messageHash, signatureData);\r\n    String recoveredAddress = \""0x\"" + Keys.getAddress(publicKeyRecovered);\r\n\r\n    return publicWalletId.equalsIgnoreCase(recoveredAddress);\r\n}""]",0,1
"[""// DTO\r\npublic class TestStatus {\r\n    private int testCaseNumber;\r\n    private String status;\r\n    private String message;\r\n\r\n    // getters and setters\r\n}\r\n\r\n// Service\r\n@Service\r\npublic class TestRunnerService {\r\n\r\n    private final List<TestStatus> testStatusList = new CopyOnWriteArrayList<>();\r\n\r\n    public List<TestStatus> getTestStatusList() {\r\n        return testStatusList;\r\n    }\r\n\r\n    public void runAllTests() {\r\n        testStatusList.clear();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            for (int i = 1; i <= 30; i++) {\r\n                TestStatus status = new TestStatus();\r\n                status.setTestCaseNumber(i);\r\n                status.setStatus(\""RUNNING\"");\r\n                testStatusList.add(status);\r\n\r\n                try {\r\n                    Thread.sleep(5000);\r\n                    status.setStatus(\""SUCCESS\"");\r\n                    status.setMessage(\""Test case \"" + i + \"" completed\"");\r\n                } catch (Exception e) {\r\n                    status.setStatus(\""FAILED\"");\r\n                    status.setMessage(\""Test case \"" + i + \"" failed: \"" + e.getMessage());\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Controller\r\n@RestController\r\n@RequestMapping(\""/tests\"")\r\npublic class TestRunnerController {\r\n\r\n    private final TestRunnerService testRunnerService;\r\n\r\n    public TestRunnerController(TestRunnerService testRunnerService) {\r\n        this.testRunnerService = testRunnerService;\r\n    }\r\n\r\n    @PostMapping(\""/start\"")\r\n    public ResponseEntity<String> startTests() {\r\n        testRunnerService.runAllTests();\r\n        return ResponseEntity.ok(\""Test started\"");\r\n    }\r\n\r\n    @GetMapping(\""/status\"")\r\n    public List<TestStatus> getTestStatus() {\r\n        return testRunnerService.getTestStatusList();\r\n    }\r\n}""]",0,1
"[""private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n    String command;\r\n    T payload;\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(\""AddItem\"", payload);\r\n    }\r\n    protected abstract BaseEventHandler<E, C, P> getHandler();\r\n    public abstract void onTry(E event, ArrayList<BaseEvent<?, ?, ?>> actualEvents);\r\n    public abstract void onCommit(String uuid, E event);\r\n    @Override\r\n    protected BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        ModuleFinder finder = ModuleFinder.ofSystem();\r\n        Set<ModuleReference> modules = finder.findAll();\r\n        for (ModuleReference module : modules) {\r\n            ModuleDescriptor descriptor = module.descriptor();\r\n            if (descriptor.isAutomatic()) continue;\r\n            String name = descriptor.name();\r\n            boolean isCore = name.startsWith(\""java.\"");\r\n            System.out.println(name + \"" -> \"" + (isCore ? \""core\"" : \""non-core\""));\r\n        }\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        String input = \""24ENE1982\"";\r\n        Map<String, String> monthMap = new HashMap<>();\r\n        monthMap.put(\""ENE\"", \""JAN\"");\r\n        monthMap.put(\""FEB\"", \""FEB\"");\r\n        monthMap.put(\""MAR\"", \""MAR\"");\r\n        monthMap.put(\""ABR\"", \""APR\"");\r\n        monthMap.put(\""MAY\"", \""MAY\"");\r\n        monthMap.put(\""JUN\"", \""JUN\"");\r\n        monthMap.put(\""JUL\"", \""JUL\"");\r\n        monthMap.put(\""AGO\"", \""AUG\"");\r\n        monthMap.put(\""SEP\"", \""SEP\"");\r\n        monthMap.put(\""OCT\"", \""OCT\"");\r\n        monthMap.put(\""NOV\"", \""NOV\"");\r\n        monthMap.put(\""DIC\"", \""DEC\"");\r\n        for (Map.Entry<String, String> entry : monthMap.entrySet()) {\r\n            if (input.contains(entry.getKey())) {\r\n                input = input.replace(entry.getKey(), entry.getValue());\r\n                break;\r\n            }\r\n        }\r\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(\""ddMMMyyyy\"")\r\n                .toFormatter(Locale.ENGLISH);\r\n        LocalDate date = LocalDate.parse(input, formatter);\r\n        System.out.println(\""Hello world! \"" + date);\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea numTextArea = new TextArea();\r\n        numTextArea.setStyle(\""-fx-cursor: none;\"");\r\n        StackPane root = new StackPane(numTextArea);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setTitle(\""Cursor Example\"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        String formula = \""A2+B2\"";\r\n        String originalCell = \""C2\"";\r\n        String destinationCell = \""D10\"";\r\n        XSSFWorkbook workbook = new XSSFWorkbook();\r\n        FormulaRenderingWorkbook renderingWorkbook = FormulaRenderingWorkbook.create(workbook);\r\n        Ptg[] ptgs = FormulaParser.parse(formula, renderingWorkbook, FormulaType.CELL, 0);\r\n        CellReference from = new CellReference(originalCell);\r\n        CellReference to = new CellReference(destinationCell);\r\n        int rowShift = to.getRow() - from.getRow();\r\n        int colShift = to.getCol() - from.getCol();\r\n        for (Ptg ptg : ptgs) {\r\n            if (ptg instanceof org.apache.poi.ss.formula.ptg.RefPtgBase) {\r\n                org.apache.poi.ss.formula.ptg.RefPtgBase ref = (org.apache.poi.ss.formula.ptg.RefPtgBase) ptg;\r\n                if (!ref.isRowRelative()) rowShift = 0;\r\n                if (!ref.isColRelative()) colShift = 0;\r\n                ref.setRow(ref.getRow() + rowShift);\r\n                ref.setColumn(ref.getColumn() + colShift);\r\n            }\r\n        }\r\n        String newFormula = FormulaRenderer.toFormulaString(renderingWorkbook, ptgs);\r\n        System.out.println(newFormula);\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0);\r\n            file.writeBytes(\""123456789\"");\r\n        }\r\n        try (RandomAccessFile file = new RandomAccessFile(\""test.txt\"", \""rw\"")) {\r\n            file.setLength(0);\r\n            file.writeBytes(\""hello6789\"");\r\n        }\r\n    }""]",0,1
"[""private boolean failNext = true;\r\n    @Bean(name = \""myDataSource\"")\r\n    public DataSource mockDataSource() throws SQLException {\r\n        DataSource realDataSource = DataSourceBuilder.create()\r\n            .url(\""jdbc:h2:mem:testdb\"")\r\n            .username(\""sa\"")\r\n            .password(\""\"")\r\n            .driverClassName(\""org.h2.Driver\"")\r\n            .build();\r\n        DataSource spyDataSource = spy(realDataSource);\r\n        doAnswer(invocation -> {\r\n            if (failNext) {\r\n                failNext = false;\r\n                throw new SQLException(\""Simulated connection failure\"");\r\n            }\r\n            return realDataSource.getConnection();\r\n        }).when(spyDataSource).getConnection();\r\n        return spyDataSource;\r\n    }""]",0,1
"[""@Mock\r\n    private PriceRepository priceRepository;\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n    @Test\r\n    void testUpdatePrice() {\r\n        UUID priceUuid = UUID.randomUUID();\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(200.0);\r\n        Price existingPrice = new Price();\r\n        existingPrice.setUuid(priceUuid);\r\n        existingPrice.setPriceAmount(100.0);\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(existingPrice)).thenAnswer(i -> i.getArgument(0));\r\n        PriceDTO result = priceService.update(priceUuid, request);\r\n        assertEquals(200.0, result.getPriceAmount());\r\n        verify(priceRepository).findByUuid(priceUuid);\r\n        verify(priceRepository).saveAndFlush(existingPrice);\r\n    }""]",0,1
"[""basePackages = \""com.repository.mongo\"",\r\n    mongoTemplateRef = \""mongoTemplate\""\r\n    basePackages = \""com.repository.redis\"",\r\n    redisTemplateRef = \""redisTemplate\""\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n    @Bean\r\n    public MongoClient mongoClient() {\r\n        return MongoClients.create(\""mongodb://localhost:27017\"");\r\n    }\r\n    @Bean(name = \""mongoTemplate\"")\r\n    public MongoTemplate mongoTemplate() {\r\n        return new MongoTemplate(mongoClient(), \""mydb\"");\r\n    }\r\n    @Bean\r\n    public RedisConnectionFactory redisConnectionFactory() {\r\n        return new LettuceConnectionFactory(\""localhost\"", 6379);\r\n    }\r\n    @Bean(name = \""redisTemplate\"")\r\n    public RedisTemplate<String, Store> redisTemplate() {\r\n        RedisTemplate<String, Store> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(redisConnectionFactory());\r\n        return template;\r\n    }""]",0,1
"[""AssetManager assetManager = requireContext().getAssets();\r\n    File targetDir = new File(requireContext().getExternalFilesDir(null), \""databases\"");\r\n    if (!targetDir.exists()) targetDir.mkdirs();\r\n    try {\r\n        String[] files = assetManager.list(\""database/test\"");\r\n        if (files != null) {\r\n            for (String filename : files) {\r\n                File outFile = new File(targetDir, filename);\r\n                if (outFile.exists()) continue;\r\n                try (InputStream in = assetManager.open(\""database/test/\"" + filename);\r\n                     OutputStream out = new FileOutputStream(outFile)) {\r\n                    byte[] buffer = new byte[1024];\r\n                    int read;\r\n                    while ((read = in.read(buffer)) != -1) {\r\n                        out.write(buffer, 0, read);\r\n                    }\r\n                    out.flush();\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        for (int i = 0; i < 10000; i++) {\r\n            measure();\r\n        }\r\n    }\r\n    private static void measure() {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n        long t1 = System.nanoTime();\r\n        collection.add(\""a\"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(\""b\"");\r\n        long t3 = System.nanoTime();\r\n        long firstAdd = t2 - t1;\r\n        long secondAdd = t3 - t2;\r\n        System.out.println(firstAdd + \"",\"" + secondAdd);\r\n    }""]",0,1
"[""super.paintComponent(g);\r\n    if (ApplicationImages.getImage() != null) {\r\n        Graphics2D g2d = (Graphics2D) g.create();\r\n        int panelWidth = getWidth();\r\n        int panelHeight = getHeight();\r\n        Image scaledImage = ApplicationImages.getImage().getScaledInstance(\r\n                panelWidth, panelHeight, Image.SCALE_SMOOTH);\r\n        g2d.drawImage(scaledImage, 0, 0, panelWidth, panelHeight, this);\r\n        g2d.dispose();\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        long start = System.currentTimeMillis();\r\n        int numberOfTasks = 10;\r\n        List<Future<String>> futures;\r\n        try (ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                    .mapToObj(Task::new)\r\n                    .map(executor::submit)\r\n                    .toList();\r\n        }\r\n        for (Future<String> future : futures) {\r\n            future.get();\r\n        }\r\n        long end = System.currentTimeMillis();\r\n        System.out.println(\""Total time: \"" + (end - start) + \"" ms\"");\r\n    }\r\n    record Task(int id) implements Callable<String> {\r\n        @Override\r\n        public String call() {\r\n            System.out.println(\""Task \"" + id + \"" started\"");\r\n            long start = System.currentTimeMillis();\r\n            String result = \""\"";\r\n            try (Connection connection = DriverManager.getConnection(\r\n                    \""jdbc:mysql://localhost/sakila?user=sakila&password=sakila\"")) {\r\n                var statement = connection.createStatement();\r\n                var resultSet = statement.executeQuery(\""SELECT hello_world() AS output\"");\r\n                while (resultSet.next()) {\r\n                    result = resultSet.getString(\""output\"");\r\n                }\r\n                statement.close();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            long end = System.currentTimeMillis();\r\n            System.out.println(\""Task \"" + id + \"" completed in \"" + (end - start) + \"" ms\"");\r\n            return result;\r\n        }\r\n    }""]",0,1
"[""R make();\r\n    T value;\r\n    AlphaTaskResult(String value) {\r\n        this.value = value;\r\n    }\r\n    BetaTaskResult(Integer value) {\r\n        this.value = value;\r\n    }\r\n    public AlphaTaskResult make() {\r\n        return new AlphaTaskResult(\""alphaTask\"");\r\n    }\r\n    public BetaTaskResult make() {\r\n        return new BetaTaskResult(9001);\r\n    }\r\n    public static <T, R extends TaskResult<T>, V extends ITask<T, R>> List<R> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(V::make)\r\n                .collect(Collectors.toList());\r\n    }\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }""]",0,1
"[""List<String> out = new ArrayList<>();\r\n    String[] comm = {\r\n        \""cmd.exe\"",\r\n        \""/S\"",\r\n        \""/K\"",\r\n        \""\\\""\"" + command + \"" & exit\\\""\""\r\n    };\r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        p.waitFor();\r\n        p.destroy();\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n        return null;\r\n    }\r\n    return out;""]",0,1
"[""response.setHeader(\""content-type\"", \""application/json\"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(\""[\"");\r\n    \r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write(\"",\"");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    respWriter.write(\""]\"");\r\n    respWriter.flush();\r\n    log(e);""]",0,1
"[""public static void parseTsv(String filePath) throws Exception {\r\n        CSVReader reader = new CSVReaderBuilder(\r\n                new InputStreamReader(Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n                .withCSVParser(new CSVParserBuilder().withSeparator('\\t').build())\r\n                .build();\r\n        String[] line;\r\n        while ((line = reader.readNext()) != null) {\r\n            System.out.println(line[0] + \"" \"" + line[1]);\r\n        }\r\n        reader.close();\r\n    }\r\n    public static void main(String[] args) {\r\n        try {\r\n            parseTsv(\""/path-to-tsv-file.tsv\"");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }""]",0,1
"[""void getClient();\r\n    public void getClient() {\r\n        System.out.println(\""UtilOne client\"");\r\n    }\r\n    public void getClient() {\r\n        System.out.println(\""UtilTwo client\"");\r\n    }\r\n    @Autowired\r\n    private ApplicationContext context;\r\n    private String activeUtil = \""utilOne\"";\r\n    public void setActiveUtil(String name) {\r\n        this.activeUtil = name;\r\n    }\r\n    public Util getActiveUtil() {\r\n        return context.getBean(activeUtil, Util.class);\r\n    }\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n    public void useClient() {\r\n        utilFactory.getActiveUtil().getClient();\r\n    }\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n    @PostMapping(\""/set-util/{name}\"")\r\n    public void setUtil(@PathVariable String name) {\r\n        utilFactory.setActiveUtil(name);\r\n    }""]",0,1
"[""public static boolean search(int[][] mat, int num) {\r\n        int n = mat.length;\r\n        int quarterSize = n / 2;\r\n        int[][][] quarters = new int[][][] {\r\n            getQuarter(mat, 0, 0, quarterSize),                         // Q1\r\n            getQuarter(mat, 0, quarterSize, quarterSize),              // Q2\r\n            getQuarter(mat, quarterSize, quarterSize, quarterSize),   // Q3\r\n            getQuarter(mat, quarterSize, 0, quarterSize)              // Q4\r\n        };\r\n        for (int[][] quarter : quarters) {\r\n            if (num >= quarter[0][0] && num <= quarter[quarter.length - 1][quarter[0].length - 1]) {\r\n                if (binarySearchQuarter(quarter, num)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private static int[][] getQuarter(int[][] mat, int rowStart, int colStart, int size) {\r\n        int[][] quarter = new int[size][size];\r\n        for (int i = 0; i < size; i++) {\r\n            System.arraycopy(mat[rowStart + i], colStart, quarter[i], 0, size);\r\n        }\r\n        return quarter;\r\n    }\r\n    private static boolean binarySearchQuarter(int[][] quarter, int num) {\r\n        int rows = quarter.length;\r\n        int cols = quarter[0].length;\r\n        int low = 0, high = rows * cols - 1;\r\n        while (low <= high) {\r\n            int mid = (low + high) / 2;\r\n            int r = mid / cols;\r\n            int c = mid % cols;\r\n            int value = quarter[r][c];\r\n            if (value == num) return true;\r\n            if (value < num) low = mid + 1;\r\n            else high = mid - 1;\r\n        }\r\n        return false;\r\n    }""]",0,1
"[""private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument src1Document = new XWPFDocument(srcPackage);\r\n        if (inputs.size() == 1) {\r\n            first = src1Document;\r\n        } else {\r\n            XWPFParagraph pageBreak = first.createParagraph();\r\n            XWPFRun run = pageBreak.createRun();\r\n            run.addBreak(org.apache.poi.xwpf.usermodel.BreakType.PAGE);\r\n            XmlCursor cursor = first.getDocument().getBody().newCursor();\r\n            cursor.toEndToken();\r\n            for (XWPFParagraph p : src1Document.getParagraphs()) {\r\n                XWPFParagraph newParagraph = first.createParagraph();\r\n                newParagraph.getCTP().set(p.getCTP().copy());\r\n            }\r\n        }\r\n    }\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n        String maskedPasswordStr = \""MASK-38PaKyS.9hHaRq7pAaE5tB;12345678;123\"";\r\n        char[] maskedPasswordChars = maskedPasswordStr.toCharArray();\r\n        Password password = ModularCrypt.decode(maskedPasswordChars);\r\n        PasswordCredential credential = new PasswordCredential(password);\r\n        ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                IdentityCredentials.NONE.withCredential(credential));\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n        CredentialStore credentialStore = CredentialStore.getInstance(KeyStoreCredentialStore.KEY_STORE_CREDENTIAL_STORE);\r\n        String configPath = System.getProperty(\""jboss.server.data.dir\"");\r\n        String path = configPath + File.separator + \""credentials\"" + File.separator + \""csstore.jceks\"";\r\n        Map<String, String> configuration = new HashMap<>();\r\n        configuration.put(\""keyStoreType\"", \""JCEKS\"");\r\n        configuration.put(\""location\"", path);\r\n        configuration.put(\""modifiable\"", \""false\"");\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n    }""]",0,1
"[""private static final String JOB_NAME = \""abc\"";\r\n    private static final String JOB_METHOD_NAME = \""xyz\"";\r\n    private final MyJob myJob;\r\n    @Inject\r\n    public MyCamelRouteBuilder(MyJob myJob) {\r\n        this.myJob = myJob;\r\n    }\r\n    @Override\r\n    public void configure() {\r\n        from(\""direct:\"" + JOB_NAME)\r\n            .routeId(JOB_NAME)\r\n            .bean(myJob, JOB_METHOD_NAME)\r\n            .end();\r\n        fromF(\""master:some_name_1/some_name_2:scheduler:%s?delay=%s\"", JOB_NAME, 1234)\r\n            .routeId(\""JobTimer\"")\r\n            .to(\""direct:\"" + JOB_NAME)\r\n            .end();\r\n    }\r\n    public void xyz() {\r\n        System.out.println(\""Job executed\"");\r\n    }\r\n    private static final String JOB_NAME = \""abc\"";\r\n    private final CamelContext camelContext;\r\n    private final ProducerTemplate producerTemplate;\r\n    @Inject\r\n    public MyController(CamelContext camelContext) {\r\n        this.camelContext = camelContext;\r\n        this.producerTemplate = camelContext.createProducerTemplate();\r\n    }\r\n    @PostMapping(\""/my_endpoint\"")\r\n    public String run() {\r\n        producerTemplate.sendBody(\""direct:\"" + JOB_NAME, null);\r\n        return \""ok\"";\r\n    }""]",0,1
"[""@Override\r\n    public void onClick(View v) {\r\n        LayoutInflater inflater = LayoutInflater.from(getActivity());\r\n        View newProductView = inflater.inflate(R.layout.product_layout, null);\r\n        ImageButton removeBtn = new ImageButton(getActivity());\r\n        removeBtn.setImageResource(android.R.drawable.ic_delete);\r\n        removeBtn.setBackgroundColor(Color.TRANSPARENT);\r\n        LinearLayout container = new LinearLayout(getActivity());\r\n        container.setOrientation(LinearLayout.HORIZONTAL);\r\n        container.addView(newProductView);\r\n        container.addView(removeBtn);\r\n        LinearLayout parentLayout = getView().findViewById(R.id.parent_linear_layout);\r\n        parentLayout.addView(container);\r\n        removeBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                parentLayout.removeView(container);\r\n            }\r\n        });\r\n    }""]",0,1
"[""public static PrivateKey loadPrivateKey(String filename, String passphrase) throws Exception {\r\n        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n        Reader fileReader = new FileReader(filename);\r\n        PEMParser pemParser = new PEMParser(fileReader);\r\n        Object object = pemParser.readObject();\r\n        JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\""BC\"");\r\n        PrivateKey privateKey;\r\n        if (object instanceof PEMEncryptedKeyPair) {\r\n            PEMEncryptedKeyPair encryptedKeyPair = (PEMEncryptedKeyPair) object;\r\n            JcePEMDecryptorProviderBuilder builder = new JcePEMDecryptorProviderBuilder();\r\n            InputDecryptorProvider decProv = builder.build(passphrase.toCharArray());\r\n            PEMKeyPair keyPair = encryptedKeyPair.decryptKeyPair(decProv);\r\n            privateKey = converter.getKeyPair(keyPair).getPrivate();\r\n        } else if (object instanceof PEMKeyPair) {\r\n            PEMKeyPair keyPair = (PEMKeyPair) object;\r\n            privateKey = converter.getKeyPair(keyPair).getPrivate();\r\n        } else {\r\n            throw new IllegalArgumentException(\""Invalid key format\"");\r\n        }\r\n        pemParser.close();\r\n        return privateKey;\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        PrivateKey key = loadPrivateKey(\""path/to/encrypted_private_key.pem\"", \""your_passphrase\"");\r\n        System.out.println(\""Private Key Loaded: \"" + key.getAlgorithm());\r\n    }""]",0,1
"[""@Override\r\n    public void init(ServletConfig config) throws ServletException {\r\n        super.init(config);\r\n        try {\r\n            connectToBackendServer();\r\n        } catch (Exception e) {\r\n            throw new UnavailableException(\""Cannot connect to Backend Server\"");\r\n        }\r\n    }\r\n    private void connectToBackendServer() throws Exception {\r\n        String backendHost = getServletConfig().getInitParameter(\""backendHost\"");\r\n        if (backendHost == null || backendHost.isEmpty()) {\r\n            throw new Exception(\""Missing backendHost\"");\r\n        }\r\n        // simulate connection failure\r\n        throw new Exception(\""Connection failed\"");\r\n    }""]",0,1
"[""static int i = 0;\r\n    public static void f(){\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n            new Thread(Solution::f).start();\r\n        }\r\n    }\r\n    public static void main(String[] args) {\r\n        f();\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage stage) {\r\n        TextArea textArea = new TextArea(\""?? ?? ?? ?? ?? ??\"");\r\n        textArea.setStyle(\""-fx-font-family: 'Segoe UI Emoji', 'Noto Color Emoji', 'Apple Color Emoji', 'sans-serif'; -fx-font-size: 20px;\"");\r\n        textArea.setWrapText(true);\r\n        StackPane root = new StackPane(textArea);\r\n        Scene scene = new Scene(root, 400, 300);\r\n        stage.setScene(scene);\r\n        stage.setTitle(\""Emoji Support\"");\r\n        stage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        System.setProperty(\""prism.text\"", \""t2k\"");\r\n        launch();\r\n    }""]",0,1
"[""private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = \""PyqAllItems\"";\r\n    private static final String SELECTED_ITEMS_KEY = \""PyqSelectedItems\"";\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundDark);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundDark);\r\n        } else {\r\n            defaultBackgroundColor = ContextCompat.getColor(mCtx, R.color.defaultBackgroundLight);\r\n            selectedBackgroundColor = ContextCompat.getColor(mCtx, R.color.selectedBackgroundLight);\r\n        }\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) {\r\n            selectedPositions.add(Integer.parseInt(position));\r\n        }\r\n    }\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false);\r\n        return new ViewHolder(view);\r\n    }\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        PyqModel model = pyqModelList.get(position);\r\n        holder.textView.setText(model.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(model.getPyqTopics());\r\n        if (selectedPositions.contains(position)) {\r\n            holder.cardView.setCardBackgroundColor(selectedBackgroundColor);\r\n        } else {\r\n            holder.cardView.setCardBackgroundColor(defaultBackgroundColor);\r\n        }\r\n        holder.cardView.setOnClickListener(v -> {\r\n            selectedPositions.add(position);\r\n            saveSelection();\r\n            notifyItemChanged(position);\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(\""pdfName\"", model.getPdfName());\r\n            i.putExtra(\""pdfUrl\"", model.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n    private void saveSelection() {\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = prefs.edit();\r\n        Set<String> selectedItems = new HashSet<>();\r\n        for (int pos : selectedPositions) {\r\n            selectedItems.add(String.valueOf(pos));\r\n        }\r\n        editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems);\r\n        editor.apply();\r\n    }\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }""]",0,1
"[""List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter();\r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR,\r\n                 CSVWriter.NO_QUOTE_CHARACTER,\r\n                 CSVWriter.NO_ESCAPE_CHARACTER,\r\n                 CSVWriter.DEFAULT_LINE_END)) {\r\n        List<String[]> rows = new ArrayList<>();\r\n        for (DmnTestCaseResult res : results) {\r\n            Map<String, Object> input = res.getTestInput();\r\n            Map<String, Object> expected = res.getExpectedOutput();\r\n            List<Map<String, Object>> outputs = res.getTestOutput();\r\n            String error = res.getErrorMessage();\r\n            for (Map<String, Object> output : outputs) {\r\n                List<String> row = new ArrayList<>();\r\n                row.add(input.toString());\r\n                row.add(expected.toString());\r\n                row.add(output.toString());\r\n                row.add(error);\r\n                rows.add(row.toArray(new String[0]));\r\n            }\r\n        }\r\n        writer.writeAll(rows);\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }""]",0,1
"[""int n = nodes.size();\r\n    Map<String, Integer> indexMap = new HashMap<>();\r\n    for (int i = 0; i < n; i++) {\r\n        indexMap.put(nodes.get(i), i);\r\n    }\r\n    level = new int[n];\r\n    Arrays.fill(level, -1);\r\n    level[indexMap.get(source)] = 0;\r\n    Queue<String> queue = new LinkedList<>();\r\n    queue.offer(source);\r\n    while (!queue.isEmpty()) {\r\n        String u = queue.poll();\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            if (capacity > 0 && level[indexMap.get(v)] == -1) {\r\n                level[indexMap.get(v)] = level[indexMap.get(u)] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n    if (u.equals(sink)) {\r\n        return flow;\r\n    }\r\n    for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n        String v = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        if (capacity > 0 && level[indexMap.get(u)] < level[indexMap.get(v)]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sink, indexMap);\r\n            if (sent > 0) {\r\n                network.get(u).put(v, capacity - sent);\r\n                network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n    for (T t : graph.keySet()) {\r\n        addEdge(\""src\"", \""A\"" + t.toString(), 1);\r\n        addEdge(\""B\"" + t, \""sink\"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(\""A\"" + t, u, 1);\r\n        }\r\n    }\r\n    Map<String, Integer> indexMap = new HashMap<>();\r\n    for (int i = 0; i < nodes.size(); i++) {\r\n        indexMap.put(nodes.get(i), i);\r\n    }\r\n    int maxFlow = 0;\r\n    while (true) {\r\n        bfs(\""src\"");\r\n        if (level[indexMap.get(\""sink\"")] == -1) {\r\n            break;\r\n        }\r\n        int flow;\r\n        while ((flow = dfs(\""src\"", Integer.MAX_VALUE, \""sink\"", indexMap)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n    return graph.size() - maxFlow;""]",0,1
"[""private static Ringtone ringtone;\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(1000, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        } else {\r\n            vibrator.vibrate(1000);\r\n        }\r\n        String event = intent.getStringExtra(\""title\"");\r\n        String comment = intent.getStringExtra(\""comment\"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.putExtra(\""stop_sound\"", true);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(\r\n                context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);\r\n        String text = \""Reminder for the Event:\\n\"" + event + \""\\nComments:\\n\"" + comment;\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, \""myandroid\"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(text)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(text))\r\n                .setContentIntent(pendingIntent)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n        notificationManagerCompat.notify(123, builder.build());\r\n        Uri notificationUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notificationUri);\r\n        ringtone.play();\r\n    }\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n    @Override\r\n    protected void onNewIntent(Intent intent) {\r\n        super.onNewIntent(intent);\r\n        if (intent != null && intent.getBooleanExtra(\""stop_sound\"", false)) {\r\n            AlarmReceiver.stopRingtone();\r\n        }\r\n    }""]",0,1
"[""public static void main(String[] args) {\r\n        int[] array = new int[10];\r\n        array[0] = 6;\r\n        array[1] = 2;\r\n        array[2] = 8;\r\n        array[3] = 1;\r\n        array[4] = 3;\r\n        array[5] = 0;\r\n        array[6] = 9;\r\n        array[7] = 7;\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\""Search for? \"");\r\n        int searching = in.nextInt();\r\n        boolean found = false;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (searching == array[i]) {\r\n                System.out.println(searching + \"" is at index \"" + i + \"".\"");\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            System.out.println(searching + \"" was not found.\"");\r\n        }\r\n    }""]",0,1
"[""@Override\r\n    public void start(Stage primaryStage) {\r\n        Box box = new Box(100, 100, 100);\r\n        PhongMaterial material = new PhongMaterial(Color.BLUE);\r\n        box.setMaterial(material);\r\n        Box outline = new Box(110, 110, 110);\r\n        outline.setDrawMode(DrawMode.LINE);\r\n        outline.setMaterial(new PhongMaterial(Color.YELLOW));\r\n        Group group = new Group(outline, box);\r\n        group.setOnMouseClicked(e -> {\r\n            if (outline.isVisible()) {\r\n                outline.setVisible(false);\r\n            } else {\r\n                outline.setVisible(true);\r\n            }\r\n        });\r\n        outline.setVisible(false);\r\n        PerspectiveCamera camera = new PerspectiveCamera(true);\r\n        camera.setTranslateZ(-500);\r\n        Scene scene = new Scene(new Group(group), 600, 400, true);\r\n        scene.setCamera(camera);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\""3D Outline Selection Example\"");\r\n        primaryStage.show();\r\n    }\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }""]",0,1
"[""UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();\r\n    return Jwts.builder()\r\n            .setSubject(userPrincipal.getUsername())\r\n            .claim(\""tenantId\"", tenantId)\r\n            .setIssuedAt(new Date())\r\n            .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))\r\n            .signWith(SignatureAlgorithm.HS512, jwtSecret)\r\n            .compact();\r\n    return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody().get(\""tenantId\"", String.class);\r\n        throws ServletException, IOException {\r\n    try {\r\n        String jwt = parseJwt(request);\r\n        if (jwt != null && jwtUtils.validateJwtToken(jwt)) {\r\n            String username = jwtUtils.getUserNameFromJwtToken(jwt);\r\n            String tokenTenantId = jwtUtils.getTenantIdFromJwtToken(jwt);\r\n            String serverName = request.getServerName();\r\n            String requestTenantId = serverName.substring(0, serverName.indexOf(\"".\""));\r\n            if (!requestTenantId.equals(tokenTenantId)) {\r\n                throw new RuntimeException(\""Tenant ID mismatch\"");\r\n            }\r\n            UserDetails userDetails = userDetailsService.loadUserByUsername(username);\r\n            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(\r\n                    userDetails, null, userDetails.getAuthorities());\r\n            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n        }\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    filterChain.doFilter(request, response);\r\n    Authentication authentication = authenticationManager.authenticate(\r\n            new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));\r\n    SecurityContextHolder.getContext().setAuthentication(authentication);\r\n    String jwt = jwtUtils.generateJwtToken(authentication, tenantId);\r\n    UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();\r\n    List<String> roles = userDetails.getAuthorities().stream()\r\n            .map(GrantedAuthority::getAuthority)\r\n            .collect(Collectors.toList());\r\n    return new JwtResponse(jwt,\r\n            userDetails.getId(),\r\n            userDetails.getUsername(),\r\n            roles);\r\n        @RequestAttribute String subdomain,\r\n        @Valid @RequestBody LoginRequest loginRequest\r\n    if (!userTenantRepository.existsByUsernameAndSubdomain(subdomain, loginRequest.getUsername())) {\r\n        return ResponseEntity.badRequest().body(new MessageResponse(\""Unauthorized: Tenant access denied\""));\r\n    }\r\n    return ResponseEntity.ok(authService.authenticateUser(subdomain, loginRequest));""]",0,1
"[""Scanner scan = new Scanner(System.in);\r\n    public String inputTake() {\r\n        System.out.println(\""choose a word, pick carefully: \"");\r\n        String guess = scan.next();\r\n        return checkInput(guess);\r\n    }\r\n    public String checkInput(String input) {\r\n        boolean isGood = true;\r\n        if (input.length() != 5)\r\n            isGood = false;\r\n        if (!input.matches(\""[a-zA-Z]+\""))\r\n            isGood = false;\r\n        if (!isGood) {\r\n            System.out.println(\""make sure your guess consists of 5 english letters, try again.\"");\r\n            return inputTake();\r\n        }\r\n        return input;\r\n    }\r\n    public static void main(String[] args) {\r\n        Board board1 = new Board();\r\n        String guess = board1.inputTake();\r\n        System.out.println(\""Your guess is: \"" + guess);\r\n    }""]",0,1
"[""@Mapping(target = \""agentName\"", source = \""agentName\"")\r\n    @Mapping(target = \""agentIdentityType\"", source = \""agentIdentityType\"")\r\n    @Mapping(target = \""agentIdentityNo\"", source = \""agentIdentityNo\"")\r\n    @Mapping(target = \""agentIdentityExpireAt\"", source = \""agentIdentityExpireAt\"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO dto) {\r\n        if (dto == null) {\r\n            return null;\r\n        }\r\n        String agentName = dto.getAgentName();\r\n        String agentIdentityType = dto.getAgentIdentityType();\r\n        String agentIdentityNo = dto.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = dto.getAgentIdentityExpireAt();\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new FileReader(System.getProperty(\""user.home\"") + \""\\\\Desktop\\\\testData.txt\""));\r\n        List<String> headers = new ArrayList<>();\r\n        List<HashMap<String, String>> myTable = new ArrayList<>();\r\n        String line;\r\n        int lineNumber = 0;\r\n        while ((line = br.readLine()) != null) {\r\n            if (lineNumber == 0) {\r\n                headers = Arrays.asList(line.split(\"",\""));\r\n            } else {\r\n                String[] values = line.split(\"",\"");\r\n                HashMap<String, String> myRecord = new HashMap<>();\r\n                for (int i = 0; i < headers.size(); i++) {\r\n                    myRecord.put(headers.get(i), values[i]);\r\n                }\r\n                myTable.add(myRecord);\r\n            }\r\n            lineNumber++;\r\n        }\r\n        System.out.println(myTable);\r\n        br.close();\r\n    }""]",0,1
"[""@Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long startTime = System.nanoTime();\r\n        return chain.filter(exchange)\r\n                .doFinally(signalType -> {\r\n                    long duration = System.nanoTime() - startTime;\r\n                    exchange.getResponse().getHeaders().set(\""server-timing\"", Long.toString(duration));\r\n                });\r\n    }""]",0,1
"[""pet_type: Literal['cat']\r\n    meows: int\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n    class Config:\r\n        extra = Extra.forbid\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n    class Config:\r\n        extra = Extra.forbid\r\n    Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1)\r\n    print(e)\r\n    # To provide the input directly without a nested 'pet' dict,\r\n    # create a custom root validator or change your model structure.\r\n    # Here's a simple example using a root validator:\r\n    from pydantic import root_validator\r\n    class ModelFlat(BaseModel):\r\n        pet_type: str\r\n        barks: float = None\r\n        meows: int = None\r\n        scales: bool = None\r\n        n: int\r\n        @root_validator(pre=True)\r\n        def check_pet_type(cls, values):\r\n            pet_type = values.get('pet_type')\r\n            if pet_type == 'dog':\r\n                if values.get('barks') is None:\r\n                    raise ValueError('barks is required for dog')\r\n                if 'meows' in values or 'scales' in values:\r\n                    raise ValueError('Invalid fields for dog')\r\n            elif pet_type == 'cat':\r\n                if values.get('meows') is None:\r\n                    raise ValueError('meows is required for cat')\r\n                if 'barks' in values or 'scales' in values:\r\n                    raise ValueError('Invalid fields for cat')\r\n            elif pet_type in ['reptile', 'lizard']:\r\n                if values.get('scales') is None:\r\n                    raise ValueError('scales is required for lizard')\r\n                if 'barks' in values or 'meows' in values:\r\n                    raise ValueError('Invalid fields for lizard')\r\n            else:\r\n                raise ValueError('Unknown pet_type')\r\n            return values\r\n    try:\r\n        ModelFlat(pet_type='dog', barks=3.14, eats='biscuit', n=1)\r\n    except ValidationError as e:\r\n        print(e)\r\n    except ValueError as e:\r\n        print(e)""]",0,1
"[""async def __aenter__(self):\r\n        print(\""Enter to the Context Manager...\"")\r\n        return self\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(\""Exit from the Context Manager...\"")\r\n        try:\r\n            await asyncio.sleep(1)\r\n            print(\""This line is now executed\"")\r\n            await asyncio.sleep(1)\r\n        except asyncio.CancelledError:\r\n            print(\""CancelledError caught in __aexit__\"")\r\n        return True\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break""]",0,1
"[""constructor(length, width) {\r\n        this.name = \""Rectangle\"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n    shoutArea() {\r\n        console.log(\r\n            `I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`\r\n        );\r\n    }\r\n    rectHello() {\r\n        return \""Rectanglish: hello\"";\r\n    }\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = \""Square\"";\r\n    }\r\n    squaHello() {\r\n        const h = super.rectHello();\r\n        return \""Squarish:\"" + h.split(':')[1];\r\n    }""]",0,1
"[""def __init__(self, model):\r\n        self.model = model\r\n        self.attentions = []\r\n        self.attention_gradients = []\r\n        for name, module in self.model.named_modules():\r\n            if name == 'layer1':\r\n                module.register_forward_hook(self.get_attention)\r\n                module.register_full_backward_hook(self.get_attention_gradient)\r\n    def get_attention(self, module, input, output):\r\n        self.attentions.append(output)\r\n    def get_attention_gradient(self, module, grad_input, grad_output):\r\n        self.attention_gradients.append(grad_output[0])\r\n    def __call__(self, x):\r\n        self.model.zero_grad()\r\n        output = self.model(x)\r\n        loss = output.sum()\r\n        loss.backward()\r\n        return output\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.layer1 = nn.Linear(4, 4)\r\n        self.layer2 = nn.Linear(4, 1)\r\n    def forward(self, x):\r\n        x = self.layer1(x)\r\n        x = self.layer2(x)\r\n        return x""]",0,1
"[""'Num': ['AA-24'],\r\n    'TP1(USD)': [0],\r\n    'TP2(USD)': [700],\r\n    'TP3(USD)': [2100],\r\n    'VReal1(USD)': [300],\r\n    'VReal2(USD)': [1159],\r\n    'VReal3(USD)': [2877],\r\n    'TiV1 (EUR)': [30],\r\n    'TiV2 (EUR)': [30],\r\n    'TiV3 (EUR)': [47],\r\n    'TR': [10],\r\n    'TR-Tag': [5]\r\n    'ID': range(1, 4),\r\n    'Price': price,\r\n    'Net': net,\r\n    'Range': range_""]",0,1
"[""with open(file_path, 'r') as file:\r\n        lines = file.readlines()\r\n    height, width = len(lines), len(lines[0])\r\n    image_data = np.zeros((height + 2, width + 2))\r\n    for i in range(2, height + 2):\r\n        for j in range(2, width + 2):\r\n            image_data[i][j] = 1 if lines[i - 2][j - 2] == '1' else 0\r\n    return image_data\r\n    contours = measure.find_contours(image_array, level=0.5, positive_orientation='high')\r\n    contour = max(contours, key=len)\r\n    contour = np.column_stack((contour[:, 1], contour[:, 0]))\r\n    contour[:, 1] = image_array.shape[0] - contour[:, 1]\r\n    contour[:, 0] /= image_array.shape[1]\r\n    contour[:, 1] /= image_array.shape[0]\r\n    contour[:, 0] *= 250\r\n    contour[:, 1] *= 250\r\n    return contour\r\n    complex_points = np.array([x + 1j * y for x, y in points])\r\n    t = np.linspace(0, 1, len(complex_points), endpoint=False)\r\n    c_k = np.zeros(num_coefficients, dtype=np.complex128)\r\n    for k in range(-num_coefficients // 2, num_coefficients // 2):\r\n        index = k + num_coefficients // 2\r\n        c_k[index] = np.sum(complex_points * np.exp(-2j * np.pi * k * t)) / len(t)\r\n    return c_k\r\n    t = np.linspace(0, 1, num_points, endpoint=False)\r\n    curve = np.zeros(num_points, dtype=complex)\r\n    half = len(coefficients) // 2\r\n    for k in range(-half, half):\r\n        index = k + half\r\n        curve += coefficients[index] * np.exp(2j * np.pi * k * t)\r\n    return curve\r\n    coeffs = calculate_fourier(contour, num_coeff)\r\n    curve = draw_fourier_curve(coeffs, 500)\r\n    plt.figure(figsize=(6, 6))\r\n    plt.plot(curve.real, curve.imag, color='blue')\r\n    plt.title(f\""{num_coeff} Fourier Coefficients\"")\r\n    plt.axis('equal')\r\n    filename = f\""frame_{num_coeff}.png\""\r\n    plt.savefig(filename)\r\n    plt.close()\r\n    png_files.append(filename)\r\n    for filename in png_files:\r\n        image = imageio.imread(filename)\r\n        writer.append_data(image)""]",0,1
"[""if message.author.bot:\r\n        return\r\n    if message.type != discord.MessageType.default:\r\n        return\r\n    if isinstance(message.channel, discord.DMChannel):\r\n        return\r\n    prefix_now = \""/\""\r\n    if message.content.startswith(str(prefix_now)):\r\n        try:\r\n            await message.reply(\"" ?? - **UMSTIEG AUF SLASH-COMMANDS:** Ab **jetzt** laufen alle Befehle dieses Bots auf `/` - um Leistung zu sparen und die Erfahrung zu verbessern. Nutze `/help` um eine Befehlsliste zu sehen.\"")\r\n        except discord.Forbidden:\r\n            pass\r\n        return\r\n    if client.user in message.mentions:\r\n        from random import choice\r\n        response = choice([\r\n            \""Mit mir kann man die coolsten Gewinnspiele starten! ??\"",\r\n            \""Wird Zeit jemanden den Tag zu versüßen! ??\"",\r\n            \""Wer nicht auf diesem Server ist, hat die Kontrolle über sein Leben verloren! ??\"",\r\n            \""Wann startet endlich ein neues Gewinnspiel? ??\"",\r\n            \""Ich bin der BESTE Gewinnspiel-Bot - Wer was anderes sagt, lügt! ??\""\r\n        ])\r\n        try:\r\n            await message.reply(f\""{response} (Mein Präfix: `/`)\"", mention_author=False)\r\n        except (discord.Forbidden, discord.HTTPException, discord.NotFound):\r\n            pass\r\n        return\r\n    count = 1\r\n    mydb = await getConnection()\r\n    mycursor = await mydb.cursor()\r\n    await mycursor.execute(\""SELECT ignore_role_id, bonus_role_id FROM guild_role_settings WHERE guild_id = %s\"", (message.guild.id,))\r\n    in_database = await mycursor.fetchone()\r\n    if in_database:\r\n        if in_database[0]:\r\n            for roleid in in_database[0].split():\r\n                if int(roleid) in [r.id for r in message.author.roles]:\r\n                    await mycursor.close()\r\n                    mydb.close()\r\n                    return\r\n        if in_database[1]:\r\n            for roleid in in_database[1].split():\r\n                if int(roleid) in [r.id for r in message.author.roles]:\r\n                    count += 1\r\n    await mycursor.execute(\""SELECT ignore_channel_id FROM guild_channel_settings WHERE guild_id = %s\"", (message.guild.id,))\r\n    in_database1 = await mycursor.fetchone()\r\n    if in_database1 and in_database1[0]:\r\n        if str(message.channel.id) in in_database1[0].split():\r\n            await mycursor.close()\r\n            mydb.close()\r\n            return\r\n    await mycursor.execute(\""SELECT * FROM guild_message_count WHERE guild_id = %s AND user_id = %s\"", (message.guild.id, message.author.id))\r\n    in_database2 = await mycursor.fetchone()\r\n    if in_database2:\r\n        await mycursor.execute(\r\n            \""UPDATE guild_message_count SET user_id = %s, message_count = message_count + %s WHERE guild_id = %s AND user_id = %s\"",\r\n            (message.author.id, count, message.guild.id, message.author.id)\r\n        )\r\n    else:\r\n        await mycursor.execute(\r\n            \""INSERT INTO guild_message_count (user_id, message_count, guild_id) VALUES (%s, %s, %s)\"",\r\n            (message.author.id, count, message.guild.id)\r\n        )\r\n    await mydb.commit()\r\n    await mycursor.close()\r\n    mydb.close()\r\n    print(f\""{client.user} is ready\"")\r\n    async with client:\r\n        await client.start(\""your_token_here\"")""]",0,1
"[""point = Point(coords)\r\n    for i, poly in enumerate(polygons):\r\n        if poly.buffer(1e-3).contains(point):\r\n            data.append({\r\n                'x': point.x,\r\n                'y': point.y,\r\n                'label': labels[i],\r\n                'color': colors[i]\r\n            })\r\n            break\r\n           for lbl, clr in zip(labels, colors)]""]",0,1
"[""@classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n    @classmethod\r\n    def validate(cls, v: Any):\r\n        return cls(int(v))\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict) -> None:\r\n        field_schema['type'] = 'string'\r\n    def __str__(self):\r\n        return str(int(self))\r\n    def __repr__(self):\r\n        return str(self)\r\n    id: SnowflakeId\r\n    class Config:\r\n        json_encoders = {\r\n            SnowflakeId: lambda v: str(v)\r\n        }""]",0,1
"[""def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n    def __iter__(self):\r\n        yield self.x\r\n        yield self.y\r\n    def __repr__(self):\r\n        return f\""Point({self.x}, {self.y})\""\r\n    def __eq__(self, other):\r\n        return tuple(self) == tuple(other)\r\n    def __getitem__(self, index):\r\n        return (self.x, self.y)[index]\r\n    def __len__(self):\r\n        return 2\r\n    def __add__(self, other):\r\n        return Point(self.x + other.x, self.y + other.y)\r\n    def __tuple__(self):\r\n        return (self.x, self.y)\r\n    def as_tuple(self):\r\n        return (self.x, self.y)""]",0,1
"[""vertical_spacing=0.05,\r\n                    shared_xaxes=True,\r\n                    subplot_titles=(title, \""\""))\r\n                         y=A_error[err], \r\n                         line_color='green',\r\n                         marker_color='green',\r\n                         mode='lines+markers',\r\n                         showlegend=True,\r\n                         name=\""A\"",\r\n                         hoverinfo='x+y+name'),\r\n              row=1,\r\n              col=1)\r\n                         y=B_error[err], \r\n                         line_color='blue',\r\n                         mode='lines+markers',\r\n                         showlegend=True,\r\n                         name=\""B\"",\r\n                         hoverinfo='x+y+name'),\r\n              row=2,\r\n              col=1)\r\n                  legend_traceorder=\""normal\"")""]",0,1
"[""result = []\r\n    for i, first_level in enumerate(lists[0]):\r\n        for j, second_level in enumerate(lists[1]):\r\n            if i == 0 and j < len(first_level):\r\n                for item in first_level:\r\n                    result.append([lists[0][i][0], second_level, item])\r\n            elif i == 1 and j < len(second_level):\r\n                for item in lists[2]:\r\n                    result.append([lists[0][i][0], second_level[j], item])\r\n    return result\r\n    for color in colors:\r\n        for num in nums:\r\n            output.append([year[0], color, num])\r\n    def helper(i, prefix):\r\n        if i == len(lists) - 1:\r\n            for val in lists[i]:\r\n                yield prefix + [val]\r\n        else:\r\n            for j, sublist in enumerate(lists[i]):\r\n                if isinstance(sublist, list):\r\n                    for val in helper(i+1, prefix + [sublist if isinstance(sublist, str) else lists[i][j]]):\r\n                        yield val\r\n                else:\r\n                    for val in helper(i+1, prefix + [sublist]):\r\n                        yield val\r\n    return list(helper(0, []))\r\n    for j, color in enumerate(b[i]):\r\n        nums = c[j]\r\n        for num in nums:\r\n            result.append([year[0], color, num])""]",0,1
"[""date_rng = pd.date_range(start='1/1/2020', end='1/01/2021', freq='T')\r\n    data = {\r\n        'date': np.random.choice(date_rng, num_rows),\r\n        'category': np.random.choice(['A', 'B', 'C', 'D'], num_rows),\r\n        'subcategory': np.random.choice(['X', 'Y', 'Z'], num_rows),\r\n        'value': np.random.rand(num_rows) * 100\r\n    }\r\n    df = pd.DataFrame(data)\r\n    df = df.sort_values('date')\r\n    df.set_index('date', inplace=False)\r\n    df.index = pd.to_datetime(df.index)\r\n    return df\r\n    index_column=\""date\"",\r\n    every=\""1w\"",\r\n    closed=\""right\"",\r\n    by=[\""category\"", \""subcategory\""]\r\n    pl.col(\""value\"").sum().alias(\""value_sum\""),\r\n    pl.col(\""value\"").mean().alias(\""value_mean\""),\r\n    pl.col(\""value\"").max().alias(\""value_max\""),\r\n    pl.col(\""value\"").min().alias(\""value_min\"")""]",0,1
"[""def __init__(self, app: ASGIApp):\r\n        self.app = app\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send):\r\n        if scope[\""type\""] != \""http\"":\r\n            await self.app(scope, receive, send)\r\n            return\r\n        async def receive_with_modified_body():\r\n            message = await receive()\r\n            if message.get(\""type\"") != \""http.request\"":\r\n                return message\r\n            if not message.get(\""body\""):\r\n                return message\r\n            body = json.loads(message[\""body\""].decode(\""utf-8\""))\r\n            body[\""some_field\""] = \""foobar\""\r\n            message[\""body\""] = json.dumps(body).encode(\""utf-8\"")\r\n            return message\r\n        await self.app(scope, receive_with_modified_body, send)\r\n    data = await request.json()\r\n    return data""]",0,1
"[""doc1 = Document(page_content=\""The sky is blue.\"", metadata={\""document_id\"": \""10\""})\r\n    doc2 = Document(page_content=\""The forest is green\"", metadata={\""document_id\"": \""62\""})\r\n    docs = [doc1, doc2]\r\n    for doc in docs:\r\n        doc.metadata['summary'] = 'hello'\r\n    pprint.pprint(docs)\r\n    embeddings_list = []\r\n    for doc in tqdm(docs, desc=\""Embedding documents\""):\r\n        emb = embeddings.embed_documents([doc.page_content])[0]\r\n        embeddings_list.append(emb)\r\n    db = FAISS.from_embeddings(embeddings_list, docs)\r\n    db.save_local(\""faiss_index\"")\r\n    new_db = FAISS.load_local(\""faiss_index\"", embeddings)\r\n    query = \""Which color is the sky?\""\r\n    docs = new_db.similarity_search_with_score(query)\r\n    print('Retrieved docs:', docs)\r\n    print('Metadata of the most relevant document:', docs[0][0].metadata)\r\n    main()""]",0,1
"[""st.set_page_config(page_title=\""xx\"", page_icon=\""images/logo.png\"")\r\n    logo = Image.open(\""images/logo.png\"")\r\n    st.image(logo, width=300)\r\n    ga_code = \""\""\""\r\n        <iframe src=\""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx\"" style=\""display:none;\""></iframe>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n    \""\""\""\r\n    st.components.v1.html(ga_code, height=0)\r\n    page_header()\r\n    st.write(\""Hello Streamlit\"")\r\n    main()""]",0,1
"[""def __init__(self, *args, **kwargs):\r\n        self._value_source = None\r\n        super().__init__(*args, **kwargs)\r\n    def handle_parse_result(self, ctx, opts, args):\r\n        if self.name in opts:\r\n            self._value_source = 'user'\r\n        else:\r\n            self._value_source = 'default'\r\n        return super().handle_parse_result(ctx, opts, args)\r\n    source = hello.params[0]._value_source\r\n    print(f\""value: {value}, source: {source}\"")\r\n    hello()""]",0,1
"[""n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n    getcontext().prec = n_digits + 1\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n    with tqdm(total=n, position=pos, desc=f\""Job {pos + 1} of {total}\"", leave=True) as pbar:\r\n        for k in range(n):\r\n            t = ((-1) ** k) * factorial(6 * k) * (13591409 + 545140134 * k)\r\n            deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n            pi += Decimal(t) / Decimal(deno)\r\n            pbar.update(1)\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n    return pi\r\n    n_cores = 3\r\n    tasks = [1200, 1700, 900, 1400, 800, 600, 500]\r\n    results = Parallel(n_jobs=n_cores)(\r\n        delayed(calc)(n, pos, len(tasks)) for pos, n in enumerate(tasks)\r\n    )\r\n    parallel_with_joblib()""]",0,1
"[""def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left is None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right is None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n    def traverse_pre(self):\r\n        result = []\r\n        if self.left:\r\n            result += self.left.traverse_pre()\r\n        result.append(self.value)\r\n        if self.right:\r\n            result += self.right.traverse_pre()\r\n        return result""]",0,1
"[""file: bytes = Field(..., description=\""File content\"")\r\n    # your logic here\r\n    pass\r\n    # your logic here\r\n    pass""]",0,1
"[""path_to_img = \""my image path\""\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512))\r\n    image = (image * 255).astype(np.uint8)  # convert to uint8 to match bytes length\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {\""shape\"": image.shape, \""image\"": image_byte.decode()}\r\n    response = requests.get('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n    return {\""Hello\"": \""World\""}\r\n    data = await request.json()\r\n    image_byte = data.get('image').encode()\r\n    image_shape = tuple(data.get('shape'))\r\n    image_array = np.frombuffer(base64.b64decode(image_byte), dtype=np.uint8).reshape(image_shape)\r\n    return {\""shape\"": image_array.shape}  # example response\r\n    uvicorn.run(app, port=8000, host=\""127.0.0.1\"")""]",0,1
"[""return base64.b64decode(encoded)\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i*lbatch:(i+1)*lbatch] for i in range(N-1)]\r\n    batches.append(encoded[(N-1)*lbatch:])\r\n    ret_parts = []\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        ret_parts = list(executor.map(a2b_base64, batches))\r\n    return b\""\"".join(ret_parts)\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i*lbatch:(i+1)*lbatch] for i in range(N-1)]\r\n    batches.append(encoded[(N-1)*lbatch:])\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        ret_parts = list(executor.map(a2b_base64, batches))\r\n    return b\""\"".join(ret_parts)\r\n    CPU_NUM = cpu_count()\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n    print(\""\\nreference_implementation\"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n    print(\""\\nthreaded_impl\"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(\""Verify result\"", \""Ok\"" if dec3 == dec1 else \""FAIL\"")\r\n    print('decoding time =', (t_end - t_start))\r\n    print(\""\\nmutiproc_impl\"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(\""Verify result\"", \""Ok\"" if dec4 == dec1 else \""FAIL\"")\r\n    print('decoding time =', (t_end - t_start))""]",0,1
"[""pl.Series(\""sector_exposure\"", [\r\n        \""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069\"", \r\n        \""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400\""\r\n    ])\r\n    pl.col(\""sector_exposure\"")\r\n    .str.split(\"";\"")\r\n    .list.explode()\r\n    .str.split(\""=\"")\r\n    .arr.to_struct(n_field_strategy=\""max_width\"")\r\n    .unnest()\r\n    .group_by(df.select(pl.int_range(0, df.height)).to_series())\r\n    .agg([\r\n        pl.col(\""field_0\""),\r\n        pl.col(\""field_1\"").cast(pl.Float64)\r\n    ])\r\n    .map_elements(lambda x: dict(zip(x[0], x[1])))\r\n    .struct.rename_fields([\r\n        k for row in df[\""sector_exposure\""].str.split(\"";\"").to_list()\r\n        for k in [v.split(\""=\"")[0] for v in row]\r\n    ])\r\n    .alias(\""sector_struct\"")""]",0,1
"[""pl.Series(\""sector_exposure\"", [\r\n        \""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069\"", \r\n        \""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400\""\r\n    ])\r\n    pl.col(\""sector_exposure\"")\r\n    .str.split(\"";\"")\r\n    .list.explode()\r\n    .str.split(\""=\"")\r\n    .arr.to_struct(n_field_strategy=\""max_width\"")\r\n    .unnest()\r\n    .group_by(df.select(pl.int_range(0, df.height)).to_series())\r\n    .agg([\r\n        pl.col(\""field_0\""),\r\n        pl.col(\""field_1\"").cast(pl.Float64)\r\n    ])\r\n    .map_elements(lambda x: dict(zip(x[0], x[1])))\r\n    .struct.rename_fields([\r\n        k for row in df[\""sector_exposure\""].str.split(\"";\"").to_list()\r\n        for k in [v.split(\""=\"")[0] for v in row]\r\n    ])\r\n    .alias(\""sector_struct\"")""]",0,1
"[""((\""Male\"", \""Yes\""), (\""Male\"", \""No\"")),\r\n    ((\""Female\"", \""Yes\""), (\""Female\"", \""No\""))\r\n    x=x, y=y, hue=hue, row=row, data=tips,\r\n    kind=\""bar\"", ci=\""sd\"", edgecolor=\""black\"", errcolor=\""black\"",\r\n    errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5,\r\n    hue_order=hue_order, order=order\r\n    sns.stripplot, x, y, hue,\r\n    order=order, hue_order=hue_order,\r\n    palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1\r\n    data_subset = tips[tips[row] == time_val]\r\n    annot = Annotator(ax, pairs, data=data_subset, x=x, y=y, hue=hue, order=order, hue_order=hue_order)\r\n    annot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=0)\r\n    annot.apply_test().annotate()""]",0,1
"[""'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n    'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n                              lat=\""LAT\"",\r\n                              lon=\""LON\"",\r\n                              nx_hexagon=25,\r\n                              opacity=0.4,\r\n                              labels={\""color\"": \""Point Count\""},\r\n                              mapbox_style='carto-positron',\r\n                              zoom=1)\r\n    \""layers\"": [\r\n        {\r\n            \""source\"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n            \""below\"": \""traces\"",\r\n            \""type\"": \""fill\"",\r\n            \""color\"": \""orange\"",\r\n            \""opacity\"": 0.1,\r\n            \""line\"": {\""width\"": 1}\r\n        },\r\n    ],""]",0,1
"[""def execute(self, query, params=None):\r\n        pass\r\n    def fetchall(self):\r\n        return [(\""event1\"",), (\""event2\"",)]\r\n    def close(self):\r\n        pass\r\n    def __init__(self):\r\n        self.cursor_obj = MockCursor()\r\n    def cursor(self):\r\n        return self.cursor_obj\r\n    def commit(self):\r\n        pass\r\n    def close(self):\r\n        pass\r\n    mock_connect.return_value = MockConnection()\r\n    db = PostgresqlApi()\r\n    db.add_event(event=\""test event\"")\r\n    db.close()\r\n    mock_connect.return_value = MockConnection()\r\n    db = PostgresqlApi()\r\n    result = db.events()\r\n    assert result == [(\""event1\"",), (\""event2\"",)]\r\n    db.close()""]",0,1
