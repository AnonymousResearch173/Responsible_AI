Code,label,predicted_label
"[""static void doesNotWork(Object o) {\r\n    if (o == null) {\r\n        throw new Error();\r\n    } else if (!(o instanceof String s)) {\r\n        throw new Error();\r\n    }   \r\n    System.out.println(s); // error here\r\n}\r\n\r\njava\r\nstatic void works(Object o) {\r\n    if (o == null || !(o instanceof String s)) {\r\n        throw new Error();\r\n    }\r\n    System.out.println(s); // s is always defined here\r\n}\r\n\r\njava\r\nstatic void works(Object o) {\r\n    if (o == null) {\r\n        throw new Error();\r\n    } else {\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s); // s is now in scope\r\n    }\r\n}\r\n""]",0,1
"[""List<...> results = executorService.submit(() -> \r\n         IntStream.rangeClosed(-from, to)\r\n                 .mapToObj(i -> ...)\r\n                 .map(... -> {\r\n                     try {\r\n                         service.setSomeThreadLocalString(...);\r\n                         MDC.put(..., ...);\r\n                         MDC.put(..., ...);\r\n                         return service.call(...);\r\n                     } finally {\r\n                         service.removeSomeThreadLocalString(...);\r\n                         MDC.remove(...);\r\n                         MDC.remove(...);\r\n                     }\r\n                 })\r\n                 .toList()\r\n     ).get();\r\n     \r\njava\r\n     ForkJoinPool pool = new ForkJoinPool(30);\r\n     List<...> results = pool.submit(() -> \r\n         IntStream.rangeClosed(-from, to)\r\n                 .parallel()\r\n                 .mapToObj(i -> ...)\r\n                 .map(... -> {\r\n                     try {\r\n                         service.setSomeThreadLocalString(...);\r\n                         MDC.put(..., ...);\r\n                         MDC.put(..., ...);\r\n                         return service.call(...);\r\n                     } finally {\r\n                         service.removeSomeThreadLocalString(...);\r\n                         MDC.remove(...);\r\n                         MDC.remove(...);\r\n                     }\r\n                 })\r\n                 .toList()\r\n     ).get();\r\n     ""]",0,1
"[""import com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport java.lang.foreign.*;\r\nimport java.lang.invoke.MethodHandle;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n    private static final int PropModeReplace = 0;\r\n    private static final int XA_CARDINAL = 6;\r\n    private MethodHandle XOpenDisplay, XCloseDisplay, XInternAtom, XChangeProperty, XFlush;\r\n    \r\n    @Override\r\n    public void init() throws Exception {\r\n        Linker linker = Linker.nativeLinker();\r\n        SymbolLookup lookup = Linker.systemLookup();\r\n        \r\n        XOpenDisplay = linker.downcallHandle(lookup.find(""XOpenDisplay"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));\r\n        XCloseDisplay = linker.downcallHandle(lookup.find(""XCloseDisplay"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));\r\n        XInternAtom = linker.downcallHandle(lookup.find(""XInternAtom"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n        XChangeProperty = linker.downcallHandle(lookup.find(""XChangeProperty"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.JAVA_INT, ValueLayout.ADDRESS, ValueLayout.JAVA_INT));\r\n        XFlush = linker.downcallHandle(lookup.find(""XFlush"").orElseThrow(),\r\n            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Task"");\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(""Raw Handle: "" + rawHandle);\r\n            new Thread(createTask(rawHandle)).start();\r\n        });\r\n        VBox vbox = new VBox(10, startButton);\r\n        primaryStage.setScene(new Scene(vbox, 300, 200));\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private Task<Void> createTask(long rawHandle) {\r\n        return new Task<>() {\r\n            @Override\r\n            protected Void call() {\r\n                try (Arena arena = Arena.ofConfined()) {\r\n                    MemorySegment display = (MemorySegment) XOpenDisplay.invokeExact((MemorySegment) null);\r\n                    if (display.equals(MemorySegment.NULL)) {\r\n                        System.err.println(""Failed to open display"");\r\n                        return null;\r\n                    }\r\n                    MemorySegment atomName = arena.allocateUtf8String(""_NET_WM_STATE_DEMANDS_ATTENTION"");\r\n                    int atom = (int) XInternAtom.invokeExact(display, atomName, 0);\r\n                    System.out.println(""Atom: "" + atom);\r\n\r\n                    for (int i = 0; i <= 100; i += 20) {\r\n                        Thread.sleep(500);\r\n                        System.out.println(""Progress: "" + i);\r\n                        MemorySegment progressData = arena.allocate(ValueLayout.JAVA_INT, i);\r\n                        XChangeProperty.invokeExact(display, (int) rawHandle, atom, XA_CARDINAL, 32, PropModeReplace, progressData, 1);\r\n                        XFlush.invokeExact(display);\r\n                    }\r\n                    XCloseDisplay.invokeExact(display);\r\n                } catch (Throwable ex) {\r\n                    ex.printStackTrace();\r\n                }\r\n                return null;\r\n            }\r\n        };\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import java.io.IOException;\r\n\r\npublic class MyClass {\r\n\r\n    static <E extends Exception> void something(int mode) throws E {\r\n        if (mode == 1) {\r\n            throw (E) new RuntimeException(""Unchecked exception"");\r\n        } else if (mode == 2) {\r\n            throw (E) new IOException(""Checked exception"");\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // This compiles fine because RuntimeException is unchecked\r\n        MyClass.<RuntimeException>something(1);\r\n\r\n        try {\r\n            // Explicitly specifying a checked exception requires a try-catch\r\n            MyClass.<IOException>something(2);\r\n        } catch (IOException e) {\r\n            System.out.println(""Caught checked exception: "" + e.getMessage());\r\n        }\r\n    }\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class TooltipAnchoringDemo extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label1 = new Label(""TEST1\nTEST1\nTEST1"");\r\n        label1.setStyle(""-fx-background-color: red; -fx-padding: 10;"");\r\n        Label label2 = new Label(""TEST2\nTEST2\nTEST2"");\r\n        label2.setStyle(""-fx-background-color: green; -fx-padding: 10;"");\r\n        Label label3 = new Label(""TEST3\nTEST3\nTEST3"");\r\n        label3.setStyle(""-fx-background-color: blue; -fx-padding: 10;"");\r\n\r\n        CustomTooltip.install(""TOOLTIP 1"", label1);\r\n        CustomTooltip.install(""TOOLTIP 2"", label2);\r\n        CustomTooltip.install(""TOOLTIP 3"", label3);\r\n\r\n        HBox root = new HBox(15, label1, label2, label3);\r\n        root.setPadding(new Insets(10));\r\n        root.setAlignment(Pos.TOP_LEFT);\r\n\r\n        Scene scene = new Scene(root, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Tooltip Positioning Demo"");\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    // Custom tooltip positioning logic\r\n    static class CustomTooltip {\r\n        public static void install(String text, Label label) {\r\n            Tooltip tooltip = new Tooltip(text);\r\n            tooltip.setShowDelay(Duration.seconds(0.5));\r\n\r\n            label.setOnMouseEntered(e -> {\r\n                Bounds bounds = label.localToScreen(label.getBoundsInLocal());\r\n\r\n                // Compute bottom-right position\r\n                double tooltipX = bounds.getMaxX();\r\n                double tooltipY = bounds.getMaxY();\r\n\r\n                tooltip.show(label, tooltipX, tooltipY);\r\n            });\r\n\r\n            label.setOnMouseExited(e -> tooltip.hide());\r\n\r\n            label.setTooltip(tooltip);\r\n        }\r\n    }\r\n}""]",0,1
"[""package com.example.control;\r\n\r\nimport javafx.beans.property.BooleanProperty;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.PseudoClass;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.event.EventHandler;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\n\r\npublic class Switch extends Control {\r\n\r\n    public Switch() {\r\n        getStyleClass().add(DEFAULT_STYLE_CLASS);\r\n    }\r\n\r\n    public Switch(boolean selected) {\r\n        this();\r\n        setSelected(selected);\r\n    }\r\n\r\n    public void toggle() {\r\n        if (!isDisabled() && !selected.isBound()) {\r\n            setSelected(!isSelected());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected Skin<?> createDefaultSkin() {\r\n        return new SwitchSkin(this);\r\n    }\r\n\r\n    /* **************************************************************************\r\n     *                                                                          *\r\n     * Properties                                                               *\r\n     *                                                                          *\r\n     ****************************************************************************/\r\n\r\n    // -- selected property\r\n    private final BooleanProperty selected = new SimpleBooleanProperty(this, ""selected"") {\r\n        private boolean wasSelected;\r\n\r\n        @Override\r\n        protected void invalidated() {\r\n            boolean isSelected = get();\r\n            if (wasSelected != isSelected) {\r\n                pseudoClassStateChanged(SELECTED, isSelected);\r\n                fireEvent(new ActionEvent()); // Fire event when state changes\r\n                wasSelected = isSelected;\r\n            }\r\n        }\r\n    };\r\n\r\n    public final void setSelected(boolean selected) {\r\n        this.selected.set(selected);\r\n    }\r\n\r\n    public final boolean isSelected() {\r\n        return selected.get();\r\n    }\r\n\r\n    public final BooleanProperty selectedProperty() {\r\n        return selected;\r\n    }\r\n\r\n    // -- onAction property (Making Scene Builder recognize it)\r\n    private ObjectProperty<EventHandler<ActionEvent>> onAction = new SimpleObjectProperty<>(this, ""onAction"") {\r\n        @Override\r\n        protected void invalidated() {\r\n            setEventHandler(ActionEvent.ACTION, get());\r\n        }\r\n    };\r\n\r\n    public final void setOnAction(EventHandler<ActionEvent> onAction) {\r\n        this.onAction.set(onAction);\r\n    }\r\n\r\n    public final EventHandler<ActionEvent> getOnAction() {\r\n        return onAction.get();\r\n    }\r\n\r\n    public final ObjectProperty<EventHandler<ActionEvent>> onActionProperty() {\r\n        return onAction;\r\n    }\r\n\r\n    /* **************************************************************************\r\n     *                                                                          *\r\n     * CSS                                                                      *\r\n     *                                                                          *\r\n     ****************************************************************************/\r\n\r\n    private static final String DEFAULT_STYLE_CLASS = ""switch"";\r\n    private static final PseudoClass SELECTED = PseudoClass.getPseudoClass(""selected"");\r\n}\r\n\r\njava\r\npublic class MainController {\r\n\r\n    @FXML\r\n    private Switch mySwitch;\r\n\r\n    @FXML\r\n    private void handleToggle(ActionEvent event) {\r\n        System.out.println(""Switch toggled! New state: "" + mySwitch.isSelected());\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.stage.Stage;\r\n\r\npublic class ClickableLabelRegion_Demo extends Application {\r\n\r\n    private final static String CSS = ""data:text/css,"" +\r\n            """"""\r\n            .test-label {\r\n                -fx-background-color: blue;\r\n                -fx-border-color: red;\r\n                -fx-font-family: ""Harlow Solid Italic"";\r\n                -fx-font-size: 100;\r\n                -fx-padding: -40 20 0 20;\r\n            }\r\n            """""";\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        HBox root = new HBox();\r\n        root.setStyle(""-fx-background-color: black; -fx-padding:40px; -fx-spacing:50px;"");\r\n        root.getChildren().add(createTestLabel(""Placeholder\nText""));\r\n        Scene scene = new Scene(root, 800, 400);\r\n        scene.getStylesheets().add(CSS);\r\n        stage.setScene(scene);\r\n        stage.setTitle(""Clickable Label Region Demo"");\r\n        stage.show();\r\n    }\r\n\r\n    private StackPane createTestLabel(String text) {\r\n        Label testLabel = new Label(text);\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n\r\n        // Create a precise hitbox (adjusted to match visible region)\r\n        Rectangle hitbox = new Rectangle(220, 120); // Adjust size based on observation\r\n        hitbox.setFill(Color.TRANSPARENT); // Invisible overlay\r\n        hitbox.setMouseTransparent(false); // Ensure it captures events\r\n\r\n        hitbox.setOnMouseEntered(event -> doSomething());\r\n        hitbox.setOnMouseExited(event -> doSomethingElse());\r\n\r\n        return new StackPane(testLabel, hitbox);\r\n    }\r\n\r\n    private void doSomething() {\r\n        System.out.println(""Inside label."");\r\n    }\r\n\r\n    private void doSomethingElse() {\r\n        System.out.println(""Outside label."");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""package com.example.filter;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletRequestWrapper;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n@Component\r\npublic class JsonRequestHeaderFilter implements Filter {\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\r\n            throws IOException, ServletException {\r\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n\r\n        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(httpRequest) {\r\n            @Override\r\n            public Enumeration<String> getHeaders(String name) {\r\n                if (""Accept"".equalsIgnoreCase(name)) {\r\n                    Set<String> customHeaders = new HashSet<>();\r\n                    Enumeration<String> existingHeaders = super.getHeaders(name);\r\n\r\n                    while (existingHeaders.hasMoreElements()) {\r\n                        customHeaders.add(existingHeaders.nextElement());\r\n                    }\r\n\r\n                    // Force JSON response if not explicitly set\r\n                    customHeaders.add(""application/json"");\r\n\r\n                    return Collections.enumeration(customHeaders);\r\n                }\r\n                return super.getHeaders(name);\r\n            }\r\n\r\n            @Override\r\n            public String getHeader(String name) {\r\n                if (""Accept"".equalsIgnoreCase(name)) {\r\n                    return ""application/json"";\r\n                }\r\n                return super.getHeader(name);\r\n            }\r\n        };\r\n\r\n        chain.doFilter(requestWrapper, response);\r\n    }\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) {\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\n\r\nimport java.util.List;\r\n\r\n@Configuration\r\npublic class WebConfig {\r\n\r\n    @Bean\r\n    public HttpMessageConverter<Object> customJackson2HttpMessageConverter() {\r\n        return new MappingJackson2HttpMessageConverter();\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport static org.springframework.security.authorization.AuthorityAuthorizationManager.hasIpAddress;\r\n\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration {\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(authorizeRequests -> authorizeRequests\r\n                .requestMatchers(""/"").access(hasIpAddress(""127.0.0.1"")) // FIXED: Use method reference\r\n                .anyRequest().authenticated()\r\n            )\r\n            .formLogin(Customizer.withDefaults())\r\n            .httpBasic(Customizer.withDefaults());\r\n\r\n        return http.build();\r\n    }\r\n}""]",0,1
"[""import jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\r\nimport java.io.IOException;\r\nimport java.util.logging.Logger;\r\n\r\npublic class JwtAuthenticationFailureHandler implements AuthenticationFailureHandler {\r\n    private static final Logger LOGGER = Logger.getLogger(JwtAuthenticationFailureHandler.class.getName());\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) \r\n            throws IOException, ServletException {\r\n        LOGGER.warning(""JWT Authentication failed: "" + exception.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ""Invalid or expired token"");\r\n    }\r\n}\r\n\r\njava\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.web.AuthenticationEntryPoint;\r\nimport java.io.IOException;\r\nimport java.util.logging.Logger;\r\n\r\npublic class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n    private static final Logger LOGGER = Logger.getLogger(CustomAuthenticationEntryPoint.class.getName());\r\n\r\n    @Override\r\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) \r\n            throws IOException, ServletException {\r\n        LOGGER.warning(""Authentication is required: "" + authException.getMessage());\r\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ""Authentication is required"");\r\n    }\r\n}\r\n\r\njava\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration {\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http, AuthenticationManager authenticationManager) throws Exception {\r\n        http\r\n            .authorizeHttpRequests(authorize -> authorize\r\n                .anyRequest().authenticated()\r\n            )\r\n            .oauth2ResourceServer(oauth2 -> oauth2\r\n                .jwt(Customizer.withDefaults())\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint()) // Handles missing tokens\r\n            )\r\n            .exceptionHandling(exceptions -> exceptions\r\n                .authenticationEntryPoint(new CustomAuthenticationEntryPoint()) // Additional logging\r\n            );\r\n\r\n        // Add custom failure handler to the default BearerTokenAuthenticationFilter\r\n        BearerTokenAuthenticationFilter bearerTokenFilter = new BearerTokenAuthenticationFilter(authenticationManager);\r\n        bearerTokenFilter.setAuthenticationFailureHandler(new JwtAuthenticationFailureHandler());\r\n\r\n        http.addFilterBefore(bearerTokenFilter, BearerTokenAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Record {\r\n    public String week;\r\n    public String source;\r\n    public String destination;\r\n    public Integer qty;\r\n\r\n    Record(String week, String source, String destination, Integer qty) {\r\n        this.week = week;\r\n        this.source = source;\r\n        this.destination = destination;\r\n        this.qty = qty;\r\n    }\r\n}\r\n\r\nclass Result {\r\n    public String week;\r\n    public String source;\r\n    public String destination;\r\n    public double percentage;\r\n\r\n    Result(String week, String source, String destination, double percentage) {\r\n        this.week = week;\r\n        this.source = source;\r\n        this.destination = destination;\r\n        this.percentage = percentage;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return week + "" "" + source + "" "" + destination + "" "" + String.format(""%.2f%%"", percentage);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        List<Record> records = Arrays.asList(\r\n            new Record(""week1"", ""source1"", ""destination1"", 100),\r\n            new Record(""week1"", ""source1"", ""destination2"", 200),\r\n            new Record(""week1"", ""source2"", ""destination1"", 200),\r\n            new Record(""week1"", ""source2"", ""destination2"", 100),\r\n            new Record(""week2"", ""source1"", ""destination1"", 200),\r\n            new Record(""week2"", ""source1"", ""destination2"", 200)\r\n        );\r\n\r\n        // Step 1: Compute total quantity per (week, source)\r\n        Map<String, Map<String, Integer>> totalQuantityMap = records.stream()\r\n            .collect(Collectors.groupingBy(\r\n                rec -> rec.week, \r\n                Collectors.groupingBy(\r\n                    rec -> rec.source, \r\n                    Collectors.summingInt(rec -> rec.qty)\r\n                )\r\n            ));\r\n\r\n        // Step 2: Compute percentage and map to results\r\n        List<Result> result = records.stream()\r\n            .map(rec -> {\r\n                int totalQty = totalQuantityMap.get(rec.week).get(rec.source);\r\n                double percentage = (rec.qty * 100.0) / totalQty;\r\n                return new Result(rec.week, rec.source, rec.destination, percentage);\r\n            })\r\n            .collect(Collectors.toList());\r\n\r\n        // Print result\r\n        result.forEach(System.out::println);\r\n    }\r\n}\r\n\r\njava\r\n     double percentage = (rec.qty * 100.0) / totalQty;\r\n     \r\n\r\nweek1 source1 destination1 33.33%\r\nweek1 source1 destination2 66.67%\r\nweek1 source2 destination1 66.67%\r\nweek1 source2 destination2 33.33%\r\nweek2 source1 destination1 50.00%\r\nweek2 source1 destination2 50.00%\r\n""]",0,1
"[""import java.lang.foreign.*;\r\nimport java.util.Objects;\r\nimport java.util.function.Function;\r\n\r\npublic final class LargeArray<T> {\r\n    private final MemorySegment segment;\r\n    private final long length;\r\n    private final AddressLayout layout;\r\n    private final ElementDescriptor<T> descriptor;\r\n\r\n    public LargeArray(SegmentAllocator allocator, ElementDescriptor<T> descriptor, long length) {\r\n        this.segment = allocator.allocate(descriptor.layout(), length);\r\n        this.layout = ValueLayout.ADDRESS.withTargetLayout(descriptor.layout());\r\n        this.descriptor = descriptor;\r\n        this.length = length;\r\n    }\r\n\r\n    public AddressLayout layout() {\r\n        return layout;\r\n    }\r\n\r\n    public MemorySegment address() {\r\n        return segment;\r\n    }\r\n\r\n    public T get(long index) {\r\n        return descriptor.elementFrom(segment.getAtIndex(layout, index));\r\n    }\r\n\r\n    public void set(long index, T element) {\r\n        segment.setAtIndex(layout, index, descriptor.addressOf(element));\r\n    }\r\n\r\n    public long length() {\r\n        return length;\r\n    }\r\n}\r\n\r\njava\r\nimport java.lang.foreign.MemoryLayout;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.util.Objects;\r\nimport java.util.function.Function;\r\n\r\npublic interface ElementDescriptor<T> {\r\n\r\n    static <T> ElementDescriptor<T> of(\r\n        MemoryLayout layout,\r\n        Function<MemorySegment, T> toElement,\r\n        Function<T, MemorySegment> toAddress) {\r\n        \r\n        Objects.requireNonNull(layout);\r\n        Objects.requireNonNull(toElement);\r\n        Objects.requireNonNull(toAddress);\r\n        \r\n        return new ElementDescriptor<>() {\r\n            @Override\r\n            public MemoryLayout layout() {\r\n                return layout;\r\n            }\r\n\r\n            @Override\r\n            public T elementFrom(MemorySegment segment) {\r\n                return segment.equals(MemorySegment.NULL) ? null : toElement.apply(segment);\r\n            }\r\n\r\n            @Override\r\n            public MemorySegment addressOf(T element) {\r\n                return (element == null) ? MemorySegment.NULL : toAddress.apply(element);\r\n            }\r\n        };\r\n    }\r\n\r\n    MemoryLayout layout();\r\n    T elementFrom(MemorySegment segment);\r\n    MemorySegment addressOf(T element);\r\n}\r\n\r\njava\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.SegmentAllocator;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class LargeIntArray {\r\n    public static final ValueLayout.OfInt LAYOUT = ValueLayout.JAVA_INT_UNALIGNED;\r\n\r\n    private final MemorySegment segment;\r\n    private final long length;\r\n\r\n    public LargeIntArray(SegmentAllocator allocator, long length) {\r\n        this.segment = allocator.allocate(LAYOUT, length);\r\n        this.length = length;\r\n    }\r\n\r\n    public int get(long index) {\r\n        return segment.getAtIndex(LAYOUT, index);\r\n    }\r\n\r\n    public void set(long index, int element) {\r\n        segment.setAtIndex(LAYOUT, index, element);\r\n    }\r\n\r\n    public long length() {\r\n        return length;\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Bullet {\r\n    private static final Map<BufferedImage, BufferedImage[]> cache = new HashMap<>();\r\n    private final BufferedImage[] preRotatedImages;\r\n    private int x, y;\r\n    private int angle;\r\n\r\n    public Bullet(BufferedImage originalImage, int startX, int startY, int startAngle) {\r\n        this.preRotatedImages = cache.computeIfAbsent(originalImage, Bullet::precomputeRotations);\r\n        this.x = startX;\r\n        this.y = startY;\r\n        this.angle = startAngle;\r\n    }\r\n\r\n    private static BufferedImage[] precomputeRotations(BufferedImage img) {\r\n        BufferedImage[] rotations = new BufferedImage[360];\r\n        for (int i = 0; i < 360; i++) {\r\n            rotations[i] = rotateImage(img, i);\r\n        }\r\n        return rotations;\r\n    }\r\n\r\n    private static BufferedImage rotateImage(BufferedImage img, int angle) {\r\n        int w = img.getWidth();\r\n        int h = img.getHeight();\r\n        int newW = (int) Math.ceil(Math.sqrt(w * w + h * h));\r\n        BufferedImage rotated = new BufferedImage(newW, newW, BufferedImage.TYPE_INT_ARGB);\r\n        Graphics2D g2d = rotated.createGraphics();\r\n        g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n        g2d.translate(newW / 2.0, newW / 2.0);\r\n        g2d.rotate(Math.toRadians(angle));\r\n        g2d.translate(-w / 2.0, -h / 2.0);\r\n        g2d.drawImage(img, 0, 0, null);\r\n        g2d.dispose();\r\n        return rotated;\r\n    }\r\n\r\n    public void setAngle(int newAngle) {\r\n        this.angle = (newAngle % 360 + 360) % 360;\r\n    }\r\n\r\n    public void render(Graphics g) {\r\n        g.drawImage(preRotatedImages[angle], x, y, null);\r\n    }\r\n}""]",0,1
"[""private String Fullname;\r\n\r\njava\r\nprivate String fullname;\r\n\r\njava\r\n@Column(name = ""Fullname"")\r\npublic String getFullname() {\r\n    return fullname;\r\n}\r\n\r\njava\r\nsearch = session.createQuery(""FROM QLKH_DTO a WHERE a.fullname LIKE :temp"", QLKH_DTO.class)\r\n                .setParameter(""temp"", temp)\r\n                .list();\r\n\r\njava\r\npublic String getFullname() {\r\n    return Fullname;\r\n}\r\n\r\njava\r\npublic String getFullname() {\r\n    return fullname;\r\n}\r\n""]",0,1
"[""\r\nsrc/main/java/com/example/customcomponent/\r\n    ??? CustomComponent.java\r\n    ??? custom-component.fxml\r\nsrc/main/java/com/example/customcomponentdemo/\r\n    ??? Main.java\r\n    ??? MenuController.java\r\n    ??? menu.fxml\r\nsrc/main/resources/\r\n    ??? com/example/customcomponent/custom-component.fxml\r\n    ??? com/example/customcomponentdemo/menu.fxml\r\n\r\njava\r\npackage com.example.customcomponent;\r\n\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.VBox;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class CustomComponent extends VBox {\r\n    \r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n    \r\n    public CustomComponent() {\r\n        FXMLLoader loader = new FXMLLoader(\r\n                CustomComponent.class.getResource(""custom-component.fxml"")\r\n        );\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(""Failed to load CustomComponent.fxml"", e);\r\n        }\r\n    }\r\n    \r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.VBox?>\r\n\r\n<VBox xmlns=""http://javafx.com/javafx/20""\r\n      xmlns:fx=""http://javafx.com/fxml/1""\r\n      fx:controller=""com.example.customcomponent.CustomComponent"">\r\n\r\n    <children>\r\n        <Button fx:id=""plusBtn"" text=""+"" />\r\n        <Label fx:id=""label"" text=""Label"" />\r\n        <Button fx:id=""minusBtn"" text=""-"" />\r\n    </children>\r\n</VBox>\r\n\r\njava\r\npackage com.example.customcomponentdemo;\r\n\r\nimport com.example.customcomponent.CustomComponent;\r\nimport javafx.fxml.FXML;\r\n\r\npublic class MenuController {\r\n\r\n    @FXML private CustomComponent customComponent;\r\n\r\n    public void initialize() {\r\n        customComponent.newText(""Test"");\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n\r\n<?import com.example.customcomponent.CustomComponent?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/20""\r\n           xmlns:fx=""http://javafx.com/fxml/1""\r\n           fx:controller=""com.example.customcomponentdemo.MenuController"">\r\n\r\n    <children>\r\n        <CustomComponent fx:id=""customComponent"" />\r\n    </children>\r\n\r\n</StackPane>\r\n\r\njava\r\npackage com.example.customcomponentdemo;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Scene;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws IOException {\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(""menu.fxml""));\r\n        Scene scene = new Scene(fxmlLoader.load(), 400, 300);\r\n        stage.setTitle(""Custom Component Demo"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n\r\njava\r\nmodule com.example.customcomponentdemo {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n\r\n    opens com.example.customcomponent to javafx.fxml;\r\n    opens com.example.customcomponentdemo to javafx.fxml;\r\n\r\n    exports com.example.customcomponent;\r\n    exports com.example.customcomponentdemo;\r\n}\r\n""]",0,1
"[""import androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Button openBottomSheet = findViewById(R.id.open_bottom_sheet);\r\n\r\n        openBottomSheet.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                BottomSheetDialog bottomSheet = new BottomSheetDialog();\r\n                bottomSheet.show(getSupportFragmentManager(), ""ModalBottomSheet"");\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\njava\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\r\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment;\r\n\r\npublic class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        return inflater.inflate(R.layout.bottom_sheet_layout, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        Button algoButton = view.findViewById(R.id.algo_button);\r\n        Button courseButton = view.findViewById(R.id.course_button);\r\n\r\n        algoButton.setOnClickListener(v -> {\r\n            Toast.makeText(getActivity(), ""Algorithm Shared"", Toast.LENGTH_SHORT).show();\r\n            dismiss();\r\n        });\r\n\r\n        courseButton.setOnClickListener(v -> {\r\n            Toast.makeText(getActivity(), ""Course Shared"", Toast.LENGTH_SHORT).show();\r\n            dismiss();\r\n        });\r\n\r\n        // Set full height\r\n        View parent = (View) view.getParent();\r\n        if (parent != null) {\r\n            BottomSheetBehavior<View> behavior = BottomSheetBehavior.from(parent);\r\n            behavior.setState(BottomSheetBehavior.STATE_EXPANDED); // Make it expanded\r\n            behavior.setPeekHeight(ViewGroup.LayoutParams.MATCH_PARENT); // Full height\r\n        }\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""utf-8""?>\r\n<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""\r\n    android:layout_width=""match_parent""\r\n    android:layout_height=""match_parent""\r\n    android:orientation=""vertical""\r\n    android:padding=""16dp"">\r\n\r\n    <Button\r\n        android:id=""@+id/algo_button""\r\n        android:layout_width=""match_parent""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Share Algorithm"" />\r\n\r\n    <Button\r\n        android:id=""@+id/course_button""\r\n        android:layout_width=""match_parent""\r\n        android:layout_height=""wrap_content""\r\n        android:text=""Share Course""\r\n        android:layout_marginTop=""8dp""/>\r\n</LinearLayout>\r\n""]",0,1
"[""import javafx.animation.Transition;\r\nimport javafx.application.Application;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.css.CssMetaData;\r\nimport javafx.css.SimpleStyleableObjectProperty;\r\nimport javafx.css.Styleable;\r\nimport javafx.css.StyleableObjectProperty;\r\nimport javafx.css.converter.PaintConverter;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.paint.Paint;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class ExampleApp extends Application {\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n        private final SimpleObjectProperty<Transition> transition = new SimpleObjectProperty<>();\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            transition.set(createTransition());\r\n            transition.get().play();\r\n\r\n            // Listeners to update animation when CSS color variables change\r\n            color1.addListener((obs, oldVal, newVal) -> restartAnimation());\r\n            color2.addListener((obs, oldVal, newVal) -> restartAnimation());\r\n\r\n            // Play animation only when added to the scene\r\n            sceneProperty().addListener((obs, oldScene, newScene) -> {\r\n                if (newScene != null) {\r\n                    transition.get().play();\r\n                } else {\r\n                    transition.get().stop();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void restartAnimation() {\r\n            transition.get().stop();\r\n            transition.set(createTransition());\r\n            transition.get().play();\r\n        }\r\n\r\n        private Transition createTransition() {\r\n            return new Transition() {\r\n                {\r\n                    setCycleDuration(Duration.seconds(1));\r\n                    setCycleCount(INDEFINITE);\r\n                    setAutoReverse(false);\r\n                }\r\n\r\n                @Override\r\n                protected void interpolate(double frac) {\r\n                    // Interpolate color smoothly\r\n                    setFill(color1.get().interpolate(color2.get(), frac));\r\n                }\r\n            };\r\n        }\r\n\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR1, this, ""-color1"", Color.RED\r\n        );\r\n\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n            StyleableProperties.COLOR2, this, ""-color2"", Color.BLUE\r\n        );\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                ""-color1"", PaintConverter.getInstance(), Color.RED\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect node) {\r\n                    return !node.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableObjectProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                    return node.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n                ""-color2"", PaintConverter.getInstance(), Color.BLUE\r\n            ) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect node) {\r\n                    return !node.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableObjectProperty<Paint> getStyleableProperty(AnimatedRect node) {\r\n                    return node.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}""]",0,1
"[""package com.example.app;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextFormatter;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.StringConverter;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.ParseException;\r\nimport java.text.ParsePosition;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class Main extends Application {\r\n\r\n    private static final double MIN = -20.0;\r\n    private static final double MAX = 20.0;\r\n    private static final double STEP = 0.25;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        var converter = new ConstrainedDoubleStringConverter(MIN, MAX, STEP);\r\n\r\n        var factory = new SpinnerValueFactory.DoubleSpinnerValueFactory(MIN, MAX, 0.0, STEP);\r\n        factory.setConverter(converter);\r\n\r\n        UnaryOperator<TextFormatter.Change> filter = change -> {\r\n            if (change.isContentChange()) {\r\n                String newText = change.getControlNewText();\r\n                if (!converter.isParsable(newText)) {\r\n                    return null;\r\n                }\r\n            }\r\n            return change;\r\n        };\r\n\r\n        var formatter = new TextFormatter<>(converter, 0.0, filter);\r\n        \r\n        var spinner = new Spinner<>(factory);\r\n        spinner.getEditor().setTextFormatter(formatter);\r\n        spinner.setEditable(true);\r\n\r\n        primaryStage.setScene(new Scene(new StackPane(spinner), 500, 300));\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(Main.class, args);\r\n    }\r\n}\r\n\r\nclass ConstrainedDoubleStringConverter extends StringConverter<Double> {\r\n\r\n    private final DecimalFormat format = new DecimalFormat(""+0.00;-0.00"");\r\n    private final double min;\r\n    private final double max;\r\n    private final double step;\r\n\r\n    public ConstrainedDoubleStringConverter(double min, double max, double step) {\r\n        this.min = min;\r\n        this.max = max;\r\n        this.step = step;\r\n    }\r\n\r\n    @Override\r\n    public String toString(Double value) {\r\n        if (value == null) {\r\n            return ""+0.00"";\r\n        }\r\n        return format.format(value).replace(""."", "","");\r\n    }\r\n\r\n    @Override\r\n    public Double fromString(String value) {\r\n        if (value == null || value.isEmpty()) {\r\n            return 0.0;\r\n        }\r\n        value = value.replace("","", ""."");\r\n        ParsePosition pos = new ParsePosition(0);\r\n        Number num = format.parse(value, pos);\r\n        if (pos.getIndex() != value.length()) {\r\n            return null;\r\n        }\r\n        double parsed = num.doubleValue();\r\n        return Math.max(min, Math.min(max, Math.round(parsed / step) * step));\r\n    }\r\n\r\n    public boolean isParsable(String value) {\r\n        try {\r\n            fromString(value);\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }\r\n}""]",0,1
"[""plaintext\r\n   Authorization: Bearer <access_token>\r\n   \r\njava\r\n   private void setCurrentUser(final String userID) {\r\n       try {\r\n           UserModel user = userService.getUserForUID(userID);\r\n           userService.setCurrentUser(user);\r\n           sessionService.setAttribute(ACTING_USER_UID, userID);\r\n           LOG.info(""Successfully set current user: "" + userID);\r\n       } catch (UnknownIdentifierException e) {\r\n           LOG.error(""User not found: "" + userID, e);\r\n           throw new AccessDeniedException(""Invalid user ID provided."");\r\n       }\r\n   }\r\n   \r\nsh\r\n   curl -X POST ""https://your-hybris-server/oauth/token"" \\r\n        -H ""Content-Type: application/x-www-form-urlencoded"" \\r\n        -d ""grant_type=password&client_id=trusted_client&client_secret=secret&username=test@test.com&password=yourpassword""\r\n   \r\nsh\r\n   curl -X GET ""https://your-hybris-server/your-endpoint"" \\r\n        -H ""Authorization: Bearer your_access_token""\r\n   ""]",0,1
"[""import reactor.core.publisher.Flux;\r\nimport reactor.core.publisher.Mono;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class ReactorApp {\r\n\r\n    record Person(String name) {}\r\n\r\n    public static Mono<String> functionReturningMono(Person person) {\r\n        return Mono.just(""Hello "" + person.name());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<Person> persons = List.of(\r\n                new Person(""John""),\r\n                new Person(""Mike""),\r\n                new Person(""Stacey"")\r\n        );\r\n\r\n        Map<String, String> result = Flux.fromIterable(persons)\r\n                .flatMap(person -> functionReturningMono(person)\r\n                        .map(response -> Map.entry(person.name(), response)))\r\n                .collectMap(Map.Entry::getKey, Map.Entry::getValue)\r\n                .block();\r\n\r\n        System.out.println(result);\r\n    }\r\n}""]",0,1
"[""import javax.net.ssl.SSLEngine;\r\nimport javax.net.ssl.X509ExtendedKeyManager;\r\nimport javax.net.ssl.X509KeyManager;\r\nimport java.net.Socket;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class AliasSpecificKeyManager extends X509ExtendedKeyManager {\r\n\r\n    private final X509KeyManager delegate;\r\n    private final String alias;\r\n\r\n    public AliasSpecificKeyManager(X509KeyManager delegate, String alias) {\r\n        this.delegate = delegate;\r\n        this.alias = alias;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        // If the configured alias is available, always return it\r\n        String[] aliases = getClientAliases(keyType[0], issuers);\r\n        if (aliases != null) {\r\n            for (String a : aliases) {\r\n                if (a.equals(alias)) {\r\n                    return alias;\r\n                }\r\n            }\r\n        }\r\n        // fallback to default selection\r\n        return delegate.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        String[] aliases = getClientAliases(keyType[0], issuers);\r\n        if (aliases != null) {\r\n            for (String a : aliases) {\r\n                if (a.equals(alias)) {\r\n                    return alias;\r\n                }\r\n            }\r\n        }\r\n        return delegate.chooseEngineClientAlias(keyType, issuers, engine);\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return delegate.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return delegate.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return delegate.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\njava\r\nimport javax.net.ssl.KeyManager;\r\nimport javax.net.ssl.KeyManagerFactory;\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport javax.net.ssl.TrustManagerFactory;\r\nimport java.io.FileInputStream;\r\nimport java.security.KeyStore;\r\nimport java.security.GeneralSecurityException;\r\nimport java.io.IOException;\r\n\r\npublic class RedisTlsUtil {\r\n\r\n    public static SSLSocketFactory createSslSocketFactory(\r\n            String userCertPath, String userCertPassword,\r\n            String caCertPath, String caCertPassword,\r\n            String desiredAlias) throws IOException, GeneralSecurityException {\r\n\r\n        // Load the keystore with the client certificate(s)\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream keyStoreStream = new FileInputStream(userCertPath)) {\r\n            keyStore.load(keyStoreStream, userCertPassword.toCharArray());\r\n        }\r\n\r\n        // Load the truststore with the CA certificate(s)\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream trustStoreStream = new FileInputStream(caCertPath)) {\r\n            trustStore.load(trustStoreStream, caCertPassword.toCharArray());\r\n        }\r\n\r\n        // Initialize TrustManagerFactory\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        // Initialize KeyManagerFactory\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n\r\n        // Wrap the X509KeyManager to enforce the desired alias\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new AliasSpecificKeyManager((X509KeyManager) keyManagers[i], desiredAlias);\r\n            }\r\n        }\r\n\r\n        // Create and initialize the SSLContext\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\njava\r\nimport redis.clients.jedis.DefaultJedisClientConfig;\r\nimport redis.clients.jedis.JedisPooled;\r\nimport redis.clients.jedis.JedisClientConfig;\r\nimport redis.clients.jedis.HostAndPort;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public void testWithTls() throws Exception {\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        // Create SSLSocketFactory specifying the desired alias (e.g., \""my_cert\"") \r\n        SSLSocketFactory sslFactory = RedisTlsUtil.createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""my_cert""  // desired alias in the keystore\r\n        );\r\n\r\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\r\n                .ssl(true)\r\n                .sslSocketFactory(sslFactory)\r\n                .build();\r\n\r\n        try (JedisPooled jedis = new JedisPooled(address, config)) {\r\n            jedis.set(""foo"", ""bar"");\r\n            System.out.println(jedis.get(""foo"")); // should print \""bar\""\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new RedisTlsTest().testWithTls();\n    }\n}\n""}\r\n\r\n\r\nBelow is a complete solution demonstrating how to use a custom `X509KeyManager` wrapper that always chooses a specified alias. This lets you control which client certificate is used from a keystore with multiple certificates when establishing a TLS connection (for example, with Redis).\r\n\r\n### **Step 1. Create a Custom KeyManager Wrapper**\r\n\r\nThis class wraps the default X509KeyManager and always returns the alias you want when the client certificate is needed.\r\n\r\n\r\n\r\n\r\n### **Step 2. Configure the SSLSocketFactory**\r\n\r\nIn your SSL configuration method, load your keystore and truststore, then wrap your default key managers with the custom `AliasSpecificKeyManager` so that your desired alias is always chosen.\r\n\r\n\r\n\r\n\r\n### **Step 3. Connect to Redis with Jedis Using the Custom SSLSocketFactory**\r\n\r\nNow, when configuring your Redis connection with Jedis, pass the custom SSLSocketFactory.\r\n\r\n\r\njava\r\nimport javax.net.ssl.SSLEngine;\r\nimport javax.net.ssl.X509ExtendedKeyManager;\r\nimport javax.net.ssl.X509KeyManager;\r\nimport java.net.Socket;\r\nimport java.security.Principal;\r\nimport java.security.PrivateKey;\r\nimport java.security.cert.X509Certificate;\r\n\r\npublic class AliasSpecificKeyManager extends X509ExtendedKeyManager {\r\n\r\n    private final X509KeyManager delegate;\r\n    private final String desiredAlias;\r\n\r\n    public AliasSpecificKeyManager(X509KeyManager delegate, String desiredAlias) {\r\n        this.delegate = delegate;\r\n        this.desiredAlias = desiredAlias;\r\n    }\r\n\r\n    @Override\r\n    public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket) {\r\n        // If the desired alias exists among the available aliases, return it.\r\n        String[] availableAliases = getClientAliases(keyType[0], issuers);\r\n        if (availableAliases != null) {\r\n            for (String alias : availableAliases) {\r\n                if (alias.equals(desiredAlias)) {\r\n                    return desiredAlias;\r\n                }\r\n            }\r\n        }\r\n        // Fallback to the delegate if our alias isn't found.\r\n        return delegate.chooseClientAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine) {\r\n        String[] availableAliases = getClientAliases(keyType[0], issuers);\r\n        if (availableAliases != null) {\r\n            for (String alias : availableAliases) {\r\n                if (alias.equals(desiredAlias)) {\r\n                    return desiredAlias;\r\n                }\r\n            }\r\n        }\r\n        return delegate.chooseEngineClientAlias(keyType, issuers, engine);\r\n    }\r\n\r\n    @Override\r\n    public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket) {\r\n        return delegate.chooseServerAlias(keyType, issuers, socket);\r\n    }\r\n\r\n    @Override\r\n    public X509Certificate[] getCertificateChain(String alias) {\r\n        return delegate.getCertificateChain(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getClientAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getClientAliases(keyType, issuers);\r\n    }\r\n\r\n    @Override\r\n    public PrivateKey getPrivateKey(String alias) {\r\n        return delegate.getPrivateKey(alias);\r\n    }\r\n\r\n    @Override\r\n    public String[] getServerAliases(String keyType, Principal[] issuers) {\r\n        return delegate.getServerAliases(keyType, issuers);\r\n    }\r\n}\r\n\r\njava\r\nimport javax.net.ssl.KeyManager;\r\nimport javax.net.ssl.KeyManagerFactory;\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.SSLSocketFactory;\r\nimport javax.net.ssl.TrustManagerFactory;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.security.KeyStore;\r\nimport java.security.GeneralSecurityException;\r\n\r\npublic class RedisTlsUtil {\r\n\r\n    public static SSLSocketFactory createSslSocketFactory(\r\n            String userCertPath, String userCertPassword,\r\n            String caCertPath, String caCertPassword,\r\n            String desiredAlias) throws IOException, GeneralSecurityException {\r\n\r\n        // Load the keystore containing the client certificates\r\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream keyStoreStream = new FileInputStream(userCertPath)) {\r\n            keyStore.load(keyStoreStream, userCertPassword.toCharArray());\r\n        }\r\n\r\n        // Load the truststore containing the CA certificates\r\n        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n        try (FileInputStream trustStoreStream = new FileInputStream(caCertPath)) {\r\n            trustStore.load(trustStoreStream, caCertPassword.toCharArray());\r\n        }\r\n\r\n        // Initialize TrustManagerFactory with the truststore\r\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n        trustManagerFactory.init(trustStore);\r\n\r\n        // Initialize KeyManagerFactory with the keystore\r\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n        keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n        KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n\r\n        // Wrap each X509KeyManager with our custom key manager to enforce the desired alias\r\n        for (int i = 0; i < keyManagers.length; i++) {\r\n            if (keyManagers[i] instanceof X509KeyManager) {\r\n                keyManagers[i] = new AliasSpecificKeyManager((X509KeyManager) keyManagers[i], desiredAlias);\r\n            }\r\n        }\r\n\r\n        // Create and initialize the SSLContext with the custom KeyManagers and TrustManagers\r\n        SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n        sslContext.init(keyManagers, trustManagerFactory.getTrustManagers(), null);\r\n\r\n        return sslContext.getSocketFactory();\r\n    }\r\n}\r\n\r\njava\r\nimport redis.clients.jedis.DefaultJedisClientConfig;\r\nimport redis.clients.jedis.JedisClientConfig;\r\nimport redis.clients.jedis.JedisPooled;\r\nimport redis.clients.jedis.HostAndPort;\r\n\r\npublic class RedisTlsTest {\r\n\r\n    public void testWithTls() throws Exception {\r\n        // Define your Redis host and port (adjust as needed)\r\n        HostAndPort address = new HostAndPort(""localhost"", 6379);\r\n\r\n        // Create an SSLSocketFactory using the keystore and truststore paths and passwords,\r\n        // and specify the alias (e.g., \""my_cert\"") you wish to use for the client certificate.\r\n        SSLSocketFactory sslFactory = RedisTlsUtil.createSslSocketFactory(\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""D:\\tmp\\keystore.jks"", ""123456"",\r\n                ""my_cert""  // The alias you wish to use from the keystore\n        );\r\n\r\n        // Configure Jedis to use TLS with the custom SSLSocketFactory\n        JedisClientConfig config = DefaultJedisClientConfig.builder()\n                .ssl(true)\n                .sslSocketFactory(sslFactory)\n                .build();\r\n\r\n        try (JedisPooled jedis = new JedisPooled(address, config)) {\n            jedis.set(\""foo\"", \""bar\"");\n            System.out.println(\""Value from Redis: \"" + jedis.get(\""foo\""));\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new RedisTlsTest().testWithTls();\n    }\n}\n""]",0,1
"[""import javax.swing.*;\r\nimport javax.swing.text.*;\r\n\r\npublic class TestTextArea {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            JTextArea textArea = new JTextArea(20, 50);\r\n            JScrollPane scrollPane = new JScrollPane(textArea);\r\n\r\n            int spaceCount = 4;\r\n            ((PlainDocument) textArea.getDocument()).setDocumentFilter(new ChangeTabToSpacesFilter(spaceCount));\r\n\r\n            JFrame frame = new JFrame(""GUI"");\r\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n            frame.add(scrollPane);\r\n            frame.pack();\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n    \r\n    private static class ChangeTabToSpacesFilter extends DocumentFilter {\r\n        private final String spaces;\r\n\r\n        public ChangeTabToSpacesFilter(int spaceCount) {\r\n            this.spaces = "" "".repeat(spaceCount);\r\n        }\r\n\r\n        @Override\r\n        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) \r\n                throws BadLocationException {\r\n            if (text.contains(""\t"")) {\r\n                text = text.replace(""\t"", spaces);\r\n            }\r\n            super.replace(fb, offset, length, text, attrs);\r\n        }\r\n\r\n        @Override\r\n        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) \r\n                throws BadLocationException {\r\n            if (string.contains(""\t"")) {\r\n                string = string.replace(""\t"", spaces);\r\n            }\r\n            super.insertString(fb, offset, string, attr);\r\n        }\r\n    }\r\n}""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.deser.std.StdDeserializer;\r\nimport com.fasterxml.jackson.databind.util.StdDateFormat;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\npublic class StringToDateDeserializer extends StdDeserializer<Date> {\r\n\r\n    private final StdDateFormat df = new StdDateFormat();\r\n\r\n    public StringToDateDeserializer() {\r\n        super(Date.class);\r\n    }\r\n\r\n    @Override\r\n    public Date deserialize(JsonParser jsonParser, DeserializationContext ctxt) throws IOException {\r\n        String dateStr = jsonParser.getText();\r\n        if (StringUtils.isEmpty(dateStr)) {\r\n            return null;\r\n        }\r\n        try {\r\n            return df.parse(dateStr);\r\n        } catch (ParseException e) {\r\n            throw new IOException(""Invalid date passed, ISO 8601 is expected"", e);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.MockitoJUnitRunner;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class StringToDateDeserializerTest {\r\n\r\n    private StringToDateDeserializer deserializer;\r\n\r\n    @Mock\r\n    private JsonParser jsonParser;\r\n\r\n    @Mock\r\n    private DeserializationContext deserializationContext;\r\n\r\n    @Before\r\n    public void setup() {\r\n        deserializer = new StringToDateDeserializer();\r\n    }\r\n\r\n    @Test\r\n    public void testValidDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""2020-07-10T15:00:00.000Z"");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNotNull(result);\r\n        assertEquals(1594393200000L, result.getTime()); // Epoch time for 2020-07-10T15:00:00.000Z\r\n    }\r\n\r\n    @Test\r\n    public void testNullOrEmptyDate() throws IOException {\r\n        when(jsonParser.getText()).thenReturn("""");\r\n\r\n        Date result = deserializer.deserialize(jsonParser, deserializationContext);\r\n\r\n        assertNull(result);\r\n    }\r\n\r\n    @Test(expected = IOException.class)\r\n    public void testInvalidDateFormat() throws IOException {\r\n        when(jsonParser.getText()).thenReturn(""invalid-date"");\r\n\r\n        deserializer.deserialize(jsonParser, deserializationContext);\r\n    }\r\n}\r\n""]",0,1
"[""import com.nimbusds.jose.jwk.JWK;\r\nimport com.nimbusds.jose.jwk.JWKSet;\r\nimport com.nimbusds.jose.jwk.OctetSequenceKey;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.aot.hint.RuntimeHints;\r\nimport org.springframework.aot.hint.RuntimeHintsRegistrar;\r\nimport org.springframework.boot.context.properties.ConfigurationProperties;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.JwtEncoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\r\nimport org.springframework.security.oauth2.jwt.NimbusJwtEncoder;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\r\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;\r\nimport org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;\r\nimport org.springframework.web.cors.CorsConfigurationSource;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport java.util.Base64;\r\nimport java.util.List;\r\n\r\n@Slf4j\r\n@Configuration\r\n@RequiredArgsConstructor\r\n@EnableWebSecurity\r\n@ConfigurationProperties(prefix = ""security.jwt"")\r\npublic class SecurityConfig {\r\n\r\n    private String secret;\r\n    private final TokenService tokenService;\r\n\r\n    @Bean\r\n    SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\r\n                                                               CorsConfigurationSource corsConfigurationSource) throws Exception {\r\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc();\r\n\r\n        http.exceptionHandling(exceptions -> exceptions.defaultAuthenticationEntryPointFor(\r\n                        new LoginUrlAuthenticationEntryPoint(""/login""),\r\n                        new MediaTypeRequestMatcher(MediaType.TEXT_HTML)))\r\n                .oauth2ResourceServer(resourceServer -> resourceServer.jwt(jwt -> jwt.decoder(jwtDecoder())));\r\n\r\n        http.cors(cors -> cors.configurationSource(corsConfigurationSource));\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeHttpRequests(authz -> authz\r\n                        .requestMatchers(""/hello"").authenticated()\r\n                        .anyRequest().permitAll())\r\n                .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.decoder(jwtDecoder())))\r\n                .formLogin();\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    AuthorizationServerSettings authorizationServerSettings() {\r\n        return AuthorizationServerSettings.builder().build();\r\n    }\r\n\r\n    @Bean\r\n    WebSecurityCustomizer webSecurityCustomizer() {\r\n        return web -> web.ignoring().requestMatchers(""/h2-console/**"");\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public JwtEncoder jwtEncoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(secret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        OctetSequenceKey octetKey = new OctetSequenceKey.Builder(secretKeySpec).keyID(""customKey"").build();\r\n        JWKSet jwkSet = new JWKSet(octetKey);\r\n\r\n        JWKSource<SecurityContext> jwkSource = (jwkSelector, context) -> {\r\n            List<JWK> keys = jwkSelector.select(jwkSet);\r\n            if (keys.isEmpty()) {\r\n                log.error(""No keys found matching selection criteria!"");\r\n            } else {\r\n                log.info(""Keys selected: "" + keys.stream().map(JWK::getKeyID).collect(Collectors.joining("", "")));\r\n            }\r\n            return keys;\r\n        };\r\n\r\n        return new NimbusJwtEncoder(jwkSource);\r\n    }\r\n\r\n    @Bean\r\n    JwtDecoder jwtDecoder() {\r\n        byte[] keyBytes = Base64.getDecoder().decode(secret);\r\n        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");\r\n        return NimbusJwtDecoder.withSecretKey(secretKeySpec).build();\r\n    }\r\n}""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.css.PseudoClass;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerDemo extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        PseudoClass disabledUp = PseudoClass.getPseudoClass(""disable-up"");\r\n        PseudoClass disabledDown = PseudoClass.getPseudoClass(""disable-down"");\r\n\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n\r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n\r\n        spinnerMin.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newVal, 6, spinnerMax.getValue()));\r\n            updateButtonState(spinnerMin, disabledUp, spinnerMin.getValue() == spinnerMax.getValue());\r\n            updateButtonState(spinnerMax, disabledDown, spinnerMin.getValue() == spinnerMax.getValue());\r\n        });\r\n\r\n        spinnerMax.valueProperty().addListener((obs, oldVal, newVal) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newVal, spinnerMin.getValue()));\r\n            updateButtonState(spinnerMin, disabledUp, spinnerMin.getValue() == spinnerMax.getValue());\r\n            updateButtonState(spinnerMax, disabledDown, spinnerMin.getValue() == spinnerMax.getValue());\r\n        });\r\n\r\n        VBox root = new VBox(10, spinnerMin, spinnerMax);\r\n        root.setPadding(new Insets(20));\r\n        stage.setScene(new Scene(root, 300, 200));\r\n        stage.setTitle(""Spinner Min/Max Control"");\r\n        stage.show();\r\n    }\r\n\r\n    private void updateButtonState(Spinner<Integer> spinner, PseudoClass pseudoClass, boolean disable) {\r\n        spinner.lookup("".increment-arrow-button"").pseudoClassStateChanged(pseudoClass, disable);\r\n        spinner.lookup("".decrement-arrow-button"").pseudoClassStateChanged(pseudoClass, disable);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n\r\ncss\r\n.spinner .increment-arrow-button:disabled,\r\n.spinner .decrement-arrow-button:disabled {\r\n    -fx-opacity: 0.4;\r\n}\r\n""]",0,1
"[""public interface CharacterGenerator {\r\n    GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game);\r\n}\r\n\r\njava\r\nprivate static class MagicianGenerator implements CharacterGenerator {\r\n    @Override\r\n    public GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game) {\r\n        return new Magician(x, y, sizeX, sizeY, field, player, game);\r\n    }\r\n}\r\n\r\nprivate static class GoblinGenerator implements CharacterGenerator {\r\n    @Override\r\n    public GameCharacter createCharacter(int x, int y, int sizeX, int sizeY, Field field, Player player, Game game) {\r\n        return new Goblin(x, y, player, field, game, sizeX, sizeY);\r\n    }\r\n}\r\n\r\njava\r\nprivate void positionCharacter(CharacterGenerator generator) {\r\n    int x, y;\r\n    boolean characterCreated = false;\r\n\r\n    while (!characterCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            GameCharacter character = generator.createCharacter(x, y, sizeX, sizeY, field, player, this);\r\n            field.setFieldable(x, y, character);\r\n            characterCreated = true;\r\n        }\r\n    }\r\n}\r\n\r\njava\r\npositionCharacter(new MagicianGenerator());\r\npositionCharacter(new GoblinGenerator());\r\n""]",0,1
"[""spring:\r\n  elasticsearch:\r\n    uris: https://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certificate: classpath:elasticsearch-ca.crt\r\n\r\njava\r\nimport co.elastic.clients.transport.rest_client.RestClientTransport;\r\nimport co.elastic.clients.elasticsearch.ElasticsearchClient;\r\nimport co.elastic.clients.json.jackson.JacksonJsonpMapper;\r\nimport org.apache.http.auth.AuthScope;\r\nimport org.apache.http.auth.UsernamePasswordCredentials;\r\nimport org.apache.http.impl.client.BasicCredentialsProvider;\r\nimport org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\r\nimport org.apache.http.impl.nio.reactor.IOReactorConfig;\r\nimport org.apache.http.ssl.SSLContextBuilder;\r\nimport org.elasticsearch.client.RestClient;\r\nimport org.elasticsearch.client.RestClientBuilder;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.io.Resource;\r\nimport javax.net.ssl.SSLContext;\r\nimport java.io.InputStream;\r\nimport java.security.KeyStore;\r\nimport java.security.cert.Certificate;\r\nimport java.security.cert.CertificateFactory;\r\n\r\n@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Value(""${spring.elasticsearch.uris}"")\r\n    private String elasticsearchUrl;\r\n\r\n    @Value(""${spring.elasticsearch.username}"")\r\n    private String username;\r\n\r\n    @Value(""${spring.elasticsearch.password}"")\r\n    private String password;\r\n\r\n    @Value(""${spring.elasticsearch.ssl.certificate}"")\r\n    private Resource certificatePath;\r\n\r\n    @Bean\r\n    public RestClient restClient() throws Exception {\r\n        // Load the certificate\r\n        CertificateFactory factory = CertificateFactory.getInstance(""X.509"");\r\n        try (InputStream is = certificatePath.getInputStream()) {\r\n            Certificate certificate = factory.generateCertificate(is);\r\n\r\n            KeyStore keyStore = KeyStore.getInstance(""pkcs12"");\r\n            keyStore.load(null, null);\r\n            keyStore.setCertificateEntry(""elasticsearch"", certificate);\r\n\r\n            SSLContext sslContext = SSLContextBuilder.create()\r\n                    .loadTrustMaterial(keyStore, null)\r\n                    .build();\r\n\r\n            BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n            credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\r\n\r\n            return RestClient.builder(org.apache.http.HttpHost.create(elasticsearchUrl))\r\n                    .setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder\r\n                            .setSSLContext(sslContext)\r\n                            .setDefaultCredentialsProvider(credentialsProvider)\r\n                            .setDefaultIOReactorConfig(IOReactorConfig.custom()\r\n                                    .setIoThreadCount(Runtime.getRuntime().availableProcessors())\r\n                                    .build()))\r\n                    .build();\r\n        }\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchClient elasticsearchClient(RestClient restClient) {\r\n        RestClientTransport transport = new RestClientTransport(restClient, new JacksonJsonpMapper());\r\n        return new ElasticsearchClient(transport);\r\n    }\r\n}\r\n\r\njava\r\n@Service\r\npublic class ElasticSearchService {\r\n    \r\n    private final ElasticsearchOperations elasticsearchOperations;\r\n\r\n    public ElasticSearchService(ElasticsearchOperations elasticsearchOperations) {\r\n        this.elasticsearchOperations = elasticsearchOperations;\r\n    }\r\n\r\n    public void search(String indexName) {\r\n        SearchHits<MyDocument> hits = elasticsearchOperations.search(\r\n                new NativeSearchQueryBuilder()\r\n                        .withQuery(QueryBuilders.matchAllQuery())\r\n                        .build(),\r\n                MyDocument.class\r\n        );\r\n\r\n        hits.forEach(hit -> System.out.println(hit.getContent()));\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.*;\r\nimport javax.swing.filechooser.FileSystemView;\r\nimport com.lowagie.text.DocumentException;\r\nimport org.xhtmlrenderer.pdf.ITextRenderer;\r\nimport org.xml.sax.SAXException;\r\n\r\npublic class HtmlToPdfGenerator {\r\n\r\n    public static void main(String[] args) throws DocumentException, IOException, SAXException {\r\n        // HTML content with proper encoding and a reference to an embedded font\r\n        String htmlString = ""<!DOCTYPE html>\n"" +\r\n                ""<html lang=\""ru\"">\n"" +\r\n                ""<head>\n"" +\r\n                ""    <meta charset=\""UTF-8\""/>\n"" +\r\n                ""    <meta http-equiv=\""Content-Type\"" content=\""text/html; charset=UTF-8\""/>\n"" +\r\n                ""    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\""/>\n"" +\r\n                ""    <style>\n"" +\r\n                ""        @font-face {\n"" +\r\n                ""            font-family: 'DejaVuSans';\n"" +\r\n                ""            src: url('file:///C:/Windows/Fonts/DejaVuSans.ttf'); /* Adjust path if needed */\n"" +\r\n                ""        }\n"" +\r\n                ""        body { font-family: 'DejaVuSans', sans-serif; }\n"" +\r\n                ""    </style>\n"" +\r\n                ""</head>\n"" +\r\n                ""<body>\n"" +\r\n                ""    <h3>??????, ???! (Hello, World!)</h3>\n"" +  // Cyrillic text\r\n                ""</body>\n"" +\r\n                ""</html>"";\r\n\r\n        // Define output PDF path\r\n        String path = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + ""/A.pdf"";\r\n        OutputStream outputStream = new FileOutputStream(path);\r\n\r\n        // Initialize iTextRenderer\r\n        ITextRenderer renderer = new ITextRenderer();\r\n\r\n        // Load and embed the font\r\n        renderer.getFontResolver().addFont(""C:/Windows/Fonts/DejaVuSans.ttf"", true); // Change path if on Linux/Mac\r\n\r\n        // Set document and render\r\n        renderer.setDocumentFromString(htmlString);\r\n        renderer.layout();\r\n        renderer.createPDF(outputStream);\r\n\r\n        // Close resources\r\n        outputStream.close();\r\n        System.out.println(""PDF successfully created at: "" + path);\r\n    }\r\n}""]",0,1
"[""import jakarta.activation.DataHandler;\r\nimport jakarta.activation.DataSource;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\n\r\n/**\r\n * A DataSource implementation that wraps a byte array to prevent automatic conversion to MTOM attachments.\r\n */\r\npublic class ByteArrayDataSource implements DataSource {\r\n    private final byte[] data;\r\n    private final String type;\r\n\r\n    public ByteArrayDataSource(byte[] data, String type) {\r\n        this.data = data;\r\n        this.type = type;\r\n    }\r\n\r\n    @Override\r\n    public InputStream getInputStream() {\r\n        return new ByteArrayInputStream(data);\r\n    }\r\n\r\n    @Override\r\n    public OutputStream getOutputStream() throws IOException {\r\n        throw new IOException(""Not supported"");\r\n    }\r\n\r\n    @Override\r\n    public String getContentType() {\r\n        return type;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return ""ByteArrayDataSource"";\r\n    }\r\n}\r\n\r\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.ws.client.core.WebServiceTemplate;\r\nimport org.springframework.ws.client.core.support.WebServiceGatewaySupport;\r\n\r\n@Component\r\npublic class MySoapClient extends WebServiceGatewaySupport {\r\n    private final WebServiceTemplate template;\r\n\r\n    public MySoapClient(Jaxb2Marshaller marshaller) {\r\n        setMarshaller(marshaller);\r\n        setUnmarshaller(marshaller);\r\n        template = getWebServiceTemplate();\r\n    }\r\n\r\n    public void sendDocuments(MyRequest request) {\r\n        template.marshalSendAndReceive(request);\r\n    }\r\n}\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.oxm.jaxb.Jaxb2Marshaller;\r\n\r\n@Configuration\r\npublic class Jaxb2MarshallerConfig {\r\n    @Bean\r\n    public Jaxb2Marshaller myMarshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setContextPath(""com.company.project.xsd.some_portal.v4_0"");\r\n        marshaller.setMtomEnabled(false); // Disable MTOM to force inline encoding\r\n        return marshaller;\r\n    }\r\n}\r\n\r\nimport jakarta.xml.bind.annotation.*;\r\nimport jakarta.activation.DataHandler;\r\n\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = ""BinaryData"", propOrder = {""blob"", ""extension""})\r\npublic class BinaryData {\r\n    @XmlElement(required = true)\r\n    protected DataHandler blob;\r\n    @XmlElement(required = true)\r\n    protected String extension;\r\n\r\n    public DataHandler getBlob() {\r\n        return blob;\r\n    }\r\n\r\n    public void setBlob(DataHandler blob) {\r\n        this.blob = blob;\r\n    }\r\n\r\n    public String getExtension() {\r\n        return extension;\r\n    }\r\n\r\n    public void setExtension(String extension) {\r\n        this.extension = extension;\r\n    }\r\n}\r\n\r\nimport jakarta.activation.DataHandler;\r\n\r\npublic class BinaryDataBuilder {\r\n    public static BinaryData buildBinaryData(byte[] documentData) {\r\n        BinaryData binaryData = new BinaryData();\r\n        DataSource ds = new ByteArrayDataSource(documentData, ""application/octet-stream"");\r\n        DataHandler dataHandler = new DataHandler(ds);\r\n        binaryData.setBlob(dataHandler);\r\n        binaryData.setExtension(""pdf"");\r\n        return binaryData;\r\n    }\r\n}""]",0,1
"[""import android.annotation.SuppressLint;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    EditText txtfirst, txtsecond;\r\n    Button btngenerate;\r\n    ListView li;\r\n    ArrayList<String> list;\r\n    ArrayAdapter<String> arrayAdapter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        txtfirst = findViewById(R.id.txtfirst);\r\n        txtsecond = findViewById(R.id.txtsecond);\r\n        btngenerate = findViewById(R.id.btngenerate);\r\n        li = findViewById(R.id.listview);\r\n\r\n        list = new ArrayList<>();\r\n        arrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, list);\r\n        li.setAdapter(arrayAdapter);\r\n\r\n        btngenerate.setOnClickListener(new View.OnClickListener() {\r\n            @SuppressLint(""DefaultLocale"")\r\n            @Override\r\n            public void onClick(View view) {\r\n                try {\r\n                    long value1 = Long.parseLong(txtfirst.getText().toString().trim());\r\n                    long value2 = Long.parseLong(txtsecond.getText().toString().trim());\r\n\r\n                    if (String.valueOf(value1).length() > 11 || String.valueOf(value2).length() > 11) {\r\n                        Toast.makeText(MainActivity.this, ""Enter a valid 11-digit number!"", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n                    }\r\n\r\n                    if (value1 > value2) {\r\n                        Toast.makeText(MainActivity.this, ""Start value must be smaller than end value!"", Toast.LENGTH_SHORT).show();\r\n                        return;\r\n                    }\r\n\r\n                    list.clear(); // Clear the previous list\r\n                    for (long i = value1; i <= value2; i++) {\r\n                        list.add(String.format(""%011d"", i)); // Ensures the number is always 11 digits\r\n                    }\r\n\r\n                    arrayAdapter.notifyDataSetChanged(); // Notify adapter to refresh ListView\r\n\r\n                } catch (NumberFormatException e) {\r\n                    Toast.makeText(MainActivity.this, ""Invalid input. Please enter numeric values!"", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}""]",0,1
"[""package tests;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.lang.instrument.ClassFileTransformer;\r\nimport java.lang.instrument.Instrumentation;\r\nimport java.lang.instrument.IllegalClassFormatException;\r\nimport java.security.ProtectionDomain;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\nimport javassist.ClassPool;\r\nimport javassist.CtClass;\r\nimport javassist.CtMethod;\r\n\r\npublic class MyInstrumentationAgent {\r\n    private static final Map<FileDescriptor, String> openFiles = new ConcurrentHashMap<>();\r\n\r\n    public static void premain(String agentArgs, Instrumentation inst) {\r\n        System.out.println(""Executing premain with args = '"" + agentArgs + ""'"");\r\n        inst.addTransformer(new MyClassTransformer(), true);\r\n    }\r\n\r\n    public static class MyClassTransformer implements ClassFileTransformer {\r\n        @Override\r\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\r\n                                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\r\n            try {\r\n                ClassPool pool = ClassPool.getDefault();\r\n                CtClass ctClass = pool.get(className.replace(""/"", "".""));\r\n\r\n                if (className.equals(""java/io/FileInputStream"")) {\r\n                    CtMethod initMethod = ctClass.getDeclaredConstructor(new CtClass[]{pool.get(""java.io.File"")});\r\n                    initMethod.insertAfter(""{"" +\r\n                            ""System.out.println(\""FileInputStream opened: \"" + $1.getAbsolutePath());"" +\r\n                            ""tests.MyInstrumentationAgent.trackOpenFile(this.getFD(), $1.getAbsolutePath());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                if (className.equals(""java/io/FileOutputStream"")) {\r\n                    CtMethod initMethod = ctClass.getDeclaredConstructor(new CtClass[]{pool.get(""java.io.File""), CtClass.booleanType});\r\n                    initMethod.insertAfter(""{"" +\r\n                            ""System.out.println(\""FileOutputStream opened: \"" + $1.getAbsolutePath());"" +\r\n                            ""tests.MyInstrumentationAgent.trackOpenFile(this.getFD(), $1.getAbsolutePath());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                if (className.equals(""java/io/FileInputStream"") || className.equals(""java/io/FileOutputStream"")) {\r\n                    CtMethod closeMethod = ctClass.getDeclaredMethod(""close"");\r\n                    closeMethod.insertBefore(""{"" +\r\n                            ""System.out.println(\""Closing file: \"" + tests.MyInstrumentationAgent.getFileName(this.getFD()));"" +\r\n                            ""tests.MyInstrumentationAgent.trackCloseFile(this.getFD());"" +\r\n                            ""}"");\r\n                }\r\n\r\n                return ctClass.toBytecode();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            return classfileBuffer;\r\n        }\r\n    }\r\n\r\n    public static void trackOpenFile(FileDescriptor fd, String fileName) {\r\n        openFiles.put(fd, fileName);\r\n    }\r\n\r\n    public static void trackCloseFile(FileDescriptor fd) {\r\n        openFiles.remove(fd);\r\n    }\r\n\r\n    public static String getFileName(FileDescriptor fd) {\r\n        return openFiles.getOrDefault(fd, ""Unknown file"");\r\n    }\r\n}\r\n\r\nsh\r\n   javac -cp javassist.jar tests/MyInstrumentationAgent.java\r\n   jar cmf MANIFEST.MF myagent.jar tests/MyInstrumentationAgent.class\r\n   \r\nsh\r\n   JAVA_OPTS=""-javaagent:/path/to/myagent.jar""\r\n   ""]",0,1
"[""import com.sun.source.doctree.DocCommentTree;\r\nimport com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.SimpleDocTreeVisitor;\r\nimport com.sun.source.util.Trees;\r\n\r\nimport javax.annotation.processing.AbstractProcessor;\r\nimport javax.annotation.processing.ProcessingEnvironment;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.element.TypeElement;\r\nimport javax.lang.model.util.Elements;\r\nimport javax.lang.model.util.Types;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\npublic class ExampleProcessor extends AbstractProcessor {\r\n\r\n    private DocTrees docTrees;\r\n    private Trees trees;\r\n    private Elements elementUtils;\r\n    private Types typeUtils;\r\n\r\n    @Override\r\n    public synchronized void init(final ProcessingEnvironment processingEnv) {\r\n        super.init(processingEnv);\r\n        docTrees = DocTrees.instance(processingEnv);\r\n        trees = Trees.instance(processingEnv);\r\n        elementUtils = processingEnv.getElementUtils();\r\n        typeUtils = processingEnv.getTypeUtils();\r\n    }\r\n\r\n    private void scanDocTree(Element element) {\r\n        Map<String, String> imports = collectElementImports(element);\r\n        ExampleContext context = new ExampleContext(imports, element);\r\n        DocCommentTree tree = docTrees.getDocCommentTree(element);\r\n        if (tree != null) {\r\n            ExampleDocTreeVisitor visitor = new ExampleDocTreeVisitor();\r\n            tree.accept(visitor, context);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects all imported classes for the given element.\r\n     */\r\n    private Map<String, String> collectElementImports(Element element) {\r\n        Map<String, String> imports = new HashMap<>();\r\n\r\n        // Retrieve the package name\r\n        String packageName = elementUtils.getPackageOf(element).getQualifiedName().toString();\r\n\r\n        // Collect imported types\r\n        List<? extends Element> enclosedElements = element.getEnclosingElement().getEnclosedElements();\r\n        for (Element enclosedElement : enclosedElements) {\r\n            if (enclosedElement instanceof TypeElement) {\r\n                TypeElement typeElement = (TypeElement) enclosedElement;\r\n                String simpleName = typeElement.getSimpleName().toString();\r\n                String qualifiedName = typeElement.getQualifiedName().toString();\r\n                imports.put(simpleName, qualifiedName);\r\n            }\r\n        }\r\n\r\n        // Always map java.lang classes implicitly\r\n        imports.putAll(getJavaLangClasses());\r\n\r\n        // Add the element's own package classes\r\n        imports.put(packageName, packageName);\r\n\r\n        return imports;\r\n    }\r\n\r\n    /**\r\n     * Returns a map of java.lang classes for resolution.\r\n     */\r\n    private Map<String, String> getJavaLangClasses() {\r\n        Map<String, String> javaLangClasses = new HashMap<>();\r\n        javaLangClasses.put(""String"", ""java.lang.String"");\r\n        javaLangClasses.put(""Integer"", ""java.lang.Integer"");\r\n        javaLangClasses.put(""Double"", ""java.lang.Double"");\r\n        javaLangClasses.put(""Boolean"", ""java.lang.Boolean"");\r\n        javaLangClasses.put(""Object"", ""java.lang.Object"");\r\n        // Add more common java.lang classes if needed\r\n        return javaLangClasses;\r\n    }\r\n\r\n    private static final class ExampleDocTreeVisitor extends SimpleDocTreeVisitor<Void, ExampleContext> {\r\n        @Override\r\n        public Void visitLink(LinkTree linkTree, final ExampleContext context) {\r\n            String signature = linkTree.getReference().getSignature();\r\n            String fqcn = resolveFullyQualifiedName(signature, context);\r\n            System.out.println(""Resolved link: "" + signature + "" -> "" + fqcn);\r\n            return null;\r\n        }\r\n\r\n        private String resolveFullyQualifiedName(String signature, ExampleContext context) {\r\n            // If it's a fully qualified name already, return it\r\n            if (signature.contains(""."")) {\r\n                return signature;\r\n            }\r\n\r\n            // Try resolving from imports\r\n            String fqcn = context.imports.get(signature);\r\n            if (fqcn != null) {\r\n                return fqcn;\r\n            }\r\n\r\n            // Try resolving from the same package as the current element\r\n            String samePackageClass = context.packageName + ""."" + signature;\r\n            if (context.imports.containsKey(context.packageName)) {\r\n                return samePackageClass;\r\n            }\r\n\r\n            return ""UNKNOWN""; // Unable to resolve\r\n        }\r\n    }\r\n\r\n    private static class ExampleContext {\r\n        final Map<String, String> imports;\r\n        final String packageName;\r\n\r\n        ExampleContext(Map<String, String> imports, Element element) {\r\n            this.imports = imports;\r\n            this.packageName = element.getEnclosingElement().toString();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport org.neo4j.driver.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AutoCompleteExample extends Application {\r\n\r\n    private AutoCompletionBinding<String> clientBinding;\r\n    private static final Driver neo4jDriver = GraphDatabase.driver(""bolt://localhost:7687"", AuthTokens.basic(""neo4j"", ""password""));\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.textProperty().addListener((obs, oldText, newText) -> {\r\n            if (newText.length() < 2) {\r\n                if (clientBinding != null) {\r\n                    clientBinding.dispose();\r\n                    clientBinding = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Perform the database query asynchronously\r\n            Task<List<String>> queryTask = new Task<>() {\r\n                @Override\r\n                protected List<String> call() throws Exception {\r\n                    return getClientAutoComplete(newText);\r\n                }\r\n            };\r\n\r\n            queryTask.setOnSucceeded(event -> {\r\n                if (clientBinding != null) {\r\n                    clientBinding.dispose();\r\n                }\r\n                clientBinding = TextFields.bindAutoCompletion(textField, queryTask.getValue());\r\n                clientBinding.setOnAutoCompleted(e -> System.out.println(""Selected: "" + e.getCompletion()));\r\n            });\r\n\r\n            queryTask.setOnFailed(event -> {\r\n                Throwable error = queryTask.getException();\r\n                System.err.println(""Query failed: "" + error.getMessage());\r\n            });\r\n\r\n            new Thread(queryTask).start();\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    private List<String> getClientAutoComplete(String input) {\r\n        List<String> resultClients = new ArrayList<>();\r\n        try (Session session = neo4jDriver.session()) {\r\n            Result result = session.run(\r\n                    ""MATCH (n:Client) WHERE toUpper(n.name) CONTAINS $input RETURN n.name AS name"",\r\n                    Values.parameters(""input"", input)\r\n            );\r\n            while (result.hasNext()) {\r\n                Record record = result.next();\r\n                resultClients.add(record.get(""name"").asString());\r\n            }\r\n        }\r\n        return resultClients;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""import java.util.*;\r\nimport java.util.function.BiPredicate;\r\nimport java.util.stream.Collectors;\r\n\r\nclass Main {\r\n    public static void main(String[] args) {\r\n        Map<String, Set<Long>> myMap = new HashMap<>();\r\n\r\n        myMap.put(""a"", Set.of(1L, 2L, 3L));\r\n        myMap.put(""b"", Set.of(4L, 5L));\r\n        myMap.put(""c"", Set.of(1L));\r\n        myMap.put(""d"", Set.of(2L, 3L));\r\n        myMap.put(""e"", Set.of(5L));\r\n        myMap.put(""f"", Set.of(6L));\r\n\r\n        findOverlappingEntries(myMap);\r\n    }\r\n\r\n    private static void findOverlappingEntries(Map<String, Set<Long>> myMap) {\r\n        List<List<String>> overlappingPairs = new ArrayList<>();\r\n\r\n        List<String> keys = new ArrayList<>(myMap.keySet());\r\n\r\n        BiPredicate<String, String> condition = (a, b) -> !a.equals(b) &&\r\n                myMap.get(a).size() >= myMap.get(b).size() &&\r\n                myMap.get(a).containsAll(myMap.get(b));\r\n\r\n        for (int i = 0; i < keys.size(); i++) {\r\n            for (int j = i + 1; j < keys.size(); j++) {\r\n                String key1 = keys.get(i);\r\n                String key2 = keys.get(j);\r\n\r\n                if (condition.test(key1, key2)) {\r\n                    overlappingPairs.add(List.of(key1, key2));\r\n                } else if (condition.test(key2, key1)) {\r\n                    overlappingPairs.add(List.of(key2, key1));\r\n                }\r\n            }\r\n        }\r\n\r\n        // Print the results\r\n        overlappingPairs.forEach(pair -> System.out.println(pair.get(0) + "" and "" + pair.get(1)));\r\n    }\r\n}\r\n\r\n\r\na and c\r\nb and e\r\na and d\r\n""]",0,1
"[""MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n\r\njava\r\nMemorySegment functionSetProgressStatePtr = taskbarList3Vtbl.get(ValueLayout.ADDRESS, ITaskbarList3Vtbl.SetProgressState$offset());\r\n\r\njava\r\nlong rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n\r\njava\r\nhr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n\r\njava\r\nvar setProgressStateFn = Linker.nativeLinker().downcallHandle(\r\n    functionSetProgressStatePtr,\r\n    FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.JAVA_INT)\r\n);\r\nsetProgressStateFn.invokeExact(taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n""]",0,1
"[""import java.util.ArrayList;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>();\r\n\r\n        System.out.println(""Index | Time (ns)"");\r\n\r\n        for (int i = 0; i < 12; i++) {\r\n            long t1 = System.nanoTime();\r\n            collection.add(""a"");\r\n            long t2 = System.nanoTime();\r\n            System.out.println(""   "" + (i + 1) + ""   | "" + (t2 - t1));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nIndex | Time (ns)\r\n   1   | 6000\r\n   2   | 800\r\n   3   | 500\r\n   4   | 400\r\n   5   | 350\r\n   6   | 300\r\n   7   | 300\r\n   8   | 280\r\n   9   | 250\r\n  10   | 230\r\n  11   | 220\r\n  12   | 200\r\n\r\njava\r\n   ArrayList<String> collection = new ArrayList<>(12);\r\n   ""]",0,1
"[""public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f(int depth) {\r\n        System.out.println(i++);\r\n        System.out.println(String.format(""depth=%d"", ++depth));\r\n        try {\r\n            f(depth);\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(""Caught StackOverflowError at depth: "" + depth);\r\n            f(0); // Restart recursion from zero depth after catching the error\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f(0);\r\n    }\r\n}""]",0,1
"[""    import javafx.application.Application;\r\nimport javafx.geometry.Insets;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Font;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic class EmoApp extends Application {\r\n    private static final String CSS_DATA = ""data:text/css,"";\r\n\r\n    private static final String CSS = CSS_DATA + """"""\r\n        .root {\r\n           -fx-font-size: 16px;\r\n        }\r\n        .default {}\r\n        .noto-color-emoji {\r\n          -fx-font-family: ""Noto Color Emoji"";\r\n        }\r\n        .open-sans-emoji {\r\n          -fx-font-family: ""OpenSansEmoji"";\r\n        }\r\n        .segoe-emoji {\r\n          -fx-font-family: ""Segoe UI Emoji"";\r\n        }\r\n        .apple-color-emoji {\r\n          -fx-font-family: ""Apple Color Emoji"";\r\n        }\r\n        """""";\r\n\r\n    private static final String EMOJI_TEXT = """"""\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        ?? ?? ?? ?? ?? ?? ?? ?? ?? ??\r\n        """""";\r\n\r\n    private static final String NOTO_COLOR_EMOJI_CSS =\r\n            ""https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&display=swap"";\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        VBox root = new VBox();\r\n        root.setPadding(new Insets(10));\r\n        root.setSpacing(10);\r\n\r\n        Label label = new Label(""Emoji Test"");\r\n        label.getStyleClass().add(""default"");\r\n\r\n        TextArea textArea = new TextArea(EMOJI_TEXT);\r\n        textArea.getStyleClass().add(""noto-color-emoji"");\r\n\r\n        root.getChildren().addAll(label, textArea);\r\n\r\n        Scene scene = new Scene(root, 400, 300);\r\n        scene.getStylesheets().add(CSS);\r\n\r\n        primaryStage.setTitle(""Emoji Support Test"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}""]",0,1
"[""package com.question.config;\r\n\r\npublic interface ConfigKeys {\r\n    String LANGUAGE = ""my.app.prefix.language"";\r\n}\r\n\r\njava\r\npackage com.question.service;\r\n\r\nimport com.question.config.ConfigKeys;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@ConditionalOnProperty(name = ConfigKeys.LANGUAGE, havingValue = ""english"")\r\npublic class EnglishLanguageServiceImpl implements LanguageService {\r\n\r\n    @Override\r\n    public String process(String name) {\r\n        return ""Welcome "" + name;\r\n    }\r\n}\r\n\r\njava\r\npackage com.question.service;\r\n\r\nimport com.question.config.ConfigKeys;\r\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@ConditionalOnProperty(name = ConfigKeys.LANGUAGE, havingValue = ""french"")\r\npublic class FrenchLanguageServiceImpl implements LanguageService {\r\n\r\n    @Override\r\n    public String process(String name) {\r\n        return ""Bonjour "" + name;\r\n    }\r\n}\r\n\r\njava\r\npackage com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(LanguageService languageService) {\r\n        this.languageService = languageService;\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n\r\nproperties\r\nmy.app.prefix.language=english\r\n\r\nproperties\r\nmy.app.prefix.language=french\r\n\r\njava\r\npackage com.question;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class LanguageApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(LanguageApplication.class, args);\r\n    }\r\n}\r\n\r\n\r\n/test?name=John  ? ""Welcome John""\r\n\r\n\r\n/test?name=John  ? ""Bonjour John""\r\n""]",0,1
"[""{\r\n       ""python.defaultInterpreterPath"": ""C:\\Python311\\python.exe"",\r\n       ""python.pythonPath"": ""C:\\Python311\\python.exe""\r\n   }\r\n   \r\n\r\n   which python   # On Mac/Linux\r\n   where python    # On Windows\r\n   \r\n\r\n   C:\Python311\python.exe -m pip install langchain\r\n   \r\njson\r\n   {\r\n       ""version"": ""0.2.0"",\r\n       ""configurations"": [\r\n           {\r\n               ""name"": ""Python: Current File"",\r\n               ""type"": ""python"",\r\n               ""request"": ""launch"",\r\n               ""program"": ""${file}"",\r\n               ""pythonPath"": ""C:\\Python311\\python.exe""\r\n           }\r\n       ]\r\n   }\r\n   \r\npython\r\nimport sys\r\nprint(""Python executable path:"", sys.executable)\r\nprint(""Python version:"", sys.version)\r\n""]",0,1
"[""def get_spouse(name):\r\n    match name:\r\n        case ""John"":\r\n            return ""Jane""\r\n        case ""David"":\r\n            return ""Alice""\r\n        case _:\r\n            raise ValueError(""Unknown name"")\r\n\r\nspouse = get_spouse(""John"")\r\nprint(spouse)\r\n\r\npython\r\nspouse = {\r\n    ""John"": ""Jane"",\r\n    ""David"": ""Alice""\r\n}.get(name, ""Unknown"")\r\nprint(spouse)\r\n\r\npython\r\nspouse = (\r\n    ""Jane"" if name == ""John"" else\r\n    ""Alice"" if name == ""David"" else\r\n    ""Unknown""\r\n)\r\nprint(spouse)\r\n""]",0,1
"[""from typing import Any\r\n\r\ntest_var: int\r\na: Any\r\n\r\nprint('hi')\r\n\r\npython\r\nfrom pprint import pprint\r\n\r\na: int = 1\r\n\r\npprint(globals())\r\n\r\n# Output:\r\n# {'__annotations__': {'a': <class 'int'>},\r\n#  'a': 1,\r\n#  ...}\r\n""]",0,1
"[""cpp\r\n// File: wrapper.cpp\r\n\r\n#include ""x86-simd-sort/lib/x86simdsort.h"" // Ensure you have the SIMD sorting library available\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <forward_list>\r\n#include <mutex>\r\n#include <array>\r\n#include <omp.h>\r\n\r\ntemplate <typename T, size_t bucketMaxSize>\r\nstruct BucketList\r\n{\r\n    using Bucket = std::array<T, bucketMaxSize>;\r\n\r\n    std::forward_list<Bucket> buckets;\r\n    uint32_t bucketCount;\r\n    uint32_t lastBucketSize;\r\n\r\n    BucketList() : bucketCount(1), lastBucketSize(0)\r\n    {\r\n        buckets.emplace_front();\r\n    }\r\n\r\n    void push_back(const T& value)\r\n    {\r\n        if (lastBucketSize == bucketMaxSize)\r\n        {\r\n            buckets.emplace_front();\r\n            lastBucketSize = 0;\r\n            bucketCount++;\r\n        }\r\n\r\n        Bucket* lastBucket = &*buckets.begin();\r\n        (*lastBucket)[lastBucketSize] = value;\r\n        lastBucketSize++;\r\n    }\r\n\r\n    size_t size() const\r\n    {\r\n        return (size_t(bucketCount) - 1lu) * bucketMaxSize + lastBucketSize;\r\n    }\r\n\r\n    size_t bucketSize(size_t idx) const\r\n    {\r\n        return idx == 0 ? lastBucketSize : bucketMaxSize;\r\n    }\r\n};\r\n\r\nextern ""C"" void parallel_sort(int64_t* arr, size_t size)\r\n{\r\n    static const size_t bucketSize = 2048;\r\n    static const size_t radixBits = 11;\r\n    static const size_t bucketCount = 1 << radixBits;\r\n\r\n    struct alignas(64) Slice\r\n    {\r\n        int64_t* data = nullptr;\r\n        size_t size = 0;\r\n        size_t global_offset = 0;\r\n        size_t local_offset = 0;\r\n        std::mutex mutex;\r\n    };\r\n\r\n    std::array<Slice, bucketCount> slices;\r\n\r\n    #pragma omp parallel\r\n    {\r\n        std::array<BucketList<int64_t, bucketSize>, bucketCount> tlsBuckets;\r\n\r\n        // Bucket sorting step\r\n        #pragma omp for nowait\r\n        for (size_t i = 0; i < size; ++i)\r\n        {\r\n            constexpr uint64_t signBit = uint64_t(1) << uint64_t(63);\r\n            const uint64_t idx = (uint64_t(arr[i]) ^ signBit) >> (64 - radixBits);\r\n            tlsBuckets[idx].push_back(arr[i]);\r\n        }\r\n\r\n        // Gather results back into the global slices\r\n        #pragma omp critical\r\n        for (size_t i = 0; i < bucketCount; ++i)\r\n        {\r\n            slices[i].size += tlsBuckets[i].size();\r\n        }\r\n\r\n        // Sort each bucket independently in parallel using SIMD (if available)\r\n        #pragma omp for\r\n        for (size_t i = 0; i < bucketCount; ++i)\r\n        {\r\n            std::vector<int64_t> bucket_data;\r\n            for (auto& bucket : tlsBuckets[i].buckets)\r\n            {\r\n                bucket_data.insert(bucket_data.end(), bucket.begin(), bucket.end());\r\n            }\r\n\r\n            // Use SIMD for sorting within each bucket (you can use your SIMD sorting library here)\r\n            x86simdsort::simd_sort(bucket_data.begin(), bucket_data.end());\r\n\r\n            // Store the sorted results back into slices\r\n            std::lock_guard<std::mutex> lock(slices[i].mutex);\r\n            std::memcpy(arr + slices[i].global_offset, bucket_data.data(), bucket_data.size() * sizeof(int64_t));\r\n            slices[i].global_offset += bucket_data.size();\r\n        }\r\n    }\r\n}\r\n\r\npython\r\n# wrapper.pyx\r\nfrom libc.stdlib cimport malloc, free\r\ncdef extern from ""wrapper.cpp"":\r\n    void parallel_sort(int64_t* arr, size_t size)\r\n\r\ndef sort_array(np.ndarray arr):\r\n    # Ensure the array is of type int64\r\n    cdef int64_t* arr_ptr = <int64_t*>arr.data\r\n    size_t arr_size = arr.size\r\n    parallel_sort(arr_ptr, arr_size)\r\n\r\npython\r\n# main.py\r\nimport numpy as np\r\nfrom wrapper import sort_array\r\n\r\n# Create a large random uint64 array\r\narr = np.random.randint(0, 2**64, int(3e8), dtype='uint64')\r\n\r\n# Sort the array using the parallel sorting\r\nsort_array(arr)\r\n\r\n# Check the result\r\nprint(arr[:10])  # Print first 10 sorted values\r\n\r\npython\r\n# setup.py\r\nfrom setuptools import setup\r\nfrom Cython.Build import cythonize\r\nimport numpy as np\r\n\r\nsetup(\r\n    ext_modules=cythonize(""wrapper.pyx""),\r\n    include_dirs=[np.get_include()]\r\n)\r\n\r\nbash\r\npython setup.py build_ext --inplace\r\n""]",0,1
"[""import sqlalchemy as sa    \r\nfrom sqlalchemy.orm import mapped_column, Mapped, DeclarativeBase    \r\n\r\nclass Base(DeclarativeBase):    \r\n    pass    \r\n\r\nclass Test(Base):    \r\n    __tablename__ = 't75312537'    \r\n\r\n    id: Mapped[int] = mapped_column(sa.BigInteger, sa.Identity(), primary_key=True)\r\n\r\nsql\r\nCREATE TABLE t75312537 (\r\n    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY\r\n);\r\n""]",0,1
"[""pip install pandas lxml\r\n   \r\npython\r\n   import pandas as pd\r\n\r\n   url = 'https://www.bmv.com.mx/es/mercados/capitales'\r\n   tables = pd.read_html(url)\r\n   \r\npython\r\n   first_table = tables[0]\r\n   \r\npython\r\n   tables = pd.read_html(url, match='Your Matching Text')\r\n   \r\npython\r\n   tables = pd.read_html(url, attrs={'class': 'table-class-name'})\r\n   \r\npython\r\n   print(first_table.head())\r\n   \r\npython\r\nimport pandas as pd\r\n\r\nurl = 'https://www.bmv.com.mx/es/mercados/capitales'\r\ntables = pd.read_html(url, match='Series Operadas del Mercado de Capitales')\r\n\r\nif tables:\r\n    series_table = tables[0]\r\n    print(series_table.head())\r\nelse:\r\n    print('No matching tables found.')\r\n""]",0,1
"[""import numpy as np\r\nimport cv2\r\nimport svgwrite\r\nfrom PIL import Image\r\n\r\nMM_IN_INCH = 0.03937\r\n\r\ndef round_int_to_10s(value):\r\n    int_value = int(value)\r\n    return int_value + 10 - int_value % 10\r\n\r\ndef get_sizes_pixels(height_mm, width_mm, pattern_size_mm, dpi):\r\n    dpmm = MM_IN_INCH * dpi  # dots per mm\r\n    width_px = round_int_to_10s(np.ceil(width_mm * dpmm))\r\n    height_px = round_int_to_10s(np.ceil(height_mm * dpmm))\r\n    pattern_size_px = pattern_size_mm * dpmm\r\n    return height_px, width_px, pattern_size_px\r\n\r\ndef get_grid_positions(size, pattern_size, density):\r\n    count = int(density * size / pattern_size)  # get number of patterns possible\r\n    if count == 1:\r\n        return [size // 2]\r\n    return [int(i * size / (count + 1)) for i in range(1, count + 1)]\r\n\r\ndef get_spot_grid(height_px, width_px, pattern_size_px, density):\r\n    vertical = get_grid_positions(height_px, pattern_size_px, density)\r\n    horizontal = get_grid_positions(width_px, pattern_size_px, density)\r\n    return vertical, horizontal\r\n\r\ndef generate_spots(vertical, horizontal, pattern_size, density, variation):\r\n    spots = []\r\n    noise_halfspan = 2 * pattern_size / density\r\n    noise_min, noise_max = -noise_halfspan, noise_halfspan\r\n    for i in vertical:\r\n        for j in horizontal:\r\n            # generate noisy information\r\n            center = tuple(map(int, (j + variation * np.random.randint(noise_min, noise_max),\r\n                                      i + variation * np.random.randint(noise_min, noise_max))))\r\n            d = int(pattern_size + pattern_size * variation * (np.random.rand() - 0.5) / 2)\r\n            spots.append((center, d // 2))  # add circle params\r\n    return spots\r\n\r\ndef render_raster(height, width, spots):\r\n    im = 255 * np.ones((height, width), dtype=np.uint8)\r\n    for center, radius in spots:\r\n        cv2.circle(im, center, radius, 0, -1)  # add circle\r\n    return im\r\n\r\ndef render_svg(height, width, spots, filename):\r\n    dwg = svgwrite.Drawing(filename, profile='tiny', size=(width, height))\r\n    fill_color = svgwrite.utils.rgb(0, 0, 0)\r\n    for center, radius in spots:\r\n        dwg.add(dwg.circle(center, radius, fill=fill_color))  # add circle\r\n    dwg.save()\r\n\r\ndef save_image(im, filename, dpi):\r\n    img = Image.fromarray(im)\r\n    img.save(filename, dpi=(dpi, dpi))\r\n\r\n#  INPUTS  #\r\n############\r\ndpi = 1000  # dots per inch\r\nWidthOfSample_mm = 50  # mm\r\nHeightOfSample_mm = 50  # mm\r\nPatternSize_mm = 0.1  # mm\r\ndensity = 0.75  # 1 is very dense, 0 is not fine at all\r\nVariation = 0.75  # 1 is very bad, 0 is very good\r\n############\r\n\r\nheight, width, pattern_size = get_sizes_pixels(HeightOfSample_mm, WidthOfSample_mm, PatternSize_mm, dpi)\r\nvertical, horizontal = get_spot_grid(height, width, pattern_size, density)\r\nspots = generate_spots(vertical, horizontal, pattern_size, density, Variation)\r\n\r\n# Generate Raster Image\r\nim = render_raster(height, width, spots)\r\nsave_image(im, ""speckle_pattern.png"", dpi)\r\nsave_image(im, ""speckle_pattern.tiff"", dpi)\r\n\r\n# Generate SVG\r\nrender_svg(height, width, spots, ""speckle_pattern.svg"")\r\n\r\nprint(""Files saved successfully: PNG, TIFF, and SVG."")""]",0,1
