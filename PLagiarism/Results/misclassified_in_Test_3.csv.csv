Code,label,predicted_label
"[""class Instanceof {\r\n    static void doesNotWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        } else if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        } else {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null) {\r\n            throw new Error();\r\n        }\r\n        if (!(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n\r\njava\r\nclass Instanceof {\r\n    static void doesWork(Object o) {\r\n        if (o == null || !(o instanceof String s)) {\r\n            throw new Error();\r\n        }\r\n        System.out.println(s);\r\n    }\r\n}\r\n""]",0,1
"[""package test.one;\r\n\r\npublic abstract class One {\r\n  \r\n  protected abstract void whatever();\r\n\r\n  public void run() {\r\n    whatever();\r\n  }\r\n  \r\n}\r\n\r\npackage test.two;\r\n\r\nimport test.one.One;\r\n\r\npublic class Two {\r\n\r\n  public static void main(String[] args) {\r\n    new One() {\r\n      @Override\r\n      protected void whatever() {\r\n        System.out.println(""Do whatever.."");\r\n      }\r\n    }.whatever();\r\n  }\r\n}\r\n""]",0,1
"[""<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>Ecdh Key Pair Generation</title>\r\n</head>\r\n<body> \r\n  <script>\r\n\r\n//Utils\r\nfunction _extractRawKeyMaterial(pem, type) {\r\n  const pemHeader = `-----BEGIN ${type} KEY-----`;\r\n  const pemFooter = `-----END ${type} KEY-----`;\r\n\r\n  const endingIndex = pem.indexOf(pemFooter);\r\n  const startingIndex = pem.indexOf(pemHeader) + pemHeader.length;\r\n\r\n  const pemContents = pem.substring(startingIndex, endingIndex);\r\n  var return_object = convertBase64StringToArrayBuffer(pemContents.trim());\r\n  return return_object;\r\n}\r\n\r\n const convertBase64StringToArrayBuffer = base64String => {\r\n  const text = window.atob(base64String);\r\n  return convertStringToArrayBuffer(text);\r\n};\r\n\r\n const convertStringToArrayBuffer = str => {\r\n  const buf = new ArrayBuffer(str.length);\r\n  const bufView = new Uint8Array(buf);\r\n  for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n    bufView[i] = str.charCodeAt(i);\r\n  }\r\n  return buf;\r\n};\r\n\r\n\r\n// private key\r\nvar privateKeyGenerated = `-----BEGIN PRIVATE KEY-----\r\nME4CAQAwEAYHKoZIzj0CAQYFK4EEACIENzA1AgEBBDAMvyd7HU0FwJxgs5N87NVw\r\nMPOR60umJXnhPjdtn0O0RHgx2J0sVnvw7B6ue1Wb5uQ=\r\n-----END PRIVATE KEY-----`\r\n\r\n// Pass the loaded private key to your function\r\n_loadEccPrivateKey(privateKeyGenerated);\r\n\r\n// Code working in chrome but fails in safari with an error : Data provided to an operation does not meet requirements\r\nasync function _loadEccPrivateKey(pemKey) {\r\n  try {\r\n     const rawKey = _extractRawKeyMaterial(pemKey.trim(), ""PRIVATE"");\r\n\r\n    //console.log(rawKey)\r\n    const key = await window.crypto.subtle.importKey(\r\n      ""pkcs8"", // Format for private keys\r\n      rawKey,\r\n      {\r\n        name: ""ECDH"",\r\n        namedCurve: ""P-384"",\r\n      },\r\n      true,\r\n      [""deriveBits"", ""deriveKey""] // Key usages\r\n    );\r\n\r\n    console.log('Imported Private Key:', key);\r\n    return key;\r\n  } catch (e) {\r\n    console.error('Error importing private key:', e);\r\n    throw e;\r\n  }\r\n}\r\n\r\n</script> \r\n</body>\r\n</html>\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class Solution {\r\n\r\n    public static int solve(List<Integer> list) {\r\n        int n = list.size();\r\n        int[] lis = new int[n];\r\n        int[] lds = new int[n];\r\n        \r\n        Arrays.fill(lis, 1);\r\n        Arrays.fill(lds, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < i; j++) {\r\n                if (list.get(i) > list.get(j)) {\r\n                    lis[i] = Math.max(lis[i], lis[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            for (int j = n - 1; j > i; j--) {\r\n                if (list.get(i) > list.get(j)) {\r\n                    lds[i] = Math.max(lds[i], lds[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLength = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            if (lis[i] > 1 && lds[i] > 1) {\r\n                maxLength = Math.max(maxLength, lis[i] + lds[i] - 1);\r\n            }\r\n        }\r\n        return maxLength;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(solve(List.of(1, 3, 5, 4, 2, 6, 8, 7, 9))); // Expected output: 9\r\n        System.out.println(solve(List.of(5, 5, 2, 1, 3, 4, 5))); // Expected output: 6\r\n        System.out.println(solve(List.of(1, 100))); // Expected output: 2\r\n        System.out.println(solve(List.of(2, 1, 3, 3, 1, 2, 1, 2, 3))); // Expected output: 7\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class WebConfig {\r\n\r\n    @Bean\r\n    public FilterRegistrationBean<HiddenHttpMethodFilter> hiddenHttpMethodFilter() {\r\n        FilterRegistrationBean<HiddenHttpMethodFilter> filterRegistrationBean = new FilterRegistrationBean<>(new HiddenHttpMethodFilter());\r\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(""/*""));\r\n        return filterRegistrationBean;\r\n    }\r\n}\r\n""]",0,1
"[""public abstract class Parent {\r\n    protected abstract static class InnerParent {\r\n        public InnerParent self() {\r\n            return this;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Child extends Parent {\r\n    public static class InnerChild extends InnerParent {}\r\n}\r\n\r\nimport anotherpackage.Child;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        var innerChild = new Child.InnerChild().self();\r\n        System.out.println(((Object) innerChild).getClass().getName());\r\n    }\r\n}\r\n""]",0,1
"[""package taskbar_test;\r\n\r\nimport com.sun.glass.ui.Window;\r\nimport javafx.application.Application;\r\nimport javafx.concurrent.Task;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\nimport taskbar_test.gen.Xlib_h;\r\n\r\nimport java.lang.foreign.Arena;\r\nimport java.lang.foreign.MemorySegment;\r\nimport java.lang.foreign.ValueLayout;\r\n\r\npublic class AppLinuxXlib extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Button startButton = new Button(""Start Long Running Task"");\r\n\r\n        startButton.setOnAction(event -> {\r\n            final long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n            System.out.println(rawHandle);\r\n\r\n            Task<Void> longTask = new Task<>() {\r\n                @Override\r\n                protected Void call() throws Exception {\r\n                    System.out.println(""Started"");\r\n\r\n                    try (var arena = Arena.ofConfined()) {\r\n                        var NET_WM_XAPP_PROGRESS = arena.allocateUtf8String(""_NET_WM_XAPP_PROGRESS"");\r\n\r\n                        MemorySegment x11Session = Xlib_h.XOpenDisplay(MemorySegment.NULL);\r\n                        System.out.println(x11Session);\r\n\r\n                        // Prepare the progress data\r\n                        MemorySegment initData = arena.allocate(ValueLayout.JAVA_INT, 0);\r\n                        Xlib_h.XChangeProperty(x11Session, MemorySegment.ofAddress(rawHandle).address(),\r\n                                NET_WM_XAPP_PROGRESS.address(), 6, 32, 0, initData, 1);\r\n                        Xlib_h.XFlush(x11Session);\r\n\r\n                        System.out.println(""Countdown started"");\r\n\r\n                        // Set the taskbar progress\r\n                        for (int i = 0; i <= 100; i += 20) {\r\n                            // Simulate work\r\n                            Thread.sleep(500);\r\n                            System.out.println(i);\r\n                            MemorySegment progressData = arena.allocate(ValueLayout.JAVA_INT, i);\r\n                            Xlib_h.XChangeProperty(x11Session, MemorySegment.ofAddress(rawHandle).address(),\r\n                                    NET_WM_XAPP_PROGRESS.address(), 6, 32, 0, progressData, 1);\r\n                            Xlib_h.XFlush(x11Session);\r\n                        }\r\n                        System.out.println(""Finished"");\r\n                        Xlib_h.XCloseDisplay(x11Session);\r\n\r\n                    } catch (Throwable ex) {\r\n                        ex.printStackTrace();\r\n                    }\r\n                    return null;\r\n                }\r\n            };\r\n\r\n            new Thread(longTask).start();\r\n        });\r\n\r\n        VBox vbox = new VBox(10, startButton);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Taskbar Progress Example Linux"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import org.yaml.snakeyaml.DumperOptions;\r\nimport org.yaml.snakeyaml.Yaml;\r\nimport java.util.Map;\r\n\r\npublic class YamlMapper {\r\n\r\n    public static InterestingSetup mapYamlToClass(Map<String, Object> yamlConfig) {\r\n        Yaml yaml = new Yaml();\r\n        Map<String, Object> interestingMap = (Map<String, Object>) yamlConfig.get(""interesting-setup"");\r\n        return yaml.loadAs(yaml.dump(interestingMap), InterestingSetup.class);\r\n    }\r\n}\r\n""]",0,1
"[""@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class SecurityConfigTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void testPermitAllEndpoint() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testHasScopeDataWrite() throws Exception {\r\n        mockMvc.perform(put(""/data/any"")\r\n                .header(HttpHeaders.AUTHORIZATION, ""Bearer valid-token-with-scope-data:write""))\r\n            .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    public void testUnauthenticatedRequest() throws Exception {\r\n        mockMvc.perform(get(""/data/actuator/health""))\r\n            .andExpect(status().isUnauthorized());\r\n    }\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\nimport com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n\r\nimport java.util.UUID;\r\n\r\npublic record AggregateId(UUID id) {}\r\n\r\npublic class Aggregate {\r\n\r\n    public final AggregateId aggregateId;\r\n\r\n    @JsonCreator\r\n    public Aggregate(@JsonProperty(""aggregateId"") AggregateId aggregateId) {\r\n        this.aggregateId = aggregateId;\r\n    }\r\n}\r\n\r\n@JsonSerialize\r\n@JsonDeserialize(using = AggregateIdSerializer.class)\r\npublic static class AggregateIdSerializer extends com.fasterxml.jackson.databind.JsonSerializer<AggregateId> {\r\n    @Override\r\n    public void serialize(AggregateId value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider serializers) throws java.io.IOException {\r\n        gen.writeString(value.id().toString());\r\n    }\r\n}\r\n\r\npublic static void main(String[] args) throws Exception {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    String content = ""{\""aggregateId\"":\""3f61aede-83dd-4049-a6ff-337887b6b807\""}"";\r\n    Aggregate aggregate = objectMapper.readValue(content, Aggregate.class);\r\n    System.out.println(objectMapper.writeValueAsString(aggregate));\r\n}\r\n""]",0,1
"[""import java.time.YearWeek;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class WeekOperations {\r\n\r\n    public static boolean isBefore(String weekA, String weekB) {\r\n        YearWeek ywA = YearWeek.parse(weekA, DateTimeFormatter.ISO_WEEK_DATE);\r\n        YearWeek ywB = YearWeek.parse(weekB, DateTimeFormatter.ISO_WEEK_DATE);\r\n        return ywA.isBefore(ywB);\r\n    }\r\n\r\n    public static long weeksBetween(String weekA, String weekB) {\r\n        YearWeek ywA = YearWeek.parse(weekA, DateTimeFormatter.ISO_WEEK_DATE);\r\n        YearWeek ywB = YearWeek.parse(weekB, DateTimeFormatter.ISO_WEEK_DATE);\r\n        return ywB.toEpochWeek() - ywA.toEpochWeek();\r\n    }\r\n}\r\n""]",0,1
"[""// Sample code illustrating the concept\r\n\r\npublic class InferenceExample {\r\n\r\n    public <T extends Exception> void handleExceptionThrows(T exception) throws T {\r\n        // throws clause with inferred exception type\r\n        throw exception;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            new InferenceExample().handleExceptionThrows(new Exception(""Checked Exception""));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public static boolean equalSplit(int[] arr) {\r\n    if (arr.length % 2 != 0)\r\n        return false;\r\n    return equalSplit(arr, 0, 0, arr.length / 2, arr.length / 2);\r\n}\r\n\r\npublic static boolean equalSplit(int[] arr, int startSum, int endSum, int start, int end) {\r\n    if (start == startSum && end == endSum)\r\n        return startSum == endSum;\r\n    \r\n    if (start < end) {\r\n        return equalSplit(arr, startSum + arr[start], endSum, start + 1, end) ||\r\n               equalSplit(arr, startSum, endSum + arr[end], start, end - 1);\r\n    }\r\n    return false;\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.geometry.Point2D;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.Tooltip;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class HelloApplication extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Label label = new Label(""TEST\nTEST\nTEST"");\r\n        label.setStyle(""-fx-background-color: green;"");\r\n\r\n        Tooltip tooltip = new Tooltip(""TOOLTIP"");\r\n        tooltip.setShowDelay(Duration.seconds(0.5));\r\n        label.setTooltip(tooltip);\r\n\r\n        Scene scene = new Scene(new AnchorPane(label));\r\n        stage.setScene(scene);\r\n        \r\n        stage.show();\r\n\r\n        label.setOnMouseEntered(event -> {\r\n            Point2D p = label.localToScene(0.0, 0.0);\r\n            double x = p.getX() + label.getScene().getX() + label.getScene().getWindow().getX();\r\n            double y = p.getY() + label.getScene().getY() + label.getScene().getWindow().getY();\r\n            tooltip.show(label, x + label.getWidth() - tooltip.getWidth(), y + label.getHeight());\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.stream.Stream;\r\n\r\npublic class MyTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(""hashMapProvider"")\r\n    void testMyMapObj(Map<String, Object> argument) {\r\n        assertNotNull(argument);\r\n        Object obj1 = argument.get(""1"");\r\n    }\r\n\r\n    static Stream<Map<String, Object>> hashMapProvider() {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(""1"", ""Obj1"");\r\n        map.put(""2"", ""Obj2"");\r\n        return Stream.of(map);\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.format.DateTimeParseException;\r\n\r\npublic class DateTimeExample {\r\n    public static void main(String[] args) {\r\n        String[] timestamps = {\r\n            ""2023-10-05T15:14:29.123456789Z"", // 9 digits\r\n            ""2023-10-05T15:14:29.12345678Z"",  // 8 digits\r\n            ""2023-10-05T15:14:29.1234567Z"",   // 7 digits\r\n            ""2023-10-05T15:14:29.123456Z"",    // 6 digits\r\n            ""2023-10-05T15:14:29.12345Z"",     // 5 digits\r\n            ""2023-10-05T15:14:29.1234Z"",      // 4 digits\r\n            ""2023-10-05T15:14:29.123Z"",       // 3 digits\r\n            ""2023-10-05T15:14:29.12Z"",        // 2 digits\r\n            ""2023-10-05T15:14:29.1Z"",         // 1 digit\r\n            ""2023-10-05T15:14:29Z""            // no fractional seconds\r\n        };\r\n\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd'T'HH:mm:ss[.SSSSSSSSS]'Z'"");\r\n\r\n        for (String timestamp : timestamps) {\r\n            try {\r\n                LocalDateTime dateTime = LocalDateTime.parse(timestamp, formatter);\r\n                System.out.println(""Parsed date: "" + dateTime);\r\n            } catch (DateTimeParseException e) {\r\n                System.err.println(""Failed to parse: "" + timestamp + "" - "" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class DuplicateCharacters {  \r\n    public static void main(String[] args) {  \r\n        String string1 = ""Great"";  \r\n        int count;  \r\n        boolean hasDuplicates = false;\r\n\r\n        char string[] = string1.toCharArray();  \r\n          \r\n        System.out.println(""Duplicate characters in a given string: "");  \r\n        \r\n        for(int i = 0; i < string.length; i++) {  \r\n            count = 1;  \r\n            for(int j = i + 1; j < string.length; j++) {  \r\n                if(string[i] == string[j] && string[i] != ' ') {  \r\n                    count++;  \r\n                    string[j] = '0';  \r\n                }  \r\n            }  \r\n            if(count > 1 && string[i] != '0') {  \r\n                System.out.println(string[i]);  \r\n                hasDuplicates = true;\r\n            }  \r\n        }  \r\n        \r\n        if(!hasDuplicates) {\r\n            System.out.println(""no duplicates"");\r\n        }\r\n    }  \r\n}  \r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.FlowPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Arc;\r\nimport javafx.scene.shape.ArcType;\r\nimport javafx.stage.Stage;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\n\r\npublic class four_color_wheel extends Application {\r\n    private Group circle;\r\n    private Button rotate;\r\n    private Arc blueArc, greenArc, yellowArc, redArc;\r\n\r\n    public void start(Stage primaryStage) {\r\n        blueArc = new Arc(200, 200, 150, 150, 0, 90);\r\n        blueArc.setType(ArcType.ROUND);\r\n        blueArc.setStroke(Color.BLUE);\r\n        blueArc.setFill(Color.BLUE);\r\n\r\n        greenArc = new Arc(200, 200, 150, 150, 90, 90);\r\n        greenArc.setType(ArcType.ROUND);\r\n        greenArc.setStroke(Color.GREEN);\r\n        greenArc.setFill(Color.GREEN);\r\n\r\n        yellowArc = new Arc(200, 200, 150, 150, 180, 90);\r\n        yellowArc.setType(ArcType.ROUND);\r\n        yellowArc.setStroke(Color.YELLOW);\r\n        yellowArc.setFill(Color.YELLOW);\r\n\r\n        redArc = new Arc(200, 200, 150, 150, 270, 90);\r\n        redArc.setType(ArcType.ROUND);\r\n        redArc.setStroke(Color.RED);\r\n        redArc.setFill(Color.RED);\r\n\r\n        circle = new Group(blueArc, greenArc, yellowArc, redArc);\r\n\r\n        rotate = new Button(""Rotate Right"");\r\n        rotate.setOnAction(this::processButtonPress);\r\n\r\n        FlowPane pane = new FlowPane(circle, rotate);\r\n        pane.setAlignment(Pos.CENTER);\r\n        pane.setHgap(20);\r\n        pane.setStyle(""-fx-background-color: GRAY"");\r\n\r\n        Scene scene = new Scene(pane, 400, 400);\r\n        primaryStage.setTitle(""Four-Color Wheel"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public void processButtonPress(ActionEvent event) {\r\n        circle.setRotate(circle.getRotate() + 90);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.StructuredTaskScope;\r\nimport java.util.concurrent.ScopedValue;\r\n\r\npublic class Playground {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        final var NAME = ScopedValue.<String>newInstance();\r\n        try (var ts = new StructuredTaskScope<>()) {\r\n            ScopedValue.runWhere(NAME, ""haha"", () -> {\r\n                ts.fork(() -> {\r\n                    ScopedValue.runWhere(NAME, ""bar"", () -> {\r\n                        return null;\r\n                    });\r\n                    return null;\r\n                });\r\n            });\r\n            ts.join();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.scene.text.TextAlignment;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyApp extends Application {\r\n    @Override\r\n    public void start(Stage stage) {\r\n        Pane root = new Pane();\r\n        root.setStyle(""-fx-background-color: black;"");\r\n        root.getChildren().add(createTestLabel());\r\n        Scene scene = new Scene(root);\r\n\r\n        scene.getStylesheets().add(""/ExampleStylesheet.css"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n    public Label createTestLabel() {\r\n        Label testLabel = new Label(""Placeholder\nText"");\r\n        testLabel.getStyleClass().add(""test-label"");\r\n        testLabel.setTextAlignment(TextAlignment.CENTER);\r\n        testLabel.setOnMouseEntered(this::doSomething);\r\n        testLabel.setOnMouseExited(this::doSomethingElse);\r\n\r\n        testLabel.setOnMousePressed(event -> handleMousePress(event));\r\n        return testLabel;\r\n    }\r\n\r\n    public void doSomething(MouseEvent event) {\r\n        // System.out.println(""Inside label."");\r\n    }\r\n\r\n    public void doSomethingElse(MouseEvent event) {\r\n        // System.out.println(""Outside label."");\r\n    }\r\n\r\n    public void handleMousePress(MouseEvent event) {\r\n        Label label = (Label) event.getSource();\r\n        if (!label.getBoundsInParent().contains(event.getSceneX(), event.getSceneY())) {\r\n            event.consume();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.control.TitledPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class MyGridPanes extends Application {\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        GridPane gridPane1 = new GridPane();\r\n        Label label1 = new Label(""One two three"");\r\n        TextField textField1 = new TextField();\r\n        gridPane1.add(label1, 0, 0);\r\n        gridPane1.add(textField1, 1, 0);\r\n        gridPane1.setHgap(20);\r\n\r\n        GridPane gridPane2 = new GridPane();\r\n        Label label2 = new Label(""Four five six seven"");\r\n        TextField textField2 = new TextField();\r\n        gridPane2.add(label2, 0, 0);\r\n        gridPane2.add(textField2, 1, 0);\r\n        gridPane2.setHgap(20);\r\n\r\n        TitledPane titledPane1 = new TitledPane(""Top"", gridPane1);\r\n        titledPane1.setCollapsible(false);\r\n        \r\n        TitledPane titledPane2 = new TitledPane(""Bottom"", gridPane2);\r\n        titledPane2.setCollapsible(false);\r\n\r\n        gridPane1.prefWidthProperty().bind(gridPane2.widthProperty());\r\n\r\n        VBox vbox = new VBox(titledPane1, titledPane2);\r\n        Scene scene = new Scene(vbox, 400, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public class TestWatermark3 {\r\n\r\n    public static String resourcesPath = ""C:\\Users\\java\\Desktop\\TestWaterMark\\"";\r\n    public static String FILE_NAME = resourcesPath + ""test.pdf"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        System.out.println(""########## STARTED ADDING WATERMARK ###########"");\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        try {\r\n            byte[] byteArray = Files.readAllBytes(Paths.get(FILE_NAME));\r\n            String watermarkText = ""confidential"";\r\n            String fontPath = resourcesPath + ""myCustomFont.ttf"";\r\n            Font arabicFont = FontFactory.getFont(fontPath, BaseFont.IDENTITY_H, 16);\r\n\r\n            BaseFont baseFont = arabicFont.getBaseFont();\r\n            PdfReader reader = new PdfReader(byteArray);\r\n            PdfStamper stamper = new PdfStamper(reader, baos);\r\n            Phrase watermarkPhrase = new Phrase(watermarkText, arabicFont);\r\n\r\n            int numberOfPages = reader.getNumberOfPages();\r\n\r\n            float height = baseFont.getAscentPoint(watermarkText, 24) + baseFont.getDescentPoint(watermarkText, 24);\r\n\r\n            for (int i = 1; i <= numberOfPages; i++) {\r\n\r\n                Rectangle pageSize = reader.getPageSizeWithRotation(i);\r\n                PdfContentByte overContent = stamper.getOverContent(i);\r\n\r\n                PdfGState state = new PdfGState();\r\n                state.setFillOpacity(0.3f);\r\n                overContent.saveState();\r\n                overContent.setGState(state);\r\n\r\n                for (float x = 70f; x < pageSize.getWidth(); x += height + 100) {\r\n                    for (float y = 90; y < pageSize.getHeight(); y += height + 100) {\r\n                        ColumnText.showTextAligned(overContent, Element.ALIGN_CENTER, watermarkPhrase, x, y, 45f,\r\n                                PdfWriter.RUN_DIRECTION_RTL, ColumnText.DIGITS_AN2EN);\r\n                    }\r\n                }\r\n\r\n                overContent.restoreState();\r\n\r\n            }\r\n\r\n            stamper.close();\r\n            reader.close();\r\n            byteArray = baos.toByteArray();\r\n            File outputFile = new File(resourcesPath + ""output.pdf"");\r\n            if (outputFile.exists()) {\r\n                outputFile.delete();\r\n            }\r\n            Files.write(outputFile.toPath(), byteArray);\r\n\r\n            System.out.println(""########## FINISHED ADDING WATERMARK ###########"");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.security.core.context.SecurityContext;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class VirtualThreadSecurityContextExample {\r\n\r\n    @GetMapping(""/secure-endpoint"")\r\n    public String getSecureEndpoint() {\r\n        SecurityContext securityContext = SecurityContextHolder.getContext();\r\n        String currentPrincipalName = securityContext.getAuthentication().getName();\r\n        return ""Hello, "" + currentPrincipalName;\r\n    }\r\n}\r\n""]",0,1
"[""public class Grid extends GridPane {\r\n    private final int totalColumnFields;\r\n    private final int totalRowFields;\r\n    private final int horizontalGap;\r\n    private final int verticalGap;\r\n    private final int fieldHorizontalSize;\r\n    private final int fieldVerticalSize;\r\n\r\n    public Grid(int totalColumnFields, int totalRowFields, int horizontalGap, int verticalGap, int fieldHorizontalSize, int fieldVerticalSize) {\r\n        this.totalColumnFields = totalColumnFields;\r\n        this.totalRowFields = totalRowFields;\r\n        this.horizontalGap = horizontalGap;\r\n        this.verticalGap = verticalGap;\r\n        this.fieldHorizontalSize = fieldHorizontalSize;\r\n        this.fieldVerticalSize = fieldVerticalSize;\r\n\r\n        this.setHgap(horizontalGap);\r\n        this.setVgap(verticalGap);\r\n        \r\n        TextField[][] arrayLetterField = new TextField[totalColumnFields][totalRowFields];\r\n\r\n        for (int row = 0; row < totalRowFields; row++) {\r\n            for (int col = 0; col < totalColumnFields; col++) {\r\n                arrayLetterField[col][row] = new TextField();\r\n                arrayLetterField[col][row].setMinSize(fieldHorizontalSize, fieldVerticalSize);\r\n                arrayLetterField[col][row].setMaxSize(fieldHorizontalSize, fieldVerticalSize);\r\n                this.add(arrayLetterField[col][row], col, row);\r\n            }\r\n        }            \r\n    }\r\n}\r\n\r\npublic class MainViewController implements Initializable {\r\n\r\n    @FXML\r\n    private MenuItem mnuItemNew;\r\n\r\n    @FXML\r\n    private ScrollPane scpGrid;\r\n\r\n    @FXML\r\n    public void onMnuItemNewAction() {\r\n        int cols = 10;\r\n        int rows = 10;\r\n        int horizontalGap = 1;\r\n        int verticalGap = 1;\r\n        int fieldHorizontalSize = 40;\r\n        int fieldVerticalSize = 40;\r\n        var newGrid = new Grid(cols, rows, horizontalGap, verticalGap, fieldHorizontalSize, fieldVerticalSize);\r\n        scpGrid.setContent(newGrid);\r\n        newGrid.setAlignment(Pos.CENTER);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle rb) {\r\n    }\r\n}\r\n""]",0,1
"[""import org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\r\n        configurer.defaultContentType(MediaType.APPLICATION_JSON);\r\n    }\r\n}\r\n""]",0,1
"[""@ExtendWith(MockitoExtension.class)\r\nclass YourTest {\r\n\r\n    @Mock\r\n    private PDFDocument pdfDocument;\r\n\r\n    @Mock\r\n    private PSConverter converter;\r\n\r\n    @Test\r\n    void test() throws Exception {\r\n        PDFDocument mockPdfDocument = Mockito.mock(PDFDocument.class);\r\n        PSConverter mockConverter = Mockito.mock(PSConverter.class);\r\n\r\n        whenNew(PDFDocument.class).withNoArguments().thenReturn(mockPdfDocument);\r\n        whenNew(PSConverter.class).withNoArguments().thenReturn(mockConverter);\r\n\r\n        doNothing().when(mockPdfDocument).load(Mockito.any(ByteArrayInputStream.class));\r\n        doAnswer(invocation -> {\r\n            ByteArrayOutputStream outputStream = invocation.getArgument(1);\r\n            outputStream.write(content);\r\n            return outputStream;\r\n        }).when(mockConverter).convert(Mockito.any(), Mockito.any(ByteArrayOutputStream.class));\r\n\r\n        // Add your test code here\r\n    }\r\n}\r\n""]",0,1
"[""@Bean\r\nSecurityFilterChain web(HttpSecurity http) throws Exception {\r\n    http\r\n        .authorizeHttpRequests(authorize -> authorize\r\n            .mvcMatchers(""/resources/**"", ""/signup"", ""/about"").permitAll()\r\n            .mvcMatchers(""/admin/**"").hasRole(""ADMIN"")\r\n            .mvcMatchers(""/db/**"").access((authentication, context) -> {\r\n                if (authentication != null && authentication.getAuthorities().stream()\r\n                        .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(""ROLE_ADMIN""))) {\r\n                    return AuthorizationDecision.ALLOW;\r\n                }\r\n                return AuthorizationDecision.DENY;\r\n            })\r\n            .anyRequest().denyAll()\r\n        );\r\n\r\n    return http.build();\r\n}\r\n""]",0,1
"[""public List<Product> searchProducts(String searchQuery, Pageable pageable) {\r\n    MatchOperation matchOperation = Aggregation.match(\r\n        Criteria.where(""companyNo"").in(10000009)\r\n            .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n            .and(""productName"").regex(searchQuery, ""i"")\r\n    );\r\n\r\n    UnionWithOperation unionWithSubCategory = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""subCategoryName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    UnionWithOperation unionWithCategory = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""categoryName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    UnionWithOperation unionWithBrand = Aggregation.unionWith(""product"", Aggregation.newAggregation(\r\n        Aggregation.match(\r\n            Criteria.where(""companyNo"").in(10000009)\r\n                .and(""status"").in(""ACTIVE"", ""IN_ACTIVE"", ""OUT_OF_STOCK"")\r\n                .and(""brandName"").regex(searchQuery, ""i"")\r\n        )\r\n    ));\r\n\r\n    Aggregation aggregation = Aggregation.newAggregation(\r\n        matchOperation,\r\n        unionWithSubCategory,\r\n        unionWithCategory,\r\n        unionWithBrand,\r\n        Aggregation.skip((long) pageable.getOffset()),\r\n        Aggregation.limit(pageable.getPageSize())\r\n    );\r\n\r\n    AggregationResults<Product> results = mongoTemplate.aggregate(aggregation, ""product"", Product.class);\r\n    return results.getMappedResults();\r\n}\r\n""]",0,1
"[""public class JdkBenchmarks {\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(AverageTime)\r\n    @OutputTimeUnit(NANOSECONDS)\r\n    public void indexed(Blackhole blackhole, TestState testState) {\r\n        int length = testState.values.length;\r\n        for (int i = 0; i < length; i++) {\r\n            blackhole.consume(testState.values[i]);\r\n        }\r\n    }\r\n\r\n    @Benchmark\r\n    @BenchmarkMode(AverageTime)\r\n    @OutputTimeUnit(NANOSECONDS)\r\n    public void enhanced(Blackhole blackhole, TestState testState) {\r\n        for (int value : testState.values) {\r\n            blackhole.consume(value);\r\n        }\r\n    }\r\n\r\n    @State(Scope.Benchmark)\r\n    public static class TestState {\r\n        public int[] values;\r\n\r\n        @Setup(Level.Trial)\r\n        public void setupArray() {\r\n            int count = 1000;\r\n            values = new int[count];\r\n            for (int i = 0; i < count; i++) {\r\n                values[i] = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws RunnerException {\r\n        Options opt = new OptionsBuilder()\r\n                .include(JdkBenchmarks.class.getSimpleName())\r\n                .forks(1)\r\n                .warmupIterations(5)\r\n                .measurementIterations(5)\r\n                .build();\r\n\r\n        new Runner(opt).run();\r\n    }\r\n}\r\n""]",0,1
"[""public class NestedPerf {\r\n\r\n  @State(Scope.Benchmark)\r\n  public static class StateData {\r\n    public static final List<Integer> outerLoop = IntStream.range(0, 32).boxed().toList();\r\n    public static final List<Integer> innerLoop = IntStream.range(0, 32).boxed().toList();\r\n  }\r\n\r\n  private static void runInNewPool(Runnable task) {\r\n    ForkJoinPool pool = new ForkJoinPool();\r\n    try {\r\n      pool.submit(task).join();\r\n    } finally {\r\n      pool.shutdown();\r\n    }\r\n  }\r\n\r\n  private static void innerParallelLoop() {\r\n    StateData.innerLoop.parallelStream().unordered().forEach(i -> {\r\n      try {\r\n        Thread.sleep(5);\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n    });\r\n  }\r\n\r\n  private static void innerSequentialLoop() {\r\n    StateData.innerLoop.stream().unordered().forEach(i -> {\r\n      try {\r\n        Thread.sleep(5);\r\n      } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingNewPool(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      runInNewPool(NestedPerf::innerParallelLoop);\r\n      bh.consume(i);\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingCommonPoolWithSequentialInner(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      innerSequentialLoop();\r\n      bh.consume(i);\r\n    });\r\n  }\r\n\r\n  @Benchmark\r\n  public void testingCommonPool(Blackhole bh) {\r\n    StateData.outerLoop.parallelStream().unordered().forEach(i -> {\r\n      innerParallelLoop();\r\n      bh.consume(i);\r\n    });\r\n  }\r\n}\r\n""]",0,1
"[""import javafx.scene.image.Image;\r\nimport javafx.scene.material.PhongMaterial;\r\nimport javafx.scene.shape.Sphere;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Text;\r\n\r\npublic class EarthSphere {\r\n    public static Sphere createEarthSphere() {\r\n        Sphere earthSphere = new Sphere(256);\r\n        PhongMaterial material = new PhongMaterial();\r\n        material.setDiffuseMap(new Image(EarthSphere.class.getResourceAsStream(""/images/earth2.jpg"")));\r\n        earthSphere.setMaterial(material);\r\n        return earthSphere;\r\n    }\r\n}\r\n""]",0,1
"[""public class Test extends Application {\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        Pane pane = new Pane();\r\n        \r\n        Button testButton = new Button(""Test"");\r\n        testButton.setStyle(""-fx-background-color: green;"");\r\n\r\n        pane.getChildren().add(testButton);\r\n        pane.setStyle(""-fx-background-color: red;"");\r\n\r\n        FadeTransition transition = new FadeTransition(Duration.millis(5000), pane);\r\n        transition.setFromValue(1.0);\r\n        transition.setToValue(0.0);\r\n        transition.setCycleCount(Timeline.INDEFINITE);\r\n        transition.setAutoReverse(true);\r\n        transition.play();\r\n\r\n        Scene scene = new Scene(pane, 500, 500);\r\n\r\n        stage.setMinWidth(500);\r\n        stage.setMinHeight(500);\r\n\r\n        stage.setTitle(""Test"");\r\n        stage.setResizable(false);\r\n\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.Graphics2D;\r\nimport java.awt.Font;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\npublic class Create_QR {\r\n    public static void main(String[] args) {\r\n        try {\r\n            String qrCodeData = ""This is the text"";\r\n            String filePath = ""C:\\Users\\Nirmalw\\Desktop\\Projects\\QR\\test\\test_img\\my_QR_with_text.png"";\r\n            String charset = ""UTF-8""; \r\n\r\n            Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();\r\n            hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n\r\n            BitMatrix matrix = new MultiFormatWriter().encode(new String(qrCodeData.getBytes(charset), charset),\r\n                    BarcodeFormat.QR_CODE, 500, 500, hintMap);\r\n\r\n            BufferedImage qrImage = MatrixToImageWriter.toBufferedImage(matrix);\r\n\r\n            // Add text to the image\r\n            Graphics2D g = qrImage.createGraphics();\r\n            g.setFont(new Font(""Arial"", Font.BOLD, 20));\r\n            g.drawString(""User: John Doe"", 20, 530); // Add user name\r\n            g.drawString(""Event: My Event"", 20, 560); // Add event name\r\n            g.dispose();\r\n\r\n            // Save the image with text\r\n            ImageIO.write(qrImage, ""PNG"", new File(filePath));\r\n\r\n            System.out.println(""QR Code with text created successfully!"");\r\n        } catch (Exception e) {\r\n            System.err.println(e);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public List<InsertOneModel<Document>> processPuzzles(List<Puzzle> puzzles) {\r\n    return puzzles.parallelStream()\r\n        .map(puzzle -> new InsertOneModel<>(Document.parse(gson.toJson(puzzle))))\r\n        .toList();\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.PropertyNamingStrategies;\r\n\r\npublic static String convertMapToJsonWithCamelCase(Map<String, String> fields) throws Exception {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);\r\n    return mapper.writeValueAsString(fields);\r\n}\r\n""]",0,1
"[""@Configuration\r\n@EnableWebSecurity\r\npublic class WebSecurityConfig  extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private DataSource dataSource;\r\n\r\n    @Autowired\r\n    private JwtTokenProvider jwtTokenProvider;\r\n\r\n    @Bean\r\n    public static PasswordEncoder passwordEncoder(){\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors().and()\r\n                .authorizeRequests()\r\n                .antMatchers(""/resources/**"", ""/error"", ""/api/user/**"").permitAll()\r\n                .antMatchers(""/api/admin/**"").hasRole(""ADMIN"")\r\n                .anyRequest().fullyAuthenticated()\r\n                .and()\r\n                .logout().permitAll()\r\n                .logoutRequestMatcher(new AntPathRequestMatcher(""/api/user/logout"", ""POST""))\r\n                .and()\r\n                .formLogin().loginPage(""/api/user/login"").and()\r\n                .httpBasic().and()\r\n                .csrf().disable();\r\n\r\n        http.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtTokenProvider));\r\n    }\r\n\r\n    @Autowired\r\n    public void configAuthentication(AuthenticationManagerBuilder authBuilder) throws Exception {\r\n        authBuilder.jdbcAuthentication()\r\n                .dataSource(dataSource)\r\n                .passwordEncoder(new BCryptPasswordEncoder())\r\n                .usersByUsernameQuery(""select username, password, enabled from usr01 where username=?"")\r\n                .authoritiesByUsernameQuery(""select username, role from usr01 where username=?"");\r\n    }\r\n\r\n    @Bean\r\n    public WebMvcConfigurer corsConfigurer(){\r\n        return new WebMvcConfigurer() {\r\n            @Override\r\n            public void addCorsMappings(CorsRegistry registry) {\r\n                registry.addMapping(""/**"").allowedOrigins(""*"").allowedMethods(""*"");\r\n            }\r\n        };\r\n    }\r\n\r\n    @Override\r\n    public void configure(WebSecurity web) throws Exception {\r\n        web.ignoring().antMatchers(""/resources/**"", ""/error"");\r\n    }\r\n}\r\n""]",0,1
"[""public strictfp class StrictfpExample {\r\n    public static void main(String[] args) {\r\n        double maxDouble = Double.MAX_VALUE;\r\n        double result = (maxDouble * 2) / 4;\r\n        System.out.println(""Result: "" + result);\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.invoke.MethodHandles;\r\nimport java.lang.invoke.VarHandle;\r\nimport java.nio.ByteBuffer;\r\nimport java.nio.LongBuffer;\r\n\r\npublic class LargeArray {\r\n    private static final VarHandle LONG_HANDLE;\r\n    private final ByteBuffer buffer;\r\n    private final LongBuffer longBuffer;\r\n\r\n    static {\r\n        try {\r\n            LONG_HANDLE = MethodHandles.byteArrayViewVarHandle(long[].class, java.nio.ByteOrder.nativeOrder());\r\n        } catch (NoSuchFieldException | IllegalAccessException e) {\r\n            throw new AssertionError(e);\r\n        }\r\n    }\r\n\r\n    public LargeArray(long size) {\r\n        buffer = ByteBuffer.allocateDirect((int) (size * Long.BYTES));\r\n        longBuffer = buffer.asLongBuffer();\r\n    }\r\n\r\n    public void set(long index, long value) {\r\n        LONG_HANDLE.set(buffer, index * Long.BYTES, value);\r\n    }\r\n\r\n    public long get(long index) {\r\n        return (long) LONG_HANDLE.get(buffer, index * Long.BYTES);\r\n    }\r\n}\r\n""]",0,1
"[""public BufferedImage rotateImage(BufferedImage img, double angle) {\r\n    int w = img.getWidth();\r\n    int h = img.getHeight();\r\n    BufferedImage rotatedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\r\n    Graphics2D g = rotatedImg.createGraphics();\r\n    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);\r\n    g.setBackground(new Color(255, 255, 255, 0));\r\n    g.clearRect(0, 0, w, h);\r\n    g.rotate(Math.toRadians(angle), w / 2, h / 2);\r\n    g.drawImage(img, 0, 0, null);\r\n    g.dispose();\r\n    return rotatedImg;\r\n}\r\n""]",0,1
"[""public static void main(String[] args) throws Exception {\r\n    try (org.graalvm.polyglot.Context context = org.graalvm.polyglot.Context.create()) {\r\n        String jsCode = ""console.log('Hello, GraalVM!');"";\r\n        context.eval(""js"", jsCode);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Scanner;\r\n\r\nclass SentenceProcessor {\r\n\r\n    public boolean isValidSentence(String sentence) {\r\n        return sentence.matches(""[a-zA-Z ]+"");\r\n    }\r\n\r\n    public String processSentence(String sentence) {\r\n        if (!isValidSentence(sentence)) {\r\n            return sentence + "" is an invalid sentence"";\r\n        }\r\n\r\n        String[] words = sentence.trim().split(""\\s+"");\r\n\r\n        if (words.length <= 2) {\r\n            return ""Invalid Length"";\r\n        }\r\n\r\n        String firstWord = words[0];\r\n        String lastWord = words[words.length - 1];\r\n        words[0] = lastWord;\r\n        words[words.length - 1] = firstWord;\r\n\r\n        for (int i = 1; i < words.length - 1; i++) {\r\n            words[i] = new StringBuilder(words[i]).reverse().toString();\r\n        }\r\n\r\n        return String.join("" "", words);\r\n    }\r\n}\r\n\r\npublic class UserInterface {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        System.out.println(""Enter the sentence"");\r\n        String input = sc.nextLine();\r\n\r\n        SentenceProcessor processor = new SentenceProcessor();\r\n        String result = processor.processSentence(input);\r\n\r\n        System.out.println(result);\r\n\r\n        sc.close();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class NewMain extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        ComboBox<String> comboBox = new ComboBox<>();\r\n        comboBox.getItems().addAll(""Option 1"", ""Option 2"", ""Option 3"");\r\n        comboBox.getStyleClass().add(""yellowed"");\r\n\r\n        comboBox.setStyle(""-fx-background-color: yellow;"");\r\n\r\n        VBox vbox = new VBox(comboBox);\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        scene.getStylesheets().add(NewMain.class.getResource(""test.css"").toExternalForm());\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n\r\ncss\r\n.combo-box.yellowed {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.combo-box-popup {\r\n    -fx-background-color: yellow;\r\n}\r\n\r\n.combo-box-popup .list-view {\r\n    -fx-background-color: yellow;\r\n}\r\n""]",0,1
"[""package app.components;\r\n\r\nimport java.io.IOException;\r\n\r\nimport app.Main;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.StackPane;\r\n\r\npublic class Custom extends StackPane {\r\n\r\n    @FXML private Button plusBtn;\r\n    @FXML private Button minusBtn;\r\n    @FXML private Label label;\r\n\r\n    public Custom() {\r\n        FXMLLoader loader = new FXMLLoader(Main.class.getResource(""components/Custom.fxml""));\r\n        loader.setRoot(this);\r\n        loader.setController(this);\r\n        try {\r\n            loader.load();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void newText(String text) {\r\n        label.setText(text);\r\n    }\r\n}\r\n\r\nxml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane xmlns=""http://javafx.com/javafx/19"" xmlns:fx=""http://javafx.com/fxml/1"">\r\n   <children>\r\n      <Button fx:id=""plusBtn"" mnemonicParsing=""false"" text=""+"" />\r\n      <Label fx:id=""label"" text=""Label"" />\r\n      <Button fx:id=""minusBtn"" mnemonicParsing=""false"" text=""-"" />\r\n   </children>\r\n</StackPane>\r\n""]",0,1
"[""''java\r\npackage application;\r\n\r\nimport javafx.animation.KeyFrame;\r\nimport javafx.animation.Timeline;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\npublic class Main extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        try {\r\n            BorderPane root = new BorderPane();\r\n            Scene scene = new Scene(root, 400, 400);\r\n            StackPane stack = new StackPane();\r\n\r\n            Text text = new Text(""Hello there StackOverflow, how are you? (:"");\r\n            text.setFont(Font.font(16));\r\n            stack.getChildren().add(text);\r\n            root.getChildren().add(stack);\r\n\r\n            Color color1 = Color.RED;\r\n            Color color2 = Color.BLUE;\r\n            \r\n            Timeline timeline = new Timeline(\r\n                new KeyFrame(Duration.seconds(0), e -> text.setFill(color1)),\r\n                new KeyFrame(Duration.seconds(2), e -> text.setFill(color2))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.play();\r\n\r\n            primaryStage.setScene(scene);\r\n            primaryStage.show();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n'''""]",0,1
"[""''java\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.core.env.Environment;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@Configuration\r\npublic class PropertyService {\r\n\r\n    @Autowired\r\n    private Environment environment;\r\n\r\n    public Map<String, String> getPropertiesByPrefix(String prefix) {\r\n        Map<String, String> properties = new HashMap<>();\r\n        for (String property : environment.getPropertyNames()) {\r\n            if (property.startsWith(prefix)) {\r\n                String key = property.substring(prefix.length() + 1);\r\n                String value = environment.getProperty(property);\r\n                properties.put(key, value);\r\n            }\r\n        }\r\n        return properties;\r\n    }\r\n}\r\n'''""]",0,1
"[""import okhttp3.*;\r\nimport java.io.IOException;\r\n\r\npublic class OAuth2Example {\r\n\r\n    private static final String TOKEN_URL = ""https://example.com/oauth2/token"";\r\n    private static final String CLIENT_ID = ""your-client-id"";\r\n    private static final String CLIENT_SECRET = ""your-client-secret"";\r\n    private static final String SCOPE = ""your-scope"";\r\n    private static final String GRANT_TYPE = ""client_credentials"";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        String token = getOAuth2Token();\r\n        String response = makeApiRequest(token);\r\n        System.out.println(response);\r\n    }\r\n\r\n    public static String getOAuth2Token() throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n        \r\n        RequestBody body = new FormBody.Builder()\r\n            .add(""grant_type"", GRANT_TYPE)\r\n            .add(""client_id"", CLIENT_ID)\r\n            .add(""client_secret"", CLIENT_SECRET)\r\n            .add(""scope"", SCOPE)\r\n            .build();\r\n        \r\n        Request request = new Request.Builder()\r\n            .url(TOKEN_URL)\r\n            .post(body)\r\n            .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                String responseBody = response.body().string();\r\n                // Extract token from response (depends on response format)\r\n                // Assuming it's in JSON format like {""access_token"": ""your_token""}\r\n                return responseBody; // You should parse the token from the response\r\n            } else {\r\n                throw new IOException(""Failed to get token: "" + response.message());\r\n            }\r\n        }\r\n    }\r\n\r\n    public static String makeApiRequest(String token) throws IOException {\r\n        OkHttpClient client = new OkHttpClient();\r\n\r\n        Request request = new Request.Builder()\r\n            .url(""https://example.com/api/resource"")\r\n            .header(""Authorization"", ""Bearer "" + token)\r\n            .build();\r\n\r\n        try (Response response = client.newCall(request).execute()) {\r\n            if (response.isSuccessful()) {\r\n                return response.body().string();\r\n            } else {\r\n                throw new IOException(""API request failed: "" + response.message());\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class GoogleMapEmbed extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        WebView webView = new WebView();\r\n        WebEngine webEngine = webView.getEngine();\r\n\r\n        String mapHtml = """";\r\n        try {\r\n            File myObj = new File(System.getProperty(""user.dir"") + ""/src/main/resources/embeddedMap.html"");\r\n            Scanner myReader = new Scanner(myObj);\r\n            while (myReader.hasNextLine()) {\r\n                mapHtml += myReader.nextLine();\r\n                mapHtml += ""\n"";\r\n            }\r\n            myReader.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        webEngine.loadContent(mapHtml);\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(webView);\r\n        \r\n        Scene scene = new Scene(root, 800, 600);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Google Map Embed"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""import com.github.javaparser.StaticJavaParser;\r\nimport com.github.javaparser.ast.CompilationUnit;\r\nimport com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;\r\nimport com.github.javaparser.ast.body.MethodDeclaration;\r\nimport com.github.javaparser.ast.expr.FieldAccessExpr;\r\nimport com.github.javaparser.ast.expr.AssignExpr;\r\nimport com.github.javaparser.ast.expr.UnaryExpr;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\n\r\npublic class FieldAccessList {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        File sourceFile = new File(""Example.java"");\r\n        CompilationUnit cu = StaticJavaParser.parse(sourceFile);\r\n\r\n        cu.findAll(ClassOrInterfaceDeclaration.class).forEach(classDeclaration -> {\r\n            System.out.println(""Class: "" + classDeclaration.getNameAsString());\r\n\r\n            classDeclaration.findAll(MethodDeclaration.class).forEach(methodDeclaration -> {\r\n                System.out.println(""  Method: "" + methodDeclaration.getNameAsString());\r\n\r\n                methodDeclaration.findAll(FieldAccessExpr.class).forEach(fieldAccessExpr -> {\r\n                    String fieldName = fieldAccessExpr.getNameAsString();\r\n                    if (fieldAccessExpr.getParentNode().isPresent() && fieldAccessExpr.getParentNode().get() instanceof AssignExpr) {\r\n                        System.out.println(""    Write Access: "" + fieldName);\r\n                    } else if (fieldAccessExpr.getParentNode().isPresent() && fieldAccessExpr.getParentNode().get() instanceof UnaryExpr) {\r\n                        System.out.println(""    Write Access: "" + fieldName);\r\n                    } else {\r\n                        System.out.println(""    Read Access: "" + fieldName);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import com.sun.source.tree.*;\r\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\r\nimport com.sun.tools.javac.tree.JCTree;\r\nimport com.sun.tools.javac.util.Context;\r\n\r\nimport javax.annotation.processing.Processor;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.type.TypeMirror;\r\n\r\npublic class SwitchExpressionTypeFinder {\r\n\r\n    public TypeMirror getSwitchExpressionType(SwitchTree switchTree) {\r\n        ExpressionTree switchTreeExpression = switchTree.getExpression();\r\n        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\r\n        JCTree tree = (JCTree) switchTreeExpression;\r\n        return tree.type;\r\n    }\r\n}\r\n""]",0,1
"[""@FXML\r\nprivate void initialize() {\r\n    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(PATH_TO_FXML));\r\n    fxmlLoader.setControllerFactory(applicationContext::getBean);\r\n    VBox listItem = fxmlLoader.load();\r\n    contentArea.getChildren().add(listItem);\r\n}\r\n\r\n@Bean\r\n@Scope(""prototype"")\r\npublic MyController myController() {\r\n    return new MyController();\r\n}\r\n""]",0,1
"[""public void createScatterChart(){\r\n    final NumberAxis xAxis = new NumberAxis();\r\n    final NumberAxis yAxis = new NumberAxis();\r\n\r\n    final ScatterChart<Number, Number> scatterChart = new ScatterChart<>(xAxis, yAxis);\r\n\r\n    XYChart.Series<Number, Number> series1 = new XYChart.Series<>();\r\n\r\n    for (int i = 0; i < this.r.size(); i++) {\r\n        series1.getData().add(new XYChart.Data<>(this.r.get(i) * Math.cos(Math.toRadians(this.nodes.get(i))),\r\n                                                  this.r.get(i) * Math.sin(Math.toRadians(this.nodes.get(i)))));\r\n    }\r\n\r\n    scatterChart.getData().add(series1);\r\n    Stage stage = new Stage();\r\n    Scene scene = new Scene(scatterChart, 800, 600);\r\n\r\n    stage.setScene(scene);\r\n    stage.show();\r\n}\r\n""]",0,1
"[""public class BottomSheetDialog extends BottomSheetDialogFragment {\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, @Nullable\r\n    ViewGroup container, @Nullable Bundle savedInstanceState)\r\n    {\r\n        View v = inflater.inflate(R.layout.buttom_sheet_layout, container, false);\r\n\r\n        // Set height to match parent\r\n        ViewGroup.LayoutParams layoutParams = v.getLayoutParams();\r\n        layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;\r\n        v.setLayoutParams(layoutParams);\r\n\r\n        return v;\r\n    }\r\n\r\n}\r\n""]",0,1
"[""public String transform(List<CustomObject> listOfObjects) {\r\n    return listOfObjects.stream()\r\n            .filter(object -> object.objectType().equals(""BUSINESS""))\r\n            .filter(object -> object.objectStatus().equals(""ACTIVE""))\r\n            .filter(object -> object.locale().equals(""en-US""))\r\n            .findFirst()\r\n            .map(CustomObject::getUrl)\r\n            .orElseGet(() -> listOfObjects.stream()\r\n                .filter(object -> object.objectType().equals(""BUSINESS""))\r\n                .sorted(Comparator.comparing(CustomObject::url))\r\n                .findFirst()\r\n                .get()\r\n                .getUrl());\r\n}\r\n""]",0,1
"[""public class ExampleApp extends Application {\r\n\r\n    public static void main(String[] args) {\r\n        launch();\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        var r = new AnimatedRect(200, 200);\r\n        r.setStyle(""-color1: green; -color2: orange;"");\r\n\r\n        var scene = new Scene(new BorderPane(r), 200, 200);\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    static class AnimatedRect extends Rectangle {\r\n\r\n        SimpleObjectProperty<Timeline> timeline = new SimpleObjectProperty<>();\r\n        final StyleableObjectProperty<Paint> color1 = new SimpleStyleableObjectProperty<>(\r\n                StyleableProperties.COLOR1, AnimatedRect.this, ""-color1"", Color.RED);\r\n        final StyleableObjectProperty<Paint> color2 = new SimpleStyleableObjectProperty<>(\r\n                StyleableProperties.COLOR2, AnimatedRect.this, ""-color2"", Color.BLUE);\r\n\r\n        public AnimatedRect(double width, double height) {\r\n            super(width, height);\r\n            setFill(color1.get());\r\n\r\n            color1.addListener((obs, o, v) -> updateTimeline());\r\n            color2.addListener((obs, o, v) -> updateTimeline());\r\n\r\n            sceneProperty().addListener((obs, o, n) -> {\r\n                if (n != null) timeline.get().play();\r\n                else timeline.get().stop();\r\n            });\r\n        }\r\n\r\n        private void updateTimeline() {\r\n            if (timeline.get() != null) timeline.get().stop();\r\n            timeline.set(createTimeline());\r\n            timeline.get().play();\r\n        }\r\n\r\n        private Timeline createTimeline() {\r\n            var timeline = new Timeline(\r\n                    new KeyFrame(Duration.millis(0), new KeyValue(fillProperty(), color1.getValue(), LINEAR)),\r\n                    new KeyFrame(Duration.millis(1000), new KeyValue(fillProperty(), color2.getValue(), LINEAR))\r\n            );\r\n            timeline.setCycleCount(Timeline.INDEFINITE);\r\n            timeline.setAutoReverse(false);\r\n            return timeline;\r\n        }\r\n\r\n        static class StyleableProperties {\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR1 = new CssMetaData<>(\r\n                    ""-color1"", PaintConverter.getInstance(), Color.RED) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color1.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color1;\r\n                }\r\n            };\r\n\r\n            private static final CssMetaData<AnimatedRect, Paint> COLOR2 = new CssMetaData<>(\r\n                    ""-color2"", PaintConverter.getInstance(), Color.BLUE) {\r\n                @Override\r\n                public boolean isSettable(AnimatedRect c) {\r\n                    return !c.color2.isBound();\r\n                }\r\n\r\n                @Override\r\n                public StyleableProperty<Paint> getStyleableProperty(AnimatedRect c) {\r\n                    return c.color2;\r\n                }\r\n            };\r\n\r\n            private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\r\n\r\n            static {\r\n                final List<CssMetaData<? extends Styleable, ?>> styleables = new ArrayList<>(Rectangle.getClassCssMetaData());\r\n                styleables.add(COLOR1);\r\n                styleables.add(COLOR2);\r\n                STYLEABLES = Collections.unmodifiableList(styleables);\r\n            }\r\n        }\r\n\r\n        public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\r\n            return StyleableProperties.STYLEABLES;\r\n        }\r\n\r\n        @Override\r\n        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\r\n            return getClassCssMetaData();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@GetMapping(path = ""/file"", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\r\npublic ResponseEntity<InputStreamResource> getSpecificFile(@RequestParam String fileName,\r\n        @RequestParam String bucketName, @RequestParam String projectName) {\r\n    Storage storage = StorageOptions.newBuilder().setProjectId(projectId).build().getService();\r\n    Blob blob = storage.get(bucketName, fileName);\r\n    ReadChannel readChannel = blob.reader();\r\n\r\n    try {\r\n        String contentType = Files.probeContentType(Paths.get(fileName));\r\n        InputStreamResource inputStreamResource = new InputStreamResource(Channels.newInputStream(readChannel));\r\n        return ResponseEntity.ok().contentType(MediaType.valueOf(contentType))\r\n                .header(""Content-Disposition"", ""attachment; filename="" + fileName)\r\n                .body(inputStreamResource);\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n        return ResponseEntity.internalServerError().body(null);\r\n    }\r\n}\r\n""]",0,1
"[""public class MyEntityListenerTest {\r\n\r\n    @Autowired\r\n    myEntityRepository repo;\r\n\r\n    @MockBean\r\n    private myEntityListener entityListener;\r\n\r\n    @Test\r\n    public void myListenerTest() throws Exception {\r\n        String expected = ""fake-text"";\r\n        Mockito.when(entityListener.doThis()).thenReturn(expected);\r\n\r\n        myEntity e = new myEntity();\r\n        repo.save(e);\r\n\r\n        assertThat(e.getSomething()).isEqualTo(expected);\r\n    }\r\n}\r\n""]",0,1
"[""public List<int[]> patternSearch(int[][] T, int[][] P) {\r\n    List<int[]> result = new ArrayList<>();\r\n    int m = T.length, n = T[0].length;\r\n    int u = P.length, v = P[0].length;\r\n\r\n    for (int i = 0; i <= m - u; i++) {\r\n        for (int j = 0; j <= n - v; j++) {\r\n            boolean match = true;\r\n            for (int x = 0; x < u; x++) {\r\n                for (int y = 0; y < v; y++) {\r\n                    if (P[x][y] != 0 && P[x][y] != T[i + x][j + y]) {\r\n                        match = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!match) break;\r\n            }\r\n            if (match) result.add(new int[]{i, j});\r\n        }\r\n    }\r\n    return result;\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class LocaleConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new LocaleInterceptor()).addPathPatterns(""/**"");\r\n    }\r\n\r\n    public class LocaleInterceptor implements HandlerInterceptor {\r\n        private final Set<String> allowedLocales = new HashSet<>(Arrays.asList(""en"", ""hi""));\r\n\r\n        @Override\r\n        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\r\n            String localeParam = request.getParameter(""locale"");\r\n            if (localeParam != null && !allowedLocales.contains(localeParam)) {\r\n                throw new IllegalArgumentException(""Invalid locale: "" + localeParam);\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.reflect.Constructor;\r\n\r\npublic class ReflectionExample {\r\n    public static void main(String[] args) throws Exception {\r\n        Constructor<Parent> constructor = Parent.class.getDeclaredConstructor();\r\n        constructor.setAccessible(true);\r\n        Parent parentInstance = constructor.newInstance();\r\n    }\r\n}\r\n\r\nclass Parent {\r\n    private Parent() {\r\n    }\r\n}\r\n""]",0,1
"[""import java.security.*;\r\nimport java.security.spec.*;\r\nimport java.util.Base64;\r\n\r\npublic class PrivateKeyExample {\r\n    public static PrivateKey getPrivateKey(String privateKey) throws Exception {\r\n        byte[] pkcs8EncodedBytes = Base64.getDecoder().decode(privateKey);\r\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(pkcs8EncodedBytes);\r\n\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""EdDSA"");\r\n        return keyFactory.generatePrivate(keySpec);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String privateKey = ""Y2E3YjYwYzRjMDRjMjk1ZDQ5ZTQzM2RlMTdjZjVkNGE0NGFjYzJmM2IzOWExNWZhMjViNGE4ZWJiZDBiMDVkYTIwNGU4MWE3ZWZmMTQ0NGE2ZmM2NjExNzRmNTY4M2I0YmYyMTk5YTkyY2UzOWRkZjdmMzhkNTFjYTNmM2Q3ZDU"";\r\n        PrivateKey pkey = getPrivateKey(privateKey);\r\n        System.out.println(pkey);\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.function.Function;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nclass MyClass {\r\n    ThreadLocal<AtomicInteger> counter = ThreadLocal.withInitial(AtomicInteger::new);\r\n\r\n    public void entry(Function<?, ?> callback) {\r\n        counter.get().set(10);\r\n        try {\r\n            I_need_a_timeout(callback, 110, 1000); // timeout after 1000 ms\r\n        } catch (TimeoutException e) {\r\n            System.out.println(""Timeout reached"");\r\n        }\r\n        int result = counter.get().get();\r\n        System.out.println(result);\r\n    }\r\n\r\n    private void I_need_a_timeout(Function<?, ?> callback, int loop, long timeoutMillis) throws TimeoutException {\r\n        ExecutorService executor = Executors.newSingleThreadExecutor();\r\n        Callable<Void> task = () -> {\r\n            while (loop-- >= 0) {\r\n                counter.get().incrementAndGet();\r\n                callback.apply(null);\r\n            }\r\n            return null;\r\n        };\r\n\r\n        Future<Void> future = executor.submit(task);\r\n        try {\r\n            future.get(timeoutMillis, TimeUnit.MILLISECONDS);\r\n        } catch (TimeoutException e) {\r\n            future.cancel(true);\r\n            throw e;\r\n        } catch (InterruptedException | ExecutionException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            executor.shutdownNow();\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import io.opentelemetry.api.trace.*;\r\nimport io.opentelemetry.context.Context;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\npublic class ETLPipeline {\r\n    private final Tracer tracer;\r\n\r\n    public ETLPipeline(Tracer tracer) {\r\n        this.tracer = tracer;\r\n    }\r\n\r\n    public void executeStep(DataPackage obj, String processorName) {\r\n        byte[] traceIdBytes = obj.getUniqueId().getBytes();\r\n        byte[] paddedArray = new byte[16];\r\n        System.arraycopy(traceIdBytes, 0, paddedArray, 16 - traceIdBytes.length, traceIdBytes.length);\r\n\r\n        SpanContext spanContext = SpanContext.create(\r\n                TraceId.fromBytes(paddedArray),\r\n                SpanId.fromBytes(paddedArray),\r\n                TraceFlags.getDefault(),\r\n                TraceState.getDefault()\r\n        );\r\n\r\n        Span parentSpan = Span.wrap(spanContext);\r\n        Context context = Context.root().with(parentSpan);\r\n\r\n        Span span = tracer.spanBuilder(""Step1"")\r\n                .setParent(context)\r\n                .startSpan();\r\n\r\n        CompletableFuture.runAsync(() -> {\r\n            try {\r\n                // ETL Step code here\r\n            } catch (Exception e) {\r\n                span.recordException(e);\r\n            } finally {\r\n                span.end();\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""class LRUCache {\r\n    int capacity;\r\n    Map<Integer, Integer> map;\r\n    Map<Integer, DoublyLinkedNode> nodeMap;\r\n    DoublyLinkedNode head, tail;\r\n\r\n    public LRUCache(int capacity) {\r\n        this.capacity = capacity;\r\n        map = new HashMap<>();\r\n        nodeMap = new HashMap<>();\r\n        head = new DoublyLinkedNode(-1, -1);\r\n        tail = new DoublyLinkedNode(-1, -1);\r\n        head.next = tail;\r\n        tail.prev = head;\r\n    }\r\n\r\n    public int get(int key) {\r\n        if (map.containsKey(key)) {\r\n            moveToHead(key);\r\n            return map.get(key);\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public void put(int key, int value) {\r\n        if (map.containsKey(key)) {\r\n            map.put(key, value);\r\n            moveToHead(key);\r\n        } else {\r\n            if (map.size() >= capacity) {\r\n                removeLRU();\r\n            }\r\n            map.put(key, value);\r\n            addNodeToHead(key);\r\n        }\r\n    }\r\n\r\n    private void moveToHead(int key) {\r\n        DoublyLinkedNode node = nodeMap.get(key);\r\n        removeNode(node);\r\n        addNodeToHead(node);\r\n    }\r\n\r\n    private void removeLRU() {\r\n        DoublyLinkedNode node = tail.prev;\r\n        removeNode(node);\r\n        map.remove(node.key);\r\n    }\r\n\r\n    private void addNodeToHead(int key) {\r\n        DoublyLinkedNode node = new DoublyLinkedNode(key, map.get(key));\r\n        nodeMap.put(key, node);\r\n        node.next = head.next;\r\n        node.prev = head;\r\n        head.next.prev = node;\r\n        head.next = node;\r\n    }\r\n\r\n    private void removeNode(DoublyLinkedNode node) {\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    }\r\n\r\n    class DoublyLinkedNode {\r\n        int key, value;\r\n        DoublyLinkedNode prev, next;\r\n\r\n        public DoublyLinkedNode(int key, int value) {\r\n            this.key = key;\r\n            this.value = value;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.awt.*;\r\nimport java.awt.event.*;\r\nimport javax.swing.*;\r\n\r\nclass Surface extends JPanel implements ActionListener, KeyListener {\r\n    private final int DELAY = 8;\r\n    private Timer timer;\r\n    private Image image;\r\n    private int x, y;\r\n    private final int MOVE_AMOUNT = 5;\r\n    public final int width = 800;\r\n    public final int length = 600;\r\n    private boolean upPressed, downPressed, leftPressed, rightPressed;\r\n\r\n    public Surface() {\r\n        setDoubleBuffered(true);\r\n        initTimer();\r\n        loadImage();\r\n        setFocusable(true);\r\n        requestFocusInWindow();\r\n        addKeyListener(this);\r\n\r\n        x = 200;\r\n        y = 200;\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    public Rectangle getRedDotBounds() {\r\n        return new Rectangle(x, y, image.getWidth(this), image.getHeight(this));\r\n    }\r\n\r\n    private void initTimer() {\r\n        timer = new Timer(DELAY, this);\r\n        timer.start();\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_red_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 75;\r\n        int newHeight = 75;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        drawImage(g);\r\n    }\r\n\r\n    private void drawImage(Graphics g) {\r\n        g.drawImage(image, x, y, this);\r\n    }\r\n\r\n    public Timer getTimer() {\r\n        return timer;\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        updatePosition();\r\n        repaint();\r\n    }\r\n\r\n    private void updatePosition() {\r\n        if (leftPressed) {\r\n            x = Math.max(x - MOVE_AMOUNT, 0);\r\n        }\r\n        if (rightPressed) {\r\n            x = Math.min(x + MOVE_AMOUNT, getWidth() - image.getWidth(this));\r\n        }\r\n        if (upPressed) {\r\n            y = Math.max(y - MOVE_AMOUNT, 0);\r\n        }\r\n        if (downPressed) {\r\n            y = Math.min(y + MOVE_AMOUNT, getHeight() - image.getHeight(this));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = true;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = true;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = true;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = true;\r\n                break;\r\n        }\r\n\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n        int key = e.getKeyCode();\r\n\r\n        switch (key) {\r\n            case KeyEvent.VK_LEFT:\r\n                leftPressed = false;\r\n                break;\r\n            case KeyEvent.VK_RIGHT:\r\n                rightPressed = false;\r\n                break;\r\n            case KeyEvent.VK_UP:\r\n                upPressed = false;\r\n                break;\r\n            case KeyEvent.VK_DOWN:\r\n                downPressed = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n    }\r\n}\r\n\r\nclass BlueDot extends JPanel implements ActionListener {\r\n    private int x, y;\r\n    private Image image;\r\n    private final int DOT_SIZE = 10;\r\n    private final int FALL_SPEED = 1;\r\n    private Timer timer;\r\n    private int n = 0;\r\n\r\n    public BlueDot() {\r\n        setDoubleBuffered(true);\r\n        setPreferredSize(new Dimension(500, 500));\r\n        x = (int) (Math.random() * 500);\r\n        y = 0;\r\n        loadImage();\r\n        timer = new Timer(10, this);\r\n        timer.start();\r\n    }\r\n\r\n    private Image resizeImage(Image originalImage, int newWidth, int newHeight) {\r\n        return originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);\r\n    }\r\n\r\n    private void loadImage() {\r\n        ImageIcon ii = new ImageIcon(""Basic_blue_dot.png"");\r\n        if (ii.getImageLoadStatus() == MediaTracker.ERRORED) {\r\n            System.out.println(""Image failed to load."");\r\n        }\r\n        Image originalImage = ii.getImage();\r\n        int newWidth = 50;\r\n        int newHeight = 50;\r\n        image = resizeImage(originalImage, newWidth, newHeight);\r\n    }\r\n\r\n    public Rectangle getBlueDotBounds() {\r\n        return new Rectangle(x, y, DOT_SIZE, DOT_SIZE);\r\n    }\r\n\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        g.drawImage(image, x, y, DOT_SIZE, DOT_SIZE, this);\r\n    }\r\n\r\n    public void actionPerformed(ActionEvent e) {\r\n        y += FALL_SPEED;\r\n        if (y > getHeight()) {\r\n            n++;\r\n            System.out.println(""reset"" + n);\r\n            x = (int) (Math.random() * 500);\r\n            y = 0;\r\n        }\r\n    }\r\n}\r\n\r\npublic class MyProgram {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            public void run() {\r\n                JFrame frame = new JFrame();\r\n                frame.setTitle(""Image Display"");\r\n                frame.setSize(800, 600);\r\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n                Surface surface = new Surface();\r\n                BlueDot blueDot = new BlueDot();\r\n\r\n                frame.setLayout(null);\r\n\r\n                surface.setBounds(0, 0, 800, 600);\r\n                frame.add(surface);\r\n\r\n                blueDot.setBounds(0, 0, 800, 600);\r\n                frame.add(blueDot);\r\n\r\n                frame.setLocationRelativeTo(null);\r\n                frame.setVisible(true);\r\n\r\n                surface.requestFocusInWindow();\r\n                frame.addWindowListener(new WindowAdapter() {\r\n                    @Override\r\n                    public void windowOpened(WindowEvent e) {\r\n                        surface.requestFocusInWindow();\r\n                    }\r\n                });\r\n\r\n                Timer collisionTimer = new Timer(10, new ActionListener() {\r\n                    public void actionPerformed(ActionEvent e) {\r\n                        Rectangle redBounds = surface.getRedDotBounds();\r\n                        Rectangle blueBounds = blueDot.getBlueDotBounds();\r\n\r\n                        if (redBounds.intersects(blueBounds)) {\r\n                            System.out.println(""Collision!!!!"");\r\n                        }\r\n                    }\r\n                });\r\n                collisionTimer.start();\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""public class GeneratorTemplate {\r\n    private static final AtomicLong COUNTER = new AtomicLong(0);\r\n\r\n    public static String generateTemplate() {\r\n        long currentValue = COUNTER.getAndIncrement();\r\n        return String.format(""%04X-7%03X-%04X"", (currentValue >> 32) & 0xFFFF, (currentValue >> 16) & 0xFFF, currentValue & 0xFFFF).toLowerCase();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        for (int i = 0; i < 3; i++) {\r\n            System.out.println(generateTemplate());\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.converter.DoubleStringConverter;\r\nimport java.text.DecimalFormat;\r\nimport java.util.regex.Pattern;\r\nimport java.util.function.UnaryOperator;\r\n\r\npublic class TestPane extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Double> spinner = new Spinner<>();\r\n        SpinnerValueFactory<Double> valueFactory = new SpinnerValueFactory.DoubleSpinnerValueFactory(-20.00, 20.00, 0.00, 0.25);\r\n        spinner.setValueFactory(valueFactory);\r\n\r\n        TextField editor = spinner.getEditor();\r\n        DecimalFormat format = new DecimalFormat(""+#0.00;-#0.00"");\r\n\r\n        Pattern validDoubleText = Pattern.compile(""[+-]?\\d{0,2}(\\,\\d{0,2})?"");\r\n        UnaryOperator<TextFormatter.Change> filter = c -> {\r\n            String newText = c.getControlNewText();\r\n            if (validDoubleText.matcher(newText).matches()) {\r\n                return c;\r\n            } else {\r\n                return null;\r\n            }\r\n        };\r\n\r\n        TextFormatter<Double> textFormatter = new TextFormatter<>(new DoubleStringConverter(), 0.00, filter);\r\n        editor.setTextFormatter(textFormatter);\r\n\r\n        spinner.valueProperty().addListener((obs, oldValue, newValue) -> {\r\n            editor.setText(format.format(newValue));\r\n        });\r\n\r\n        StackPane root = new StackPane();\r\n        root.getChildren().add(spinner);\r\n\r\n        Scene scene = new Scene(root, 300, 250);\r\n        primaryStage.setTitle(""Spinner Example"");\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""@Bean\r\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n    CustomAuthenticationFilter customAuthenticationFilter = new CustomAuthenticationFilter(authenticationManagerBean(), accessTokenExpiredInDays, refreshTokenExpiredInDays, jwtSecret);\r\n    customAuthenticationFilter.setFilterProcessesUrl(""/api/login"");\r\n\r\n    http.csrf().disable()\r\n        .sessionManagement()\r\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n        .authorizeRequests()\r\n            .antMatchers(""/error"").permitAll()\r\n            .antMatchers(""/api/login/**"", ""/api/token/refresh/**"").permitAll()\r\n            .anyRequest().authenticated()\r\n        .addFilter(customAuthenticationFilter)\r\n        .addFilterBefore(new CustomAuthorizationFilter(jwtSecret), UsernamePasswordAuthenticationFilter.class);\r\n\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\npublic AuthenticationManager authenticationManagerBean() throws Exception {\r\n    return authenticationManager();\r\n}\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n""]",0,1
"[""private static SSLSocketFactory createSslSocketFactory(\r\n        String caCertPath, String caCertPassword, String userCertPath, String userCertPassword)\r\n        throws IOException, GeneralSecurityException {\r\n\r\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    keyStore.load(new FileInputStream(userCertPath), userCertPassword.toCharArray());\r\n\r\n    KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\r\n    trustStore.load(new FileInputStream(caCertPath), caCertPassword.toCharArray());\r\n\r\n    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(""SunX509"");\r\n    trustManagerFactory.init(trustStore);\r\n\r\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""SunX509"");\r\n    keyManagerFactory.init(keyStore, userCertPassword.toCharArray());\r\n\r\n    SSLContext sslContext = SSLContext.getInstance(""TLS"");\r\n    sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);\r\n\r\n    return sslContext.getSocketFactory();\r\n}\r\n""]",0,1
"[""@Override\r\npublic void visitCode() {\r\n    super.visitCode();\r\n    instrument();\r\n    mv.visitInsn(Opcodes.ICONST_0);\r\n    mv.visitInsn(Opcodes.ISTORE);\r\n}\r\n""]",0,1
"[""@SupportedAnnotationTypes({""com.company.generator.GenerateAnnotation""})\r\n@AutoService(Processor.class)\r\npublic class EnumAnnotationProcessor extends AbstractProcessor {\r\n\r\n    private static final Map<String, TypeElement> generatedEnumTypes = new HashMap<>();\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\r\n        if (roundEnv.processingOver()) {\r\n            return false;\r\n        }\r\n\r\n        annotations.forEach(annotation -> {\r\n            roundEnv.getElementsAnnotatedWith(annotation).forEach(element -> {\r\n                if (element.getKind() == ElementKind.ENUM) {\r\n                    generateAnnotationForEnum((TypeElement) element);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (!roundEnv.getElementsAnnotatedWith(MyEnumAnnotation.class).isEmpty()) {\r\n            generateCodeBasedOnEnumAnnotations(roundEnv);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private void generateAnnotationForEnum(TypeElement enumElement) {\r\n        String enumName = enumElement.getSimpleName().toString();\r\n        // Generate @MyEnumAnnotation for the enum and store it in generatedEnumTypes\r\n        TypeElement generatedAnnotation = createGeneratedAnnotation(enumName);\r\n        generatedEnumTypes.put(enumName, generatedAnnotation);\r\n    }\r\n\r\n    private TypeElement createGeneratedAnnotation(String enumName) {\r\n        // Implement code to generate annotation and return TypeElement\r\n        return null; // Placeholder for actual implementation\r\n    }\r\n\r\n    private void generateCodeBasedOnEnumAnnotations(RoundEnvironment roundEnv) {\r\n        roundEnv.getElementsAnnotatedWith(MyEnumAnnotation.class).forEach(element -> {\r\n            // Generate code based on @MyEnumAnnotation\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""public class Response {\r\n\r\n    @JsonProperty(""count"")\r\n    private int totalCount;\r\n\r\n    @JsonProperty(""respCode"")\r\n    private int responseCode;\r\n\r\n    @JsonProperty(""payLoad"")\r\n    private List<String> transactionsList;\r\n\r\n    public List<String> getTransactionsList() {\r\n        return transactionsList;\r\n    }\r\n\r\n    public void setTransactionsList(List<String> transactionsList) {\r\n        this.transactionsList = transactionsList;\r\n    }\r\n}\r\n\r\npublic void transactionsReceived() throws JsonProcessingException {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\r\n    Response responseRcvd = objectMapper.readValue(jsonString, Response.class);\r\n}\r\n""]",0,1
"[""import com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.databind.DeserializationContext;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.util.Date;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class StringToDateDeserializerTest {\r\n\r\n    @Test\r\n    public void testDeserialize() throws IOException, ParseException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser mockParser = Mockito.mock(JsonParser.class);\r\n        DeserializationContext mockContext = Mockito.mock(DeserializationContext.class);\r\n\r\n        String testDate = ""2025-03-17T00:00:00Z"";\r\n        Mockito.when(mockParser.getText()).thenReturn(testDate);\r\n\r\n        Date expectedDate = new StdDateFormat().parse(testDate);\r\n\r\n        Date result = deserializer.deserialize(mockParser, mockContext);\r\n\r\n        assertEquals(expectedDate, result);\r\n    }\r\n\r\n    @Test\r\n    public void testDeserializeInvalidDate() throws IOException {\r\n        StringToDateDeserializer deserializer = new StringToDateDeserializer();\r\n        JsonParser mockParser = Mockito.mock(JsonParser.class);\r\n        DeserializationContext mockContext = Mockito.mock(DeserializationContext.class);\r\n\r\n        String invalidDate = ""invalid-date"";\r\n        Mockito.when(mockParser.getText()).thenReturn(invalidDate);\r\n\r\n        MyCustomException exception = assertThrows(MyCustomException.class, () -> {\r\n            deserializer.deserialize(mockParser, mockContext);\r\n        });\r\n\r\n        assertEquals(""Invalid date passed, ISO 8601 is expected"", exception.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""package gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Component\r\npublic class Company {\r\n    String name;\r\n    String motive;\r\n\r\n    @Value(""Adventure of War"")\r\n    public void setName(String name) {\r\n        System.out.println(""Setting Company Name"");\r\n        this.name = name;\r\n    }\r\n\r\n    @Value(""A place for War"")\r\n    public void setMotive(String motive) {\r\n        System.out.println(""Setting Company Motive"");\r\n        this.motive = motive;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return ""Company{"" +\r\n                ""name='"" + name + '\'' +\r\n                "", motive='"" + motive + '\'' +\r\n                '}';\r\n    }\r\n}\r\n\r\npackage gd.rf.anuragsaini.stereotype;\r\n\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\n\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        ApplicationContext IOC = new AnnotationConfigApplicationContext(Company.class);\r\n        Company c1 = IOC.getBean(Company.class);\r\n        System.out.println(c1);\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService customUserDetailsService() {\r\n        return new CustomUserDetailsService(userRepository);\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager inMemoryUserDetailsService() {\r\n        UserDetails healthUser = User.withUsername(specialUser.getId())\r\n                .password(passwordEncoder().encode(specialUser.getPassword()))\r\n                .roles(""SPECIALROLE"")\r\n                .build();\r\n        return new InMemoryUserDetailsManager(healthUser);\r\n    }\r\n\r\n    @Bean\r\n    @Order(1)\r\n    public SecurityFilterChain specialFilterChain(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n                .and()\r\n                .userDetailsService(inMemoryUserDetailsService())\r\n                .antMatcher(""/very-special-path/**"")\r\n                .authorizeRequests(auth -> auth\r\n                        .anyRequest().authenticated());\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n                .and()\r\n                .userDetailsService(customUserDetailsService())\r\n                .authorizeRequests(auth -> auth\r\n                        .anyRequest().authenticated());\r\n        return http.build();\r\n    }\r\n}\r\n""]",0,1
"[""Multi.createFrom().ticks().every(Duration.ofSeconds(5))\r\n    .onItem().transformToMultiAndMerge(tick -> {\r\n        System.out.println(""Tick:"" + tick);\r\n        return Multi.createFrom().emitter(emitter -> {\r\n            service.getTransactions().toMulti()\r\n                .onItem().transformToMultiAndMerge(transactions -> Multi.createFrom().iterable(transactions))\r\n                .subscribe().with(transaction -> {\r\n                    if (!verification.isOngoing()) {\r\n                        emitter.fail(new TransactionVerificationException());\r\n                    } else {\r\n                        boolean transactionFound = transaction.getAmount().stream().anyMatch(\r\n                            amount -> amount.getQuantity().equals(""test""));\r\n                        if (transactionFound) {\r\n                            emitter.emit(transaction);\r\n                            emitter.complete();\r\n                        }\r\n                    }\r\n                });\r\n        });\r\n    })\r\n    .onItem().invoke(transaction -> log.info(transaction))\r\n    .onFailure().invoke(x -> x.printStackTrace())\r\n    .subscribe().with(transaction -> {}, failure -> {});\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Spinner;\r\nimport javafx.scene.control.SpinnerValueFactory;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class SpinnerExample extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        Spinner<Integer> spinnerMin = new Spinner<>();\r\n        Spinner<Integer> spinnerMax = new Spinner<>();\r\n        \r\n        spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 2));\r\n        spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 6, 6));\r\n        \r\n        spinnerMin.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            spinnerMax.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(newValue, 6, spinnerMax.getValue()));\r\n            if (newValue.equals(spinnerMax.getValue())) {\r\n                spinnerMin.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n                spinnerMax.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n            } else {\r\n                spinnerMin.getEditor().setStyle("""");\r\n                spinnerMax.getEditor().setStyle("""");\r\n            }\r\n        });\r\n        \r\n        spinnerMax.valueProperty().addListener((observable, oldValue, newValue) -> {\r\n            spinnerMin.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, newValue, spinnerMin.getValue()));\r\n            if (newValue.equals(spinnerMin.getValue())) {\r\n                spinnerMin.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n                spinnerMax.getEditor().setStyle(""-fx-opacity: 0.5;"");\r\n            } else {\r\n                spinnerMin.getEditor().setStyle("""");\r\n                spinnerMax.getEditor().setStyle("""");\r\n            }\r\n        });\r\n\r\n        VBox vbox = new VBox(spinnerMin, spinnerMax);\r\n        Scene scene = new Scene(vbox, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""private void processTemplateWithUTF8(String templateName, Context context) {\r\n    TemplateEngine templateEngine = new TemplateEngine();\r\n    ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();\r\n    resolver.setCharacterEncoding(""UTF-8"");\r\n    resolver.setTemplateMode(TemplateMode.XML);\r\n    templateEngine.setTemplateResolver(resolver);\r\n    \r\n    try (BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(""test_output.xml""), StandardCharsets.UTF_8))) {\r\n        templateEngine.process(templateName, context, out);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    TestThymeleafUTF8 app = new TestThymeleafUTF8();\r\n    Context context = new Context();\r\n    context.setVariable(""TEST_AR"", ""ARABIC_TEXT"");\r\n    context.setVariable(""TEST_HE"", ""HEBREW_TEXT"");\r\n    context.setVariable(""TEST_CN"", ""CHINESE_TEXT"");\r\n    app.processTemplateWithUTF8(""test_template.xml"", context);\r\n}\r\n""]",0,1
"[""@Test\r\npublic void testBatchProcessingWithTransactionExecuted() {\r\n    RedisWriteIO.Write spec = RedisWriteIO.write().withConnectionConfiguration(connection);\r\n    PCollection<String> flushFlag = pipeline.apply(""Read File"", TextIO.read().from(""files/fileHavingFiveThousandRecords.txt""));\r\n\r\n    List<KV<String, String>> recordEntries = new ArrayList<>();\r\n    for (int i = 0; i < 5000; i++) {\r\n        recordEntries.add(KV.of(""Bruce:Wayne"" + i, ""123456789"" + i));\r\n    }\r\n\r\n    PCollection<KV<String, String>> outputData = pipeline.apply(Create.of(recordEntries));\r\n\r\n    outputData.apply(""Waiting until clearing Redis database"", Wait.on(flushFlag))\r\n            .apply(""Writing the data into Redis database"", RedisWriteIO.write()\r\n                    .withConnectionConfiguration(CustomRedisConfigurations\r\n                            .create(REDIS_HOST, port)\r\n                            .withTimeout(100)\r\n                            .withAuth(""credentials"")\r\n                            .enableSSL()));\r\n\r\n    pipeline.run().waitUntilFinish();\r\n}\r\n""]",0,1
"[""@Bean\r\npublic OpenAPI customOpenAPI() {\r\n    return new OpenAPI()\r\n            .info(new Info().title(""API Documentation"").version(""1.0""))\r\n            .components(new Components()\r\n                .addResponses(""ResponseEnvelope"", new ApiResponse().description(""Wrapper response"")\r\n                    .content(new Content().addMediaType(""application/json"", new MediaType().schema(new ObjectSchema()\r\n                        .addProperty(""status"", new StringSchema().example(""OK""))\r\n                        .addProperty(""result"", new ObjectSchema().additionalProperties(new StringSchema()))))));\r\n}\r\n\r\n@Schema(name = ""ResponseEnvelope"", description = ""Wrapper response"")\r\npublic class ResponseEnvelope<T> {\r\n    @Schema(description = ""Response status"", example = ""OK"")\r\n    private String status;\r\n    \r\n    @Schema(description = ""The result object"")\r\n    private T result;\r\n    \r\n    // getters and setters\r\n}\r\n""]",0,1
"[""package interceptorserver;\r\n\r\nimport io.grpc.Metadata;\r\nimport io.grpc.ServerCall;\r\nimport io.grpc.ServerCall.Listener;\r\nimport io.grpc.ServerCallHandler;\r\nimport io.grpc.ServerInterceptor;\r\nimport org.apache.spark.sql.connect.grpc.ServerInterceptor as SparkServerInterceptor;\r\n\r\npublic class Interceptor implements SparkServerInterceptor {\r\n\r\n    @Override\r\n    public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\r\n        System.out.println(""Hello world"");\r\n        return next.startCall(call, headers);\r\n    }\r\n}\r\n""]",0,1
"[""private <T> void positionEntity(Class<T> entityClass, Object... params) {\r\n    int x;\r\n    int y;\r\n    boolean entityIsCreated = false;\r\n    while (!entityIsCreated) {\r\n        x = random.nextInt(sizeX);\r\n        y = random.nextInt(sizeY);\r\n        if (field.getFieldable(x, y) instanceof Empty) {\r\n            try {\r\n                T entity = entityClass.getConstructor(int.class, int.class, Object.class, Object.class, int.class, int.class)\r\n                        .newInstance(x, y, params);\r\n                field.setFieldable(x, y, entity);\r\n                entityIsCreated = true;\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Configuration\r\npublic class ElasticsearchConfig {\r\n\r\n    @Value(""${spring.elasticsearch.uris}"")\r\n    private String elasticsearchUris;\r\n\r\n    @Value(""${spring.elasticsearch.username}"")\r\n    private String username;\r\n\r\n    @Value(""${spring.elasticsearch.password}"")\r\n    private String password;\r\n\r\n    @Value(""${spring.elasticsearch.ssl.certPath}"")\r\n    private String certPath;\r\n\r\n    @Bean\r\n    public RestHighLevelClient client() throws Exception {\r\n        RestClientBuilder builder = RestClient.builder(HttpHost.create(elasticsearchUris));\r\n\r\n        if (certPath != null && !certPath.isEmpty()) {\r\n            Path path = Paths.get(certPath);\r\n            SSLContext sslContext = SSLContexts.custom()\r\n                    .loadTrustMaterial(path.toFile(), null)\r\n                    .build();\r\n\r\n            builder.setHttpClientConfigCallback(httpClientBuilder -> \r\n                httpClientBuilder.setSSLContext(sslContext)\r\n                                 .setDefaultCredentialsProvider(credentialsProvider())\r\n            );\r\n        }\r\n\r\n        return new RestHighLevelClient(builder);\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchRestTemplate elasticsearchRestTemplate() {\r\n        return new ElasticsearchRestTemplate(client());\r\n    }\r\n\r\n    private CredentialsProvider credentialsProvider() {\r\n        BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\n        credentialsProvider.setCredentials(AuthScope.ANY, \r\n            new UsernamePasswordCredentials(username, password));\r\n        return credentialsProvider;\r\n    }\r\n}\r\n\r\nyaml\r\nspring:\r\n  elasticsearch:\r\n    uris: http://localhost:9200\r\n    username: elastic\r\n    password: changeme\r\n    ssl:\r\n      certPath: /path/to/cert.pem\r\n""]",0,1
"[""import java.util.concurrent.*;\r\nimport java.util.concurrent.locks.*;\r\n\r\npublic class Task implements Runnable {\r\n\r\n    private final String x;\r\n    private static final ConcurrentMap<String, Lock> locks = new ConcurrentHashMap<>();\r\n\r\n    public Task(String x) {\r\n        this.x = x;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        Lock lock = getLock(x);\r\n        try {\r\n            lock.lock();\r\n            System.out.println(x);\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private Lock getLock(String key) {\r\n        return locks.computeIfAbsent(key, k -> new ReentrantLock());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(5);\r\n\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""h""));\r\n        executor.submit(new Task(""u""));\r\n        executor.submit(new Task(""y""));\r\n        executor.submit(new Task(""hi""));\r\n        executor.submit(new Task(""p""));\r\n        executor.submit(new Task(""o""));\r\n        executor.submit(new Task(""bb""));\r\n\r\n        executor.shutdown();\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.*;\r\n\r\npublic class CoordinateConverter {\r\n\r\n    public static int[][] convertStringToIntArray(String str) {\r\n        String[] rows = str.replaceAll(""[\\[\\]]"", """").split(""],"");\r\n        int[][] result = new int[rows.length][2];\r\n        \r\n        for (int i = 0; i < rows.length; i++) {\r\n            String[] values = rows[i].replaceAll(""[\\[\\]]"", """").split("","");\r\n            result[i][0] = Integer.parseInt(values[0].trim());\r\n            result[i][1] = Integer.parseInt(values[1].trim());\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String str = ""[[445, 292], [585, 331], [612, 223], [205, 532]]"";\r\n        int[][] coordinates = convertStringToIntArray(str);\r\n        \r\n        for (int[] coord : coordinates) {\r\n            System.out.println(Arrays.toString(coord));\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import java.util.Random;\r\n\r\npublic class CardShuffle {\r\n\r\n    public static void shuffleDeck(Card[] unshuffledDeck) {\r\n        Random shuffleRandom = new Random();\r\n        int cardAmount = unshuffledDeck.length;\r\n        Card[] shuffledDeck = new Card[cardAmount];\r\n        boolean[] used = new boolean[cardAmount];\r\n\r\n        for (int i = 0; i < cardAmount; i++) {\r\n            int j;\r\n            do {\r\n                j = shuffleRandom.nextInt(cardAmount);\r\n            } while (used[j]);\r\n            shuffledDeck[i] = unshuffledDeck[j];\r\n            used[j] = true;\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import org.junit.jupiter.api.extension.BeforeAllCallback;\r\nimport org.junit.jupiter.api.extension.AfterAllCallback;\r\nimport org.junit.jupiter.api.extension.ExtensionContext;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.extension.RegisterExtension;\r\nimport org.junit.jupiter.api.extensions.ExtensionContext;\r\n\r\n@Suite\r\n@SelectClasses({FirstTest.class, SecondTest.class})\r\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\r\npublic class JUnit5Suite {\r\n  \r\n  @RegisterExtension\r\n  public static JUnit5Server MY_SERVER = new JUnit5Server();\r\n}\r\n\r\npublic class JUnit5Server implements BeforeAllCallback, AfterAllCallback {\r\n  @Override\r\n  public void beforeAll(ExtensionContext context) throws Exception {\r\n    // start the server\r\n  }\r\n\r\n  @Override\r\n  public void afterAll(ExtensionContext context) throws Exception {\r\n    // stop the server\r\n  }\r\n}\r\n""]",0,1
"[""public Mono<Void> updateAnalysisWithResults(String uuidString, String results) {\r\n    return findByUUID(uuidString)\r\n            .doOnNext(analysis -> analysis.setResults(results))\r\n            .flatMap(computeSCARepository::save)\r\n            .then();\r\n}\r\n""]",0,1
"[""btnGenerate.setOnClickListener(new View.OnClickListener() {\r\n    @Override\r\n    public void onClick(View view) {\r\n        long value1;\r\n        long value2;\r\n        value1 = Long.parseLong(txtFirst.getText().toString());\r\n        value2 = Long.parseLong(txtSecond.getText().toString());\r\n        for(long i = value1; i <= value2; i++){\r\n            list.add(String.format(""%011d"", i));\r\n            li.setAdapter(arrayAdapter);\r\n        }\r\n    }\r\n});\r\n""]",0,1
"[""import java.io.File;\r\nimport java.lang.management.ManagementFactory;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class FileDescriptorChecker {\r\n\r\n    public static List<String> findProcessesHoldingFile(String filePath) {\r\n        List<String> result = new ArrayList<>();\r\n        String pid = getCurrentPid();\r\n        \r\n        try {\r\n            Process process = Runtime.getRuntime().exec(""cmd.exe /c handle.exe -accepteula "" + filePath);\r\n            process.waitFor();\r\n            String output = new String(process.getInputStream().readAllBytes());\r\n            String[] lines = output.split(""\n"");\r\n\r\n            for (String line : lines) {\r\n                if (line.contains(filePath)) {\r\n                    result.add(line);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    private static String getCurrentPid() {\r\n        String name = ManagementFactory.getRuntimeMXBean().getName();\r\n        return name.split(""@"")[0];\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        String filePath = ""C:\\path\\to\\your\\file.txt"";\r\n        List<String> processes = findProcessesHoldingFile(filePath);\r\n        \r\n        for (String process : processes) {\r\n            System.out.println(process);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""import javax.xml.transform.*;\r\nimport javax.xml.transform.stream.*;\r\nimport org.w3c.dom.*;\r\nimport javax.xml.parsers.*;\r\nimport java.io.*;\r\nimport java.nio.file.*;\r\nimport javax.xml.xpath.*;\r\n\r\npublic class TransformDemo1 {\r\n    public static void main(String args[]) throws Exception {\r\n        String xsltfilename = ""D:\\Demo\\src\\test\\java\\StringXml\\_ignoreText.xsl"";\r\n        File xsltfile = new File(xsltfilename);\r\n        String strSource = ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""no\""?>\n"" +\r\n                ""<SOAP-ENV:Envelope xmlns:SOAP-ENV=\""http://schemas.xmlsoap.org/soap/envelope/\"" xmlns:xsd=\""http://www.w3.org/1999/XMLSchema\"" xmlns:xsi=\""http://www.w3.org/1999/XMLSchema-instance\"">\n"" +\r\n                ""    <SOAP-ENV:Body>\n"" +\r\n                ""        <return>\n"" +\r\n                ""            <ICD10Flag>hello</ICD10Flag>\n"" +\r\n                ""            <status>123</status>\n"" +\r\n                ""        </return>\n"" +\r\n                ""    </SOAP-ENV:Body>\n"" +\r\n                ""</SOAP-ENV:Envelope>\n"";\r\n\r\n        InputStream input = new ByteArrayInputStream(strSource.getBytes(""UTF-8""));\r\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n        StreamSource xsltStream = new StreamSource(xsltfile);\r\n        Transformer transformer = transformerFactory.newTransformer(xsltStream);\r\n\r\n        StreamSource xmlStream = new StreamSource(input);\r\n        StringWriter output = new StringWriter();\r\n        StreamResult result = new StreamResult(output);\r\n        transformer.transform(xmlStream, result);\r\n\r\n        System.out.println(output.toString());\r\n    }\r\n}\r\n""]",0,1
"[""@Bean\r\n@Order(10)\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .securityMatcher(""/**"")\r\n        .authorizeHttpRequests(authorizeRequests ->\r\n            authorizeRequests\r\n                .requestMatchers(createAntRequestMatchers(whitelist))\r\n                .permitAll().anyRequest()\r\n                .authenticated()\r\n        )\r\n        .oauth2ResourceServer( ... );\r\n    return http.build();\r\n}\r\n\r\n@Bean\r\n@Order(100)\r\npublic SecurityFilterChain filterChain(HttpSecurity http, ResourceFilter resourceFilter) throws Exception {\r\n    return http\r\n        .securityMatcher(""/**"")\r\n        .addFilterAfter(resourceFilter, SessionManagementFilter.class)\r\n        .build();\r\n}\r\n""]",0,1
"[""import com.sun.source.doctree.LinkTree;\r\nimport com.sun.source.doctree.DocCommentTree;\r\nimport com.sun.source.util.DocTrees;\r\nimport com.sun.source.util.Trees;\r\nimport javax.lang.model.element.Element;\r\nimport javax.lang.model.type.TypeMirror;\r\nimport javax.lang.model.util.Elements;\r\nimport javax.lang.model.util.Types;\r\n\r\npublic String getFullyQualifiedNameOfLinkReference(LinkTree linkTree, DocTrees docTrees, Trees trees, Elements elements, Types types) {\r\n    String reference = linkTree.getReference().getSignature();\r\n    Element element = trees.getElement(linkTree);\r\n    \r\n    if (element != null) {\r\n        TypeMirror typeMirror = element.asType();\r\n        return types.asElement(typeMirror).toString();\r\n    } else {\r\n        return reference; // fallback to the reference itself if element is null\r\n    }\r\n}\r\n""]",0,1
"[""import org.controlsfx.control.textfield.AutoCompletionBinding;\r\nimport org.controlsfx.control.textfield.TextFields;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Stage;\r\n\r\npublic class AutocompleteExample extends Application {\r\n\r\n    private static final ObservableList<String> names1 = FXCollections.observableArrayList(\r\n        ""Alice"", ""Adam"", ""Alfred"", ""Amon"", ""Alfredo"", ""Al"", ""Albert""\r\n    );\r\n\r\n    private static final ObservableList<String> names2 = FXCollections.observableArrayList(\r\n        ""Bob"", ""Conner"", ""Robin"", ""Fred"", ""Freddy"", ""Edward"", ""Fredward"", ""Mariam""\r\n    );\r\n\r\n    private AutoCompletionBinding<String> nameBinding;\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextField textField = new TextField();\r\n\r\n        textField.setOnKeyTyped(event -> {\r\n            String input = textField.getText().toUpperCase();\r\n            if (input.length() == 2) {\r\n                if (nameBinding != null) nameBinding.dispose();\r\n                if (input.startsWith(""A"")) {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names1);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion() + "" from list 1.""));\r\n                } else {\r\n                    nameBinding = TextFields.bindAutoCompletion(textField, names2);\r\n                    nameBinding.setOnAutoCompleted(val -> System.out.println(""You selected "" + val.getCompletion() + "" from list 2.""));\r\n                }\r\n            } else if (nameBinding != null && input.length() < 2) {\r\n                nameBinding.dispose();\r\n            }\r\n        });\r\n\r\n        VBox root = new VBox(10, textField);\r\n        Scene scene = new Scene(root, 300, 200);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(""Autocomplete Example"");\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""private void exportXls() {\r\n    try (OutputStream os = new FileOutputStream(""test.xls"");\r\n         Workbook wb = new HSSFWorkbook()) {\r\n        Sheet sh = wb.createSheet(""test"");\r\n        Row r = sh.createRow(0);\r\n        \r\n        // Create a CellStyle object once and reuse it for each cell\r\n        CellStyle cs = wb.createCellStyle();\r\n        cs.setFillBackgroundColor(IndexedColors.WHITE.index);\r\n        cs.setFillPattern(FillPatternType.SOLID_FOREGROUND);\r\n        cs.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());\r\n\r\n        for (int i = 0; i < 50; i++) {\r\n            Cell c = r.createCell(i);\r\n            c.setCellValue(i + 1);\r\n            c.setCellStyle(cs);\r\n        }\r\n\r\n        wb.write(os);\r\n        os.flush();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n""]",0,1
"[""private void findOverlappingSets(Map<String, Set<Long>> myMap) {\r\n    myMap.entrySet().stream()\r\n        .flatMap(entry1 -> myMap.entrySet().stream()\r\n            .filter(entry2 -> !entry1.getKey().equals(entry2.getKey()) && !Collections.disjoint(entry1.getValue(), entry2.getValue()))\r\n            .map(entry2 -> new AbstractMap.SimpleEntry<>(entry1.getKey(), entry2.getKey())))\r\n        .forEach(pair -> System.out.println(pair.getKey() + "" and "" + pair.getValue()));\r\n}\r\n""]",0,1
"[""public Float someFunction(final AggregationType e) {\r\n    return (float) provides.stream()\r\n        .mapToDouble(this::someFunc)\r\n        .collect(\r\n            switch (e) {\r\n                case MIN -> Collectors.minBy(Double::compare);\r\n                case MAX -> Collectors.maxBy(Double::compare);\r\n                case AVERAGE -> Collectors.averagingDouble(d -> d);\r\n            })\r\n        .orElse(-1);\r\n}\r\n""]",0,1
"[""public abstract class BasePayload {\r\n}\r\n\r\npublic class AddItemPayload extends BasePayload {\r\n    private int id;\r\n    private String name;\r\n    public AddItemPayload(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n\r\npublic class BaseCommand<T extends BasePayload> {\r\n    String command;\r\n    T payload;\r\n\r\n    public BaseCommand(String command, T payload) {\r\n        this.command = command;\r\n        this.payload = payload;\r\n    }\r\n}\r\n\r\npublic class AddItemCommand extends BaseCommand<AddItemPayload> {\r\n    public AddItemCommand(AddItemPayload payload) {\r\n        super(""AddItem"", payload);\r\n    }\r\n}\r\n\r\npublic abstract class BaseEventHandler<E extends BaseEvent<C, P>, C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract public void onTry(E event, ArrayList<BaseEvent<?, ?>> actualEvents);\r\n    abstract public void onCommit(String uuid, E event);\r\n}\r\n\r\npublic class AddItemEventHandler extends BaseEventHandler<AddItemEvent, AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    public void onTry(AddItemEvent event, ArrayList<BaseEvent<?, ?>> actualEvents) {\r\n    }\r\n    @Override\r\n    public void onCommit(String uuid, AddItemEvent event) {\r\n    }\r\n}\r\n\r\npublic abstract class BaseEvent<C extends BaseCommand<P>, P extends BasePayload> {\r\n    abstract protected BaseEventHandler<BaseEvent<C, P>, C, P> getHandler();\r\n}\r\n\r\npublic class AddItemEvent extends BaseEvent<AddItemCommand, AddItemPayload> {\r\n    @Override\r\n    protected BaseEventHandler<BaseEvent<AddItemCommand, AddItemPayload>, AddItemCommand, AddItemPayload> getHandler() {\r\n        return new AddItemEventHandler();\r\n    }\r\n}\r\n""]",0,1
"[""import java.lang.module.ModuleFinder;\r\nimport java.lang.module.ModuleReference;\r\nimport java.util.Set;\r\n\r\npublic class CoreAndNonCoreModules {\r\n\r\n    public static void main(String[] args) {\r\n        Set<ModuleReference> modules = ModuleFinder.ofSystem().findAll();\r\n\r\n        modules.forEach(module -> {\r\n            String moduleName = module.descriptor().name();\r\n            ClassLoader classLoader = module.reference().getClass().getClassLoader();\r\n            \r\n            if (classLoader == null) {\r\n                System.out.println(moduleName + "" is part of core (boot classloader)"");\r\n            } else {\r\n                System.out.println(moduleName + "" is part of non-core (platform class loader)"");\r\n            }\r\n        });\r\n    }\r\n}\r\n""]",0,1
"[""import java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatterBuilder;\r\nimport java.util.Locale;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        LocalDate date = LocalDate.parse(""24ENE1982"", new DateTimeFormatterBuilder()\r\n                .parseCaseInsensitive()\r\n                .appendPattern(""ddMMMuuuu"")\r\n                .toFormatter(Locale.forLanguageTag(""es-ES"")));\r\n        System.out.println(""Hello world! "" + date);\r\n    }\r\n}\r\n""]",0,1
"[""import java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class FileOverwriteExample {\r\n    public static void main(String[] args) throws IOException {\r\n        try (FileWriter fw = new FileWriter(""test.txt"")) {\r\n            fw.write(""123456789"");\r\n        }\r\n\r\n        try (FileWriter fw = new FileWriter(""test.txt"", false)) {\r\n            fw.write(""hello6789"");\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""public class CollectionController implements Initializable {\r\n    @FXML\r\n    private TableView<LibraryItem> libraryItemsTable;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> itemCodeColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> availableColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> titleColumn;\r\n    @FXML\r\n    private TableColumn<LibraryItem, String> authorDirectorColumn;\r\n    private LibraryService libraryService = new LibraryService();\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        initializeTableView();\r\n    }\r\n\r\n    private void initializeTableView() {\r\n        List<LibraryItem> libraryItems = libraryService.getLibraryItems();\r\n\r\n        itemCodeColumn.setCellValueFactory(new PropertyValueFactory<>(""itemCode""));\r\n        availableColumn.setCellValueFactory(new PropertyValueFactory<>(""availability""));\r\n        titleColumn.setCellValueFactory(new PropertyValueFactory<>(""title""));\r\n        \r\n        authorDirectorColumn.setCellValueFactory(cellData -> {\r\n            LibraryItem item = cellData.getValue();\r\n            if (item instanceof Book) {\r\n                return new SimpleStringProperty(((Book) item).getAuthor());\r\n            } else if (item instanceof Movie) {\r\n                return new SimpleStringProperty(((Movie) item).getDirector());\r\n            }\r\n            return null;\r\n        });\r\n\r\n        libraryItemsTable.getItems().addAll(libraryItems);\r\n    }\r\n}\r\n""]",0,1
"[""import static org.mockito.Mockito.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.*;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport java.util.Optional;\r\nimport java.util.UUID;\r\n\r\npublic class PriceServiceTest {\r\n\r\n    @Mock\r\n    private PriceRepository priceRepository;\r\n\r\n    @InjectMocks\r\n    private PriceService priceService;\r\n\r\n    @Test\r\n    public void testUpdatePrice() {\r\n        UUID priceUuid = UUID.randomUUID();\r\n        PriceRequest request = new PriceRequest();\r\n        request.setPriceAmount(100.0);\r\n\r\n        Price existingPrice = new Price();\r\n        existingPrice.setItemCode(1);\r\n        existingPrice.setTitle(""Old Price"");\r\n        existingPrice.setPriceAmount(50.0);\r\n\r\n        Price updatedPrice = new Price();\r\n        updatedPrice.setItemCode(1);\r\n        updatedPrice.setTitle(""Old Price"");\r\n        updatedPrice.setPriceAmount(100.0);\r\n\r\n        when(priceRepository.findByUuid(priceUuid)).thenReturn(Optional.of(existingPrice));\r\n        when(priceRepository.saveAndFlush(existingPrice)).thenReturn(updatedPrice);\r\n\r\n        PriceDTO result = priceService.update(priceUuid, request);\r\n\r\n        assertEquals(100.0, result.getPriceAmount());\r\n        verify(priceRepository, times(1)).saveAndFlush(existingPrice);\r\n    }\r\n}\r\n""]",0,1
"[""@EnableMongoRepositories(basePackageClasses = PersistencyRepository.class, mongoTemplateRef = ""mongoTemplate"")\r\n@EnableRedisRepositories(basePackageClasses = CacheRepository.class, redisTemplateRef = ""redisTemplate"")\r\n@SpringBootApplication\r\npublic class StoreApplication {\r\n\r\n    @Bean\r\n    public MongoTemplate mongoTemplate(MongoDbFactory mongoDbFactory, MongoConverter mongoConverter) {\r\n        return new MongoTemplate(mongoDbFactory, mongoConverter);\r\n    }\r\n\r\n    @Bean\r\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\r\n        RedisTemplate<String, Object> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(factory);\r\n        return template;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(StoreApplication.class, args);\r\n    }\r\n}\r\n""]",0,1
"[""public class FxWinTaskbar extends Application {\r\n\r\n    public static final String GUID_FORMAT = ""{%s}"";\r\n    public static final String CLSID_CONST = ""56FDF344-FD6D-11d0-958A-006097C9A090"";\r\n    public static final String IID_ITASKBAR_LIST_3 = ""EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF"";\r\n\r\n    @Override\r\n    public void start(Stage stage) throws Exception {\r\n        var button = new javafx.scene.control.Button(""Click Me"");\r\n        button.setOnAction(e -> handleClick());\r\n\r\n        var root = new javafx.scene.layout.StackPane(button);\r\n        var scene = new javafx.scene.Scene(root, 300, 200);\r\n\r\n        stage.setTitle(""JavaFX Stage with Button"");\r\n        stage.setScene(scene);\r\n        stage.show();\r\n    }\r\n\r\n    void handleClick() {\r\n        long rawHandle = Window.getWindows().getFirst().getRawHandle();\r\n        Executors.newSingleThreadExecutor().submit(() -> {\r\n            try (var arena = Arena.ofConfined()) {\r\n                var clsidString = arena.allocateFrom(GUID_FORMAT.formatted(CLSID_CONST), StandardCharsets.UTF_16LE);\r\n                var iidITaskbarList3 = arena.allocateFrom(GUID_FORMAT.formatted(IID_ITASKBAR_LIST_3), StandardCharsets.UTF_16LE);\r\n                var clsid = CLSID.allocate(arena);\r\n                var iidTaskbarList3 = IID.allocate(arena);\r\n                var taskbar3PtrToPtr = arena.allocate(ShObjIdl_core_h.C_POINTER);\r\n                MemorySegment windowHandle = arena.allocate(ValueLayout.ADDRESS, rawHandle);\r\n\r\n                int hr = ShObjIdl_core_h.CoInitializeEx(MemorySegment.NULL, ShObjIdl_core_h.COINIT_MULTITHREADED());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""CoInitialize failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CLSIDFromString(clsidString, clsid);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""CLSIDFromString failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.IIDFromString(iidITaskbarList3, iidTaskbarList3);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""IIDFromString failed with error code: "" + hr);\r\n                }\r\n\r\n                hr = ShObjIdl_core_h.CoCreateInstance(clsid, MemorySegment.NULL, ShObjIdl_core_h.CLSCTX_ALL(), iidTaskbarList3, taskbar3PtrToPtr);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    if (hr == ShObjIdl_core_h.REGDB_E_CLASSNOTREG()) {\r\n                        System.out.println(""COM class is not registered!"");\r\n                    }\r\n                    throw new RuntimeException(""CoCreateInstance failed with error code: "" + hr);\r\n                }\r\n\r\n                var taskbar3Ptr = taskbar3PtrToPtr.get(ValueLayout.ADDRESS, 0);\r\n                var taskbarList3Instance = taskbar3Ptr.reinterpret(ITaskbarList3.sizeof());\r\n\r\n                MemorySegment taskbarList3VtblPtr = ITaskbarList3.lpVtbl(taskbarList3Instance);\r\n                MemorySegment taskbarList3Vtbl = taskbarList3VtblPtr.reinterpret(ITaskbarList3Vtbl.sizeof());\r\n\r\n                MemorySegment functionHrInitPtr = ITaskbarList3Vtbl.HrInit(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.HrInit.invoke(functionHrInitPtr, taskbarList3Instance);\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""HrInit failed with error code: "" + hr);\r\n                }\r\n\r\n                MemorySegment functionSetProgressStatePtr = ITaskbarList3Vtbl.SetProgressState(taskbarList3Vtbl);\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_INDETERMINATE());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n                }\r\n\r\n                for (int i = 0; i < 100; i+=20) {\r\n                    System.out.println(""Progress is: "" + i);\r\n                    MemorySegment functionSetProgressValuePtr = ITaskbarList3Vtbl.SetProgressValue(taskbarList3Vtbl);\r\n                    hr = ITaskbarList3Vtbl.SetProgressValue.invoke(functionSetProgressValuePtr, taskbarList3Instance, windowHandle, i, 100);\r\n                    if (hr != ShObjIdl_core_h.S_OK()) {\r\n                        throw new RuntimeException(""SetProgressValue failed with error code: "" + hr);\r\n                    }\r\n                    Thread.sleep(500);\r\n                }\r\n\r\n                hr = ITaskbarList3Vtbl.SetProgressState.invoke(functionSetProgressStatePtr, taskbarList3Instance, windowHandle, ShObjIdl_core_h.TBPF_NORMAL());\r\n                if (hr != ShObjIdl_core_h.S_OK()) {\r\n                    throw new RuntimeException(""SetProgressState failed with error code: "" + hr);\r\n                }\r\n\r\n            } catch (Throwable ex) {\r\n                ex.printStackTrace();\r\n            } finally {\r\n                ShObjIdl_core_h.CoUninitialize();\r\n            }\r\n        });\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public void saveFileToExternalStorage(String assetPath, String fileName) {\r\n    AssetManager assetManager = requireContext().getAssets();\r\n    FileOutputStream out = null;\r\n    InputStream in = null;\r\n    Context context = requireContext();\r\n    try {\r\n        File databasesFolder = new File(context.getExternalFilesDir(null).getParent(), ""com.mydb.orca/databases"");\r\n        if (!databasesFolder.exists()) {\r\n            databasesFolder.mkdirs();\r\n        }\r\n        File outFile = new File(databasesFolder, fileName);\r\n        in = assetManager.open(assetPath + ""/"" + fileName);\r\n        out = new FileOutputStream(outFile);\r\n        copyFile(in, out);\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        try {\r\n            if (in != null) in.close();\r\n            if (out != null) out.flush();\r\n            if (out != null) out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nprivate void copyFile(InputStream in, OutputStream out) throws IOException {\r\n    byte[] buffer = new byte[1024];\r\n    int read;\r\n    while ((read = in.read(buffer)) != -1) {\r\n        out.write(buffer, 0, read);\r\n    }\r\n}\r\n""]",0,1
"[""public class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ArrayList<String> collection = new ArrayList<>(2); // Pre-allocate capacity\r\n        long t1 = System.nanoTime();\r\n        collection.add(""a"");\r\n        long t2 = System.nanoTime();\r\n        collection.add(""b"");\r\n        long t3 = System.nanoTime();\r\n        System.out.println(String.valueOf(t2 - t1) + ""\n"" + String.valueOf(t3 - t2));\r\n    }\r\n}\r\n""]",0,1
"[""public void paintComponent(Graphics g) {\r\n    super.paintComponent(g);\r\n    if (ApplicationImages.getImage() != null) {\r\n        double scaleFactor = Math.min((double) getParent().getWidth() / 1280, (double) getParent().getHeight() / 859);\r\n        int width = (int) (1280 * scaleFactor);\r\n        int height = (int) (859 * scaleFactor);\r\n        int x = (getParent().getWidth() - width) / 2;\r\n        int y = (getParent().getHeight() - height) / 2;\r\n\r\n        g.drawImage(ApplicationImages.getImage().getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH), x, y, this);\r\n    }\r\n}\r\n""]",0,1
"[""public class Main {\r\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        int numberOfTasks = 10;\r\n        List<? extends Future<String>> futures;\r\n        try (ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            futures = IntStream.range(1, numberOfTasks + 1)\r\n                              .mapToObj(i -> new Task(i))\r\n                              .map(executorService::submit)\r\n                              .toList();\r\n        }\r\n        \r\n        for (Future<String> future : futures) {\r\n            future.get();\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(format(""The total time of execution was: {0} ms"", stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n    }\r\n}\r\n\r\nclass Task implements Callable<String> {\r\n    private final int taskId;\r\n\r\n    public Task(int taskId) {\r\n        this.taskId = taskId;\r\n    }\r\n\r\n    @Override\r\n    public String call() {\r\n        System.out.println(format(""Task: {0} started"", taskId));\r\n        StopWatch stopWatch = StopWatch.createStarted();\r\n        Connection connection = null;\r\n        String result = null;\r\n        try {\r\n            connection = DriverManager.getConnection(""jdbc:mysql://localhost/sakila?user=sakila&password=sakila"");\r\n            System.out.println(format(""Task: {0} connection established"", taskId));\r\n            var statement = connection.createStatement();\r\n            System.out.println(format(""Task: {0} executes SQL statement"", taskId));\r\n            ResultSet resultSet = statement.executeQuery(""SELECT hello_world() AS output"");\r\n            while (resultSet.next()) {\r\n                result = resultSet.getString(""output"");\r\n            }\r\n            statement.close();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            try {\r\n                if (connection != null && !connection.isClosed()) {\r\n                    connection.close();\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n            System.out.println(format(""Task: {0} connection closed"", taskId));\r\n        }\r\n        stopWatch.stop();\r\n        System.out.println(format(""Task: {0} completed in {1} ms"", taskId, stopWatch.getTime(TimeUnit.MILLISECONDS)));\r\n        return result;\r\n    }\r\n}\r\n""]",0,1
"[""public class Main {\r\n\r\n    public static <T, U extends TaskResult<T>, V extends ITask<T>> List<U> run(List<V> tasks) {\r\n        return tasks.stream()\r\n                .map(task -> (U) task.make())\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        List<AlphaTaskResult> alphaResults = run(Arrays.asList(new AlphaTask(), new AlphaTask()));\r\n        List<BetaTaskResult> betaResults = run(Arrays.asList(new BetaTask(), new BetaTask()));\r\n    }\r\n}\r\n""]",0,1
"[""private static List<String> runWindowsCommandAsRuntime(String command) {\r\n    List<String> out = new ArrayList<>();\r\n    \r\n    String[] comm = {\r\n            ""C:\\Windows\\System32\\cmd.exe"",\r\n            ""/S"",\r\n            ""/K"",\r\n            ""\"""" + command + ""\"""",\r\n            ""&"",\r\n            ""exit""\r\n    };\r\n\r\n    String dbg = """";\r\n    for(String s : comm)\r\n        dbg += s + "" "";\r\n    System.out.println(""COMMAND: "" + dbg);\r\n    \r\n    try {\r\n        Runtime rt = Runtime.getRuntime();\r\n        Process p = rt.exec(comm);\r\n        \r\n        // get the output\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            out.add(line);\r\n        }\r\n        \r\n        int exitVal = p.waitFor();\r\n        System.out.println(""Exited with error code "" + exitVal);\r\n\r\n        p.destroy();\r\n        \r\n    } catch (Exception ex) {\r\n        Utility.logException(""Utility(SystemWindows)"", ex);\r\n        return null;\r\n    }\r\n    \r\n    return out;\r\n}\r\n""]",0,1
"[""try (Stream<Employee> dataStream = empRepo.findAllStream()) {\r\n    response.setHeader(""content-type"", ""application/json"");\r\n    PrintWriter respWriter = response.getWriter();\r\n    respWriter.write(""[""); // array begin\r\n\r\n    Iterator<Employee> iterator = dataStream.iterator();\r\n    while (iterator.hasNext()) {\r\n        Employee data = iterator.next();\r\n        respWriter.write(jsonSerialize(data));\r\n        if (iterator.hasNext()) {\r\n            respWriter.write("","");\r\n        }\r\n        entityManager.detach(data);\r\n    }\r\n    \r\n    respWriter.write(""]""); // array end\r\n    respWriter.flush();\r\n} catch (IOException e) {\r\n    log(e);\r\n}\r\n""]",0,1
"[""public static void parseTsv(String filePath) throws Exception {\r\n    try (CSVReader reader = new CSVReaderBuilder(new InputStreamReader(\r\n            Objects.requireNonNull(TestMain.class.getResourceAsStream(filePath))))\r\n            .withCSVParser(new CSVParserBuilder().withSeparator('\t').build())\r\n            .build()) {\r\n        String[] line;\r\n        while ((line = reader.readNext()) != null) {\r\n            System.out.println(line[0] + "" "" + line[1]);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Component\r\npublic class UtilFactory {\r\n\r\n    @Autowired\r\n    private ApplicationContext applicationContext;\r\n\r\n    public Util getUtil(String activeUtil) {\r\n        if (""UtilTwo"".equalsIgnoreCase(activeUtil)) {\r\n            return applicationContext.getBean(UtilTwo.class);\r\n        }\r\n        return applicationContext.getBean(UtilOne.class);\r\n    }\r\n}\r\n\r\n@Service\r\npublic class DemoService {\r\n\r\n    @Autowired\r\n    private UtilFactory utilFactory;\r\n\r\n    @Value(""${active.util}"")\r\n    private String activeUtil;\r\n\r\n    public void useClient() {\r\n        Util util = utilFactory.getUtil(activeUtil);\r\n        util.getClient();\r\n    }\r\n}\r\n""]",0,1
"[""public static boolean search(int[][] mat, int num) {\r\n    int n = mat.length, r = n / 2, c = n / 2;\r\n    while (r >= 0 && r < n && c >= 0 && c < n) {\r\n        if (mat[r][c] == num) return true;\r\n        if (num < mat[r][c]) {\r\n            if (c > 0 && num >= mat[r][c - 1]) c--;\r\n            else r--;\r\n        } else {\r\n            if (r < n - 1 && num <= mat[r + 1][c]) r++;\r\n            else c++;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n""]",0,1
"[""import java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.apache.poi.openxml4j.opc.OPCPackage;\r\nimport org.apache.poi.xwpf.usermodel.XWPFDocument;\r\nimport org.apache.poi.xwpf.usermodel.XWPFParagraph;\r\nimport org.apache.poi.xwpf.usermodel.XWPFRun;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTBody;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSectPr;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTP;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPPr;\r\nimport org.openxmlformats.schemas.wordprocessingml.x2006.main.STSectionMark;\r\n\r\npublic class WordMerge {\r\n    private final OutputStream result;\r\n    private final List<InputStream> inputs;\r\n    private XWPFDocument first;\r\n\r\n    public WordMerge(OutputStream result) {\r\n        this.result = result;\r\n        inputs = new ArrayList<>();\r\n    }\r\n\r\n    public void add(InputStream stream) throws Exception {\r\n        inputs.add(stream);\r\n        OPCPackage srcPackage = OPCPackage.open(stream);\r\n        XWPFDocument srcDoc = new XWPFDocument(srcPackage);\r\n        if (inputs.size() == 1) {\r\n            first = srcDoc;\r\n        } else {\r\n            addPageBreak(first);\r\n            CTBody srcBody = srcDoc.getDocument().getBody();\r\n            first.getDocument().addNewBody().set(srcBody);\r\n        }\r\n    }\r\n\r\n    public void doMerge() throws Exception {\r\n        first.write(result);\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        result.flush();\r\n        result.close();\r\n        for (InputStream input : inputs) {\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    private void addPageBreak(XWPFDocument doc) {\r\n        XWPFParagraph paragraph = doc.createParagraph();\r\n        CTP ctp = paragraph.getCTP();\r\n        CTPPr ctppr = ctp.isSetPPr() ? ctp.getPPr() : ctp.addNewPPr();\r\n        CTSectPr sectPr = ctppr.isSetSectPr() ? ctppr.getSectPr() : ctppr.addNewSectPr();\r\n        sectPr.addNewType().setVal(STSectionMark.NEXT_PAGE);\r\n        XWPFRun run = paragraph.createRun();\r\n        run.addBreak();\r\n    }\r\n}\r\n""]",0,1
"[""import org.wildfly.security.credential.PasswordCredential;\r\nimport org.wildfly.security.credential.store.CredentialStore;\r\nimport org.wildfly.security.credential.store.CredentialStoreException;\r\nimport org.wildfly.security.password.Password;\r\nimport org.wildfly.security.password.interfaces.MaskedPassword;\r\nimport org.wildfly.security.password.spec.MaskedPasswordAlgorithmSpec;\r\nimport org.wildfly.security.password.spec.PasswordSpec;\r\nimport org.wildfly.security.password.util.ModularCrypt;\r\nimport org.wildfly.security.provider.WildFlyElytronPasswordProvider;\r\n\r\nimport java.io.File;\r\nimport java.security.Provider;\r\nimport java.security.Security;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CredentialStoreUtil {\r\n    public static CredentialStore connectToCredentialStore(String maskedPasswordString) throws Exception {\r\n        Provider provider = new WildFlyElytronPasswordProvider();\r\n        Security.addProvider(provider);\r\n\r\n        MaskedPasswordAlgorithmSpec spec = ModularCrypt.decodeMaskedPassword(maskedPasswordString);\r\n        Password maskedPassword = MaskedPassword.createRaw(MaskedPassword.ALGORITHM_MASKED, spec);\r\n        \r\n        CredentialStore.ProtectionParameter protectionParameter = new CredentialStore.CredentialSourceProtectionParameter(\r\n                () -> new PasswordCredential(maskedPassword)\r\n        );\r\n\r\n        CredentialStore credentialStore = CredentialStore.getInstance(""KeyStoreCredentialStore"");\r\n        Map<String, String> configuration = new HashMap<>();\r\n        String configPath = System.getProperty(""jboss.server.data.dir"");\r\n        String path = configPath + File.separator + ""credentials"" + File.separator + ""csstore.jceks"";\r\n        configuration.put(""keyStoreType"", ""JCEKS"");\r\n        configuration.put(""location"", path);\r\n        configuration.put(""modifiable"", ""false"");\r\n\r\n        credentialStore.initialize(configuration, protectionParameter);\r\n        return credentialStore;\r\n    }\r\n}\r\n""]",0,1
"[""private void addNewProductRow(LinearLayout parentLayout) {\r\n    LinearLayout newProductLayout = new LinearLayout(getActivity());\r\n    newProductLayout.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n    newProductLayout.setOrientation(LinearLayout.HORIZONTAL);\r\n\r\n    AutoCompleteTextView tvProduct = new AutoCompleteTextView(getActivity());\r\n    tvProduct.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    tvProduct.setHint(""Enter Product"");\r\n\r\n    EditText prodQty = new EditText(getActivity());\r\n    prodQty.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodQty.setHint(""Enter Quantity"");\r\n\r\n    EditText prodPrice = new EditText(getActivity());\r\n    prodPrice.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodPrice.setHint(""Prod Price"");\r\n    prodPrice.setFocusable(false);\r\n\r\n    EditText prodSpecs = new EditText(getActivity());\r\n    prodSpecs.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));\r\n    prodSpecs.setHint(""Prod Specs"");\r\n    prodSpecs.setFocusable(false);\r\n\r\n    Button removeBtn = new Button(getActivity());\r\n    removeBtn.setLayoutParams(new LinearLayout.LayoutParams(\r\n            LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));\r\n    removeBtn.setText(""X"");\r\n    removeBtn.setOnClickListener(v -> parentLayout.removeView(newProductLayout));\r\n\r\n    newProductLayout.addView(tvProduct);\r\n    newProductLayout.addView(prodQty);\r\n    newProductLayout.addView(prodPrice);\r\n    newProductLayout.addView(prodSpecs);\r\n    newProductLayout.addView(removeBtn);\r\n\r\n    parentLayout.addView(newProductLayout);\r\n}\r\n""]",0,1
"[""import java.io.File;\r\nimport java.io.FileReader;\r\nimport java.security.KeyFactory;\r\nimport java.security.PrivateKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport org.bouncycastle.openssl.PEMDecryptorProvider;\r\nimport org.bouncycastle.openssl.PEMEncryptedKeyPair;\r\nimport org.bouncycastle.openssl.PEMKeyPair;\r\nimport org.bouncycastle.openssl.PEMParser;\r\nimport org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;\r\nimport org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter;\r\n\r\npublic PrivateKey loadEncryptedPrivateKey(String keyFilePath, String passphrase) throws Exception {\r\n    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n    try (PEMParser pemParser = new PEMParser(new FileReader(new File(keyFilePath)))) {\r\n        Object object = pemParser.readObject();\r\n        JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");\r\n        if (object instanceof PEMEncryptedKeyPair) {\r\n            PEMDecryptorProvider decryptor = new JceOpenSSLPKCS8DecryptorProviderBuilder().build(passphrase.toCharArray());\r\n            object = ((PEMEncryptedKeyPair) object).decryptKeyPair(decryptor);\r\n        }\r\n        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");\r\n        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(converter.getKeyPair((PEMKeyPair) object).getPrivate().getEncoded()));\r\n    }\r\n}\r\n""]",0,1
"[""public class Solution {\r\n    static int i = 0;\r\n\r\n    public static void f() {\r\n        System.out.println(i++);\r\n        try {\r\n            f();\r\n        } catch (StackOverflowError e) {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        f();\r\n    }\r\n}\r\n""]",0,1
"[""import javafx.application.Application;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.TextArea;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class EmojiTextArea extends Application {\r\n    @Override\r\n    public void start(Stage primaryStage) {\r\n        TextArea textArea = new TextArea(""?? ?? ?? ?? ?? ?? ?? ?? ?? ??"");\r\n        textArea.setStyle(""-fx-font-family: 'Segoe UI Emoji', 'Noto Color Emoji', 'Apple Color Emoji', 'Twemoji Mozilla'; -fx-font-size: 14px;"");\r\n        \r\n        StackPane root = new StackPane(textArea);\r\n        Scene scene = new Scene(root, 400, 300);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n}\r\n""]",0,1
"[""public class PyqAdapter extends RecyclerView.Adapter<PyqAdapter.ViewHolder> {\r\n    private final Context mCtx;\r\n    private final List<PyqModel> pyqModelList;\r\n    private final int defaultBackgroundColor;\r\n    private final int selectedBackgroundColor;\r\n    private final Set<Integer> selectedPositions;\r\n    private static final String PREFS_NAME = ""PyqAllItems"";\r\n    private static final String SELECTED_ITEMS_KEY = ""PyqSelectedItems"";\r\n\r\n    public PyqAdapter(Context mCtx, List<PyqModel> pyqModelList) {\r\n        this.mCtx = mCtx;\r\n        this.pyqModelList = pyqModelList;\r\n        this.selectedPositions = new HashSet<>();\r\n        Resources res = mCtx.getResources();\r\n        int nightModeFlags = res.getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\r\n        defaultBackgroundColor = ContextCompat.getColor(mCtx, nightModeFlags == Configuration.UI_MODE_NIGHT_YES ? R.color.defaultBackgroundDark : R.color.defaultBackgroundLight);\r\n        selectedBackgroundColor = ContextCompat.getColor(mCtx, nightModeFlags == Configuration.UI_MODE_NIGHT_YES ? R.color.selectedBackgroundDark : R.color.selectedBackgroundLight);\r\n        SharedPreferences prefs = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\r\n        Set<String> selectedItems = prefs.getStringSet(SELECTED_ITEMS_KEY, new HashSet<>());\r\n        for (String position : selectedItems) selectedPositions.add(Integer.parseInt(position));\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.pyq_rv_layout, parent, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        PyqModel temp = pyqModelList.get(position);\r\n        holder.textView.setText(temp.getPdfName());\r\n        holder.serialNumber.setText(String.valueOf(position + 1));\r\n        holder.pyqTopics.setText(temp.getPyqTopics());\r\n        holder.cardView.setCardBackgroundColor(selectedPositions.contains(position) ? selectedBackgroundColor : defaultBackgroundColor);\r\n\r\n        holder.cardView.setOnClickListener(v -> {\r\n            if (selectedPositions.contains(position)) selectedPositions.remove(position);\r\n            else selectedPositions.add(position);\r\n            SharedPreferences.Editor editor = mCtx.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE).edit();\r\n            Set<String> selectedItems = new HashSet<>();\r\n            for (int pos : selectedPositions) selectedItems.add(String.valueOf(pos));\r\n            editor.putStringSet(SELECTED_ITEMS_KEY, selectedItems).apply();\r\n            notifyItemChanged(position);\r\n            Intent i = new Intent(holder.cardView.getContext(), ViewPdf.class);\r\n            i.putExtra(""pdfName"", temp.getPdfName());\r\n            i.putExtra(""pdfUrl"", temp.getPdfUri());\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            holder.cardView.getContext().startActivity(i);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pyqModelList.size();\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        CardView cardView;\r\n        TextView textView, serialNumber, pyqTopics;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            cardView = itemView.findViewById(R.id.pyqCardView);\r\n            textView = itemView.findViewById(R.id.pyqTitle);\r\n            serialNumber = itemView.findViewById(R.id.serialNumber);\r\n            pyqTopics = itemView.findViewById(R.id.pyqTopics);\r\n        }\r\n    }\r\n}\r\n""]",0,1
"[""@Test\r\nvoid testCase() {\r\n    Item item = input.mockEntity();\r\n    CreateItemData data = input.mockDTO();\r\n\r\n    when(itemRepository.findByItemNameIgnoreCase(data.itemName())).thenReturn(Optional.of(item));\r\n\r\n    Exception ex = assertThrows(ItemAlreadyCreatedException.class, () -> {\r\n        itemService.createItem(data, uriBuilder);\r\n    });\r\n\r\n    assertEquals(""There is an item created with this name"", ex.getMessage());\r\n    verify(itemRepository).findByItemNameIgnoreCase(data.itemName());\r\n}\r\n""]",0,1
"[""public void setAlignedText(TextView textView, String leftText, String rightText) {\r\n    SpannableString finalString = new SpannableString(leftText + ""\t\t\t\t"" + rightText);\r\n    finalString.setSpan(new TabStopSpan.Standard(1000), leftText.length(), leftText.length() + 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n    textView.setText(finalString);\r\n}\r\n""]",0,1
"[""public String convertDmnRuleTestResultToCsv(DmnRuleTestResult result) {\r\n    List<DmnTestCaseResult> results = result.getTestCases();\r\n    try (StringWriter sw = new StringWriter(); \r\n         CSVWriter writer = new CSVWriter(sw, CSVWriter.DEFAULT_SEPARATOR, \r\n                                          CSVWriter.NO_QUOTE_CHARACTER, \r\n                                          CSVWriter.NO_ESCAPE_CHARACTER, \r\n                                          CSVWriter.DEFAULT_LINE_END)) {\r\n\r\n        String[] headers = {""Test Input"", ""Expected Output"", ""Test Output"", ""Error Message""};\r\n        writer.writeNext(headers);\r\n\r\n        for (DmnTestCaseResult testCase : results) {\r\n            String testInput = testCase.getTestInput().toString();\r\n            String expectedOutput = testCase.getExpectedOutput().toString();\r\n            String errorMessage = testCase.getErrorMessage();\r\n\r\n            if (testCase.getTestOutput().isEmpty()) {\r\n                writer.writeNext(new String[]{testInput, expectedOutput, """", errorMessage});\r\n            } else {\r\n                for (Map<String, Object> output : testCase.getTestOutput()) {\r\n                    writer.writeNext(new String[]{testInput, expectedOutput, output.toString(), errorMessage});\r\n                }\r\n            }\r\n        }\r\n        return sw.toString();\r\n    } catch (Exception ex) {\r\n        throw new CsvParseException(ex.getMessage());\r\n    }\r\n}\r\n""]",0,1
"[""private int getNodeIndex(Map<String, Integer> nodeIndexMap, List<String> nodes, String node) {\r\n    return nodeIndexMap.computeIfAbsent(node, k -> {\r\n        nodes.add(k);\r\n        return nodes.size() - 1;\r\n    });\r\n}\r\n\r\nprivate void bfs(String source, Map<String, Integer> nodeIndexMap) {\r\n    level = new int[nodes.size()];\r\n    Arrays.fill(level, -1);\r\n    level[getNodeIndex(nodeIndexMap, nodes, source)] = 0;\r\n\r\n    Queue<String> queue = new LinkedList<>();\r\n    queue.offer(source);\r\n\r\n    while (!queue.isEmpty()) {\r\n        String u = queue.poll();\r\n        for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n            String v = entry.getKey();\r\n            int capacity = entry.getValue();\r\n            int vIndex = getNodeIndex(nodeIndexMap, nodes, v);\r\n            if (capacity > 0 && level[vIndex] == -1) {\r\n                level[vIndex] = level[getNodeIndex(nodeIndexMap, nodes, u)] + 1;\r\n                queue.offer(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate int dfs(String u, int flow, String sink, Map<String, Integer> nodeIndexMap) {\r\n    if (u.equals(sink)) {\r\n        return flow;\r\n    }\r\n\r\n    for (Map.Entry<String, Integer> entry : network.get(u).entrySet()) {\r\n        String v = entry.getKey();\r\n        int capacity = entry.getValue();\r\n        if (capacity > 0 && level[getNodeIndex(nodeIndexMap, nodes, u)] < level[getNodeIndex(nodeIndexMap, nodes, v)]) {\r\n            int sent = dfs(v, Math.min(flow, capacity), sink, nodeIndexMap);\r\n            if (sent > 0) {\r\n                network.get(u).put(v, capacity - sent);\r\n                network.get(v).put(u, network.get(v).getOrDefault(u, 0) + sent);\r\n                return sent;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\npublic int calculator(Map<T, Set<T>> graph) {\r\n    Map<String, Integer> nodeIndexMap = new HashMap<>();\r\n\r\n    for (T t : graph.keySet()) {\r\n        addEdge(""src"", ""A"" + t.toString(), 1);\r\n        addEdge(""B"" + t, ""sink"", 1);\r\n        Set<String> visitedSubset = new HashSet<>();\r\n        for (String u : reach(graph, t, visitedSubset)) {\r\n            addEdge(""A"" + t, u, 1);\r\n        }\r\n    }\r\n\r\n    int maxFlow = 0;\r\n    while (true) {\r\n        bfs(""src"", nodeIndexMap);\r\n        if (level[getNodeIndex(nodeIndexMap, nodes, ""sink"")] == -1) {\r\n            break;\r\n        }\r\n\r\n        int flow;\r\n        while ((flow = dfs(""src"", Integer.MAX_VALUE, ""sink"", nodeIndexMap)) > 0) {\r\n            maxFlow += flow;\r\n        }\r\n    }\r\n\r\n    return graph.size() - maxFlow;\r\n}\r\n""]",0,1
"[""public class AlarmReceiver extends BroadcastReceiver {\r\n    private static Ringtone ringtone;\r\n\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        Vibrator vibrator = (Vibrator) context.getSystemService(Context.VIBRATOR_SERVICE);\r\n        if (vibrator != null && vibrator.hasVibrator()) {\r\n            vibrator.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));\r\n        }\r\n\r\n        String event = intent.getStringExtra(""title"");\r\n        String comment = intent.getStringExtra(""comment"");\r\n        Intent activityIntent = new Intent(context, MainActivity.class);\r\n        activityIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, activityIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Intent stopIntent = new Intent(context, NotificationDismissReceiver.class);\r\n        PendingIntent stopPendingIntent = PendingIntent.getBroadcast(context, 0, stopIntent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(context, ""myandroid"")\r\n                .setSmallIcon(R.drawable.alarm)\r\n                .setContentTitle(event)\r\n                .setContentText(""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment)\r\n                .setAutoCancel(true)\r\n                .setStyle(new NotificationCompat.BigTextStyle().bigText(""Reminder for the Event:\n"" + event + ""\nComments:\n"" + comment))\r\n                .setContentIntent(pendingIntent)\r\n                .setDeleteIntent(stopPendingIntent)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                .setPriority(NotificationCompat.PRIORITY_HIGH);\r\n\r\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);\r\n        notificationManager.notify(123, builder.build());\r\n\r\n        Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\r\n        ringtone = RingtoneManager.getRingtone(context, notification);\r\n        if (ringtone != null) ringtone.play();\r\n    }\r\n\r\n    public static void stopRingtone() {\r\n        if (ringtone != null && ringtone.isPlaying()) {\r\n            ringtone.stop();\r\n        }\r\n    }\r\n}\r\n\r\npublic class NotificationDismissReceiver extends BroadcastReceiver {\r\n    @Override\r\n    public void onReceive(Context context, Intent intent) {\r\n        AlarmReceiver.stopRingtone();\r\n    }\r\n}\r\n""]",0,1
"[""public static void searchNumber(int[] array, int searching) {\r\n    boolean found = false;\r\n    for (int i = 0; i < array.length; i++) {\r\n        if (searching == array[i]) {\r\n            System.out.println(searching + "" is at index "" + i + ""."");\r\n            found = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!found) {\r\n        System.out.println(searching + "" was not found."");\r\n    }\r\n}\r\n""]",0,1
"[""public static void setSeriesColor(LineChart<Number, Number> lineChart, XYChart.Series<Number, Number> series, String color) {\r\n    for (Node node : lineChart.lookupAll("".series"" + lineChart.getData().indexOf(series))) {\r\n        node.setStyle(""-fx-stroke: "" + color + "";"");\r\n    }\r\n}\r\n""]",0,1
"[""private void addOutlineEffect(Node node) {\r\n    Glow glow = new Glow(1.0);\r\n    node.setEffect(glow);\r\n}\r\n""]",0,1
"[""@Service\r\n@RequiredArgsConstructor\r\npublic class TenantService {\r\n\r\n    private final UserTenantRepository userTenantRepository;\r\n\r\n    public boolean isUserAuthorizedForTenant(String username, String subdomain) {\r\n        return userTenantRepository.existsByUsernameAndSubdomain(subdomain, username);\r\n    }\r\n}\r\n\r\n@RestController\r\n@RequestMapping(""/auth"")\r\n@RequiredArgsConstructor\r\npublic class AuthController {\r\n\r\n    private final AuthService authService;\r\n    private final TenantService tenantService;\r\n\r\n    @PostMapping(""/signin"")\r\n    public ResponseEntity<?> authenticateUser(\r\n            @RequestAttribute String subdomain,\r\n            @Valid @RequestBody LoginRequest loginRequest\r\n    ) {\r\n        if (!tenantService.isUserAuthorizedForTenant(loginRequest.getUsername(), subdomain)) {\r\n            return ResponseEntity\r\n                    .badRequest()\r\n                    .body(new MessageResponse(""Unauthorized: This username and tenant is not authorized!""));\r\n        }\r\n        return ResponseEntity.ok(authService.authenticateUser(subdomain, loginRequest));\r\n    }\r\n}\r\n""]",0,1
"[""public String inputTake() {\r\n    Scanner scan = new Scanner(System.in);\r\n    String guess;\r\n\r\n    while (true) {\r\n        System.out.println(""choose a word, pick carefully: "");\r\n        guess = scan.next();\r\n        \r\n        if (checkInput(guess)) {\r\n            return guess;\r\n        }\r\n    }\r\n}\r\n\r\npublic boolean checkInput(String input) {\r\n    if (input.length() != 5 || !input.matches(""[a-zA-Z]+"")) {\r\n        System.out.println(""make sure your guess consists of 5 english letters, try again."");\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n""]",0,1
"[""package com.question.controller;\r\n\r\nimport com.question.service.LanguageService;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\npublic class LanguageController {\r\n\r\n    private final LanguageService languageService;\r\n\r\n    public LanguageController(@Value(""${configuration}"") String configuration, ApplicationContext context) {\r\n        this.languageService = (LanguageService) context.getBean(configuration);\r\n    }\r\n\r\n    @GetMapping(""/test"")\r\n    public String test(@RequestParam String name) {\r\n        return languageService.process(name);\r\n    }\r\n}\r\n""]",0,1
"[""@Mapper\r\npublic interface WealthProdAccountInfoMapper {\r\n\r\n    @Mapping(target = ""agentName"", source = ""agentName"")\r\n    @Mapping(target = ""agentIdentityType"", source = ""agentIdentityType"")\r\n    @Mapping(target = ""agentIdentityNo"", source = ""agentIdentityNo"")\r\n    @Mapping(target = ""agentIdentityExpireAt"", source = ""agentIdentityExpireAt"")\r\n    default AgentInfo wealthProdAccountInfoDTOToAgentInfo(WealthProdAccountInfoDTO wealthProdAccountInfoDTO) {\r\n        if (wealthProdAccountInfoDTO == null) {\r\n            return null;\r\n        }\r\n\r\n        String agentName = wealthProdAccountInfoDTO.getAgentName();\r\n        String agentIdentityType = wealthProdAccountInfoDTO.getAgentIdentityType();\r\n        String agentIdentityNo = wealthProdAccountInfoDTO.getAgentIdentityNo();\r\n        String agentIdentityExpireAt = wealthProdAccountInfoDTO.getAgentIdentityExpireAt();\r\n\r\n        if (agentName == null && agentIdentityType == null && agentIdentityNo == null && agentIdentityExpireAt == null) {\r\n            return null;\r\n        }\r\n\r\n        return new AgentInfo(agentName, agentIdentityType, agentIdentityNo, agentIdentityExpireAt);\r\n    }\r\n}\r\n""]",0,1
"[""public static void main(String[] args) throws IOException {\r\n    FileReader filObj = null;\r\n    try {\r\n        filObj = new FileReader(new File(System.getProperty(""user.home"") + ""\\Desktop\\testData.txt""));\r\n    } catch (FileNotFoundException e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    BufferedReader br = new BufferedReader(filObj);\r\n\r\n    List<String> headers = new ArrayList<String>();\r\n    List<HashMap<String, String>> myTable = new ArrayList<HashMap<String, String>>();\r\n\r\n    String line = null;\r\n    int ext = 0;\r\n    while ((line = br.readLine()) != null) {\r\n        if (ext == 0) {\r\n            headers = Arrays.asList(line.split("",""));\r\n        } else {\r\n            HashMap<String, String> myRecord = new HashMap<String, String>();\r\n            int index = 0;\r\n            for (String each : line.split("","")) {\r\n                myRecord.put(headers.get(index), each);\r\n                index++;\r\n            }\r\n            myTable.add(myRecord);\r\n        }\r\n        ext++;\r\n    }\r\n\r\n    System.out.println(""My Table:"" + myTable);\r\n}\r\n""]",0,1
"[""@Component\r\npublic class TMPFilter implements WebFilter {\r\n    private long requestTime = System.nanoTime();\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\r\n        long deltaTime = System.nanoTime() - requestTime;\r\n        \r\n        return chain.filter(exchange)\r\n                .doOnRequest(request -> {\r\n                    requestTime = System.nanoTime();\r\n                })\r\n                .doOnSuccess(arg -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-success"", Long.toString(delta));\r\n                })\r\n                .doOnError((arg) -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-error"", Long.toString(delta));\r\n                })\r\n                .doFinally((arg) -> {\r\n                    long delta = System.nanoTime() - requestTime;\r\n                    exchange.getResponse().getHeaders().set(""server-timing-finally"", Long.toString(delta));\r\n                });\r\n    }\r\n}\r\n""]",0,1
"[""from typing import Literal, Union\r\n\r\nfrom pydantic import BaseModel, Field, ValidationError, root_validator\r\n\r\n\r\nclass Cat(BaseModel):\r\n    pet_type: Literal['cat']\r\n    meows: int\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Dog(BaseModel):\r\n    pet_type: Literal['dog']\r\n    barks: float\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Lizard(BaseModel):\r\n    pet_type: Literal['reptile', 'lizard']\r\n    scales: bool\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\nclass Model(BaseModel):\r\n    pet: Union[Cat, Dog, Lizard] = Field(..., discriminator='pet_type')\r\n    n: int\r\n\r\n    class Config:\r\n        extra = 'forbid'\r\n\r\n\r\ntry:\r\n    print(Model(pet={'pet_type': 'dog', 'barks': 3.14, 'eats': 'biscuit'}, n=1))\r\nexcept ValidationError as e:\r\n    print(e)\r\n""]",0,1
"[""def compute_hash(log_dict: dict):\r\n    return hash(frozenset(log_dict.items()))\r\n\r\ndef deduplicate(logs):\r\n    already_seen = set()\r\n    for log in logs:\r\n        log_hash = compute_hash(log)\r\n        if log_hash in already_seen:\r\n            continue\r\n        already_seen.add(log_hash)\r\n        yield log\r\n""]",0,1
"[""import numpy as np\r\n\r\nclass SequenceGenerator:\r\n    def __init__(self, sequence):\r\n        self.sequence = sequence\r\n        self.index = 0\r\n    \r\n    def __call__(self):\r\n        value = self.sequence[self.index]\r\n        self.index = (self.index + 1) % len(self.sequence)\r\n        return value\r\n\r\nrng = lambda : np.random.randint(2, 20) // 2\r\n\r\nnrng = SequenceGenerator(np.arange(1, 10.5, 0.5))\r\n\r\nfor j in range(10):\r\n    print('random number', rng())\r\n    print('non-random number', nrng())\r\n""]",0,1
"[""# conftest.py\r\nimport pytest\r\n\r\npytest_plugins = [""db_session_fixtures"", ""dataframe_fixtures""]\r\n\r\n# db_session_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef db_session():\r\n    # setup db session\r\n    yield session\r\n    # teardown db session\r\n\r\n# dataframe_fixtures.py\r\nimport pytest\r\n\r\n@pytest.fixture\r\ndef my_dataframe_fixture():\r\n    # setup dataframe\r\n    yield dataframe\r\n    # teardown dataframe\r\n\r\n# test_a.py\r\ndef test_case_a(my_dataframe_fixture):\r\n    # some tests\r\n\r\n# test_b.py\r\ndef test_case_b(db_session):\r\n    # some tests\r\n""]",0,1
"[""import requests\r\n\r\ndef get_access_token(client_id, client_secret, refresh_token):\r\n    url = ""https://api.dropboxapi.com/oauth2/token""\r\n    headers = {\r\n        ""Content-Type"": ""application/x-www-form-urlencoded""\r\n    }\r\n    data = {\r\n        ""grant_type"": ""refresh_token"",\r\n        ""refresh_token"": refresh_token,\r\n        ""client_id"": client_id,\r\n        ""client_secret"": client_secret\r\n    }\r\n    \r\n    response = requests.post(url, headers=headers, data=data)\r\n    \r\n    if response.status_code == 200:\r\n        return response.json()\r\n    else:\r\n        raise Exception(f""Error: {response.status_code}, {response.text}"")\r\n""]",0,1
"[""import asyncio\r\n\r\n\r\nclass MyContextManager:\r\n    async def __aenter__(self):\r\n        print(""Enter to the Context Manager..."")\r\n        return self\r\n\r\n    async def __aexit__(self, exc_type, exc_value, exc_tb):\r\n        print(exc_type)\r\n        print(""Exit from the Context Manager..."")\r\n        await asyncio.sleep(1)\r\n        print(""This line is executed"")\r\n        await asyncio.sleep(1)\r\n\r\n\r\nasync def get_numbers():\r\n    async with MyContextManager():\r\n        for i in range(30):\r\n            yield i\r\n\r\n\r\nasync def main():\r\n    async for i in get_numbers():\r\n        print(i)\r\n        if i == 1:\r\n            break\r\n\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Current File"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""debugOptions"": [\r\n                ""WaitOnAbnormalExit"",\r\n                ""WaitOnNormalExit""\r\n            ],\r\n            ""console"": ""integratedTerminal"",\r\n            ""stopOnEntry"": false,\r\n            ""redirectOutput"": true,\r\n            ""outputCapture"": ""std"",\r\n            ""env"": {\r\n                ""PYTHONIOENCODING"": ""utf-8""\r\n            }\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""# user.py\r\nfrom typing import List, TYPE_CHECKING, Optional\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nif TYPE_CHECKING:\r\n    from item import Item\r\n\r\nclass User(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    age: Optional[int]\r\n    bought_items: List[""Item""] = []\r\n\r\n# item.py\r\nfrom sqlmodel import SQLModel, Field\r\n\r\nclass Item(SQLModel, table=True):\r\n    id: int = Field(default=None, primary_key=True)\r\n    price: float\r\n    name: str\r\n\r\n# main.py\r\nfrom fastapi import FastAPI\r\nfrom user import User\r\n\r\napp = FastAPI()\r\n\r\n@app.get(""/"", response_model=User)\r\ndef main():\r\n    return {""message"": ""working just fine""}\r\n""]",0,1
"[""import numpy as np\r\nfrom scipy.optimize import linprog\r\n\r\ndef find_guaranteed_values(A_eq, b_eq, num_variables):\r\n    c = np.zeros(num_variables)\r\n    bounds = [(0, 1)] * num_variables\r\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs-ipm')\r\n\r\n    if res.success:\r\n        solution = np.round(res.x)\r\n        guaranteed_zeros = np.where(solution == 0)[0]\r\n        guaranteed_ones = np.where(solution == 1)[0]\r\n        return guaranteed_zeros, guaranteed_ones\r\n    else:\r\n        return [], []\r\n\r\nA_eq = np.array([\r\n    [1, 1, 1, 0],\r\n    [1, 0, 0, 1],\r\n    [1, 1, 0, 0]\r\n])\r\nb_eq = np.array([2, 1, 1])\r\n\r\nguaranteed_zeros, guaranteed_ones = find_guaranteed_values(A_eq, b_eq, 4)\r\nprint(""Guaranteed zeros:"", guaranteed_zeros)\r\nprint(""Guaranteed ones:"", guaranteed_ones)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport plotly.express as px\r\n\r\ndef plot_polars_bar(df: pl.DataFrame, x: str, y: str):\r\n    fig = px.bar(df.to_dict(as_series=False), x=x, y=y)\r\n    fig.show()\r\n\r\ndf = pl.DataFrame(\r\n    {\r\n        ""nrs"": [1, 2, 3, None, 5],\r\n        ""names"": [""foo"", ""ham"", ""spam"", ""egg"", None],\r\n        ""random"": np.random.rand(5),\r\n        ""groups"": [""A"", ""A"", ""B"", ""C"", ""B""],\r\n    }\r\n)\r\n\r\nplot_polars_bar(df, x=""names"", y=""random"")\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom hydra.core.config_store import ConfigStore\r\nfrom pydantic import BaseModel, Field, ValidationError\r\n\r\nclass PydanticConfig(BaseModel):\r\n    param: int = Field(..., ge=0, le=100)\r\n\r\n@dataclass\r\nclass HydraConfig:\r\n    param: int\r\n\r\ndef validate_config(cfg: HydraConfig):\r\n    try:\r\n        PydanticConfig(**cfg.__dict__)\r\n    except ValidationError as e:\r\n        raise ValueError(e)\r\n\r\ncs = ConfigStore.instance()\r\ncs.store(name=""config"", node=HydraConfig)\r\n""]",0,1
"[""javascript\r\nclass Rectangle {\r\n    constructor(length, width) {\r\n        this.name = ""Rectangle"";\r\n        this.length = length;\r\n        this.width = width;\r\n    }\r\n\r\n    shoutArea() {\r\n        console.log(`I AM A ${this.name.toUpperCase()} AND MY AREA IS ${this.length * this.width}`);\r\n    }\r\n    \r\n    rectHello() {\r\n        return ""Rectanglish: hello"";\r\n    }\r\n}\r\n\r\nclass Square extends Rectangle {\r\n    constructor(length) {\r\n        super(length, length);\r\n        this.name = ""Square"";\r\n    }\r\n    \r\n    squaHello() {\r\n        return ""Squarish:"" + super.rectHello().split(':')[1];\r\n    }\r\n}\r\n\r\nfunction testShapes() {\r\n    const rect = new Rectangle(6, 4);\r\n    rect.shoutArea();\r\n\r\n    const squa = new Square(5);\r\n    squa.shoutArea();\r\n    console.log(squa.squaHello());\r\n}\r\n\r\ntestShapes();\r\n""]",0,1
"[""import pandas as pd\r\nimport numpy as np\r\n\r\ndef fill_na_with_pair(df):\r\n    cols = [col for col in df.columns if not col.endswith('_a')]\r\n    df[cols] = df[cols].fillna(df[[f""{col}_a"" for col in cols]].values)\r\n    return df\r\n\r\ndf = pd.DataFrame(\r\n    {\r\n        'x': [1, np.nan, 3, np.nan, 5],\r\n        'y': [np.nan, 7, 8, 9, np.nan],\r\n        'x_a': [1, 2, 3, 4, 5],\r\n        'y_a': [6, 7, 8, 9, 10]\r\n    }\r\n)\r\n\r\nprint(fill_na_with_pair(df))\r\n""]",0,1
"[""from elasticsearch import Elasticsearch\r\n\r\ndef connect_es(es_host, es_port, es_username, es_password):\r\n    return Elasticsearch(f""http://{es_username}:{es_password}@{es_host}:{es_port}"")\r\n\r\nes_host = ""<>""\r\nes_port = ""<>""\r\nes_username = ""<>""\r\nes_password = ""<>""\r\nes_index = ""<>""\r\n\r\nes = connect_es(es_host, es_port, es_username, es_password)\r\nes.indices.refresh(index=es_index)\r\n""]",0,1
"[""import enum\r\nfrom typing import Annotated\r\n\r\nimport uvicorn\r\nfrom fastapi import FastAPI, Query, Depends\r\nfrom pydantic import BaseModel\r\n\r\napp = FastAPI()\r\n\r\nclass MyEnum(str, enum.Enum):\r\n    ab = ""ab""\r\n    cd = ""cd""\r\n\r\n    @classmethod\r\n    def _missing_(cls, value):\r\n        value = value.lower()\r\n        return cls.__members__.get(value)\r\n\r\nclass MyInput(BaseModel):\r\n    q: Annotated[MyEnum, Query(...)]\r\n\r\n@app.get(""/"")\r\ndef test(inp: MyInput = Depends()):\r\n    return ""Hello world""\r\n\r\ndef main():\r\n    uvicorn.run(""run:app"", host=""0.0.0.0"", reload=True, port=8001)\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import torch\r\nimport torch.nn as nn\r\n\r\nclass Hook:\r\n    def __init__(self, model, layer_name='desired_layer'):\r\n        self.model = model\r\n        self.attentions = []\r\n        self.gradients = []\r\n\r\n        for name, module in self.model.named_modules():\r\n            if layer_name in name:\r\n                module.register_forward_hook(self.forward_hook)\r\n                module.register_full_backward_hook(self.backward_hook)\r\n\r\n    def forward_hook(self, module, input, output):\r\n        self.attentions.append(output.detach().cpu())\r\n\r\n    def backward_hook(self, module, grad_input, grad_output):\r\n        self.gradients.append(grad_output[0].detach().cpu())\r\n\r\n    def __call__(self, input_tensor):\r\n        self.model.zero_grad()\r\n        return self.model(input_tensor)\r\n""]",0,1
"[""{\r\n    ""version"": ""0.2.0"",\r\n    ""configurations"": [\r\n        {\r\n            ""name"": ""Python: Prompt for Argument"",\r\n            ""type"": ""python"",\r\n            ""request"": ""launch"",\r\n            ""program"": ""${file}"",\r\n            ""cwd"": ""C:/path/to/base/directory"",\r\n            ""args"": [""${input:data_dir}""],\r\n            ""inputs"": [\r\n                {\r\n                    ""id"": ""data_dir"",\r\n                    ""type"": ""promptString"",\r\n                    ""description"": ""Enter the relative data directory""\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n""]",0,1
"[""import bpy\r\n\r\ndef convert_tris_to_quads(input_path, output_path):\r\n    bpy.ops.wm.read_factory_settings(use_empty=True)\r\n    bpy.ops.import_scene.obj(filepath=input_path)\r\n    obj = bpy.context.selected_objects[0]\r\n    bpy.context.view_layer.objects.active = obj\r\n    bpy.ops.object.mode_set(mode='EDIT')\r\n    bpy.ops.mesh.select_all(action='SELECT')\r\n    bpy.ops.mesh.tris_convert_to_quads(quad_method='FIXED', ngon_method='BEAUTY')\r\n    bpy.ops.object.mode_set(mode='OBJECT')\r\n    bpy.ops.export_scene.obj(filepath=output_path)\r\n\r\nconvert_tris_to_quads('mushroom-shelve-1-merged.obj', 'quad_mesh.obj')\r\n""]",0,1
"[""import numpy as np\r\nimport time\r\nimport matplotlib.pyplot as plt\r\n\r\ndef measure_execution_time(matrix_size=3000, num_iterations=50):\r\n    execution_times1, execution_times2 = [], []\r\n\r\n    for _ in range(num_iterations):\r\n        matrix_a = np.random.rand(matrix_size, matrix_size)\r\n        start = time.time()\r\n        _ = np.matmul(matrix_a, matrix_a)\r\n        execution_times1.append(time.time() - start)\r\n\r\n    for _ in range(num_iterations):\r\n        matrix_b = np.random.rand(matrix_size, matrix_size)\r\n        start = time.time()\r\n        _ = np.matmul(matrix_b, matrix_b.T)\r\n        execution_times2.append(time.time() - start)\r\n\r\n    plt.plot(range(num_iterations), execution_times1, label='A @ A')\r\n    plt.plot(range(num_iterations), execution_times2, label='B @ B.T')\r\n    plt.xlabel('Iteration')\r\n    plt.ylabel('Execution Time')\r\n    plt.title('Matrix Multiplication Execution Time Comparison')\r\n    plt.legend()\r\n    plt.show()\r\n\r\n    return np.mean(execution_times1), np.mean(execution_times2)\r\n\r\nmeasure_execution_time()\r\n""]",0,1
"[""from langchain.chat_models import ChatOpenAI\r\nfrom langchain.prompts import ChatPromptTemplate\r\nfrom langchain.schema.output_parser import StrOutputParser\r\nimport logging\r\n\r\ndef enable_langchain_logging():\r\n    logging.basicConfig(level=logging.INFO)\r\n    logger = logging.getLogger(""langchain"")\r\n    logger.setLevel(logging.DEBUG)\r\n\r\ndef invoke_chain(topic):\r\n    enable_langchain_logging()\r\n    prompt = ChatPromptTemplate.from_template(""tell me a joke about {topic}"")\r\n    model = ChatOpenAI(verbose=True)\r\n    output_parser = StrOutputParser()\r\n    chain = prompt | model | output_parser\r\n    return chain.invoke({""topic"": topic})\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef calculate_Fourier(points, num_coefficients):\r\n    complex_points = np.array([p[0] + 1j * p[1] for p in points])\r\n    t = np.linspace(0, 1, len(complex_points), endpoint=False)\r\n    delta_t = 1 / len(complex_points)\r\n\r\n    c_k = np.array([\r\n        np.sum(complex_points * np.exp(-2j * np.pi * k * t)) * delta_t\r\n        for k in range(-num_coefficients // 2, num_coefficients // 2)\r\n    ])\r\n\r\n    return c_k\r\n""]",0,1
"[""import numpy as np\r\n\r\ndef numpy_comparison(do_cache: bool, array_size: int, num_arrays: int, num_iter: int):\r\n    arrays = {i: np.random.rand(array_size) for i in range(num_arrays)}\r\n    cache = {} if do_cache else None\r\n\r\n    for _ in range(num_iter):\r\n        i, j = np.random.randint(num_arrays, size=2)\r\n        if do_cache:\r\n            a = cache.get((i, j))\r\n            if a is None:\r\n                a = arrays[i] + arrays[j]\r\n                cache[(i, j)] = a\r\n        else:\r\n            a = arrays[i] + arrays[j]\r\n""]",0,1
"[""import concurrent.futures\r\nimport multiprocessing\r\n\r\ndef _do_work(data):\r\n    multiprocessing.current_process().daemon = True\r\n    return data\r\n\r\ndef process_with_executor(n_workers, data_list):\r\n    with concurrent.futures.ProcessPoolExecutor(n_workers) as executor:\r\n        result_list = [executor.submit(_do_work, data) for data in data_list]\r\n        for id, future in enumerate(concurrent.futures.as_completed(result_list)):\r\n            print(f'{id}: {future.result()}')\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef count_star_combinations(inp):\r\n    return (inp.groupby(['month', 'item', 'star'])\r\n              .size()\r\n              .unstack(fill_value=0)\r\n              .rename(columns=lambda x: f'star_{x}_cnt')\r\n              .reset_index())\r\n\r\ninp = pd.DataFrame({'month': [1, 1, 1, 1, 1, 2, 2, 2], \r\n                    'item': [10, 10, 10, 10, 20, 20, 20, 20], \r\n                    'star': [1, 2, 1, 3, 3, 2, 2, 3]})\r\n\r\noutput = count_star_combinations(inp)\r\n""]",0,1
"[""import os\r\nimport asyncio\r\nfrom tqdm import tqdm\r\nfrom PIL import Image\r\nimport google.generativeai as genai\r\n\r\nasync def process_image_batch(model, prompt, image_paths):\r\n    tasks = [asyncio.to_thread(process_image, model, prompt, path) for path in image_paths]\r\n    return await asyncio.gather(*tasks)\r\n\r\ndef process_image(model, prompt, image_path):\r\n    img = Image.open(image_path)\r\n    output = model.generate_content([prompt, img])\r\n    return output.text\r\n\r\nasync def main():\r\n    model = genai.GenerativeModel('gemini-pro-vision', safety_settings=safety_settings)\r\n    images_to_process = [os.path.join(image_dir, image_name) for image_name in os.listdir(image_dir)]\r\n    prompt = ""Carefully scan this images: if it has text, extract all the text and return the text from it. If the image does not have text return '<000>'.""\r\n    \r\n    batch_size = 60\r\n    results = []\r\n\r\n    for i in tqdm(range(0, len(images_to_process), batch_size)):\r\n        batch = images_to_process[i:i + batch_size]\r\n        results.extend(await process_image_batch(model, prompt, batch))\r\n\r\n    for text in results:\r\n        print(text)\r\n\r\nasyncio.run(main())\r\n""]",0,1
"[""from fastapi import FastAPI, Request, Depends, Form\r\nfrom fastapi.responses import RedirectResponse\r\nfrom fastapi.templating import Jinja2Templates\r\nfrom starlette import status\r\n\r\napp = FastAPI()\r\ntemplates = Jinja2Templates(directory=""templates"")\r\n\r\n@app.get(""/"", response_class=HTMLResponse, name=""homepage"")\r\nasync def get_main_data(request: Request):\r\n    result = request.session.pop(""result"", None)\r\n    msg = request.session.pop(""msg"", None)\r\n    return templates.TemplateResponse(""home.html"", {""request"": request, ""result"": result, ""msg"": msg})\r\n\r\n@app.post(""/"", name=""homepage_post"")\r\nasync def post_main_data(request: Request, file: str = Form(...)):\r\n    if condition:\r\n        request.session[""result""] = str(trans)\r\n    else:\r\n        request.session[""msg""] = str(err)\r\n    return RedirectResponse(url=app.url_path_for(""homepage""), status_code=status.HTTP_303_SEE_OTHER)\r\n""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\r\nfrom shapely.geometry import Polygon, MultiPolygon\r\nfrom matplotlib.patches import Polygon as MplPolygon\r\nfrom matplotlib.collections import PatchCollection\r\n\r\ndef plot_phase_diagram(df):\r\n    points = df[['x', 'y']].values\r\n    labels = df['label'].values\r\n    colors = df['color'].values\r\n\r\n    vor = Voronoi(points)\r\n    fig, ax = plt.subplots(figsize=(8, 8))\r\n\r\n    patches = []\r\n    for region in vor.regions:\r\n        if not -1 in region and region:\r\n            poly = Polygon([vor.vertices[i] for i in region])\r\n            center = poly.centroid\r\n            label_idx = np.argmin(np.linalg.norm(points - np.array([center.x, center.y]), axis=1))\r\n            color = colors[label_idx]\r\n            patches.append(MplPolygon(list(poly.exterior.coords), closed=True, color=color))\r\n\r\n    p = PatchCollection(patches, match_original=True, edgecolor='black', linewidth=0.5, alpha=0.7)\r\n    ax.add_collection(p)\r\n    ax.set_xlim([-40, 0])\r\n    ax.set_ylim([-30, 10])\r\n    ax.set_xlabel('Log pO2(g)')\r\n    ax.set_ylabel('Log pSO2(g)')\r\n    plt.show()\r\n\r\nplot_phase_diagram(df)\r\n""]",0,1
"[""from pydantic import BaseModel\r\n\r\nclass SnowflakeId(int):\r\n    @classmethod\r\n    def __get_validators__(cls):\r\n        yield cls.validate\r\n\r\n    @classmethod\r\n    def validate(cls, v: str):\r\n        return int(v)\r\n\r\n    @classmethod\r\n    def __modify_schema__(cls, field_schema: dict):\r\n        field_schema[""type""] = ""string""\r\n\r\n    def __str__(self):\r\n        return str(int(self))\r\n\r\nclass Model(BaseModel):\r\n    id: SnowflakeId\r\n\r\n    class Config:\r\n        orm_mode = True\r\n        arbitrary_types_allowed = True\r\n        json_encoders = {SnowflakeId: str}\r\n""]",0,1
"[""from sqlmodel import SQLModel, Field, Relationship, Session, create_engine, select\r\nfrom typing import Optional, List\r\n\r\nclass Node(SQLModel, table=True):\r\n    id: Optional[int] = Field(default=None, primary_key=True)\r\n    data: str\r\n    parent_id: Optional[int] = Field(default=None, foreign_key=""node.id"")\r\n    parent: Optional[""Node""] = Relationship(back_populates=""children"", sa_relationship_kwargs={""remote_side"": ""Node.id""})\r\n    children: List[""Node""] = Relationship(back_populates=""parent"")\r\n\r\ndef insert_nodes(session: Session):\r\n    root = Node(data=""root"")\r\n    child1 = Node(data=""child1"", parent=root)\r\n    child2 = Node(data=""child2"", parent=root)\r\n    session.add(root)\r\n    session.commit()\r\n""]",0,1
"[""from datetime import date\r\nfrom typing import Annotated\r\nfrom pydantic import BaseModel, Field, field_validator, BeforeValidator\r\n\r\ndef to_date(field_name, value, formats, return_str=False):\r\n    for fmt in formats:\r\n        try:\r\n            parsed_date = date.strptime(value, fmt)\r\n            return parsed_date if not return_str else parsed_date.strftime(fmt)\r\n        except ValueError:\r\n            continue\r\n    raise ValueError(f""Invalid date format for field {field_name}"")\r\n\r\ndef custom_date(potential_formats):\r\n    def validate_date(value, info):\r\n        if isinstance(value, date):\r\n            return value\r\n        return to_date(info.alias, value, potential_formats, return_str=False)\r\n    return Annotated[date, BeforeValidator(validate_date)]\r\n\r\nclass ExampleModel(BaseModel):\r\n    dt: custom_date(['%Y-%m-%d', '%Y/%m/%d'])\r\n""]",0,1
"[""import os\r\nimport subprocess\r\nfrom tempfile import TemporaryDirectory\r\nfrom fastapi import FastAPI, UploadFile\r\nfrom fastapi.responses import FileResponse\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/heic"")\r\nasync def heic(img: UploadFile):\r\n    with TemporaryDirectory() as dir:\r\n        inname = os.path.join(dir, ""img.heic"")\r\n        outname = os.path.join(dir, ""out.jpg"")\r\n\r\n        with open(inname, ""wb"") as f:\r\n            f.write(img.file.read())\r\n\r\n        subprocess.run(f""oiiotool {inname} -o {outname}"", shell=True, check=True)\r\n\r\n        return FileResponse(outname, headers={'Content-Disposition': 'attachment; filename=out.jpg'})\r\n""]",0,1
"[""from itertools import combinations\r\n\r\ndef generate_combinations(letters, k, n):\r\n    def helper(remaining, groups):\r\n        if not remaining:\r\n            yield groups\r\n            return\r\n        first_group = combinations(remaining, n)\r\n        for group in first_group:\r\n            new_remaining = set(remaining) - set(group)\r\n            yield from helper(new_remaining, groups + [tuple(sorted(group))])\r\n\r\n    unique_combos = set()\r\n    for combo in helper(set(letters), []):\r\n        unique_combos.add(tuple(sorted(combo)))\r\n    return [list(map(list, combo)) for combo in unique_combos]\r\n""]",0,1
"[""from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline\r\nimport torch\r\n\r\ndef get_logits(texts):\r\n    model_name = ""distilbert-base-uncased-finetuned-sst-2-english""\r\n    tokenizer = AutoTokenizer.from_pretrained(model_name)\r\n    model = AutoModelForSequenceClassification.from_pretrained(model_name)\r\n\r\n    classifier = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)\r\n    \r\n    with torch.no_grad():\r\n        tokenized = tokenizer(texts, padding=True, truncation=True, return_tensors=""pt"")\r\n        logits = model(**tokenized).logits\r\n    \r\n    return logits.tolist()\r\n""]",0,1
"[""def user_login(response: Response, username: str = Form(), password: str = Form(), db: Session = Depends(get_db)):\r\n    user = db.query(models.User).filter(models.User.mobile_number == username).first()\r\n    if not user or not verify_password(password, user.password):\r\n        raise HTTPException(400, detail='wrong phone number or password')\r\n\r\n    access_token = create_access_token(data={""sub"": user.mobile_number})\r\n    response.set_cookie(\r\n        key=""fakesession"", \r\n        value=""fake-cookie-session-value"", \r\n        httponly=True, \r\n        samesite=""None"", \r\n        secure=True\r\n    )\r\n    return {""status"": ""success""}\r\n""]",0,1
"[""from pyspark.sql import SparkSession\r\nfrom pyspark.sql.window import Window\r\nfrom pyspark.sql.functions import sum\r\n\r\ndef window_rows_between_example():\r\n    spark = SparkSession.builder.appName(""WindowExample"").getOrCreate()\r\n    \r\n    data = [(1, ""A"", 10), (2, ""A"", 20), (3, ""A"", 30),\r\n            (4, ""B"", 40), (5, ""B"", 50), (6, ""B"", 60)]\r\n    \r\n    df = spark.createDataFrame(data, [""id"", ""group"", ""value""])\r\n    \r\n    window_spec = Window.partitionBy(""group"").orderBy(""id"").rowsBetween(Window.unboundedPreceding, Window.currentRow)\r\n    \r\n    df = df.withColumn(""cumulative_sum"", sum(""value"").over(window_spec))\r\n    \r\n    df.show()\r\n\r\nwindow_rows_between_example()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef group_by_sorted_names(df):\r\n    return df.group_by(""country"").agg(\r\n        sorted_names := pl.col(""name"").sort_by(""age""),\r\n        sorted_names.first().alias(""age_sort_1""),\r\n        sorted_names.get(2, default=None).alias(""age_sort_2""),\r\n        sorted_names.last().alias(""age_sort_-1"")\r\n    )\r\n\r\ndf = pl.DataFrame(\r\n    {""name"": list(""abcdef""), ""age"": [21, 31, 32, 53, 45, 26], ""country"": list(""AABBBC"")}\r\n)\r\n\r\nresult = group_by_sorted_names(df)\r\n""]",0,1
"[""import asyncio\r\nimport httpx\r\n\r\nasync def fetch(url, client):\r\n    try:\r\n        resp = await client.get(url)\r\n        return resp.text\r\n    except Exception:\r\n        return None\r\n\r\nasync def fetch_all(urls):\r\n    async with httpx.AsyncClient() as client:\r\n        return await asyncio.gather(*(fetch(url, client) for url in urls))\r\n\r\ndef get_html(urls):\r\n    return asyncio.run(fetch_all(urls))\r\n""]",0,1
"[""from dataclasses import dataclass\r\nfrom typing import Protocol\r\n\r\nclass HasA(Protocol):\r\n    a: int\r\n\r\nclass HasHasA(Protocol):\r\n    hasa: HasA\r\n\r\n@dataclass\r\nclass Inner(HasA):\r\n    a: int\r\n\r\n@dataclass\r\nclass Outer(HasHasA):\r\n    hasa: HasA\r\n\r\ndef func(b: HasHasA): ...\r\n\r\no = Outer(Inner(0))\r\nfunc(o)\r\n""]",0,1
"[""torch.onnx.export(model, img, 'detr.onnx', opset_version=16)\r\n     \r\npython\r\n     onnx_model = onnx.load(""detr.onnx"")\r\n     for node in onnx_model.graph.node:\r\n         print(node.op_type)\r\n     \r\npython\r\n     import onnxruntime as ort\r\n     ort_session = ort.InferenceSession(""detr.onnx"")\r\n     outputs = ort_session.run(None, {""input"": img.numpy()})\r\n     \r\nbash\r\n     pip install tf2onnx\r\n     python -m tf2onnx.convert --input detr.onnx --output model.pb --opset 16\r\n     \r\nbash\r\n     pip install --upgrade onnx-tf\r\n     \r\nbash\r\n     pip install onnx2tf\r\n     onnx2tf -i detr.onnx -o tf_model\r\n     tflite_convert --saved_model_dir=tf_model --output_file=detr.tflite\r\n     ""]",0,1
"[""import pandas as pd\r\nfrom sklearn import datasets\r\n\r\ndef mutate_keep_unused(df, new_col_name, expr):\r\n    used_cols = {name.strip() for name in expr.replace('+', ' ').replace('*', ' ').split()}\r\n    df[new_col_name] = df.eval(expr)\r\n    return df.drop(columns=used_cols, errors='ignore')\r\n\r\niris = pd.DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)\r\nresult = mutate_keep_unused(iris, 'new_col', 'sepal length (cm) + petal length (cm) * petal width (cm)')\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef truncate_explode(df):\r\n    min_len = min(df[""a""].arr.lengths().min(), df[""b""].arr.lengths().min())\r\n    df = df.with_columns([\r\n        pl.col(""a"").arr.slice(0, min_len),\r\n        pl.col(""b"").arr.slice(0, min_len)\r\n    ])\r\n    return df.explode([""a"", ""b""])\r\n\r\ndata = {\r\n    ""a"": [[1], [2], [3, 4], [5, 6, 7]],\r\n    ""b"": [[], [8], [9, 10], [11, 12]],\r\n}\r\ndf = pl.DataFrame(data)\r\n\r\nresult = truncate_explode(df)\r\nprint(result)\r\n""]",0,1
"[""from typing import Callable, Dict\r\nfrom functools import wraps\r\n\r\ndef remember(f: Callable[[int], int]) -> Callable[[int], int]:\r\n    class Wrapper:\r\n        memory: Dict[int, int]\r\n\r\n        def __init__(self, f: Callable[[int], int]):\r\n            self.f = f\r\n            self.memory = {}\r\n\r\n        def __call__(self, n: int) -> int:\r\n            if n not in self.memory:\r\n                self.memory[n] = self.f(n)\r\n            return self.memory[n]\r\n\r\n    @wraps(f)\r\n    def wrapper(n: int) -> int:\r\n        return wrapper._wrapper(n)\r\n\r\n    wrapper._wrapper = Wrapper(f)\r\n    return wrapper\r\n\r\n@remember\r\ndef fib(n: int) -> int:\r\n    if n < 2:\r\n        return 1\r\n    return fib(n - 2) + fib(n - 1)\r\n""]",0,1
"[""import contextlib\r\nfrom typing import List, Type\r\n\r\nclass Validator:\r\n    def validate(self, something, *, suppress: List[Type[Exception]] = []) -> None:\r\n        self._check_a(something, suppress)\r\n        self._check_b(something, suppress)\r\n        self._check_c(something, suppress)\r\n\r\n    def _check_a(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if a:\r\n            self._raise(ErrorA(), suppress)\r\n\r\n    def _check_b(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if b:\r\n            self._raise(ErrorB(), suppress)\r\n\r\n    def _check_c(self, something, suppress: List[Type[Exception]]) -> None:\r\n        if c:\r\n            self._raise(ErrorC(), suppress)\r\n\r\n    def _raise(self, e: Exception, suppress: List[Type[Exception]]) -> None:\r\n        with contextlib.suppress(*suppress):\r\n            raise e\r\n""]",0,1
"[""def page_header():\r\n    st.set_page_config(page_title=""xx"", page_icon=""images/logo.png"")\r\n    header = st.container()\r\n    with header:\r\n        logo = Image.open(""images/logo.png"")\r\n        st.image(logo, width=300)\r\n\r\n        ga_code = """"""\r\n        <!-- Google tag (gtag.js) -->\r\n        <script async src=""https://www.googletagmanager.com/gtag/js?id=G-xxxxxx""></script>\r\n        <script>\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag(){dataLayer.push(arguments);}\r\n            gtag('js', new Date());\r\n\r\n            gtag('config', 'G-xxxxxx');\r\n        </script>\r\n        """"""\r\n        st.markdown(ga_code, unsafe_allow_html=True)\r\n\r\ndef main():\r\n    page_header()\r\n    # Other code...\r\n\r\nif __name__ == ""__main__"":\r\n    main()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef calculate_ema_polars(values, span):\r\n    df = pl.DataFrame({'value': values})\r\n    df = df.with_columns(\r\n        pl.col('value').ewm_mean(span=span, adjust=False).alias('ema_9')\r\n    )\r\n    return df\r\n\r\nvalues = [143.15,143.1,143.06,143.01,143.03,143.09,143.14,143.18,143.2,143.2,143.2,143.31,143.38,143.35,143.34,143.25,143.33,143.3,143.33,143.36]\r\ndf = calculate_ema_polars(values, span=9)\r\nprint(df)\r\n""]",0,1
"[""import datetime as dt\r\nfrom zoneinfo import ZoneInfo\r\n\r\ndef handle_dst():\r\n    d0 = dt.datetime(2020, 3, 29, 0, 0, tzinfo=ZoneInfo(""Europe/Paris""))\r\n    d1 = d0 + dt.timedelta(hours=2)\r\n    d2 = d0 + dt.timedelta(hours=3)\r\n    \r\n    d1u = d1.astimezone(dt.timezone.utc)\r\n    d2u = d2.astimezone(dt.timezone.utc)\r\n    \r\n    timedelta_utc = d2u - d1u\r\n    return timedelta_utc\r\n\r\nif __name__ == ""__main__"":\r\n    print(handle_dst())\r\n""]",0,1
"[""from functools import partial\r\nfrom inspect import signature\r\n\r\ndef bar(a, b):\r\n    return a / b\r\n\r\ndef test_partial_behavior():\r\n    f1 = partial(bar, 3)\r\n    assert str(signature(f1)) == '(b)'\r\n    assert f1(6) == 0.5\r\n\r\n    try:\r\n        f1(a=2, b=6)\r\n    except TypeError as e:\r\n        assert str(e) == ""bar() got multiple values for argument 'a'""\r\n\r\n    try:\r\n        f1(c=2, b=6)\r\n    except TypeError as e:\r\n        assert str(e) == ""bar() got an unexpected keyword argument 'c'""\r\n\r\n    f2 = partial(bar, b=3)\r\n    assert str(signature(f2)) == '(a, *, b=3)'\r\n    assert f2(6) == 2.0\r\n    assert f2(6, b=1) == 6.0\r\n\r\n    f3 = partial(bar, a=3)\r\n    assert str(signature(f3)) == '(*, a=3, b)'\r\n\r\nif __name__ == ""__main__"":\r\n    test_partial_behavior()\r\n""]",0,1
"[""import requests\r\n\r\ndef fetch_tokens():\r\n    url = ""https://etherscan.io/tokens""\r\n    headers = {\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n    }\r\n    session = requests.Session()\r\n    session.headers.update(headers)\r\n    response = session.get(url, verify=True)\r\n    return response.text\r\n\r\nprint(fetch_tokens())\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef transform_df(A):\r\n    melted = A.melt(id_vars=[""FIELD_A""], var_name=""FIELD_NAME"", value_name=""VALUE"")\r\n    melted[""FIELD_STR_VALUE""] = melted[""VALUE""].where(melted[""VALUE""].apply(lambda x: isinstance(x, str)))\r\n    melted[""FIELD_NUM_VALUE""] = melted[""VALUE""].where(melted[""VALUE""].apply(lambda x: isinstance(x, (int, float))))\r\n    melted[""ID""] = melted.groupby(""FIELD_A"").cumcount() + 1\r\n    return melted[[""ID"", ""FIELD_A"", ""FIELD_NAME"", ""FIELD_STR_VALUE"", ""FIELD_NUM_VALUE""]]\r\n\r\nA = pd.DataFrame({\r\n    ""FIELD_A"": [123123, 123124, 123144],\r\n    ""FIELD_B"": [8, 7, 99],\r\n    ""FIELD_C"": ['a', 'c', 'x'],\r\n    ""FIELD_D"": [23423, 6464, 234]\r\n})\r\n\r\nresult = transform_df(A)\r\nprint(result)\r\n""]",0,1
"[""from setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name=""myscript"",\r\n    version=""0.0.1"",\r\n    packages=find_packages(where=""src""),\r\n    include_package_data=True,\r\n    install_requires=[\r\n        'Click',\r\n        'boto3',\r\n        'botocore',\r\n    ],\r\n    package_data={\r\n        ""resources.artifacts"": [""*""],\r\n        ""resources"": [""recipe.template.yaml"", ""*.yaml""]\r\n    },\r\n    entry_points={\r\n        'console_scripts': [\r\n            'myscript = code.main:run',\r\n        ],\r\n    },\r\n)\r\n""]",0,1
"[""class FooMeta(type):\r\n    def __len__(cls):\r\n        return 9000\r\n\r\nclass GoodBar(metaclass=FooMeta):\r\n    def __len__(self):\r\n        return 9001\r\n\r\nclass BadBar(metaclass=FooMeta):\r\n    @classmethod\r\n    def __len__(cls):\r\n        return 9002\r\n\r\ndef len_with_classmethod(cls):\r\n    if isinstance(cls, type):\r\n        return cls.__len__()\r\n    return len(cls)\r\n\r\nlen_with_classmethod(BadBar)  # 9002\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef remove_duplicates(df):\r\n    df['pair'] = df.apply(lambda row: tuple(sorted([row['person1'], row['person2']])), axis=1)\r\n    return df.drop_duplicates(subset='pair').drop('pair', axis=1)\r\n\r\ndf = pd.DataFrame({\r\n    """": [0,1,2,3,4,5,6],\r\n    ""person1"": [""ryan"", ""delta"", ""delta"", ""delta"", ""bravo"", ""alpha"", ""ryan""],\r\n    ""person2"": [""delta"", ""ryan"", ""alpha"", ""bravo"", ""delta"", ""ryan"", ""alpha""],\r\n    ""messages"": [1, 1, 2, 3, 3, 9, 9]\r\n})\r\n\r\nfinaldf = remove_duplicates(df)\r\nprint(finaldf)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\nimport functools\r\n\r\ndef combine_series(pls):\r\n    return functools.reduce(lambda a, b: a.join(b, on='index', how='full', coalesce=True), pls).sort(by='index')\r\n\r\nN, C = 300000, 20\r\npls = []\r\nfor i in range(C):\r\n    A = pl.DataFrame({\r\n        ""index"": np.linspace(i, N*3-i, num=N, dtype=np.int32),\r\n        f""A{i}"": np.arange(N, dtype=np.float32),\r\n    })\r\n    pls.append(A)\r\n\r\nresult = combine_series(pls)\r\n""]",0,1
"[""from math import factorial\r\nfrom decimal import Decimal, getcontext\r\nfrom joblib import Parallel, delayed\r\nfrom tqdm import trange\r\nimport time\r\n\r\n\r\ndef calc(n_digits, pos, total):\r\n    # number of iterations\r\n    n = int(n_digits + 1 / 14.181647462725477)\r\n    n = n if n >= 1 else 1\r\n\r\n    # set the number of digits for our numbers\r\n    getcontext().prec = n_digits + 1\r\n\r\n    t = Decimal(0)\r\n    pi = Decimal(0)\r\n    deno = Decimal(0)\r\n\r\n    for k in trange(n, position=pos, desc=f""Job {pos + 1} of {total}"", leave=True, dynamic_ncols=True):\r\n        t = ((-1) ** k) * (factorial(6 * k)) * (13591409 + 545140134 * k)\r\n        deno = factorial(3 * k) * (factorial(k) ** 3) * (640320 ** (3 * k))\r\n        pi += Decimal(t) / Decimal(deno)\r\n\r\n    pi = pi * Decimal(12) / Decimal(640320 ** Decimal(1.5))\r\n    pi = 1 / pi\r\n\r\n    # no need to round\r\n    return pi\r\n\r\n\r\ndef parallel_with_joblib():\r\n    # Define the number of cores to use\r\n    n_cores = 4\r\n\r\n    # Define the tasks (e.g., compute first 100, 200, 300, 400 digits of pi)\r\n    tasks = [1200, 1700, 900, 1400]\r\n\r\n    # Run tasks in parallel\r\n    results = Parallel(n_jobs=n_cores)(delayed(calc)(n, pos, len(tasks)) for (pos, n) in enumerate(tasks))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    parallel_with_joblib()\r\n""]",0,1
"[""import pandas as pd\r\n\r\ndef get_closest_matches(df1, df2):\r\n    result = []\r\n    \r\n    for sec in df1['seconds']:\r\n        closest_idx = (df2['seconds'] - sec).abs().argmin()\r\n        start_idx = max(closest_idx - 2, 0)\r\n        end_idx = min(closest_idx + 2, len(df2) - 1)\r\n        result.append(df2.iloc[start_idx:end_idx + 1])\r\n    \r\n    return pd.concat(result).drop_duplicates().reset_index(drop=True)\r\n\r\ndata1 = {\r\n    'score': [1, 2],\r\n    'seconds': [1140, 2100],\r\n}\r\n\r\ndata2 = {\r\n    'prize': [5.5, 14.5, 14.6, 21, 23, 24, 26, 38, 39, 40, 50],\r\n    'seconds': [840, 1080, 1380, 1620, 1650, 1680, 1700, 1740, 2040, 2100, 2160],\r\n}\r\n\r\ndf1 = pd.DataFrame.from_dict(data1)\r\ndf2 = pd.DataFrame.from_dict(data2)\r\n\r\nresult = get_closest_matches(df1, df2)\r\nprint(result)\r\n""]",0,1
"[""import pydantic\r\nfrom typing import Any\r\nimport random\r\nimport string\r\n\r\nclass ExampleData(pydantic.BaseModel):\r\n    a: int\r\n    b: str = pydantic.Field(min_length=10, max_length=10)\r\n\r\n    @staticmethod\r\n    def example() -> dict[str, Any]:\r\n        return {\r\n            ""a"": random.randint(1, 100),\r\n            ""b"": ''.join(random.choices(string.digits, k=10))\r\n        }\r\n\r\nexample = ExampleData.example()\r\nprint(example)\r\n""]",0,1
"[""class BST:\r\n    def __init__(self, val):\r\n        self.value = val\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def add_child(self, val):\r\n        if self.value:\r\n            if val < self.value:\r\n                if self.left == None:\r\n                    self.left = BST(val)\r\n                else:\r\n                    self.left.add_child(val)\r\n            else:\r\n                if val > self.value:\r\n                    if self.right == None:\r\n                        self.right = BST(val)\r\n                    else:\r\n                        self.right.add_child(val)\r\n        else:\r\n            self.value = val\r\n\r\n    def traverse_pre(self, values=None):\r\n        if values is None:\r\n            values = []\r\n        values.append(self.value)\r\n\r\n        if self.left:\r\n            self.left.traverse_pre(values)\r\n\r\n        if self.right:\r\n            self.right.traverse_pre(values)\r\n\r\n        return values\r\n\r\n\r\nTree = BST(5)\r\nTree.add_child(10)\r\nTree.add_child(8)\r\nTree.add_child(2)\r\nTree.add_child(4)\r\nTree.add_child(7)\r\n\r\nresult = Tree.traverse_pre()\r\nprint(result)\r\n""]",0,1
"[""import base64\r\nimport numpy as np\r\nimport json\r\nimport requests\r\nfrom skimage.transform import resize\r\nfrom matplotlib.pyplot import imread\r\n\r\nif __name__ == '__main__':\r\n    path_to_img = ""my image path""\r\n\r\n    image = imread(path_to_img)\r\n    image = resize(image, (512, 512))\r\n\r\n    image_byte = base64.b64encode(image.tobytes())\r\n    data = {""shape"": image.shape, ""image"": image_byte.decode()}\r\n\r\n    response = requests.post('http://127.0.0.1:8000/myapp/v1/filter/a', data=json.dumps(data))\r\n\r\n\r\nfrom fastapi import FastAPI\r\nimport numpy as np\r\nimport base64\r\nimport uvicorn\r\n\r\napp = FastAPI()\r\n\r\n@app.post(""/myapp/v1/filter/a"")\r\nasync def style_transfer(data: dict):\r\n    image_byte = data.get('image').encode()\r\n    image_shape = tuple(data.get('shape'))\r\n    image_array = np.frombuffer(base64.b64decode(image_byte), dtype=np.float32).reshape(image_shape)\r\n""]",0,1
"[""import base64\r\nfrom time import perf_counter\r\nfrom binascii import a2b_base64\r\nimport concurrent.futures as fut\r\nfrom time import sleep\r\nfrom gc import collect\r\nfrom multiprocessing import cpu_count\r\n\r\ndef reference_implementation(encoded):\r\n    return base64.b64decode(encoded)\r\n\r\ndef implmementation1(encoded):\r\n    return a2b_base64(encoded)\r\n\r\ndef threaded_impl(encoded, N):\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i * lbatch:(i + 1) * lbatch] for i in range(N - 1)]\r\n    batches.append(encoded[(N - 1) * lbatch:])\r\n    ret = bytes()\r\n    with fut.ThreadPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\ndef mutiproc_impl(encoded, N):\r\n    d = len(encoded) // N\r\n    lbatch = (d // 4) * 4\r\n    batches = [encoded[i * lbatch:(i + 1) * lbatch] for i in range(N - 1)]\r\n    batches.append(encoded[(N - 1) * lbatch:])\r\n    ret = bytes()\r\n    with fut.ProcessPoolExecutor(max_workers=N) as executor:\r\n        for result in executor.map(a2b_base64, batches):\r\n            ret += result\r\n    return ret\r\n\r\nif __name__ == ""__main__"":\r\n    CPU_NUM = cpu_count()\r\n\r\n    repeat = 60000000\r\n    large_b64_string = b'VGhpcyBzdHJpbmcgaXMgZm9ybWF0dGVkIHRvIGJlIGVuY29kZWQgd2l0aG91dCBwYWRkaW5nIGJ5dGVz' * repeat\r\n\r\n    print(""\nreference_implementation"")\r\n    t_start = perf_counter()\r\n    dec1 = reference_implementation(large_b64_string)\r\n    t_end = perf_counter()\r\n    print('decoding time =', (t_end - t_start))\r\n\r\n    sleep(1)\r\n\r\n    print(""\nimplmementation1"")\r\n    t_start = perf_counter()\r\n    dec2 = implmementation1(large_b64_string)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec2 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec2\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nthreaded_impl"")\r\n    t_start = perf_counter()\r\n    dec3 = threaded_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec3 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec3\r\n    collect()\r\n\r\n    sleep(1)\r\n\r\n    print(""\nmutiproc_impl"")\r\n    t_start = perf_counter()\r\n    dec4 = mutiproc_impl(large_b64_string, CPU_NUM)\r\n    t_end = perf_counter()\r\n    print(""Verify result"", ""Ok"" if dec4 == dec1 else ""FAIL"")\r\n    print('decoding time =', (t_end - t_start))\r\n    del dec4\r\n    collect()\r\n""]",0,1
"[""import pandas as pd\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\ndef fetch_bmv_data():\r\n    url = 'https://www.bmv.com.mx/es/mercados/capitales'\r\n    page = requests.get(url)\r\n    soup = BeautifulSoup(page.text, 'lxml')\r\n    \r\n    headers = [""EMISORA"", ""SERIE"", ""HORA"", ""ÃÂLTIMO"", ""PPP"", ""ANTERIOR"", ""MÃÂXIMO"", ""MÃÂNIMO"", ""VOLUMEN"", ""IMPORTE"", ""OPS."", ""VAR PUNTOS"", ""VAR %""]\r\n    df = pd.DataFrame(columns=headers)\r\n\r\n    rows = soup.find_all('tr', {""role"": ""row""})\r\n    for row in rows:\r\n        cells = row.find_all('td')\r\n        if len(cells) > 1:\r\n            data = [cell.get_text(strip=True).replace('\n', '') for cell in cells]\r\n            df.loc[len(df)] = data\r\n    \r\n    return df\r\n\r\ndf = fetch_bmv_data()\r\nprint(df)\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef unpack_sector_exposure(df):\r\n    return df.with_columns(\r\n        pl.col(""sector_exposure"")\r\n        .str.split("";"")\r\n        .arr.eval(\r\n            pl.element().str.split(""="").arr.get(1).cast(pl.Float64),\r\n            return_dtype=pl.List(pl.Float64),\r\n        )\r\n        .alias(""exposures"")\r\n    ).unnest(""exposures"")\r\n\r\ndf = pl.DataFrame(\r\n    pl.Series(""sector_exposure"", [\r\n        ""Technology=0.207;Financials=0.090;Health Care=0.084;Consumer Discretionary=0.069"", \r\n        ""Financials=0.250;Health Care=0.200;Consumer Staples=0.150;Industrials=0.400""\r\n    ])\r\n)\r\n\r\nunpacked_df = unpack_sector_exposure(df)\r\nprint(unpacked_df)\r\n""]",0,1
"[""import polars as pl\r\nimport numpy as np\r\n\r\ndef simulate_events(df):\r\n    return df.with_columns(\r\n        pl.col(""daily_n"").zip(pl.col(""prob""))\r\n        .apply(lambda x: np.random.binomial(n=x[0], p=x[1], size=1), return_dtype=pl.Int32)\r\n        .alias('events')\r\n    )\r\n\r\ndf_sim = pl.DataFrame({\r\n    ""daily_n"": [1000, 2000, 3000, 4000],\r\n    ""prob"": [.5, .5, .5, .6],\r\n    ""size"": 1\r\n})\r\n\r\ndf_sim = simulate_events(df_sim)\r\n""]",0,1
"[""import seaborn as sns\r\nimport matplotlib.pyplot as plt\r\nfrom statannotations.Annotator import Annotator\r\n\r\ntips = sns.load_dataset(""tips"")\r\n\r\ng = sns.catplot(x=""sex"", y=""total_bill"", hue=""smoker"", row=""time"", data=tips, kind=""bar"", ci=""sd"",\r\n                edgecolor=""black"", errcolor=""black"", errwidth=1.5, capsize=0.1, height=4, aspect=.7, alpha=0.5)\r\n\r\ng.map(sns.stripplot, 'sex', 'total_bill', 'smoker', hue_order=['Yes', 'No'], order=['Male', 'Female'],\r\n      palette=sns.color_palette(), dodge=True, alpha=0.6, ec='k', linewidth=1)\r\n\r\npairs = [\r\n    ((""Male"", ""Yes""), (""Male"", ""No"")),\r\n    ((""Female"", ""Yes""), (""Female"", ""No""))\r\n]\r\n\r\nannot = Annotator(g.ax, pairs, data=tips, x=""sex"", y=""total_bill"", hue=""smoker"", hue_order=['Yes', 'No'])\r\nannot.configure(test='Mann-Whitney', text_format='simple', loc='inside', verbose=2)\r\nannot.apply_test().annotate()\r\n\r\nplt.show()\r\n""]",0,1
"[""import numpy as np\r\nfrom timeit import timeit\r\n\r\ndef compare_dot_vs_matmul(N=1300):\r\n    xx = np.random.randn(N, N) + 1j\r\n    yy = np.random.randn(N, N) + 1j\r\n\r\n    x = np.real(xx)\r\n    y = np.real(yy)\r\n    \r\n    assert np.shares_memory(x, xx)\r\n    assert np.shares_memory(y, yy)\r\n\r\n    dot = timeit('np.dot(x,y)', number=10, globals=globals())\r\n    matmul = timeit('np.matmul(x,y)', number=10, globals=globals())\r\n\r\n    print('time for np.matmul: ', matmul)\r\n    print('time for np.dot: ', dot)\r\n\r\ncompare_dot_vs_matmul()\r\n""]",0,1
"[""import numpy as np\r\nimport pandas as pd\r\nimport plotly.graph_objs as go\r\nimport plotly.figure_factory as ff\r\nimport geopandas as gpd\r\nimport json\r\n\r\ndef plot_hexbin_with_boundary():\r\n    data = pd.DataFrame({\r\n        'LAT': [1,5,6,7,5,6,7,5,6,7,5,6,7,12,-40,50],\r\n        'LON': [10,10,11,12,10,11,12,10,11,12,10,11,12,-20,40,50],\r\n    })\r\n\r\n    gdf_poly = gpd.read_file(gpd.datasets.get_path(""naturalearth_lowres""))\r\n    gdf_poly = gdf_poly.drop('name', axis=1)\r\n\r\n    Afr_gdf_area = gdf_poly[gdf_poly['continent'] == 'Africa'].reset_index(drop=True)\r\n\r\n    fig = ff.create_hexbin_mapbox(data_frame=data,\r\n                               lat=""LAT"", \r\n                               lon=""LON"",\r\n                               nx_hexagon=25,\r\n                               opacity=0.4,\r\n                               labels={""color"": ""Point Count""},\r\n                               mapbox_style='carto-positron',\r\n                               zoom=1\r\n                               )\r\n\r\n    fig.update_layout(mapbox={\r\n        ""layers"": [\r\n            {""source"": json.loads(Afr_gdf_area.geometry.to_json()),\r\n             ""below"": ""traces"",\r\n             ""type"": ""fill"",\r\n             ""color"": ""orange"",\r\n             ""opacity"": 0.1,\r\n             ""line"": {""width"": 1}\r\n            },\r\n        ],\r\n    })\r\n\r\n    fig.show()\r\n\r\nplot_hexbin_with_boundary()\r\n""]",0,1
"[""import sys\r\nimport subprocess\r\nimport matplotlib\r\n\r\ndef install_matplotlib():\r\n    subprocess.check_call([sys.executable, ""-m"", ""pip"", ""install"", ""matplotlib""])\r\n\r\ntry:\r\n    import matplotlib.pyplot as plt\r\nexcept ImportError:\r\n    install_matplotlib()\r\n    import matplotlib.pyplot as plt\r\n\r\nwith open('notebook.txt', encoding='utf-8') as file:\r\n    contents = file.readlines()\r\n\r\nnewList = []\r\nfor content in contents:\r\n    newContent = content.replace('\n', '')\r\n    money = newContent.split(':')[-1]\r\n    newList.append(int(money))\r\n\r\nx = [1, 2, 3, 4, 5, 6]\r\ny = newList\r\nplt.plot(x, y, 'r')\r\nplt.xlabel('month')\r\nplt.ylabel('money')\r\nplt.legend()\r\nplt.show()\r\n""]",0,1
"[""from unittest import mock\r\nimport psycopg2\r\nfrom db import PostgresqlApi\r\n\r\ndef mock_db_connection():\r\n    mock_db = mock.Mock()\r\n    mock_cursor = mock.Mock()\r\n    mock_db.cursor.return_value = mock_cursor\r\n    mock_db.commit = mock.MagicMock()\r\n    return mock_db, mock_cursor\r\n\r\ndef test_postgresql_api():\r\n    with mock.patch('psycopg2.connect', mock_db_connection):\r\n        db = PostgresqlApi()\r\n        db.add_event(event=""Test Event"")\r\n        db.events()\r\n        db.close()\r\n""]",0,1
"[""import polars as pl\r\n\r\ndef aggregate_fqid(df):\r\n    return df.groupby(""session_id"").agg(\r\n        pl.col(""fqid"").value_counts().alias(""fqid_counts"")\r\n    ).with_columns(\r\n        pl.col(""fqid_counts"").apply(lambda x: pl.DataFrame(x).rename({""fqid"": ""fqid_"" + str(cat) for cat in x[""fqid""].unique()}), return_dtype=pl.Object)\r\n    ).explode(""fqid_counts"")\r\n\r\ndf = pl.DataFrame({\r\n    ""session_id"": [20090312431273200, 20090312431273200, 20090312431273200, 20090312431273200],\r\n    ""fqid"": [""intro"", ""gramps"", ""gramps"", ""teddy""],\r\n    ""elapsed_time"": [0, 1323, 831, 5197]\r\n})\r\n\r\nresult = aggregate_fqid(df)\r\nresult.show()\r\n""]",0,1
"[""from fastapi import FastAPI, Request\r\nfrom starlette.middleware.base import BaseHTTPMiddleware\r\nfrom starlette.responses import Response\r\nimport json\r\n\r\nclass AddMetadataMiddleware(BaseHTTPMiddleware):\r\n    async def dispatch(self, request: Request, call_next):\r\n        response = await call_next(request)\r\n\r\n        body = b""""\r\n        async for chunk in response.body_iterator:\r\n            body += chunk\r\n\r\n        data = {}\r\n        data[""data""] = json.loads(body.decode())\r\n        data[""metadata""] = {\r\n            ""some_data_key_1"": ""some_data_value_1"",\r\n            ""some_data_key_2"": ""some_data_value_2"",\r\n            ""some_data_key_3"": ""some_data_value_3""\r\n        }\r\n\r\n        body = json.dumps(data, indent=2).encode(""utf-8"")\r\n\r\n        return Response(content=body, status_code=response.status_code, media_type=response.media_type)\r\n\r\napp = FastAPI()\r\n\r\napp.add_middleware(AddMetadataMiddleware)\r\n""]",0,1
"[""from Crypto.PublicKey import RSA\r\nfrom Crypto.Cipher import PKCS1_v1_5\r\nfrom Crypto.Util.Padding import pad\r\n\r\ndef encrypt_data(modulus, exponent, string1, string2):\r\n    key = RSA.construct((int.from_bytes(modulus, 'big'), int.from_bytes(exponent, 'big')))\r\n    cipher = PKCS1_v1_5.new(key)\r\n    \r\n    data = (string1 + string2).encode()\r\n    encrypted_data = cipher.encrypt(pad(data, key.size_in_bytes()))\r\n    \r\n    return encrypted_data\r\n""]",0,1
"[""# pyproject.toml\r\n\r\n[build-system]\r\nrequires = [""setuptools>=61.0"", ""numpy>=1.17"", ""cython>=0.18""]\r\nbuild-backend = ""setuptools.build_meta""\r\n\r\n[tool.setuptools]\r\npackage-dir = {"""" = "".""}\r\n\r\n[tool.setuptools.packages]\r\nfind = {}\r\n\r\n[tool.setuptools.cmdclass]\r\nbuild_ext = ""_custom_build.build_ext""\r\neditable = ""_custom_build.editable""\r\n\r\n# _custom_build.py\r\n\r\nfrom setuptools.command.build_ext import build_ext as _build_ext\r\nfrom setuptools import Extension\r\nfrom Cython.Build import cythonize\r\nimport os\r\nfrom setuptools.command.install import install as _install\r\n\r\nclass build_ext(_build_ext):\r\n    def initialize_options(self):\r\n        super().initialize_options()\r\n        if self.distribution.ext_modules is None:\r\n            self.distribution.ext_modules = []\r\n        extensions = Extension('module_name', sources=['module_name.pyx'])\r\n        self.distribution.ext_modules.extend(cythonize(extensions))\r\n\r\n    def build_extensions(self):\r\n        super().build_extensions()\r\n\r\nclass editable(_install):\r\n    def run(self):\r\n        self.run_command('build_ext')\r\n        super().run()\r\n""]",0,1
"[""from pydantic import BaseModel, ValidationError, root_validator\r\n\r\nclass Salary(BaseModel):\r\n    gross: int\r\n    net: int\r\n    tax: int\r\n\r\nclass Employee(BaseModel):\r\n    name: str\r\n    age: int\r\n    salary: Salary\r\n\r\n    @root_validator(pre=True)\r\n    def check_all(cls, values):\r\n        try:\r\n            Salary(**values['salary'])\r\n        except ValidationError as e:\r\n            raise e\r\n        return values\r\n\r\nsalary = {""gross"": ""hello"", ""net"": 1000, ""tax"": 10}\r\nemployee = {""name"": ""Mattia"", ""age"": ""hello"", ""salary"": salary}\r\n\r\ntry:\r\n    emp = Employee(**employee)\r\nexcept ValidationError as e:\r\n    print(e.errors())\r\n""]",0,1
